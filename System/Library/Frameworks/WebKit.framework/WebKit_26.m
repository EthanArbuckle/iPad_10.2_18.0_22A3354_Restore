uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl ***)(a1 + 8);
    do
    {
      v5 = (WTF::StringImpl *)*(v4 - 1);
      if (v5 != (WTF::StringImpl *)-1)
      {
        a2 = *v4;
        *v4 = 0;
        if (a2)
        {
          std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v4, a2);
          v5 = (WTF::StringImpl *)*(v4 - 1);
        }
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _QWORD *v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  WTF::StringImpl **v30;
  WTF::StringImpl **v31;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = v8 + 16 * v14;
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = (_QWORD *)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = (uint64_t)v12;
    }
    WTF::String::operator=((WTF::StringImpl **)v15, (WTF::StringImpl *)a2);
    v17 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    v18 = *(WTF::StringImpl ***)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v17;
    if (v18)
      std::default_delete<WTF::URL>::operator()[abi:sn180100](v15 + 8, v18);
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v23 = *a1;
    if (*a1)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_28:
        v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v15);
        v23 = *a1;
        if (*a1)
          v26 = *(unsigned int *)(v23 - 4);
        else
          v26 = 0;
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_28;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v23 + 16 * v26;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  if (!WTF::equal(v16, *a2, a3))
    goto LABEL_13;
  v21 = *a1;
  if (*a1)
    v22 = *(unsigned int *)(v21 - 4);
  else
    v22 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v21 + 16 * v22;
  *(_BYTE *)(a4 + 16) = 0;
  v27 = v8 + 16 * v14;
  v28 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v31 = *(WTF::StringImpl ***)(v27 + 8);
  v29 = (_QWORD *)(v27 + 8);
  v30 = v31;
  *v29 = v28;
  if (v31)
    std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v29, v30);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _QWORD *v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  _QWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl ***v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = *((_DWORD *)v14 + 4);
          if (v20 >= 0x100)
            v21 = v20 >> 8;
          else
            v21 = WTF::StringImpl::hashSlowCase(v14);
          v22 = 0;
          do
          {
            v23 = v21 & v19;
            v21 = ++v22 + v23;
          }
          while (*(_QWORD *)(v18 + 16 * v23));
          v24 = v18 + 16 * v23;
          v26 = (_QWORD *)(v24 + 8);
          v25 = *(WTF::StringImpl ***)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v25)
          {
            std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v26, v25);
            v28 = *(WTF::StringImpl **)v24;
            *(_QWORD *)v24 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v27);
              else
                *(_DWORD *)v28 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v24 = 0;
          }
          v29 = *v13;
          *v13 = 0;
          *(_QWORD *)v24 = v29;
          v30 = v6 + 16 * v11;
          v32 = *(_QWORD *)(v30 + 8);
          v31 = (WTF::StringImpl ***)(v30 + 8);
          *v31 = 0;
          *v26 = v32;
          v10 = *v31;
          *v31 = 0;
          if (v10)
            std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v31, v10);
          v33 = *v13;
          *v13 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v33 -= 2;
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v17 = *(WTF::StringImpl ***)(v15 + 8);
          v16 = (_QWORD *)(v15 + 8);
          v10 = v17;
          *v16 = 0;
          if (v17)
          {
            std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v16, v10);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::VirtualCredential>::destruct(*(WTF **)a1, (WTF *)(*(_QWORD *)a1 + 72 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::VectorDestructor<true,WebKit::VirtualCredential>::destruct(WTF *result, WTF *a2)
{
  WTF *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (result != a2)
  {
    v3 = result;
    do
    {
      if (*((_BYTE *)v3 + 48))
      {
        v4 = (WTF *)*((_QWORD *)v3 + 4);
        if (v4)
        {
          *((_QWORD *)v3 + 4) = 0;
          *((_DWORD *)v3 + 10) = 0;
          WTF::fastFree(v4, a2);
        }
      }
      v5 = (WTF::StringImpl *)*((_QWORD *)v3 + 3);
      *((_QWORD *)v3 + 3) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      result = *(WTF **)v3;
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v3 = (WTF *)((char *)v3 + 72);
    }
    while (v3 != a2);
  }
  return result;
}

WTF *WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  int i;
  unsigned int v14;
  WTF *v15;
  WTF *v16;
  unsigned int v17;
  WTF *result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  WTF **v28;
  unsigned int v29;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF *)(v8 + 24 * (v11 & v9));
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = (WTF *)(v8 + 24 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    WTF::String::operator=((WTF::StringImpl **)v15, (WTF::StringImpl *)a2);
    v17 = *((_DWORD *)v15 + 5);
    if (v17)
      WTF::VectorDestructor<true,WebKit::VirtualCredential>::destruct(*((WTF **)v15 + 1), (WTF *)(*((_QWORD *)v15 + 1) + 72 * v17));
    result = WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v15 + 8, a3);
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v23 = *a1;
    if (*a1)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_28:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v15);
        v15 = result;
        v23 = *a1;
        if (*a1)
          LODWORD(v26) = *(_DWORD *)(v23 - 4);
        else
          LODWORD(v26) = 0;
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_28;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v23 + 24 * v26;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, a3))
    goto LABEL_13;
  v21 = *a1;
  if (*a1)
    v22 = *(_DWORD *)(v21 - 4);
  else
    v22 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v21 + 24 * v22;
  *(_BYTE *)(a4 + 16) = 0;
  v27 = v8 + 24 * v14;
  v28 = (WTF **)(v27 + 8);
  v29 = *(_DWORD *)(v27 + 20);
  if (v29)
    WTF::VectorDestructor<true,WebKit::VirtualCredential>::destruct(*v28, (WTF *)((char *)*v28 + 72 * v29));
  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v28, a3);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  WTF::StringImpl **v20;
  _QWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t result;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastZeroedMalloc((WTF *)(24 * v5 + 16));
  *a1 = v6 + 16;
  *(_DWORD *)(v6 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v8 = 0;
    v9 = 0;
    v10 = v3;
    do
    {
      v11 = (WTF::StringImpl **)(v2 + 24 * v8);
      v12 = *v11;
      if (*v11 != (WTF::StringImpl *)-1)
      {
        if (v12)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = *((_DWORD *)v12 + 4);
          if (v16 >= 0x100)
            v17 = v16 >> 8;
          else
            v17 = WTF::StringImpl::hashSlowCase(v12);
          v18 = 0;
          do
          {
            v19 = v17 & v15;
            v20 = (WTF::StringImpl **)(v14 + 24 * (v17 & v15));
            v17 = ++v18 + (v17 & v15);
          }
          while (*v20);
          v21 = (_QWORD *)(v14 + 24 * v19 + 8);
          WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v7);
          v23 = *v20;
          *v20 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = *v11;
          *v11 = 0;
          *v20 = v24;
          v25 = v2 + 24 * v8;
          *v21 = 0;
          *(_QWORD *)(v14 + 24 * v19 + 16) = 0;
          v26 = *(_QWORD *)(v25 + 8);
          v25 += 8;
          *(_QWORD *)v25 = 0;
          *v21 = v26;
          LODWORD(v24) = *(_DWORD *)(v25 + 8);
          *(_DWORD *)(v25 + 8) = 0;
          v27 = v14 + 24 * v19;
          *(_DWORD *)(v27 + 16) = (_DWORD)v24;
          LODWORD(v24) = *(_DWORD *)(v25 + 12);
          *(_DWORD *)(v25 + 12) = 0;
          *(_DWORD *)(v27 + 20) = (_DWORD)v24;
          WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25, v22);
          v28 = *v11;
          *v11 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v7);
            else
              *(_DWORD *)v28 -= 2;
          }
          if (v11 == a2)
            v9 = v14 + 24 * v19;
        }
        else
        {
          WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2 + 24 * v8 + 8, v7);
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v7);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
      }
      ++v8;
    }
    while (v8 != v10);
  }
  else
  {
    v9 = 0;
    result = 0;
    if (!v2)
      return result;
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v9;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 12) - 1;
  else
    v4 = -1;
  *(_DWORD *)(v3 - 12) = v4;
  v5 = *a1;
  if (*a1)
  {
    v6 = 6 * *(_DWORD *)(v5 - 12);
    v7 = *(_DWORD *)(v5 - 4);
    if (v6 < v7 && v7 >= 9)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v7 >> 1, 0);
  }
}

void WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::UniqueRef<WebKit::VirtualAuthenticatorConfiguration>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  _QWORD *v4;
  WTF::StringImpl **v5;

  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a1, a2);
  v5 = *(WTF::StringImpl ***)(a1 + 8);
  v4 = (_QWORD *)(a1 + 8);
  v3 = v5;
  *v4 = 0;
  if (v5)
    std::default_delete<WTF::URL>::operator()[abi:sn180100]((int)v4, v3);
}

uint64_t WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::VirtualCredential>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v3 = WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = a1[3];
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 72 * v4;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  v7 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v6 = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v6 + 8) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  v8 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v6 + 16) = v8;
  v9 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  v10 = v6 + 32;
  *(_DWORD *)(v10 - 20) = v7;
  *(_QWORD *)(v10 - 8) = v9;
  *(_BYTE *)(v10 + 16) = 0;
  v11 = (_BYTE *)(v10 + 16);
  if (*(_BYTE *)(v3 + 48))
  {
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    v12 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)v10 = v12;
    v13 = *(_DWORD *)(v3 + 40);
    *(_DWORD *)(v3 + 40) = 0;
    v14 = v5 + 72 * v4;
    *(_DWORD *)(v14 + 40) = v13;
    v15 = *(_DWORD *)(v3 + 44);
    *(_DWORD *)(v3 + 44) = 0;
    *(_DWORD *)(v14 + 44) = v15;
    *v11 = 1;
  }
  v16 = v5 + 72 * v4;
  v17 = *(_QWORD *)(v3 + 56);
  *(_WORD *)(v16 + 64) = *(_WORD *)(v3 + 64);
  *(_QWORD *)(v16 + 56) = v17;
  ++a1[3];
  return 1;
}

unint64_t WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 72 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  if (result[2] < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 72 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(72 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 0;
        v9 = 72 * v4;
        do
        {
          v10 = &v7[v8 / 4];
          v11 = (char *)v3 + v8;
          *(_QWORD *)v10 = 0;
          *((_QWORD *)v10 + 1) = 0;
          v12 = *(_QWORD *)((char *)v3 + v8);
          *(_QWORD *)v11 = 0;
          *(_QWORD *)v10 = v12;
          LODWORD(v12) = *(_DWORD *)((char *)v3 + v8 + 8);
          *((_DWORD *)v11 + 2) = 0;
          v10[2] = v12;
          LODWORD(v12) = *(_DWORD *)((char *)v3 + v8 + 12);
          *((_DWORD *)v11 + 3) = 0;
          v10[3] = v12;
          v13 = *(_QWORD *)((char *)v3 + v8 + 16);
          *((_QWORD *)v11 + 2) = 0;
          *((_QWORD *)v10 + 2) = v13;
          v14 = *(_QWORD *)((char *)v3 + v8 + 24);
          *((_QWORD *)v11 + 3) = 0;
          *((_QWORD *)v10 + 3) = v14;
          LOBYTE(v7[v8 / 4 + 8]) = 0;
          v15 = &v7[v8 / 4 + 8];
          *((_BYTE *)v10 + 48) = 0;
          if (*((_BYTE *)v3 + v8 + 48))
          {
            *(_QWORD *)v15 = 0;
            *(_QWORD *)&v7[v8 / 4 + 10] = 0;
            v16 = *((_QWORD *)v11 + 4);
            *((_QWORD *)v11 + 4) = 0;
            *(_QWORD *)v15 = v16;
            v17 = *((_DWORD *)v11 + 10);
            *((_DWORD *)v11 + 10) = 0;
            v10[10] = v17;
            v18 = *((_DWORD *)v11 + 11);
            *((_DWORD *)v11 + 11) = 0;
            v10[11] = v18;
            *((_BYTE *)v10 + 48) = 1;
          }
          v19 = *((_QWORD *)v11 + 7);
          *((_WORD *)v10 + 32) = *((_WORD *)v11 + 32);
          *((_QWORD *)v10 + 7) = v19;
          if (v11[48])
          {
            v20 = (WTF *)*((_QWORD *)v11 + 4);
            if (v20)
            {
              *((_QWORD *)v11 + 4) = 0;
              *(_DWORD *)((char *)v3 + v8 + 40) = 0;
              WTF::fastFree(v20, v6);
            }
          }
          v21 = (WTF::StringImpl *)*((_QWORD *)v11 + 3);
          *((_QWORD *)v11 + 3) = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = (WTF::StringImpl *)*((_QWORD *)v11 + 2);
          *((_QWORD *)v11 + 2) = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v22 -= 2;
          }
          result = *(unsigned int **)((char *)v3 + v8);
          if (result)
          {
            *(_QWORD *)((char *)v3 + v8) = 0;
            *((_DWORD *)v11 + 2) = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v8 += 72;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&)#1}>(uint64_t *a1, const void ***a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void **v5;
  size_t v6;

  v2 = *((unsigned int *)a1 + 3);
  if (!(_DWORD)v2)
    return -1;
  v3 = 0;
  v4 = *a1;
  v5 = *a2;
  v6 = *((unsigned int *)*a2 + 3);
  while (*(_DWORD *)(v4 + 12) != (_DWORD)v6 || memcmp(*(const void **)v4, *v5, v6))
  {
    ++v3;
    v4 += 16;
    if (v2 == v3)
      return -1;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::VirtualCredential&>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = a1[3];
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 72 * v4;
  v7 = (WTF *)*(unsigned int *)(v3 + 12);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 12) = (_DWORD)v7;
  if ((_DWORD)v7)
  {
    v8 = (void *)WTF::fastMalloc(v7);
    *(_DWORD *)(v6 + 8) = (_DWORD)v7;
    *(_QWORD *)v6 = v8;
    memcpy(v8, *(const void **)v3, *(unsigned int *)(v3 + 12));
  }
  v9 = *(_DWORD **)(v3 + 16);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v5 + 72 * v4 + 16) = v9;
  v10 = *(_DWORD **)(v3 + 24);
  if (v10)
    *v10 += 2;
  v11 = v5 + 72 * v4;
  *(_QWORD *)(v11 + 24) = v10;
  std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](v11 + 32, v3 + 32);
  v12 = *(_QWORD *)(v3 + 56);
  *(_WORD *)(v11 + 64) = *(_WORD *)(v3 + 64);
  *(_QWORD *)(v11 + 56) = v12;
  ++a1[3];
  return 1;
}

unint64_t WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v7 + 1) = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 4);
          *((_BYTE *)v7 + 20) = *((_BYTE *)v9 + 20);
          v7[4] = v11;
          v12 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v6);
            else
              *(_DWORD *)v12 -= 2;
          }
          result = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 24);
          v7 += 6;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

void WebKit::createPrivateKey(SecKeyRef *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  SecKeyRef v6;
  CFErrorRef v7;
  _QWORD v8[3];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v3 = *MEMORY[0x1E0CD6A50];
  v4 = *MEMORY[0x1E0CD69F8];
  v8[0] = *MEMORY[0x1E0CD6A38];
  v8[1] = v4;
  v5 = *MEMORY[0x1E0CD6A00];
  v9[0] = v3;
  v9[1] = v5;
  v8[2] = *MEMORY[0x1E0CD6A20];
  v9[2] = &unk_1E356FE08;
  v7 = 0;
  v6 = SecKeyCreateRandomKey((CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 3), &v7);
  if (v7)
  {
    *a1 = 0;
    if (v6)
      CFRelease(v6);
  }
  else
  {
    *a1 = v6;
  }
}

void WebKit::credentialIdAndCosePubKeyForPrivateKey(SecKeyRef *a1@<X0>, uint64_t a2@<X8>)
{
  __SecKey *v3;
  CFDataRef v4;
  size_t v5;
  CFErrorRef v6;
  WTF *v7;
  void *v8;
  __CFError *v9;
  void *v10;
  WTF *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  PAL::CryptoDigest *v16;
  WTF *v17;
  CFErrorRef error;
  int v19;
  unsigned int v20;

  v3 = SecKeyCopyPublicKey(*a1);
  error = 0;
  v4 = SecKeyCopyExternalRepresentation(v3, &error);
  if (error)
    CFRelease(error);
  if (v3)
    CFRelease(v3);
  PAL::CryptoDigest::create();
  if (v4)
  {
    -[__CFData bytes](v4, "bytes");
    -[__CFData length](v4, "length");
  }
  PAL::CryptoDigest::addBytes();
  PAL::CryptoDigest::computeHash(v16);
  v5 = v20;
  v6 = error;
  if (v16)
  {
    PAL::CryptoDigest::~CryptoDigest(v16);
    WTF::fastFree(v7, v8);
  }
  v20 = 32;
  v9 = (__CFError *)WTF::fastMalloc((WTF *)0x20);
  v19 = 32;
  error = v9;
  -[__CFData getBytes:range:](v4, "getBytes:range:", v9, 1, 32);
  v17 = (WTF *)WTF::fastMalloc((WTF *)0x20);
  -[__CFData getBytes:range:](v4, "getBytes:range:", v17, 33, 32);
  WebCore::encodeES256PublicKeyAsCBOR();
  if (v17)
    WTF::fastFree(v17, v10);
  v11 = error;
  if (error)
  {
    error = 0;
    v19 = 0;
    WTF::fastFree(v11, v10);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v5;
  if ((_DWORD)v5)
  {
    v12 = (void *)WTF::fastMalloc((WTF *)v5);
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = v12;
    memcpy(v12, v6, v5);
  }
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = v15;
  if (v15)
  {
    v13 = (void *)WTF::fastMalloc((WTF *)v15);
    *(_DWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 16) = v13;
    memcpy(v13, v14, v15);
  }
  if (v14)
    WTF::fastFree((WTF *)v14, v10);
  if (v6)
    WTF::fastFree(v6, v10);
  if (v4)
    CFRelease(v4);
}

void sub_19766B7EC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PAL::CryptoDigest *a11, int a12, WTF *a13, int a14)
{
  const void *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;

  if (v18)
  {
    *(_QWORD *)v16 = 0;
    *(_DWORD *)(v16 + 8) = 0;
    WTF::fastFree(v18, a2);
  }
  if (v17)
    WTF::fastFree(v17, a2);
  if (v15)
    WTF::fastFree(v15, a2);
  if (v14)
    CFRelease(v14);
  _Unwind_Resume(a1);
}

void WebKit::base64PrivateKey(SecKeyRef *a1@<X0>, _QWORD *a2@<X8>)
{
  CFDataRef v3;
  CFErrorRef v4;
  _DWORD *v5;
  CFErrorRef error;

  error = 0;
  v3 = SecKeyCopyExternalRepresentation(*a1, &error);
  v4 = error;
  if (error)
  {
    v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v5 += 2;
    *a2 = v5;
    CFRelease(v4);
  }
  else
  {
    MEMORY[0x19AEABCC8](a2, -[__CFData base64EncodedStringWithOptions:](v3, "base64EncodedStringWithOptions:", 0));
  }
  if (v3)
    CFRelease(v3);
}

void sub_19766B940(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::privateKeyFromBase64(WebKit *this@<X0>, SecKeyRef *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFDictionary *v8;
  id v9;
  const __CFString *v10;
  const __CFData *v11;
  CFErrorRef v12;
  _QWORD v13[3];
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  v5 = *MEMORY[0x1E0CD6A50];
  v6 = *MEMORY[0x1E0CD69F8];
  v13[0] = *MEMORY[0x1E0CD6A38];
  v13[1] = v6;
  v7 = *MEMORY[0x1E0CD6A00];
  v14[0] = v5;
  v14[1] = v7;
  v13[2] = *MEMORY[0x1E0CD6A20];
  v14[2] = &unk_1E356FE08;
  v8 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 3);
  v9 = objc_alloc(MEMORY[0x1E0C99D50]);
  if (*(_QWORD *)this)
    v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v10 = &stru_1E351F1B8;
  v11 = (const __CFData *)objc_msgSend(v9, "initWithBase64EncodedString:options:", v10, 0);
  v12 = 0;
  *a2 = SecKeyCreateWithData(v11, v8, &v12);
  if (v11)
    CFRelease(v11);
}

void sub_19766BA80(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::signatureForPrivateKey(SecKeyRef *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v7;
  CFDataRef v8;
  char *v9;
  WTF *v10;
  CFErrorRef error;

  v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithBytes:length:", *(_QWORD *)a2, *(unsigned int *)(a2 + 12));
  objc_msgSend(v7, "appendBytes:length:", *(_QWORD *)a3, *(unsigned int *)(a3 + 12));
  error = 0;
  v8 = SecKeyCreateSignature(*a1, (SecKeyAlgorithm)*MEMORY[0x1E0CD6DF8], (CFDataRef)v7, &error);
  if (error)
    CFRelease(error);
  if (v8)
  {
    v9 = (char *)-[__CFData bytes](v8, "bytes");
    v10 = (WTF *)-[__CFData length](v8, "length");
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(a4, v9, v10);
  if (v8)
    CFRelease(v8);
}

void sub_19766BB68(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

CFTypeRef *WebKit::VirtualHidConnection::VirtualHidConnection(uint64_t a1, _DWORD **a2, uint64_t a3, unsigned int **a4)
{
  CFTypeRef *result;
  unsigned int *v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;

  *(_QWORD *)(a1 + 80) = 0;
  result = WebKit::HidConnection::HidConnection((CFTypeRef *)a1, 0);
  *result = off_1E34F3270;
  v8 = *a4;
  if (*a4)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  result[11] = v8;
  v10 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v10 += 2;
  result[12] = v10;
  v11 = *(_DWORD *)(a3 + 8);
  *((_BYTE *)result + 108) = *(_BYTE *)(a3 + 12);
  *((_DWORD *)result + 26) = v11;
  *((_BYTE *)result + 112) = 0;
  *((_BYTE *)result + 160) = 0;
  result[21] = 0;
  result[22] = 0;
  *((_DWORD *)result + 46) = -1;
  v12 = *a2;
  if (*a2)
    *v12 += 2;
  result[24] = v12;
  return result;
}

uint64_t WebKit::VirtualHidConnection::initialize(uint64_t this)
{
  *(_BYTE *)(this + 72) = 1;
  return this;
}

uint64_t WebKit::VirtualHidConnection::terminate(uint64_t this)
{
  *(_BYTE *)(this + 72) = 0;
  return this;
}

uint64_t WebKit::VirtualHidConnection::sendSync()
{
  return 1;
}

void WebKit::VirtualHidConnection::send(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *global_queue;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 80), a1);
  v6 = *(unsigned int **)(a1 + 80);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = *a2;
  *a2 = 0;
  v9 = *a3;
  *a3 = 0;
  v10 = a2[1];
  a2[1] = 0;
  v11 = malloc_type_malloc(0x40uLL, 0x10F00406E16C9EAuLL);
  *v11 = MEMORY[0x1E0C809A0];
  v11[1] = 50331650;
  v11[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::__invoke;
  v11[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::descriptor;
  v11[4] = v6;
  v11[5] = v8;
  v11[6] = v10;
  v11[7] = v9;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, v11);
  _Block_release(v11);
}

uint64_t WebKit::VirtualHidConnection::receiveHidMessage(uint64_t a1, fido::FidoHidMessage *this)
{
  uint64_t result;
  WTF::RunLoop *Packet;
  WTF *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  WTF *v12;
  uint64_t v13;

  for (result = fido::FidoHidMessage::numPackets(this); result; result = fido::FidoHidMessage::numPackets(this))
  {
    Packet = (WTF::RunLoop *)fido::FidoHidMessage::popNextPacket(this);
    WTF::RunLoop::main(Packet);
    v6 = v12;
    v7 = v13;
    v12 = 0;
    v13 = 0;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 80), a1);
    v8 = *(unsigned int **)(a1 + 80);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v10 = &off_1E34F3300;
    v10[1] = v6;
    v10[2] = v7;
    v10[3] = v8;
    v11 = v10;
    WTF::RunLoop::dispatch();
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return result;
}

WTF *WebKit::VirtualHidConnection::recieveResponseCode(uint64_t a1, char a2)
{
  _BYTE *v3;
  WTF *result;
  void *v5;
  _BYTE v6[56];
  WTF *v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  v6[0] = a2;
  v3 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v7, (WTF::FastMalloc *)1, (unint64_t)v6);
  *((_BYTE *)v7 + HIDWORD(v8)) = *v3;
  ++HIDWORD(v8);
  result = (WTF *)fido::FidoHidMessage::create();
  if (v6[48])
  {
    WebKit::VirtualHidConnection::receiveHidMessage(a1, (fido::FidoHidMessage *)v6);
    std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)v6);
    result = v7;
    if (v7)
    {
      v7 = 0;
      LODWORD(v8) = 0;
      return (WTF *)WTF::fastFree(result, v5);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WebKit::VirtualHidConnection::~VirtualHidConnection(WebKit::VirtualHidConnection *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::VirtualHidConnection::~VirtualHidConnection(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF *)*((_QWORD *)this + 21);
  if (v4)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v4, a2);
  }
  std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((WebKit::VirtualHidConnection *)((char *)this + 112));
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
  }
  WebKit::HidConnection::~HidConnection(this);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 10, v10);
}

unsigned int *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int *result;
  unsigned int v6;
  unsigned int v7;

  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v4, a2);
  }
  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v6 = __ldaxr(result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, result));
    if (!v7)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0>(WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0)::{lambda(void *)#1}::__invoke(WTF::RunLoop *a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  WTF::RunLoop::main(a1);
  v2 = (unsigned int *)*((_QWORD *)a1 + 4);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v4 = *((_QWORD *)a1 + 5);
  v5 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = 0;
  v6 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 6) = 0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v7 = &off_1E34F32D8;
  v7[1] = v2;
  v7[2] = v4;
  v7[3] = v6;
  v7[4] = v5;
  v9 = v7;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v9;
  if (v9)
    return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)a1 = &off_1E34F32D8;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E34F32D8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualHidConnection::send(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebKit::HidConnection::DataSent)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  fido::FidoHidMessage *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  size_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  fido::FidoHidInitPacket *inited;
  void *v17;
  WTF *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  int v21;
  void *v22;
  uint64_t Map;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int Bool;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  WTF::StringImpl *String;
  CFTypeRef v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  _QWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t Array;
  uint64_t v50;
  cbor::CBORValue *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  cbor::CBORValue *v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  WTF *v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int v73;
  int v74;
  uint64_t v75;
  char v76;
  void *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF *v80;
  CFTypeRef v81;
  void *v82;
  void *v83;
  WTF *v84;
  void *v85;
  WTF *v86;
  CFTypeRef v87;
  _BYTE *v88;
  void *v89;
  uint64_t v90;
  size_t v91;
  void *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  WTF::FastMalloc *v96;
  void *v97;
  WTF *v98;
  WTF *v99;
  WTF *v100;
  WTF *v101;
  WTF *v102;
  WTF::StringImpl *v103;
  CFTypeRef v104;
  WTF *v105;
  WTF::StringImpl *v106;
  int v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t ByteString;
  CFTypeRef v113;
  WTF::StringImpl *v114;
  void *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  _BYTE *v120;
  uint64_t v121;
  size_t v122;
  WTF::StringImpl *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  WTF::FastMalloc *v127;
  void *v128;
  WTF *v129;
  WTF::StringImpl *v130;
  WTF *v131;
  WTF *v132;
  WTF *v133;
  WTF *v134;
  CFTypeRef v135;
  WTF *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF *v139;
  WTF *v140;
  CFTypeRef v142;
  CFTypeRef cf;
  int v144;
  CFTypeRef v145;
  CFTypeRef v146;
  WTF::StringImpl *v147;
  size_t v148;
  WTF *v149;
  int v150;
  char v151;
  WTF *v152;
  uint64_t v153;
  WTF *v154;
  WTF *v155;
  WTF::StringImpl *v156;
  size_t v157;
  uint64_t v158;
  WTF *p_src;
  WTF *v160[2];
  WTF *v161;
  int v162;
  _DWORD v163[3];
  uint64_t v164;
  CFTypeRef v165;
  void *__src;
  size_t __n;
  WTF *v168;
  int v169;
  __int128 v170;
  __int128 v171;
  WTF *v172;
  int v173;
  char v174;
  char v175;
  char v176;
  WTF *v177;
  int v178;
  char v179;
  unsigned __int8 *v180;
  int v181;
  unsigned int v182;
  SecKeyRef v183;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = (fido::FidoHidMessage *)(v3 + 112);
      if (*(_BYTE *)(v3 + 160))
      {
        fido::FidoHidMessage::addContinuationPacket();
      }
      else
      {
        fido::FidoHidMessage::createFromSerializedData();
        std::__optional_storage_base<fido::FidoHidMessage,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<fido::FidoHidMessage,false>>((fido::FidoHidMessage *)(v3 + 112), (uint64_t)&v170);
        std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v170);
      }
      if (!*(_BYTE *)(v3 + 160))
        goto LABEL_239;
      if (!fido::FidoHidMessage::messageComplete((fido::FidoHidMessage *)(v3 + 112)))
        goto LABEL_237;
      if (!*(_BYTE *)(v3 + 160))
        goto LABEL_237;
      v6 = *(_QWORD *)(v3 + 88);
      if (!v6)
        goto LABEL_237;
      v7 = *(_QWORD *)(v6 + 8);
      if (!v7)
        goto LABEL_237;
      *(_DWORD *)(v3 + 184) = *(_DWORD *)(v3 + 112);
      v8 = *(unsigned __int8 *)(v3 + 116);
      if (v8 != 16)
      {
        if (v8 != 6)
        {
LABEL_236:
          std::__optional_destruct_base<fido::FidoHidMessage,false>::reset[abi:sn180100](v4);
LABEL_237:
          v5 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 1);
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        }
        fido::FidoHidMessage::getMessagePayload((fido::FidoHidMessage *)(v3 + 112));
        v10 = *(WTF **)(v3 + 168);
        if (v10)
        {
          *(_QWORD *)(v3 + 168) = 0;
          *(_DWORD *)(v3 + 176) = 0;
          WTF::fastFree(v10, v9);
        }
        *(_OWORD *)(v3 + 168) = v170;
        v148 = 17;
        v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x11);
        v147 = v11;
        v12 = *(unsigned int *)(v3 + 180);
        if ((_DWORD)v12)
        {
          v13 = *(const void **)(v3 + 168);
          if (v12 < 0x12)
          {
            v15 = 0;
          }
          else
          {
            if (v12 <= 0x16)
              v14 = 22;
            else
              v14 = *(unsigned int *)(v3 + 180);
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v147, (WTF::FastMalloc *)v14);
            v15 = HIDWORD(v148);
            if (v12 < HIDWORD(v148))
            {
              __break(0xC471u);
              JUMPOUT(0x19766D550);
            }
            v11 = v147;
          }
          memcpy((char *)v11 + v15, v13, v12);
          HIDWORD(v148) = v12;
        }
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((unsigned int *)&v147, (WTF::FastMalloc *)0x11);
        if (HIDWORD(v148) >= v12 && HIDWORD(v148) - v12 > 3)
        {
          WTF::cryptographicallyRandomValues();
          inited = (fido::FidoHidInitPacket *)fido::FidoHidInitPacket::FidoHidInitPacket();
          fido::FidoHidInitPacket::getSerializedData(inited);
          WebKit::HidConnection::receiveReport(v3, (uint64_t *)&v177);
          v18 = v177;
          if (v177)
          {
            v177 = 0;
            v178 = 0;
            WTF::fastFree(v18, v17);
          }
          *(_QWORD *)&v170 = &unk_1E34DF130;
          v19 = (WTF *)*((_QWORD *)&v170 + 1);
          if (*((_QWORD *)&v170 + 1))
          {
            *((_QWORD *)&v170 + 1) = 0;
            LODWORD(v171) = 0;
            WTF::fastFree(v19, v17);
          }
          v20 = v147;
          if (v147)
          {
            v147 = 0;
            LODWORD(v148) = 0;
            WTF::fastFree(v20, v17);
          }
          goto LABEL_236;
        }
        goto LABEL_239;
      }
      fido::FidoHidMessage::getMessagePayload((fido::FidoHidMessage *)(v3 + 112));
      if (v182)
      {
        v21 = *v180;
        memmove(v180, v180 + 1, --v182);
        *(_QWORD *)&v170 = v180;
        *((_QWORD *)&v170 + 1) = v182;
        cbor::CBORReader::read();
        if (v21 != 2)
        {
          if (v21 != 1)
          {
LABEL_161:
            v107 = 1;
            goto LABEL_231;
          }
          v174 = 0;
          v170 = 0u;
          v171 = 0u;
          LOBYTE(v172) = 0;
          if (!v179)
            goto LABEL_239;
          Map = cbor::CBORValue::getMap((cbor::CBORValue *)&v177);
          cbor::CBORValue::CBORValue((cbor::CBORValue *)&v147);
          v24 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(Map, (cbor::CBORValue *)&v147);
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v147);
          if (!v179)
            goto LABEL_239;
          if ((_QWORD *)(cbor::CBORValue::getMap((cbor::CBORValue *)&v177) + 8) != v24)
          {
            v25 = cbor::CBORValue::getMap((cbor::CBORValue *)(v24 + 8));
            cbor::CBORValue::CBORValue();
            v26 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v25, (cbor::CBORValue *)&v147);
            cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v147);
            v27 = (_QWORD *)(v25 + 8);
            if ((_QWORD *)(v25 + 8) != v26 && cbor::CBORValue::getBool((cbor::CBORValue *)(v26 + 8)))
            {
              if (!*(_BYTE *)(v3 + 105))
              {
                v71 = v3;
                v72 = 43;
                goto LABEL_92;
              }
              v175 = 1;
            }
            cbor::CBORValue::CBORValue();
            v28 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v25, (cbor::CBORValue *)&v147);
            cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v147);
            if (v27 != v28)
            {
              Bool = cbor::CBORValue::getBool((cbor::CBORValue *)(v28 + 8));
              if (Bool)
              {
                if (!*(_BYTE *)(v3 + 106))
                {
                  v71 = v3;
                  v72 = 44;
                  goto LABEL_92;
                }
                if (!*(_BYTE *)(v3 + 108))
                {
                  v71 = v3;
                  v72 = 39;
                  goto LABEL_92;
                }
              }
              v176 = Bool;
            }
          }
          if (!v179)
            goto LABEL_239;
          v30 = cbor::CBORValue::getMap((cbor::CBORValue *)&v177);
          cbor::CBORValue::CBORValue((cbor::CBORValue *)&v147);
          v31 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v30, (cbor::CBORValue *)&v147);
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v147);
          if (!v179)
            goto LABEL_239;
          if ((_QWORD *)(cbor::CBORValue::getMap((cbor::CBORValue *)&v177) + 8) != v31)
          {
            v32 = cbor::CBORValue::getMap((cbor::CBORValue *)(v31 + 8));
            cbor::CBORValue::CBORValue();
            v33 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v32, (cbor::CBORValue *)&v147);
            cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v147);
            if ((_QWORD *)(v32 + 8) != v33)
            {
              String = (WTF::StringImpl *)cbor::CBORValue::getString((cbor::CBORValue *)(v33 + 8));
              WTF::String::operator=((WTF::StringImpl **)&v171, String);
              WebKit::createPrivateKey((SecKeyRef *)&cf);
              v35 = cf;
              v183 = (SecKeyRef)cf;
              if (cf)
                CFRetain(cf);
              WebKit::base64PrivateKey(&v183, &v147);
              v37 = v147;
              v147 = 0;
              v38 = (WTF::StringImpl *)*((_QWORD *)&v171 + 1);
              *((_QWORD *)&v171 + 1) = v37;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                {
                  WTF::StringImpl::destroy(v38, v36);
                  v79 = v147;
                  v147 = 0;
                  if (v79)
                  {
                    if (*(_DWORD *)v79 == 2)
                      WTF::StringImpl::destroy(v79, v78);
                    else
                      *(_DWORD *)v79 -= 2;
                  }
                }
                else
                {
                  *(_DWORD *)v38 -= 2;
                  v147 = 0;
                }
              }
              v183 = 0;
              if (v35)
                CFRelease(v35);
              if (v179)
              {
                v108 = cbor::CBORValue::getMap((cbor::CBORValue *)&v177);
                cbor::CBORValue::CBORValue((cbor::CBORValue *)&v147);
                v109 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v108, (cbor::CBORValue *)&v147);
                cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v147);
                if (v179)
                {
                  if ((_QWORD *)(cbor::CBORValue::getMap((cbor::CBORValue *)&v177) + 8) == v109
                    || (v110 = cbor::CBORValue::getMap((cbor::CBORValue *)(v109 + 8)),
                        cbor::CBORValue::CBORValue(),
                        v111 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v110, (cbor::CBORValue *)&v147), cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v147), (_QWORD *)(v110 + 8) == v111))
                  {
                    WebKit::VirtualHidConnection::recieveResponseCode(v3, 20);
                    v73 = 1;
LABEL_214:
                    v135 = cf;
                    cf = 0;
                    if (v135)
                      CFRelease(v135);
LABEL_216:
                    if (v174)
                    {
                      v136 = v172;
                      if (v172)
                      {
                        v172 = 0;
                        v173 = 0;
                        WTF::fastFree(v136, v22);
                      }
                    }
                    v137 = (WTF::StringImpl *)*((_QWORD *)&v171 + 1);
                    *((_QWORD *)&v171 + 1) = 0;
                    if (v137)
                    {
                      if (*(_DWORD *)v137 == 2)
                        WTF::StringImpl::destroy(v137, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v137 -= 2;
                    }
                    v138 = (WTF::StringImpl *)v171;
                    *(_QWORD *)&v171 = 0;
                    if (v138)
                    {
                      if (*(_DWORD *)v138 == 2)
                        WTF::StringImpl::destroy(v138, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v138 -= 2;
                    }
                    v139 = (WTF *)v170;
                    if ((_QWORD)v170)
                    {
                      *(_QWORD *)&v170 = 0;
                      DWORD2(v170) = 0;
                      WTF::fastFree(v139, v22);
                    }
                    if (!v73)
                      goto LABEL_161;
                    goto LABEL_230;
                  }
                  ByteString = cbor::CBORValue::getByteString((cbor::CBORValue *)(v111 + 8));
                  std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,void>((uint64_t)&v172, ByteString);
                  v165 = cf;
                  if (cf)
                    CFRetain(cf);
                  WebKit::credentialIdAndCosePubKeyForPrivateKey((SecKeyRef *)&v165, (uint64_t)&__src);
                  v113 = v165;
                  v165 = 0;
                  if (v113)
                    CFRelease(v113);
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v170, (uint64_t)&__src);
                  WebKit::VirtualAuthenticatorManager::addCredential(v7, (WTF::StringImpl **)(v3 + 192), (unint64_t)&v170);
                  v147 = 0;
                  v148 = 0x1000000000;
                  v114 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                  LODWORD(v148) = 16;
                  v147 = v114;
                  bzero(v114, HIDWORD(v148));
                  WebCore::buildAttestedCredentialData();
                  v116 = v147;
                  if (v147)
                  {
                    v147 = 0;
                    LODWORD(v148) = 0;
                    WTF::fastFree(v116, v115);
                  }
                  WebCore::buildAuthData();
                  v160[0] = 0;
                  v160[1] = 0;
                  p_src = (WTF *)v160;
                  cbor::CBORValue::CBORValue((cbor::CBORValue *)&v147, "none");
                  cbor::CBORValue::CBORValue((cbor::CBORValue *)&v156);
                  v154 = (WTF *)&v156;
                  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&p_src, (cbor::CBORValue *)&v156);
                  cbor::CBORValue::operator=();
                  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v156);
                  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v147);
                  cbor::CBORValue::CBORValue();
                  cbor::CBORValue::CBORValue((cbor::CBORValue *)&v156);
                  v154 = (WTF *)&v156;
                  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&p_src, (cbor::CBORValue *)&v156);
                  cbor::CBORValue::operator=();
                  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v156);
                  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v147);
                  v117 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
                  if (*MEMORY[0x1E0CBF738])
                    *(_DWORD *)v117 += 2;
                  v156 = v117;
                  v148 = 0;
                  v149 = 0;
                  v147 = (WTF::StringImpl *)&v148;
                  LOBYTE(v152) = 0;
                  WebCore::buildAttestationMap();
                  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v147, (WTF *)v148);
                  v119 = v156;
                  v156 = 0;
                  if (v119)
                  {
                    if (*(_DWORD *)v119 == 2)
                      WTF::StringImpl::destroy(v119, v118);
                    else
                      *(_DWORD *)v119 -= 2;
                  }
                  MEMORY[0x19AEAC178](&v147, &v154);
                  cbor::CBORValue::CBORValue((cbor::CBORValue *)&v156);
                  v152 = (WTF *)&v156;
                  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&p_src, (cbor::CBORValue *)&v156);
                  cbor::CBORValue::operator=();
                  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v156);
                  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v147);
                  MEMORY[0x19AEAC178](&v147, &p_src);
                  cbor::CBORWriter::write();
                  cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v147);
                  v152 = 0;
                  v153 = 0;
                  if ((_BYTE)v158)
                  {
                    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v152, (WTF::FastMalloc *)(HIDWORD(v157) + 1));
                    LOBYTE(v147) = 0;
                    if (HIDWORD(v153) == (_DWORD)v153)
                    {
                      v120 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v152, (WTF::FastMalloc *)(HIDWORD(v153) + 1), (unint64_t)&v147);
                      *((_BYTE *)v152 + HIDWORD(v153)) = *v120;
                    }
                    else
                    {
                      *((_BYTE *)v152 + HIDWORD(v153)) = 0;
                    }
                    v121 = ++HIDWORD(v153);
                    if ((_BYTE)v158)
                    {
                      v122 = HIDWORD(v157);
                      if (HIDWORD(v157))
                      {
                        v123 = v156;
                        v124 = HIDWORD(v157) + (unint64_t)v121;
                        if (v124 > v153)
                        {
                          v125 = v153 + ((unint64_t)v153 >> 2);
                          v126 = v125 >= 0x10 ? v125 + 1 : 16;
                          v127 = (WTF::FastMalloc *)(v126 <= v124 ? v124 : v126);
                          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&v152, v127);
                          v121 = HIDWORD(v153);
                          if (v124 < HIDWORD(v153))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19766D558);
                          }
                        }
                        memcpy((char *)v152 + v121, v123, v122);
                        HIDWORD(v153) = v124;
                      }
                      if (*(_BYTE *)(v3 + 160))
                      {
                        fido::FidoHidMessage::create();
                        if (v151)
                        {
                          WebKit::VirtualHidConnection::receiveHidMessage(v3, (fido::FidoHidMessage *)&v147);
                          std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v147);
                          v129 = v152;
                          if (v152)
                          {
                            v152 = 0;
                            LODWORD(v153) = 0;
                            WTF::fastFree(v129, v128);
                          }
                          if ((_BYTE)v158)
                          {
                            v130 = v156;
                            if (v156)
                            {
                              v156 = 0;
                              LODWORD(v157) = 0;
                              WTF::fastFree(v130, v128);
                            }
                          }
                          std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v154, v155);
                          std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&p_src, v160[0]);
                          v131 = v161;
                          if (v161)
                          {
                            v161 = 0;
                            v162 = 0;
                            WTF::fastFree(v131, v22);
                          }
                          v132 = *(WTF **)&v163[1];
                          if (*(_QWORD *)&v163[1])
                          {
                            *(_QWORD *)&v163[1] = 0;
                            LODWORD(v164) = 0;
                            WTF::fastFree(v132, v22);
                          }
                          v133 = v168;
                          if (v168)
                          {
                            v168 = 0;
                            v169 = 0;
                            WTF::fastFree(v133, v22);
                          }
                          v134 = (WTF *)__src;
                          if (__src)
                          {
                            __src = 0;
                            LODWORD(__n) = 0;
                            WTF::fastFree(v134, v22);
                          }
                          v73 = 0;
                          goto LABEL_214;
                        }
                      }
                    }
                  }
                }
              }
LABEL_239:
              __break(1u);
              goto LABEL_240;
            }
          }
          v71 = v3;
          v72 = 20;
LABEL_92:
          WebKit::VirtualHidConnection::recieveResponseCode(v71, v72);
          v73 = 1;
          goto LABEL_216;
        }
        if (!v179)
          goto LABEL_239;
        v39 = cbor::CBORValue::getMap((cbor::CBORValue *)&v177);
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v170);
        v40 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v39, (cbor::CBORValue *)&v170);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v170);
        if (!v179)
          goto LABEL_239;
        if ((_QWORD *)(cbor::CBORValue::getMap((cbor::CBORValue *)&v177) + 8) == v40)
        {
          WebKit::VirtualHidConnection::recieveResponseCode(v3, 20);
          goto LABEL_230;
        }
        v41 = *(_DWORD **)cbor::CBORValue::getString((cbor::CBORValue *)(v40 + 8));
        if (v41)
          *v41 += 2;
        v165 = v41;
        if (!v179)
          goto LABEL_239;
        v42 = cbor::CBORValue::getMap((cbor::CBORValue *)&v177);
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v170);
        v43 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v42, (cbor::CBORValue *)&v170);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v170);
        if (!v179)
          goto LABEL_239;
        if ((_QWORD *)(cbor::CBORValue::getMap((cbor::CBORValue *)&v177) + 8) == v43)
        {
          WebKit::VirtualHidConnection::recieveResponseCode(v3, 20);
          v74 = 1;
          goto LABEL_156;
        }
        v44 = cbor::CBORValue::getByteString((cbor::CBORValue *)(v43 + 8));
        v45 = (WTF *)*(unsigned int *)(v44 + 12);
        v154 = 0;
        LODWORD(v155) = 0;
        HIDWORD(v155) = (_DWORD)v45;
        if ((_DWORD)v45)
        {
          v46 = v44;
          LODWORD(v155) = (_DWORD)v45;
          v154 = (WTF *)WTF::fastMalloc(v45);
          memcpy(v154, *(const void **)v46, *(unsigned int *)(v46 + 12));
        }
        *(_QWORD *)&v163[1] = 0;
        v164 = 0;
        if (!v179)
          goto LABEL_239;
        v47 = cbor::CBORValue::getMap((cbor::CBORValue *)&v177);
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v170);
        v48 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v47, (cbor::CBORValue *)&v170);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v170);
        if (!v179)
          goto LABEL_239;
        if ((_QWORD *)(cbor::CBORValue::getMap((cbor::CBORValue *)&v177) + 8) != v48)
        {
          Array = cbor::CBORValue::getArray((cbor::CBORValue *)(v48 + 8));
          v50 = *(unsigned int *)(Array + 12);
          if ((_DWORD)v50)
          {
            v51 = *(cbor::CBORValue **)Array;
            v52 = 32 * v50;
            while (1)
            {
              v53 = cbor::CBORValue::getMap(v51);
              cbor::CBORValue::CBORValue();
              v54 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v53, (cbor::CBORValue *)&v170);
              cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v170);
              if ((_QWORD *)(v53 + 8) == v54)
                break;
              v56 = *((_DWORD *)v54 + 16);
              v55 = (cbor::CBORValue *)(v54 + 8);
              if (v56 != 2)
                break;
              v57 = cbor::CBORValue::getByteString(v55);
              v58 = v57;
              if (HIDWORD(v164) == (_DWORD)v164)
              {
                v59 = WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v163[1], HIDWORD(v164) + 1, v57);
                v60 = *(_QWORD *)&v163[1] + 16 * HIDWORD(v164);
                v61 = (WTF *)*(unsigned int *)(v59 + 12);
                *(_QWORD *)v60 = 0;
                *(_QWORD *)(v60 + 8) = 0;
                *(_DWORD *)(v60 + 12) = (_DWORD)v61;
                if ((_DWORD)v61)
                {
                  v58 = v59;
LABEL_77:
                  v62 = (void *)WTF::fastMalloc(v61);
                  *(_DWORD *)(v60 + 8) = (_DWORD)v61;
                  *(_QWORD *)v60 = v62;
                  memcpy(v62, *(const void **)v58, *(unsigned int *)(v58 + 12));
                }
              }
              else
              {
                v61 = (WTF *)*(unsigned int *)(v57 + 12);
                v60 = *(_QWORD *)&v163[1] + 16 * HIDWORD(v164);
                *(_QWORD *)v60 = 0;
                *(_QWORD *)(v60 + 8) = 0;
                *(_DWORD *)(v60 + 12) = (_DWORD)v61;
                if ((_DWORD)v61)
                  goto LABEL_77;
              }
              ++HIDWORD(v164);
              v51 = (cbor::CBORValue *)((char *)v51 + 32);
              v52 -= 32;
              if (!v52)
                goto LABEL_79;
            }
          }
LABEL_96:
          v75 = v3;
          v76 = 44;
LABEL_97:
          WebKit::VirtualHidConnection::recieveResponseCode(v75, v76);
          v74 = 1;
          goto LABEL_154;
        }
LABEL_79:
        if (!v179)
          goto LABEL_239;
        v63 = cbor::CBORValue::getMap((cbor::CBORValue *)&v177);
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v170);
        v64 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v63, (cbor::CBORValue *)&v170);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v170);
        if (!v179)
          goto LABEL_239;
        if ((_QWORD *)(cbor::CBORValue::getMap((cbor::CBORValue *)&v177) + 8) != v64)
        {
          v65 = cbor::CBORValue::getMap((cbor::CBORValue *)(v64 + 8));
          cbor::CBORValue::CBORValue();
          v66 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v65, (cbor::CBORValue *)&v170);
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v170);
          v67 = (_QWORD *)(v65 + 8);
          if ((_QWORD *)(v65 + 8) != v66 && cbor::CBORValue::getBool((cbor::CBORValue *)(v66 + 8)))
          {
            if (!*(_BYTE *)(v3 + 106))
              goto LABEL_96;
            if (!*(_BYTE *)(v3 + 108))
            {
LABEL_240:
              v75 = v3;
              v76 = 39;
              goto LABEL_97;
            }
          }
          cbor::CBORValue::CBORValue();
          v68 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(v65, (cbor::CBORValue *)&v170);
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v170);
          if (v67 != v68
            && cbor::CBORValue::getBool((cbor::CBORValue *)(v68 + 8))
            && !*(_BYTE *)(v3 + 107))
          {
            goto LABEL_240;
          }
        }
        v69 = *(_QWORD *)(v3 + 88);
        if (v69)
          v70 = *(_QWORD *)(v69 + 8);
        else
          v70 = 0;
        WebKit::VirtualAuthenticatorManager::credentialsMatchingList(v70, (WTF::StringImpl **)(v3 + 192), (const WTF::StringImpl *)&v165, (uint64_t)&v163[1], (uint64_t *)&v161);
        if (!v163[0])
        {
          WebKit::VirtualHidConnection::recieveResponseCode(v3, 46);
          v74 = 1;
          goto LABEL_153;
        }
        v80 = v161;
        v157 = 0;
        v158 = 0;
        v156 = (WTF::StringImpl *)&v157;
        WebCore::buildCredentialDescriptor();
        cbor::CBORValue::CBORValue();
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v147);
        p_src = (WTF *)&v147;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v156, (cbor::CBORValue *)&v147);
        cbor::CBORValue::operator=();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v147);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v170);
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&__src, (WTF *)__n);
        WebKit::privateKeyFromBase64((WTF *)((char *)v80 + 24), (SecKeyRef *)&v146);
        v145 = v146;
        if (v146)
          CFRetain(v146);
        WebKit::credentialIdAndCosePubKeyForPrivateKey((SecKeyRef *)&v145, (uint64_t)&v147);
        v81 = v145;
        v145 = 0;
        if (v81)
          CFRelease(v81);
        *(_QWORD *)&v170 = 0;
        *((_QWORD *)&v170 + 1) = 0x1000000000;
        v82 = (void *)WTF::fastMalloc((WTF *)0x10);
        DWORD2(v170) = 16;
        *(_QWORD *)&v170 = v82;
        bzero(v82, HIDWORD(v170));
        WebCore::buildAttestedCredentialData();
        v84 = (WTF *)v170;
        if ((_QWORD)v170)
        {
          *(_QWORD *)&v170 = 0;
          DWORD2(v170) = 0;
          WTF::fastFree(v84, v83);
        }
        WebCore::buildAuthData();
        cbor::CBORValue::CBORValue();
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&__src);
        p_src = (WTF *)&__src;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v156, (cbor::CBORValue *)&__src);
        cbor::CBORValue::operator=();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&__src);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v170);
        v142 = v146;
        if (v146)
          CFRetain(v146);
        WebKit::signatureForPrivateKey((SecKeyRef *)&v142, (uint64_t)&cf, (uint64_t)&v154, (uint64_t)&p_src);
        cbor::CBORValue::CBORValue();
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&__src);
        v183 = (SecKeyRef)&__src;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v156, (cbor::CBORValue *)&__src);
        cbor::CBORValue::operator=();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&__src);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v170);
        v86 = p_src;
        if (p_src)
        {
          p_src = 0;
          LODWORD(v160[0]) = 0;
          WTF::fastFree(v86, v85);
        }
        v87 = v142;
        v142 = 0;
        if (v87)
          CFRelease(v87);
        if (*((_BYTE *)v80 + 48))
        {
          WebCore::buildUserEntityMap();
          cbor::CBORValue::CBORValue();
          cbor::CBORValue::CBORValue((cbor::CBORValue *)&__src);
          v183 = (SecKeyRef)&__src;
          std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v156, (cbor::CBORValue *)&__src);
          cbor::CBORValue::operator=();
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)&__src);
          cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v170);
          std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&p_src, v160[0]);
        }
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&v170);
        cbor::CBORValue::CBORValue((cbor::CBORValue *)&__src);
        p_src = (WTF *)&__src;
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t **)&v156, (cbor::CBORValue *)&__src);
        cbor::CBORValue::operator=();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&__src);
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v170);
        MEMORY[0x19AEAC178]();
        cbor::CBORWriter::write();
        cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v170);
        p_src = 0;
        v160[0] = 0;
        if (!(_BYTE)v168)
          goto LABEL_239;
        WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&p_src, (WTF::FastMalloc *)(HIDWORD(__n) + 1));
        LOBYTE(v170) = 0;
        if (HIDWORD(v160[0]) == LODWORD(v160[0]))
        {
          v88 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&p_src, (WTF::FastMalloc *)(HIDWORD(v160[0]) + 1), (unint64_t)&v170);
          *((_BYTE *)p_src + HIDWORD(v160[0])) = *v88;
        }
        else
        {
          *((_BYTE *)p_src + HIDWORD(v160[0])) = 0;
        }
        v90 = ++HIDWORD(v160[0]);
        if (!(_BYTE)v168)
          goto LABEL_239;
        v91 = HIDWORD(__n);
        if (!HIDWORD(__n))
        {
LABEL_135:
          if (!*(_BYTE *)(v3 + 160))
            goto LABEL_239;
          fido::FidoHidMessage::create();
          if (!v174)
            goto LABEL_239;
          WebKit::VirtualHidConnection::receiveHidMessage(v3, (fido::FidoHidMessage *)&v170);
          std::__optional_destruct_base<fido::FidoHidMessage,false>::~__optional_destruct_base[abi:sn180100]((fido::FidoHidMessage *)&v170);
          v98 = p_src;
          if (p_src)
          {
            p_src = 0;
            LODWORD(v160[0]) = 0;
            WTF::fastFree(v98, v97);
          }
          if ((_BYTE)v168)
          {
            v99 = (WTF *)__src;
            if (__src)
            {
              __src = 0;
              LODWORD(__n) = 0;
              WTF::fastFree(v99, v97);
            }
          }
          v100 = (WTF *)cf;
          if (cf)
          {
            cf = 0;
            v144 = 0;
            WTF::fastFree(v100, v97);
          }
          v101 = v152;
          if (v152)
          {
            v152 = 0;
            LODWORD(v153) = 0;
            WTF::fastFree(v101, v97);
          }
          v102 = v149;
          if (v149)
          {
            v149 = 0;
            v150 = 0;
            WTF::fastFree(v102, v97);
          }
          v103 = v147;
          if (v147)
          {
            v147 = 0;
            LODWORD(v148) = 0;
            WTF::fastFree(v103, v97);
          }
          v104 = v146;
          v146 = 0;
          if (v104)
            CFRelease(v104);
          std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v156, (WTF *)v157);
          v74 = 0;
LABEL_153:
          WTF::Vector<WebKit::VirtualCredential,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v161, v89);
LABEL_154:
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v163[1], v77);
          v105 = v154;
          if (v154)
          {
            v154 = 0;
            LODWORD(v155) = 0;
            WTF::fastFree(v105, v22);
          }
LABEL_156:
          v106 = (WTF::StringImpl *)v165;
          v165 = 0;
          if (v106)
          {
            if (*(_DWORD *)v106 == 2)
              WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v22);
            else
              *(_DWORD *)v106 -= 2;
          }
          if (!v74)
            goto LABEL_161;
LABEL_230:
          v107 = 0;
LABEL_231:
          if (v179)
            cbor::CBORValue::~CBORValue((cbor::CBORValue *)&v177);
          v140 = (WTF *)v180;
          if (v180)
          {
            v180 = 0;
            v181 = 0;
            WTF::fastFree(v140, v22);
          }
          if (!v107)
            goto LABEL_237;
          goto LABEL_236;
        }
        v92 = __src;
        v93 = HIDWORD(__n) + (unint64_t)v90;
        if (v93 <= LODWORD(v160[0])
          || ((v94 = LODWORD(v160[0]) + ((unint64_t)LODWORD(v160[0]) >> 2), v94 >= 0x10)
            ? (v95 = v94 + 1)
            : (v95 = 16),
              v95 <= v93 ? (v96 = (WTF::FastMalloc *)v93) : (v96 = (WTF::FastMalloc *)v95),
              WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::ASCIILiteral *)&p_src, v96), v90 = HIDWORD(v160[0]), v93 >= HIDWORD(v160[0])))
        {
          memcpy((char *)p_src + v90, v92, v91);
          HIDWORD(v160[0]) = v93;
          goto LABEL_135;
        }
        __break(0xC471u);
      }
      else
      {
        __break(0xC471u);
      }
      JUMPOUT(0x19766D548);
    }
  }
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualHidConnection::receiveHidMessage(fido::FidoHidMessage &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  *(_QWORD *)a1 = &off_1E34F3300;
  v3 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(WTF **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualHidConnection::receiveHidMessage(fido::FidoHidMessage &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;

  *(_QWORD *)this = &off_1E34F3300;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (WTF *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v6, a2);
  }
  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::VirtualHidConnection::receiveHidMessage(fido::FidoHidMessage &&)::$_0,void>::call(_BOOL8 result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return WebKit::HidConnection::receiveReport(v2, (uint64_t *)(result + 8));
  }
  return result;
}

uint64_t WebKit::VirtualLocalConnection::verifyUser(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;

  WTF::RunLoop::main((WTF::RunLoop *)a1);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1 + 4, (uint64_t)a1);
  v8 = (unsigned int *)*((_QWORD *)a1 + 2);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = *a6;
  *a6 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E34F3370;
  v11[1] = v8;
  v11[2] = v10;
  v13 = v11;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v13;
  if (v13)
    return (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  return result;
}

void sub_19766D7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VirtualLocalConnection::verifyUser(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;

  WTF::RunLoop::main((WTF::RunLoop *)a1);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1 + 4, (uint64_t)a1);
  v6 = (unsigned int *)*((_QWORD *)a1 + 2);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = *a4;
  *a4 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = &off_1E34F3398;
  v9[1] = v6;
  v9[2] = v8;
  v11 = v9;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v11;
  if (v11)
    return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  return result;
}

void sub_19766D8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebKit::VirtualLocalConnection::~VirtualLocalConnection(WebKit::VirtualLocalConnection *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  void *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebKit::LocalConnection::~LocalConnection((id *)this);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v4);
}

{
  WTF::StringImpl *v3;
  void *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebKit::LocalConnection::~LocalConnection((id *)this);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, v4);
  WTF::fastFree(this, v5);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VirtualLocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34F3370;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualLocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34F3370;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::VirtualLocalConnection::verifyUser(WTF::String const&,WebCore::ClientDataType,__SecAccessControl *,WebCore::UserVerificationRequirement,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification,LAContext *)> &&)::$_0,void>::call(WebKit *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)a1 + 1);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    v4 = *(unsigned __int8 *)(v3 + 36);
    v5 = (const void *)objc_msgSend(objc_alloc((Class)WebKit::getLAContextClass(a1)), "init");
    v6 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = 0;
    if (v4)
      v7 = 1;
    else
      v7 = 3;
    (*(void (**)(uint64_t, uint64_t, const void *))(*(_QWORD *)v6 + 16))(v6, v7, v5);
  }
  else
  {
    v5 = (const void *)objc_msgSend(objc_alloc((Class)WebKit::getLAContextClass(a1)), "init");
    v6 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = 0;
    (*(void (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)v6 + 16))(v6, 0, v5);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v5)
    CFRelease(v5);
}

void sub_19766DBB8(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VirtualLocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34F3398;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualLocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34F3398;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VirtualLocalConnection::verifyUser(__SecAccessControl *,LAContext *,WTF::CompletionHandler<void ()(WebKit::LocalConnection::UserVerification)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    v3 = *(unsigned __int8 *)(v2 + 36);
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
      v5 = 1;
    else
      v5 = 3;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_19766DD48(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::VirtualService::VirtualService(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int v7;

  *a1 = off_1E34AE8F8;
  a1[1] = 0;
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(a2 + 8), a2);
  v6 = *(unsigned int **)(a2 + 8);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  a1[2] = v6;
  *a1 = off_1E34F33C0;
  WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 3), a3);
  return a1;
}

void sub_19766DDE0(_Unwind_Exception *a1)
{
  WebKit::AuthenticatorTransportService *v1;

  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::VirtualService::startDiscoveryInternal(WTF::StringImpl *this, unsigned int **a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  void *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  _DWORD *v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD v32[3];
  WTF *v33;
  int v34;
  WTF *v35;
  int v36;
  char v37;
  _BYTE v38[40];
  WTF *v39;
  int v40;
  char v41;
  unsigned int *v42;
  unsigned int **v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  int v48;
  char v49;
  WTF *v50;
  int v51;
  int v52;
  int v53;
  WTF **v54;
  WTF *v55[3];

  v2 = *((_DWORD *)this + 9);
  if (v2)
  {
    v3 = (uint64_t)this;
    v4 = *((_QWORD *)this + 3);
    v5 = v4 + 24 * v2;
    do
    {
      v6 = *(_QWORD *)(v3 + 16);
      if (!v6)
        break;
      v7 = *(uint64_t **)(v6 + 8);
      if (!v7)
        break;
      v8 = *(WTF::StringImpl **)(v4 + 8);
      if (v8)
        *(_DWORD *)v8 += 2;
      v47 = v8;
      v48 = *(_DWORD *)(v4 + 16);
      v49 = *(_BYTE *)(v4 + 20);
      v9 = *(_DWORD **)v4;
      if (*(_QWORD *)v4)
        *v9 += 2;
      v46 = v9;
      if (v48 >= 3u)
      {
        if (v48 == 3)
        {
          v21 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)(v21 + 8) = 0;
          *(_QWORD *)(v21 + 16) = 0;
          *(_QWORD *)v21 = off_1E34F3328;
          if (v8)
            *(_DWORD *)v8 += 2;
          *(_QWORD *)(v21 + 24) = v8;
          *(_DWORD *)(v21 + 32) = v48;
          *(_BYTE *)(v21 + 36) = v49;
          v50 = (WTF *)v21;
          WebKit::LocalAuthenticator::create((uint64_t *)&v50, (uint64_t *)&v54);
          v22 = (uint64_t *)v54;
          v54 = 0;
          v32[0] = v22;
          (*(void (**)(uint64_t *, _QWORD *))(*v7 + 16))(v7, v32);
          v23 = (_DWORD *)v32[0];
          v32[0] = 0;
          if (v23)
          {
            if (v23[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
            else
              --v23[2];
          }
          v30 = (uint64_t *)v54;
          v54 = 0;
          if (v30)
          {
            if (*((_DWORD *)v30 + 2) == 1)
              (*(void (**)(uint64_t *))(*v30 + 8))(v30);
            else
              --*((_DWORD *)v30 + 2);
          }
          v31 = (uint64_t)v50;
          v50 = 0;
          if (v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        }
      }
      else
      {
        WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7 + 1, (uint64_t)v7);
        v10 = (unsigned int *)v7[1];
        if (v10)
        {
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
        v42 = v10;
        v12 = WTF::fastMalloc((WTF *)0xC8);
        WebKit::VirtualHidConnection::VirtualHidConnection(v12, &v46, (uint64_t)&v47, &v42);
        v13 = WTF::fastMalloc((WTF *)0x50);
        v32[0] = v12;
        WebKit::CtapHidDriver::CtapHidDriver(v13, (uint64_t)v32);
        v43 = (unsigned int **)v13;
        v14 = v32[0];
        v32[0] = 0;
        if (v14)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          v13 = (uint64_t)v43;
        }
        v43 = 0;
        v44 = v13;
        v53 = 0;
        v55[0] = 0;
        v55[1] = 0;
        v54 = v55;
        std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::__emplace_hint_unique_key_args<fido::ProtocolVersion,fido::ProtocolVersion const&>((uint64_t **)&v54, (uint64_t *)v55, &v53, &v53);
        v52 = 16;
        v15 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        v51 = 16;
        v50 = v15;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        fido::AuthenticatorGetInfoResponse::AuthenticatorGetInfoResponse();
        v17 = v50;
        if (v50)
        {
          v50 = 0;
          v51 = 0;
          WTF::fastFree(v17, v16);
        }
        std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy((uint64_t)&v54, v55[0]);
        LOWORD(v54) = 256;
        HIDWORD(v54) = 2;
        LOBYTE(v55[0]) = 1;
        HIDWORD(v55[0]) = 2;
        fido::AuthenticatorGetInfoResponse::setOptions();
        v18 = WTF::fastMalloc((WTF *)0x3D0);
        WebKit::CtapAuthenticator::CtapAuthenticator(v18, &v44, v32);
        v45 = (_DWORD *)v18;
        (*(void (**)(uint64_t *, _DWORD **))(*v7 + 16))(v7, &v45);
        v20 = v45;
        v45 = 0;
        if (v20)
        {
          if (v20[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
          else
            --v20[2];
        }
        if (v41)
        {
          v24 = v39;
          if (v39)
          {
            v39 = 0;
            v40 = 0;
            WTF::fastFree(v24, v19);
          }
        }
        if (v38[16])
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v38, v19);
        if (v37)
        {
          v25 = v35;
          if (v35)
          {
            v35 = 0;
            v36 = 0;
            WTF::fastFree(v25, v19);
          }
        }
        v26 = v33;
        if (v33)
        {
          v33 = 0;
          v34 = 0;
          WTF::fastFree(v26, v19);
        }
        std::__tree<fido::ProtocolVersion,std::less<fido::ProtocolVersion>,WTF::FastAllocator<fido::ProtocolVersion>>::destroy((uint64_t)v32, (WTF *)v32[1]);
        v27 = v44;
        v44 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        a2 = v43;
        v43 = 0;
        if (a2)
          std::default_delete<WebKit::CtapHidDriver>::operator()[abi:sn180100]((uint64_t)&v43, a2);
        v42 = 0;
        if (v10)
        {
          do
          {
            v28 = __ldaxr(v10);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v10));
          if (!v29)
          {
            atomic_store(1u, v10);
            WTF::fastFree((WTF *)v10, a2);
          }
        }
        v9 = v46;
      }
      if (v9)
      {
        if (*v9 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v9, (WTF::StringImpl *)a2);
        else
          *v9 -= 2;
      }
      this = v47;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(v47, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v47 -= 2;
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
  return this;
}

void sub_19766E234(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11, void *a12, uint64_t a13, WTF *a14, int a15, uint64_t a16, WTF *a17, int a18, int a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,int a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  WTF::StringImpl *v33;
  uint64_t v34;
  _DWORD *v36;
  uint64_t v37;
  WTF::StringImpl *v38;

  if (a11)
  {
    if (a11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a11 + 8))(a11);
    else
      --a11[2];
  }
  v36 = *(_DWORD **)(v34 - 112);
  *(_QWORD *)(v34 - 112) = 0;
  if (v36)
  {
    if (v36[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
    else
      --v36[2];
  }
  v37 = *(_QWORD *)(v34 - 136);
  *(_QWORD *)(v34 - 136) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, a2);
    else
      *(_DWORD *)v33 -= 2;
  }
  v38 = *(WTF::StringImpl **)(v34 - 152);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, a2);
    else
      *(_DWORD *)v38 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19766E488()
{
  JUMPOUT(0x19766E428);
}

void WebKit::VirtualService::~VirtualService(WebKit::VirtualService *this, void *a2)
{
  *(_QWORD *)this = off_1E34F33C0;
  WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);
}

{
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34F33C0;
  WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  WebKit::AuthenticatorTransportService::~AuthenticatorTransportService(this);
  WTF::fastFree(v3, v4);
}

uint64_t WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0xAAAAAAB)
  {
    v5 = 24 * v3;
    v6 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = v6;
    WTF::VectorCopier<false,std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>>::uninitializedCopy<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>>(*(_QWORD *)a2, *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 12), v6);
    return v2;
  }
  __break(0xC471u);
  return result;
}

void sub_19766E58C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorCopier<false,std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>>::uninitializedCopy<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  int v5;

  while (result != a2)
  {
    v3 = *(_DWORD **)result;
    if (*(_QWORD *)result)
      *v3 += 2;
    *(_QWORD *)a3 = v3;
    v4 = *(_DWORD **)(result + 8);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(a3 + 8) = v4;
    v5 = *(_DWORD *)(result + 16);
    *(_BYTE *)(a3 + 20) = *(_BYTE *)(result + 20);
    *(_DWORD *)(a3 + 16) = v5;
    result += 24;
    a3 += 24;
  }
  return result;
}

_QWORD *WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::VirtualService,WebKit::AuthenticatorTransportServiceObserver &,WTF::Vector<std::pair<WTF::String,WebKit::VirtualAuthenticatorConfiguration>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  result = WebKit::VirtualService::VirtualService(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_19766E64C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = (_QWORD *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1);
  v7[0] = result;
  v7[1] = v6;
  if ((_BYTE)v6)
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,int>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a1, (uint64_t)v7, v5, (uint64_t)a2);
  *a2 = 0;
  a2[16] = 0;
  return result;
}

BOOL WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator BOOL(_QWORD *a1)
{
  BOOL v2;
  BOOL v3;
  uint64_t v4;

  v2 = WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(a1);
  v3 = 0;
  if (v2)
  {
    v4 = WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)a1);
    return WTF::WeakPtrImplBase<WTF::DefaultWeakPtrImpl>::operator BOOL(v4);
  }
  return v3;
}

uint64_t WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(uint64_t *a1)
{
  return WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(a1);
}

uint64_t WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::operator=(const void **a1, uint64_t *a2)
{
  uint64_t result;

  _Block_release(*a1);
  result = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a2);
  *a1 = (const void *)result;
  return result;
}

uint64_t WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::constructASController(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  WebKit *v5;
  id v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(&v11);
  v10[0] = &v11;
  v10[1] = a2;
  v10[2] = v12;
  v9[0] = &v11;
  v9[1] = a2;
  v9[2] = v12;
  WTF::switchOn<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>(v12 + 16, v10, v9);
  if (!WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v11)
    && (v5 = (WebKit *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v11), "count")) != 0)
  {
    v6 = WebKit::allocASAuthorizationControllerInstance(v5);
    v7 = objc_msgSend(v6, "initWithAuthorizationRequests:", WTF::RetainPtr<__IOHIDDevice *>::get(&v11));
    WTF::adoptCF<__IOHIDManager *>(a1, v7);
  }
  else
  {
    WTF::RetainPtr<ASAuthorizationController>::RetainPtr((CFTypeRef *)a1);
  }
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v11);
}

uint64_t WTF::switchOn<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD v4[3];
  _QWORD v5[3];
  _QWORD v6[8];
  uint64_t v7;

  v7 = a1;
  v6[7] = a2;
  v6[6] = a3;
  v5[0] = *a2;
  v5[1] = a2[1];
  v5[2] = a2[2];
  v4[0] = *a3;
  v4[1] = a3[1];
  v4[2] = a3[2];
  WTF::makeVisitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>(v6, v5, v4);
  return std::visit[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&,void>((uint64_t)v6, v7);
}

CFTypeRef *WTF::RetainPtr<ASAuthorizationController>::RetainPtr(CFTypeRef *a1)
{
  WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, 0);
  return a1;
}

id WebKit::allocASAuthorizationControllerInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationControllerClass[0](this));
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::requestsForRegistration(WebKit::WebAuthenticatorCoordinatorProxy *this, const WebCore::PublicKeyCredentialCreationOptions *a2, const WebCore::SecurityOriginData *a3, WebCore::SecurityOriginData *a4)
{
  _BYTE *v6;
  _BYTE *v7;
  WebKit *v8;
  BOOL v9;
  BOOL isEmpty;
  WebKit *v11;
  id v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  void *v16;
  WebKit *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  id v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  const __CFString *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  WebKit *v48;
  const WTF::String *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  const __CFString *v59;
  const __CFString *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  const __CFString *v64;
  const __CFString *v65;
  uint64_t v66;
  uint64_t v67;
  WebKit *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  __int16 v79;
  CFTypeRef v80;
  CFTypeRef v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 *v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  CFTypeRef v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  CFTypeRef v98;
  CFTypeRef v99;
  _BYTE v100[48];
  CFTypeRef v101;
  uint64_t v102;
  _BYTE v103[80];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  CFTypeRef v111;
  char v112;
  uint64_t v113;
  char *v114;
  unsigned int *v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  _BYTE v122[8];
  _BYTE v123[16];
  char v124[16];
  WebCore::PublicKeyCredentialDescriptor *v125;
  WebCore::PublicKeyCredentialDescriptor *v126;
  unsigned int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE v132[2];
  char v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  WebCore::SecurityOriginData *v137;
  const WebCore::SecurityOriginData *v138;
  const WebCore::PublicKeyCredentialCreationOptions *v139;
  WebKit::WebAuthenticatorCoordinatorProxy *v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t *v143;
  _QWORD v144[2];
  WTF::StringImpl *v145;
  _QWORD *v146;
  uint64_t *v147;

  v140 = this;
  v139 = a2;
  v138 = a3;
  v137 = a4;
  WTF::adoptCF<__IOHIDManager *>(&v135, (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]));
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v136, &v135);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v135);
  v134 = 1;
  v133 = 1;
  if ((std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100]((uint64_t)v138 + 128) & 1) != 0)
  {
    std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)v138 + 128);
    v132[0] = *v6;
    v132[1] = v6[1];
    if ((std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100]((uint64_t)v132) & 1) != 0)
    {
      std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100]((uint64_t)v132);
      if (*v7)
      {
        if (*v7 == 1)
          v134 = 0;
      }
      else
      {
        v133 = 0;
      }
    }
  }
  WTF::adoptCF<__IOHIDManager *>(&v130, (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]));
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v131, &v130);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v130);
  WTF::adoptCF<__IOHIDManager *>(&v128, (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]));
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v129, &v128);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v128);
  v127 = (unsigned int *)((char *)v138 + 112);
  v126 = (WebCore::PublicKeyCredentialDescriptor *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((const WebCore::SecurityOriginData *)((char *)v138 + 112));
  v8 = (WebKit *)WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v127);
  v125 = v8;
  while (v126 != v125)
  {
    WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v122, (const PublicKeyCredentialDescriptor *)v126);
    v121 = 3;
    v9 = WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::contains<WebCore::AuthenticatorTransport>(v124, &v121);
    isEmpty = 1;
    if (!v9)
      isEmpty = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty((uint64_t)v124);
    if (isEmpty)
    {
      v11 = (WebKit *)WTF::RetainPtr<__IOHIDDevice *>::get(&v131);
      v12 = WebKit::allocASAuthorizationPlatformPublicKeyCredentialDescriptorInstance(v11);
      WebCore::toNSData((WebCore *)&v119, (const WebCore::BufferSource *)v123);
      v13 = objc_msgSend(v12, "initWithCredentialID:", WTF::RetainPtr<__IOHIDDevice *>::get(&v119));
      WTF::adoptCF<__IOHIDManager *>(&v120, v13);
      -[WebKit addObject:](v11, "addObject:", WTF::RetainPtr<__IOHIDDevice *>::get(&v120));
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v120);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v119);
    }
    v14 = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty((uint64_t)v124);
    v15 = 1;
    if (!v14)
    {
      v118 = 3;
      v15 = !WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::contains<WebCore::AuthenticatorTransport>(v124, &v118);
    }
    if (v15)
    {
      WTF::adoptCF<__IOHIDManager *>(&v116, (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]));
      WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v117, &v116);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v116);
      v115 = (unsigned int *)v124;
      v114 = (char *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)v124);
      v113 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v115);
      while (v114 != (char *)v113)
      {
        v112 = 0;
        v112 = *v114;
        WebKit::toASAuthorizationSecurityKeyPublicKeyCredentialDescriptorTransport(&v111, v112);
        if (WTF::RetainPtr<WKWebView>::operator BOOL(&v111))
        {
          v16 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v117);
          objc_msgSend(v16, "addObject:", WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v111));
        }
        WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v111);
        ++v114;
      }
      v17 = (WebKit *)WTF::RetainPtr<__IOHIDDevice *>::get(&v129);
      v18 = WebKit::allocASAuthorizationSecurityKeyPublicKeyCredentialDescriptorInstance(v17);
      WebCore::toNSData((WebCore *)&v109, (const WebCore::BufferSource *)v123);
      v19 = WTF::RetainPtr<__IOHIDDevice *>::get(&v109);
      v20 = objc_msgSend(v18, "initWithCredentialID:transports:", v19, WTF::RetainPtr<__IOHIDDevice *>::get(&v117));
      WTF::adoptCF<__IOHIDManager *>(&v110, v20);
      -[WebKit addObject:](v17, "addObject:", WTF::RetainPtr<__IOHIDDevice *>::get(&v110));
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v110);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v109);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v117);
    }
    WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v122);
    v126 = (WebCore::PublicKeyCredentialDescriptor *)((char *)v126 + 40);
  }
  v21 = WebKit::allocASPublicKeyCredentialClientDataInstance(v8);
  WebCore::toNSData((WebCore *)&v107, (const WebCore::SecurityOriginData *)((char *)v138 + 72));
  v22 = WTF::RetainPtr<__IOHIDDevice *>::get(&v107);
  WebCore::SecurityOriginData::toString(v137);
  v23 = objc_msgSend(v21, "initWithChallenge:origin:", v22, WTF::String::operator NSString *(&v106));
  WTF::adoptCF<__IOHIDManager *>(&v108, v23);
  v141 = &v106;
  v142 = &v106;
  v143 = &v106;
  v144[1] = &v106;
  v144[0] = 0;
  v147 = &v106;
  v146 = v144;
  v145 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v106);
  if (v145)
    WTF::StringImpl::deref(v145, v24);
  v25 = WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v107);
  if ((v134 & 1) != 0)
  {
    v26 = WebKit::allocASAuthorizationPlatformPublicKeyCredentialProviderInstance((WebKit *)v25);
    std::optional<WTF::String>::operator*[abi:sn180100]((uint64_t)v138 + 16);
    v28 = (void *)objc_msgSend(v26, "initWithRelyingPartyIdentifier:", WTF::String::operator NSString *(v27));
    v29 = WTF::RetainPtr<__IOHIDDevice *>::get(&v108);
    v30 = WTF::String::operator NSString *((_QWORD *)v138 + 4);
    WebCore::toNSData((WebCore *)&v104, (const WebCore::SecurityOriginData *)((char *)v138 + 48));
    v31 = objc_msgSend(v28, "createCredentialRegistrationRequestWithClientData:name:userID:", v29, v30, WTF::RetainPtr<__IOHIDDevice *>::get(&v104));
    WTF::adoptCF<__IOHIDManager *>(&v105, v31);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v104);
    if ((*((_BYTE *)a2 + 49) & 1) != 0)
    {
      WTF::RetainPtr<__IOHIDDevice *>::get(&v105);
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v105), "setRequestStyle:", 1);
    }
    if ((std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100]((uint64_t)v138 + 144) & 1) != 0)
    {
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v138 + 144);
      if ((std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator BOOL[abi:sn180100](v32 + 64) & 1) != 0)
      {
        std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v138 + 144);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100](v103, v33 + 64);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator->[abi:sn180100]((uint64_t)v103);
        v35 = std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::operator BOOL[abi:sn180100](v34);
        if ((v35 & 1) != 0)
        {
          v36 = WebKit::allocASAuthorizationPublicKeyCredentialPRFRegistrationInputInstance((WebKit *)v35);
          std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator->[abi:sn180100]((uint64_t)v103);
          std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100](v100, v37);
          WebKit::toASAssertionPRFInputValue(&v101, (uint64_t)v100);
          v38 = objc_msgSend(v36, "initWithInputValues:", WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v101));
          WTF::adoptCF<__IOHIDManager *>(&v102, v38);
          v39 = WTF::RetainPtr<__IOHIDDevice *>::get(&v102);
          objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v105), "setPrf:", v39);
          WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v102);
          WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v101);
          std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)v100);
        }
        else
        {
          v40 = objc_msgSend((id)WebKit::getASAuthorizationPublicKeyCredentialPRFRegistrationInputClass[0]((WebKit *)v35), "checkForSupport");
          objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v105), "setPrf:", v40);
        }
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)v103);
      }
    }
    if (*((_BYTE *)v138 + 136) == 3)
    {
      WebKit::toAttestationConveyancePreference(&v99, *((_BYTE *)v138 + 136));
      v41 = WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v99);
      objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v105), "setAttestationPreference:", v41);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v99);
    }
    if ((std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100]((uint64_t)v138 + 128) & 1) != 0)
    {
      std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)v138 + 128);
      WebKit::toASUserVerificationPreference(&v98, *(_BYTE *)(v42 + 5));
      v43 = WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v98);
      objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v105), "setUserVerificationPreference:", v43);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v98);
    }
    if ((std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100]((uint64_t)v138 + 144) & 1) != 0)
    {
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v138 + 144);
      v45 = std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::operator BOOL[abi:sn180100](v44 + 16);
      if ((v45 & 1) != 0)
      {
        v46 = WebKit::allocASAuthorizationPublicKeyCredentialLargeBlobRegistrationInputInstance((WebKit *)v45);
        std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v138 + 144);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](v47 + 16);
        v50 = objc_msgSend(v46, "initWithSupportRequirement:", WebKit::toASAuthorizationPublicKeyCredentialLargeBlobSupportRequirement(v48, v49));
        WTF::adoptCF<__IOHIDManager *>(&v97, v50);
        v51 = WTF::RetainPtr<__IOHIDDevice *>::get(&v97);
        objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v105), "setLargeBlob:", v51);
        WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v97);
      }
    }
    v52 = WTF::RetainPtr<__IOHIDDevice *>::get(&v131);
    objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v105), "setExcludedCredentials:", v52);
    v53 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v136);
    objc_msgSend(v53, "addObject:", WTF::RetainPtr<__IOHIDDevice *>::leakRef<__IOHIDDevice *>(&v105));
    v25 = WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v105);
  }
  if ((v133 & 1) != 0)
  {
    v54 = WebKit::allocASAuthorizationSecurityKeyPublicKeyCredentialProviderInstance((WebKit *)v25);
    std::optional<WTF::String>::operator*[abi:sn180100]((uint64_t)v138 + 16);
    v56 = objc_msgSend(v54, "initWithRelyingPartyIdentifier:", WTF::String::operator NSString *(v55));
    WTF::adoptCF<__IOHIDManager *>(&v96, v56);
    WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(&v95);
    WTF::RetainPtr<__IOHIDDevice *>::get(&v96);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v57 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v96);
      v58 = WTF::RetainPtr<__IOHIDDevice *>::get(&v108);
      v59 = WTF::String::operator NSString *((_QWORD *)v138 + 8);
      v60 = WTF::String::operator NSString *((_QWORD *)v138 + 4);
      WebCore::toNSData((WebCore *)&v93, (const WebCore::SecurityOriginData *)((char *)v138 + 48));
      v61 = objc_msgSend(v57, "createCredentialRegistrationRequestWithClientData:displayName:name:userID:", v58, v59, v60, WTF::RetainPtr<__IOHIDDevice *>::get(&v93));
      WTF::adoptCF<__IOHIDManager *>(&v94, v61);
      WTF::RetainPtr<__IOHIDManager *>::operator=(&v95, &v94);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v94);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v93);
    }
    else
    {
      v62 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v96);
      WebCore::toNSData((WebCore *)&v91, (const WebCore::SecurityOriginData *)((char *)v138 + 72));
      v63 = WTF::RetainPtr<__IOHIDDevice *>::get(&v91);
      v64 = WTF::String::operator NSString *((_QWORD *)v138 + 8);
      v65 = WTF::String::operator NSString *((_QWORD *)v138 + 4);
      WebCore::toNSData((WebCore *)&v90, (const WebCore::SecurityOriginData *)((char *)v138 + 48));
      v66 = objc_msgSend(v62, "createCredentialRegistrationRequestWithChallenge:displayName:name:userID:", v63, v64, v65, WTF::RetainPtr<__IOHIDDevice *>::get(&v90));
      WTF::adoptCF<__IOHIDManager *>(&v92, v66);
      WTF::RetainPtr<__IOHIDManager *>::operator=(&v95, &v92);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v92);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v90);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v91);
    }
    WebKit::toAttestationConveyancePreference(&v89, *((_BYTE *)v138 + 136));
    v67 = WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v89);
    objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v95), "setAttestationPreference:", v67);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v89);
    WTF::adoptCF<__IOHIDManager *>(&v87, (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]));
    WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v88, &v87);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v87);
    v86 = (unsigned int *)((char *)v138 + 88);
    v85 = (__int128 *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((const WebCore::SecurityOriginData *)((char *)v138 + 88));
    v84 = WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v86);
    while (v85 != (__int128 *)v84)
    {
      v83 = *v85;
      v68 = (WebKit *)WTF::RetainPtr<__IOHIDDevice *>::get(&v88);
      v69 = WebKit::allocASAuthorizationPublicKeyCredentialParametersInstance(v68);
      WTF::adoptCF<__IOHIDManager *>(&v82, objc_msgSend(v69, "initWithAlgorithm:", *((_QWORD *)&v83 + 1)));
      -[WebKit addObject:](v68, "addObject:", WTF::RetainPtr<__IOHIDDevice *>::get(&v82));
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v82);
      ++v85;
    }
    v70 = WTF::RetainPtr<__IOHIDDevice *>::get(&v88);
    objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v95), "setCredentialParameters:", v70);
    if ((std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100]((uint64_t)v138 + 128) & 1) != 0)
    {
      std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)v138 + 128);
      WebKit::toASUserVerificationPreference(&v81, *(_BYTE *)(v71 + 5));
      v72 = WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v81);
      objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v95), "setUserVerificationPreference:", v72);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v81);
      std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)v138 + 128);
      v79 = *(_WORD *)(v73 + 2);
      std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)v138 + 128);
      WebKit::toASResidentKeyPreference(&v80, v79, *(_BYTE *)(v74 + 4) & 1);
      v75 = WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v80);
      objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v95), "setResidentKeyPreference:", v75);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v80);
    }
    v76 = WTF::RetainPtr<__IOHIDDevice *>::get(&v129);
    objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v95), "setExcludedCredentials:", v76);
    v77 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v136);
    objc_msgSend(v77, "addObject:", WTF::RetainPtr<__IOHIDDevice *>::leakRef<__IOHIDDevice *>(&v95));
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v88);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v95);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v96);
  }
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>((uint64_t *)this, &v136);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v108);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v129);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v131);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v136);
}

uint64_t *WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(uint64_t *a1, uint64_t *a2)
{
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(a1, a2);
  return a1;
}

{
  uint64_t v3;

  WTF::RetainPtr<__IOHIDDevice *>::leakRef<__IOHIDDevice *>(a2);
  std::__to_address[abi:sn180100]<char const>();
  *a1 = WTF::RetainPtr<NSURLRequest>::toStorageType((uint64_t)a1, v3);
  return a1;
}

WebCore::PublicKeyCredentialDescriptor *WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor(WebCore::PublicKeyCredentialDescriptor *this, const PublicKeyCredentialDescriptor *a2)
{
  WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor(this, a2);
  return this;
}

{
  WTF::ASCIILiteral *v3;

  *(_BYTE *)this = *(_BYTE *)a2 & 1;
  v3 = (WebCore::PublicKeyCredentialDescriptor *)((char *)this + 24);
  WebCore::BufferSource::BufferSource((WebCore::PublicKeyCredentialDescriptor *)((char *)this + 8), (const WebCore::BufferSource *)((char *)a2 + 8));
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v3, (WTF::ASCIILiteral *)((char *)a2 + 24));
  return this;
}

BOOL WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::contains<WebCore::AuthenticatorTransport>(char *a1, char *a2)
{
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::AuthenticatorTransport>(a1, a2) != -1;
}

id WebKit::allocASAuthorizationPlatformPublicKeyCredentialDescriptorInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPlatformPublicKeyCredentialDescriptorClass[0](this));
}

uint64_t *WebCore::toNSData(WebCore *this, const WebCore::BufferSource *a2)
{
  char *v3;
  uint64_t v4;

  v3 = WebCore::BufferSource::span(a2);
  return WTF::toNSData((uint64_t *)this, (uint64_t)v3, v4);
}

CFTypeRef *WebKit::toASAuthorizationSecurityKeyPublicKeyCredentialDescriptorTransport(CFTypeRef *a1, char a2)
{
  switch(a2)
  {
    case 0:
      return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("usb"));
    case 1:
      return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("nfc"));
    case 2:
      return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("ble"));
  }
  return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, 0);
}

id WebKit::allocASAuthorizationSecurityKeyPublicKeyCredentialDescriptorInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialDescriptorClass[0](this));
}

id WebKit::allocASPublicKeyCredentialClientDataInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASPublicKeyCredentialClientDataClass[0](this));
}

const __CFString *WTF::String::operator NSString *(_QWORD *a1)
{
  if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(a1))
    return &stru_1E351F1B8;
  WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)a1);
  return (const __CFString *)WTF::StringImpl::operator NSString *();
}

id WebKit::allocASAuthorizationPlatformPublicKeyCredentialProviderInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPlatformPublicKeyCredentialProviderClass[0](this));
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator->[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::has_value[abi:sn180100](a1) & 1) == 0)
    __break(1u);
  std::__to_address[abi:sn180100]<char const>();
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a1) & 1;
}

id WebKit::allocASAuthorizationPublicKeyCredentialPRFRegistrationInputInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPublicKeyCredentialPRFRegistrationInputClass[0](this));
}

uint64_t *WebKit::toASAssertionPRFInputValue(CFTypeRef *a1, uint64_t a2)
{
  const WebCore::BufferSource *v5;
  uint64_t v6;
  uint64_t v7;
  const WebCore::BufferSource *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  const WebCore::BufferSource *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[3];

  v21[2] = (uint64_t)a1;
  v21[1] = a2;
  if ((std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::operator BOOL[abi:sn180100](a2) & 1) == 0)
    return (uint64_t *)WTF::RetainPtr<ASAuthorizationController>::RetainPtr(a1);
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](a2);
  WebCore::toNSData((WebCore *)v21, v5);
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(&v20);
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](a2);
  if ((std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator BOOL[abi:sn180100](v6 + 16) & 1) != 0)
  {
    std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](a2);
    std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator*[abi:sn180100](v7 + 16);
    WebCore::toNSData((WebCore *)&v19, v8);
    WTF::RetainPtr<__IOHIDManager *>::operator=(&v20, &v19);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v19);
  }
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](a2);
  v10 = std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator BOOL[abi:sn180100](v9 + 16);
  if ((v10 & 1) != 0)
  {
    v11 = WebKit::allocASAuthorizationPublicKeyCredentialPRFAssertionInputValuesInstance((WebKit *)v10);
    v12 = WTF::RetainPtr<__IOHIDDevice *>::get(v21);
    std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](a2);
    std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator*[abi:sn180100](v13 + 16);
    WebCore::toNSData((WebCore *)&v18, v14);
    v15 = objc_msgSend(v11, "initWithSaltInput1:saltInput2:", v12, WTF::RetainPtr<__IOHIDDevice *>::get(&v18));
    WTF::adoptCF<__IOHIDManager *>((uint64_t *)a1, v15);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v18);
  }
  else
  {
    v16 = WebKit::allocASAuthorizationPublicKeyCredentialPRFAssertionInputValuesInstance((WebKit *)v10);
    v17 = objc_msgSend(v16, "initWithSaltInput1:saltInput2:", WTF::RetainPtr<__IOHIDDevice *>::get(v21), 0);
    WTF::adoptCF<__IOHIDManager *>((uint64_t *)a1, v17);
  }
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v20);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v21);
}

CFTypeRef *WebKit::toAttestationConveyancePreference(CFTypeRef *a1, char a2)
{
  CFTypeRef *result;

  switch(a2)
  {
    case 1:
      result = WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("indirect"));
      break;
    case 2:
      result = WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("direct"));
      break;
    case 3:
      result = WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("enterprise"));
      break;
    default:
      result = WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("none"));
      break;
  }
  return result;
}

CFTypeRef *WebKit::toASUserVerificationPreference(CFTypeRef *a1, char a2)
{
  switch(a2)
  {
    case 0:
      return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("required"));
    case 1:
      return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("preferred"));
    case 2:
      return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("discouraged"));
    default:
      return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("required"));
  }
}

id WebKit::allocASAuthorizationPublicKeyCredentialLargeBlobRegistrationInputInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPublicKeyCredentialLargeBlobRegistrationInputClass[0](this));
}

BOOL WebKit::toASAuthorizationPublicKeyCredentialLargeBlobSupportRequirement(WebKit *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"required", (const char *)8);
  return (WTF::operator==((uint64_t)this, v3, v4) & 1) == 0;
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a1) & 1) == 0)
    __break(1u);
  std::__to_address[abi:sn180100]<char const>();
}

id WebKit::allocASAuthorizationSecurityKeyPublicKeyCredentialProviderInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialProviderClass[0](this));
}

id WebKit::allocASAuthorizationPublicKeyCredentialParametersInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPublicKeyCredentialParametersClass[0](this));
}

CFTypeRef *WebKit::toASResidentKeyPreference(CFTypeRef *a1, __int16 a2, char a3)
{
  const __CFString *v4;
  _BYTE *v6;
  __int16 v8;
  CFTypeRef *v9;

  v9 = a1;
  v8 = a2;
  if ((std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100]((uint64_t)&v8) & 1) != 0)
  {
    std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100]((uint64_t)&v8);
    if (*v6)
    {
      if (*v6 == 2)
        return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("discouraged"));
      else
        return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("preferred"));
    }
    else
    {
      return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("required"));
    }
  }
  else
  {
    if ((a3 & 1) != 0)
      v4 = CFSTR("required");
    else
      v4 = CFSTR("discouraged");
    return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)v4);
  }
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::requestsForAssertion(uint64_t *a1, uint64_t a2, WebCore::BufferSource *a3, WebCore::SecurityOriginData *a4, uint64_t a5)
{
  WebKit *v7;
  WebKit *v8;
  id v9;
  uint64_t v10;
  void *v11;
  WebKit *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WebCore::SecurityOriginData *v20;
  const __CFString *v21;
  WTF::StringImpl *v22;
  WebKit *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebKit *v30;
  id v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  const WebCore::BufferSource *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  WTF::ASCIILiteral *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  WebKit *v59;
  id v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::String *v67;
  _QWORD *v68;
  const __CFString *v69;
  void *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[2];
  uint64_t v79;
  _BYTE v80[48];
  CFTypeRef v81;
  int v82;
  WTF::CStringBuffer *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[24];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  CFTypeRef v92;
  _BYTE v93[48];
  CFTypeRef v94;
  _BYTE v95[80];
  CFTypeRef v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[48];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  CFTypeRef v107;
  char v108;
  uint64_t v109;
  char *v110;
  unsigned int *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE v116[8];
  _BYTE v117[16];
  _BYTE v118[16];
  WebCore::PublicKeyCredentialDescriptor *v119;
  WebCore::PublicKeyCredentialDescriptor *v120;
  unsigned int *v121;
  BOOL isEmpty;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WebCore::SecurityOriginData *v130;
  WebCore::BufferSource *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t *v139;
  _QWORD v140[2];
  _QWORD v141[2];
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  _QWORD *v144;
  uint64_t *v145;
  _QWORD *v146;
  uint64_t *v147;

  v133 = a1;
  v132 = a2;
  v131 = a3;
  v130 = a4;
  v129 = a5;
  WTF::adoptCF<__IOHIDManager *>(&v127, (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]));
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v128, &v127);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v127);
  WTF::adoptCF<__IOHIDManager *>(&v125, (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]));
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v126, &v125);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v125);
  WTF::adoptCF<__IOHIDManager *>(&v123, (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]));
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v124, &v123);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v123);
  isEmpty = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty((uint64_t)v131 + 32);
  v121 = (unsigned int *)((char *)v131 + 32);
  v120 = (WebCore::PublicKeyCredentialDescriptor *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WebCore::BufferSource *)((char *)v131 + 32));
  v7 = (WebKit *)WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v121);
  v119 = v7;
  while (v120 != v119)
  {
    WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v116, (const PublicKeyCredentialDescriptor *)v120);
    if (WebKit::isPlatformRequest((uint64_t)v118))
    {
      v8 = (WebKit *)WTF::RetainPtr<__IOHIDDevice *>::get(&v126);
      v9 = WebKit::allocASAuthorizationPlatformPublicKeyCredentialDescriptorInstance(v8);
      WebCore::toNSData((WebCore *)&v114, (const WebCore::BufferSource *)v117);
      v10 = objc_msgSend(v9, "initWithCredentialID:", WTF::RetainPtr<__IOHIDDevice *>::get(&v114));
      WTF::adoptCF<__IOHIDManager *>(&v115, v10);
      -[WebKit addObject:](v8, "addObject:", WTF::RetainPtr<__IOHIDDevice *>::get(&v115));
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v115);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v114);
    }
    if (WebKit::isCrossPlatformRequest((uint64_t)v118))
    {
      WTF::adoptCF<__IOHIDManager *>(&v112, (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]));
      WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v113, &v112);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v112);
      v111 = (unsigned int *)v118;
      v110 = (char *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)v118);
      v109 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v111);
      while (v110 != (char *)v109)
      {
        v108 = 0;
        v108 = *v110;
        WebKit::toASAuthorizationSecurityKeyPublicKeyCredentialDescriptorTransport(&v107, v108);
        if (WTF::RetainPtr<WKWebView>::operator BOOL(&v107))
        {
          v11 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v113);
          objc_msgSend(v11, "addObject:", WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v107));
        }
        WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v107);
        ++v110;
      }
      v12 = (WebKit *)WTF::RetainPtr<__IOHIDDevice *>::get(&v124);
      v13 = WebKit::allocASAuthorizationSecurityKeyPublicKeyCredentialDescriptorInstance(v12);
      WebCore::toNSData((WebCore *)&v105, (const WebCore::BufferSource *)v117);
      v14 = WTF::RetainPtr<__IOHIDDevice *>::get(&v105);
      v15 = objc_msgSend(v13, "initWithCredentialID:transports:", v14, WTF::RetainPtr<__IOHIDDevice *>::get(&v113));
      WTF::adoptCF<__IOHIDManager *>(&v106, v15);
      -[WebKit addObject:](v12, "addObject:", WTF::RetainPtr<__IOHIDDevice *>::get(&v106));
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v106);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v105);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v113);
    }
    if (!isEmpty && WebKit::allowsHybrid((uint64_t)v118))
      isEmpty = 1;
    WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v116);
    v120 = (WebCore::PublicKeyCredentialDescriptor *)((char *)v120 + 40);
  }
  v16 = WebKit::allocASPublicKeyCredentialClientDataInstance(v7);
  WebCore::toNSData((WebCore *)&v103, v131);
  v17 = WTF::RetainPtr<__IOHIDDevice *>::get(&v103);
  WebCore::SecurityOriginData::toString(v130);
  v18 = objc_msgSend(v16, "initWithChallenge:origin:", v17, WTF::String::operator NSString *(&v102));
  WTF::adoptCF<__IOHIDManager *>(&v104, v18);
  v135 = &v102;
  v136 = &v102;
  v139 = &v102;
  v140[1] = &v102;
  v140[0] = 0;
  v147 = &v102;
  v146 = v140;
  v143 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v102);
  if (v143)
    WTF::StringImpl::deref(v143, v19);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v103);
  if ((std::optional<WebCore::SecurityOriginData>::operator BOOL[abi:sn180100](v129) & 1) != 0)
  {
    objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v104), "setCrossOrigin:", 1);
    std::optional<WebCore::SecurityOriginData>::operator->[abi:sn180100](v129);
    WebCore::SecurityOriginData::toString(v20);
    v21 = WTF::String::operator NSString *(&v101);
    objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v104), "setTopOrigin:", v21);
    v134 = &v101;
    v137 = &v101;
    v138 = &v101;
    v141[1] = &v101;
    v141[0] = 0;
    v145 = &v101;
    v144 = v141;
    v142 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v101);
    if (v142)
      WTF::StringImpl::deref(v142, v22);
  }
  v23 = (WebKit *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v126), "count");
  if (v23 || (v23 = (WebKit *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v124), "count")) == 0)
  {
    v24 = WebKit::allocASAuthorizationPlatformPublicKeyCredentialProviderInstance(v23);
    v25 = (void *)objc_msgSend(v24, "initWithRelyingPartyIdentifier:", WTF::String::operator NSString *((_QWORD *)v131 + 3));
    v26 = objc_msgSend(v25, "createCredentialAssertionRequestWithClientData:", WTF::RetainPtr<__IOHIDDevice *>::get(&v104));
    WTF::adoptCF<__IOHIDManager *>(&v100, v26);
    if (WTF::RetainPtr<WKWebView>::operator BOOL(&v126))
    {
      v27 = WTF::RetainPtr<__IOHIDDevice *>::get(&v126);
      objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v100), "setAllowedCredentials:", v27);
    }
    if ((std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100]((uint64_t)v131 + 56) & 1) != 0)
    {
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v131 + 56);
      if ((std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::operator BOOL[abi:sn180100](v28 + 16) & 1) != 0)
      {
        std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v131 + 56);
        v30 = (WebKit *)std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100](v99, v29 + 16);
        v31 = WebKit::allocASAuthorizationPublicKeyCredentialLargeBlobAssertionInputInstance(v30);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100]((uint64_t)v99);
        v33 = std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](v32 + 8);
        v34 = 0;
        if ((v33 & 1) != 0)
        {
          std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100]((uint64_t)v99);
          std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100](v35 + 8);
          v34 = *v36;
        }
        WTF::adoptCF<__IOHIDManager *>(&v98, objc_msgSend(v31, "initWithOperation:", (v34 & 1) == 0));
        std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100]((uint64_t)v99);
        if ((std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator BOOL[abi:sn180100](v37 + 16) & 1) != 0)
        {
          std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100]((uint64_t)v99);
          std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator*[abi:sn180100](v38 + 16);
          WebCore::toNSData((WebCore *)&v97, v39);
          v40 = WTF::RetainPtr<__IOHIDDevice *>::get(&v97);
          objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v98), "setDataToWrite:", v40);
          WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v97);
        }
        v41 = WTF::RetainPtr<__IOHIDDevice *>::get(&v98);
        objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v100), "setLargeBlob:", v41);
        WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v98);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::~optional((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)v99);
      }
    }
    WebKit::toASUserVerificationPreference(&v96, *((_BYTE *)v131 + 48));
    v42 = WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v96);
    objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v100), "setUserVerificationPreference:", v42);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v96);
    if (!isEmpty)
      objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v100), "setShouldShowHybridTransport:", 0);
    if ((std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100]((uint64_t)v131 + 56) & 1) != 0)
    {
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v131 + 56);
      if ((std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator BOOL[abi:sn180100](v43 + 64) & 1) != 0)
      {
        std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v131 + 56);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100](v95, v44 + 64);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator->[abi:sn180100]((uint64_t)v95);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100](v93, v45);
        WebKit::toASAssertionPRFInputValue(&v94, (uint64_t)v93);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)v93);
        WTF::RetainPtr<ASAuthorizationController>::RetainPtr(&v92);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator->[abi:sn180100]((uint64_t)v95);
        v47 = std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator BOOL[abi:sn180100](v46 + 48);
        if ((v47 & 1) != 0)
        {
          WTF::adoptCF<__IOHIDManager *>(&v91, (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]));
          WTF::RetainPtr<__IOHIDManager *>::operator=((uint64_t *)&v92, &v91);
          WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v91);
          std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::operator->[abi:sn180100]((uint64_t)v95);
          std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator*[abi:sn180100](v48 + 48);
          v90 = v49;
          v89 = WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)v49);
          v47 = WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v90);
          v88 = v47;
          while (v89 != v88)
          {
            v87 = v89;
            WTF::String::utf8();
            v84 = WTF::CString::span(&v83);
            v85 = v50;
            WTF::base64URLDecode((uint64_t)v86, v84, v50);
            WTF::CString::~CString((WTF::CString *)&v83);
            if ((std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator BOOL[abi:sn180100]((uint64_t)v86) & 1) != 0)
            {
              v51 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v92);
              std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues&,0>((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)v80, (const PRFValues *)(v87 + 8));
              WebKit::toASAssertionPRFInputValue(&v81, (uint64_t)v80);
              v52 = WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v81);
              std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::operator*[abi:sn180100]((uint64_t)v86);
              std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v78, v53);
              WTF::toNSData(&v79, v78[0], v78[1]);
              objc_msgSend(v51, "setObject:forKey:", v52, WTF::RetainPtr<__IOHIDDevice *>::get(&v79));
              WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v79);
              WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v81);
              std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)v80);
              v82 = 0;
            }
            else
            {
              v82 = 7;
            }
            v47 = (uint64_t)std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((WTF::ASCIILiteral *)v86);
            v89 += 48;
          }
        }
        v54 = WebKit::allocASAuthorizationPublicKeyCredentialPRFAssertionInputInstance((WebKit *)v47);
        v55 = WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v94);
        v56 = objc_msgSend(v54, "initWithInputValues:perCredentialInputValues:", v55, WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v92));
        WTF::adoptCF<__IOHIDManager *>(&v77, v56);
        v57 = WTF::RetainPtr<__IOHIDDevice *>::get(&v77);
        objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v100), "setPrf:", v57);
        WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v77);
        WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v92);
        WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v94);
        std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFInputs *)v95);
      }
    }
    v58 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v128);
    objc_msgSend(v58, "addObject:", WTF::RetainPtr<__IOHIDDevice *>::leakRef<__IOHIDDevice *>(&v100));
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v100);
  }
  if ((*(_BYTE *)(a2 + 49) & 1) == 0)
  {
    v59 = (WebKit *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v124), "count");
    if (v59 || (v59 = (WebKit *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v126), "count")) == 0)
    {
      v60 = WebKit::allocASAuthorizationSecurityKeyPublicKeyCredentialProviderInstance(v59);
      v61 = objc_msgSend(v60, "initWithRelyingPartyIdentifier:", WTF::String::operator NSString *((_QWORD *)v131 + 3));
      WTF::adoptCF<__IOHIDManager *>(&v76, v61);
      WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(&v75);
      WTF::RetainPtr<__IOHIDDevice *>::get(&v76);
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v62 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v76);
        v63 = objc_msgSend(v62, "createCredentialAssertionRequestWithClientData:", WTF::RetainPtr<__IOHIDDevice *>::get(&v104));
        WTF::adoptCF<__IOHIDManager *>(&v74, v63);
        WTF::RetainPtr<__IOHIDManager *>::operator=(&v75, &v74);
        WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v74);
      }
      else
      {
        v64 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v76);
        WebCore::toNSData((WebCore *)&v72, v131);
        v65 = objc_msgSend(v64, "createCredentialAssertionRequestWithChallenge:", WTF::RetainPtr<__IOHIDDevice *>::get(&v72));
        WTF::adoptCF<__IOHIDManager *>(&v73, v65);
        WTF::RetainPtr<__IOHIDManager *>::operator=(&v75, &v73);
        WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v73);
        WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v72);
      }
      if (WTF::RetainPtr<WKWebView>::operator BOOL(&v124))
      {
        v66 = WTF::RetainPtr<__IOHIDDevice *>::get(&v124);
        objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v75), "setAllowedCredentials:", v66);
      }
      if ((std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100]((uint64_t)v131 + 56) & 1) != 0)
      {
        std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v131 + 56);
        if (!WTF::String::isNull(v67))
        {
          std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100]((uint64_t)v131 + 56);
          v69 = WTF::String::operator NSString *(v68);
          objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v75), "setAppID:", v69);
        }
      }
      v70 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v128);
      objc_msgSend(v70, "addObject:", WTF::RetainPtr<__IOHIDDevice *>::leakRef<__IOHIDDevice *>(&v75));
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v75);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v76);
    }
  }
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(a1, &v128);
  v82 = 1;
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v104);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v124);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v126);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v128);
}

BOOL WebKit::isPlatformRequest(uint64_t a1)
{
  BOOL isEmpty;
  BOOL v2;
  char v4;
  uint64_t v5;

  v5 = a1;
  isEmpty = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty(a1);
  v2 = 1;
  if (!isEmpty)
    return _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE10containsIfIZN6WebKitL17isPlatformRequestERKS5_EUlT_E_EEbRKSA_(v5, (uint64_t)&v4);
  return v2;
}

BOOL WebKit::isCrossPlatformRequest(uint64_t a1)
{
  BOOL isEmpty;
  BOOL v2;
  char v4;
  uint64_t v5;

  v5 = a1;
  isEmpty = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty(a1);
  v2 = 1;
  if (!isEmpty)
    return _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE10containsIfIZN6WebKitL22isCrossPlatformRequestERKS5_EUlT_E_EEbRKSA_(v5, (uint64_t)&v4);
  return v2;
}

BOOL WebKit::allowsHybrid(uint64_t a1)
{
  BOOL isEmpty;
  BOOL v2;
  char v4;
  uint64_t v5;

  v5 = a1;
  isEmpty = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::isEmpty(a1);
  v2 = 1;
  if (!isEmpty)
    return _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE10containsIfIZN6WebKitL12allowsHybridERKS5_EUlT_E_EEbRKSA_(v5, (uint64_t)&v4);
  return v2;
}

uint64_t std::optional<WebCore::SecurityOriginData>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::SecurityOriginData,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<WebCore::SecurityOriginData>::operator->[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::SecurityOriginData,false>::has_value[abi:sn180100](a1) & 1) == 0)
    __break(1u);
  std::__to_address[abi:sn180100]<char const>();
}

id WebKit::allocASAuthorizationPublicKeyCredentialLargeBlobAssertionInputInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPublicKeyCredentialLargeBlobAssertionInputClass[0](this));
}

uint64_t WTF::base64URLDecode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = a1;
  *((_QWORD *)&v10 + 1) = a3;
  *(_QWORD *)&v10 = a2;
  v9 = v10;
  v5 = 1;
  v6 = &v5;
  v7 = 1;
  WTF::OptionSet<WTF::Base64DecodeOption>::OptionSet(&v8, (uint64_t)&v5, 1);
  return WTF::base64Decode(a1, v9, *((uint64_t *)&v9 + 1));
}

uint64_t WTF::CString::span(WTF::CStringBuffer **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[2];
  _QWORD v6[6];

  v5[1] = (uint64_t)this;
  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(this))
  {
    v6[3] = this;
    v6[4] = this;
    v5[0] = WTF::CStringBuffer::data(*this);
    v2 = WTF::byteCast<unsigned char,char const*>(v5);
    v6[2] = this;
    v6[5] = this;
    v3 = std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)*this);
    std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(v6, v2, v3);
  }
  else
  {
    std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100](v6);
  }
  return v6[0];
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues&,0>(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, const PRFValues *a2)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues&,0>(a1, a2);
  return a1;
}

{
  _ZNSt3__127__optional_move_assign_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t *WTF::toNSData(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v8[2] = a1;
  v8[1] = a3;
  v8[0] = a2;
  v4 = objc_alloc(MEMORY[0x1E0C99D50]);
  v5 = std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v8);
  v6 = objc_msgSend(v4, "initWithBytes:length:", v5, std::span<char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v8));
  return WTF::adoptCF<__IOHIDManager *>(a1, v6);
}

id WebKit::allocASAuthorizationPublicKeyCredentialPRFAssertionInputInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPublicKeyCredentialPRFAssertionInputClass[0](this));
}

WTF *WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy(WebKit::WebAuthenticatorCoordinatorProxy *this)
{
  {
    WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::NeverDestroyed<>();
  }
  return WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::get();
}

WTF *WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::NeverDestroyed<>()
{
  return WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::NeverDestroyed<>((WTF *)&WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy(void)::proxy);
}

WTF *WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::get()
{
  return WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::storagePointer((WTF *)&WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy(void)::proxy);
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::pauseConditionalAssertion(uint64_t a1, uint64_t *a2)
{
  if ((*(_BYTE *)(a1 + 48) & 1) != 0 || (*(_BYTE *)(a1 + 49) & 1) == 0)
    return WTF::CompletionHandler<void ()(void)>::operator()(a2);
  *(_BYTE *)(a1 + 48) = 1;
  WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator=(a1 + 72);
  return objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 40)), "cancel");
}

WTF::ThreadSafeRefCountedBase **WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(WTF::ThreadSafeRefCountedBase **a1, uint64_t a2)
{
  WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(a1, a2);
  return a1;
}

{
  WTF::ThreadSafeRefCountedBase *v5;

  v5 = (WTF::ThreadSafeRefCountedBase *)WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<WebKit::WebAuthenticatorCoordinatorProxy>(a2);
  if (v5)
    WTF::ThreadSafeRefCountedBase::ref(v5);
  *a1 = v5;
  return a1;
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(WebKit::WebAuthenticatorCoordinatorProxy *this)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF::ThreadSafeRefCountedBase *v5;
  uint64_t v6;
  uint64_t *v7;
  WebKit::WebAuthenticatorCoordinatorProxy *v8;

  v8 = this;
  v7 = (uint64_t *)WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy(this);
  if (!WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator BOOL(v7))
    return WebKit::WebAuthenticatorCoordinatorProxy::unpauseConditionalAssertion((uint64_t)this);
  result = WTF::operator==<WebKit::WebAuthenticatorCoordinatorProxy,WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>(v7, (uint64_t)this);
  if ((result & 1) == 0 || (*((_BYTE *)this + 48) & 1) != 0)
  {
    v3 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(v7);
    WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v5, (uint64_t)this);
    WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v4);
    WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>(&v6, (uint64_t *)&v5);
    WebKit::WebAuthenticatorCoordinatorProxy::pauseConditionalAssertion(v3, &v6);
    WTF::CompletionHandler<void ()(void)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v6);
    WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v4);
    return (uint64_t)WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::~$_0((uint64_t *)&v5);
  }
  return result;
}

BOOL WTF::operator==<WebKit::WebAuthenticatorCoordinatorProxy,WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>(uint64_t *a1, uint64_t a2)
{
  return WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(a1) == a2;
}

_QWORD *WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(void)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  WTF::CompletionHandler<void ()(void)>::~CompletionHandler(a1);
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(void)>::~Function((uint64_t)a1);
  return a1;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::~$_0(uint64_t *a1)
{
  WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::~$_0(a1);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebPreferences *v4;
  uint64_t v5;
  const WTF::StringImpl *v6;
  WTF::RefCountedBase *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  os_log_type_t v11;
  WTF::RefCountedBase *v13;
  void *v14;
  WTF::ThreadSafeRefCountedBase **v15;
  uint64_t *v16;
  _WKASDelegate *v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  WTF::ThreadSafeRefCountedBase *v23;
  const void *v24;
  void *v25;
  uint64_t v26;
  WTF::ThreadSafeRefCountedBase *v27;
  char v28[8];
  uint64_t v29;
  _OWORD v30[10];
  uint64_t v31;
  char v32;
  CFTypeRef v33;
  int v34;
  uint8_t buf[7];
  char v36;
  os_log_t oslog;
  uint64_t v38;
  uint64_t v39;
  char v40[8];
  uint64_t v41;
  _BYTE v42[164];
  uint64_t v43;
  WTF::RefCountedBase *v44;
  uint64_t v45;
  uint64_t v46;

  v46 = a1;
  v45 = a2;
  v44 = (WTF::RefCountedBase *)a3;
  v4 = (WebKit::WebPreferences *)WebKit::WebPageProxy::preferences(*(WebKit::WebPageProxy **)(a1 + 16));
  if ((WebKit::WebPreferences::webAuthenticationASEnabled(v4, v5, v6) & 1) != 0)
  {
    v32 = 3;
    *(_BYTE *)(a1 + 49) = std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>(v45 + 696, &v32);
    WebKit::WebAuthenticatorCoordinatorProxy::constructASController(&v31, a1, v45);
    if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v31))
    {
      v13 = v44;
      memset(v30, 0, sizeof(v30));
      WebCore::AuthenticatorResponseData::AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v30);
      v28[0] = 31;
      WTF::String::String((WTF::String *)&v29, &stru_1E351F1B8.isa);
      WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()(v13, (uint64_t)v30, 0, (uint64_t)v28);
      WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v28);
      WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v30, v14);
      v34 = 1;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 49) & 1) != 0)
      {
        v15 = WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v27, a1);
        v16 = (uint64_t *)WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy((WebKit::WebAuthenticatorCoordinatorProxy *)v15);
        WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=(v16, (uint64_t *)&v27);
        WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr((uint64_t *)&v27);
      }
      WTF::RetainPtr<__IOHIDManager *>::operator=((uint64_t *)(a1 + 40), &v31);
      WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator=(a1 + 24);
      v17 = [_WKASDelegate alloc];
      v18 = v45 + 328;
      WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v23, a1);
      WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(&v24, (uint64_t *)&v23);
      v19 = (const void *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v24);
      WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::BlockPtr(&v25, v19);
      WTF::adoptCF<__IOHIDManager *>(&v26, (uint64_t)-[_WKASDelegate initWithPage:completionHandler:](v17, "initWithPage:completionHandler:", v18, &v25));
      WTF::RetainPtr<__IOHIDManager *>::operator=((uint64_t *)(a1 + 32), &v26);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v26);
      WTF::BlockPtr<void ()(void)>::~BlockPtr((const void **)&v25);
      WTF::BlockPtr<void ()(void)>::~BlockPtr(&v24);
      WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::~$_0((uint64_t *)&v23);
      v20 = WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 32));
      objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 40)), "setPresentationContextProvider:", v20);
      v21 = WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 32));
      objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 40)), "setDelegate:", v21);
      if ((std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100](v45 + 696) & 1) != 0
        && (std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100](v45 + 696), *v22 == 3)
        && std::holds_alternative[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(v45 + 16))
      {
        objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 40)), "performAutoFillAssistedRequests");
      }
      else
      {
        objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 40)), "performRequests");
      }
      v34 = 0;
    }
    return WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v31);
  }
  else
  {
    WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(&v43, a1, v45);
    if (WTF::RetainPtr<__IOHIDDevice *>::get(&v43))
    {
      WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v33, &v43);
      WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(a1, (uint64_t *)&v33, (uint64_t)v44);
      WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v33);
      v34 = 1;
    }
    else
    {
      v7 = v44;
      memset(v42, 0, 160);
      WebCore::AuthenticatorResponseData::AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v42);
      v40[0] = 31;
      v38 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"The origin of the document is not the same as its ancestors.", (const char *)0x3C);
      v39 = v8;
      WTF::String::String(&v41, v38, v8);
      WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()(v7, (uint64_t)v42, 0, (uint64_t)v40);
      WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v40);
      WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v42, v9);
      oslog = (os_log_t)qword_1ECE71AC8;
      v36 = 16;
      if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
      {
        v10 = oslog;
        v11 = v36;
        __os_log_helper_16_0_0(buf);
        _os_log_error_impl(&dword_196BCC000, v10, v11, "The origin of the document is not the same as its ancestors.", buf, 2u);
      }
      v34 = 1;
    }
    return WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v43);
  }
}

uint64_t WebKit::WebPageProxy::preferences(WebKit::WebPageProxy *this)
{
  return WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)this + 224);
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5[2];
  uint64_t v6[2];
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = a1;
  v9 = a2;
  v8 = a3;
  v7 = 0;
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  v6[0] = (uint64_t)a1;
  v6[1] = v8;
  v5[0] = (uint64_t)a1;
  v5[1] = v8;
  return WTF::switchOn<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>(v8 + 16, v6, v5);
}

uint64_t WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()(WTF::RefCountedBase *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  WTF::RefCountedBase *v10;

  v10 = a1;
  v9 = a2;
  v8 = a3;
  v7 = a4;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  std::exchange[abi:sn180100]<WTF::Function<void ()(WebKit::HidConnection::DataSent)>,decltype(nullptr)>(&v6, (uint64_t)a1);
  WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()((uint64_t)&v6, v9, v8, v7);
  return WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&v6);
}

void sub_197672510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, char a13)
{
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)&a13);
  _Unwind_Resume(a1);
}

WebCore::AuthenticatorResponseData *WebCore::AuthenticatorResponseData::AuthenticatorResponseData(WebCore::AuthenticatorResponseData *this)
{
  WebCore::AuthenticatorResponseData::AuthenticatorResponseData(this);
  return this;
}

{
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  std::optional<WebCore::AuthenticationExtensionsClientOutputs>::optional[abi:sn180100]((_BYTE *)this + 16);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 144);
  return this;
}

void WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  WebKit *v5;
  WTF::RefCountedBase *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  WTF::StringImpl *v16;
  void *v17;
  uint64_t v18;
  WTF::ThreadSafeRefCountedBase *v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  WTF::ThreadSafeRefCountedBase *v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint8_t buf[7];
  char v28;
  os_log_t oslog;
  uint64_t v30;
  uint64_t v31;
  char v32[8];
  uint64_t v33;
  _OWORD v34[10];
  WTF::RefCountedBase *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD v41[5];
  WTF::StringImpl *v42;
  _QWORD *v43;
  uint64_t *v44;

  v37 = a1;
  v36 = a2;
  v35 = (WTF::RefCountedBase *)a3;
  v5 = (WebKit *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a2), "requestTypes");
  if (v5)
  {
    v11 = objc_msgSend(WebKit::allocASCAgentProxyInstance(v5), "init");
    WTF::adoptCF<__IOHIDManager *>(&v26, v11);
    WTF::RetainPtr<__IOHIDManager *>::operator=((uint64_t *)(a1 + 64), &v26);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v26);
    if (objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a2), "requestStyle") == 2)
    {
      v12 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 64));
      v13 = WTF::RetainPtr<__IOHIDDevice *>::get(a2);
      WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v23, a1);
      WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(&v24, (uint64_t)v35);
      WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0>(&v25, (uint64_t *)&v23);
      objc_msgSend(v12, "performSilentAuthorizationRequestsForContext:withCompletionHandler:", v13, std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v25));
      WTF::BlockPtr<void ()(void)>::~BlockPtr(&v25);
      WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0((uint64_t *)&v23);
    }
    else
    {
      v14 = WebKit::WebPageProxy::pageClient(*(WebKit::WebPageProxy **)(a1 + 16));
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v14 + 1152))(&v22);
      v15 = WTF::String::operator NSString *(&v22);
      objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a2), "setWindowSceneIdentifier:", v15);
      v38 = &v22;
      v39 = &v22;
      v40 = &v22;
      v41[1] = &v22;
      v41[0] = 0;
      v44 = &v22;
      v43 = v41;
      v42 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v22);
      if (v42)
        WTF::StringImpl::deref(v42, v16);
      v17 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)(a1 + 64));
      v18 = WTF::RetainPtr<__IOHIDDevice *>::get(a2);
      WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v19, a1);
      WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(&v20, (uint64_t)v35);
      WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1>(&v21, (uint64_t *)&v19);
      objc_msgSend(v17, "performAuthorizationRequestsForContext:withCompletionHandler:", v18, std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v21));
      WTF::BlockPtr<void ()(void)>::~BlockPtr(&v21);
      WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0((uint64_t *)&v19);
    }
  }
  else
  {
    v6 = v35;
    memset(v34, 0, sizeof(v34));
    WebCore::AuthenticatorResponseData::AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v34);
    v32[0] = 31;
    v30 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"This request has been cancelled by the user.", (const char *)0x2C);
    v31 = v7;
    WTF::String::String(&v33, v30, v7);
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()(v6, (uint64_t)v34, 0, (uint64_t)v32);
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v32);
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v34, v8);
    oslog = (os_log_t)qword_1ECE71AC8;
    v28 = 16;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
    {
      v9 = oslog;
      v10 = v28;
      __os_log_helper_16_0_0(buf);
      _os_log_error_impl(&dword_196BCC000, v9, v10, "Request cancelled due to none requestTypes.", buf, 2u);
    }
  }
}

void sub_197672934(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _Unwind_Exception *v24;

  a21 = a1;
  a20 = a2;
  *(_QWORD *)(v21 - 176) = &a12;
  *(_QWORD *)(v21 - 152) = *(_QWORD *)(v21 - 176);
  *(_QWORD *)(v21 - 144) = *(_QWORD *)(v21 - 152);
  *(_QWORD *)(v21 - 104) = *(_QWORD *)(v21 - 144);
  v22 = *(_QWORD *)(v21 - 104);
  *(_QWORD *)(v21 - 112) = 0;
  *(_QWORD *)(v21 - 72) = v22;
  *(_QWORD *)(v21 - 80) = v21 - 112;
  *(_QWORD *)(v21 - 96) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v21 - 72));
  if (*(_QWORD *)(v21 - 96))
    WTF::StringImpl::deref(*(WTF::StringImpl **)(v21 - 96), v23);
  _Unwind_Resume(v24);
}

void sub_19767299C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21)
{
  _Unwind_Exception *v21;

  a21 = a1;
  a20 = a2;
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(&a9);
  _Unwind_Resume(v21);
}

void sub_1976729B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21)
{
  a21 = a1;
  a20 = a2;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0(&a9);
  JUMPOUT(0x1976729D4);
}

WTF::String *WTF::String::String(WTF::String *this, NSString *a2)
{
  MEMORY[0x19AEABCC8](this, a2);
  return this;
}

uint64_t *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(_QWORD *a1, uint64_t *a2)
{
  return WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &,void,ASAuthorization *,NSError *>(a1, a2, (uint64_t)WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator(), 0);
}

void **WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::BlockPtr(void **a1, const void *a2)
{
  WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::BlockPtr(a1, a2);
  return a1;
}

{
  *a1 = _Block_copy(a2);
  return a1;
}

BOOL std::holds_alternative[abi:sn180100]<WebCore::PublicKeyCredentialRequestOptions,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(uint64_t a1)
{
  return std::__holds_alternative[abi:sn180100]<1ul,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>(a1);
}

BOOL WebKit::WebAuthenticatorCoordinatorProxy::isASCAvailable(WebKit::WebAuthenticatorCoordinatorProxy *this)
{
  return WebKit::isAuthenticationServicesCoreFrameworkAvailable(this);
}

BOOL WebKit::isAuthenticationServicesCoreFrameworkAvailable(WebKit *this)
{
  return WebKit::AuthenticationServicesCoreLibrary((WebKit *)1) != 0;
}

uint64_t WTF::switchOn<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD v4[6];
  uint64_t v5;

  v5 = a1;
  v4[5] = a2;
  v4[4] = a3;
  WTF::makeVisitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>(v4, *a2, a2[1], *a3, a3[1]);
  return std::visit[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,std::variant::PublicKeyCredentialRequestOptions> &,void>((uint64_t)v4, v5);
}

id WebKit::allocASCAgentProxyInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASCAgentProxyClass[0](this));
}

uint64_t *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0>(_QWORD *a1, uint64_t *a2)
{
  return WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&,void,objc_object  {objcproto21ASCCredentialProtocol}*,NSError *>(a1, a2, (uint64_t)WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator(), 0);
}

_QWORD *WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(_QWORD *a1, uint64_t a2)
{
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0(uint64_t *a1)
{
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0(a1);
  return a1;
}

{
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)(a1 + 1));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

uint64_t *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1>(_QWORD *a1, uint64_t *a2)
{
  return WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&,void,objc_object  {objcproto21ASCCredentialProtocol}*,NSError *>(a1, a2, (uint64_t)WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator(), 0);
}

WTF::ThreadLikeAssertion *WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(uint64_t a1, WebCore::SecurityOriginData *a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7[4];

  v7[3] = a1;
  v7[2] = (uint64_t)a2;
  v7[1] = a3;
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(&v6, a3);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v5);
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0,void>(v7, (uint64_t)&v6);
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(a2, v7);
  WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler((WTF::ThreadLikeAssertion *)v7);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v5);
  return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v6);
}

void sub_197672D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&a16);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  WebCore::SecurityOrigin *v4;
  _QWORD *v5;
  const __CFString *v6;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t *v11;
  WebCore::SecurityOriginData *v12;

  v12 = a1;
  v11 = a2;
  WebKit::getASCWebKitSPISupportClass[0](a1);
  v2 = objc_opt_respondsToSelector();
  if ((v2 & 1) == 0)
    return (uint64_t *)WTF::CompletionHandler<void ()(BOOL)>::operator()(v11);
  v3 = (void *)WebKit::getASCWebKitSPISupportClass[0]((WebKit *)v2);
  WebCore::SecurityOriginData::securityOrigin(v12);
  v4 = (WebCore::SecurityOrigin *)WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)&v10);
  v5 = (_QWORD *)WebCore::SecurityOrigin::domain(v4);
  v6 = WTF::String::operator NSString *(v5);
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(&v8, (uint64_t)v11);
  WTF::makeBlockPtr<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(&v9, (uint64_t)&v8);
  objc_msgSend(v3, "getCanCurrentProcessAccessPasskeysForRelyingParty:withCompletionHandler:", v6, std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v9));
  WTF::BlockPtr<void ()(void)>::~BlockPtr(&v9);
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v8);
  return WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v10);
}

_QWORD *WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(_QWORD *a1, uint64_t a2)
{
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

_QWORD *WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0,void>(_QWORD *a1, uint64_t a2)
{
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0,void>(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler(a1);
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0(WTF::ThreadLikeAssertion *a1)
{
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::~(a1);
  return a1;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebKit *a1, WebCore::SecurityOriginData *a2, WTF::RefCountedBase *a3)
{
  uint64_t v3;
  void *v4;
  void *v6;
  WebCore::SecurityOrigin *v7;
  _QWORD *v8;
  const __CFString *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  _BYTE v13[16];
  WTF::RefCountedBase *v14;
  WebCore::SecurityOriginData *v15;
  WebKit *v16;

  v16 = a1;
  v15 = a2;
  v14 = a3;
  WebKit::getASCWebKitSPISupportClass[0](a1);
  v3 = objc_opt_respondsToSelector();
  if ((v3 & 1) != 0)
  {
    v6 = (void *)WebKit::getASCWebKitSPISupportClass[0]((WebKit *)v3);
    WebCore::SecurityOriginData::securityOrigin(v15);
    v7 = (WebCore::SecurityOrigin *)WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)&v12);
    v8 = (_QWORD *)WebCore::SecurityOrigin::domain(v7);
    v9 = WTF::String::operator NSString *(v8);
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler(&v10, (uint64_t)v14);
    WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(&v11, (uint64_t)&v10);
    objc_msgSend(v6, "getClientCapabilitiesForRelyingParty:withCompletionHandler:", v9, std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v11));
    WTF::BlockPtr<void ()(void)>::~BlockPtr(&v11);
    WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v10);
    return WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v12);
  }
  else
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v13);
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(v14, (uint64_t)v13);
    return (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v4);
  }
}

void sub_197673064(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14)
{
  a14 = a1;
  a13 = a2;
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&a11);
  JUMPOUT(0x19767309CLL);
}

uint64_t WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(WTF::RefCountedBase *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::RefCountedBase *v6;

  v6 = a1;
  v5 = a2;
  WTF::RefCountedBase::applyRefDerefThreadingCheck(a1);
  std::exchange[abi:sn180100]<WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,decltype(nullptr)>(&v4, (uint64_t)a1);
  WTF::Function<void ()(WTF::String const&)>::operator()((uint64_t)&v4, v5);
  return WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function((uint64_t)&v4);
}

void sub_197673104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, char a13)
{
  WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, a2);
  return a1;
}

uint64_t WebCore::SecurityOrigin::domain(WebCore::SecurityOrigin *this)
{
  return (uint64_t)this + 40;
}

WTF::ThreadLikeAssertion *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(_QWORD *a1, uint64_t a2)
{
  return WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &,void,NSDictionary<NSString *,NSNumber *> *>(a1, a2, (uint64_t)WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator(), 0);
}

_QWORD *WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler(_QWORD *a1, uint64_t a2)
{
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0(WTF::ThreadLikeAssertion *a1)
{
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0(a1);
  return a1;
}

{
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~CompletionHandler(a1);
  return a1;
}

uint64_t *WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(uint64_t *a1)
{
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(a1);
  return a1;
}

{
  WTF::StringImpl *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v5 = a1;
  v6 = a1;
  v4 = 0;
  v3 = 0;
  v8 = a1;
  v7 = &v3;
  v4 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v4)
  {
    v9 = v4;
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, v1);
  }
  return v6;
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(uint64_t a1, WebCore::SecurityOriginData *a2, uint64_t a3)
{
  _BYTE v5[13];
  uint64_t v6[2];
  WebCore::SecurityOriginData *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v7 = a2;
  v6[1] = a3;
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(&v9, a3);
  WebCore::SecurityOriginData::SecurityOriginData((WebCore::SecurityOriginData *)v10, v7);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)v5);
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0,void>(v6, (uint64_t)&v9);
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(a2, v6);
  WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler((WTF::ThreadLikeAssertion *)v6);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)v5);
  return WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((uint64_t)&v9);
}

void sub_197673318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9, char a10, char a11, int a12, _Unwind_Exception *exception_object, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&a18);
  _Unwind_Resume(a1);
}

_QWORD *WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0,void>(_QWORD *a1, uint64_t a2)
{
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0,void>(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0(uint64_t a1)
{
  WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0(a1);
  return a1;
}

{
  WebCore::SecurityOriginData::~SecurityOriginData((WebCore::SecurityOriginData *)(a1 + 8));
  WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler((WTF::ThreadLikeAssertion *)a1);
  return a1;
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::cancel(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  char v4;
  WTF::ThreadSafeRefCountedBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;

  v9 = a1;
  v8 = a2;
  if (WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL()
    || WTF::RetainPtr<WKWebView>::operator BOOL(a1 + 4))
  {
    WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>(&v5, (uint64_t)a1);
    WTF::CompletionHandler<void ()(void)>::CompletionHandler(&v6, (uint64_t)v8);
    WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v4);
    WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)>&&)::$_0,void>(&v7, (uint64_t *)&v5);
    WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator=((uint64_t)(a1 + 9));
    WTF::CompletionHandler<void ()(void)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v7);
    WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v4);
    WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((uint64_t *)&v5);
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()(v8);
  }
  if (WTF::RetainPtr<WKWebView>::operator BOOL(a1 + 8))
  {
    objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 8), "cancelCurrentRequest");
    WTF::RetainPtr<ASCAgentProxy>::clear(a1 + 8);
  }
  result = WTF::RetainPtr<WKWebView>::operator BOOL(a1 + 5);
  if ((result & 1) != 0)
    return objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 5), "cancel");
  return result;
}

_QWORD *WTF::CompletionHandler<void ()(void)>::CompletionHandler(_QWORD *a1, uint64_t a2)
{
  WTF::CompletionHandler<void ()(void)>::CompletionHandler(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

_QWORD *WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)>&&)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)>&&)::$_0,void>(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(uint64_t *a1)
{
  WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(a1);
  return a1;
}

{
  WTF::CompletionHandler<void ()(void)>::~CompletionHandler((WTF::ThreadLikeAssertion *)(a1 + 1));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

void WTF::RetainPtr<ASCAgentProxy>::clear(uint64_t *a1)
{
  CFTypeRef cf;

  cf = (CFTypeRef)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (cf)
    CFRelease(cf);
}

void sub_1976736E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WebCore::BufferSource *v11;

  WebCore::BufferSource::~BufferSource(v11);
  _Unwind_Resume(a1);
}

WebCore::BufferSource *WebCore::BufferSource::BufferSource(WebCore::BufferSource *this, const WebCore::BufferSource *a2)
{
  WebCore::BufferSource::BufferSource(this, a2);
  return this;
}

{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100]((uint64_t)this, (uint64_t)a2);
  return this;
}

_QWORD *std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100](_QWORD *a1)
{
  std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100](a1);
  return a1;
}

_QWORD *std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100](_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *WebCore::AuthenticationExtensionsClientInputs::PRFValues::PRFValues(WebCore::AuthenticationExtensionsClientInputs::PRFValues *this, const PRFValues *a2)
{
  WebCore::AuthenticationExtensionsClientInputs::PRFValues::PRFValues(this, a2);
  return this;
}

{
  WebCore::BufferSource::BufferSource(this, (const WebCore::BufferSource *)a2);
  std::optional<WebCore::BufferSource>::optional[abi:sn180100]((_BYTE *)this + 16, (uint64_t)&a2->var1);
  return this;
}

void sub_197673AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WebCore::BufferSource *v11;

  WebCore::BufferSource::~BufferSource(v11);
  _Unwind_Resume(a1);
}

id WebKit::allocASAuthorizationPublicKeyCredentialPRFAssertionInputValuesInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASAuthorizationPublicKeyCredentialPRFAssertionInputValuesClass[0](this));
}

BOOL _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE10containsIfIZN6WebKitL17isPlatformRequestERKS5_EUlT_E_EEbRKSA_(uint64_t a1, uint64_t a2)
{
  return _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZN6WebKitL17isPlatformRequestERKS5_EUlT_E_EEmRKSA_(a1, a2) != -1;
}

uint64_t _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZN6WebKitL17isPlatformRequestERKS5_EUlT_E_EEmRKSA_(uint64_t a1, uint64_t a2)
{
  char *v3;
  unint64_t i;

  for (i = 0; i < WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1); ++i)
  {
    v3 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(a1, i);
    if (_ZZN6WebKitL17isPlatformRequestERKN3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEEENKUlT_E_clIS3_EEDaS9_(a2, *v3))
    {
      return i;
    }
  }
  return -1;
}

BOOL _ZZN6WebKitL17isPlatformRequestERKN3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEEENKUlT_E_clIS3_EEDaS9_(uint64_t a1, char a2)
{
  BOOL v2;

  v2 = 1;
  if (a2 != 3)
    return a2 == 5;
  return v2;
}

BOOL _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE10containsIfIZN6WebKitL22isCrossPlatformRequestERKS5_EUlT_E_EEbRKSA_(uint64_t a1, uint64_t a2)
{
  return _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZN6WebKitL22isCrossPlatformRequestERKS5_EUlT_E_EEmRKSA_(a1, a2) != -1;
}

uint64_t _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZN6WebKitL22isCrossPlatformRequestERKS5_EUlT_E_EEmRKSA_(uint64_t a1, uint64_t a2)
{
  char *v3;
  unint64_t i;

  for (i = 0; i < WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1); ++i)
  {
    v3 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(a1, i);
    if (_ZZN6WebKitL22isCrossPlatformRequestERKN3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEEENKUlT_E_clIS3_EEDaS9_(a2, *v3))
    {
      return i;
    }
  }
  return -1;
}

BOOL _ZZN6WebKitL22isCrossPlatformRequestERKN3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEEENKUlT_E_clIS3_EEDaS9_(uint64_t a1, char a2)
{
  BOOL v2;

  v2 = 0;
  if (a2 != 3)
    return a2 != 5;
  return v2;
}

BOOL _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE10containsIfIZN6WebKitL12allowsHybridERKS5_EUlT_E_EEbRKSA_(uint64_t a1, uint64_t a2)
{
  return _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZN6WebKitL12allowsHybridERKS5_EUlT_E_EEmRKSA_(a1, a2) != -1;
}

uint64_t _ZNK3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEE6findIfIZN6WebKitL12allowsHybridERKS5_EUlT_E_EEmRKSA_(uint64_t a1, uint64_t a2)
{
  char *v3;
  unint64_t i;

  for (i = 0; i < WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1); ++i)
  {
    v3 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(a1, i);
    if (_ZZN6WebKitL12allowsHybridERKN3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEEENKUlT_E_clIS3_EEDaS9_(a2, *v3))
    {
      return i;
    }
  }
  return -1;
}

BOOL _ZZN6WebKitL12allowsHybridERKN3WTF6VectorIN7WebCore22AuthenticatorTransportELm0ENS0_15CrashOnOverflowELm16ENS0_10FastMallocEEEENKUlT_E_clIS3_EEDaS9_(uint64_t a1, char a2)
{
  BOOL v2;

  v2 = 1;
  if (a2 != 5)
    return a2 == 4;
  return v2;
}

uint64_t WTF::base64Decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::as_bytes[abi:sn180100]<unsigned char const,18446744073709551615ul>(a2, a3);
  return WTF::base64Decode();
}

_DWORD *WTF::OptionSet<WTF::Base64DecodeOption>::OptionSet(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  return WTF::OptionSet<WTF::Base64DecodeOption>::OptionSet(a1, a2, a3);
}

{
  uint64_t v5;
  _DWORD *v6;
  _QWORD v7[2];
  _DWORD *v8;

  v7[0] = a2;
  v7[1] = a3;
  v8 = a1;
  *a1 = 0;
  v6 = (_DWORD *)std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)v7);
  v5 = std::initializer_list<WTF::Base64DecodeOption>::end[abi:sn180100](v7);
  while (v6 != (_DWORD *)v5)
    *a1 |= *v6++;
  return v8;
}

uint64_t std::initializer_list<WTF::Base64DecodeOption>::end[abi:sn180100](_QWORD *a1)
{
  return *a1 + 4 * a1[1];
}

uint64_t WTF::byteCast<unsigned char,char const*>(uint64_t *a1)
{
  return WTF::ByteCastTraits<char const*>::cast<unsigned char>(*a1);
}

uint64_t WTF::ByteCastTraits<char const*>::cast<unsigned char>(uint64_t a1)
{
  return WTF::bitwise_cast<unsigned char const*,char const*>(a1);
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *_ZNSt3__127__optional_move_assign_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, const PRFValues *a2)
{
  _ZNSt3__127__optional_copy_assign_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *_ZNSt3__127__optional_copy_assign_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, const PRFValues *a2)
{
  _ZNSt3__120__optional_move_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *_ZNSt3__120__optional_move_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, const PRFValues *a2)
{
  _ZNSt3__120__optional_copy_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *_ZNSt3__120__optional_copy_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, const PRFValues *a2)
{
  _ZNSt3__123__optional_storage_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *_ZNSt3__123__optional_storage_baseIN7WebCore36AuthenticationExtensionsClientInputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJRS3_EEENS_10in_place_tEDpOT_(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, const PRFValues *a2)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues&>(a1, a2);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues&>(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1, const PRFValues *a2)
{
  WebCore::AuthenticationExtensionsClientInputs::PRFValues::PRFValues(a1, a2);
  *((_BYTE *)a1 + 40) = 1;
  return a1;
}

void sub_1976745D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  a21 = v37;
  a20 = 0;
  *(_QWORD *)(v31 + 168) = v37;
  *(_QWORD *)(v31 + 160) = &a20;
  *(_QWORD *)(v31 + 72) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v31 + 168));
  if (*(_QWORD *)(v31 + 72))
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(*(WTF::DeferrableRefCountedBase **)(v31 + 72));
  a23 = v36;
  a22 = 0;
  *(_QWORD *)(v31 + 152) = v36;
  *(_QWORD *)(v31 + 144) = &a22;
  *(_QWORD *)(v31 + 64) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v31 + 152));
  if (*(_QWORD *)(v31 + 64))
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(*(WTF::DeferrableRefCountedBase **)(v31 + 64));
  a25 = v35;
  a24 = 0;
  *(_QWORD *)(v31 + 136) = v35;
  *(_QWORD *)(v31 + 128) = &a24;
  *(_QWORD *)(v31 + 56) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v31 + 136));
  if (*(_QWORD *)(v31 + 56))
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(*(WTF::DeferrableRefCountedBase **)(v31 + 56));
  a27 = v34;
  a26 = 0;
  *(_QWORD *)(v31 + 120) = v34;
  *(_QWORD *)(v31 + 112) = &a26;
  *(_QWORD *)(v31 + 48) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v31 + 120));
  if (*(_QWORD *)(v31 + 48))
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(*(WTF::DeferrableRefCountedBase **)(v31 + 48));
  *(_QWORD *)(v31 + 8) = v33;
  v38 = *(_QWORD *)(v31 + 8);
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 104) = v38;
  *(_QWORD *)(v31 + 96) = &a28;
  *(_QWORD *)(v31 + 40) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v31 + 104));
  if (*(_QWORD *)(v31 + 40))
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(*(WTF::DeferrableRefCountedBase **)(v31 + 40));
  std::optional<WebCore::AuthenticationExtensionsClientOutputs>::~optional(v30);
  *(_QWORD *)(v31 + 24) = v32;
  v39 = *(_QWORD *)(v31 + 24);
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)(v31 + 88) = v39;
  *(_QWORD *)(v31 + 80) = &a30;
  *(_QWORD *)(v31 + 32) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v31 + 88));
  if (*(_QWORD *)(v31 + 32))
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(*(WTF::DeferrableRefCountedBase **)(v31 + 32));
  _Unwind_Resume(a1);
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientOutputs>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs>::~optional(uint64_t a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_move_assign_base(a1);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_copy_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_move_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_copy_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[80] = 0;
  return result;
}

uint64_t std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_move_assign_base(uint64_t a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_copy_assign_base(a1);
  return a1;
}

uint64_t std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_copy_assign_base(uint64_t a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_move_base(a1);
  return a1;
}

uint64_t std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_move_base(uint64_t a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_copy_base(a1);
  return a1;
}

uint64_t std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_copy_base(uint64_t a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_storage_base(a1);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_storage_base(uint64_t a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

uint64_t *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &,void,ASAuthorization *,NSError *>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6[7];

  v6[6] = (uint64_t)a1;
  v6[5] = a4;
  v6[4] = a3;
  v6[3] = (uint64_t)a2;
  v6[2] = a4;
  v6[1] = a3;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(v6, a2);
  WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(a1, v6);
  return WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::~$_0(v6);
}

void sub_197674B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13)
{
  WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::~$_0(&a13);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v10 = a1;
  v9 = a2;
  v8 = a3;
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v4, a1);
  WTF::retainPtr<ASAuthorization *>(&v5, v9);
  WTF::retainPtr<ASAuthorization *>(&v6, v8);
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>(&v7, &v4);
  WTF::ensureOnMainRunLoop();
  WTF::Function<void ()(void)>::~Function((uint64_t)&v7);
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::~NSError(&v4);
}

void sub_197674BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(&a13);
  _Unwind_Resume(a1);
}

_QWORD *WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;
  char v5;
  int v6;
  void *v7;
  uint64_t *v8;
  _QWORD *v9;

  v9 = a1;
  v8 = a2;
  v7 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *(_QWORD *)v7 = MEMORY[0x1E0C809A0];
  v6 = 1;
  *((_DWORD *)v7 + 2) = 50331650;
  *((_DWORD *)v7 + 3) = 0;
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)&v5);
  *((_QWORD *)v7 + 2) = WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,ASAuthorization *,NSError *)#1}::__invoke;
  *((_QWORD *)v7 + 3) = &WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::descriptor;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0((uint64_t *)v7 + 4, a2);
  result = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *a1 = v7;
  return result;
}

uint64_t *WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  char v2;
  uint64_t v3;

  v3 = a1;
  return WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void const*)#1}::operator()((uint64_t)&v2, a1);
}

uint64_t *WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void const*)#1}::operator()(uint64_t a1, uint64_t a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::~$_0((uint64_t *)(a2 + 32));
}

uint64_t *WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,ASAuthorization *,NSError *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  v5 = a3;
  return WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,ASAuthorization *,NSError *)#1}::operator()((uint64_t)&v4, a1, a2, a3);
}

uint64_t *WTF::BlockPtr<void ()(ASAuthorization *,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,ASAuthorization *,NSError *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()((uint64_t *)(a2 + 32), a3, a4);
}

CFTypeRef *WTF::retainPtr<ASAuthorization *>(CFTypeRef *a1, uint64_t a2)
{
  return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, a2);
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>,NSError>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::~NSError(uint64_t *a1)
{
  WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::~NSError(a1);
  return a1;
}

{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(a1 + 2);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(a1 + 1);
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>,NSError>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x20);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_197674F08(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc *v11;

  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = off_1E34F3410;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::NSError(a1 + 1, a2);
  return a1;
}

void sub_197674FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  std::__to_address[abi:sn180100]<char const>();
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::NSError(uint64_t *a1, uint64_t *a2)
{
  WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::NSError(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1 + 1, a2 + 1);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1 + 2, a2 + 2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34F3410;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::~NSError(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

void sub_197675100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  uint64_t *v11;

  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(v11);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticatorCoordinatorProxy::performRequest(WebKit::WebAuthenticationRequestData &&,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0::operator()(ASAuthorization *,NSError *)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  WebKit *v2;
  NSString *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  NSString *v7;
  WebKit *v8;
  NSString *v9;
  WebKit *v10;
  uint64_t v11;
  NSData *v12;
  NSData *v13;
  NSData *v14;
  NSData *v15;
  NSData *v16;
  WebKit *v17;
  uint64_t v18;
  NSData *v19;
  NSData *v20;
  NSData *v21;
  NSData *v22;
  NSData *v23;
  NSData *v24;
  NSData *v25;
  NSData *v26;
  WebKit *v27;
  uint64_t v28;
  NSData *v29;
  NSData *v30;
  void *v31;
  NSData *v32;
  WebKit *v33;
  uint64_t v34;
  NSData *v35;
  NSData *v36;
  NSData *v37;
  NSData *v38;
  NSData *v39;
  _BOOL8 v40;
  uint64_t *v41;
  _BOOL8 v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char v50;
  __int16 v51;
  _WORD v52[40];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  CFTypeRef v58;
  uint64_t v59;
  uint64_t v60[2];
  uint64_t v61[2];
  uint64_t v62;
  uint64_t v63;
  CFTypeRef v64;
  WTF::StringImpl *v65;
  _QWORD v66[2];
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  _BYTE v73[2];
  _BYTE v74[8];
  _DWORD *v75;
  _BYTE v76[8];
  uint64_t v77;
  _DWORD *v78;
  _BYTE v79[8];
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  CFTypeRef v88;
  char v89;
  __int16 v90;
  _BYTE v91[24];
  _DWORD *v92;
  _DWORD *v93;
  char v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _DWORD *v99;
  _DWORD *v100;
  char v101;
  _BYTE v102[8];
  uint64_t v103;
  _BYTE v104[8];
  _BYTE v105[8];
  uint64_t v106;
  _BYTE v107[47];
  char v108;
  uint64_t v109;
  _BYTE v110[2];
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113[2];
  uint64_t v114;
  uint64_t v115;
  CFTypeRef v116;
  char v117[8];
  uint64_t v118;
  char v119[8];
  uint64_t v120;
  _BYTE v121[8];
  uint64_t v122;
  char v123[8];
  uint64_t v124;
  CFTypeRef v125;
  uint64_t v126;
  _BYTE v127[8];
  uint64_t v128;
  unsigned __int8 v129;
  char v130[8];
  uint64_t v131;
  __int128 v132;
  _OWORD v133[5];
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t *v138;
  uint64_t *v139;
  WTF::StringImpl **v140;
  WTF::StringImpl **v141;
  _DWORD **v142;
  uint64_t *v143;
  uint64_t *v144;
  _DWORD **v145;
  _QWORD v146[2];
  _QWORD v147[2];
  _QWORD v148[2];
  _QWORD v149[2];
  _QWORD v150[2];
  _QWORD v151[2];
  _QWORD v152[2];
  WTF::DeferrableRefCountedBase *v153;
  WTF::DeferrableRefCountedBase *v154;
  WTF::DeferrableRefCountedBase *v155;
  WTF::DeferrableRefCountedBase *v156;
  WTF::DeferrableRefCountedBase *v157;
  WTF::DeferrableRefCountedBase *v158;
  WTF::DeferrableRefCountedBase *v159;
  _QWORD *v160;
  uint64_t *v161;
  _QWORD *v162;
  WTF::StringImpl **v163;
  _QWORD *v164;
  WTF::StringImpl **v165;
  _QWORD *v166;
  _DWORD **v167;
  _QWORD *v168;
  uint64_t *v169;
  _QWORD *v170;
  uint64_t *v171;
  _QWORD *v172;
  _DWORD **v173;
  WTF::StringImpl **v174;
  _QWORD *v175;
  WTF::StringImpl **v176;
  WTF::StringImpl **v177;
  _DWORD **v178;
  _DWORD **v179;
  _DWORD **v180;
  _DWORD **v181;
  uint64_t *v182;
  _DWORD **v183;
  uint64_t *v184;
  _DWORD **v185;
  _DWORD **v186;
  _DWORD **v187;
  _DWORD **v188;
  _DWORD **v189;
  WTF::StringImpl **v190;
  WTF::StringImpl **v191;
  WTF::StringImpl **v192;
  _QWORD *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  _DWORD *v196;
  _DWORD *v197;
  _DWORD *v198;
  WTF::StringImpl **v199;
  WTF::StringImpl **v200;
  _DWORD **v201;
  _DWORD **v202;
  uint64_t *v203;
  uint64_t v204;
  WTF::StringImpl **v205;
  uint64_t v206;
  _DWORD **v207;
  uint64_t v208;
  _DWORD **v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  _DWORD **v219;
  uint64_t v220;
  _DWORD **v221;
  uint64_t v222;
  WTF::StringImpl **v223;

  v138 = a1;
  if (!WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1))
  {
    v137 = 0u;
    v136 = 0u;
    v135 = 0u;
    v134 = 0u;
    memset(v133, 0, sizeof(v133));
    v132 = 0u;
    WebCore::AuthenticatorResponseData::AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)&v132);
    v130[0] = 31;
    WTF::String::String((WTF::String *)&v131, &stru_1E351F1B8.isa);
    v129 = 0;
    if ((objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 2), "domain"), "isEqualToString:", CFSTR("WKErrorDomain")) & 1) != 0)
    {
      v2 = (WebKit *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 2), "code");
      v127[0] = WebKit::toExceptionCode(v2);
      v3 = (NSString *)objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 2), "userInfo"), "objectForKeyedSubscript:", *MEMORY[0x1E0CB2D50]);
      WTF::String::String((WTF::String *)&v128, v3);
      WebCore::ExceptionData::operator=((uint64_t)v130, v127);
      WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v127);
    }
    else
    {
      v4 = (void *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 2), "domain");
      if ((objc_msgSend(v4, "isEqualToString:", WebKit::get_AuthenticationServices_ASAuthorizationErrorDomain((WebKit *)v4)) & 1) != 0)
      {
        switch(objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 2), "code"))
        {
          case 1001:
            v117[0] = 31;
            WTF::String::String((WTF::String *)&v118, &stru_1E351F1B8.isa);
            WebCore::ExceptionData::operator=((uint64_t)v130, v117);
            WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v117);
            break;
          case 1004:
            v5 = objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 2), "userInfo"), "objectForKeyedSubscript:", *MEMORY[0x1E0CB3388]);
            WTF::retainPtr<ASAuthorization *>(&v125, v5);
            WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v126, (uint64_t *)&v125);
            WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v125);
            v6 = (void *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v126), "domain");
            if ((objc_msgSend(v6, "isEqualToString:", WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v6)) & 1) != 0&& objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v126), "code") == 17)
            {
              v123[0] = 14;
              v7 = (NSString *)objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v126), "userInfo"), "objectForKeyedSubscript:", *MEMORY[0x1E0CB2D68]);
              WTF::String::String((WTF::String *)&v124, v7);
              WebCore::ExceptionData::operator=((uint64_t)v130, v123);
              WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v123);
            }
            else if ((objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v126), "domain"), "isEqualToString:", CFSTR("WKErrorDomain")) & 1) != 0)
            {
              v8 = (WebKit *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v126), "code");
              v121[0] = WebKit::toExceptionCode(v8);
              v9 = (NSString *)objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v126), "userInfo"), "objectForKeyedSubscript:", *MEMORY[0x1E0CB2D50]);
              WTF::String::String((WTF::String *)&v122, v9);
              WebCore::ExceptionData::operator=((uint64_t)v130, v121);
              WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v121);
            }
            WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v126);
            break;
          case 1006:
            v119[0] = 8;
            WTF::String::String((WTF::String *)&v120, &stru_1E351F1B8.isa);
            WebCore::ExceptionData::operator=((uint64_t)v130, v119);
            WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v119);
            break;
          default:
            break;
        }
      }
      else
      {
        v10 = (WebKit *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 1), "credential");
        WebKit::getASAuthorizationPlatformPublicKeyCredentialRegistrationClass[0](v10);
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          LOBYTE(v132) = 1;
          v11 = objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 1), "credential");
          WTF::retainPtr<ASAuthorization *>(&v116, v11);
          v12 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v116), "credentialID");
          WebKit::toArrayBuffer((WebKit *)&v115, v12);
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v132 + 1, &v115);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v115);
          v13 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v116), "rawAttestationObject");
          WebKit::toArrayBuffer((WebKit *)&v114, v13);
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v135, &v114);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v114);
          v110[0] = 3;
          v110[1] = 5;
          v111 = v110;
          v112 = 2;
          WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((unsigned int *)v113, (uint64_t)v110, 2);
          WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)&v137, v113);
          WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v113);
          v14 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v116), "rawClientDataJSON");
          WebKit::toArrayBuffer((WebKit *)&v109, v14);
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v134 + 1, &v109);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v109);
          v108 = 0;
          WebCore::AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs((WebCore::AuthenticationExtensionsClientOutputs *)v105);
          if (objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v116), "largeBlob"))
          {
            v108 = 1;
            v101 = objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v116), "largeBlob"), "isSupported") & 1;
            std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(v102, &v101);
            v213 = &v103;
            v212 = 0;
            v215 = &v103;
            v214 = 0;
            v103 = 0;
            std::optional<BOOL>::optional[abi:sn180100](v104);
            std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,void>((uint64_t)&v106, (uint64_t)v102);
            WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::~LargeBlobOutputs((WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *)v102);
          }
          WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v116);
          if ((objc_opt_respondsToSelector() & 1) != 0
            && objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v116), "prf"))
          {
            v108 = 1;
            v211 = (uint64_t *)&v100;
            v210 = 0;
            v217 = (uint64_t *)&v100;
            v216 = 0;
            v100 = 0;
            v209 = &v99;
            v208 = 0;
            v219 = &v99;
            v218 = 0;
            v99 = 0;
            if (objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v116), "prf"), "first"))
            {
              v15 = (NSData *)objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v116), "prf"), "first");
              WebKit::toArrayBuffer((WebKit *)&v98, v15);
              WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v100, &v98);
              WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v98);
            }
            if (objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v116), "prf"), "second"))
            {
              v16 = (NSData *)objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v116), "prf"), "second");
              WebKit::toArrayBuffer((WebKit *)&v97, v16);
              WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v99, &v97);
              WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v97);
            }
            if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(&v100))
            {
              v94 = objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v116), "prf"), "isSupported") & 1;
              std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(&v95, &v94);
              v183 = &v92;
              v182 = (uint64_t *)&v100;
              v185 = &v92;
              v184 = (uint64_t *)&v100;
              v203 = (uint64_t *)&v100;
              v198 = v100;
              if (v100)
                WTF::StringImpl::ref(v198);
              v92 = v198;
              v181 = &v93;
              v180 = &v99;
              v187 = &v93;
              v186 = &v99;
              v202 = &v99;
              v197 = v99;
              if (v99)
                WTF::StringImpl::ref(v197);
              v93 = v197;
              std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,0>((uint64_t)&v96, (uint64_t *)&v92);
              std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,void>((uint64_t)v107, &v95);
              WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::~PRFOutputs((WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *)&v95);
              WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v92);
            }
            else
            {
              v89 = objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v116), "prf"), "isSupported") & 1;
              std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(&v90, &v89);
              std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::optional[abi:sn180100](v91);
              std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,void>((uint64_t)v107, &v90);
              WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::~PRFOutputs((WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *)&v90);
            }
            v145 = &v99;
            v146[1] = &v99;
            v146[0] = 0;
            v173 = &v99;
            v172 = v146;
            v159 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v99);
            if (v159)
              WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v159);
            v144 = (uint64_t *)&v100;
            v147[1] = &v100;
            v147[0] = 0;
            v171 = (uint64_t *)&v100;
            v170 = v147;
            v158 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v100);
            if (v158)
              WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v158);
          }
          if ((v108 & 1) != 0)
            std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs&,void>((WebCore::AuthenticationExtensionsClientOutputs *)v133, (const WebCore::AuthenticationExtensionsClientOutputs *)v105);
          WebCore::AuthenticationExtensionsClientOutputs::~AuthenticationExtensionsClientOutputs((WebCore::AuthenticationExtensionsClientOutputs *)v105);
          WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v116);
        }
        else
        {
          v17 = (WebKit *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 1), "credential");
          WebKit::getASAuthorizationPlatformPublicKeyCredentialAssertionClass[0](v17);
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v18 = objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 1), "credential");
            WTF::retainPtr<ASAuthorization *>(&v88, v18);
            v19 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v88), "credentialID");
            WebKit::toArrayBuffer((WebKit *)&v87, v19);
            WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v132 + 1, &v87);
            WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v87);
            v20 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v88), "rawAuthenticatorData");
            WebKit::toArrayBuffer((WebKit *)&v86, v20);
            WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v135 + 1, &v86);
            WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v86);
            v21 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v88), "signature");
            WebKit::toArrayBuffer((WebKit *)&v85, v21);
            WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v136, &v85);
            WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v85);
            v22 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v88), "userID");
            WebKit::toArrayBufferNilIfEmpty(&v84, v22);
            WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=((uint64_t *)&v136 + 1, &v84);
            v143 = &v84;
            v148[1] = &v84;
            v148[0] = 0;
            v169 = &v84;
            v168 = v148;
            v157 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v84);
            if (v157)
              WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v157);
            v23 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v88), "rawClientDataJSON");
            WebKit::toArrayBuffer((WebKit *)&v83, v23);
            WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v134 + 1, &v83);
            WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v83);
            v82 = 0;
            WebCore::AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs((WebCore::AuthenticationExtensionsClientOutputs *)v79);
            if (objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v88), "largeBlob"))
            {
              v82 = 1;
              v207 = &v78;
              v206 = 0;
              v221 = &v78;
              v220 = 0;
              v78 = 0;
              if (objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v88), "largeBlob"), "readData"))
              {
                v24 = (NSData *)objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v88), "largeBlob"), "readData");
                WebKit::toArrayBuffer((WebKit *)&v77, v24);
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v78, &v77);
                WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v77);
              }
              std::optional<BOOL>::optional[abi:sn180100](v74);
              v179 = &v75;
              v178 = &v78;
              v189 = &v75;
              v188 = &v78;
              v201 = &v78;
              v196 = v78;
              if (v78)
                WTF::StringImpl::ref(v196);
              v75 = v196;
              v73[0] = objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v88), "largeBlob"), "didWrite") & 1;
              std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(v76, v73);
              std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,void>((uint64_t)&v80, (uint64_t)v74);
              WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::~LargeBlobOutputs((WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *)v74);
              v142 = &v78;
              v149[1] = &v78;
              v149[0] = 0;
              v167 = &v78;
              v166 = v149;
              v156 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v78);
              if (v156)
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v156);
            }
            WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v88);
            if ((objc_opt_respondsToSelector() & 1) != 0
              && objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v88), "prf"))
            {
              v82 = 1;
              v25 = (NSData *)objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v88), "prf"), "first");
              WebKit::toArrayBuffer((WebKit *)&v71, v25);
              WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>((uint64_t *)&v72, &v71);
              WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v71);
              v205 = &v70;
              v204 = 0;
              v223 = &v70;
              v222 = 0;
              v70 = 0;
              if (objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v88), "prf"), "second"))
              {
                v26 = (NSData *)objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v88), "prf"), "second");
                WebKit::toArrayBuffer((WebKit *)&v69, v26);
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v70, &v69);
                WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v69);
              }
              std::optional<BOOL>::optional[abi:sn180100](&v67);
              v177 = &v65;
              v176 = &v72;
              v191 = &v65;
              v190 = &v72;
              v200 = &v72;
              v195 = v72;
              if (v72)
                WTF::StringImpl::ref(v195);
              v65 = v195;
              v175 = v66;
              v174 = &v70;
              v193 = v66;
              v192 = &v70;
              v199 = &v70;
              v194 = v70;
              if (v70)
                WTF::StringImpl::ref(v194);
              v66[0] = v194;
              std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,0>((uint64_t)&v68, (uint64_t *)&v65);
              std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,void>((uint64_t)&v81, &v67);
              WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::~PRFOutputs((WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *)&v67);
              WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v65);
              v141 = &v70;
              v150[1] = &v70;
              v150[0] = 0;
              v165 = &v70;
              v164 = v150;
              v155 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v70);
              if (v155)
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v155);
              v140 = &v72;
              v151[1] = &v72;
              v151[0] = 0;
              v163 = &v72;
              v162 = v151;
              v154 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v72);
              if (v154)
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v154);
            }
            if ((v82 & 1) != 0)
              std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs&,void>((WebCore::AuthenticationExtensionsClientOutputs *)v133, (const WebCore::AuthenticationExtensionsClientOutputs *)v79);
            WebCore::AuthenticationExtensionsClientOutputs::~AuthenticationExtensionsClientOutputs((WebCore::AuthenticationExtensionsClientOutputs *)v79);
            WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v88);
          }
          else
          {
            v27 = (WebKit *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 1), "credential");
            WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialRegistrationClass[0](v27);
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v28 = objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 1), "credential");
              WTF::retainPtr<ASAuthorization *>(&v64, v28);
              LOBYTE(v132) = 1;
              v29 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v64), "credentialID");
              WebKit::toArrayBuffer((WebKit *)&v63, v29);
              WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v132 + 1, &v63);
              WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v63);
              v30 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v64), "rawAttestationObject");
              WebKit::toArrayBuffer((WebKit *)&v62, v30);
              WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v135, &v62);
              WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v62);
              WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v64);
              if ((objc_opt_respondsToSelector() & 1) != 0)
              {
                v31 = (void *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v64), "transports");
                WebKit::toTransports((unsigned int *)v61, v31);
                WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)&v137, v61);
                WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v61);
              }
              else
              {
                WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v60);
                WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)&v137, v60);
                WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v60);
              }
              v32 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v64), "rawClientDataJSON");
              WebKit::toArrayBuffer((WebKit *)&v59, v32);
              WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v134 + 1, &v59);
              WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v59);
              WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v64);
            }
            else
            {
              v33 = (WebKit *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 1), "credential");
              WebKit::getASAuthorizationSecurityKeyPublicKeyCredentialAssertionClass[0](v33);
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v34 = objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1 + 1), "credential");
                WTF::retainPtr<ASAuthorization *>(&v58, v34);
                v35 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v58), "credentialID");
                WebKit::toArrayBuffer((WebKit *)&v57, v35);
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v132 + 1, &v57);
                WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v57);
                v36 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v58), "rawAuthenticatorData");
                WebKit::toArrayBuffer((WebKit *)&v56, v36);
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v135 + 1, &v56);
                WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v56);
                v37 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v58), "signature");
                WebKit::toArrayBuffer((WebKit *)&v55, v37);
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v136, &v55);
                WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v55);
                v38 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v58), "userID");
                WebKit::toArrayBufferNilIfEmpty(&v54, v38);
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=((uint64_t *)&v136 + 1, &v54);
                v139 = &v54;
                v152[1] = &v54;
                v152[0] = 0;
                v161 = &v54;
                v160 = v152;
                v153 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v54);
                if (v153)
                  WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v153);
                v39 = (NSData *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v58), "rawClientDataJSON");
                WebKit::toArrayBuffer((WebKit *)&v53, v39);
                WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v134 + 1, &v53);
                WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v53);
                WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v58);
                if ((objc_opt_respondsToSelector() & 1) != 0)
                {
                  WebCore::AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs((WebCore::AuthenticationExtensionsClientOutputs *)v52);
                  v50 = objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v58), "appID") & 1;
                  std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(&v51, &v50);
                  v52[0] = v51;
                  std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs&,void>((WebCore::AuthenticationExtensionsClientOutputs *)v133, (const WebCore::AuthenticationExtensionsClientOutputs *)v52);
                  WebCore::AuthenticationExtensionsClientOutputs::~AuthenticationExtensionsClientOutputs((WebCore::AuthenticationExtensionsClientOutputs *)v52);
                }
                WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v58);
              }
            }
          }
        }
      }
    }
    v40 = WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator BOOL(a1);
    if (v40)
    {
      v41 = (uint64_t *)WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy((WebKit::WebAuthenticatorCoordinatorProxy *)v40);
      v42 = WTF::operator==<WebKit::WebAuthenticatorCoordinatorProxy,WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>(v41, a1);
      if (v42)
      {
        v43 = (uint64_t *)WebKit::WebAuthenticatorCoordinatorProxy::activeConditionalMediationProxy((WebKit::WebAuthenticatorCoordinatorProxy *)v42);
        WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=(v43);
      }
      if ((*(_BYTE *)(WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1)
                     + 48) & 1) == 0)
      {
        v44 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
        WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()((WTF::RefCountedBase *)(v44 + 24), (uint64_t)&v132, v129, (uint64_t)v130);
        v45 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
        WTF::RetainPtr<ASCAgentProxy>::clear((uint64_t *)(v45 + 32));
        v46 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
        WTF::RetainPtr<ASCAgentProxy>::clear((uint64_t *)(v46 + 40));
        *(_BYTE *)(WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1)
                 + 49) = 0;
      }
      v47 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
      WTF::CompletionHandler<void ()(void)>::CompletionHandler(&v49, v47 + 72);
      if (WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator BOOL())
        WTF::CompletionHandler<void ()(void)>::operator()(&v49);
      WTF::CompletionHandler<void ()(void)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v49);
    }
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v130);
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)&v132, v48);
  }
}

uint64_t WebKit::toExceptionCode(WebKit *this)
{
  if (this > 0x25u)
    return 31;
  else
    return this;
}

WTF::StringImpl **WebCore::ExceptionData::operator=(uint64_t a1, _BYTE *a2)
{
  *(_BYTE *)a1 = *a2;
  return WTF::String::operator=((WTF::StringImpl **)(a1 + 8), (WTF::StringImpl *)(a2 + 8));
}

uint64_t WebKit::toArrayBuffer(WebKit *this, NSData *a2)
{
  WTF::span((WTF *)a2, a2);
  return JSC::ArrayBuffer::create();
}

WTF::DeferrableRefCountedBase *WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>(uint64_t *a1, uint64_t *a2)
{
  WTF::DeferrableRefCountedBase *result;
  uint64_t v4[5];
  _QWORD v5[5];
  WTF::DeferrableRefCountedBase *v6;
  _QWORD *v7;
  uint64_t *v8;

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v4, a2);
  WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::swap<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>(a1, v4);
  v4[4] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  v8 = v4;
  v7 = v5;
  result = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  v6 = result;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
  return result;
}

void sub_197676F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;

  a16 = &a13;
  *(_QWORD *)(v20 - 72) = &a13;
  v21 = *(_QWORD *)(v20 - 72);
  a20 = 0;
  *(_QWORD *)(v20 - 40) = v21;
  *(_QWORD *)(v20 - 48) = &a20;
  *(_QWORD *)(v20 - 64) = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(*(uint64_t **)(v20 - 40));
  if (*(_QWORD *)(v20 - 64))
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(*(WTF::DeferrableRefCountedBase **)(v20 - 64));
  _Unwind_Resume(a1);
}

uint64_t *WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(uint64_t *a1)
{
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(a1);
  return a1;
}

{
  uint64_t v2;
  WTF::DeferrableRefCountedBase *v3;
  uint64_t *v4;
  uint64_t *v5;
  WTF::DeferrableRefCountedBase *v6;
  uint64_t *v7;
  uint64_t *v8;

  v4 = a1;
  v5 = a1;
  v3 = 0;
  v2 = 0;
  v8 = a1;
  v7 = &v2;
  v3 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v3)
  {
    v6 = v3;
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
  }
  return v5;
}

void WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF::ASCIILiteral *a1, uint64_t *a2)
{
  if (*((_DWORD *)a1 + 3))
  {
    WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity((uint64_t)a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
}

WebCore::AuthenticationExtensionsClientOutputs *WebCore::AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs(WebCore::AuthenticationExtensionsClientOutputs *this)
{
  WebCore::AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs(this);
  return this;
}

{
  std::optional<BOOL>::optional[abi:sn180100](this);
  std::optional<BOOL>::optional[abi:sn180100]((_BYTE *)this + 2);
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::optional[abi:sn180100]((_BYTE *)this + 8);
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::optional[abi:sn180100]((_BYTE *)this + 40);
  return this;
}

_BYTE *std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(_BYTE *a1, _BYTE *a2)
{
  std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(a1, a2);
  return a1;
}

{
  _ZNSt3__127__optional_move_assign_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

_BYTE *std::optional<BOOL>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<BOOL>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::optional<BOOL>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<BOOL,true>::__optional_move_assign_base(a1);
  return a1;
}

{
  std::__optional_move_assign_base<BOOL,true>::__optional_move_assign_base(a1);
  return a1;
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,0>(uint64_t a1, uint64_t *a2)
{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,0>(a1, a2);
  return a1;
}

{
  _ZNSt3__127__optional_move_assign_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,void>(uint64_t a1, _WORD *a2)
{
  _WORD *v3;

  if ((std::__optional_storage_base<WebCore::SecurityOriginData,false>::has_value[abi:sn180100](a1) & 1) == 0)
    return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>(a1, (uint64_t)a2);
  std::__to_address[abi:sn180100]<char const>();
  return WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::operator=(v3, a2);
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientOutputs *std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs&,void>(WebCore::AuthenticationExtensionsClientOutputs *a1, const WebCore::AuthenticationExtensionsClientOutputs *a2)
{
  _DWORD *v3;

  if ((std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::has_value[abi:sn180100]((uint64_t)a1) & 1) == 0)
    return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs&>(a1, a2);
  std::__to_address[abi:sn180100]<char const>();
  return (WebCore::AuthenticationExtensionsClientOutputs *)WebCore::AuthenticationExtensionsClientOutputs::operator=(v3, a2);
}

uint64_t *WebKit::toArrayBufferNilIfEmpty(uint64_t *this, NSData *a2)
{
  uint64_t *v2;
  NSData *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t *v6;
  uint64_t v7;

  v2 = this;
  v6 = this;
  v5 = (WTF *)a2;
  if (a2 && (this = (uint64_t *)-[WTF length](v5, "length")) != 0)
  {
    WTF::span(v5, v3);
    JSC::ArrayBuffer::create();
    WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>>(v2, &v4);
    return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v4);
  }
  else
  {
    v7 = 0;
    *v2 = 0;
  }
  return this;
}

uint64_t WebKit::toTransports(unsigned int *a1, void *a2)
{
  id v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  NSString *v20;
  char v21;
  id v22;
  unsigned int *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD v27[2];
  WTF::StringImpl *v28;
  _QWORD *v29;
  uint64_t *v30;
  _BYTE *v31;
  unsigned int *v32;
  _BYTE *v33;
  unsigned int *v34;
  char v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v23 = a1;
  v22 = a2;
  v21 = 0;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1);
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v3 = v22;
  result = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v16, v36, 16);
  v5 = result;
  if (result)
  {
    v6 = *(_QWORD *)v17;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(v3);
        v20 = 0;
        v20 = *(NSString **)(*((_QWORD *)&v16 + 1) + 8 * v7);
        WTF::String::String((WTF::String *)&v14, v20);
        v15 = WebCore::convertStringToAuthenticatorTransport((WebCore *)&v14, v8);
        v24 = &v14;
        v25 = &v14;
        v26 = &v14;
        v27[1] = &v14;
        v27[0] = 0;
        v30 = &v14;
        v29 = v27;
        v28 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v14);
        if (v28)
          WTF::StringImpl::deref(v28, v9);
        if ((std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100]((uint64_t)&v15) & 1) != 0)
        {
          std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100]((uint64_t)&v15);
          v32 = a1;
          v31 = v10;
          v34 = a1;
          v33 = v10;
          v11 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
          if (v11 == WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1))
          {
            WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AuthenticatorTransport&>(a1, (unint64_t)v33);
          }
          else
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
            v12 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
            v13 = (_BYTE *)operator new(1, 0, v12);
            *v13 = *v33;
            ++a1[3];
          }
          v35 = 1;
        }
        ++v7;
      }
      while (v7 < v5);
      result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v36, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

BOOL WTF::operator==<WebKit::WebAuthenticatorCoordinatorProxy,WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(a1);
  return v2 == WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::get(a2);
}

WTF::FastMalloc *WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=(uint64_t *a1)
{
  return WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=(a1);
}

uint64_t WTF::span(WTF *this, NSData *a2)
{
  uint64_t v3;

  if (this)
    std::span<char const,18446744073709551615ul>::span[abi:sn180100]<char const*>(&v3, -[WTF bytes](this, "bytes"), -[WTF length](this, "length"));
  else
    std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100](&v3);
  return v3;
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_assign_base<BOOL,true>::__optional_move_assign_base(_BYTE *a1)
{
  std::__optional_copy_assign_base<BOOL,true>::__optional_copy_assign_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<BOOL,true>::__optional_copy_assign_base(_BYTE *a1)
{
  std::__optional_move_base<BOOL,true>::__optional_move_base(a1);
  return a1;
}

_BYTE *std::__optional_move_base<BOOL,true>::__optional_move_base(_BYTE *a1)
{
  std::__optional_copy_base<BOOL,true>::__optional_copy_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_base<BOOL,true>::__optional_copy_base(_BYTE *a1)
{
  std::__optional_storage_base<WebCore::MediationRequirement,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_copy_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_move_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_move_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_copy_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::GlobalFrameIdentifier,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_copy_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_copy_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::SecurityOriginData,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *_ZNSt3__127__optional_move_assign_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(_BYTE *a1, _BYTE *a2)
{
  _ZNSt3__127__optional_copy_assign_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

_BYTE *_ZNSt3__127__optional_copy_assign_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(_BYTE *a1, _BYTE *a2)
{
  _ZNSt3__120__optional_move_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

_BYTE *_ZNSt3__120__optional_move_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(_BYTE *a1, _BYTE *a2)
{
  _ZNSt3__120__optional_copy_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

_BYTE *_ZNSt3__120__optional_copy_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(_BYTE *a1, _BYTE *a2)
{
  _ZNSt3__123__optional_storage_baseIbLb0EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

_BYTE *_ZNSt3__123__optional_storage_baseIbLb0EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(_BYTE *a1, _BYTE *a2)
{
  std::__optional_destruct_base<BOOL,true>::__optional_destruct_base[abi:sn180100]<BOOL>(a1, a2);
  return a1;
}

_BYTE *std::__optional_destruct_base<BOOL,true>::__optional_destruct_base[abi:sn180100]<BOOL>(_BYTE *result, _BYTE *a2)
{
  *result = *a2 & 1;
  result[1] = 1;
  return result;
}

uint64_t *WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t *result;

  *(_WORD *)a1 = *(_WORD *)a2;
  result = WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return result;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs*>(a1, a2);
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs*>(uint64_t a1, uint64_t a2)
{
  if (!a1)
    __break(1u);
  return WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::LargeBlobOutputs(a1, a2);
}

uint64_t WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::LargeBlobOutputs(uint64_t a1, uint64_t a2)
{
  WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::LargeBlobOutputs(a1, a2);
  return a1;
}

{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef((uint64_t *)(a2 + 8));
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t _ZNSt3__127__optional_move_assign_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__127__optional_copy_assign_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__127__optional_copy_assign_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__120__optional_move_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__120__optional_move_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__120__optional_copy_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__120__optional_copy_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t *a2)
{
  _ZNSt3__123__optional_storage_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__123__optional_storage_baseIN7WebCore37AuthenticationExtensionsClientOutputs9PRFValuesELb0EECI2NS_24__optional_destruct_baseIS3_Lb0EEEIJS3_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t *a2)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>(a1, a2);
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>(uint64_t a1, uint64_t *a2)
{
  WebCore::AuthenticationExtensionsClientOutputs::PRFValues::PRFValues((uint64_t *)a1, a2);
  *(_BYTE *)(a1 + 16) = 1;
  return a1;
}

uint64_t *WebCore::AuthenticationExtensionsClientOutputs::PRFValues::PRFValues(uint64_t *a1, uint64_t *a2)
{
  WebCore::AuthenticationExtensionsClientOutputs::PRFValues::PRFValues(a1, a2);
  return a1;
}

{
  *a1 = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2);
  a1[1] = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::leakRef(a2 + 1);
  return a1;
}

uint64_t WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::operator=(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  return std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::operator=[abi:sn180100]((uint64_t)(a1 + 4), (uint64_t)(a2 + 4));
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>>(a1, a2);
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>>(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;

  v3 = *(_BYTE *)(a1 + 16) & 1;
  result = std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a2);
  if (v3 == (result & 1))
  {
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    {
      std::__to_address[abi:sn180100]<char const>();
      return (uint64_t)WebCore::AuthenticationExtensionsClientOutputs::PRFValues::operator=((uint64_t *)a1, v5);
    }
  }
  else if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    return std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    return (uint64_t)std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>(a1, v6);
  }
  return result;
}

uint64_t *WebCore::AuthenticationExtensionsClientOutputs::PRFValues::operator=(uint64_t *a1, uint64_t *a2)
{
  WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(a1, a2);
  return WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(a1 + 1, a2 + 1);
}

uint64_t *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues>(uint64_t a1, uint64_t *a2)
{
  uint64_t *result;

  result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues*>((uint64_t *)a1, a2);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t *std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues*>(uint64_t *a1, uint64_t *a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues*>(a1, a2);
}

uint64_t *std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues,WebCore::AuthenticationExtensionsClientOutputs::PRFValues*>(uint64_t *a1, uint64_t *a2)
{
  if (!a1)
    __break(1u);
  return WebCore::AuthenticationExtensionsClientOutputs::PRFValues::PRFValues(a1, a2);
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_copy_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_move_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFValues,false>::__optional_move_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](a1);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 80) & 1;
}

uint64_t WebCore::AuthenticationExtensionsClientOutputs::operator=(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::operator=[abi:sn180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100]((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
}

WebCore::AuthenticationExtensionsClientOutputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs&>(WebCore::AuthenticationExtensionsClientOutputs *a1, const WebCore::AuthenticationExtensionsClientOutputs *a2)
{
  WebCore::AuthenticationExtensionsClientOutputs *result;

  result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs&,WebCore::AuthenticationExtensionsClientOutputs*>(a1, a2);
  *((_BYTE *)a1 + 80) = 1;
  return result;
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false> const&>(a1, a2);
}

void std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::reset[abi:sn180100](WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1)
{
  if ((*((_BYTE *)a1 + 24) & 1) != 0)
  {
    WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::~LargeBlobOutputs(a1);
    *((_BYTE *)a1 + 24) = 0;
  }
}

uint64_t std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false> const&>(a1, a2);
}

void std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::reset[abi:sn180100](WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *a1)
{
  if ((*((_BYTE *)a1 + 32) & 1) != 0)
  {
    WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::~PRFOutputs(a1);
    *((_BYTE *)a1 + 32) = 0;
  }
}

WebCore::AuthenticationExtensionsClientOutputs *std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs&,WebCore::AuthenticationExtensionsClientOutputs*>(WebCore::AuthenticationExtensionsClientOutputs *a1, const WebCore::AuthenticationExtensionsClientOutputs *a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs&,WebCore::AuthenticationExtensionsClientOutputs*>(a1, a2);
}

WebCore::AuthenticationExtensionsClientOutputs *std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs&,WebCore::AuthenticationExtensionsClientOutputs*>(WebCore::AuthenticationExtensionsClientOutputs *a1, const WebCore::AuthenticationExtensionsClientOutputs *a2)
{
  if (!a1)
    __break(1u);
  return WebCore::AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs(a1, a2);
}

WebCore::AuthenticationExtensionsClientOutputs *WebCore::AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs(WebCore::AuthenticationExtensionsClientOutputs *this, const WebCore::AuthenticationExtensionsClientOutputs *a2)
{
  WebCore::AuthenticationExtensionsClientOutputs::AuthenticationExtensionsClientOutputs(this, a2);
  return this;
}

{
  _BYTE *v3;

  *(_DWORD *)this = *(_DWORD *)a2;
  v3 = (char *)this + 40;
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::optional[abi:sn180100]((uint64_t)this + 8, (uint64_t)a2 + 8);
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::optional[abi:sn180100](v3, (uint64_t)a2 + 40);
  return this;
}

void sub_197678790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *v11;

  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::~optional(v11);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::optional[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_move_assign_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_move_base[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__optional_copy_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__optional_copy_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AuthenticatorTransport&>(unsigned int *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *result;
  _BYTE *v7;

  v3 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
  v7 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1, (WTF *)(v3 + 1), a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  v4 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
  result = (_BYTE *)operator new(1, 0, v4);
  *result = *v7;
  ++a1[3];
  return result;
}

WTF::FastMalloc *WTF::RefPtr<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>::operator=(uint64_t *a1)
{
  WTF::FastMalloc *result;
  _QWORD v2[5];
  WTF::FastMalloc *v3;

  v2[2] = a1;
  v2[1] = 0;
  v2[0] = 0;
  v2[4] = a1;
  v2[3] = v2;
  result = (WTF::FastMalloc *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  v3 = result;
  if (result)
    return WTF::ThreadSafeRefCounted<WTF::DefaultWeakPtrImpl,(WTF::DestructionThread)0>::deref(v3);
  return result;
}

uint64_t *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&,void,objc_object  {objcproto21ASCCredentialProtocol}*,NSError *>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6[8];

  v6[7] = (uint64_t)a1;
  v6[6] = a4;
  v6[5] = a3;
  v6[4] = (uint64_t)a2;
  v6[3] = a4;
  v6[2] = a3;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::$_0(v6, a2);
  WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(a1, v6);
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0(v6);
}

void sub_197678BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0(&a12);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(WTF::ThreadSafeRefCountedBase **a1, uint64_t a2, uint64_t a3)
{
  WTF::ThreadSafeRefCountedBase *v5;
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::ThreadSafeRefCountedBase **v12;

  v12 = a1;
  v11 = a2;
  v10 = a3;
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v5, a1);
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(&v6, (uint64_t)(a1 + 1));
  WTF::retainPtr<ASAuthorization *>(&v7, v11);
  WTF::retainPtr<ASAuthorization *>(&v8, v10);
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>(&v9, (uint64_t *)&v5);
  WTF::ensureOnMainRunLoop();
  WTF::Function<void ()(void)>::~Function((uint64_t)&v9);
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::~NSError((uint64_t *)&v5);
}

void sub_197678C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(&a12);
  _Unwind_Resume(a1);
}

_QWORD *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;
  char v5;
  int v6;
  void *v7;
  uint64_t *v8;
  _QWORD *v9;

  v9 = a1;
  v8 = a2;
  v7 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *(_QWORD *)v7 = MEMORY[0x1E0C809A0];
  v6 = 1;
  *((_DWORD *)v7 + 2) = 50331650;
  *((_DWORD *)v7 + 3) = 0;
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)&v5);
  *((_QWORD *)v7 + 2) = WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::__invoke;
  *((_QWORD *)v7 + 3) = &WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::descriptor;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::$_0((uint64_t *)v7 + 4, a2);
  result = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *a1 = v7;
  return result;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  char v2;
  uint64_t v3;

  v3 = a1;
  return WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void const*)#1}::operator()((uint64_t)&v2, a1);
}

uint64_t *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void const*)#1}::operator()(uint64_t a1, uint64_t a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0((uint64_t *)(a2 + 32));
}

uint64_t *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  v5 = a3;
  return WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::operator()((uint64_t)&v4, a1, a2, a3);
}

uint64_t *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()((WTF::ThreadSafeRefCountedBase **)(a2 + 32), a3, a4);
}

void sub_197678F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  uint64_t *v11;

  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(v11);
  _Unwind_Resume(a1);
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~CompletionHandler(a1);
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)a1);
  return a1;
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>,NSError>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::~NSError(uint64_t *a1)
{
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::~NSError(a1);
  return a1;
}

{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(a1 + 3);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(a1 + 2);
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)(a1 + 1));
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(a1);
  return a1;
}

void sub_197679024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::ThreadLikeAssertion *v11;

  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(v11);
  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function((uint64_t)v11);
  _Unwind_Resume(a1);
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>,NSError>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x28);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_1976790F8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc *v11;

  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = off_1E34F3458;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::NSError(a1 + 1, a2);
  return a1;
}

void sub_1976791A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  std::__to_address[abi:sn180100]<char const>();
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::NSError(uint64_t *a1, uint64_t *a2)
{
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::NSError(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(a1 + 1, (uint64_t)(a2 + 1));
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1 + 2, a2 + 2);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1 + 3, a2 + 3);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34F3458;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::~NSError(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

void sub_197679310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  uint64_t *v11;

  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(v11);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef v9;
  uint8_t buf[7];
  char v11;
  os_log_t oslog;
  uint64_t v13;
  uint64_t v14;
  char v15[8];
  uint64_t v16;
  _OWORD v17[10];
  uint64_t *v18;

  v18 = a1;
  if (WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1))
  {
    memset(v17, 0, sizeof(v17));
    WebCore::AuthenticatorResponseData::AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v17);
    v15[0] = 31;
    v13 = WTF::StringLiterals::operator"" _s((WTF::ASCIILiteral *)"Operation failed.", (const char *)0x11);
    v14 = v2;
    WTF::String::String(&v16, v13, v2);
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()((WTF::RefCountedBase *)(a1 + 1), (uint64_t)v17, 0, (uint64_t)v15);
    WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v15);
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v17, v3);
    oslog = (os_log_t)qword_1ECE71AC8;
    v11 = 16;
    if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
    {
      v4 = oslog;
      v5 = v11;
      __os_log_helper_16_0_0(buf);
      _os_log_error_impl(&dword_196BCC000, v4, v5, "Request cancelled after WebAuthenticatorCoordinatorProxy invalid after starting request.", buf, 2u);
    }
  }
  else
  {
    WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v9, a1 + 2);
    WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v8, a1 + 3);
    WebKit::continueAfterRequest((uint64_t *)&v9, (uint64_t *)&v8, (WTF::RefCountedBase *)(a1 + 1));
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v8);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v9);
    v6 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    if (WTF::RetainPtr<WKWebView>::operator BOOL((_QWORD *)(v6 + 64)))
    {
      v7 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
      WTF::RetainPtr<ASCAgentProxy>::clear((uint64_t *)(v7 + 64));
    }
  }
}

void WebKit::continueAfterRequest(uint64_t *a1, uint64_t *a2, WTF::RefCountedBase *a3)
{
  WebKit *v5;
  WebKit *v6;
  WebKit *v7;
  WebKit *v8;
  WebKit *v9;
  void *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  void *v14;
  char v15[8];
  uint64_t v16;
  os_log_type_t v17;
  os_log_t v18;
  uint8_t buf[15];
  char v20;
  os_log_t oslog;
  NSString *v22;
  char v23;
  _BYTE v24[88];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  _BYTE v31[88];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _BYTE v38[88];
  uint64_t v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  _BYTE v44[88];
  uint64_t v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  _BYTE v51[8];
  uint64_t v52;
  __int128 v53;
  _BYTE v54[80];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  WTF::RefCountedBase *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  _QWORD v64[2];
  _QWORD v65[2];
  WTF::DeferrableRefCountedBase *v66;
  WTF::DeferrableRefCountedBase *v67;
  _QWORD *v68;
  uint64_t *v69;
  _QWORD *v70;
  uint64_t *v71;
  uint8_t v72[24];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v61 = a1;
  v60 = a2;
  v59 = a3;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  v53 = 0u;
  WebCore::AuthenticatorResponseData::AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)&v53);
  v51[0] = 0;
  v52 = 0;
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v52);
  v50 = 0;
  v5 = (WebKit *)WTF::RetainPtr<__IOHIDDevice *>::get(a1);
  WebKit::getASCPlatformPublicKeyCredentialRegistrationClass[0](v5);
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    LOBYTE(v53) = 1;
    v49 = (id)WTF::RetainPtr<__IOHIDDevice *>::get(a1);
    WebKit::toArrayBuffer((WebKit *)&v48, (NSData *)objc_msgSend(v49, "credentialID"));
    WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v53 + 1, &v48);
    WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v48);
    WebKit::toArrayBuffer((WebKit *)&v47, (NSData *)objc_msgSend(v49, "attestationObject"));
    WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v56, &v47);
    WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v47);
    WebKit::toArrayBuffer((WebKit *)&v46, (NSData *)objc_msgSend(v49, "rawClientDataJSON"));
    WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v55 + 1, &v46);
    WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v46);
    v50 = (id)objc_msgSend(v49, "attachment");
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      WebKit::toAuthenticatorTransports((unsigned int *)v45, (void *)objc_msgSend(v49, "transports"));
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)&v58, v45);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v45);
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      WebKit::toExtensionOutputs((WebKit *)v44, (NSData *)objc_msgSend(v49, "extensionOutputsCBOR"));
      std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]((uint64_t)v54, (uint64_t)v44);
      std::optional<WebCore::AuthenticationExtensionsClientOutputs>::~optional((uint64_t)v44);
    }
  }
  else
  {
    v6 = (WebKit *)WTF::RetainPtr<__IOHIDDevice *>::get(a1);
    WebKit::getASCSecurityKeyPublicKeyCredentialRegistrationClass[0](v6);
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      LOBYTE(v53) = 1;
      v43 = (id)WTF::RetainPtr<__IOHIDDevice *>::get(a1);
      WebKit::toArrayBuffer((WebKit *)&v42, (NSData *)objc_msgSend(v43, "credentialID"));
      WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v53 + 1, &v42);
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v42);
      WebKit::toArrayBuffer((WebKit *)&v41, (NSData *)objc_msgSend(v43, "attestationObject"));
      WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v56, &v41);
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v41);
      WebKit::toArrayBuffer((WebKit *)&v40, (NSData *)objc_msgSend(v43, "rawClientDataJSON"));
      WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v55 + 1, &v40);
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v40);
      v50 = (id)objc_msgSend(v43, "attachment");
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        WebKit::toAuthenticatorTransports((unsigned int *)v39, (void *)objc_msgSend(v43, "transports"));
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF::ASCIILiteral *)&v58, v39);
        WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v39);
      }
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        WebKit::toExtensionOutputs((WebKit *)v38, (NSData *)objc_msgSend(v43, "extensionOutputsCBOR"));
        std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]((uint64_t)v54, (uint64_t)v38);
        std::optional<WebCore::AuthenticationExtensionsClientOutputs>::~optional((uint64_t)v38);
      }
    }
    else
    {
      v7 = (WebKit *)WTF::RetainPtr<__IOHIDDevice *>::get(a1);
      WebKit::getASCPlatformPublicKeyCredentialAssertionClass[0](v7);
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        LOBYTE(v53) = 0;
        v37 = (id)WTF::RetainPtr<__IOHIDDevice *>::get(a1);
        WebKit::toArrayBuffer((WebKit *)&v36, (NSData *)objc_msgSend(v37, "credentialID"));
        WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v53 + 1, &v36);
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v36);
        WebKit::toArrayBuffer((WebKit *)&v35, (NSData *)objc_msgSend(v37, "authenticatorData"));
        WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v56 + 1, &v35);
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v35);
        WebKit::toArrayBuffer((WebKit *)&v34, (NSData *)objc_msgSend(v37, "signature"));
        WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v57, &v34);
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v34);
        WebKit::toArrayBufferNilIfEmpty(&v33, (NSData *)objc_msgSend(v37, "userHandle"));
        WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=((uint64_t *)&v57 + 1, &v33);
        v63 = &v33;
        v64[1] = &v33;
        v64[0] = 0;
        v71 = &v33;
        v70 = v64;
        v67 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v33);
        if (v67)
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v67);
        WebKit::toArrayBuffer((WebKit *)&v32, (NSData *)objc_msgSend(v37, "rawClientDataJSON"));
        WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v55 + 1, &v32);
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v32);
        v50 = (id)objc_msgSend(v37, "attachment");
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          WebKit::toExtensionOutputs((WebKit *)v31, (NSData *)objc_msgSend(v37, "extensionOutputsCBOR"));
          std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]((uint64_t)v54, (uint64_t)v31);
          std::optional<WebCore::AuthenticationExtensionsClientOutputs>::~optional((uint64_t)v31);
        }
      }
      else
      {
        v8 = (WebKit *)WTF::RetainPtr<__IOHIDDevice *>::get(a1);
        WebKit::getASCSecurityKeyPublicKeyCredentialAssertionClass[0](v8);
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          LOBYTE(v53) = 0;
          v30 = (id)WTF::RetainPtr<__IOHIDDevice *>::get(a1);
          WebKit::toArrayBuffer((WebKit *)&v29, (NSData *)objc_msgSend(v30, "credentialID"));
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v53 + 1, &v29);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v29);
          WebKit::toArrayBuffer((WebKit *)&v28, (NSData *)objc_msgSend(v30, "authenticatorData"));
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v56 + 1, &v28);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v28);
          WebKit::toArrayBuffer((WebKit *)&v27, (NSData *)objc_msgSend(v30, "signature"));
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v57, &v27);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v27);
          WebKit::toArrayBufferNilIfEmpty(&v26, (NSData *)objc_msgSend(v30, "userHandle"));
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=((uint64_t *)&v57 + 1, &v26);
          v62 = &v26;
          v65[1] = &v26;
          v65[0] = 0;
          v69 = &v26;
          v68 = v65;
          v66 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v26);
          if (v66)
            WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v66);
          WebKit::toArrayBuffer((WebKit *)&v25, (NSData *)objc_msgSend(v30, "rawClientDataJSON"));
          WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=<JSC::ArrayBuffer>((uint64_t *)&v55 + 1, &v25);
          WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v25);
          v50 = (id)objc_msgSend(v30, "attachment");
          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            WebKit::toExtensionOutputs((WebKit *)v24, (NSData *)objc_msgSend(v30, "extensionOutputsCBOR"));
            std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100]((uint64_t)v54, (uint64_t)v24);
            std::optional<WebCore::AuthenticationExtensionsClientOutputs>::~optional((uint64_t)v24);
          }
        }
        else
        {
          v23 = 0;
          v22 = 0;
          if ((objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a2), "domain"), "isEqualToString:", CFSTR("WKErrorDomain")) & 1) != 0)
          {
            v9 = (WebKit *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a2), "code");
            v23 = WebKit::toExceptionCode(v9);
            v22 = (NSString *)objc_msgSend((id)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a2), "userInfo"), "objectForKeyedSubscript:", *MEMORY[0x1E0CB2D50]);
          }
          else
          {
            v23 = 31;
            v10 = (void *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a2), "domain");
            if ((objc_msgSend(v10, "isEqualToString:", WebKit::get_AuthenticationServicesCore_ASCAuthorizationErrorDomain((WebKit *)v10)) & 1) != 0&& objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a2), "code") == 2)
            {
              v22 = (NSString *)CFSTR("This request has been cancelled by the user.");
              oslog = (os_log_t)qword_1ECE71AC8;
              v20 = 16;
              if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
              {
                v11 = oslog;
                v12 = v20;
                __os_log_helper_16_0_0(buf);
                _os_log_error_impl(&dword_196BCC000, v11, v12, "Request cancelled after ASCAuthorizationErrorUserCanceled.", buf, 2u);
              }
            }
            else
            {
              v22 = (NSString *)CFSTR("Operation failed.");
              v18 = (os_log_t)qword_1ECE71AC8;
              v17 = OS_LOG_TYPE_ERROR;
              if (os_log_type_enabled((os_log_t)qword_1ECE71AC8, OS_LOG_TYPE_ERROR))
              {
                v13 = objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a2), "localizedDescription");
                __os_log_helper_16_2_1_8_64((uint64_t)v72, v13);
                _os_log_error_impl(&dword_196BCC000, v18, v17, "Request cancelled after error: %@.", v72, 0xCu);
              }
            }
          }
          v15[0] = v23;
          WTF::String::String((WTF::String *)&v16, v22);
          WebCore::ExceptionData::operator=((uint64_t)v51, v15);
          WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v15);
        }
      }
    }
  }
  if ((objc_msgSend(v50, "isEqualToString:", CFSTR("platform")) & 1) != 0)
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()(v59, (uint64_t)&v53, 0, (uint64_t)v51);
  else
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()(v59, (uint64_t)&v53, 1u, (uint64_t)v51);
  WebCore::ExceptionData::~ExceptionData((WebCore::ExceptionData *)v51);
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)&v53, v14);
}

uint64_t WebKit::toAuthenticatorTransports(unsigned int *a1, void *a2)
{
  id v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  id v16;
  char v17;
  id v18;
  unsigned int *v19;
  WTF::FastMalloc *v20;
  unsigned int *v21;
  char *v22;
  unsigned int *v23;
  char *v24;
  unsigned int *v25;
  char *v26;
  unsigned int *v27;
  char v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v19 = a1;
  v18 = a2;
  v17 = 0;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1);
  v21 = a1;
  v20 = (WTF::FastMalloc *)objc_msgSend(v18, "count");
  WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveInitialCapacity<(WTF::FailureAction)0>((uint64_t)a1, v20);
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v3 = v18;
  result = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v12, v29, 16);
  v5 = result;
  if (result)
  {
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v16 = 0;
        v16 = *(id *)(*((_QWORD *)&v12 + 1) + 8 * v7);
        if (WTF::isValidEnum<WebCore::AuthenticatorTransport,void>(objc_msgSend(v16, "intValue")))
        {
          v11 = objc_msgSend(v16, "intValue");
          v23 = a1;
          v22 = &v11;
          v25 = a1;
          v24 = &v11;
          v27 = a1;
          v26 = &v11;
          v8 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
          if (v8 == WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)a1))
          {
            WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AuthenticatorTransport&>(a1, (unint64_t)v26);
          }
          else
          {
            WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
            v9 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
            v10 = (_BYTE *)operator new(1, 0, v9);
            *v10 = *v26;
            ++a1[3];
          }
          v28 = 1;
        }
        ++v7;
      }
      while (v7 < v5);
      result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v29, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

WTF::ASCIILiteral *WebKit::toExtensionOutputs(WebKit *this, NSData *a2)
{
  _BYTE v3[24];
  NSData *v4;
  WebKit *v5;

  v5 = this;
  v4 = a2;
  if (!a2)
    return (WTF::ASCIILiteral *)std::optional<WebCore::AuthenticationExtensionsClientOutputs>::optional[abi:sn180100](this);
  WTF::makeVector((WTF *)v3, v4);
  WebCore::AuthenticationExtensionsClientOutputs::fromCBOR();
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v3);
}

void std::optional<WebCore::AuthenticationExtensionsClientOutputs>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::operator=[abi:sn180100](a1, a2);
}

double __os_log_helper_16_2_1_8_64(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = 138412290;
  *(_DWORD *)a1 = 138412290;
  *(_QWORD *)(a1 + 4) = a2;
  return result;
}

uint64_t WTF::makeVector(WTF *this, NSData *a2)
{
  char *v3;
  WTF *v4;

  v3 = (char *)WTF::span((WTF *)a2, a2);
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>((uint64_t)this, v3, v4);
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(uint64_t a1, char *a2, WTF *a3)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(a1, a2, a3);
}

void std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>>(a1, a2);
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs,false>>(uint64_t a1, uint64_t a2)
{
  int v3;
  _DWORD *v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a1 + 80) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::has_value[abi:sn180100](a2) & 1))
  {
    if ((*(_BYTE *)(a1 + 80) & 1) != 0)
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::AuthenticationExtensionsClientOutputs::operator=((_DWORD *)a1, v4);
    }
  }
  else if ((*(_BYTE *)(a1 + 80) & 1) != 0)
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs,false>::reset[abi:sn180100]((_BYTE *)a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs>(a1, v5);
  }
}

void WebCore::AuthenticationExtensionsClientOutputs::operator=(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::operator=[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *)(a1 + 2), (uint64_t)(a2 + 2));
  std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100]((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs*>(a1, a2);
  *(_BYTE *)(a1 + 80) = 1;
  return result;
}

void std::optional<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::operator=[abi:sn180100](a1, a2);
}

void std::optional<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::operator=[abi:sn180100](a1, a2);
}

void std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::operator=[abi:sn180100](WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1, uint64_t a2)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>>(a1, a2);
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>>(WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_BYTE *)a1 + 24) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::GlobalFrameIdentifier,false>::has_value[abi:sn180100](a2) & 1))
  {
    if ((*((_BYTE *)a1 + 24) & 1) != 0)
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs::operator=((uint64_t)a1, v4);
    }
  }
  else if ((*((_BYTE *)a1 + 24) & 1) != 0)
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs>((uint64_t)a1, v5);
  }
}

void std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>>(a1, a2);
}

void std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>>(uint64_t a1, uint64_t a2)
{
  int v3;
  _WORD *v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a1 + 32) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::SecurityOriginData,false>::has_value[abi:sn180100](a2) & 1))
  {
    if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    {
      std::__to_address[abi:sn180100]<char const>();
      WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs::operator=((_WORD *)a1, v4);
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::reset[abi:sn180100]((WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs *)a1);
  }
  else
  {
    std::__to_address[abi:sn180100]<char const>();
    std::__optional_storage_base<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs::PRFOutputs>(a1, v5);
  }
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs*>(a1, a2);
}

void sub_19767AB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  uint64_t v11;

  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function(v11);
  _Unwind_Resume(a1);
}

uint64_t *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&,void,objc_object  {objcproto21ASCCredentialProtocol}*,NSError *>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6[8];

  v6[7] = (uint64_t)a1;
  v6[6] = a4;
  v6[5] = a3;
  v6[4] = (uint64_t)a2;
  v6[3] = a4;
  v6[2] = a3;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::$_1(v6, a2);
  WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(a1, v6);
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0(v6);
}

void sub_19767AC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::~$_0(&a12);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(WTF::ThreadSafeRefCountedBase **a1, uint64_t a2, uint64_t a3)
{
  WTF::ThreadSafeRefCountedBase *v5;
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::ThreadSafeRefCountedBase **v12;

  v12 = a1;
  v11 = a2;
  v10 = a3;
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v5, a1);
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(&v6, (uint64_t)(a1 + 1));
  WTF::retainPtr<ASAuthorization *>(&v7, v11);
  WTF::retainPtr<ASAuthorization *>(&v8, v10);
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>(&v9, (uint64_t *)&v5);
  WTF::callOnMainRunLoop();
  WTF::Function<void ()(void)>::~Function((uint64_t)&v9);
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::~NSError((uint64_t *)&v5);
}

void sub_19767AD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(&a12);
  _Unwind_Resume(a1);
}

_QWORD *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;
  char v5;
  int v6;
  void *v7;
  uint64_t *v8;
  _QWORD *v9;

  v9 = a1;
  v8 = a2;
  v7 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *(_QWORD *)v7 = MEMORY[0x1E0C809A0];
  v6 = 1;
  *((_DWORD *)v7 + 2) = 50331650;
  *((_DWORD *)v7 + 3) = 0;
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)&v5);
  *((_QWORD *)v7 + 2) = WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::__invoke;
  *((_QWORD *)v7 + 3) = &WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1)::descriptor;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::$_1((uint64_t *)v7 + 4, a2);
  result = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *a1 = v7;
  return result;
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::$_1(uint64_t *a1, uint64_t *a2)
{
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::$_1(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  char v2;
  uint64_t v3;

  v3 = a1;
  return WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_0)::{lambda(void const*)#1}::operator()((uint64_t)&v2, a1);
}

uint64_t *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  v5 = a3;
  return WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::operator()((uint64_t)&v4, a1, a2, a3);
}

uint64_t *WTF::BlockPtr<void ()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1>(WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WTF::CompletionHandler::AuthenticatorAttachment,WTF::CompletionHandler::ExceptionData const&)> &&)::$_1)::{lambda(void *,objc_object  {objcproto21ASCCredentialProtocol},NSError)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()((WTF::ThreadSafeRefCountedBase **)(a2 + 32), a3, a4);
}

void sub_19767AF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  uint64_t *v11;

  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(v11);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>,NSError>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>,NSError>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x28);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_19767B0A0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc *v11;

  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = off_1E34F34A0;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::NSError(a1 + 1, a2);
  return a1;
}

void sub_19767B148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  std::__to_address[abi:sn180100]<char const>();
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::NSError(uint64_t *a1, uint64_t *a2)
{
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::NSError(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler(a1 + 1, (uint64_t)(a2 + 1));
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1 + 2, a2 + 2);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(a1 + 3, a2 + 3);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34F34A0;
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_0::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::~NSError(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

void sub_19767B2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  uint64_t *v11;

  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(v11);
  _Unwind_Resume(a1);
}

void WebKit::WebAuthenticatorCoordinatorProxy::performRequestLegacy(WTF::RetainPtr<ASCCredentialRequestContext>,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)> &&)::$_1::operator()(objc_object  {objcproto21ASCCredentialProtocol}*,NSError *)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef v5[2];

  v5[1] = a1;
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(v5, a1 + 2);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v4, a1 + 3);
  WebKit::continueAfterRequest((uint64_t *)v5, (uint64_t *)&v4, (WTF::RefCountedBase *)(a1 + 1));
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v4);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)v5);
  if (WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator BOOL(a1))
  {
    v2 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    if (WTF::RetainPtr<WKWebView>::operator BOOL((_QWORD *)(v2 + 64)))
    {
      v3 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
      WTF::RetainPtr<ASCAgentProxy>::clear((uint64_t *)(v3 + 64));
    }
  }
}

WTF::ThreadLikeAssertion *WTF::makeBlockPtr<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(_QWORD *a1, uint64_t a2)
{
  return WTF::makeBlockPtr<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1},WTF::CompletionHandler<void ()(BOOL)> &&,void,BOOL>(a1, a2, (uint64_t)WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator(), 0);
}

WTF::ThreadLikeAssertion *WTF::makeBlockPtr<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1},WTF::CompletionHandler<void ()(BOOL)> &&,void,BOOL>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v6[7];

  v6[6] = a1;
  v6[5] = a4;
  v6[4] = a3;
  v6[3] = a2;
  v6[2] = a4;
  v6[1] = a3;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler(v6, a2);
  WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(a1, (uint64_t)v6);
  return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)v6);
}

void sub_19767B4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&a13);
  _Unwind_Resume(a1);
}

WTF::ThreadLikeAssertion *WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(uint64_t a1, char a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2 & 1;
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(&v3, a1);
  v4 = v6 & 1;
  WTF::Function<void ()(void)>::Function<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>(&v5, (uint64_t)&v3);
  WTF::ensureOnMainRunLoop();
  WTF::Function<void ()(void)>::~Function((uint64_t)&v5);
  return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v3);
}

void sub_19767B53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  char v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v9 = a1;
  v8 = a2;
  v7 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *(_QWORD *)v7 = MEMORY[0x1E0C809A0];
  v6 = 1;
  v7[2] = 50331650;
  v7[3] = 0;
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)&v5);
  *((_QWORD *)v7 + 2) = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::__invoke;
  *((_QWORD *)v7 + 3) = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::descriptor;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler((_QWORD *)v7 + 4, a2);
  result = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *a1 = v7;
  return result;
}

_QWORD *WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler(_QWORD *a1, uint64_t a2)
{
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler(a1, a2);
  return a1;
}

{
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(a1, a2);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  char v2;
  uint64_t v3;

  v3 = a1;
  return WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void const*)#1}::operator()((uint64_t)&v2, a1);
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void const*)#1}::operator()(uint64_t a1, uint64_t a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a2 + 32));
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, char a2)
{
  _BYTE v3[2];
  uint64_t v4;

  v4 = a1;
  v3[1] = a2;
  return WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::operator()((uint64_t)v3, a1, a2 & 1);
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::operator()(uint64_t a1, uint64_t a2, char a3)
{
  return WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(a2 + 32, a3 & 1);
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(void)>::Function<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>,{lambda(BOOL)#1}>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>,{lambda(BOOL)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x18);
  WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_19767B87C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc *v11;

  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::CallableWrapper(_QWORD *a1, uint64_t a2)
{
  WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = off_1E34F34E8;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_19767B924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  std::__to_address[abi:sn180100]<char const>();
  _Unwind_Resume(a1);
}

uint64_t WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::(uint64_t a1, uint64_t a2)
{
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::(a1, a2);
  return a1;
}

{
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler((_QWORD *)a1, a2);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8) & 1;
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34F34E8;
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a1);
}

WTF::ThreadLikeAssertion *WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::~(WTF::ThreadLikeAssertion *a1)
{
  WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler(a1);
  return a1;
}

void sub_19767BB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  uint64_t v11;

  WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function(v11);
  _Unwind_Resume(a1);
}

WTF::ThreadLikeAssertion *WTF::makeBlockPtr<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &,void,NSDictionary<NSString *,NSNumber *> *>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v6[7];

  v6[6] = a1;
  v6[5] = a4;
  v6[4] = a3;
  v6[3] = a2;
  v6[2] = a4;
  v6[1] = a3;
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::$_0(v6, a2);
  WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(a1, (uint64_t)v6);
  return WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)v6);
}

void sub_19767BBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&a13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(uint64_t a1, void *a2)
{
  id v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  void *v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  WTF::StringImpl *v17[4];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  NSString *v22;
  uint64_t v23;
  int v24;
  id v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  uint64_t *v28;
  WTF::StringImpl **v29;
  uint64_t *v30;
  WTF::StringImpl **v31;
  uint64_t *v32;
  char v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v26 = a1;
  v25 = a2;
  WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v23);
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v3 = v25;
  v4 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v18, v34, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i < v4; ++i)
      {
        if (*(_QWORD *)v19 != v5)
          objc_enumerationMutation(v3);
        v22 = 0;
        v22 = *(NSString **)(*((_QWORD *)&v18 + 1) + 8 * i);
        v16 = objc_msgSend((id)objc_msgSend(v25, "objectForKeyedSubscript:", v22), "BOOLValue") & 1;
        WTF::KeyValuePair<WTF::String,BOOL>::KeyValuePair<NSString *&,BOOL>((WTF::String *)v17, &v22, &v16);
        v28 = &v23;
        v27 = v17;
        v30 = &v23;
        v29 = v17;
        v32 = &v23;
        v31 = v17;
        v7 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)&v23);
        if (v7 == WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::capacity((uint64_t)&v23))
        {
          WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WTF::String,BOOL>>((unsigned int *)&v23, (unint64_t)v31);
        }
        else
        {
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
          WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)&v23);
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator new();
          WTF::KeyValuePair<WTF::String,BOOL>::KeyValuePair(v8, (uint64_t)v31);
          ++v24;
        }
        v33 = 1;
        WebCore::RegistrableDomain::~RegistrableDomain(v17, v9);
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v34, 16);
    }
    while (v4);
  }
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler(&v13, a1);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v14, &v23);
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>(&v15, (uint64_t)&v13);
  WTF::ensureOnMainRunLoop();
  WTF::Function<void ()(void)>::~Function((uint64_t)&v15);
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::~NSDictionary((WTF::ThreadLikeAssertion *)&v13, v10);
  return WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v11);
}

void sub_19767BE7C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, int a17, int a18, _Unwind_Exception *exception_object, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a30, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  char v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v9 = a1;
  v8 = a2;
  v7 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *(_QWORD *)v7 = MEMORY[0x1E0C809A0];
  v6 = 1;
  v7[2] = 50331650;
  v7[3] = 0;
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)&v5);
  *((_QWORD *)v7 + 2) = WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSNumber *> *)#1}::__invoke;
  *((_QWORD *)v7 + 3) = &WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::descriptor;
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::$_0((_QWORD *)v7 + 4, a2);
  result = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *a1 = v7;
  return result;
}

_QWORD *WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::$_0(_QWORD *a1, uint64_t a2)
{
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler(a1, a2);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  char v2;
  uint64_t v3;

  v3 = a1;
  return WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void const*)#1}::operator()((uint64_t)&v2, a1);
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void const*)#1}::operator()(uint64_t a1, uint64_t a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a2 + 32));
}

uint64_t WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSNumber *> *)#1}::__invoke(uint64_t a1, void *a2)
{
  char v3;
  void *v4;
  uint64_t v5;

  v5 = a1;
  v4 = a2;
  return WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSNumber *> *)#1}::operator()((uint64_t)&v3, a1, a2);
}

uint64_t WTF::BlockPtr<void ()(NSDictionary<NSString *,NSNumber *> *)>::fromCallable<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)::{lambda(void *,NSDictionary<NSString *,NSNumber *> *)#1}::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(a2 + 32, a3);
}

WTF::String *WTF::KeyValuePair<WTF::String,BOOL>::KeyValuePair<NSString *&,BOOL>(WTF::String *a1, NSString **a2, _BYTE *a3)
{
  WTF::KeyValuePair<WTF::String,BOOL>::KeyValuePair<NSString *&,BOOL>(a1, a2, a3);
  return a1;
}

{
  WTF::String::String(a1, *a2);
  *((_BYTE *)a1 + 8) = *a3 & 1;
  return a1;
}

WTF::ThreadLikeAssertion *WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~CompletionHandler(WTF::ThreadLikeAssertion *a1)
{
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~CompletionHandler(a1);
  return a1;
}

{
  char v3;
  WTF::ThreadLikeAssertion *v4;

  v4 = a1;
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::operator=();
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v3);
  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(a1);
  WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function((uint64_t)a1);
  return a1;
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>,NSDictionary<NSString *,NSNumber *>>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

WTF::ThreadLikeAssertion *WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::~NSDictionary(WTF::ThreadLikeAssertion *a1, void *a2)
{
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::~NSDictionary(a1, a2);
  return a1;
}

{
  WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 8, a2);
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~CompletionHandler(a1);
  return a1;
}

uint64_t WTF::KeyValuePair<WTF::String,BOOL>::KeyValuePair(uint64_t a1, uint64_t a2)
{
  WTF::KeyValuePair<WTF::String,BOOL>::KeyValuePair(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr((uint64_t *)a1, (uint64_t *)a2);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8) & 1;
  return a1;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::KeyValuePair<WTF::String,BOOL>>(unsigned int *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v7;

  v3 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size((uint64_t)a1);
  v7 = WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1, v3 + 1, a2);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetInitialBufferSizeTo();
  WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator new();
  result = WTF::KeyValuePair<WTF::String,BOOL>::KeyValuePair(v4, v7);
  ++a1[3];
  return result;
}

void sub_19767C3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::ThreadLikeAssertion *v11;

  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(v11);
  WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function((uint64_t)v11);
  _Unwind_Resume(a1);
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>,NSDictionary<NSString *,NSNumber *>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x20);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_19767C490(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc *v11;

  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>::CallableWrapper(_QWORD *a1, uint64_t a2)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = off_1E34F3530;
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::NSDictionary(a1 + 1, a2);
  return a1;
}

void sub_19767C538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  std::__to_address[abi:sn180100]<char const>();
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::NSDictionary(_QWORD *a1, uint64_t a2)
{
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::NSDictionary(a1, a2);
  return a1;
}

{
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::CompletionHandler(a1, a2);
  WTF::Vector<WTF::Ref<WebCore::AuthenticatorAssertionResponse,WTF::RawPtrTraits<WebCore::AuthenticatorAssertionResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorAssertionResponse>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(a1 + 1), (uint64_t *)(a2 + 8));
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return a1;
}

{
  *a1 = off_1E34F3530;
  WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::~NSDictionary((WTF::ThreadLikeAssertion *)(a1 + 1), a2);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>::~CallableWrapper(WTF::FastMalloc *a1, void *a2)
{
  void *v3;

  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::FastMalloc::free(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::operator()((WTF::RefCountedBase *)(a1 + 8));
}

void sub_19767C670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::ThreadLikeAssertion *v11;

  WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::~CompletionHandler(v11);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0::operator()(NSDictionary<NSString *,NSNumber *> *)::{lambda(void)#1}::operator()(WTF::RefCountedBase *a1)
{
  return WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator()(a1, (uint64_t)a1 + 8);
}

void sub_19767C788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  uint64_t v11;

  WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function(v11);
  _Unwind_Resume(a1);
}

void sub_19767C85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  uint64_t v11;

  WTF::Function<void ()(void)>::~Function(v11);
  _Unwind_Resume(a1);
}

void sub_19767C90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::ThreadLikeAssertion *v11;

  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(v11);
  WTF::Function<void ()(void)>::~Function((uint64_t)v11);
  _Unwind_Resume(a1);
}

uint64_t std::visit[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&,void>(uint64_t a1, uint64_t a2)
{
  std::__throw_if_valueless[abi:sn180100]<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &>();
  return std::__variant_detail::__visitation::__variant::__visit_value[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(a1, a2);
}

_QWORD *WTF::makeVisitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD v4[3];
  _QWORD v5[5];

  v5[4] = a2;
  v5[3] = a3;
  v5[0] = *a2;
  v5[1] = a2[1];
  v5[2] = a2[2];
  v4[0] = *a3;
  v4[1] = a3[1];
  v4[2] = a3[2];
  return WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>::Visitor(a1, v5, v4);
}

uint64_t std::__variant_detail::__visitation::__variant::__visit_value[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = a1;
  v4[1] = a2;
  std::__variant_detail::__visitation::__variant::__make_value_visitor[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>();
  v4[0] = v2;
  return std::__variant_detail::__visitation::__variant::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>((uint64_t)v4);
}

uint64_t std::__variant_detail::__visitation::__variant::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>>,std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(uint64_t a1)
{
  uint64_t v2;

  std::__to_address[abi:sn180100]<char const>();
  return std::__variant_detail::__visitation::__base::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>>,std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(a1, v2 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>>,std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;

  v9 = a1;
  v8[2] = a2;
  v8[0] = std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> const&>;
  v8[1] = std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> const&>;
  v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_((uint64_t)v8, v2);
  v4 = *v3;
  v5 = v9;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v6);
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> const&>(WTF *a1)
{
  const WebCore::SecurityOriginData *v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>>,std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(a1, v2);
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::_Trait::PublicKeyCredentialRequestOptions> const&>(WTF *a1)
{
  WebCore::BufferSource *v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>>,std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(a1, v2);
}

uint64_t *std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>>,std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(WTF *a1, const WebCore::SecurityOriginData *a2)
{
  return std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(a1, a2);
}

uint64_t *std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> const&>(WTF *a1, const WebCore::SecurityOriginData *a2)
{
  WTF::isIntegralOrPointerType(a1);
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(*(_QWORD *)a1, a2);
}

uint64_t *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,WebCore::PublicKeyCredentialCreationOptions const&>(uint64_t a1, const WebCore::SecurityOriginData *a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0::operator()(a1, a2);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0::operator()(uint64_t a1, const WebCore::SecurityOriginData *a2)
{
  uint64_t v4[3];

  v4[2] = a1;
  v4[1] = (uint64_t)a2;
  WebKit::WebAuthenticatorCoordinatorProxy::requestsForRegistration((WebKit::WebAuthenticatorCoordinatorProxy *)v4, *(const WebCore::PublicKeyCredentialCreationOptions **)(a1 + 8), a2, (WebCore::SecurityOriginData *)(*(_QWORD *)(a1 + 16) + 592));
  WTF::RetainPtr<NSArray>::operator=(*(uint64_t **)a1, v4);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v4);
}

void sub_19767CC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13)
{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&a13);
  _Unwind_Resume(a1);
}

uint64_t *WTF::RetainPtr<NSArray>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4[3];

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(v4, a2);
  WTF::RetainPtr<NSURLRequest>::swap(a1, v4);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(v4);
  return a1;
}

uint64_t *std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>>,std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(WTF *a1, WebCore::BufferSource *a2)
{
  return std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(a1, a2);
}

uint64_t *std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> const&>(WTF *a1, WebCore::BufferSource *a2)
{
  WTF::isIntegralOrPointerType(a1);
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(*(_QWORD *)a1, a2);
}

uint64_t *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>,WebCore::PublicKeyCredentialRequestOptions const&>(uint64_t a1, WebCore::BufferSource *a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1::operator()(a1 + 24, a2);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1::operator()(uint64_t a1, WebCore::BufferSource *a2)
{
  uint64_t v4[3];

  v4[2] = a1;
  v4[1] = (uint64_t)a2;
  WebKit::WebAuthenticatorCoordinatorProxy::requestsForAssertion(v4, *(_QWORD *)(a1 + 8), a2, (WebCore::SecurityOriginData *)(*(_QWORD *)(a1 + 16) + 592), *(_QWORD *)(a1 + 16) + 704);
  WTF::RetainPtr<NSArray>::operator=(*(uint64_t **)a1, v4);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v4);
}

void sub_19767CD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13)
{
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&a13);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>::Visitor(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_1>::Visitor(a1, a2, a3);
  return a1;
}

{
  _QWORD v6[3];
  _QWORD v7[6];

  v7[5] = a1;
  v7[4] = a2;
  v7[3] = a3;
  v7[0] = *a2;
  v7[1] = a2[1];
  v7[2] = a2[2];
  WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0>::Visitor(a1, v7);
  v6[0] = *a3;
  v6[1] = a3[1];
  v6[2] = a3[2];
  WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0>::Visitor(a1 + 3, v6);
  return a1;
}

_QWORD *WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::constructASController(WebKit::WebAuthenticationRequestData const&)::$_0>::Visitor(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  return result;
}

uint64_t WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::AuthenticatorTransport>(char *a1, char *a2)
{
  char *v3[3];

  v3[2] = a1;
  v3[1] = a2;
  v3[0] = a2;
  return WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::AuthenticatorTransport>(WebCore::AuthenticatorTransport const&)::{lambda(WebCore::AuthenticatorTransport&)#1}>((uint64_t)a1, v3);
}

uint64_t WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<unsigned long WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::AuthenticatorTransport>(WebCore::AuthenticatorTransport const&)::{lambda(WebCore::AuthenticatorTransport&)#1}>(uint64_t a1, char **a2)
{
  char *v3;
  unint64_t i;

  for (i = 0; i < WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1); ++i)
  {
    v3 = (char *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::at(a1, i);
    if (WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::AuthenticatorTransport>(WebCore::AuthenticatorTransport const&)const::{lambda(WebCore::AuthenticatorTransport&)#1}::operator()<WebCore::AuthenticatorTransport const>(a2, v3))
    {
      return i;
    }
  }
  return -1;
}

BOOL WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::AuthenticatorTransport>(WebCore::AuthenticatorTransport const&)const::{lambda(WebCore::AuthenticatorTransport&)#1}::operator()<WebCore::AuthenticatorTransport const>(char **a1, char *a2)
{
  return *a2 == **a1;
}

WTF *WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::NeverDestroyed<>(WTF *a1)
{
  _QWORD *v2;
  char v4;
  WTF *v5;

  v5 = a1;
  WTF::isIntegralOrPointerType(a1);
  WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::storagePointer(a1);
  WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator new();
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(v2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v4);
  return a1;
}

WTF *WTF::NeverDestroyed<WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::MainThreadAccessTraits>::storagePointer(WTF *a1)
{
  WTF::isIntegralOrPointerType(a1);
  return a1;
}

uint64_t WTF::WeakPtr<WebKit::WebAuthenticatorCoordinatorProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::implForObject<WebKit::WebAuthenticatorCoordinatorProxy>(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;

  std::__to_address[abi:sn180100]<char const>();
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v1, a1);
  std::__to_address[abi:sn180100]<char const>();
  return WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::impl(v2);
}

void sub_19767D12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  uint64_t v12;

  WTF::Function<void ()(void)>::~Function(v12);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>,WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>,WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_19767D234(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc *v11;

  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = off_1E34F3568;
  WebKit::CtapAuthenticator::makeCredential(void)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void sub_19767D2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  std::__to_address[abi:sn180100]<char const>();
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34F3568;
  WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::makeActiveConditionalAssertion(void)::$_0::operator()(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  result = WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator!(a1);
  if ((result & 1) == 0)
  {
    v3 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    return WebKit::WebAuthenticatorCoordinatorProxy::unpauseConditionalAssertion(v3);
  }
  return result;
}

uint64_t WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::operator()(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v4;

  v4 = std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::operator->[abi:sn180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2, a3, a4);
}

uint64_t std::visit[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,std::variant::PublicKeyCredentialRequestOptions> &,void>(uint64_t a1, uint64_t a2)
{
  std::__throw_if_valueless[abi:sn180100]<std::variant<WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions> &>();
  return std::__variant_detail::__visitation::__variant::__visit_value[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,std::variant::PublicKeyCredentialRequestOptions> &>(a1, a2);
}

_QWORD *WTF::makeVisitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>::Visitor(a1, a2, a3, a4, a5);
}

uint64_t std::__variant_detail::__visitation::__variant::__visit_value[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,std::variant<WebCore::PublicKeyCredentialCreationOptions,std::variant::PublicKeyCredentialRequestOptions> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = a1;
  v4[1] = a2;
  std::__variant_detail::__visitation::__variant::__make_value_visitor[abi:sn180100]<WTF::Visitor<WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_0,WebKit::AuthenticatorManager::initTimeOutTimer(void)::$_1>>();
  v4[0] = v2;
  return std::__variant_detail::__visitation::__variant::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>>,std::variant<WebCore::PublicKeyCredentialCreationOptions,std::variant::PublicKeyCredentialRequestOptions> &>((uint64_t)v4);
}

uint64_t std::__variant_detail::__visitation::__variant::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>>,std::variant<WebCore::PublicKeyCredentialCreationOptions,std::variant::PublicKeyCredentialRequestOptions> &>(uint64_t a1)
{
  uint64_t v2;

  std::__to_address[abi:sn180100]<char const>();
  return std::__variant_detail::__visitation::__base::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>>,std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::__impl::PublicKeyCredentialRequestOptions> &>(a1, v2 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__visit_alt[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>>,std::__variant_detail::__impl<WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::__impl::PublicKeyCredentialRequestOptions> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;

  v9 = a1;
  v8[2] = a2;
  v8[0] = std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::__base::PublicKeyCredentialRequestOptions> &>;
  v8[1] = std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::__base::PublicKeyCredentialRequestOptions> &>;
  v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,WebCore::PublicKeyCredentialRequestOptions>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21AuthenticatorResponseENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSH_1EJSE_SF_EEEELm2EJEEEODaRKNS_8__farrayISJ_XT0_EEEmDpT1_((uint64_t)v8, v2);
  v4 = *v3;
  v5 = v9;
  std::__to_address[abi:sn180100]<char const>();
  return v4(v5, v6);
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::__base::PublicKeyCredentialRequestOptions> &>(WTF *a1)
{
  uint64_t v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>>,std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> &>(a1, v2);
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PublicKeyCredentialCreationOptions,std::__variant_detail::__base::PublicKeyCredentialRequestOptions> &>(WTF *a1)
{
  const void *v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &>();
  return std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>>,std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> &>(a1, v2);
}

uint64_t *std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>>,std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> &>(WTF *a1, uint64_t a2)
{
  return std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> &>(a1, a2);
}

uint64_t *std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<0ul,WebCore::PublicKeyCredentialCreationOptions> &>(WTF *a1, uint64_t a2)
{
  WTF::isIntegralOrPointerType(a1);
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,WebCore::PublicKeyCredentialCreationOptions &>(*(_QWORD *)a1, a2);
}

uint64_t *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,WebCore::PublicKeyCredentialCreationOptions &>(uint64_t a1, uint64_t a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0::operator()(a1, a2);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8[3];

  v8[2] = a1;
  v8[1] = a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_OWORD *)(v3 + 352);
  v7[1] = *(_OWORD *)(v3 + 368);
  v7[0] = v4;
  LOWORD(v6) = *(_WORD *)(*(_QWORD *)(a1 + 8) + 696);
  WebKit::configureRegistrationRequestContext(v8, a2, v7, v6, (WebCore::SecurityOriginData *)(*(_QWORD *)(a1 + 8) + 592));
  WTF::RetainPtr<__IOHIDManager *>::operator=(*(uint64_t **)a1, v8);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v8);
}

void sub_19767D820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  uint64_t v11;

  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)(v11 - 40));
  _Unwind_Resume(a1);
}

uint64_t *WebKit::configureRegistrationRequestContext(uint64_t *a1, uint64_t a2, _OWORD *a3, uint64_t a4, WebCore::SecurityOriginData *a5)
{
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  WebKit *isAvailable;
  id v12;
  void *v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  JSC::ArrayBuffer *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  WebCore::AuthenticationExtensionsClientInputs *v37;
  void *v38;
  const WebCore::AuthenticationExtensionsClientInputs *v39;
  void *v40;
  unsigned int *v41;
  void *v42;
  void *v43;
  char v45;
  uint64_t v46;
  _BYTE v47[16];
  uint64_t v48[2];
  uint64_t v49;
  _BYTE v50[40];
  uint64_t v51;
  _BYTE v52[40];
  const PublicKeyCredentialDescriptor *v53;
  const PublicKeyCredentialDescriptor *v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 *v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  CFTypeRef v65;
  __int16 v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[2];
  CFTypeRef v77;
  char v78;
  CFTypeRef v79;
  char v80;
  char v81[16];
  _BYTE v82[2];
  _BYTE __dst[8];
  __int16 v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  WebCore::SecurityOriginData *v88;
  _OWORD *v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  _QWORD v97[2];
  WTF::StringImpl *v98;
  _QWORD *v99;
  uint64_t *v100;

  v93 = a1;
  v91 = a4;
  v92 = a4;
  v90 = a2;
  v89 = a3;
  v88 = a5;
  v87 = 20;
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(&v86);
  v85 = 0;
  std::optional<BOOL>::optional[abi:sn180100](&v84);
  memcpy(__dst, (const void *)(v90 + 128), sizeof(__dst));
  v7 = std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator BOOL[abi:sn180100]((uint64_t)__dst);
  if ((v7 & 1) != 0)
  {
    std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)__dst);
    v82[0] = *v8;
    v82[1] = v8[1];
    v81[0] = 0;
    if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>((uint64_t)v82, v81))
    {
      v87 = 4;
    }
    else
    {
      v80 = 1;
      if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>((uint64_t)v82, &v80))
      {
        v87 = 16;
      }
    }
    std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)__dst);
    WebKit::toNSString(&v79, *(_BYTE *)(v9 + 5));
    WTF::RetainPtr<__IOHIDManager *>::operator=(&v86, (uint64_t *)&v79);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v79);
    std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)__dst);
    v85 = *(_BYTE *)(v10 + 4) & 1;
    std::optional<WebCore::PublicKeyCredentialCreationOptions::AuthenticatorSelectionCriteria>::operator->[abi:sn180100]((uint64_t)__dst);
    v84 = *(_WORD *)(v7 + 2);
  }
  isAvailable = (WebKit *)WebKit::LocalService::isAvailable((WebKit::LocalService *)v7);
  if ((isAvailable & 1) == 0)
    v87 &= ~4uLL;
  v78 = 0;
  v12 = WebKit::allocASCCredentialRequestContextInstance(isAvailable);
  WTF::adoptCF<__IOHIDManager *>(a1, objc_msgSend(v12, "initWithRequestTypes:", v87));
  v13 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(a1);
  std::optional<WTF::String>::operator*[abi:sn180100](v90 + 16);
  objc_msgSend(v13, "setRelyingPartyIdentifier:", WTF::String::operator NSString *(v14));
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v77, a1);
  v15 = *a3;
  v76[1] = a3[1];
  v76[0] = v15;
  WebKit::setGlobalFrameIDForContext((uint64_t *)&v77, (uint64_t)v76);
  v16 = WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v77);
  v17 = objc_msgSend(WebKit::allocASCPublicKeyCredentialCreationOptionsInstance((WebKit *)v16), "init");
  WTF::adoptCF<__IOHIDManager *>(&v75, v17);
  WebCore::SecurityOriginData::securityOrigin(v88);
  WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)&v73);
  v72 = 0;
  WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(&v72);
  WebCore::buildClientDataJson();
  v94 = &v72;
  v95 = &v72;
  v96 = &v72;
  v97[1] = &v72;
  v97[0] = 0;
  v100 = &v72;
  v99 = v97;
  v98 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v72);
  if (v98)
    WTF::StringImpl::deref(v98, v18);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v73);
  v19 = (JSC::ArrayBuffer *)WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)&v74);
  v69 = JSC::ArrayBuffer::span(v19);
  v70 = v20;
  WTF::toNSData(&v71, v69, v20);
  v21 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
  objc_msgSend(v21, "setClientDataJSON:", WTF::RetainPtr<__IOHIDDevice *>::get(&v71));
  v22 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
  std::optional<WTF::String>::operator*[abi:sn180100](v90 + 16);
  objc_msgSend(v22, "setRelyingPartyIdentifier:", WTF::String::operator NSString *(v23));
  v24 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
  objc_msgSend(v24, "setUserName:", WTF::String::operator NSString *((_QWORD *)(v90 + 32)));
  v25 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
  WebCore::toNSData((WebCore *)&v68, (const WebCore::BufferSource *)(v90 + 48));
  objc_msgSend(v25, "setUserIdentifier:", WTF::RetainPtr<__IOHIDDevice *>::get(&v68));
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v68);
  v26 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
  objc_msgSend(v26, "setUserDisplayName:", WTF::String::operator NSString *((_QWORD *)(v90 + 64)));
  v27 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
  objc_msgSend(v27, "setUserVerificationPreference:", WTF::RetainPtr<__IOHIDDevice *>::get(&v86));
  WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v28 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
    v67 = v84;
    v66 = v84;
    objc_msgSend(v28, "setResidentKeyPreference:", WebKit::toASCResidentKeyPreference(v84, v85 & 1));
  }
  else
  {
    v29 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
    objc_msgSend(v29, "setShouldRequireResidentKey:", v85 & 1);
  }
  v30 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
  WebKit::toNSString(&v65, *(_BYTE *)(v90 + 136));
  objc_msgSend(v30, "setAttestationPreference:", WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v65));
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v65);
  v31 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v32 = objc_msgSend(v31, "initWithCapacity:", WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(v90 + 88));
  WTF::adoptCF<__IOHIDManager *>(&v63, v32);
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v64, &v63);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v63);
  v62 = (unsigned int *)(v90 + 88);
  v61 = (__int128 *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)(v90 + 88));
  v60 = WTF::Vector<WebCore::PublicKeyCredentialCreationOptions::Parameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v62);
  while (v61 != (__int128 *)v60)
  {
    v59 = *v61;
    objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v64), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *((_QWORD *)&v59 + 1)));
    ++v61;
  }
  v33 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
  objc_msgSend(v33, "setSupportedAlgorithmIdentifiers:", WTF::RetainPtr<__IOHIDDevice *>::get(&v64));
  v58 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(v90 + 112);
  if (v58)
  {
    WTF::adoptCF<__IOHIDManager *>(&v56, objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v58));
    WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(&v57, &v56);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v56);
    v55 = (unsigned int *)(v90 + 112);
    v54 = (const PublicKeyCredentialDescriptor *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)(v90 + 112));
    v53 = (const PublicKeyCredentialDescriptor *)WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v55);
    while (v54 != v53)
    {
      WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v52, v54);
      v34 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v57);
      WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v50, (const PublicKeyCredentialDescriptor *)v52);
      WebKit::toASCDescriptor(&v51, (uint64_t)v50);
      objc_msgSend(v34, "addObject:", WTF::RetainPtr<__IOHIDDevice *>::get(&v51));
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v51);
      WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v50);
      WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v52);
      v54 = (const PublicKeyCredentialDescriptor *)((char *)v54 + 40);
    }
    v35 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
    objc_msgSend(v35, "setExcludedCredentials:", WTF::RetainPtr<__IOHIDDevice *>::get(&v57));
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v57);
  }
  if ((std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100](v90 + 144) & 1) != 0)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v36 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100](v90 + 144);
      WebCore::AuthenticationExtensionsClientInputs::toCBOR(v37);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v48, (WTF::ASCIILiteral *)v47);
      WTF::toNSData(&v49, v48[0], v48[1]);
      objc_msgSend(v36, "setExtensionsCBOR:", WTF::RetainPtr<__IOHIDDevice *>::get(&v49));
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v49);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v47);
    }
    else
    {
      v38 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100](v90 + 144);
      WebKit::toASCExtensions((WebKit *)&v46, v39);
      objc_msgSend(v38, "setExtensions:", WTF::RetainPtr<__IOHIDDevice *>::get(&v46));
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v46);
    }
  }
  if ((std::optional<unsigned int>::operator BOOL[abi:sn180100](v90 + 104) & 1) != 0)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get(&v75);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v40 = (void *)MEMORY[0x1E0CB37E8];
      std::optional<unsigned int>::operator*[abi:sn180100](v90 + 104);
      objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v75), "setTimeout:", objc_msgSend(v40, "numberWithUnsignedInt:", *v41));
    }
  }
  if ((v87 & 4) != 0)
  {
    v42 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(a1);
    objc_msgSend(v42, "setPlatformKeyCredentialCreationOptions:", WTF::RetainPtr<__IOHIDDevice *>::get(&v75));
  }
  if ((v87 & 0x10) != 0)
  {
    v43 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(a1);
    objc_msgSend(v43, "setSecurityKeyCredentialCreationOptions:", WTF::RetainPtr<__IOHIDDevice *>::get(&v75));
  }
  v45 = 3;
  if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>((uint64_t)&v92, &v45))
    objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1), "setRequestStyle:", 2);
  v78 = 1;
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v64);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v71);
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v74);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v75);
  if ((v78 & 1) == 0)
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(a1);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v86);
}

CFTypeRef *WebKit::toNSString(CFTypeRef *a1, char a2)
{
  if (!a2)
    return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("required"));
  if (a2 == 2)
    return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("discouraged"));
  return WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("preferred"));
}

{
  CFTypeRef *result;

  switch(a2)
  {
    case 1:
      result = WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("indirect"));
      break;
    case 2:
      result = WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("direct"));
      break;
    case 3:
      result = WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("enterprise"));
      break;
    default:
      result = WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, (uint64_t)CFSTR("none"));
      break;
  }
  return result;
}

id WebKit::allocASCCredentialRequestContextInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASCCredentialRequestContextClass[0](this));
}

uint64_t WebKit::setGlobalFrameIDForContext(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[3];

  v13[2] = (uint64_t)a1;
  v13[1] = a2;
  result = std::optional<WebCore::GlobalFrameIdentifier>::operator BOOL[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get(a1);
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      v5 = WebKit::allocASGlobalFrameIdentifierInstance((WebKit *)result);
      v6 = (void *)MEMORY[0x1E0CB37E8];
      std::optional<WebCore::GlobalFrameIdentifier>::operator->[abi:sn180100](a2);
      v8 = objc_msgSend(v6, "numberWithUnsignedLong:", std::span<char const,18446744073709551615ul>::data[abi:sn180100](v7));
      v9 = (void *)MEMORY[0x1E0CB37E8];
      std::optional<WebCore::GlobalFrameIdentifier>::operator->[abi:sn180100](a2);
      std::__to_address[abi:sn180100]<char const>();
      v11 = objc_msgSend(v5, "initWithPageID:frameID:", v8, objc_msgSend(v9, "numberWithUnsignedLong:", std::span<char const,18446744073709551615ul>::data[abi:sn180100](v10)));
      WTF::adoptCF<__IOHIDManager *>(v13, v11);
      v12 = WTF::RetainPtr<__IOHIDDevice *>::get(v13);
      objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(a1), "setGlobalFrameID:", v12);
      return (uint64_t)WTF::RetainPtr<NSURLRequest>::~RetainPtr(v13);
    }
  }
  return result;
}

id WebKit::allocASCPublicKeyCredentialCreationOptionsInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASCPublicKeyCredentialCreationOptionsClass[0](this));
}

uint64_t WebKit::toASCResidentKeyPreference(__int16 a1, char a2)
{
  _BYTE *v3;
  __int16 v6;

  v6 = a1;
  if ((std::optional<WebCore::MediationRequirement>::operator BOOL[abi:sn180100]((uint64_t)&v6) & 1) != 0)
  {
    std::optional<WebCore::MediationRequirement>::operator*[abi:sn180100]((uint64_t)&v6);
    if (*v3)
    {
      if (*v3 == 1)
        return 2;
      else
        return *v3 == 2;
    }
    else
    {
      return 3;
    }
  }
  else if ((a2 & 1) != 0)
  {
    return 3;
  }
  else
  {
    return 0;
  }
}

uint64_t *WebKit::toASCDescriptor(uint64_t *a1, uint64_t a2)
{
  WebKit *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const __CFString *v10;
  char v11;
  WebKit *v12;
  WebKit *v13;
  uint64_t v14;
  uint64_t v15;
  WebKit *v16;
  uint64_t v17[3];

  v17[2] = (uint64_t)a1;
  v17[1] = a2;
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(v17);
  v4 = (WebKit *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a2 + 24);
  v16 = v4;
  if (v4)
  {
    WTF::adoptCF<__IOHIDManager *>(&v15, objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v16));
    WTF::RetainPtr<NSMutableArray<NSString *>>::operator=<NSMutableArray>(v17, &v15);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v15);
    v14 = a2 + 24;
    v13 = (WebKit *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)(a2 + 24));
    v4 = (WebKit *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end((unsigned int *)(a2 + 24));
    v12 = v4;
    while (v13 != v12)
    {
      v11 = 0;
      v11 = *(_BYTE *)v13;
      v10 = 0;
      switch(v11)
      {
        case 0:
          v10 = CFSTR("usb");
          break;
        case 1:
          v10 = CFSTR("nfc");
          break;
        case 2:
          v10 = CFSTR("ble");
          break;
        case 3:
          v10 = CFSTR("internal");
          break;
        case 4:
          v10 = CFSTR("cable");
          break;
        case 5:
          v10 = CFSTR("hybrid");
          break;
        case 6:
          v10 = CFSTR("smart-card");
          break;
        default:
          break;
      }
      if (v10)
        v4 = (WebKit *)objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(v17), "addObject:", v10);
      v13 = (WebKit *)((char *)v13 + 1);
    }
  }
  v5 = WebKit::allocASCPublicKeyCredentialDescriptorInstance(v4);
  WebCore::toNSData((WebCore *)&v9, (const WebCore::BufferSource *)(a2 + 8));
  v6 = WTF::RetainPtr<__IOHIDDevice *>::get(&v9);
  v7 = objc_msgSend(v5, "initWithCredentialID:transports:", v6, WTF::RetainPtr<__IOHIDDevice *>::get(v17));
  WTF::adoptCF<__IOHIDManager *>(a1, v7);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v9);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v17);
}

void sub_19767E9E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, uint64_t a18)
{
  a18 = a1;
  a17 = a2;
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&a10);
  JUMPOUT(0x19767E9F8);
}

uint64_t *WebKit::toASCExtensions(WebKit *this, const WebCore::AuthenticationExtensionsClientInputs *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;

  WebKit::allocASCWebAuthenticationExtensionsClientInputsInstance(this);
  v3 = objc_opt_respondsToSelector();
  if ((v3 & 1) == 0)
    return (uint64_t *)WTF::RetainPtr<ASAuthorizationController>::RetainPtr((CFTypeRef *)this);
  v4 = WebKit::allocASCWebAuthenticationExtensionsClientInputsInstance((WebKit *)v3);
  v5 = objc_msgSend(v4, "initWithAppID:", WTF::String::operator NSString *(a2));
  return WTF::adoptCF<__IOHIDManager *>((uint64_t *)this, v5);
}

void std::optional<unsigned int>::operator*[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<unsigned int,false>::has_value[abi:sn180100](a1) & 1) == 0)
    __break(1u);
  std::__to_address[abi:sn180100]<char const>();
}

id WebKit::allocASGlobalFrameIdentifierInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASGlobalFrameIdentifierClass[0](this));
}

uint64_t *WTF::RetainPtr<NSMutableArray<NSString *>>::operator=<NSMutableArray>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4[3];

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  WTF::RetainPtr<NSMutableArray<ASAuthorizationRequest *>>::RetainPtr<NSMutableArray>(v4, a2);
  WTF::RetainPtr<NSURLRequest>::swap(a1, v4);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(v4);
}

id WebKit::allocASCPublicKeyCredentialDescriptorInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASCPublicKeyCredentialDescriptorClass[0](this));
}

id WebKit::allocASCWebAuthenticationExtensionsClientInputsInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASCWebAuthenticationExtensionsClientInputsClass[0](this));
}

uint64_t *std::__invoke[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>>,std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> &>(WTF *a1, const void *a2)
{
  return std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> &>(a1, a2);
}

uint64_t *std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>>::operator()[abi:sn180100]<std::__variant_detail::__alt<1ul,WebCore::PublicKeyCredentialRequestOptions> &>(WTF *a1, const void *a2)
{
  WTF::isIntegralOrPointerType(a1);
  return std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,WebCore::PublicKeyCredentialRequestOptions &>(*(_QWORD *)a1, a2);
}

uint64_t *std::__invoke[abi:sn180100]<WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>,WebCore::PublicKeyCredentialRequestOptions &>(uint64_t a1, const void *a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_1::operator()((uint64_t **)(a1 + 16), a2);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_1::operator()(uint64_t **a1, const void *a2)
{
  uint64_t *v3;
  __int128 v4;
  uint64_t v6;
  _OWORD v7[2];
  __int16 v8;
  CFTypeRef v9[3];

  v9[2] = a1;
  v9[1] = a2;
  v8 = *((_WORD *)a1[1] + 348);
  v3 = a1[1];
  v4 = *((_OWORD *)v3 + 22);
  v7[1] = *((_OWORD *)v3 + 23);
  v7[0] = v4;
  LOWORD(v6) = v8;
  WebKit::configurationAssertionRequestContext(v9, (uint64_t)a2, v6, v7, (uint64_t)(a1[1] + 88), (WebCore::SecurityOriginData *)(a1[1] + 74));
  WTF::RetainPtr<__IOHIDManager *>::operator=(*a1, (uint64_t *)v9);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)v9);
}

void sub_19767ECA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  uint64_t v12;

  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)(v12 - 40));
  _Unwind_Resume(a1);
}

uint64_t *WebKit::configurationAssertionRequestContext(CFTypeRef *a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, WebCore::SecurityOriginData *a6)
{
  WebKit *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  _OWORD v27[2];
  CFTypeRef v28;
  int v29;
  char v30;
  uint64_t v31;
  _BYTE v32[40];
  uint64_t v33;
  _BYTE v34[40];
  const PublicKeyCredentialDescriptor *v35;
  const PublicKeyCredentialDescriptor *v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CFTypeRef v41;
  char v42;
  char v43;
  _BYTE v44[2];
  uint64_t v45;
  uint64_t v46;
  WebCore::SecurityOriginData *v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  CFTypeRef *v53;

  v53 = a1;
  v51 = a3;
  v52 = a3;
  v50 = a2;
  v49 = a4;
  v48 = a5;
  v47 = a6;
  v46 = 40;
  WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(&v45);
  v44[0] = *(_BYTE *)(v50 + 208);
  v44[1] = *(_BYTE *)(v50 + 209);
  v43 = 0;
  if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>((uint64_t)v44, &v43))
  {
    v46 = 8;
  }
  else
  {
    v42 = 1;
    if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>((uint64_t)v44, &v42))
      v46 = 32;
  }
  WebKit::toNSString(&v41, *(_BYTE *)(v50 + 48));
  WTF::RetainPtr<__IOHIDManager *>::operator=(&v45, (uint64_t *)&v41);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v41);
  v40 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(v50 + 32);
  v8 = (WebKit *)WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(&v39);
  if (v40)
  {
    v9 = objc_alloc(MEMORY[0x1E0C99DE8]);
    WTF::adoptCF<__IOHIDManager *>(&v38, objc_msgSend(v9, "initWithCapacity:", v40));
    WTF::RetainPtr<NSMutableArray<NSString *>>::operator=<NSMutableArray>(&v39, &v38);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v38);
    v37 = (unsigned int *)(v50 + 32);
    v36 = (const PublicKeyCredentialDescriptor *)WTF::Vector<WTF::UniqueRef<WebKit::AuthenticatorTransportService>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin((WTF::ASCIILiteral *)(v50 + 32));
    v8 = (WebKit *)WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(v37);
    v35 = (const PublicKeyCredentialDescriptor *)v8;
    while (v36 != v35)
    {
      WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v34, v36);
      v10 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v39);
      WebCore::PublicKeyCredentialDescriptor::PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v32, (const PublicKeyCredentialDescriptor *)v34);
      WebKit::toASCDescriptor(&v33, (uint64_t)v32);
      objc_msgSend(v10, "addObject:", WTF::RetainPtr<__IOHIDDevice *>::get(&v33));
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v33);
      WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v32);
      WebCore::PublicKeyCredentialDescriptor::~PublicKeyCredentialDescriptor((WebCore::PublicKeyCredentialDescriptor *)v34);
      v36 = (const PublicKeyCredentialDescriptor *)((char *)v36 + 40);
    }
  }
  v11 = WebKit::allocASCCredentialRequestContextInstance(v8);
  WTF::adoptCF<__IOHIDManager *>(&v31, objc_msgSend(v11, "initWithRequestTypes:", v46));
  v12 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v31);
  objc_msgSend(v12, "setRelyingPartyIdentifier:", WTF::String::operator NSString *((_QWORD *)(v50 + 24)));
  v30 = 3;
  if (std::operator==[abi:sn180100]<WebCore::MediationRequirement,WebCore::MediationRequirement>((uint64_t)&v52, &v30))
  {
    WTF::RetainPtr<__IOHIDDevice *>::get(&v31);
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, 0);
      v29 = 1;
      goto LABEL_24;
    }
    objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v31), "setRequestStyle:", 1);
  }
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v28, &v31);
  v13 = *a4;
  v27[1] = a4[1];
  v27[0] = v13;
  WebKit::setGlobalFrameIDForContext((uint64_t *)&v28, (uint64_t)v27);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v28);
  if ((v46 & 8) == 0)
    goto LABEL_27;
  v14 = v50;
  v15 = v48;
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v25, &v39);
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v24, &v45);
  WebKit::configureAssertionOptions(&v26, v14, 1, v15, (uint64_t *)&v25, (uint64_t *)&v24, v47);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v24);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v25);
  if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v26))
  {
    WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, 0);
    v29 = 1;
  }
  else
  {
    v16 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v31);
    objc_msgSend(v16, "setPlatformKeyCredentialAssertionOptions:", WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v26));
    v29 = 0;
  }
  WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v26);
  if (!v29)
  {
LABEL_27:
    if ((v46 & 0x20) == 0)
      goto LABEL_23;
    v17 = v50;
    v18 = v48;
    WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v22, &v39);
    WTF::RetainPtr<__IOHIDDevice *>::RetainPtr(&v21, &v45);
    WebKit::configureAssertionOptions(&v23, v17, 2, v18, (uint64_t *)&v22, (uint64_t *)&v21, v47);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v21);
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v22);
    if (WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(&v23))
    {
      WTF::RetainPtr<NSURLRequest>::RetainPtr(a1, 0);
      v29 = 1;
    }
    else
    {
      v19 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v31);
      objc_msgSend(v19, "setSecurityKeyCredentialAssertionOptions:", WTF::RetainPtr<__IOHIDDevice *>::get((uint64_t *)&v23));
      v29 = 0;
    }
    WTF::RetainPtr<NSURLRequest>::~RetainPtr((uint64_t *)&v23);
    if (!v29)
    {
LABEL_23:
      WTF::RetainPtr<__IOHIDDevice *>::RetainPtr((uint64_t *)a1, &v31);
      v29 = 1;
    }
  }
LABEL_24:
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v31);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v39);
  return WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v45);
}

WTF::StringImpl *WebKit::configureAssertionOptions(CFTypeRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, WebCore::SecurityOriginData *a7)
{
  uint64_t v10;
  WebCore::SecurityOriginData *v11;
  JSC::ArrayBuffer *v12;
  uint64_t v13;
  uint64_t *v14;
  id v15;
  uint64_t v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  void *v23;
  WebCore::AuthenticationExtensionsClientInputs *v24;
  void *v25;
  const WebCore::AuthenticationExtensionsClientInputs *v26;
  const WebCore::SecurityOriginData *v27;
  _QWORD *v28;
  const __CFString *v29;
  WTF::StringImpl *v30;
  void *v31;
  unsigned int *v32;
  WTF::StringImpl *result;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  _BYTE v37[16];
  uint64_t v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  WebCore::SecurityOriginData *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CFTypeRef *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  _QWORD v62[2];
  _QWORD v63[2];
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  _QWORD *v66;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t *v69;

  v55 = a1;
  v54 = a2;
  v53 = a3;
  v52 = a4;
  v51 = a5;
  v50 = a6;
  v49 = a7;
  v48 = (std::optional<WebCore::SecurityOriginData>::operator BOOL[abi:sn180100](a4) & 1) == 0;
  v10 = std::optional<WebCore::SecurityOriginData>::operator BOOL[abi:sn180100](v52);
  if ((v10 & 1) != 0)
  {
    std::optional<WebCore::SecurityOriginData>::operator->[abi:sn180100](v52);
    WebCore::SecurityOriginData::toString(v11);
  }
  else
  {
    WTF::isIntegralOrPointerType((WTF *)v10);
    WTF::String::String((WTF::String *)&v47, MEMORY[0x1E0CBF6F0]);
  }
  WebCore::SecurityOriginData::securityOrigin(v49);
  WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)&v45);
  WebCore::buildClientDataJson();
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v45);
  v12 = (JSC::ArrayBuffer *)WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)&v46);
  v42 = JSC::ArrayBuffer::span(v12);
  v43 = v13;
  v14 = WTF::toNSData(&v44, v42, v13);
  v15 = WebKit::allocASCPublicKeyCredentialAssertionOptionsInstance((WebKit *)v14);
  v16 = v53;
  v17 = WTF::String::operator NSString *((_QWORD *)(v54 + 24));
  v18 = WTF::RetainPtr<__IOHIDDevice *>::get(&v44);
  v19 = WTF::RetainPtr<__IOHIDDevice *>::get(a6);
  v20 = WTF::RetainPtr<__IOHIDDevice *>::get(a5);
  WebCore::SecurityOriginData::toString(v49);
  v21 = objc_msgSend(v15, "initWithKind:relyingPartyIdentifier:clientDataJSON:userVerificationPreference:allowedCredentials:origin:", v16, v17, v18, v19, v20, WTF::String::operator NSString *(&v40));
  WTF::adoptCF<__IOHIDManager *>(&v41, v21);
  v57 = &v40;
  v58 = &v40;
  v61 = &v40;
  v62[1] = &v40;
  v62[0] = 0;
  v69 = &v40;
  v68 = v62;
  v65 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v40);
  if (v65)
    WTF::StringImpl::deref(v65, v22);
  if ((std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator BOOL[abi:sn180100](v54 + 56) & 1) != 0)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get(&v41);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v23 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v41);
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100](v54 + 56);
      WebCore::AuthenticationExtensionsClientInputs::toCBOR(v24);
      std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(v38, (WTF::ASCIILiteral *)v37);
      WTF::toNSData(&v39, v38[0], v38[1]);
      objc_msgSend(v23, "setExtensionsCBOR:", WTF::RetainPtr<__IOHIDDevice *>::get(&v39));
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v39);
      WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)v37);
    }
    else
    {
      v25 = (void *)WTF::RetainPtr<__IOHIDDevice *>::get(&v41);
      std::optional<WebCore::AuthenticationExtensionsClientInputs>::operator->[abi:sn180100](v54 + 56);
      WebKit::toASCExtensions((WebKit *)&v36, v26);
      objc_msgSend(v25, "setExtensions:", WTF::RetainPtr<__IOHIDDevice *>::get(&v36));
      WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v36);
    }
  }
  if ((std::optional<WebCore::SecurityOriginData>::operator BOOL[abi:sn180100](v52) & 1) != 0
    && (WTF::RetainPtr<__IOHIDDevice *>::get(&v41), (objc_opt_respondsToSelector() & 1) != 0))
  {
    std::optional<WebCore::SecurityOriginData>::operator->[abi:sn180100](v52);
    WebCore::RegistrableDomain::RegistrableDomain(&v35, v27);
    std::__to_address[abi:sn180100]<char const>();
    v29 = WTF::String::operator NSString *(v28);
    objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v41), "setDestinationSiteForCrossSiteAssertion:", v29);
    WebCore::RegistrableDomain::~RegistrableDomain(&v35, v30);
  }
  else if ((std::optional<WebCore::SecurityOriginData>::operator BOOL[abi:sn180100](v52) & 1) != 0)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get(&v41);
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      WTF::RetainPtr<ASAuthorizationController>::RetainPtr(a1);
      goto LABEL_20;
    }
  }
  if ((std::optional<unsigned int>::operator BOOL[abi:sn180100](v54 + 16) & 1) != 0)
  {
    WTF::RetainPtr<__IOHIDDevice *>::get(&v41);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v31 = (void *)MEMORY[0x1E0CB37E8];
      std::optional<unsigned int>::operator*[abi:sn180100](v54 + 16);
      objc_msgSend((id)WTF::RetainPtr<__IOHIDDevice *>::get(&v41), "setTimeout:", objc_msgSend(v31, "numberWithUnsignedInt:", *v32));
    }
  }
  WTF::RetainPtr<__IOHIDDevice *>::RetainPtr((uint64_t *)a1, &v41);
LABEL_20:
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v41);
  WTF::RetainPtr<NSURLRequest>::~RetainPtr(&v44);
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v46);
  v56 = &v47;
  v59 = &v47;
  v60 = &v47;
  v63[1] = &v47;
  v63[0] = 0;
  v67 = &v47;
  v66 = v63;
  result = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(&v47);
  v64 = result;
  if (result)
    return WTF::StringImpl::deref(v64, v34);
  return result;
}

id WebKit::allocASCPublicKeyCredentialAssertionOptionsInstance(WebKit *this)
{
  return objc_alloc((Class)WebKit::getASCPublicKeyCredentialAssertionOptionsClass[0](this));
}

_QWORD *WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>::Visitor(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0,WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &)::$_1>::Visitor(a1, a2, a3, a4, a5);
}

{
  WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0>::Visitor(a1, a2, a3);
  WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0>::Visitor(a1 + 2, a4, a5);
  return a1;
}

_QWORD *WTF::Visitor<WebKit::WebAuthenticatorCoordinatorProxy::contextForRequest(WebKit::WebAuthenticationRequestData &&)::$_0>::Visitor(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

void sub_19767FAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::ThreadLikeAssertion *v11;

  WTF::ThreadLikeAssertion::~ThreadLikeAssertion(v11);
  WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function((uint64_t)v11);
  _Unwind_Resume(a1);
}

void sub_19767FB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  uint64_t v12;

  WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function(v12);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>,WTF::CompletionHandler<void ()(BOOL)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>,WTF::CompletionHandler<void ()(BOOL)> &&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_19767FC44(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc *v11;

  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::CallableWrapper(_QWORD *a1, uint64_t a2)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,BOOL>::CallableWrapperBase(a1);
  *a1 = off_1E34F35A0;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler(a1 + 1, a2);
  return a1;
}

void sub_19767FCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  std::__to_address[abi:sn180100]<char const>();
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapperBase<void,BOOL>::CallableWrapperBase(_QWORD *result)
{
  *result = off_1E34F35C8;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34F35A0;
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()((WebKit *)(a1 + 8), a2 & 1);
}

void WTF::Detail::CallableWrapperBase<void,BOOL>::~CallableWrapperBase()
{
  __break(1u);
}

{
  __break(1u);
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(WebKit *a1, char a2)
{
  if ((a2 & 1) != 0)
    objc_msgSend((id)WebKit::getASCWebKitSPISupportClass[0](a1), "shouldUseAlternateCredentialStore");
  return WTF::CompletionHandler<void ()(BOOL)>::operator()((uint64_t *)a1);
}

void std::exchange[abi:sn180100]<WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,decltype(nullptr)>(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(WTF::String const&)>::Function(a1, a2);
  WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator=();
}

void WTF::Function<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>::operator=()
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator=[abi:sn180100]();
}

void std::unique_ptr<WTF::Detail::CallableWrapperBase<void,WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>,std::default_delete<WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>>::operator=[abi:sn180100]()
{
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::reset[abi:sn180100]();
}

void sub_19767FFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  uint64_t v12;

  WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function(v12);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>,WTF::CompletionHandler<void ()(BOOL)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>,WTF::CompletionHandler<void ()(BOOL)> &&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x30);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_1976800AC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc *v11;

  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::CallableWrapper(_QWORD *a1, uint64_t a2)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,BOOL>::CallableWrapperBase(a1);
  *a1 = off_1E34F35F0;
  WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void sub_197680154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  std::__to_address[abi:sn180100]<char const>();
  _Unwind_Resume(a1);
}

_QWORD *WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::$_0(_QWORD *a1, uint64_t a2)
{
  WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(a1, a2);
  WebCore::SecurityOriginData::SecurityOriginData((WebCore::SecurityOriginData *)(a1 + 1), (const WebCore::SecurityOriginData *)(a2 + 8));
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34F35F0;
  WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((uint64_t)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

WTF::ThreadLikeAssertion *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()((uint64_t *)(a1 + 8), a2 & 1);
}

void sub_197680298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::ThreadLikeAssertion *v11;

  WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler(v11);
  _Unwind_Resume(a1);
}

WTF::ThreadLikeAssertion *WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(uint64_t *a1, char a2)
{
  WebKit::LocalService *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;

  v9 = a1;
  v8 = a2;
  if ((a2 & 1) == 0)
    return (WTF::ThreadLikeAssertion *)WTF::CompletionHandler<void ()(BOOL)>::operator()(a1);
  v4 = (WebKit::LocalService *)objc_msgSend((id)WebKit::getASCWebKitSPISupportClass[0]((WebKit *)a1), "shouldUseAlternateCredentialStore");
  if ((v4 & 1) != 0)
  {
    WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(&v6, (uint64_t)a1);
    WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v5);
    WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void>(&v7, (uint64_t)&v6);
    WebKit::getArePasskeysDisallowedForRelyingParty((WebCore::SecurityOriginData *)(a1 + 1), &v7);
    WTF::CompletionHandler<void ()(BOOL)>::~CompletionHandler((WTF::ThreadLikeAssertion *)&v7);
    WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v5);
    return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v6);
  }
  else
  {
    WebKit::LocalService::isAvailable(v4);
    return (WTF::ThreadLikeAssertion *)WTF::CompletionHandler<void ()(BOOL)>::operator()(a1);
  }
}

uint64_t *WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  WebCore::SecurityOrigin *v4;
  _QWORD *v5;
  const __CFString *v6;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t *v11;
  WebCore::SecurityOriginData *v12;

  v12 = a1;
  v11 = a2;
  WebKit::getASCWebKitSPISupportClass[0](a1);
  v2 = objc_opt_respondsToSelector();
  if ((v2 & 1) == 0)
    return (uint64_t *)WTF::CompletionHandler<void ()(BOOL)>::operator()(v11);
  v3 = (void *)WebKit::getASCWebKitSPISupportClass[0]((WebKit *)v2);
  WebCore::SecurityOriginData::securityOrigin(v12);
  v4 = (WebCore::SecurityOrigin *)WTF::RefPtr<API::WebAuthenticationPanel,WTF::RawPtrTraits<API::WebAuthenticationPanel>,WTF::DefaultRefDerefTraits<API::WebAuthenticationPanel>>::get((uint64_t)&v10);
  v5 = (_QWORD *)WebCore::SecurityOrigin::domain(v4);
  v6 = WTF::String::operator NSString *(v5);
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(&v8, (uint64_t)v11);
  WTF::makeBlockPtr<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(&v9, (uint64_t)&v8);
  objc_msgSend(v3, "getArePasskeysDisallowedForRelyingParty:withCompletionHandler:", v6, std::span<char const,18446744073709551615ul>::data[abi:sn180100]((uint64_t)&v9));
  WTF::BlockPtr<void ()(void)>::~BlockPtr(&v9);
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v8);
  return WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v10);
}

_QWORD *WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void>(_QWORD *a1, uint64_t a2)
{
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)>&&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void>(a1, a2);
  return a1;
}

{
  WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void>(a1, a2);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

WTF::ThreadLikeAssertion *WTF::makeBlockPtr<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(_QWORD *a1, uint64_t a2)
{
  return WTF::makeBlockPtr<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1},WTF::CompletionHandler<void ()(BOOL)> &&,void,BOOL>(a1, a2, (uint64_t)WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator(), 0);
}

WTF::ThreadLikeAssertion *WTF::makeBlockPtr<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1},WTF::CompletionHandler<void ()(BOOL)> &&,void,BOOL>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v6[7];

  v6[6] = a1;
  v6[5] = a4;
  v6[4] = a3;
  v6[3] = a2;
  v6[2] = a4;
  v6[1] = a3;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler(v6, a2);
  WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(a1, (uint64_t)v6);
  return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)v6);
}

void sub_197680620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&a13);
  _Unwind_Resume(a1);
}

WTF::ThreadLikeAssertion *WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(uint64_t a1, char a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2 & 1;
  WTF::CompletionHandler<void ()(BOOL)>::CompletionHandler(&v3, a1);
  v4 = v6 & 1;
  WTF::Function<void ()(void)>::Function<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>(&v5, (uint64_t)&v3);
  WTF::ensureOnMainRunLoop();
  WTF::Function<void ()(void)>::~Function((uint64_t)&v5);
  return WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&v3);
}

void sub_1976806A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, char a13)
{
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  char v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v9 = a1;
  v8 = a2;
  v7 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *(_QWORD *)v7 = MEMORY[0x1E0C809A0];
  v6 = 1;
  v7[2] = 50331650;
  v7[3] = 0;
  WTF::RefCountedBase::applyRefDerefThreadingCheck((WTF::RefCountedBase *)&v5);
  *((_QWORD *)v7 + 2) = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::__invoke;
  *((_QWORD *)v7 + 3) = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::descriptor;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler((_QWORD *)v7 + 4, a2);
  result = WTF::HashTable<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>,WTF::HashTraits<WTF::Ref<WebKit::Authenticator,WTF::RawPtrTraits<WebKit::Authenticator>,WTF::DefaultRefDerefTraits<WebKit::Authenticator>>>>::HashTable(a1);
  *a1 = v7;
  return result;
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  char v2;
  uint64_t v3;

  v3 = a1;
  return WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void const*)#1}::operator()((uint64_t)&v2, a1);
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, char a2)
{
  _BYTE v3[2];
  uint64_t v4;

  v4 = a1;
  v3[1] = a2;
  return WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::operator()((uint64_t)v3, a1, a2 & 1);
}

WTF::ThreadLikeAssertion *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}>(WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1})::{lambda(void *,BOOL)#1}::operator()(uint64_t a1, uint64_t a2, char a3)
{
  return WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(a2 + 32, a3 & 1);
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(void)>::Function<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>,{lambda(BOOL)#1}>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>,{lambda(BOOL)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x18);
  WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_19768093C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc *v11;

  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::CallableWrapper(_QWORD *a1, uint64_t a2)
{
  WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = off_1E34F3638;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_1976809E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  std::__to_address[abi:sn180100]<char const>();
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34F3638;
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::getArePasskeysDisallowedForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::operator()(BOOL)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

void sub_197680B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  uint64_t v12;

  WTF::Function<void ()(WebKit::LocalAuthenticatorPolicy)>::~Function(v12);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void>(_QWORD *a1, uint64_t a2)
{
  WTF::Function<void ()(BOOL)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>,$_0>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>,$_0>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x10);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_197680C3C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc *v11;

  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>::CallableWrapper(_QWORD *a1, uint64_t a2)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void,BOOL>::CallableWrapperBase(a1);
  *a1 = off_1E34F3660;
  WebKit::getCanCurrentProcessAccessPasskeyForRelyingParty(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(BOOL)#1}::CompletionHandler(a1 + 1, a2);
  return a1;
}

void sub_197680CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  std::__to_address[abi:sn180100]<char const>();
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34F3660;
  WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::~$_0((WTF::ThreadLikeAssertion *)(a1 + 1));
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1},void,BOOL>::call(uint64_t a1)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1}::operator()((uint64_t *)(a1 + 8));
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(BOOL)#1}::operator()(uint64_t *a1)
{
  return WTF::CompletionHandler<void ()(BOOL)>::operator()(a1);
}

void sub_197680E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  uint64_t v12;

  WTF::Function<void ()(void)>::~Function(v12);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>(_QWORD *a1, uint64_t *a2)
{
  WTF::Function<void ()(void)>::Function<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>(a1, a2);
  return a1;
}

{
  _QWORD v4[5];

  v4[2] = a1;
  v4[1] = a2;
  v4[4] = v4;
  v4[3] = a2;
  std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>,WTF::CompletionHandler<void ()(void)> &&>(v4, a2);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void>>::unique_ptr[abi:sn180100]<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>,std::default_delete<WTF::Detail::CallableWrapper<std::__bind<void (WebKit::AuthenticatorManager::*&)(void),WebKit::AuthenticatorManager*&>,void>>,void,void>(a1, (uint64_t)v4);
  std::unique_ptr<WTF::Detail::CallableWrapperBase<void,API::WebAuthenticationPanel const&>>::~unique_ptr[abi:sn180100]((uint64_t)v4);
  return a1;
}

_QWORD *std::make_unique[abi:sn180100]<WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>,WTF::CompletionHandler<void ()(void)> &&>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)WTF::FastMalloc::malloc((WTF::FastMalloc *)0x18);
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::CallableWrapper(v3, a2);
  return std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1, (uint64_t)v3);
}

void sub_197680F7C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  WTF::FastMalloc *v11;

  WTF::FastMalloc::free(v11, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::CallableWrapper(_QWORD *a1, uint64_t *a2)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::CallableWrapper(a1, a2);
  return a1;
}

{
  WTF::Detail::CallableWrapperBase<void>::CallableWrapperBase(a1);
  *a1 = off_1E34F3688;
  WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::$_0(a1 + 1, a2);
  return a1;
}

void sub_197681024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  std::__to_address[abi:sn180100]<char const>();
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::$_0(uint64_t *a1, uint64_t *a2)
{
  WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::$_0(a1, a2);
  return a1;
}

{
  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr(a1, a2);
  WTF::CompletionHandler<void ()(void)>::CompletionHandler(a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(a1);
  return a1;
}

{
  *a1 = off_1E34F3688;
  WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(a1 + 1);
  std::__to_address[abi:sn180100]<char const>();
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF::FastMalloc *a1)
{
  void *v2;

  WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(a1);
  return WTF::FastMalloc::free(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()((uint64_t *)(a1 + 8));
}

void sub_19768115C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  uint64_t *v11;

  WTF::WeakPtr<API::WebAuthenticationPanel,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::~WeakPtr(v11);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebAuthenticatorCoordinatorProxy::cancel(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = a1;
  if (WTF::WeakPtr<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator BOOL(a1))
  {
    v2 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    WTF::RetainPtr<ASCAgentProxy>::clear((uint64_t *)(v2 + 40));
    v3 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    WTF::RetainPtr<ASCAgentProxy>::clear((uint64_t *)(v3 + 32));
    v7 = 0;
    WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)&v6);
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler<decltype(nullptr),void>(v8);
    v4 = WTF::WeakPtr<WebKit::AuthenticatorManager,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator->(a1);
    WTF::CompletionHandler<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::operator=(v4 + 24);
    WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::~CompletionHandler((WTF::ThreadLikeAssertion *)v8);
    WTF::ThreadLikeAssertion::~ThreadLikeAssertion((WTF::ThreadLikeAssertion *)&v6);
  }
  return WTF::CompletionHandler<void ()(void)>::operator()(a1 + 1);
}

_QWORD *WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler<decltype(nullptr),void>(_QWORD *a1)
{
  WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::CompletionHandler<decltype(nullptr),void>(a1);
  return a1;
}

{
  WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::Function(a1);
  WTF::ThreadLikeAssertion::ThreadLikeAssertion((uint64_t)a1);
  return a1;
}

void sub_19768132C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  uint64_t v12;

  WTF::Function<void ()(std::variant<WTF::Ref<WebCore::AuthenticatorResponse,WTF::RawPtrTraits<WebCore::AuthenticatorResponse>,WTF::DefaultRefDerefTraits<WebCore::AuthenticatorResponse>>,WebCore::ExceptionData> &&)>::~Function(v12);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::Function(_QWORD *a1)
{
  WTF::Function<void ()(WebCore::AuthenticatorResponseData const&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData const&)>::Function(a1);
  return a1;
}

{
  std::unique_ptr<WebKit::AuthenticatorPresenterCoordinator>::unique_ptr[abi:sn180100]<true,void>(a1);
  return a1;
}

void WebKit::WebAuthenticatorCoordinatorProxy::didReceiveMessage(WebKit::WebAuthenticatorCoordinatorProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unsigned __int16 v12;
  char v13;
  __int128 v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  unsigned __int8 **v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  unsigned __int8 **v22;
  WTF::StringImpl *v23;
  unsigned __int16 v24;
  char v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  unsigned __int8 **v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  unsigned __int8 **v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  unsigned __int8 **v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  CFTypeRef v58;
  __int128 v59;
  char v60;
  char v61;
  __int128 v62;
  __int16 v63;
  int v64;
  char v65;
  CFTypeRef cf;
  uint64_t v67;
  int v68;
  WTF::StringImpl *v69;
  char v70[8];
  int v71;
  uint64_t v72;
  WTF::StringImpl *v73[2];
  uint64_t v74;
  char v75;
  _BYTE v76[144];
  char v77;
  __int16 v78;
  char v79;
  _BYTE v80[24];
  int v81;
  char v82;
  char v83;
  char v84;
  char v85;
  _QWORD *v86;
  int v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  char v91;
  _BYTE v92[152];
  __int16 v93;
  char v94;
  char v95;
  _QWORD *v96;
  unsigned __int8 **v97[2];
  int v98;
  char v99;
  char v100;
  __int128 v101;
  char v102;
  int v103;
  char v104;
  char v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5F3:
      v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v7)
      {
        *(_QWORD *)&v62 = v6;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v62 + 1, a2);
        v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v8 = off_1E34F3798;
        v8[1] = v62;
        v9 = *((_QWORD *)&v62 + 1);
        *((_QWORD *)&v62 + 1) = 0;
        v8[2] = v9;
        v96 = v8;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v62 + 1);
        WebKit::WebAuthenticatorCoordinatorProxy::cancel(this, (uint64_t *)&v96);
        v10 = (uint64_t)v96;
        v96 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      return;
    case 0x5F4:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, (uint64_t)&v59);
      if (!v60)
      {
        LOBYTE(v62) = 0;
        v83 = 0;
LABEL_51:
        v32 = *(_QWORD *)a3;
        v33 = *((_QWORD *)a3 + 1);
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        v34 = *((_QWORD *)a3 + 3);
        if (!v34)
          return;
        if (!v33)
          return;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
        if (!v83)
          return;
        goto LABEL_70;
      }
      IPC::Decoder::decode<WebKit::FrameInfoData>((uint64_t *)a3, (uint64_t)&v96);
      if (v100)
      {
        IPC::ArgumentCoder<WebCore::PublicKeyCredentialRequestOptions,void>::decode((uint64_t *)a3, (uint64_t)&v86);
        if (!v94)
        {
          v11 = *(WTF::StringImpl **)a3;
          v38 = *((_QWORD *)a3 + 1);
          *(_QWORD *)a3 = 0;
          *((_QWORD *)a3 + 1) = 0;
          v39 = *((_QWORD *)a3 + 3);
          if (!v39)
            goto LABEL_61;
          if (!v38)
            goto LABEL_61;
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v39 + 16))(v39, v11);
          if (!v94)
            goto LABEL_61;
        }
        v12 = IPC::Decoder::decode<WebKit::VideoCodecType>(a3);
        if (v12 > 0xFFu
          && (v13 = v12,
              IPC::Decoder::decode<std::optional<WebCore::SecurityOriginData>>((uint64_t *)a3, (uint64_t)&v101),
              v105))
        {
          if (!v60 || !v100 || !v94)
            goto LABEL_110;
          v62 = v59;
          std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v63, (uint64_t)&v96);
          v70[0] = 0;
          v71 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v70, (uint64_t)&v86);
          v72 = v88;
          v14 = v89;
          v89 = 0uLL;
          *(_OWORD *)v73 = v14;
          *(_QWORD *)&v14 = v90;
          v90 = 0;
          v74 = v14;
          v75 = v91;
          v76[0] = 0;
          v77 = 0;
          if (v92[144])
          {
            std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs,WebCore::AuthenticationExtensionsClientInputs*>((uint64_t)v76, (uint64_t)v92);
            v77 = 1;
          }
          v78 = v93;
          v79 = v13;
          v80[0] = 0;
          v82 = 0;
          if (v104)
          {
            v81 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v80, (uint64_t)&v101);
            v82 = 1;
            v83 = 1;
            if (v105 && v104 && v103 != -1)
              ((void (*)(char *, __int128 *))off_1E34F36A0[v103])(&v61, &v101);
          }
          else
          {
            v83 = 1;
          }
        }
        else
        {
LABEL_61:
          LOBYTE(v62) = 0;
          v83 = 0;
        }
        if (v94)
        {
          std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)v92);
          WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)((char *)&v89 + 8));
          v40 = (WTF::StringImpl *)v89;
          *(_QWORD *)&v89 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v11);
            else
              *(_DWORD *)v40 -= 2;
          }
          if (v87 != -1)
            ((void (*)(__int128 *, _QWORD **))off_1E34F36B0[v87])(&v101, &v86);
        }
      }
      else
      {
        LOBYTE(v62) = 0;
        v83 = 0;
      }
      std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v96, v11);
      if (!v83)
        goto LABEL_51;
LABEL_70:
      v41 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v42)
      {
        v96 = (_QWORD *)v41;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v97, a2);
        v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v43 = off_1E34F36F8;
        v43[1] = v96;
        v44 = v97[0];
        v97[0] = 0;
        v43[2] = v44;
        v86 = v43;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v97);
        if (v83)
        {
          v45 = v62;
          v46 = v79;
          LOBYTE(v96) = 0;
          v99 = 0;
          if (v82)
          {
            v98 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)v80);
            v99 = 1;
          }
          WebKit::WebAuthenticatorCoordinatorProxy::getAssertion((uint64_t)this, v45, *((uint64_t *)&v45 + 1), &v63, (uint64_t)v70, v46, (uint64_t)&v96, (uint64_t *)&v86);
          if (v99 && v98 != -1)
            ((void (*)(__int128 *, _QWORD **))off_1E34F36A0[v98])(&v101, &v96);
          v47 = (uint64_t)v86;
          v86 = 0;
          if (v47)
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
          goto LABEL_79;
        }
LABEL_110:
        __break(1u);
      }
LABEL_79:
      if (!v83)
        return;
      if (v82)
      {
        if (v81 != -1)
          ((void (*)(_QWORD **, _BYTE *))off_1E34F36A0[v81])(&v96, v80);
        v81 = -1;
      }
      std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs *)v76);
      WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)&v73[1]);
      v49 = v73[0];
      v73[0] = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v48);
        else
          *(_DWORD *)v49 -= 2;
      }
      if (v71 != -1)
        ((void (*)(_QWORD **, char *))off_1E34F36B0[v71])(&v96, v70);
      v71 = -1;
LABEL_100:
      v57 = v69;
      v69 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v48);
        else
          *(_DWORD *)v57 -= 2;
      }
      if (v68 != -1)
        ((void (*)(_QWORD **, uint64_t *))off_1E34F36A0[v68])(&v96, &v67);
      v68 = -1;
      v58 = cf;
      cf = 0;
      if (v58)
        CFRelease(v58);
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v64);
      return;
    case 0x5F5:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a3, (uint64_t)&v62);
      if (!v65)
        return;
      v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v16)
        goto LABEL_39;
      v96 = (_QWORD *)v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v97, a2);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v17 = off_1E34F3770;
      v17[1] = v96;
      v18 = v97[0];
      v97[0] = 0;
      v17[2] = v18;
      v86 = v17;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v97);
      if (!v65)
        goto LABEL_110;
      WebKit::WebAuthenticatorCoordinatorProxy::getClientCapabilities(this, (WebCore::SecurityOriginData *)&v62, (WTF::RefCountedBase *)&v86);
      goto LABEL_37;
    case 0x5F6:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a3, (uint64_t)&v62);
      if (!v65)
        return;
      v19 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v20)
        goto LABEL_39;
      v96 = (_QWORD *)v19;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v97, a2);
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v21 = off_1E34F3748;
      v21[1] = v96;
      v22 = v97[0];
      v97[0] = 0;
      v21[2] = v22;
      v86 = v21;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v97);
      if (!v65)
        goto LABEL_110;
      WebKit::WebAuthenticatorCoordinatorProxy::isUserVerifyingPlatformAuthenticatorAvailable((uint64_t)this, (WebCore::SecurityOriginData *)&v62, (uint64_t)&v86);
      goto LABEL_37;
    case 0x5F7:
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)a3, (uint64_t)&v101);
      if (v102)
      {
        IPC::Decoder::decode<WebKit::FrameInfoData>((uint64_t *)a3, (uint64_t)&v86);
        if (v95
          && ((IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions,void>::decode((uint64_t *)a3, &v96), v100)
           || (v23 = *(WTF::StringImpl **)a3,
               v50 = *((_QWORD *)a3 + 1),
               *(_QWORD *)a3 = 0,
               *((_QWORD *)a3 + 1) = 0,
               (v51 = *((_QWORD *)a3 + 3)) != 0)
           && v50
           && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v51 + 16))(v51, v23), v100)))
        {
          v24 = IPC::Decoder::decode<WebKit::VideoCodecType>(a3);
          if (v24 > 0xFFu)
          {
            if (!v102 || !v95 || !v100)
              goto LABEL_110;
            v31 = v24;
            v62 = v101;
            std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v63, (uint64_t)&v86);
            WebCore::PublicKeyCredentialCreationOptions::PublicKeyCredentialCreationOptions((uint64_t)v70, (uint64_t)&v96);
            v84 = v31;
            v25 = 1;
          }
          else
          {
            v25 = 0;
            LOBYTE(v62) = 0;
          }
          v85 = v25;
          if (v100)
            WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)&v96);
        }
        else
        {
          LOBYTE(v62) = 0;
          v85 = 0;
        }
        std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v86, v23);
        if (v85)
        {
LABEL_94:
          v52 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          if (v53)
          {
            v96 = (_QWORD *)v52;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v97, a2);
            v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v54 = off_1E34F36D0;
            v54[1] = v96;
            v55 = v97[0];
            v97[0] = 0;
            v54[2] = v55;
            v86 = v54;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v97);
            if (!v85)
              goto LABEL_110;
            WebKit::WebAuthenticatorCoordinatorProxy::makeCredential((uint64_t)this, v62, *((uint64_t *)&v62 + 1), &v63, (uint64_t)v70, v84, (uint64_t *)&v86);
            v56 = (uint64_t)v86;
            v86 = 0;
            if (v56)
              (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
          }
          if (!v85)
            return;
          WebCore::PublicKeyCredentialCreationOptions::~PublicKeyCredentialCreationOptions((WebCore::PublicKeyCredentialCreationOptions *)v70);
          goto LABEL_100;
        }
      }
      else
      {
        LOBYTE(v62) = 0;
        v85 = 0;
      }
      v35 = *(_QWORD *)a3;
      v36 = *((_QWORD *)a3 + 1);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      v37 = *((_QWORD *)a3 + 3);
      if (!v37)
        return;
      if (!v36)
        return;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
      if (!v85)
        return;
      goto LABEL_94;
    case 0x5F8:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a3, (uint64_t)&v62);
      if (!v65)
        return;
      v26 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v27)
        goto LABEL_39;
      v96 = (_QWORD *)v26;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v97, a2);
      v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v28 = off_1E34F3720;
      v28[1] = v96;
      v29 = v97[0];
      v97[0] = 0;
      v28[2] = v29;
      v86 = v28;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v97);
      if (!v65)
        goto LABEL_110;
      WebKit::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable((uint64_t)this, (WebCore::SecurityOriginData *)&v62, (uint64_t)&v86);
LABEL_37:
      v30 = (uint64_t)v86;
      v86 = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
LABEL_39:
      if (v65 && v64 != -1)
        ((void (*)(_QWORD **, __int128 *))off_1E34F36A0[v64])(&v96, &v62);
      return;
    default:
      return;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy14MakeCredentialEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataEONS9_34PublicKeyCredentialCreationOptionsENS9_20MediationRequirementEONS_17CompletionHandlerIFvRKNS9_25AuthenticatorResponseDataENS9_23AuthenticatorAttachmentERKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SQ_ST_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F36D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy14MakeCredentialEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataEONS9_34PublicKeyCredentialCreationOptionsENS9_20MediationRequirementEONS_17CompletionHandlerIFvRKNS9_25AuthenticatorResponseDataENS9_23AuthenticatorAttachmentERKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SQ_ST_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F36D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy14MakeCredentialEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataEONS9_34PublicKeyCredentialCreationOptionsENS9_20MediationRequirementEONS_17CompletionHandlerIFvRKNS9_25AuthenticatorResponseDataENS9_23AuthenticatorAttachmentERKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SQ_ST_EE4callESP_SQ_ST_(uint64_t a1, WebCore::AuthenticatorResponseData *a2, char a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  char *result;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  IPC::Encoder *v23;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 3142;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v23 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WebCore::AuthenticatorResponseData,void>::encode((IPC::Encoder *)v9, a2);
  v10 = *(_QWORD *)(v9 + 544);
  v11 = v10 + 1;
  v12 = *(_QWORD *)(v9 + 552);
  if (v12 < v10 + 1)
  {
    v20 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v21 = v20;
      v20 *= 2;
    }
    while (v21 < v11);
    result = (char *)mmap(0, v21, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v13 = result;
    memcpy(result, *(const void **)(v9 + 528), *(_QWORD *)(v9 + 544));
    v22 = *(void **)(v9 + 528);
    if (v22 != (void *)(v9 + 16))
      munmap(v22, *(_QWORD *)(v9 + 552));
    *(_QWORD *)(v9 + 528) = v13;
    *(_QWORD *)(v9 + 552) = v21;
    v14 = *(_QWORD *)(v9 + 544);
  }
  else
  {
    v13 = *(char **)(v9 + 528);
    v14 = *(_QWORD *)(v9 + 544);
  }
  bzero(&v13[v14], v10 - v14);
  *(_QWORD *)(v9 + 544) = v11;
  v15 = (_BYTE *)(*(_QWORD *)(v9 + 528) + v10);
  *(_QWORD *)(v9 + 536) = v15 + 1;
  *v15 = a3;
  IPC::ArgumentCoder<WebCore::Exception,void>::encode((IPC::Encoder *)v9, a4);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v23, 0, 0);
  result = (char *)v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v16);
    return (char *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy12GetAssertionEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataEONS9_33PublicKeyCredentialRequestOptionsENS9_20MediationRequirementENSt3__18optionalINS9_18SecurityOriginDataEEEONS_17CompletionHandlerIFvRKNS9_25AuthenticatorResponseDataENS9_23AuthenticatorAttachmentERKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_SU_SX_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F36F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy12GetAssertionEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataEONS9_33PublicKeyCredentialRequestOptionsENS9_20MediationRequirementENSt3__18optionalINS9_18SecurityOriginDataEEEONS_17CompletionHandlerIFvRKNS9_25AuthenticatorResponseDataENS9_23AuthenticatorAttachmentERKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_SU_SX_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F36F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy12GetAssertionEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS7_13FrameInfoDataEONS9_33PublicKeyCredentialRequestOptionsENS9_20MediationRequirementENSt3__18optionalINS9_18SecurityOriginDataEEEONS_17CompletionHandlerIFvRKNS9_25AuthenticatorResponseDataENS9_23AuthenticatorAttachmentERKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_SU_SX_EE4callEST_SU_SX_(uint64_t a1, WebCore::AuthenticatorResponseData *a2, char a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  char *result;
  WTF *v18;
  void *v19;
  unint64_t v20;
  size_t v21;
  void *v22;
  IPC::Encoder *v23;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 3139;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v23 = (IPC::Encoder *)v9;
  IPC::ArgumentCoder<WebCore::AuthenticatorResponseData,void>::encode((IPC::Encoder *)v9, a2);
  v10 = *(_QWORD *)(v9 + 544);
  v11 = v10 + 1;
  v12 = *(_QWORD *)(v9 + 552);
  if (v12 < v10 + 1)
  {
    v20 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v21 = v20;
      v20 *= 2;
    }
    while (v21 < v11);
    result = (char *)mmap(0, v21, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v13 = result;
    memcpy(result, *(const void **)(v9 + 528), *(_QWORD *)(v9 + 544));
    v22 = *(void **)(v9 + 528);
    if (v22 != (void *)(v9 + 16))
      munmap(v22, *(_QWORD *)(v9 + 552));
    *(_QWORD *)(v9 + 528) = v13;
    *(_QWORD *)(v9 + 552) = v21;
    v14 = *(_QWORD *)(v9 + 544);
  }
  else
  {
    v13 = *(char **)(v9 + 528);
    v14 = *(_QWORD *)(v9 + 544);
  }
  bzero(&v13[v14], v10 - v14);
  *(_QWORD *)(v9 + 544) = v11;
  v15 = (_BYTE *)(*(_QWORD *)(v9 + 528) + v10);
  *(_QWORD *)(v9 + 536) = v15 + 1;
  *v15 = a3;
  IPC::ArgumentCoder<WebCore::Exception,void>::encode((IPC::Encoder *)v9, a4);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v23, 0, 0);
  result = (char *)v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v16);
    return (char *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy31isConditionalMediationAvailableEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F3720;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy31isConditionalMediationAvailableEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F3720;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy31isConditionalMediationAvailableEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3143;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy45IsUserVerifyingPlatformAuthenticatorAvailableEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F3748;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy45IsUserVerifyingPlatformAuthenticatorAvailableEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F3748;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy45IsUserVerifyingPlatformAuthenticatorAvailableEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3141;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy21GetClientCapabilitiesEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvONS_6VectorINS_12KeyValuePairINS_6StringEbEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F3770;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy21GetClientCapabilitiesEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvONS_6VectorINS_12KeyValuePairINS_6StringEbEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F3770;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy21GetClientCapabilitiesEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvRKN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvONS_6VectorINS_12KeyValuePairINS_6StringEbEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  size_t v25;
  char *v26;
  void *v27;
  void *v28;
  IPC::Encoder *result;
  WTF *v30;
  void *v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  void *v35;
  IPC::Encoder *v36;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3140;
  *(_QWORD *)(v5 + 8) = v4;
  v6 = (void *)(v5 + 16);
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v36 = (IPC::Encoder *)v5;
  v7 = *((unsigned int *)a2 + 3);
  v8 = *(_QWORD *)(v5 + 544);
  v9 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 8;
  v11 = *(_QWORD *)(v5 + 552);
  if (v11 < v9 + 8)
  {
    v32 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v33 = v32;
      v32 *= 2;
    }
    while (v33 < v10);
    v34 = (char *)mmap(0, v33, 3, 4098, -1, 0);
    if (v34 == (char *)-1)
    {
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x197682764);
    }
    v12 = v34;
    memcpy(v34, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v35 = *(void **)(v5 + 528);
    if (v35 != v6)
      munmap(v35, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v12;
    *(_QWORD *)(v5 + 552) = v33;
    v8 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v12 = *(char **)(v5 + 528);
  }
  bzero(&v12[v8], v9 - v8);
  *(_QWORD *)(v5 + 544) = v10;
  v13 = (_QWORD *)(*(_QWORD *)(v5 + 528) + v9);
  *(_QWORD *)(v5 + 536) = v13 + 1;
  *v13 = v7;
  v14 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v14)
  {
    v15 = *a2;
    v16 = v15 + 16 * v14;
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, (uint64_t *)v15);
      v17 = *(_BYTE *)(v15 + 8);
      v18 = *(_QWORD *)(v5 + 544);
      v19 = v18 + 1;
      v20 = *(_QWORD *)(v5 + 552);
      if (v20 < v18 + 1)
      {
        v24 = (2 * v20 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v25 = v24;
          v24 *= 2;
        }
        while (v25 < v19);
        v26 = (char *)mmap(0, v25, 3, 4098, -1, 0);
        if (v26 == (char *)-1)
          goto LABEL_24;
        v21 = v26;
        memcpy(v26, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
        v27 = *(void **)(v5 + 528);
        if (v27 != v6)
          munmap(v27, *(_QWORD *)(v5 + 552));
        *(_QWORD *)(v5 + 528) = v21;
        *(_QWORD *)(v5 + 552) = v25;
        v22 = *(_QWORD *)(v5 + 544);
      }
      else
      {
        v21 = *(char **)(v5 + 528);
        v22 = *(_QWORD *)(v5 + 544);
      }
      bzero(&v21[v22], v18 - v22);
      *(_QWORD *)(v5 + 544) = v19;
      v23 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v18);
      *(_QWORD *)(v5 + 536) = v23 + 1;
      *v23 = v17;
      v15 += 16;
    }
    while (v15 != v16);
  }
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v36, 0, 0);
  result = v36;
  v36 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v28);
    return (IPC::Encoder *)WTF::fastFree(v30, v31);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy6CancelEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F3798;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy6CancelEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F3798;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages32WebAuthenticatorCoordinatorProxy6CancelEN6WebKit32WebAuthenticatorCoordinatorProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3138;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

_QWORD *WebKit::WebAutocorrectionData::WebAutocorrectionData(_QWORD *a1, _DWORD *a2, uint64_t a3, double a4, double a5)
{
  void *v9;
  const __CFString *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)a1, a2);
  v9 = (void *)MEMORY[0x1E0CEA5E8];
  if (*(_BYTE *)(a3 + 8))
  {
    if (*(_QWORD *)a3)
      v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v10 = &stru_1E351F1B8;
    v11 = (const void *)objc_msgSend(v9, "fontWithName:size:", v10, a4);
    v12 = v11;
    if (!v11)
      goto LABEL_8;
  }
  else
  {
    v11 = (const void *)objc_msgSend(MEMORY[0x1E0CEA5E8], "systemFontOfSize:weight:", a4, a5);
    v12 = v11;
    if (!v11)
      goto LABEL_8;
  }
  CFRetain(v11);
LABEL_8:
  v13 = (const void *)a1[2];
  a1[2] = v12;
  if (v13)
    CFRelease(v13);
  return a1;
}

void sub_197682928(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  const void *v4;
  WTF *v5;

  v4 = *(const void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::WebAutocorrectionData::WebAutocorrectionData(_QWORD *a1, uint64_t a2, const void **a3)
{
  const void *v5;
  const void *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  v6 = (const void *)a1[2];
  a1[2] = v5;
  if (v6)
    CFRelease(v6);
  return a1;
}

void sub_1976829A8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  const void *v4;
  WTF *v5;

  v4 = *(const void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebAutocorrectionData::fontName@<X0>(id *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;
  uint64_t v6;

  result = objc_msgSend(this[2], "isSystemFont");
  if ((_DWORD)result)
  {
    v5 = 0;
    *a2 = 0;
  }
  else
  {
    result = MEMORY[0x19AEABCC8](&v6, objc_msgSend(this[2], "fontName"));
    *(_QWORD *)a2 = v6;
    v5 = 1;
  }
  a2[8] = v5;
  return result;
}

WTF::StringImpl *WebKit::AutomationCommandError::toProtocolString(WebKit::AutomationCommandError *this, unsigned int *a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  result = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::getEnumConstantValue(*a2, &v11);
  v5 = v11;
  if (!*((_BYTE *)a2 + 16))
  {
    *(_QWORD *)this = v11;
    return result;
  }
  if (v11)
    *(_DWORD *)v11 += 2;
  v10 = v5;
  v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  if (v6)
    *(_DWORD *)v6 += 2;
  v9 = v6;
  WTF::makeString<WTF::String,char,WTF::String>((uint64_t *)&v10, 59, (uint64_t *)&v9, this);
  v8 = v9;
  v9 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v10;
  v10 = 0;
  if (!result)
  {
LABEL_14:
    if (!v5)
      return result;
    goto LABEL_17;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_14;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  if (!v5)
    return result;
LABEL_17:
  if (*(_DWORD *)v5 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v7);
  *(_DWORD *)v5 -= 2;
  return result;
}

uint64_t WTF::makeString<WTF::String,char,WTF::String>@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *a1;
  v7 = a2;
  v6 = *a3;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v8, &v7, &v6, a4);
  if (!*a4)
    __break(0xC471u);
  return result;
}

uint64_t WebKit::WebAutomationSession::Debuggable::name@<X0>(unsigned __int8 **this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  *a2 = 0;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(this + 1);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = &off_1E34F3C60;
  v4[1] = this;
  v4[2] = this;
  v4[3] = a2;
  v6 = (uint64_t)v4;
  WTF::callOnMainRunLoopAndWait();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t WebKit::WebAutomationSession::Debuggable::dispatchMessageFromRemote(uint64_t a1)
{
  _QWORD *v2;
  WTF::StringImpl *v5;
  _QWORD *v6;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 8));
  WTF::String::isolatedCopy();
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v2 = &off_1E34F3C88;
  v2[1] = a1;
  v2[2] = a1;
  v2[3] = v5;
  v6 = v2;
  WTF::callOnMainRunLoopAndWait();
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  return 0;
}

uint64_t WebKit::WebAutomationSession::Debuggable::connect(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 8));
  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = &off_1E34F3CB0;
  *(_QWORD *)(v8 + 8) = a1;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_BYTE *)(v8 + 32) = a3;
  *(_BYTE *)(v8 + 33) = a4;
  v10 = v8;
  WTF::callOnMainRunLoopAndWait();
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

uint64_t WebKit::WebAutomationSession::Debuggable::disconnect(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 8));
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = &off_1E34F3CD8;
  v4[1] = a1;
  v4[2] = a1;
  v4[3] = a2;
  v6 = v4;
  WTF::callOnMainRunLoopAndWait();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

WebKit::WebAutomationSession *WebKit::WebAutomationSession::WebAutomationSession(WebKit::WebAutomationSession *this)
{
  _QWORD *v2;
  Inspector::FrontendRouter *v3;
  WTF *v4;
  void *v5;
  Inspector::BackendDispatcher *v6;
  Inspector::SupplementalBackendDispatcher *v7;
  WTF::RunLoop *v8;
  WTF::RunLoop *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v14;
  WTF *v15;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *((_QWORD *)this + 4) = &unk_1E34F3A08;
  *(_QWORD *)this = &off_1E34F3818;
  *((_QWORD *)this + 2) = &unk_1E34F39D0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = &unk_1E34F3B98;
  *((_QWORD *)this + 6) = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v2 = off_1E34F3BD0;
  *((_QWORD *)this + 7) = v2;
  v3 = (Inspector::FrontendRouter *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 8) = v14;
  Inspector::FrontendRouter::create(v3);
  v4 = (WTF *)*((_QWORD *)this + 9);
  ++*(_DWORD *)v4;
  v15 = v4;
  Inspector::BackendDispatcher::create();
  if (v15)
    WTF::RefCounted<Inspector::FrontendRouter>::deref((uint64_t)v15, v5);
  v6 = (Inspector::BackendDispatcher *)*((_QWORD *)this + 10);
  v7 = (Inspector::SupplementalBackendDispatcher *)WTF::fastMalloc((WTF *)0x20);
  *((_QWORD *)this + 11) = Inspector::AutomationBackendDispatcher::AutomationBackendDispatcher(v7, v6, (uint64_t)this + 32);
  v8 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 12) = v8;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 23) = 1;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = 1;
  v9 = (WTF::RunLoop *)WTF::RunLoop::main(v8);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E34F3D00;
  v10[1] = WebKit::WebAutomationSession::loadTimerFired;
  v10[2] = 0;
  v10[3] = this;
  WTF::RunLoop::TimerBase::TimerBase((WebKit::WebAutomationSession *)((char *)this + 224), v9);
  *((_QWORD *)this + 28) = off_1E34ABE00;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 31) = v10;
  *((_BYTE *)this + 272) = 1;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *(_QWORD *)((char *)this + 293) = 0;
  v11 = WTF::fastMalloc((WTF *)0x20);
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v12 = 0;
  *(_OWORD *)(v12 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v12 + 24) = v11;
  *(_DWORD *)(v11 + 16) = 0;
  *(_WORD *)(v11 + 20) = 0;
  *(_QWORD *)v11 = off_1E34F37C0;
  *(_QWORD *)(v11 + 8) = v12;
  *(_QWORD *)(v11 + 24) = this;
  *((_QWORD *)this + 39) = v11;
  return this;
}

WTF::StringImpl *WebKit::WebAutomationSession::loadTimerFired(WebKit::WebAutomationSession *this)
{
  WebKit::WebAutomationSession::respondToPendingFrameNavigationCallbacksWithTimeout((uint64_t)this, (uint64_t *)this + 19);
  WebKit::WebAutomationSession::respondToPendingFrameNavigationCallbacksWithTimeout((uint64_t)this, (uint64_t *)this + 20);
  WebKit::WebAutomationSession::respondToPendingPageNavigationCallbacksWithTimeout((uint64_t)this, (uint64_t *)this + 17);
  return WebKit::WebAutomationSession::respondToPendingPageNavigationCallbacksWithTimeout((uint64_t)this, (uint64_t *)this + 18);
}

void WebKit::WebAutomationSession::~WebAutomationSession(WebKit::WebAutomationSession *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebKit::SimulatedInputDispatcher **v6;
  WebKit::SimulatedInputDispatcher *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF *v39;
  _DWORD *v40;
  WTF *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;

  *(_QWORD *)(*((_QWORD *)this + 39) + 24) = 0;
  v3 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  v4 = *((_QWORD *)this + 36);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = (WebKit::SimulatedInputDispatcher **)(v4 + 8);
      do
      {
        if (*(v6 - 1) != (WebKit::SimulatedInputDispatcher *)-1)
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
            WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v7, a2);
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v8 = *((_QWORD *)this + 35);
  if (v8)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, (WTF::StringImpl *)a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 256, a2);
  *((_QWORD *)this + 28) = off_1E34ABE00;
  v9 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebAutomationSession *)((char *)this + 224));
  v11 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 26);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v13)
    {
      v14 = (_DWORD **)(v12 + 8);
      do
      {
        if (*(v14 - 1) != (_DWORD *)-1)
        {
          v15 = *v14;
          *v14 = 0;
          if (v15)
          {
            if (v15[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[2];
          }
        }
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 16), v10);
  }
  v16 = *((_QWORD *)this + 24);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = (_DWORD **)(v16 + 8);
      do
      {
        if (*(v18 - 1) != (_DWORD *)-1)
        {
          v19 = *v18;
          *v18 = 0;
          if (v19)
          {
            if (v19[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
            else
              --v19[2];
          }
        }
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), v10);
  }
  v20 = *((_QWORD *)this + 22);
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v21)
    {
      v22 = (uint64_t *)(v20 + 8);
      do
      {
        if (*(v22 - 1) != -1)
        {
          v23 = *v22;
          *v22 = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        }
        v22 += 2;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v20 - 16), v10);
  }
  v24 = *((_QWORD *)this + 21);
  if (v24)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v24, v10);
  v25 = *((_QWORD *)this + 20);
  if (v25)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v25, v10);
  v26 = *((_QWORD *)this + 19);
  if (v26)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v26, v10);
  v27 = *((_QWORD *)this + 18);
  if (v27)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v27, v10);
  v28 = *((_QWORD *)this + 17);
  if (v28)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v28, v10);
  v29 = *((_QWORD *)this + 16);
  if (v29)
  {
    v30 = *(unsigned int *)(v29 - 4);
    if ((_DWORD)v30)
    {
      v31 = (WTF::StringImpl **)*((_QWORD *)this + 16);
      do
      {
        v32 = *v31;
        if (*v31 != (WTF::StringImpl *)-1)
        {
          *v31 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v32 -= 2;
          }
        }
        v31 += 3;
        --v30;
      }
      while (v30);
    }
    WTF::fastFree((WTF *)(v29 - 16), v10);
  }
  v33 = *((_QWORD *)this + 15);
  if (v33)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v33, (WTF::StringImpl *)v10);
  v34 = *((_QWORD *)this + 14);
  if (v34)
  {
    v35 = *(unsigned int *)(v34 - 4);
    if ((_DWORD)v35)
    {
      v36 = (WTF::StringImpl **)*((_QWORD *)this + 14);
      do
      {
        v37 = *v36;
        if (*v36 != (WTF::StringImpl *)-1)
        {
          *v36 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v37 -= 2;
          }
        }
        v36 += 2;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree((WTF *)(v34 - 16), v10);
  }
  v38 = *((_QWORD *)this + 13);
  if (v38)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v38, (WTF::StringImpl *)v10);
  v39 = (WTF *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v39)
    WTF::fastFree(v39, v10);
  v40 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v40)
  {
    if (v40[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
    else
      --v40[2];
  }
  v41 = (WTF *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v41)
    WTF::RefCounted<Inspector::BackendDispatcher>::deref(v41, v10);
  v42 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v42)
    WTF::RefCounted<Inspector::FrontendRouter>::deref(v42, v10);
  v43 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v45)
  {
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      WTF::fastFree((WTF *)v45, v10);
    }
  }
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v10);
}

{
  WebKit::WebAutomationSession::~WebAutomationSession(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void `non-virtual thunk to'WebKit::WebAutomationSession::~WebAutomationSession(WebKit::WebAutomationSession *this, void *a2)
{
  WebKit::WebAutomationSession::~WebAutomationSession((WebKit::WebAutomationSession *)((char *)this - 16), a2);
}

{
  WebKit::WebAutomationSession::~WebAutomationSession((WebKit::WebAutomationSession *)((char *)this - 32), a2);
}

{
  WebKit::WebAutomationSession::~WebAutomationSession((WebKit::WebAutomationSession *)((char *)this - 40), a2);
}

{
  WebKit::WebAutomationSession::~WebAutomationSession((WebKit::WebAutomationSession *)((char *)this - 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

{
  WebKit::WebAutomationSession::~WebAutomationSession((WebKit::WebAutomationSession *)((char *)this - 32), a2);
  JUMPOUT(0x19AEB936CLL);
}

{
  WebKit::WebAutomationSession::~WebAutomationSession((WebKit::WebAutomationSession *)((char *)this - 40), a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::WebAutomationSession::setProcessPool(WebKit::WebAutomationSession *this, WebKit::WebProcessPool *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  char v13;

  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      CFRetain(*(CFTypeRef *)(v5 - 8));
      IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(v5 + 40), 0x9Au);
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
  }
  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
    v6 = *((_QWORD *)a2 + 3);
    if (v6)
    {
      do
        v7 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v7 + 1, (unsigned int *)v6));
    }
  }
  else
  {
    v6 = 0;
  }
  v8 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v6;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
    v6 = *((_QWORD *)this + 6);
  }
  if (v6)
  {
    v11 = *(_QWORD *)(v6 + 8);
    if (v11)
    {
      CFRetain(*(CFTypeRef *)(v11 - 8));
      v13 = -102;
      WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(v11 + 40), &v13, (uint64_t)this + 16, &v12);
      CFRelease(*(CFTypeRef *)(v11 - 8));
    }
  }
}

uint64_t WebKit::WebAutomationSession::terminate(WebKit::WebAutomationSession *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  _QWORD *v14;
  BOOL v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t result;
  int v19;
  WTF::StringImpl *v20;
  char v21;
  char v22;
  uint64_t *v23[5];
  WTF *v24;
  uint64_t v25;

  v3 = (uint64_t *)((char *)this + 176);
  v2 = *((_QWORD *)this + 22);
  if (!v2)
  {
    v6 = 0;
    v4 = 0;
LABEL_10:
    v5 = (uint64_t *)(v2 + 16 * v4);
    goto LABEL_11;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = (uint64_t *)(v2 + 16 * v4);
  if (!*(_DWORD *)(v2 - 12))
  {
    v6 = (uint64_t *)(v2 + 16 * v4);
    goto LABEL_10;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 22);
  if ((_DWORD)v4)
  {
    v7 = 16 * v4;
    v6 = (uint64_t *)*((_QWORD *)this + 22);
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      v6 += 2;
      v7 -= 16;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_11:
  if (v2)
  {
    v8 = *(unsigned int *)(v2 - 4);
    v9 = (uint64_t *)(v2 + 16 * v8);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v23[0] = (uint64_t *)((char *)this + 176);
  v23[1] = v6;
  v23[2] = v5;
  v23[3] = v9;
  v23[4] = (uint64_t *)(v2 + 16 * v8);
  v24 = 0;
  v25 = 0;
  WTF::Mapper<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>> const&)::{lambda(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&&)#1},WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>> const&,void>::map((uint64_t)&v24, v23);
  v11 = v24;
  if (HIDWORD(v25))
  {
    v12 = 8 * HIDWORD(v25);
    v13 = v24;
    do
    {
      v14 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3, v13);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::take(v3, v14, v23);
      v19 = 5;
      LOBYTE(v20) = 0;
      v21 = 0;
      v22 = 1;
      WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)v23, &v19);
      if (v22)
        v15 = v21 == 0;
      else
        v15 = 1;
      if (!v15)
      {
        v16 = v20;
        v20 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v10);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
      v17 = v23[0];
      v23[0] = 0;
      if (v17)
        (*(void (**)(uint64_t *))(*v17 + 8))(v17);
      v13 = (WTF *)((char *)v13 + 8);
      v12 -= 8;
    }
    while (v12);
  }
  if (v11)
    WTF::fastFree(v11, v10);
  if (*((_QWORD *)this + 38))
  {
    *((_QWORD *)this + 38) = 0;
    Inspector::FrontendRouter::disconnectFrontend();
  }
  Inspector::RemoteAutomationTarget::setIsPaired(*((Inspector::RemoteAutomationTarget **)this + 39));
  result = *((_QWORD *)this + 7);
  if (result)
    return (*(uint64_t (**)(uint64_t, WebKit::WebAutomationSession *))(*(_QWORD *)result + 24))(result, this);
  return result;
}

uint64_t WebKit::WebAutomationSession::webPageProxyForHandle(uint64_t this, const WTF::String *a2, WTF::StringImpl **a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (uint64_t *)this;
  v4 = *((_QWORD *)a2 + 14);
  if (v4)
  {
    v7 = *(_DWORD *)(v4 - 8);
    v8 = *((_DWORD *)*a3 + 4);
    v9 = v8 >= 0x100 ? v8 >> 8 : WTF::StringImpl::hashSlowCase(*a3);
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v7;
      this = *(_QWORD *)(v4 + 16 * v11);
      if (this != -1)
      {
        if (!this)
        {
          v12 = *((_QWORD *)a2 + 14);
          if (!v12)
            goto LABEL_16;
          v13 = v12 + 16 * *(unsigned int *)(v12 - 4);
          goto LABEL_13;
        }
        this = WTF::equal((WTF *)this, *a3, (const WTF::StringImpl *)a3);
        if ((this & 1) != 0)
          break;
      }
      ++i;
    }
    v13 = v4 + 16 * v11;
    v12 = *((_QWORD *)a2 + 14);
    if (!v12)
      goto LABEL_14;
LABEL_13:
    v12 += 16 * *(unsigned int *)(v12 - 4);
LABEL_14:
    if (v12 != v13)
      return WebKit::WebProcessProxy::webPage(*(_QWORD *)(v13 + 8), v3);
  }
LABEL_16:
  *v3 = 0;
  return this;
}

WTF *WebKit::WebAutomationSession::handleForWebPageProxy@<X0>(WebKit::WebAutomationSession *this@<X0>, const WebKit::WebPageProxy *a2@<X1>, WTF::StringImpl *a3@<X8>)
{
  uint64_t *v6;
  WTF *result;
  WTF *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  const WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  WTF **v39;
  int i;
  unsigned int v41;
  WTF **v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  char v53;
  WTF::StringImpl *v54;

  v6 = (uint64_t *)((char *)this + 104);
  v54 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 4) + 744);
  result = (WTF *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 13, &v54);
  v8 = (WTF *)*((_QWORD *)this + 13);
  if (v8)
    v8 = (WTF *)((char *)v8 + 16 * *((unsigned int *)v8 - 1));
  if (v8 != result)
  {
    v9 = (_DWORD *)*((_QWORD *)result + 1);
    if (v9)
      *v9 += 2;
    *(_QWORD *)a3 = v9;
    return result;
  }
  WTF::createVersion4UUIDString(result);
  if (v54)
  {
    v10 = *((_QWORD *)v54 + 1);
    v11 = *((unsigned int *)v54 + 1) | ((unint64_t)((*((_DWORD *)v54 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v10 = 0;
    v11 = 0x100000000;
  }
  v50 = 0;
  v51 = v10;
  v52 = v11;
  v53 = BYTE4(v11);
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIICaseConverter>((uint64_t)a3, "page-", 6, (uint64_t)&v50);
  if (!*(_QWORD *)a3)
  {
LABEL_67:
    __break(0xC471u);
    JUMPOUT(0x197683BCCLL);
  }
  v13 = v54;
  v54 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
  v15 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, 0), (v15 = *v6) != 0))
  {
    v16 = *(_DWORD *)(v15 - 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = (_QWORD *)(v15 + 16 * v20);
  v22 = *v21;
  if (*v21)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v22 == v14)
      {
        __break(0xC471u);
        JUMPOUT(0x197683BECLL);
      }
      if (v22 == -1)
        v23 = v21;
      v20 = (v20 + v24) & v16;
      v21 = (_QWORD *)(v15 + 16 * v20);
      v22 = *v21;
      ++v24;
    }
    while (*v21);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v21 = v23;
    }
  }
  *v21 = v14;
  WTF::String::operator=((WTF::StringImpl **)v21 + 1, a3);
  v26 = *v6;
  if (*v6)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 <= 0x400)
  {
    if (3 * v31 > 4 * v30)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (v31 <= 2 * v30)
LABEL_33:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v21);
LABEL_34:
  v34 = *((_QWORD *)this + 14);
  v32 = (uint64_t *)((char *)this + 112);
  v33 = v34;
  v35 = *(WTF **)(*((_QWORD *)a2 + 4) + 744);
  if (v34
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v32),
        (v33 = *v32) != 0))
  {
    v36 = *(_DWORD *)(v33 - 8);
  }
  else
  {
    v36 = 0;
  }
  v37 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  if (v37 >= 0x100)
    v38 = v37 >> 8;
  else
    v38 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a3);
  v39 = 0;
  for (i = 1; ; ++i)
  {
    v41 = v38 & v36;
    v42 = (WTF **)(v33 + 16 * (v38 & v36));
    v43 = *v42;
    if (*v42 == (WTF *)-1)
    {
      v39 = (WTF **)(v33 + 16 * v41);
      goto LABEL_46;
    }
    if (!v43)
      break;
    if ((WTF::equal(v43, *(const WTF::StringImpl **)a3, v25) & 1) != 0)
      goto LABEL_67;
LABEL_46:
    v38 = i + v41;
  }
  if (v39)
  {
    *v39 = 0;
    v39[1] = 0;
    --*(_DWORD *)(*v32 - 16);
    v42 = v39;
  }
  result = (WTF *)WTF::String::operator=(v42, a3);
  v42[1] = v35;
  v44 = *v32;
  if (*v32)
    v45 = *(_DWORD *)(v44 - 12) + 1;
  else
    v45 = 1;
  *(_DWORD *)(v44 - 12) = v45;
  v46 = *v32;
  if (*v32)
    v47 = *(_DWORD *)(v46 - 12);
  else
    v47 = 0;
  v48 = (*(_DWORD *)(v46 - 16) + v47);
  v49 = *(unsigned int *)(v46 - 4);
  if (v49 > 0x400)
  {
    if (v49 <= 2 * v48)
      return (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v32);
  }
  else if (3 * v49 <= 4 * v48)
  {
    return (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v32);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::didDestroyFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  v4 = (uint64_t *)(a1 + 120);
  v5 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a1 + 120), v13);
  result = (WTF::StringImpl *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::take(v4, (WTF::StringImpl *)v5, &v12);
  if (!v12)
    return result;
  if (*((_DWORD *)v12 + 1))
  {
    v9 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 128), &v12, v8);
    v7 = (WTF::StringImpl *)v9;
    v10 = *(_QWORD *)(a1 + 128);
    if (v10)
    {
      v11 = (WTF::StringImpl **)(v10 + 24 * *(unsigned int *)(v10 - 4));
      if (v11 == v9)
        goto LABEL_10;
    }
    else
    {
      if (!v9)
        goto LABEL_10;
      v11 = 0;
    }
    if (v11 != v9)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(a1 + 128), v9);
  }
LABEL_10:
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::WebAutomationSession::webFrameIDForHandle(uint64_t this, const WTF::String *a2, WTF::StringImpl **a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v7;

  v4 = this;
  if (*a3 && *((_DWORD *)*a3 + 1))
  {
    this = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)a2 + 16, a3, (const WTF::StringImpl *)a3);
    v7 = *((_QWORD *)a2 + 16);
    if (v7)
      v7 += 24 * *(unsigned int *)(v7 - 4);
    if (v7 != this)
    {
      *(_OWORD *)v4 = *(_OWORD *)(this + 8);
      *(_BYTE *)(v4 + 16) = 1;
      return this;
    }
    *a4 = 1;
  }
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 16) = 0;
  return this;
}

WTF::StringImpl **WebKit::WebAutomationSession::handleForWebFrameID(WTF::StringImpl **result, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  int i;
  unsigned int v24;
  _QWORD *v25;
  WTF *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  char v34;
  int v35;
  uint64_t v36;
  int v37;
  char v38;

  v3 = (WTF::StringImpl *)result;
  if (!*(_BYTE *)(a3 + 16)
    || (result = *(WTF::StringImpl ***)a3) == 0
    || (result = (WTF::StringImpl **)WebKit::WebFrameProxy::webFrame((uint64_t)result, *(_QWORD *)(a3 + 8))) != 0
    && (v6 = result[3]) != 0
    && (v7 = *((_QWORD *)v6 + 1)) != 0
    && (*(WTF::StringImpl ***)(v7 + 264) == result
     || (v8 = *(_QWORD *)(v7 + 1104)) != 0 && *(WTF::StringImpl ***)(v8 + 72) == result))
  {
    v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
    {
LABEL_17:
      *(_QWORD *)v3 = v10;
      return result;
    }
LABEL_16:
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  if (!*(_BYTE *)(a3 + 16))
    goto LABEL_57;
  result = (WTF::StringImpl **)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a2 + 120), (_QWORD *)a3);
  v9 = *(WTF::StringImpl ***)(a2 + 120);
  if (v9)
    v9 += 3 * *((unsigned int *)v9 - 1);
  if (v9 != result)
  {
    v10 = result[2];
    if (!v10)
      goto LABEL_17;
    goto LABEL_16;
  }
  WTF::createVersion4UUIDString((WTF *)result);
  if (v33)
  {
    v11 = *((_QWORD *)v33 + 1);
    v12 = *((unsigned int *)v33 + 1) | ((unint64_t)((*((_DWORD *)v33 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v11 = 0;
    v12 = 0x100000000;
  }
  v35 = 0;
  v36 = v11;
  v37 = v12;
  v38 = BYTE4(v12);
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIICaseConverter>((uint64_t)v3, "frame-", 7, (uint64_t)&v35);
  if (!*(_QWORD *)v3)
  {
    __break(0xC471u);
LABEL_60:
    JUMPOUT(0x197684048);
  }
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (!*(_BYTE *)(a3 + 16))
    goto LABEL_57;
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>((uint64_t *)(a2 + 120), (_QWORD *)a3, v3, (uint64_t)&v33);
  if (!v34)
  {
LABEL_58:
    __break(0xC471u);
    goto LABEL_60;
  }
  if (!*(_BYTE *)(a3 + 16))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v18 = *(_QWORD *)(a2 + 128);
  v16 = (uint64_t *)(a2 + 128);
  v17 = v18;
  if (v18
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v16, 0), (v17 = *v16) != 0))
  {
    v19 = *(_DWORD *)(v17 - 8);
  }
  else
  {
    v19 = 0;
  }
  v20 = *(_DWORD *)(*(_QWORD *)v3 + 16);
  if (v20 >= 0x100)
    v21 = v20 >> 8;
  else
    v21 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v3);
  v22 = 0;
  for (i = 1; ; ++i)
  {
    v24 = v21 & v19;
    v25 = (_QWORD *)(v17 + 24 * (v21 & v19));
    v26 = (WTF *)*v25;
    if (*v25 == -1)
    {
      v22 = (_QWORD *)(v17 + 24 * v24);
      goto LABEL_41;
    }
    if (!v26)
      break;
    if ((WTF::equal(v26, *(const WTF::StringImpl **)v3, v15) & 1) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197684068);
    }
LABEL_41:
    v21 = i + v24;
  }
  if (v22)
  {
    *v22 = 0;
    v22[1] = 0;
    v22[2] = 0;
    --*(_DWORD *)(*v16 - 16);
    v25 = v22;
  }
  result = WTF::String::operator=((WTF::StringImpl **)v25, v3);
  *(_OWORD *)(v25 + 1) = *(_OWORD *)a3;
  v27 = *v16;
  if (*v16)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *v16;
  if (*v16)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 <= 2 * v31)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v16, (WTF::StringImpl **)v25);
  }
  else if (3 * v32 <= 4 * v31)
  {
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v16, (WTF::StringImpl **)v25);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::buildBrowsingContextForPage(WTF::JSONImpl::Object *a1, WebKit::WebAutomationSession *a2, const WebKit::WebPageProxy *a3, float a4, float a5, float a6, float a7)
{
  uint64_t *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int16 v17;
  WTF *v18;
  uint64_t v19;
  const WTF::String *v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  const WTF::String *v38;
  WTF::StringImpl *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  _DWORD *v64;
  WTF::StringImpl *result;
  WTF::StringImpl *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71[2];
  char v72;

  WTF::JSONImpl::Object::create(a1);
  Inspector::Protocol::Automation::Point::Builder<0>::setX(v71, a4);
  v14 = Inspector::Protocol::Automation::Point::Builder<1>::setY(v71, a5);
  v15 = (WTF::StringImpl *)v71[0];
  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v14);
  Inspector::Protocol::Automation::Size::Builder<0>::setWidth(v71, a6);
  Inspector::Protocol::Automation::Size::Builder<1>::setHeight(v71, a7);
  v16 = (WTF::StringImpl *)v71[0];
  v17 = *(_WORD *)(*((_QWORD *)a3 + 4) + 48);
  v18 = WebKit::WebAutomationSession::handleForWebPageProxy(a2, a3, (WTF::StringImpl *)&v68);
  WTF::JSONImpl::Object::create(v18);
  v19 = v67;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v68, v20);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v67 + 16), &v69, (const WTF::StringImpl *)&v70, (uint64_t)v71);
  if (v72)
  {
    v22 = (uint64_t *)(v67 + 24);
    v23 = *(unsigned int *)(v67 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v67 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v22, (unint64_t)&v69);
    }
    else
    {
      v24 = *v22;
      v25 = v69;
      if (v69)
        *(_DWORD *)v69 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
      *(_DWORD *)(v19 + 36) = v23 + 1;
    }
  }
  v26 = v70;
  v70 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v26;
  }
  v27 = v17 & 7;
  v28 = v69;
  v69 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v21);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = v67;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v27 == 7));
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v67 + 16), &v69, (const WTF::StringImpl *)&v70, (uint64_t)v71);
  if (v72)
  {
    v31 = (uint64_t *)(v67 + 24);
    v32 = *(unsigned int *)(v67 + 36);
    if ((_DWORD)v32 == *(_DWORD *)(v67 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v31, (unint64_t)&v69);
    }
    else
    {
      v33 = *v31;
      v34 = v69;
      if (v69)
        *(_DWORD *)v69 += 2;
      *(_QWORD *)(v33 + 8 * v32) = v34;
      *(_DWORD *)(v29 + 36) = v32 + 1;
    }
  }
  v35 = v70;
  v70 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v35;
  }
  v36 = v69;
  v69 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v30);
    else
      *(_DWORD *)v36 -= 2;
  }
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*((_QWORD *)a3 + 4) + 968), &v66);
  v37 = v67;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v66, v38);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v37 + 16), &v69, (const WTF::StringImpl *)&v70, (uint64_t)v71);
  if (v72)
  {
    v40 = (uint64_t *)(v37 + 24);
    v41 = *(unsigned int *)(v37 + 36);
    if ((_DWORD)v41 == *(_DWORD *)(v37 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v40, (unint64_t)&v69);
    }
    else
    {
      v42 = *v40;
      v43 = v69;
      if (v69)
        *(_DWORD *)v69 += 2;
      *(_QWORD *)(v42 + 8 * v41) = v43;
      *(_DWORD *)(v37 + 36) = v41 + 1;
    }
  }
  v44 = v70;
  v70 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v44;
  }
  v45 = v69;
  v69 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v39);
    else
      *(_DWORD *)v45 -= 2;
  }
  v46 = v67;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v69 = v15;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v46 + 16), &v70, (const WTF::StringImpl *)&v69, (uint64_t)v71);
  if (v72)
  {
    v48 = (uint64_t *)(v46 + 24);
    v49 = *(unsigned int *)(v46 + 36);
    if ((_DWORD)v49 == *(_DWORD *)(v46 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v48, (unint64_t)&v70);
    }
    else
    {
      v50 = *v48;
      v51 = v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      *(_QWORD *)(v50 + 8 * v49) = v51;
      *(_DWORD *)(v46 + 36) = v49 + 1;
    }
  }
  v52 = v69;
  v69 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v52;
  }
  v53 = v70;
  v70 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v47);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = v67;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v69 = v16;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v54 + 16), &v70, (const WTF::StringImpl *)&v69, (uint64_t)v71);
  if (v72)
  {
    v56 = (uint64_t *)(v54 + 24);
    v57 = *(unsigned int *)(v54 + 36);
    if ((_DWORD)v57 == *(_DWORD *)(v54 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v56, (unint64_t)&v70);
    }
    else
    {
      v58 = *v56;
      v59 = v70;
      if (v70)
        *(_DWORD *)v70 += 2;
      *(_QWORD *)(v58 + 8 * v57) = v59;
      *(_DWORD *)(v54 + 36) = v57 + 1;
    }
  }
  v60 = v69;
  v69 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v60;
  }
  v61 = v70;
  v70 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, v55);
    else
      *(_DWORD *)v61 -= 2;
  }
  v62 = v66;
  v63 = v67;
  v66 = 0;
  v67 = 0;
  *(_QWORD *)a1 = v63;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v55);
    else
      *(_DWORD *)v62 -= 2;
    v64 = (_DWORD *)v67;
    v67 = 0;
    if (v64)
    {
      if (*v64 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v64;
    }
  }
  result = v68;
  v68 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v55);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *Inspector::Protocol::Automation::Point::Builder<0>::setX(uint64_t *a1, double a2)
{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  _DWORD *v15;
  _BYTE v16[24];

  v4 = *a1;
  v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v5, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v4 + 16), &v14, (const WTF::StringImpl *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v7, (unint64_t)&v14);
    }
    else
    {
      v9 = *v7;
      v10 = v14;
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
      *(_DWORD *)(v4 + 36) = v8 + 1;
    }
  }
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::Automation::Point::Builder<1>::setY(uint64_t *a1, double a2)
{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  _DWORD *v15;
  _BYTE v16[24];

  v4 = *a1;
  v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v5, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v4 + 16), &v14, (const WTF::StringImpl *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v7, (unint64_t)&v14);
    }
    else
    {
      v9 = *v7;
      v10 = v14;
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
      *(_DWORD *)(v4 + 36) = v8 + 1;
    }
  }
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::Automation::Size::Builder<0>::setWidth(uint64_t *a1, double a2)
{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  _DWORD *v15;
  _BYTE v16[24];

  v4 = *a1;
  v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v5, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v4 + 16), &v14, (const WTF::StringImpl *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v7, (unint64_t)&v14);
    }
    else
    {
      v9 = *v7;
      v10 = v14;
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
      *(_DWORD *)(v4 + 36) = v8 + 1;
    }
  }
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

uint64_t *Inspector::Protocol::Automation::Size::Builder<1>::setHeight(uint64_t *a1, double a2)
{
  uint64_t v4;
  WTF::JSONImpl::Value *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  _DWORD *v15;
  _BYTE v16[24];

  v4 = *a1;
  v5 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v5, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v4 + 16), &v14, (const WTF::StringImpl *)&v15, (uint64_t)v16);
  if (v16[16])
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v7, (unint64_t)&v14);
    }
    else
    {
      v9 = *v7;
      v10 = v14;
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
      *(_DWORD *)(v4 + 36) = v8 + 1;
    }
  }
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  return a1;
}

void WebKit::WebAutomationSession::getNextContext(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, WTF::JSONImpl::Object **a5)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::JSONImpl::Object *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v7 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v7)
  {
    v11 = v7 - 1;
    v12 = *(_QWORD *)(*a3 + 8 * (v7 - 1));
    *(_QWORD *)(*a3 + 8 * (v7 - 1)) = 0;
    v13 = *(_QWORD *)(*a3 + 8 * (v7 - 1));
    *(_QWORD *)(*a3 + 8 * v11) = 0;
    if (v13)
      CFRelease(*(CFTypeRef *)(v13 + 8));
    *((_DWORD *)a3 + 3) = v11;
    CFRetain(*(CFTypeRef *)(v12 + 8));
    v14 = *a2;
    *a2 = 0;
    v15 = *a5;
    *a5 = 0;
    v16 = *a3;
    *a3 = 0;
    v17 = *a4;
    *a4 = 0;
    v22 = v17;
    v23 = v12;
    v18 = a3[1];
    a3[1] = 0;
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
    *v19 = off_1E34F3D28;
    v19[1] = a1;
    v19[2] = v14;
    v19[3] = v15;
    v21[0] = 0;
    v19[4] = v16;
    v21[1] = 0;
    v19[5] = v18;
    v19[6] = v17;
    v19[7] = v12;
    v24 = v19;
    WebKit::WebPageProxy::getWindowFrameWithCallback(v12, (uint64_t *)&v24);
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
    v22 = 0;
    v23 = 0;
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v20);
    CFRelease(*(CFTypeRef *)(v12 + 8));
  }
  else
  {
    Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextsCallback::sendSuccess(*a5, a4);
  }
}

uint64_t WebKit::WebAutomationSession::getBrowsingContexts(uint64_t a1, WTF::JSONImpl::Object **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::WebProcessProxy **v8;
  uint64_t v9;
  WebKit::WebProcessProxy *v10;
  unsigned int *v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::JSONImpl::ArrayBase *v21;
  void *v22;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  v28 = 0;
  v29 = 0;
  v4 = *(_QWORD *)(a1 + 48);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    v6 = v5 + 56;
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  else
  {
    v6 = 72;
  }
  v7 = *(unsigned int *)(v6 + 12);
  if ((_DWORD)v7)
  {
    v8 = *(WebKit::WebProcessProxy ***)v6;
    v9 = *(_QWORD *)v6 + 8 * v7;
    while (1)
    {
      v10 = *v8;
      v11 = (unsigned int *)((char *)*v8 + 16);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      WebKit::WebProcessProxy::pages(v10, (uint64_t)&v26);
      if (v27)
        break;
LABEL_19:
      WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v13);
      if (v10)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
      if (++v8 == (WebKit::WebProcessProxy **)v9)
        goto LABEL_22;
    }
    v14 = v26;
    v15 = 8 * v27;
    while (1)
    {
      v16 = *(_QWORD *)v14;
      CFRetain(*(CFTypeRef *)(*(_QWORD *)v14 + 8));
      v25 = v16;
      if (*(_BYTE *)(v16 + 826))
      {
        LODWORD(v17) = HIDWORD(v29);
        if (HIDWORD(v29) == (_DWORD)v29)
        {
          v18 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v28, HIDWORD(v29) + 1, (unint64_t)&v25);
          v17 = HIDWORD(v29);
          v19 = v28;
          v20 = *v18;
          *v18 = 0;
          *(_QWORD *)(v19 + 8 * v17) = v20;
        }
        else
        {
          v25 = 0;
          *(_QWORD *)(v28 + 8 * HIDWORD(v29)) = v16;
        }
        HIDWORD(v29) = v17 + 1;
        v16 = v25;
        v25 = 0;
        if (!v16)
          goto LABEL_18;
      }
      else
      {
        v25 = 0;
      }
      CFRelease(*(CFTypeRef *)(v16 + 8));
LABEL_18:
      v14 += 8;
      v15 -= 8;
      if (!v15)
        goto LABEL_19;
    }
  }
LABEL_22:
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v26 = a1;
  v21 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  v24 = (_DWORD *)WTF::JSONImpl::ArrayBase::ArrayBase(v21);
  WebKit::WebAutomationSession::getNextContext(a1, &v26, &v28, (uint64_t *)&v24, a2);
  if (v24)
  {
    if (*v24 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v24;
  }
  if (v26)
    CFRelease(*(CFTypeRef *)(v26 + 8));
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v22);
}

uint64_t `non-virtual thunk to'WebKit::WebAutomationSession::getBrowsingContexts(uint64_t a1, WTF::JSONImpl::Object **a2)
{
  return WebKit::WebAutomationSession::getBrowsingContexts(a1 - 32, a2);
}

void WebKit::WebAutomationSession::getBrowsingContext(CFTypeRef *a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  uint64_t v5;
  Inspector::BackendDispatcher::CallbackBase *v6;
  WTF::StringImpl *v7;
  Inspector::BackendDispatcher::CallbackBase *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v12, (const WTF::String *)a1, a2);
  v5 = v12;
  if (v12)
  {
    CFRetain(a1[1]);
    CFRetain(*(CFTypeRef *)(v5 + 8));
    v6 = *a3;
    *a3 = 0;
    v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v7 = &off_1E34F3D50;
    *((_QWORD *)v7 + 1) = a1;
    *((_QWORD *)v7 + 2) = v5;
    *((_QWORD *)v7 + 3) = v6;
    v11 = v7;
    WebKit::WebPageProxy::getWindowFrameWithCallback(v5, (uint64_t *)&v11);
    if (v11)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 8))(v11);
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  else
  {
    v8 = *a3;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v11);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v8, (const WTF::String *)&v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::getBrowsingContext(uint64_t a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  WebKit::WebAutomationSession::getBrowsingContext((CFTypeRef *)(a1 - 32), a2, a3);
}

WTF::StringImpl *WebKit::WebAutomationSession::createBrowsingContext(uint64_t a1, uint64_t a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  uint64_t v4;
  BOOL v6;
  uint64_t v7;
  Inspector::BackendDispatcher::CallbackBase *v8;
  _QWORD *v9;
  WTF::StringImpl *result;
  Inspector::BackendDispatcher::CallbackBase *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v17[2];

  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (*(_BYTE *)(a2 + 4))
      v6 = *(_DWORD *)a2 == 4;
    else
      v6 = 0;
    v7 = v6;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v8 = *a3;
    *a3 = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = &off_1E34F3D78;
    v9[1] = a1;
    v9[2] = v8;
    v17[0] = (uint64_t)v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v4 + 32))(v4, a1, v7, v17);
    result = (WTF::StringImpl *)v17[0];
    v17[0] = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v11 = *a3;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v14);
    v17[0] = (uint64_t)"The remote session could not request a new browsing context.";
    v17[1] = 61;
    v16 = 59;
    result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v14, &v16, v17, &v15);
    if (v15)
    {
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v11, (const WTF::String *)&v15);
      v13 = v15;
      v15 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::WebAutomationSession::createBrowsingContext(uint64_t a1, uint64_t a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  return WebKit::WebAutomationSession::createBrowsingContext(a1 - 32, a2, a3);
}

void WebKit::WebAutomationSession::closeBrowsingContext(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WebKit::WebPageProxy *v4;
  char v5;
  WebKit::WebPageProxy *v6;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v6, this, a2);
  v4 = v6;
  if (v6)
  {
    WebKit::WebPageProxy::closePage((uint64_t)v6);
    *(_BYTE *)a3 = 0;
    CFRelease(*((CFTypeRef *)v4 + 1));
    v5 = 0;
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, (_QWORD *)a3);
    v5 = 1;
  }
  *(_BYTE *)(a3 + 8) = v5;
}

void `non-virtual thunk to'WebKit::WebAutomationSession::closeBrowsingContext(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WebKit::WebAutomationSession::closeBrowsingContext((WebKit::WebAutomationSession *)((char *)this - 32), a2, a3);
}

void WebKit::WebAutomationSession::switchToBrowsingContext(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  uint64_t v7;
  Inspector::BackendDispatcher::CallbackBase *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  Inspector::BackendDispatcher::CallbackBase *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  Inspector::BackendDispatcher::CallbackBase *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[3];
  char v19;
  uint64_t v20;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v20, a1, a2);
  v7 = v20;
  if (v20)
  {
    v19 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)v18, a1, a3, &v19);
    if (v19)
    {
      v8 = *a4;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, v18);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v8, (const WTF::String *)v18);
      v10 = v18[0];
      v18[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      v14 = *((_QWORD *)a1 + 7);
      CFRetain(*(CFTypeRef *)(v7 + 8));
      v15 = *a4;
      *a4 = 0;
      v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v16 = &off_1E34F3DA0;
      *((_QWORD *)v16 + 1) = v7;
      *((_QWORD *)v16 + 2) = v15;
      v18[0] = v16;
      (*(void (**)(uint64_t, WTF::String *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 64))(v14, a1, v7, v18);
      v17 = v18[0];
      v18[0] = 0;
      if (v17)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v17 + 8))(v17);
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  else
  {
    v11 = *a4;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, v18);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v11, (const WTF::String *)v18);
    v13 = v18[0];
    v18[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::switchToBrowsingContext(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  WebKit::WebAutomationSession::switchToBrowsingContext((WTF::String *)(a1 - 32), a2, a3, a4);
}

void WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(CFTypeRef *a1, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3, WTF::JSONImpl::ObjectBase **a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
  WTF::JSONImpl::ObjectBase *v9;
  WTF::StringImpl *v11;
  uint64_t Double;
  WTF::StringImpl *v13;
  char v14;
  uint64_t v15;
  WTF::JSONImpl::ObjectBase *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  Inspector::BackendDispatcher::CallbackBase *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::JSONImpl::ObjectBase *v22;
  WTF::StringImpl *v23;
  double v24;
  char v25;
  WTF::StringImpl *v26;
  char v27;
  double v28;
  double v29;
  uint64_t v30;
  Inspector::BackendDispatcher::CallbackBase *v31;
  uint64_t v32;
  Inspector::BackendDispatcher::CallbackBase *v33;
  WTF::StringImpl *v34;
  WTF::JSONImpl::ObjectBase *v35;
  WTF::StringImpl *v36;
  double v37;
  WTF::StringImpl *v38;
  Inspector::BackendDispatcher::CallbackBase *v39;
  WTF::StringImpl *v40;
  Inspector::BackendDispatcher::CallbackBase *v41;
  WTF::StringImpl *v42;
  Inspector::BackendDispatcher::CallbackBase *v43;
  WTF::StringImpl *v44;
  Inspector::BackendDispatcher::CallbackBase *v45;
  WTF::StringImpl *v46;
  Inspector::BackendDispatcher::CallbackBase *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl **v49;
  unint64_t v50;
  unint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  char v59;
  char *v60;
  uint64_t v61;

  v9 = *a3;
  if (*a3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v58 = (WTF::StringImpl *)v60;
    Double = WTF::JSONImpl::ObjectBase::getDouble(v9, (const WTF::String *)&v58);
    LOBYTE(v9) = (_BYTE)v11;
    v13 = v58;
    v58 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (!(_BYTE)v9)
    {
      v19 = *a5;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v57);
      v60 = "The 'x' parameter was not found or invalid.";
      v61 = 44;
      v59 = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v57, &v59, (uint64_t *)&v60, &v58);
      if (v58)
      {
        Inspector::BackendDispatcher::CallbackBase::sendFailure(v19, (const WTF::String *)&v58);
        v21 = v58;
        v58 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v20);
          else
            *(_DWORD *)v21 -= 2;
        }
        v42 = v57;
        v57 = 0;
        if (v42)
          goto LABEL_76;
        return;
      }
      __break(0xC471u);
LABEL_86:
      JUMPOUT(0x1976857A0);
    }
    v16 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v58 = (WTF::StringImpl *)v60;
    v15 = WTF::JSONImpl::ObjectBase::getDouble(v16, (const WTF::String *)&v58);
    v14 = (char)v17;
    v18 = v58;
    v58 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (!v14)
    {
      v33 = *a5;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v56);
      v60 = "The 'y' parameter was not found or invalid.";
      v61 = 44;
      v59 = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v56, &v59, (uint64_t *)&v60, &v58);
      if (!v58)
      {
        __break(0xC471u);
        JUMPOUT(0x1976857A8);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v33, (const WTF::String *)&v58);
      v34 = v58;
      v58 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v20);
        else
          *(_DWORD *)v34 -= 2;
      }
      v42 = v56;
      v56 = 0;
      if (v42)
        goto LABEL_76;
      return;
    }
    v50 = Double & 0xFFFFFFFFFFFFFF00;
    v51 = v15 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    v14 = 0;
    LOBYTE(v15) = 0;
    v50 = 0;
    v51 = 0;
    LOBYTE(Double) = 0;
  }
  v22 = *a4;
  if (!*a4)
  {
    v25 = 0;
    v27 = 0;
    v28 = 0.0;
    v29 = 0.0;
LABEL_23:
    WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v60, (const WTF::String *)a1, a2);
    v30 = (uint64_t)v60;
    if (!v60)
    {
      v41 = *a5;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v58);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v41, (const WTF::String *)&v58);
      v42 = v58;
      v58 = 0;
      if (!v42)
        return;
      goto LABEL_76;
    }
    CFRetain(a1[1]);
    v31 = *a5;
    *a5 = 0;
    CFRetain(*(CFTypeRef *)(v30 + 8));
    v32 = WTF::fastMalloc((WTF *)0x68);
    *(_QWORD *)v32 = &off_1E34F3DC8;
    *(_QWORD *)(v32 + 8) = a1;
    *(_QWORD *)(v32 + 16) = a1;
    *(_QWORD *)(v32 + 24) = v31;
    *(_QWORD *)(v32 + 32) = v30;
    *(double *)(v32 + 40) = v28;
    *(_BYTE *)(v32 + 48) = v25;
    *(double *)(v32 + 56) = v29;
    *(_BYTE *)(v32 + 64) = v27;
    *(_QWORD *)(v32 + 72) = v50 | Double;
    *(_BYTE *)(v32 + 80) = (_BYTE)v9;
    *(_QWORD *)(v32 + 88) = v51 | v15;
    *(_BYTE *)(v32 + 96) = v14;
    v58 = (WTF::StringImpl *)v32;
    WebKit::WebAutomationSession::exitFullscreenWindowForPage((uint64_t)a1, v30, (uint64_t *)&v58);
    if (v58)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v58 + 8))(v58);
    CFRelease(*(CFTypeRef *)(v30 + 8));
    return;
  }
  v49 = a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v58 = (WTF::StringImpl *)v60;
  v24 = COERCE_DOUBLE(WTF::JSONImpl::ObjectBase::getDouble(v22, (const WTF::String *)&v58));
  v25 = (char)v23;
  v26 = v58;
  v58 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v23);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (!v25)
  {
    v39 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v55);
    v60 = "The 'width' parameter was not found or invalid.";
    v61 = 48;
    v59 = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v55, &v59, (uint64_t *)&v60, &v58);
    if (!v58)
    {
      __break(0xC471u);
      JUMPOUT(0x1976857B0);
    }
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v39, (const WTF::String *)&v58);
    v40 = v58;
    v58 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v20);
      else
        *(_DWORD *)v40 -= 2;
    }
    v42 = v55;
    v55 = 0;
    if (v42)
      goto LABEL_76;
    return;
  }
  v35 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v58 = (WTF::StringImpl *)v60;
  v37 = COERCE_DOUBLE(WTF::JSONImpl::ObjectBase::getDouble(v35, (const WTF::String *)&v58));
  v27 = (char)v36;
  v38 = v58;
  v58 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v36);
    else
      *(_DWORD *)v38 -= 2;
  }
  if (!v27)
  {
    v45 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v54);
    v60 = "The 'height' parameter was not found or invalid.";
    v61 = 49;
    v59 = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v54, &v59, (uint64_t *)&v60, &v58);
    if (!v58)
    {
      __break(0xC471u);
      JUMPOUT(0x1976857B8);
    }
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v45, (const WTF::String *)&v58);
    v46 = v58;
    v58 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v20);
      else
        *(_DWORD *)v46 -= 2;
    }
    v42 = v54;
    v54 = 0;
    if (v42)
      goto LABEL_76;
    return;
  }
  v28 = v24;
  if (v24 < 0.0)
  {
    v43 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v53);
    v60 = "The 'width' parameter had an invalid value.";
    v61 = 44;
    v59 = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v53, &v59, (uint64_t *)&v60, &v58);
    if (!v58)
    {
      __break(0xC471u);
      JUMPOUT(0x1976857C0);
    }
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v43, (const WTF::String *)&v58);
    v44 = v58;
    v58 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v20);
      else
        *(_DWORD *)v44 -= 2;
    }
    v42 = v53;
    v53 = 0;
    if (!v42)
      return;
LABEL_76:
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v20);
    else
      *(_DWORD *)v42 -= 2;
    return;
  }
  v29 = v37;
  if (v37 >= 0.0)
  {
    a2 = v49;
    goto LABEL_23;
  }
  v47 = *a5;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v52);
  v60 = "The 'height' parameter had an invalid value.";
  v61 = 45;
  v59 = 59;
  WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v52, &v59, (uint64_t *)&v60, &v58);
  if (!v58)
  {
    __break(0xC471u);
    goto LABEL_86;
  }
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v47, (const WTF::String *)&v58);
  v48 = v58;
  v58 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v20);
    else
      *(_DWORD *)v48 -= 2;
  }
  v42 = v52;
  v52 = 0;
  if (v42)
    goto LABEL_76;
}

uint64_t WebKit::WebAutomationSession::exitFullscreenWindowForPage(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 360);
  if (v4 && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 24))(*(_QWORD *)(v4 + 32)) & 1) != 0)
  {
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v7 = *a3;
    *a3 = 0;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v8 = &off_1E34F3F08;
    v8[1] = a1;
    v8[2] = a1;
    v8[3] = v7;
    v9 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return WebKit::WebFullScreenManagerProxy::requestExitFullScreen(*(WebKit::WebFullScreenManagerProxy **)(a2 + 360));
  }
  else
  {
    v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(uint64_t a1, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3, WTF::JSONImpl::ObjectBase **a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
  WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext((CFTypeRef *)(a1 - 32), a2, a3, a4, a5);
}

void WebKit::WebAutomationSession::waitForNavigationToComplete(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **a6)
{
  uint64_t v10;
  int v11;
  Inspector::BackendDispatcher::CallbackBase *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char v16;
  Inspector::BackendDispatcher::CallbackBase *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::JSONImpl::Object *v23;
  Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback *v24;
  uint64_t *v25;
  WTF::StringImpl *v26;
  WTF::JSONImpl::Object *v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback *v31;
  uint64_t v32[2];
  char v33;
  char v34;
  uint64_t v35;
  WTF::StringImpl *v36[3];
  __int128 v37;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v35, a1, a2);
  v10 = v35;
  if (v35)
  {
    if (*(_BYTE *)(a4 + 4))
      v11 = *(_DWORD *)a4;
    else
      v11 = 26;
    if (v11 == 26 && ((v15 = *(_QWORD *)(v35 + 32), *(_QWORD *)(v15 + 984)) || *(unsigned __int8 *)(v15 + 968) <= 1u))
      v16 = (*(uint64_t (**)(_QWORD, WTF::String *, uint64_t))(**((_QWORD **)a1 + 7) + 72))(*((_QWORD *)a1 + 7), a1, v35);
    else
      v16 = 0;
    if (!*a3 || !*((_DWORD *)*a3 + 1))
    {
      if ((v16 & 1) == 0)
      {
        v20 = *a6;
        *a6 = 0;
        v36[0] = v20;
        WebKit::WebAutomationSession::waitForNavigationToCompleteOnPage(a1, v10, v11, (uint64_t *)v36);
        if (v36[0])
        {
          if (*((_DWORD *)v36[0] + 2) == 1)
            (*(void (**)(void))(*(_QWORD *)v36[0] + 8))();
          else
            --*((_DWORD *)v36[0] + 2);
        }
        goto LABEL_47;
      }
      goto LABEL_28;
    }
    v34 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)v32, a1, a3, &v34);
    if (v34)
      goto LABEL_16;
    if (!v33)
    {
      v27 = (WTF::JSONImpl::Object *)std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::WebAutomationSession::waitForNavigationToCompleteOnPage(v27, v28, v29, v30);
      return;
    }
    v21 = WebKit::WebFrameProxy::webFrame(v32[0], v32[1]);
    if (!v21)
    {
LABEL_16:
      v17 = *a6;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, v36);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v17, (const WTF::String *)v36);
      v19 = v36[0];
      v36[0] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
      goto LABEL_47;
    }
    v22 = v21;
    v23 = (WTF::JSONImpl::Object *)CFRetain(*(CFTypeRef *)(v21 + 8));
    if ((v16 & 1) != 0)
    {
      CFRelease(*(CFTypeRef *)(v22 + 8));
LABEL_28:
      Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*a6);
LABEL_47:
      CFRelease(*(CFTypeRef *)(v10 + 8));
      return;
    }
    v24 = *a6;
    *a6 = 0;
    v31 = v24;
    if (v11 == 24 || *(_DWORD *)(v22 + 40) == 2)
    {
      WTF::JSONImpl::Object::create(v23);
      Inspector::BackendDispatcher::CallbackBase::sendSuccess();
      v26 = v36[0];
      v36[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v26;
      }
      goto LABEL_42;
    }
    WTF::RunLoop::TimerBase::start();
    if (v11 == 25)
    {
      v25 = (uint64_t *)((char *)a1 + 160);
    }
    else
    {
      if (v11 != 26)
      {
LABEL_42:
        if (v31)
        {
          if (*((_DWORD *)v31 + 2) == 1)
            (*(void (**)(void))(*(_QWORD *)v31 + 8))();
          else
            --*((_DWORD *)v31 + 2);
        }
        CFRelease(*(CFTypeRef *)(v22 + 8));
        goto LABEL_47;
      }
      v25 = (uint64_t *)((char *)a1 + 152);
    }
    v37 = *(_OWORD *)(v22 + 272);
    WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>((uint64_t)v36, v25, &v37, (uint64_t *)&v31);
    goto LABEL_42;
  }
  v12 = *a6;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, v36);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v12, (const WTF::String *)v36);
  v14 = v36[0];
  v36[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
}

uint64_t *WebKit::WebAutomationSession::waitForNavigationToCompleteOnPage(WTF::JSONImpl::Object *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  if (a3 != 24
    && ((v9 = *(_QWORD *)(a2 + 32), *(_QWORD *)(v9 + 984))
     || *(unsigned __int8 *)(v9 + 968) < 2u
     || *(_QWORD *)(v9 + 1152)
     || *(unsigned __int8 *)(v9 + 1136) < 2u))
  {
    result = (uint64_t *)WTF::RunLoop::TimerBase::start();
    if (a3 == 25)
    {
      v10 = (uint64_t *)((char *)a1 + 144);
    }
    else
    {
      if (a3 != 26)
        return result;
      v10 = (uint64_t *)((char *)a1 + 136);
    }
    v12 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 744);
    return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>((uint64_t)&v11, v10, &v12, a4);
  }
  else
  {
    WTF::JSONImpl::Object::create(a1);
    Inspector::BackendDispatcher::CallbackBase::sendSuccess();
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (uint64_t *)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

void `non-virtual thunk to'WebKit::WebAutomationSession::waitForNavigationToComplete(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **a6)
{
  WebKit::WebAutomationSession::waitForNavigationToComplete((WTF::String *)(a1 - 32), a2, a3, a4, a5, a6);
}

WTF::StringImpl *WebKit::WebAutomationSession::respondToPendingPageNavigationCallbacksWithTimeout(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  WTF::JSONImpl::Object *v22;
  _DWORD *v23;
  Inspector::BackendDispatcher::CallbackBase *v24;
  _DWORD *v25;
  Inspector::BackendDispatcher::CallbackBase *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  result = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::getEnumConstantValue(6, &v29);
  v6 = *a2;
  if (!*a2)
  {
    v9 = 0;
    v7 = 0;
    goto LABEL_14;
  }
  v7 = *(unsigned int *)(v6 - 4);
  v8 = (_QWORD *)(v6 + 16 * v7);
  if (!*(_DWORD *)(v6 - 12))
  {
    v9 = (_QWORD *)(v6 + 16 * v7);
LABEL_14:
    v8 = (_QWORD *)(v6 + 16 * v7);
    if (v6)
      goto LABEL_9;
LABEL_15:
    v11 = 0;
    goto LABEL_16;
  }
  v9 = (_QWORD *)*a2;
  if ((_DWORD)v7)
  {
    v10 = 16 * v7;
    v9 = (_QWORD *)*a2;
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      v9 += 2;
      v10 -= 16;
      if (!v10)
      {
        v9 = v8;
        break;
      }
    }
  }
  if (!v6)
    goto LABEL_15;
LABEL_9:
  v11 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  v12 = *(unsigned int *)(v6 - 12);
  if (!(_DWORD)v12)
  {
LABEL_16:
    v13 = 0;
    goto LABEL_17;
  }
  if (v12 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v13 = (WTF *)WTF::fastMalloc((WTF *)(8 * v12));
LABEL_17:
  if (v11 != v9)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      v16 = v15;
      v17 = v9 + 2;
      *((_QWORD *)v13 + v14) = *v9;
      v9 = v8;
      if (v17 != v8)
      {
        v9 = v17;
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          if (v9 == v8)
          {
            v9 = v8;
            break;
          }
        }
      }
      ++v14;
      v15 = v16 + 1;
    }
    while (v9 != v11);
    if (v14)
    {
      v18 = 8 * v16;
      v19 = (uint64_t *)v13;
      do
      {
        v28 = *v19;
        WebKit::WebProcessProxy::webPage(v28, &v27);
        v20 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2, &v28);
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(a2, v20, &v26);
        v21 = v27;
        if (v27
          && (v22 = (WTF::JSONImpl::Object *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 56)
                                                                                                 + 72))(*(_QWORD *)(a1 + 56), a1, v27), (_DWORD)v22))
        {
          WTF::JSONImpl::Object::create(v22);
          Inspector::BackendDispatcher::CallbackBase::sendSuccess();
          v23 = v25;
          v25 = 0;
          if (v23)
          {
            if (*v23 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v23;
          }
        }
        else
        {
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v26, (const WTF::String *)&v29);
        }
        v24 = v26;
        v26 = 0;
        if (v24)
        {
          if (*((_DWORD *)v24 + 2) == 1)
          {
            (*(void (**)(Inspector::BackendDispatcher::CallbackBase *))(*(_QWORD *)v24 + 8))(v24);
            if (!v21)
              goto LABEL_38;
LABEL_37:
            CFRelease(*(CFTypeRef *)(v21 + 8));
            goto LABEL_38;
          }
          --*((_DWORD *)v24 + 2);
        }
        if (v21)
          goto LABEL_37;
LABEL_38:
        ++v19;
        v18 -= 8;
      }
      while (v18);
    }
  }
  if (v13)
    WTF::fastFree(v13, v5);
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::respondToPendingFrameNavigationCallbacksWithTimeout(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  WTF::JSONImpl::Object *v31;
  Inspector::BackendDispatcher::CallbackBase *v32;
  _DWORD *v33;
  _DWORD *v34;
  Inspector::BackendDispatcher::CallbackBase *v35;
  __int128 v36;
  WTF::StringImpl *v37;

  result = (WTF::StringImpl *)Inspector::Protocol::AutomationHelpers::getEnumConstantValue(6, &v37);
  v6 = *a2;
  if (!*a2)
  {
    v9 = 0;
    LODWORD(v7) = 0;
    goto LABEL_18;
  }
  v7 = *(unsigned int *)(v6 - 4);
  v8 = v6 + 24 * v7;
  if (!*(_DWORD *)(v6 - 12))
  {
    v9 = v6 + 24 * v7;
LABEL_18:
    v8 = v6 + 24 * v7;
    if (v6)
      goto LABEL_13;
LABEL_19:
    v12 = 0;
    goto LABEL_20;
  }
  v9 = *a2;
  if ((_DWORD)v7)
  {
    v10 = 24 * v7;
    v9 = *a2;
    while (*(_OWORD *)v9 == 0 || *(_QWORD *)(v9 + 8) == -1)
    {
      v9 += 24;
      v10 -= 24;
      if (!v10)
      {
        v9 = v8;
        break;
      }
    }
  }
  if (!v6)
    goto LABEL_19;
LABEL_13:
  v12 = v6 + 24 * *(unsigned int *)(v6 - 4);
  v13 = *(unsigned int *)(v6 - 12);
  if (!(_DWORD)v13)
  {
LABEL_20:
    v14 = 0;
    goto LABEL_21;
  }
  if (v13 >> 28)
  {
    __break(0xC471u);
    return result;
  }
  v14 = (WTF *)WTF::fastMalloc((WTF *)(16 * v13));
LABEL_21:
  if (v12 != v9)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      v17 = v16;
      v18 = v9 + 24;
      *((_OWORD *)v14 + v15) = *(_OWORD *)v9;
      v9 = v8;
      if (v18 != v8)
      {
        v9 = v18;
        while (*(_OWORD *)v9 == 0 || *(_QWORD *)(v9 + 8) == -1)
        {
          v9 += 24;
          if (v9 == v8)
          {
            v9 = v8;
            break;
          }
        }
      }
      ++v15;
      v16 = v17 + 1;
    }
    while (v9 != v12);
    if (v15)
    {
      v20 = 16 * v17;
      v21 = v14;
      while (1)
      {
        v36 = *(_OWORD *)v21;
        v22 = *(_QWORD *)(a1 + 48);
        if (v22 && (v23 = *(_QWORD *)(v22 + 8)) != 0)
        {
          v24 = v23 - 16;
          CFRetain(*(CFTypeRef *)(v23 - 8));
        }
        else
        {
          v24 = 0;
        }
        v25 = WebKit::WebFrameProxy::webFrame(v36, *((uint64_t *)&v36 + 1));
        if (v25 && (v26 = *(_QWORD *)(v25 + 24)) != 0 && (v27 = *(_QWORD *)(v26 + 8)) != 0)
        {
          v28 = v27 - 16;
          CFRetain(*(CFTypeRef *)(v27 - 8));
          v29 = 0;
        }
        else
        {
          v28 = 0;
          v29 = 1;
        }
        if (v24)
          CFRelease(*(CFTypeRef *)(v24 + 8));
        v30 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v36);
        WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(&v35, a2, (uint64_t)v30);
        if (!v28)
          break;
        v31 = (WTF::JSONImpl::Object *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 56)
                                                                                           + 72))(*(_QWORD *)(a1 + 56), a1, v28);
        if (!(_DWORD)v31)
          break;
        v32 = v35;
        WTF::JSONImpl::Object::create(v31);
        Inspector::BackendDispatcher::CallbackBase::sendSuccess();
        v33 = v34;
        v34 = 0;
        if (!v33)
          goto LABEL_53;
        if (*v33 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          if (v32)
          {
LABEL_54:
            if (*((_DWORD *)v32 + 2) == 1)
              (*(void (**)(Inspector::BackendDispatcher::CallbackBase *))(*(_QWORD *)v32 + 8))(v32);
            else
              --*((_DWORD *)v32 + 2);
          }
        }
        else
        {
          --*v33;
          if (v32)
            goto LABEL_54;
        }
LABEL_57:
        if ((v29 & 1) == 0)
          CFRelease(*(CFTypeRef *)(v28 + 8));
        v21 = (WTF *)((char *)v21 + 16);
        v20 -= 16;
        if (!v20)
          goto LABEL_63;
      }
      v32 = v35;
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v35, (const WTF::String *)&v37);
LABEL_53:
      if (v32)
        goto LABEL_54;
      goto LABEL_57;
    }
  }
LABEL_63:
  if (v14)
    WTF::fastFree(v14, v5);
  result = v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(CFTypeRef *a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  uint64_t v5;
  Inspector::BackendDispatcher::CallbackBase *v6;
  WTF::StringImpl *v7;
  Inspector::BackendDispatcher::CallbackBase *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v12, (const WTF::String *)a1, a2);
  v5 = v12;
  if (v12)
  {
    CFRetain(a1[1]);
    v6 = *a3;
    *a3 = 0;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v7 = &off_1E34F3E40;
    *((_QWORD *)v7 + 1) = a1;
    *((_QWORD *)v7 + 2) = a1;
    *((_QWORD *)v7 + 3) = v6;
    *((_QWORD *)v7 + 4) = v5;
    v11 = v7;
    WebKit::WebAutomationSession::exitFullscreenWindowForPage((uint64_t)a1, v5, (uint64_t *)&v11);
    if (v11)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 8))(v11);
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  else
  {
    v8 = *a3;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v11);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v8, (const WTF::String *)&v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(uint64_t a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext((CFTypeRef *)(a1 - 32), a2, a3);
}

void WebKit::WebAutomationSession::hideWindowOfBrowsingContext(CFTypeRef *a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  uint64_t v5;
  Inspector::BackendDispatcher::CallbackBase *v6;
  WTF::StringImpl *v7;
  Inspector::BackendDispatcher::CallbackBase *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v12, (const WTF::String *)a1, a2);
  v5 = v12;
  if (v12)
  {
    CFRetain(a1[1]);
    v6 = *a3;
    *a3 = 0;
    CFRetain(*(CFTypeRef *)(v5 + 8));
    v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v7 = &off_1E34F3EB8;
    *((_QWORD *)v7 + 1) = a1;
    *((_QWORD *)v7 + 2) = v6;
    *((_QWORD *)v7 + 3) = v5;
    v11 = v7;
    WebKit::WebAutomationSession::exitFullscreenWindowForPage((uint64_t)a1, v5, (uint64_t *)&v11);
    if (v11)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 8))(v11);
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
  else
  {
    v8 = *a3;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v11);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v8, (const WTF::String *)&v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::hideWindowOfBrowsingContext(uint64_t a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  WebKit::WebAutomationSession::hideWindowOfBrowsingContext((CFTypeRef *)(a1 - 32), a2, a3);
}

uint64_t WebKit::WebAutomationSession::willShowJavaScriptDialog(CFTypeRef *this, CFTypeRef *a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  WTF::RunLoop::main((WTF::RunLoop *)this);
  CFRetain(this[1]);
  CFRetain(a2[1]);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = &off_1E34F3F30;
  v4[1] = this;
  v4[2] = this;
  v4[3] = a2;
  v6 = (uint64_t)v4;
  WTF::RunLoop::dispatch();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void WebKit::WebAutomationSession::navigateBrowsingContext(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, WTF::StringImpl **a6)
{
  uint64_t v10;
  int v11;
  Inspector::BackendDispatcher::CallbackBase *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  CFTypeRef v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19[5];
  WTF::StringImpl *v20[24];
  CFTypeRef cf;
  uint64_t v22;
  uint64_t v23;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v23, a1, a2);
  v10 = v23;
  if (v23)
  {
    if (*(_BYTE *)(a4 + 4))
      v11 = *(_DWORD *)a4;
    else
      v11 = 26;
    WTF::URL::URL((uint64_t)v19, a3);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v20, (const WTF::URL *)v19, 0);
    cf = 0;
    WebKit::WebPageProxy::loadRequest(v10, (WebCore::ResourceRequestBase *)v20, 1, 0, &v22);
    if (v22)
      CFRelease(*(CFTypeRef *)(v22 + 8));
    v15 = cf;
    cf = 0;
    if (v15)
      CFRelease(v15);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v20);
    v17 = v19[0];
    v19[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = *a6;
    *a6 = 0;
    v20[0] = v18;
    WebKit::WebAutomationSession::waitForNavigationToCompleteOnPage(a1, v10, v11, (uint64_t *)v20);
    if (v20[0])
    {
      if (*((_DWORD *)v20[0] + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v20[0] + 8))(v20[0]);
      else
        --*((_DWORD *)v20[0] + 2);
    }
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  else
  {
    v12 = *a6;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, v20);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v12, (const WTF::String *)v20);
    v14 = v20[0];
    v20[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::navigateBrowsingContext(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, WTF::StringImpl **a6)
{
  WebKit::WebAutomationSession::navigateBrowsingContext((WTF::String *)(a1 - 32), a2, a3, a4, a5, a6);
}

void WebKit::WebAutomationSession::goBackInBrowsingContext(WTF::String *a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  WebKit::WebPageProxy *v8;
  int v9;
  Inspector::BackendDispatcher::CallbackBase *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebKit::WebPageProxy *v17;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v17, a1, a2);
  v8 = v17;
  if (v17)
  {
    if (*(_BYTE *)(a3 + 4))
      v9 = *(_DWORD *)a3;
    else
      v9 = 26;
    WebKit::WebPageProxy::goBack(v17, &v15);
    v13 = v15;
    v15 = 0;
    if (v13)
      CFRelease(*(CFTypeRef *)(v13 + 8));
    v14 = *a5;
    *a5 = 0;
    v16 = v14;
    WebKit::WebAutomationSession::waitForNavigationToCompleteOnPage(a1, (uint64_t)v8, v9, (uint64_t *)&v16);
    if (v16)
    {
      if (*((_DWORD *)v16 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v16 + 8))();
      else
        --*((_DWORD *)v16 + 2);
    }
    CFRelease(*((CFTypeRef *)v8 + 1));
  }
  else
  {
    v10 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v16);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v10, (const WTF::String *)&v16);
    v12 = v16;
    v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::goBackInBrowsingContext(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  WebKit::WebAutomationSession::goBackInBrowsingContext((WTF::String *)(a1 - 32), a2, a3, a4, a5);
}

void WebKit::WebAutomationSession::goForwardInBrowsingContext(WTF::String *a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  WebKit::WebPageProxy *v8;
  int v9;
  Inspector::BackendDispatcher::CallbackBase *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebKit::WebPageProxy *v17;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v17, a1, a2);
  v8 = v17;
  if (v17)
  {
    if (*(_BYTE *)(a3 + 4))
      v9 = *(_DWORD *)a3;
    else
      v9 = 26;
    WebKit::WebPageProxy::goForward(v17, &v15);
    v13 = v15;
    v15 = 0;
    if (v13)
      CFRelease(*(CFTypeRef *)(v13 + 8));
    v14 = *a5;
    *a5 = 0;
    v16 = v14;
    WebKit::WebAutomationSession::waitForNavigationToCompleteOnPage(a1, (uint64_t)v8, v9, (uint64_t *)&v16);
    if (v16)
    {
      if (*((_DWORD *)v16 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v16 + 8))();
      else
        --*((_DWORD *)v16 + 2);
    }
    CFRelease(*((CFTypeRef *)v8 + 1));
  }
  else
  {
    v10 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v16);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v10, (const WTF::String *)&v16);
    v12 = v16;
    v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::goForwardInBrowsingContext(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  WebKit::WebAutomationSession::goForwardInBrowsingContext((WTF::String *)(a1 - 32), a2, a3, a4, a5);
}

void WebKit::WebAutomationSession::reloadBrowsingContext(WTF::String *a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  uint64_t v8;
  int v9;
  Inspector::BackendDispatcher::CallbackBase *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v17, a1, a2);
  v8 = v17;
  if (v17)
  {
    if (*(_BYTE *)(a3 + 4))
      v9 = *(_DWORD *)a3;
    else
      v9 = 26;
    WebKit::WebPageProxy::reload(v17, 0, &v15);
    v13 = v15;
    v15 = 0;
    if (v13)
      CFRelease(*(CFTypeRef *)(v13 + 8));
    v14 = *a5;
    *a5 = 0;
    v16 = v14;
    WebKit::WebAutomationSession::waitForNavigationToCompleteOnPage(a1, v8, v9, (uint64_t *)&v16);
    if (v16)
    {
      if (*((_DWORD *)v16 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v16 + 8))();
      else
        --*((_DWORD *)v16 + 2);
    }
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  else
  {
    v10 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v16);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v10, (const WTF::String *)&v16);
    v12 = v16;
    v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::reloadBrowsingContext(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5)
{
  WebKit::WebAutomationSession::reloadBrowsingContext((WTF::String *)(a1 - 32), a2, a3, a4, a5);
}

WTF::StringImpl *WebKit::WebAutomationSession::navigationOccurredForFrame(WebKit::WebAutomationSession *this, const WebKit::WebFrameProxy *a2, const WTF::StringImpl *a3)
{
  WebKit::WebAutomationSession *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  WTF::StringImpl *result;
  _DWORD *v10;
  WTF::JSONImpl::Object *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  const WTF::StringImpl **v32;
  const WTF::StringImpl *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int i;
  int v39;
  WTF *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  double v51;
  double v52;
  double v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  WTF::JSONImpl::Object *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  Inspector::AutomationFrontendDispatcher *v61;
  uint64_t v62;
  const WebKit::WebPageProxy *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t *v66;
  WebKit::WebAutomationSession *v67;
  int v68;
  _DWORD *v69;
  WTF::StringImpl *v70[2];
  __int128 v71;

  v4 = this;
  v5 = *((_QWORD *)a2 + 3);
  if (!v5
    || (v6 = *(_QWORD *)(v5 + 8)) == 0
    || *(const WebKit::WebFrameProxy **)(v6 + 264) != a2
    && ((v7 = *(_QWORD *)(v6 + 1104)) == 0 || *(const WebKit::WebFrameProxy **)(v7 + 72) != a2))
  {
    *(_OWORD *)v70 = *((_OWORD *)a2 + 17);
    v8 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 19, v70);
    result = (WTF::StringImpl *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(&v71, (uint64_t *)v4 + 19, (uint64_t)v8);
    v10 = (_DWORD *)v71;
    if ((_QWORD)v71)
    {
      v11 = (WTF::JSONImpl::Object *)WTF::RunLoop::TimerBase::stop((WebKit::WebAutomationSession *)((char *)v4 + 224));
      WTF::JSONImpl::Object::create(v11);
      Inspector::BackendDispatcher::CallbackBase::sendSuccess();
      result = v70[0];
      v70[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)result;
      }
      if (v10[2] == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      else
        --v10[2];
    }
    return result;
  }
  *(_QWORD *)&v71 = 0;
  v12 = (uint64_t *)((char *)this + 128);
  v13 = *((_QWORD *)this + 16);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 - 4);
    v15 = v13 + 24 * v14;
    if (*(_DWORD *)(v13 - 12))
    {
      v16 = *((_QWORD *)this + 16);
      if ((_DWORD)v14)
      {
        v17 = 24 * v14;
        v16 = *((_QWORD *)this + 16);
        while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
        {
          v16 += 24;
          v17 -= 24;
          if (!v17)
          {
            v16 = v15;
            goto LABEL_24;
          }
        }
      }
      goto LABEL_24;
    }
    v16 = v13 + 24 * v14;
  }
  else
  {
    v16 = 0;
    LODWORD(v14) = 0;
  }
  v15 = v13 + 24 * v14;
LABEL_24:
  if (v13)
    v18 = v13 + 24 * *(unsigned int *)(v13 - 4);
  else
    v18 = 0;
  if (v18 == v16)
    goto LABEL_54;
  v19 = (_QWORD *)((char *)this + 120);
  do
  {
    v20 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)(v16 + 8), *(_QWORD *)(v16 + 16));
    if (!v20)
      goto LABEL_40;
    v21 = v20;
    CFRetain(*(CFTypeRef *)(v20 + 8));
    v23 = *(_QWORD *)(v21 + 24);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 8);
      if (v24)
        v23 = v24 - 16;
      else
        v23 = 0;
    }
    v25 = *((_QWORD *)a2 + 3);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 16;
      else
        v25 = 0;
    }
    if (v23 == v25)
    {
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v71, (WTF::StringImpl **)v16, v22, (uint64_t)v70);
      v28 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)v4 + 15, (_QWORD *)(v16 + 8));
      if (*v19)
      {
        v29 = *v19 + 24 * *(unsigned int *)(*v19 - 4);
        if ((uint64_t *)v29 != v28)
          goto LABEL_52;
      }
      else if (v28)
      {
        v29 = 0;
LABEL_52:
        if ((uint64_t *)v29 != v28)
          WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove((uint64_t *)v4 + 15, (WTF::StringImpl *)v28);
      }
    }
    CFRelease(*(CFTypeRef *)(v21 + 8));
LABEL_40:
    v27 = v16 + 24;
    v16 = v15;
    if (v27 != v15)
    {
      v16 = v27;
      while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
      {
        v16 += 24;
        if (v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  while (v16 != v18);
  v13 = *v12;
LABEL_54:
  if (v13)
  {
    v30 = *(_DWORD *)(v13 - 4);
    if (v30)
    {
      v31 = 0;
      v66 = (uint64_t *)((char *)v4 + 128);
      v67 = v4;
      do
      {
        v32 = (const WTF::StringImpl **)(v13 + 24 * --v30);
        v33 = *v32;
        if ((unint64_t)*v32 + 1 >= 2)
        {
          v34 = v71;
          if ((_QWORD)v71)
          {
            v35 = *(_DWORD *)(v71 - 8);
            v36 = *((_DWORD *)v33 + 4);
            v68 = v31;
            if (v36 >= 0x100)
              v37 = v36 >> 8;
            else
              v37 = WTF::StringImpl::hashSlowCase(v33);
            for (i = 0; ; v37 = i + v39)
            {
              v39 = v37 & v35;
              v40 = *(WTF **)(v34 + 8 * (v37 & v35));
              if (v40 != (WTF *)-1)
              {
                if (!v40)
                {
                  v12 = v66;
                  v4 = v67;
                  v31 = v68;
                  goto LABEL_59;
                }
                if ((WTF::equal(v40, *v32, a3) & 1) != 0)
                  break;
              }
              ++i;
            }
            WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)(v13 + 24 * v30), v41);
            v31 = v68 + 1;
            v12 = v66;
            v4 = v67;
          }
        }
LABEL_59:
        ;
      }
      while (v30);
      v42 = *v12;
      if (v31)
      {
        *(_DWORD *)(v42 - 16) += v31;
        v43 = *v12;
        if (*v12)
          v44 = *(_DWORD *)(v43 - 12);
        else
          v44 = 0;
        *(_DWORD *)(v43 - 12) = v44 - v31;
        v42 = *v12;
      }
      if (v42)
      {
        v45 = *(_DWORD *)(v42 - 4);
        v46 = *(unsigned int *)(v42 - 12);
        if (v45 >= 9 && 6 * (int)v46 < v45)
        {
          v48 = (v46 - 1) | ((v46 - 1) >> 1) | ((((_DWORD)v46 - 1) | ((v46 - 1) >> 1)) >> 2);
          v49 = v48 | (v48 >> 4) | ((v48 | (v48 >> 4)) >> 8);
          v50 = (v49 | HIWORD(v49)) + 1;
          if (v50 > 0x400)
          {
            if (v50 <= 2 * v46)
            {
LABEL_83:
              LODWORD(v50) = 2 * v50;
              if (v50 <= 0x400)
                goto LABEL_84;
            }
            v51 = (double)v46;
            v52 = (double)v50;
            v53 = 0.416666667;
          }
          else
          {
            if (3 * v50 <= 4 * v46)
              goto LABEL_83;
LABEL_84:
            v51 = (double)v46;
            v52 = (double)v50;
            v53 = 0.604166667;
          }
          if (v52 * v53 <= v51)
            LODWORD(v50) = 2 * v50;
          if (v50 <= 8)
            v54 = 8;
          else
            v54 = v50;
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v12, v54, 0);
        }
      }
    }
  }
  v55 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if (v55)
    v56 = v55 - 16;
  else
    v56 = 0;
  v69 = *(_DWORD **)(*(_QWORD *)(v56 + 32) + 744);
  v57 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)v4 + 17, &v69);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take((uint64_t *)v4 + 17, v57, v70);
  if (v70[0])
  {
    v58 = (WTF::JSONImpl::Object *)WTF::RunLoop::TimerBase::stop((WebKit::WebAutomationSession *)((char *)v4 + 224));
    WTF::JSONImpl::Object::create(v58);
    Inspector::BackendDispatcher::CallbackBase::sendSuccess();
    v59 = v69;
    v69 = 0;
    if (v59)
    {
      if (*v59 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v59;
    }
    v60 = v70[0];
    v70[0] = 0;
    if (v60)
    {
      if (*((_DWORD *)v60 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v60 + 8))(v60);
      else
        --*((_DWORD *)v60 + 2);
    }
  }
  v61 = (Inspector::AutomationFrontendDispatcher *)*((_QWORD *)v4 + 12);
  v62 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if (v62)
    v63 = (const WebKit::WebPageProxy *)(v62 - 16);
  else
    v63 = 0;
  WebKit::WebAutomationSession::handleForWebPageProxy(v4, v63, (WTF::StringImpl *)v70);
  Inspector::AutomationFrontendDispatcher::browsingContextCleared(v61, (const WTF::String *)v70);
  v65 = v70[0];
  v70[0] = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v64);
    else
      *(_DWORD *)v65 -= 2;
  }
  result = (WTF::StringImpl *)v71;
  if ((_QWORD)v71)
    return (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v71, v64);
  return result;
}

_DWORD *WebKit::WebAutomationSession::documentLoadedForFrame(WebKit::WebAutomationSession *this, const WebKit::WebFrameProxy *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _DWORD *result;
  _DWORD *v8;
  WTF::JSONImpl::Object *v9;
  _QWORD *v10;
  WTF::JSONImpl::Object *v11;
  _DWORD *v12;
  __int128 v13;
  __int128 v14;

  v3 = *((_QWORD *)a2 + 3);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (*(const WebKit::WebFrameProxy **)(v4 + 264) == a2
     || (v5 = *(_QWORD *)(v4 + 1104)) != 0 && *(const WebKit::WebFrameProxy **)(v5 + 72) == a2))
  {
    *(_QWORD *)&v14 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 744);
    v10 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 18, &v14);
    result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take((uint64_t *)this + 18, v10, &v13);
    if ((_QWORD)v13)
    {
      v11 = (WTF::JSONImpl::Object *)WTF::RunLoop::TimerBase::stop((WebKit::WebAutomationSession *)((char *)this + 224));
      WTF::JSONImpl::Object::create(v11);
      Inspector::BackendDispatcher::CallbackBase::sendSuccess();
      v12 = (_DWORD *)v14;
      *(_QWORD *)&v14 = 0;
      if (v12)
      {
        if (*v12 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v12;
      }
      result = (_DWORD *)v13;
      *(_QWORD *)&v13 = 0;
      if (result)
      {
        if (result[2] == 1)
          return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
    }
  }
  else
  {
    v13 = *((_OWORD *)a2 + 17);
    v6 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)this + 20, &v13);
    result = WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(&v14, (uint64_t *)this + 20, (uint64_t)v6);
    v8 = (_DWORD *)v14;
    if ((_QWORD)v14)
    {
      v9 = (WTF::JSONImpl::Object *)WTF::RunLoop::TimerBase::stop((WebKit::WebAutomationSession *)((char *)this + 224));
      WTF::JSONImpl::Object::create(v9);
      Inspector::BackendDispatcher::CallbackBase::sendSuccess();
      result = (_DWORD *)v13;
      *(_QWORD *)&v13 = 0;
      if (result)
      {
        if (*result == 1)
          result = (_DWORD *)WTF::JSONImpl::Value::operator delete();
        else
          --*result;
      }
      if (v8[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
    }
  }
  return result;
}

uint64_t *WebKit::WebAutomationSession::inspectorFrontendLoaded(WebKit::WebAutomationSession *this, const WebKit::WebPageProxy *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *result;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t *v7;

  v2 = (uint64_t *)((char *)this + 168);
  v6 = *(_DWORD **)(*((_QWORD *)a2 + 4) + 744);
  v3 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 21, &v6);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(v2, v3, &v7);
  if (v7)
  {
    WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)result);
    Inspector::BackendDispatcher::CallbackBase::sendSuccess();
    v5 = v6;
    v6 = 0;
    if (v5)
    {
      if (*v5 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v5;
    }
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t *WebKit::WebAutomationSession::keyboardEventsFlushedForPage(WebKit::WebAutomationSession *this, const WebKit::WebPageProxy *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = (uint64_t *)((char *)this + 176);
  v11 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
  v3 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 22, &v11);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::take(v2, v3, &v12);
  if (v12)
  {
    LOBYTE(v7) = 0;
    v10 = 0;
    WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)&v12, &v7);
    if (v10)
    {
      if (v9)
      {
        v6 = v8;
        v8 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v5);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
    }
    result = v12;
    v12 = 0;
    if (result)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::willClosePage(WebKit::WebAutomationSession *this, const WebKit::WebPageProxy *a2)
{
  _QWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  void *v10;
  WebKit::SimulatedInputDispatcher *v11;
  WTF::StringImpl *result;
  int v13;
  WTF::StringImpl *v14;
  char v15;
  char v16;
  WebKit::SimulatedInputDispatcher *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  WebKit::WebAutomationSession::handleForWebPageProxy(this, a2, (WTF::StringImpl *)&v18);
  Inspector::AutomationFrontendDispatcher::browsingContextCleared(*((Inspector::AutomationFrontendDispatcher **)this + 12), (const WTF::String *)&v18);
  v17 = *(WebKit::SimulatedInputDispatcher **)(*((_QWORD *)a2 + 4) + 744);
  v4 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 22, &v17);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::take((uint64_t *)this + 22, v4, &v19);
  if (v19)
  {
    v13 = 9;
    LOBYTE(v14) = 0;
    v15 = 0;
    v16 = 1;
    WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(&v19, &v13);
    if (v16)
    {
      if (v15)
      {
        v6 = v14;
        v14 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v5);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
    }
    v7 = v19;
    v19 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v8 = (uint64_t *)((char *)this + 288);
  v19 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
  v9 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8, &v19);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::take(v8, v9, &v17);
  v11 = v17;
  if (v17)
  {
    if (*((_QWORD *)v17 + 6))
    {
      LODWORD(v19) = 5;
      v20 = 0;
      v21 = 0;
      v22 = 1;
      WebKit::SimulatedInputDispatcher::finishDispatching((uint64_t)v17, (int *)&v19);
      v11 = v17;
      v17 = 0;
      if (!v11)
        goto LABEL_16;
    }
    else
    {
      v17 = 0;
    }
    WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v11, v10);
  }
LABEL_16:
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::handleRunOpenPanel(WTF::JSONImpl::Object **this, const WebKit::WebPageProxy *a2, const WebKit::WebFrameProxy *a3, const API::OpenPanelParameters *a4, WebKit::WebOpenPanelResultListenerProxy *a5)
{
  void *v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WebKit::WebPageProxy *v18;
  WTF::JSONImpl::Object *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t *v22;
  const WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t *v26;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  const WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t *v42;
  uint64_t v44;
  uint64_t v45;
  WTF::FileSystemImpl *v46;
  WTF::FileSystemImpl *v47;
  uint64_t v48;
  int v49;
  WTF::StringImpl *v50;
  const WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl **v54;
  const WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  const WTF::StringImpl *v60;
  WTF::StringImpl *result;
  WTF::StringImpl *v62;
  WTF::StringImpl **v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  int i;
  int v70;
  WTF *v71;
  WTF::StringImpl *v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int j;
  int v77;
  WTF *v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int k;
  int v83;
  WTF *v84;
  WTF::JSONImpl::ArrayBase *v85;
  void *v86;
  uint64_t v87;
  WTF::JSONImpl::Value *v88;
  uint64_t v89;
  uint64_t v90;
  WTF::JSONImpl::Object *v91;
  uint64_t v92;
  WebKit::WebPageProxy *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  WTF::StringImpl **v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl **v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  int v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;

  WebKit::WebAutomationSession::handleForWebPageProxy((WebKit::WebAutomationSession *)this, a2, (WTF::StringImpl *)&v101);
  v9 = *((_DWORD *)this + 67);
  if (!v9 || (v9 != 1 ? (v10 = *((_BYTE *)a4 + 17) == 0) : (v10 = 0), v10))
  {
    v18 = (WebKit::WebPageProxy *)*((_QWORD *)a5 + 2);
    if (v18)
      WebKit::WebPageProxy::didCancelForOpenPanel(v18, v8);
    v19 = this[12];
    v97 = 0;
    Inspector::AutomationFrontendDispatcher::fileChooserDismissed(v19, (WTF::JSONImpl::Value *)&v101, (WTF::JSONImpl::Value *)1, &v97);
    v21 = v97;
    v97 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v21;
    }
  }
  else
  {
    v100 = 0;
    API::Array::createStringArray((uint64_t)a4 + 24, &v99);
    v11 = v99;
    v12 = *(uint64_t **)(v99 + 16);
    v13 = *(unsigned int *)(v99 + 28);
    v14 = &v12[v13];
    if ((_DWORD)v13)
    {
      v15 = 8 * v13;
      while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v12 + 16))(*v12) != 21)
      {
        ++v12;
        v15 -= 8;
        if (!v15)
        {
          v12 = v14;
          break;
        }
      }
      v16 = v12;
      v12 = *(uint64_t **)(v11 + 16);
      v17 = *(unsigned int *)(v11 + 28);
    }
    else
    {
      v17 = 0;
      v16 = *(uint64_t **)(v99 + 16);
    }
    v22 = &v12[v17];
LABEL_20:
    while (v16 != v22)
    {
      WTF::String::isolatedCopy();
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v100, &v104, v23, (uint64_t)&v97);
      v25 = v104;
      v104 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = v16 + 1;
      while (v26 - 1 != v14 && v26 != v14)
      {
        v28 = *v26++;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28) == 21)
        {
          v16 = v26 - 1;
          goto LABEL_20;
        }
      }
      v16 = v14;
    }
    v96 = 0;
    API::Array::createStringArray((uint64_t)a4 + 40, &v95);
    v30 = v95;
    v31 = *(uint64_t **)(v95 + 16);
    v32 = *(unsigned int *)(v95 + 28);
    v33 = &v31[v32];
    if ((_DWORD)v32)
    {
      v34 = 8 * v32;
      while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v31 + 16))(*v31) != 21)
      {
        ++v31;
        v34 -= 8;
        if (!v34)
        {
          v31 = v33;
          break;
        }
      }
      v35 = v31;
      v31 = *(uint64_t **)(v30 + 16);
      v36 = *(unsigned int *)(v30 + 28);
    }
    else
    {
      v36 = 0;
      v35 = *(uint64_t **)(v95 + 16);
    }
    v37 = &v31[v36];
LABEL_41:
    while (v35 != v37)
    {
      WTF::String::isolatedCopy();
      if (v104)
      {
        WTF::StringImpl::substring(v104);
        v39 = v97;
      }
      else
      {
        v39 = 0;
      }
      v107 = v39;
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v96, &v107, v38, (uint64_t)&v97);
      v40 = v107;
      v107 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v29);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v104;
      v104 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v29);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = v35 + 1;
      while (v42 - 1 != v33 && v42 != v33)
      {
        v44 = *v42++;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44) == 21)
        {
          v35 = v42 - 1;
          goto LABEL_41;
        }
      }
      v35 = v33;
    }
    v45 = *((unsigned int *)this + 67);
    if ((_DWORD)v45)
    {
      v46 = this[32];
      v47 = (WTF::FileSystemImpl *)((char *)v46 + 8 * v45);
      do
      {
        if (!WTF::FileSystemImpl::fileExists(v46, v29))
        {
LABEL_161:
          v93 = (WebKit::WebPageProxy *)*((_QWORD *)a5 + 2);
          if (v93)
            WebKit::WebPageProxy::didCancelForOpenPanel(v93, v29);
          v91 = this[12];
          v97 = 0;
          v92 = 1;
          goto LABEL_164;
        }
        if (v100 && *((_DWORD *)v100 - 3) || v96 && *((_DWORD *)v96 - 3))
        {
          if (!*(_QWORD *)v46)
            goto LABEL_161;
          v48 = WTF::StringImpl::reverseFind();
          if (v48 == -1)
            goto LABEL_161;
          v49 = v48;
          v50 = *(WTF::StringImpl **)v46;
          if (*(_QWORD *)v46)
          {
            if (v49 != -1 || (*((_DWORD *)v50 + 1) & 0x80000000) != 0)
            {
              WTF::StringImpl::substring(v50);
              v104 = v97;
            }
            else
            {
              *(_DWORD *)v50 += 2;
              v104 = v50;
            }
          }
          else
          {
            v104 = 0;
          }
          WTF::String::convertToASCIILowercase((WTF::String *)&v104);
          v52 = v104;
          v104 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, v29);
            else
              *(_DWORD *)v52 -= 2;
          }
          v53 = v107;
          if (!v107)
            goto LABEL_161;
          if (!*((_DWORD *)v107 + 1))
          {
            v107 = 0;
LABEL_158:
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v29);
            else
              *(_DWORD *)v53 -= 2;
            goto LABEL_161;
          }
          v54 = v96;
          if (v96)
          {
            v64 = *((_DWORD *)v96 - 2);
            v65 = *((_DWORD *)v107 + 4);
            if (v65 >= 0x100)
              v66 = v65 >> 8;
            else
              v66 = WTF::StringImpl::hashSlowCase(v107);
            for (i = 0; ; v66 = i + v70)
            {
              v70 = v66 & v64;
              v71 = v54[v66 & v64];
              if (v71 != (WTF *)-1)
              {
                if (!v71)
                  goto LABEL_81;
                if ((WTF::equal(v71, v107, v51) & 1) != 0)
                  break;
              }
              ++i;
            }
            v72 = v107;
            v107 = 0;
            if (v72)
            {
              if (*(_DWORD *)v72 == 2)
                WTF::StringImpl::destroy(v72, v29);
              else
                *(_DWORD *)v72 -= 2;
            }
            goto LABEL_117;
          }
LABEL_81:
          WebCore::MIMETypeRegistry::mimeTypeForExtension();
          WTF::String::convertToASCIILowercase((WTF::String *)&v97);
          v56 = v97;
          v97 = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2)
              WTF::StringImpl::destroy(v56, v29);
            else
              *(_DWORD *)v56 -= 2;
          }
          if (!v106)
          {
            v53 = v107;
            v107 = 0;
            if (!v53)
              goto LABEL_161;
            goto LABEL_158;
          }
          if (*((_DWORD *)v106 + 1))
          {
            v57 = v100;
            if (v100)
            {
              v73 = *((_DWORD *)v100 - 2);
              v74 = *((_DWORD *)v106 + 4);
              if (v74 >= 0x100)
                v75 = v74 >> 8;
              else
                v75 = WTF::StringImpl::hashSlowCase(v106);
              for (j = 0; ; v75 = j + v77)
              {
                v77 = v75 & v73;
                v78 = v57[v75 & v73];
                if (v78 != (WTF *)-1)
                {
                  if (!v78)
                    goto LABEL_88;
                  if ((WTF::equal(v78, v106, v55) & 1) != 0)
                    break;
                }
                ++j;
              }
              LOBYTE(v63) = 1;
            }
            else
            {
LABEL_88:
              WTF::String::split();
              if (v105 == 2)
              {
                v59 = *(WTF::StringImpl **)v104;
                if (*(_QWORD *)v104)
                  *(_DWORD *)v59 += 2;
                v102 = v59;
                v97 = (WTF::StringImpl *)"/*";
                v98 = 3;
                WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v102, (uint64_t *)&v97, &v103);
                result = v103;
                if (!v103)
                {
                  __break(0xC471u);
                  return result;
                }
                v62 = v102;
                v102 = 0;
                if (v62)
                {
                  if (*(_DWORD *)v62 == 2)
                  {
                    WTF::StringImpl::destroy(v62, v58);
                    result = v103;
                  }
                  else
                  {
                    *(_DWORD *)v62 -= 2;
                  }
                }
                v63 = v100;
                if (v100)
                {
                  v79 = *((_DWORD *)v100 - 2);
                  v80 = *((_DWORD *)result + 4);
                  if (v80 >= 0x100)
                    v81 = v80 >> 8;
                  else
                    v81 = WTF::StringImpl::hashSlowCase(result);
                  for (k = 0; ; v81 = k + v83)
                  {
                    v83 = v81 & v79;
                    v84 = v63[v81 & v79];
                    if (v84 != (WTF *)-1)
                    {
                      if (!v84)
                      {
                        LOBYTE(v63) = 0;
                        goto LABEL_150;
                      }
                      if ((WTF::equal(v84, v103, v60) & 1) != 0)
                        break;
                    }
                    ++k;
                  }
                  LOBYTE(v63) = 1;
LABEL_150:
                  result = v103;
                }
                v103 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    WTF::StringImpl::destroy(result, v58);
                  else
                    *(_DWORD *)result -= 2;
                }
              }
              else
              {
                LOBYTE(v63) = 0;
              }
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v104, v58);
            }
          }
          else
          {
            LOBYTE(v63) = 0;
          }
          v67 = v106;
          v106 = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
              WTF::StringImpl::destroy(v67, v29);
            else
              *(_DWORD *)v67 -= 2;
          }
          v68 = v107;
          v107 = 0;
          if (!v68)
            goto LABEL_114;
          if (*(_DWORD *)v68 != 2)
          {
            *(_DWORD *)v68 -= 2;
LABEL_114:
            if ((v63 & 1) == 0)
              goto LABEL_161;
            goto LABEL_117;
          }
          WTF::StringImpl::destroy(v68, v29);
          if ((v63 & 1) == 0)
            goto LABEL_161;
        }
LABEL_117:
        v46 = (WTF::FileSystemImpl *)((char *)v46 + 8);
      }
      while (v46 != v47);
    }
    v85 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
    WTF::JSONImpl::ArrayBase::ArrayBase(v85);
    v87 = *((unsigned int *)this + 67);
    if ((_DWORD)v87)
    {
      v88 = this[32];
      v89 = 8 * v87;
      do
      {
        WTF::JSONImpl::ArrayOf<WTF::String>::addItem<WTF::String>((uint64_t)v85, v88);
        v88 = (WTF::JSONImpl::Value *)((char *)v88 + 8);
        v89 -= 8;
      }
      while (v89);
    }
    v97 = 0;
    v98 = 0;
    v90 = *((_QWORD *)a5 + 2);
    if (v90)
      WebKit::WebPageProxy::didChooseFilesForOpenPanel(v90, (uint64_t *)this + 32);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v97, v86);
    v91 = this[12];
    v97 = v85;
    v92 = 0;
LABEL_164:
    Inspector::AutomationFrontendDispatcher::fileChooserDismissed(v91, (WTF::JSONImpl::Value *)&v101, (WTF::JSONImpl::Value *)v92, &v97);
    v94 = v97;
    v97 = 0;
    if (v94)
    {
      if (*(_DWORD *)v94 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v94;
    }
    if (v95)
      CFRelease(*(CFTypeRef *)(v95 + 8));
    if (v96)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v96, v20);
    if (v99)
      CFRelease(*(CFTypeRef *)(v99 + 8));
    if (v100)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v100, v20);
  }
  result = v101;
  v101 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebAutomationSession::evaluateJavaScriptFunction(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::StringImpl *a4, uint64_t *a5, _BYTE *a6, uint64_t a7, Inspector::BackendDispatcher::CallbackBase **a8)
{
  uint64_t v15;
  Inspector::BackendDispatcher::CallbackBase *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  Inspector::BackendDispatcher::CallbackBase *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  Inspector::BackendDispatcher::CallbackBase *v44;
  _DWORD *v45;
  Inspector::BackendDispatcher::CallbackBase *v46;
  _DWORD *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  char v55;
  void *v56;
  uint64_t v57;
  WTF::StringImpl *v58[4];
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  WTF::StringImpl **v68;
  char v69;
  __int128 v70;
  uint64_t v71;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v67, a1, a2);
  v15 = v67;
  if (v67)
  {
    v66 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v64, a1, a3, &v66);
    if (v66)
    {
      v16 = *a8;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, v58);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v16, (const WTF::String *)v58);
      v18 = v58[0];
      v58[0] = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
LABEL_53:
      CFRelease(*(CFTypeRef *)(v15 + 8));
      return;
    }
    v22 = *a5;
    v62 = 0;
    v63 = 0;
    v23 = *(unsigned int *)(v22 + 28);
    if ((_DWORD)v23)
    {
      if (v23 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v24 = WTF::fastMalloc((WTF *)(8 * v23));
      LODWORD(v63) = v23;
      v62 = v24;
      v25 = *(unsigned int *)(v22 + 28);
      if ((_DWORD)v25)
      {
        v26 = v24;
        v27 = 0;
        v28 = *(_QWORD *)(v22 + 16);
        v29 = 8 * v25;
        do
        {
          v30 = v27;
          WTF::JSONImpl::Value::asString(*(WTF::JSONImpl::Value **)(v28 + 8 * v27));
          v27 = v30 + 1;
          *(WTF::StringImpl **)(v26 + 8 * v30) = v58[0];
          v29 -= 8;
        }
        while (v29);
        HIDWORD(v63) = v30 + 1;
      }
    }
    v33 = *((_QWORD *)a1 + 24);
    v32 = (uint64_t *)((char *)a1 + 192);
    v31 = v33;
    v34 = *(v32 - 1);
    *(v32 - 1) = v34 + 1;
    if (v33
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v32, 0), (v31 = *v32) != 0))
    {
      v35 = *(_DWORD *)(v31 - 8);
    }
    else
    {
      v35 = 0;
    }
    v36 = (v34 + ~(v34 << 32)) ^ ((unint64_t)(v34 + ~(v34 << 32)) >> 22);
    v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
    v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
    v39 = v35 & ((v38 >> 31) ^ v38);
    v40 = (uint64_t *)(v31 + 16 * v39);
    v41 = *v40;
    if (*v40)
    {
      v42 = 0;
      v43 = 1;
      while (v41 != v34)
      {
        if (v41 == -1)
          v42 = v40;
        v39 = (v39 + v43) & v35;
        v40 = (uint64_t *)(v31 + 16 * v39);
        v41 = *v40;
        ++v43;
        if (!*v40)
        {
          if (v42)
          {
            *v42 = 0;
            v42[1] = 0;
            --*(_DWORD *)(*v32 - 16);
            v40 = v42;
          }
          goto LABEL_26;
        }
      }
      v46 = *a8;
      *a8 = 0;
      v47 = (_DWORD *)v40[1];
      v40[1] = (uint64_t)v46;
      if (v47)
      {
        if (v47[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
        else
          --v47[2];
      }
      goto LABEL_46;
    }
LABEL_26:
    *v40 = v34;
    v44 = *a8;
    *a8 = 0;
    v45 = (_DWORD *)v40[1];
    v40[1] = (uint64_t)v44;
    if (v45)
    {
      if (v45[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
      else
        --v45[2];
    }
    v48 = *v32;
    if (*v32)
      v49 = *(_DWORD *)(v48 - 12) + 1;
    else
      v49 = 1;
    *(_DWORD *)(v48 - 12) = v49;
    v50 = *v32;
    if (*v32)
      v51 = *(_DWORD *)(v50 - 12);
    else
      v51 = 0;
    v52 = (*(_DWORD *)(v50 - 16) + v51);
    v53 = *(unsigned int *)(v50 - 4);
    if (v53 > 0x400)
    {
      if (v53 > 2 * v52)
        goto LABEL_46;
    }
    else if (3 * v53 > 4 * v52)
    {
LABEL_46:
      v70 = v64;
      v71 = v65;
      if (a6[1])
        v54 = *a6 == 0;
      else
        v54 = 1;
      v55 = !v54;
      v57 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 1896);
      v58[0] = (WTF::StringImpl *)&v57;
      v58[1] = (WTF::StringImpl *)&v64;
      v58[2] = a4;
      v58[3] = (WTF::StringImpl *)&v62;
      v59 = v55;
      v60 = a7;
      v61 = v34;
      v68 = v58;
      v69 = 0;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebAutomationSessionProxy::EvaluateJavaScriptFunction&)#1}>(v15, (uint64_t)&v70, (uint64_t)&v68);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v56);
      goto LABEL_53;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v32, v40);
    v15 = v67;
    goto LABEL_46;
  }
  v19 = *a8;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, v58);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v19, (const WTF::String *)v58);
  v21 = v58[0];
  v58[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::evaluateJavaScriptFunction(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, WTF::StringImpl *a4, uint64_t *a5, _BYTE *a6, uint64_t a7, Inspector::BackendDispatcher::CallbackBase **a8)
{
  WebKit::WebAutomationSession::evaluateJavaScriptFunction((WTF::String *)(a1 - 32), a2, a3, a4, a5, a6, a7, a8);
}

_DWORD *WebKit::WebAutomationSession::didEvaluateJavaScriptFunction(WebKit::WebAutomationSession *this, uint64_t a2, WTF::StringImpl **a3, const WTF::String *a4)
{
  uint64_t *v6;
  _QWORD *v7;
  _DWORD *result;
  Inspector::BackendDispatcher::CallbackBase *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback *v19;
  uint64_t v20;

  v20 = a2;
  v6 = (uint64_t *)((char *)this + 192);
  v7 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)this + 24, &v20);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(v6, v7, &v19);
  v9 = v19;
  if (v19)
  {
    if (*(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
    {
      v10 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(a4);
      if ((v10 & 0xFF00000000) != 0)
        v10 = v10;
      else
        v10 = 5;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v10, &v17);
      v11 = *a3;
      if (*a3)
        *(_DWORD *)v11 += 2;
      v16 = v11;
      WTF::makeString<WTF::String,char,WTF::String>((uint64_t *)&v17, 59, (uint64_t *)&v16, &v18);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v9, (const WTF::String *)&v18);
      v13 = v18;
      v18 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v16;
      v16 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v17;
      v17 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    else
    {
      Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback::sendSuccess(v19, (const WTF::String *)a3);
    }
    result = v19;
    v19 = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

void WebKit::WebAutomationSession::resolveChildFrameHandle(CFTypeRef *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, int *a4, _QWORD *a5, _QWORD *a6, Inspector::BackendDispatcher::CallbackBase **a7)
{
  BOOL v8;
  uint64_t v15;
  Inspector::BackendDispatcher::CallbackBase *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  Inspector::BackendDispatcher::CallbackBase *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  Inspector::BackendDispatcher::CallbackBase *v22;
  WTF::StringImpl *v23;
  Inspector::BackendDispatcher::CallbackBase *v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  __int128 *v30;
  _QWORD *v31;
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  char v40;
  __int128 v41;
  uint64_t v42;

  if (*((_BYTE *)a4 + 4))
    v8 = 0;
  else
    v8 = *a5 == 0;
  if (!v8 || *a6 != 0)
  {
    WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v36, (const WTF::String *)a1, a2);
    v15 = v36;
    if (v36)
    {
      v35 = 0;
      WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v33, (const WTF::String *)a1, a3, &v35);
      if (v35)
      {
        v16 = *a7;
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v41);
        Inspector::BackendDispatcher::CallbackBase::sendFailure(v16, (const WTF::String *)&v41);
        v18 = (WTF::StringImpl *)v41;
        *(_QWORD *)&v41 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v17);
          else
            *(_DWORD *)v18 -= 2;
        }
      }
      else
      {
        CFRetain(a1[1]);
        v24 = *a7;
        ++*((_DWORD *)v24 + 2);
        v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v25 = &off_1E34F3F58;
        v25[1] = a1;
        v25[2] = a1;
        v25[3] = v24;
        v32 = v25;
        if (*a6)
        {
          v41 = v33;
          v42 = v34;
          v28 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 1896);
          v29 = &v28;
          v30 = &v33;
          v31 = a6;
          v38 = (WTF::StringImpl *)&v29;
          v39 = &v32;
          v40 = 0;
          WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,Messages::WebAutomationSessionProxy::ResolveChildFrameWithNodeHandle &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(v15, (uint64_t)&v41, (uint64_t)&v38);
        }
        else if (*a5)
        {
          v41 = v33;
          v42 = v34;
          v28 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 1896);
          v29 = &v28;
          v30 = &v33;
          v31 = a5;
          v38 = (WTF::StringImpl *)&v29;
          v39 = &v32;
          v40 = 0;
          WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveChildFrameWithName,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,Messages::WebAutomationSessionProxy::ResolveChildFrameWithName &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(v15, (uint64_t)&v41, (uint64_t)&v38);
        }
        else if (*((_BYTE *)a4 + 4))
        {
          v41 = v33;
          v42 = v34;
          v26 = *a4;
          v28 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 1896);
          v29 = &v28;
          v30 = &v33;
          LODWORD(v31) = v26;
          v38 = (WTF::StringImpl *)&v29;
          v39 = &v32;
          v40 = 0;
          WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,Messages::WebAutomationSessionProxy::ResolveChildFrameWithOrdinal &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(v15, (uint64_t)&v41, (uint64_t)&v38);
        }
        v27 = v32;
        v32 = 0;
        if (v27)
          (*(void (**)(_QWORD *))(*v27 + 8))(v27);
      }
      CFRelease(*(CFTypeRef *)(v15 + 8));
      return;
    }
    v22 = *a7;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v41);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v22, (const WTF::String *)&v41);
    v23 = (WTF::StringImpl *)v41;
    *(_QWORD *)&v41 = 0;
    if (!v23)
      return;
LABEL_21:
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
    return;
  }
  v19 = *a7;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v37);
  *(_QWORD *)&v41 = "Command must specify a child frame by ordinal, name, or element handle.";
  *((_QWORD *)&v41 + 1) = 72;
  LOBYTE(v33) = 59;
  WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v37, (char *)&v33, (uint64_t *)&v41, &v38);
  if (!v38)
  {
    __break(0xC471u);
    return;
  }
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v19, (const WTF::String *)&v38);
  v21 = v38;
  v38 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v23 = v37;
  v37 = 0;
  if (v23)
    goto LABEL_21;
}

void `non-virtual thunk to'WebKit::WebAutomationSession::resolveChildFrameHandle(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, int *a4, _QWORD *a5, _QWORD *a6, Inspector::BackendDispatcher::CallbackBase **a7)
{
  WebKit::WebAutomationSession::resolveChildFrameHandle((CFTypeRef *)(a1 - 32), a2, a3, a4, a5, a6, a7);
}

void WebKit::WebAutomationSession::resolveParentFrameHandle(CFTypeRef *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  uint64_t v7;
  Inspector::BackendDispatcher::CallbackBase *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  Inspector::BackendDispatcher::CallbackBase *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  Inspector::BackendDispatcher::CallbackBase *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;
  __int128 v26;
  uint64_t v27;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v23, (const WTF::String *)a1, a2);
  v7 = v23;
  if (v23)
  {
    v22 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v20, (const WTF::String *)a1, a3, &v22);
    if (v22)
    {
      v8 = *a4;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v26);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v8, (const WTF::String *)&v26);
      v10 = (WTF::StringImpl *)v26;
      *(_QWORD *)&v26 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      CFRetain(a1[1]);
      v14 = *a4;
      ++*((_DWORD *)v14 + 2);
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v15 = &off_1E34F3F80;
      v15[1] = a1;
      v15[2] = a1;
      v15[3] = v14;
      v18[1] = &v20;
      v19 = v15;
      v26 = v20;
      v27 = v21;
      v17 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 1896);
      v18[0] = &v17;
      v24[0] = v18;
      v24[1] = &v19;
      v25 = 0;
      WebKit::WebPageProxy::sendToWebPage<WebCore::ProcessQualified<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ResolveParentFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)>>(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,Messages::WebAutomationSessionProxy::ResolveParentFrame &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)::SendOption>)::{lambda(WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>&)#1}>(v7, (uint64_t)&v26, (uint64_t)v24);
      v16 = v19;
      v19 = 0;
      if (v16)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  else
  {
    v11 = *a4;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v26);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v11, (const WTF::String *)&v26);
    v13 = (WTF::StringImpl *)v26;
    *(_QWORD *)&v26 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::resolveParentFrameHandle(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  WebKit::WebAutomationSession::resolveParentFrameHandle((CFTypeRef *)(a1 - 32), a2, a3, a4);
}

void WebKit::WebAutomationSession::computeElementLayout(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, _BYTE *a5, unsigned int a6, Inspector::BackendDispatcher::CallbackBase **a7)
{
  uint64_t v13;
  Inspector::BackendDispatcher::CallbackBase *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  Inspector::BackendDispatcher::CallbackBase *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  Inspector::BackendDispatcher::CallbackBase *v21;
  _QWORD *v22;
  BOOL v23;
  char v24;
  _QWORD *v25;
  Inspector::BackendDispatcher::CallbackBase *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  _QWORD *v34;
  WTF::StringImpl *v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  _QWORD v40[2];
  char v41;
  __int128 v42;
  uint64_t v43;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v39, a1, a2);
  v13 = v39;
  if (v39)
  {
    v38 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v36, a1, a3, &v38);
    if (v38)
    {
      v14 = *a7;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v29);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v14, (const WTF::String *)&v29);
      v16 = v29;
      v29 = 0;
      if (!v16)
      {
LABEL_27:
        CFRelease(*(CFTypeRef *)(v13 + 8));
        return;
      }
    }
    else
    {
      if (a6 < 3)
      {
        v20 = 0x10100u >> (8 * a6);
        v21 = *a7;
        ++*((_DWORD *)v21 + 2);
        v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v22 = &off_1E34F3FA8;
        v22[1] = v21;
        v34 = v22;
        if (a5[1])
          v23 = *a5 == 0;
        else
          v23 = 1;
        v24 = !v23;
        v42 = v36;
        v43 = v37;
        v28 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 1896);
        v29 = (WTF::StringImpl *)&v28;
        v30 = (uint64_t)&v36;
        v31 = a4;
        v32 = v24;
        v33 = v20;
        v40[0] = &v29;
        v40[1] = &v34;
        v41 = 0;
        WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(std::optional<std::optional<WTF::String> &&::ProcessQualified<std::optional<std::optional<WTF::String> &&::IntPoint> &&<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::ComputeElementLayout &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)::SendOption>)::{lambda(std::optional<std::optional<WTF::String> &&::IntPoint> &&<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&)#1}>(v13, (uint64_t)&v42, (uint64_t)v40);
        v25 = v34;
        v34 = 0;
        if (v25)
          (*(void (**)(_QWORD *))(*v25 + 8))(v25);
        goto LABEL_27;
      }
      v26 = *a7;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v35);
      v29 = (WTF::StringImpl *)"The parameter 'coordinateSystem' is invalid.";
      v30 = 45;
      LOBYTE(v40[0]) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v35, (char *)v40, (uint64_t *)&v29, &v42);
      if (!(_QWORD)v42)
      {
        __break(0xC471u);
        return;
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v26, (const WTF::String *)&v42);
      v27 = (WTF::StringImpl *)v42;
      *(_QWORD *)&v42 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v15);
        else
          *(_DWORD *)v27 -= 2;
      }
      v16 = v35;
      v35 = 0;
      if (!v16)
        goto LABEL_27;
    }
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
    goto LABEL_27;
  }
  v17 = *a7;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v29);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v17, (const WTF::String *)&v29);
  v19 = v29;
  v29 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::computeElementLayout(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, _BYTE *a5, unsigned int a6, Inspector::BackendDispatcher::CallbackBase **a7)
{
  WebKit::WebAutomationSession::computeElementLayout((WTF::String *)(a1 - 32), a2, a3, a4, a5, a6, a7);
}

void WebKit::WebAutomationSession::getComputedRole(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
  uint64_t v9;
  Inspector::BackendDispatcher::CallbackBase *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher::CallbackBase *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  Inspector::BackendDispatcher::CallbackBase *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[3];
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD v26[2];
  char v27;
  __int128 v28;
  uint64_t v29;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v25, a1, a2);
  v9 = v25;
  if (v25)
  {
    v24 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v22, a1, a3, &v24);
    if (v24)
    {
      v10 = *a5;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v28);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v10, (const WTF::String *)&v28);
      v12 = (WTF::StringImpl *)v28;
      *(_QWORD *)&v28 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    else
    {
      v16 = *a5;
      ++*((_DWORD *)v16 + 2);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = &off_1E34F3FD0;
      v17[1] = v16;
      v20[2] = a4;
      v21 = v17;
      v28 = v22;
      v29 = v23;
      v19 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 1896);
      v20[0] = &v19;
      v20[1] = &v22;
      v26[0] = v20;
      v26[1] = &v21;
      v27 = 0;
      WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::GetComputedRole,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::GetComputedRole &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(v9, (uint64_t)&v28, (uint64_t)v26);
      v18 = v21;
      v21 = 0;
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  else
  {
    v13 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v28);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v13, (const WTF::String *)&v28);
    v15 = (WTF::StringImpl *)v28;
    *(_QWORD *)&v28 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::getComputedRole(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
  WebKit::WebAutomationSession::getComputedRole((WTF::String *)(a1 - 32), a2, a3, a4, a5);
}

void WebKit::WebAutomationSession::getComputedLabel(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
  uint64_t v9;
  Inspector::BackendDispatcher::CallbackBase *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher::CallbackBase *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  Inspector::BackendDispatcher::CallbackBase *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[3];
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD v26[2];
  char v27;
  __int128 v28;
  uint64_t v29;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v25, a1, a2);
  v9 = v25;
  if (v25)
  {
    v24 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v22, a1, a3, &v24);
    if (v24)
    {
      v10 = *a5;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v28);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v10, (const WTF::String *)&v28);
      v12 = (WTF::StringImpl *)v28;
      *(_QWORD *)&v28 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    else
    {
      v16 = *a5;
      ++*((_DWORD *)v16 + 2);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = &off_1E34F3FF8;
      v17[1] = v16;
      v20[2] = a4;
      v21 = v17;
      v28 = v22;
      v29 = v23;
      v19 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 1896);
      v20[0] = &v19;
      v20[1] = &v22;
      v26[0] = v20;
      v26[1] = &v21;
      v27 = 0;
      WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::GetComputedLabel,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::GetComputedLabel &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,std::optional<WTF::String> &)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(v9, (uint64_t)&v28, (uint64_t)v26);
      v18 = v21;
      v21 = 0;
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  else
  {
    v13 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v28);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v13, (const WTF::String *)&v28);
    v15 = (WTF::StringImpl *)v28;
    *(_QWORD *)&v28 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::getComputedLabel(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
  WebKit::WebAutomationSession::getComputedLabel((WTF::String *)(a1 - 32), a2, a3, a4, a5);
}

void WebKit::WebAutomationSession::selectOptionElement(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
  uint64_t v9;
  Inspector::BackendDispatcher::CallbackBase *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  Inspector::BackendDispatcher::CallbackBase *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  Inspector::BackendDispatcher::CallbackBase *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[3];
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD v26[2];
  char v27;
  __int128 v28;
  uint64_t v29;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v25, a1, a2);
  v9 = v25;
  if (v25)
  {
    v24 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v22, a1, a3, &v24);
    if (v24)
    {
      v10 = *a5;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v28);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v10, (const WTF::String *)&v28);
      v12 = (WTF::StringImpl *)v28;
      *(_QWORD *)&v28 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    else
    {
      v16 = *a5;
      ++*((_DWORD *)v16 + 2);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = &off_1E34F4020;
      v17[1] = v16;
      v20[2] = a4;
      v21 = v17;
      v28 = v22;
      v29 = v23;
      v19 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 1896);
      v20[0] = &v19;
      v20[1] = &v22;
      v26[0] = v20;
      v26[1] = &v21;
      v27 = 0;
      WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::SelectOptionElement,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::SelectOptionElement &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(v9, (uint64_t)&v28, (uint64_t)v26);
      v18 = v21;
      v21 = 0;
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  else
  {
    v13 = *a5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v28);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v13, (const WTF::String *)&v28);
    v15 = (WTF::StringImpl *)v28;
    *(_QWORD *)&v28 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::selectOptionElement(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, Inspector::BackendDispatcher::CallbackBase **a5)
{
  WebKit::WebAutomationSession::selectOptionElement((WTF::String *)(a1 - 32), a2, a3, a4, a5);
}

void WebKit::WebAutomationSession::isShowingJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a3;
  if (!*((_QWORD *)this + 7))
  {
    v7 = 5;
LABEL_6:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v7, a3);
    v6 = 1;
    goto LABEL_7;
  }
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v8, this, a2);
  v5 = v8;
  if (!v8)
  {
    a3 = v3;
    v7 = 9;
    goto LABEL_6;
  }
  *(_BYTE *)v3 = (*(uint64_t (**)(_QWORD, WebKit::WebAutomationSession *, uint64_t))(**((_QWORD **)this + 7)
                                                                                            + 72))(*((_QWORD *)this + 7), this, v8);
  CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = 0;
LABEL_7:
  *((_DWORD *)v3 + 2) = v6;
}

void `non-virtual thunk to'WebKit::WebAutomationSession::isShowingJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  WebKit::WebAutomationSession::isShowingJavaScriptDialog((WebKit::WebAutomationSession *)((char *)this - 32), a2, a3);
}

void WebKit::WebAutomationSession::dismissCurrentJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a3;
  if (!*((_QWORD *)this + 7))
  {
    v7 = 5;
LABEL_7:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v7, a3);
    *((_BYTE *)v3 + 8) = 1;
    return;
  }
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v8, this, a2);
  v5 = v8;
  if (!v8)
  {
    a3 = v3;
    v7 = 9;
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(_QWORD, WebKit::WebAutomationSession *, uint64_t))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7), this, v8) & 1) != 0)
  {
    (*(void (**)(_QWORD, WebKit::WebAutomationSession *, uint64_t))(**((_QWORD **)this + 7) + 80))(*((_QWORD *)this + 7), this, v5);
    v6 = 0;
    *(_BYTE *)v3 = 0;
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(14, v3);
    v6 = 1;
  }
  *((_BYTE *)v3 + 8) = v6;
  CFRelease(*(CFTypeRef *)(v5 + 8));
}

void `non-virtual thunk to'WebKit::WebAutomationSession::dismissCurrentJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  WebKit::WebAutomationSession::dismissCurrentJavaScriptDialog((WebKit::WebAutomationSession *)((char *)this - 32), a2, a3);
}

void WebKit::WebAutomationSession::acceptCurrentJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a3;
  if (!*((_QWORD *)this + 7))
  {
    v7 = 5;
LABEL_7:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v7, a3);
    *((_BYTE *)v3 + 8) = 1;
    return;
  }
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v8, this, a2);
  v5 = v8;
  if (!v8)
  {
    a3 = v3;
    v7 = 9;
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(_QWORD, WebKit::WebAutomationSession *, uint64_t))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7), this, v8) & 1) != 0)
  {
    (*(void (**)(_QWORD, WebKit::WebAutomationSession *, uint64_t))(**((_QWORD **)this + 7) + 88))(*((_QWORD *)this + 7), this, v5);
    v6 = 0;
    *(_BYTE *)v3 = 0;
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(14, v3);
    v6 = 1;
  }
  *((_BYTE *)v3 + 8) = v6;
  CFRelease(*(CFTypeRef *)(v5 + 8));
}

void `non-virtual thunk to'WebKit::WebAutomationSession::acceptCurrentJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  WebKit::WebAutomationSession::acceptCurrentJavaScriptDialog((WebKit::WebAutomationSession *)((char *)this - 32), a2, a3);
}

void WebKit::WebAutomationSession::messageOfCurrentJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a3;
  if (!*((_QWORD *)this + 7))
  {
    v8 = 5;
LABEL_7:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v8, a3);
    *((_DWORD *)v3 + 2) = 1;
    return;
  }
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v10, this, a2);
  v5 = v10;
  if (!v10)
  {
    a3 = v3;
    v8 = 9;
    goto LABEL_7;
  }
  if (((*(uint64_t (**)(_QWORD, WebKit::WebAutomationSession *, uint64_t))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7), this, v10) & 1) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, WebKit::WebAutomationSession *, uint64_t))(**((_QWORD **)this + 7) + 96))(&v9, *((_QWORD *)this + 7), this, v5);
    v6 = 0;
    v7 = v9;
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(14, &v9);
    v7 = v9;
    v6 = 1;
  }
  *v3 = v7;
  *((_DWORD *)v3 + 2) = v6;
  CFRelease(*(CFTypeRef *)(v5 + 8));
}

void `non-virtual thunk to'WebKit::WebAutomationSession::messageOfCurrentJavaScriptDialog(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X8>)
{
  WebKit::WebAutomationSession::messageOfCurrentJavaScriptDialog((WebKit::WebAutomationSession *)((char *)this - 32), a2, a3);
}

void WebKit::WebAutomationSession::setUserInputForCurrentJavaScriptPrompt(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE *v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  WebKit::WebAutomationSession *v13;
  const WTF::String *v14;
  const WTF::String *v15;
  uint64_t v16;

  v4 = a4;
  if (!*((_QWORD *)this + 7))
  {
    v11 = 5;
LABEL_9:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v11, a4);
    v4[8] = 1;
    return;
  }
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v16, this, a2);
  v7 = v16;
  if (!v16)
  {
    a4 = v4;
    v11 = 9;
    goto LABEL_9;
  }
  if (((*(uint64_t (**)(_QWORD, WebKit::WebAutomationSession *, uint64_t))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7), this, v16) & 1) != 0)
  {
    v8 = (*(uint64_t (**)(_QWORD, WebKit::WebAutomationSession *, uint64_t))(**((_QWORD **)this + 7) + 112))(*((_QWORD *)this + 7), this, v7);
    if ((v8 & 0xFF00000000) == 0)
    {
      v13 = (WebKit::WebAutomationSession *)std::__throw_bad_optional_access[abi:sn180100]();
      return;
    }
    if (v8 >= 2)
    {
      if ((_DWORD)v8 != 3)
      {
        (*(void (**)(_QWORD, WebKit::WebAutomationSession *, uint64_t, const WTF::String *))(**((_QWORD **)this + 7) + 104))(*((_QWORD *)this + 7), this, v7, a3);
        v12 = 0;
        *v4 = 0;
        goto LABEL_12;
      }
      v9 = v4;
      v10 = 15;
    }
    else
    {
      v9 = v4;
      v10 = 19;
    }
  }
  else
  {
    v9 = v4;
    v10 = 14;
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v10, v9);
  v12 = 1;
LABEL_12:
  v4[8] = v12;
  CFRelease(*(CFTypeRef *)(v7 + 8));
}

void `non-virtual thunk to'WebKit::WebAutomationSession::setUserInputForCurrentJavaScriptPrompt(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, _QWORD *a4@<X8>)
{
  WebKit::WebAutomationSession::setUserInputForCurrentJavaScriptPrompt((WebKit::WebAutomationSession *)((char *)this - 32), a2, a3, a4);
}

uint64_t WebKit::WebAutomationSession::setFilesToSelectForFileUpload@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, WTF::JSONImpl::ArrayBase **a3@<X2>, WTF::JSONImpl::ArrayBase **a4@<X3>, uint64_t a5@<X8>)
{
  WTF::JSONImpl::ArrayBase *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::JSONImpl::Value *v15;
  WTF::StringImpl *v16;
  WTF::JSONImpl::Value *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  char v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  WTF::JSONImpl::Value *v46;
  uint64_t v47;

  v43 = 0;
  v44 = 0;
  v9 = *a3;
  v10 = *((unsigned int *)*a3 + 7);
  if ((_DWORD)v10)
  {
    if (v10 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x197689690);
    }
    v11 = WTF::fastMalloc((WTF *)(8 * v10));
    LODWORD(v44) = v10;
    v43 = v11;
    v9 = *a3;
  }
  else
  {
    v11 = 0;
  }
  if (*a4)
  {
    v12 = *((_DWORD *)*a4 + 7);
    if (v12 != *((_DWORD *)v9 + 7))
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v42);
      v46 = (WTF::JSONImpl::Value *)"The parameters 'filenames' and 'fileContents' must have equal length.";
      v47 = 70;
      LOBYTE(v41) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v42, (char *)&v41, (uint64_t *)&v46, &v36);
      if (!v36)
      {
        __break(0xC471u);
LABEL_79:
        JUMPOUT(0x197689680);
      }
      *(_QWORD *)a5 = v36;
      *(_BYTE *)(a5 + 8) = 1;
      v36 = 0;
      v13 = v42;
      v42 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
    }
  }
  else
  {
    v12 = *((_DWORD *)v9 + 7);
  }
  if (v12)
  {
    v14 = 0;
    while (1)
    {
      WTF::JSONImpl::ArrayBase::get(v9);
      WTF::JSONImpl::Value::asString(v46);
      v15 = v46;
      v46 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v15;
      }
      v16 = v41;
      if (v41)
      {
        if (*a4)
        {
          WTF::JSONImpl::ArrayBase::get(*a4);
          WTF::JSONImpl::Value::asString(v46);
          v17 = v46;
          v46 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v17;
          }
          if (v39)
          {
            WebKit::WebAutomationSession::platformGenerateLocalFilePathForRemoteFile((const WTF::String *)&v41, (const WTF::String *)&v39, &v36);
            if (v37)
            {
              v22 = HIDWORD(v44);
              if (HIDWORD(v44) == (_DWORD)v44)
              {
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v43, (unint64_t)&v36);
                v21 = 0;
              }
              else
              {
                v23 = v43;
                v24 = v36;
                if (v36)
                  *(_DWORD *)v36 += 2;
                v21 = 0;
                *(_QWORD *)(v23 + 8 * v22) = v24;
                HIDWORD(v44) = v22 + 1;
              }
            }
            else
            {
              Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v34);
              v46 = (WTF::JSONImpl::Value *)"The remote file could not be saved to a local temporary directory.";
              v47 = 67;
              v45 = 59;
              WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v34, &v45, (uint64_t *)&v46, &v35);
              if (!v35)
              {
                __break(0xC471u);
                JUMPOUT(0x197689698);
              }
              *(_QWORD *)a5 = v35;
              *(_BYTE *)(a5 + 8) = 1;
              v26 = v34;
              v34 = 0;
              v35 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, a2);
                else
                  *(_DWORD *)v26 -= 2;
              }
              v21 = 1;
            }
            if (v37)
            {
              v27 = v36;
              v36 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, a2);
                else
                  *(_DWORD *)v27 -= 2;
              }
            }
          }
          else
          {
            Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v38);
            v46 = (WTF::JSONImpl::Value *)"The parameter 'fileContents' contains a non-string value.";
            v47 = 58;
            LOBYTE(v35) = 59;
            WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v38, (char *)&v35, (uint64_t *)&v46, &v36);
            if (!v36)
            {
              __break(0xC471u);
              JUMPOUT(0x197689688);
            }
            *(_QWORD *)a5 = v36;
            *(_BYTE *)(a5 + 8) = 1;
            v36 = 0;
            v25 = v38;
            v38 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, a2);
              else
                *(_DWORD *)v25 -= 2;
            }
            v21 = 1;
          }
          v28 = v39;
          v39 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, a2);
            else
              *(_DWORD *)v28 -= 2;
          }
        }
        else
        {
          v19 = HIDWORD(v44);
          if (HIDWORD(v44) == (_DWORD)v44)
          {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v43, (unint64_t)&v41);
          }
          else
          {
            v20 = v43;
            *(_DWORD *)v41 += 2;
            *(_QWORD *)(v20 + 8 * v19) = v16;
            HIDWORD(v44) = v19 + 1;
          }
          v21 = 6;
        }
      }
      else
      {
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v40);
        v46 = (WTF::JSONImpl::Value *)"The parameter 'filenames' contains a non-string value.";
        v47 = 55;
        LOBYTE(v39) = 59;
        WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v40, (char *)&v39, (uint64_t *)&v46, &v36);
        if (!v36)
        {
          __break(0xC471u);
          goto LABEL_79;
        }
        *(_QWORD *)a5 = v36;
        *(_BYTE *)(a5 + 8) = 1;
        v36 = 0;
        v18 = v40;
        v40 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, a2);
          else
            *(_DWORD *)v18 -= 2;
        }
        v21 = 1;
      }
      v29 = v41;
      v41 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, a2);
        else
          *(_DWORD *)v29 -= 2;
      }
      if (v21 != 6 && v21)
        return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
      ++v14;
      v9 = *a3;
      if (v14 >= *((unsigned int *)*a3 + 7))
      {
        v11 = v43;
        v30 = v44;
        goto LABEL_71;
      }
    }
  }
  v30 = v10;
LABEL_71:
  v31 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v11;
  v43 = v31;
  v32 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v30;
  v44 = v32;
  *(_BYTE *)a5 = 0;
  *(_BYTE *)(a5 + 8) = 0;
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v43, a2);
}

uint64_t `non-virtual thunk to'WebKit::WebAutomationSession::setFilesToSelectForFileUpload@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, WTF::JSONImpl::ArrayBase **a3@<X2>, WTF::JSONImpl::ArrayBase **a4@<X3>, uint64_t a5@<X8>)
{
  return WebKit::WebAutomationSession::setFilesToSelectForFileUpload(a1 - 32, a2, a3, a4, a5);
}

void WebKit::WebAutomationSession::setFilesForInputFileUpload(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, WTF::JSONImpl::ArrayBase **a5, Inspector::BackendDispatcher::CallbackBase **a6)
{
  uint64_t v11;
  Inspector::BackendDispatcher::CallbackBase *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  Inspector::BackendDispatcher::CallbackBase *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::JSONImpl::ArrayBase *v19;
  unint64_t i;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Inspector::BackendDispatcher::CallbackBase *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  Inspector::BackendDispatcher::CallbackBase *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  WTF::StringImpl *v46[2];
  char v47;
  __int128 v48;
  uint64_t v49;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v45, a1, a2);
  v11 = v45;
  if (v45)
  {
    v44 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v42, a1, a3, &v44);
    if (v44)
    {
      v12 = *a6;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v34);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v12, (const WTF::String *)&v34);
      v14 = v34;
      v34 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    else
    {
      v40 = 0;
      v41 = 0;
      v18 = *((unsigned int *)*a5 + 7);
      if ((_DWORD)v18)
      {
        if (v18 >> 29)
        {
          __break(0xC471u);
LABEL_45:
          JUMPOUT(0x1976899ECLL);
        }
        LODWORD(v41) = *((_DWORD *)*a5 + 7);
        v40 = WTF::fastMalloc((WTF *)(8 * v18));
        v19 = *a5;
        if (*((_DWORD *)*a5 + 7))
        {
          for (i = 0; i < *((unsigned int *)*a5 + 7); ++i)
          {
            WTF::JSONImpl::ArrayBase::get(v19);
            WTF::JSONImpl::Value::asString(v34);
            v22 = v34;
            v34 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v22;
            }
            v23 = v48;
            if ((_QWORD)v48)
            {
              v24 = HIDWORD(v41);
              if (HIDWORD(v41) == (_DWORD)v41)
              {
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v40, (unint64_t)&v48);
              }
              else
              {
                v25 = v40;
                *(_DWORD *)v48 += 2;
                *(_QWORD *)(v25 + 8 * v24) = v23;
                HIDWORD(v41) = v24 + 1;
              }
            }
            else
            {
              v26 = *a6;
              Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v39);
              v34 = (WTF::StringImpl *)"The parameter 'filenames' contains a non-string value.";
              v35 = 55;
              LOBYTE(v38) = 59;
              WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v39, (char *)&v38, (uint64_t *)&v34, v46);
              if (!v46[0])
              {
                __break(0xC471u);
                goto LABEL_45;
              }
              Inspector::BackendDispatcher::CallbackBase::sendFailure(v26, (const WTF::String *)v46);
              v27 = v46[0];
              v46[0] = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, v21);
                else
                  *(_DWORD *)v27 -= 2;
              }
              v28 = v39;
              v39 = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2)
                  WTF::StringImpl::destroy(v28, v21);
                else
                  *(_DWORD *)v28 -= 2;
              }
            }
            v29 = (WTF::StringImpl *)v48;
            *(_QWORD *)&v48 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v21);
              else
                *(_DWORD *)v29 -= 2;
            }
            if (!v23)
              goto LABEL_38;
            v19 = *a5;
          }
        }
      }
      v30 = *a6;
      ++*((_DWORD *)v30 + 2);
      v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v31 = &off_1E34F4048;
      v31[1] = v30;
      v48 = v42;
      v49 = v43;
      v33 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 1896);
      v34 = (WTF::StringImpl *)&v33;
      v35 = (uint64_t)&v42;
      v36 = a4;
      v37 = &v40;
      v38 = v31;
      v46[0] = (WTF::StringImpl *)&v34;
      v46[1] = (WTF::StringImpl *)&v38;
      v47 = 0;
      WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)>>(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::SetFilesForInputFileUpload &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)> &&,WTF::OptionSet<WTF::ObjectIdentifierGeneric::SendOption>)::{lambda(std::optional<WebCore::ProcessQualified<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&)><WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>&)#1}>(v11, (uint64_t)&v48, (uint64_t)v46);
      v32 = v38;
      v38 = 0;
      if (v32)
        (*(void (**)(_QWORD *))(*v32 + 8))(v32);
LABEL_38:
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v21);
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  else
  {
    v15 = *a6;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v34);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v15, (const WTF::String *)&v34);
    v17 = v34;
    v34 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::setFilesForInputFileUpload(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, WTF::JSONImpl::ArrayBase **a5, Inspector::BackendDispatcher::CallbackBase **a6)
{
  WebKit::WebAutomationSession::setFilesForInputFileUpload((WTF::String *)(a1 - 32), a2, a3, a4, a5, a6);
}

void WebKit::WebAutomationSession::getAllCookies(WTF::String *a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  uint64_t v4;
  Inspector::BackendDispatcher::CallbackBase *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  void *v11;
  WTF::StringImpl *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22[2];
  char v23;
  IPC::Encoder *v24;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v21, a1, a2);
  v4 = v21;
  v5 = *a3;
  if (v21)
  {
    ++*((_DWORD *)v5 + 2);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = &off_1E34F4070;
    v6[1] = v5;
    v7 = *(_QWORD *)(v4 + 208);
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 1896);
    LOBYTE(v18) = 0;
    v19 = 0;
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 1534;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v24 = (IPC::Encoder *)v8;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, &v20);
    IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>((IPC::Encoder *)v8, &v18);
    v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v9 = &off_1E34F4098;
    *((_QWORD *)v9 + 1) = v6;
    v10 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v22[0] = v9;
    v22[1] = v10;
    v23 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v24, 0, (uint64_t)v22, 1);
    if (v23)
    {
      v12 = v22[0];
      v22[0] = 0;
      if (v12)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v12 + 8))(v12);
    }
    v13 = v24;
    v24 = 0;
    if (v13)
    {
      IPC::Encoder::~Encoder(v13, v11);
      WTF::fastFree(v14, v15);
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, v22);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v5, (const WTF::String *)v22);
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::getAllCookies(uint64_t a1, WTF::StringImpl **a2, Inspector::BackendDispatcher::CallbackBase **a3)
{
  WebKit::WebAutomationSession::getAllCookies((WTF::String *)(a1 - 32), a2, a3);
}

void WebKit::WebAutomationSession::deleteSingleCookie(WTF::String *a1, WTF::StringImpl **a2, uint64_t *a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  uint64_t v6;
  Inspector::BackendDispatcher::CallbackBase *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  void *v14;
  WTF::StringImpl *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _BYTE v21[24];
  uint64_t v22;
  uint64_t *v23[3];
  uint64_t v24;
  WTF::StringImpl *v25[2];
  char v26;
  IPC::Encoder *v27;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v24, a1, a2);
  v6 = v24;
  v7 = *a4;
  if (v24)
  {
    ++*((_DWORD *)v7 + 2);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E34F40C0;
    v8[1] = v7;
    v9 = *(_QWORD *)(v6 + 208);
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 1896);
    v21[0] = 0;
    v21[16] = 0;
    v22 = v10;
    v23[0] = &v22;
    v23[1] = (uint64_t *)v21;
    v23[2] = a3;
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 1530;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v27 = (IPC::Encoder *)v11;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v11, v23);
    v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v12 = &off_1E34F40E8;
    *((_QWORD *)v12 + 1) = v8;
    v13 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v25[0] = v12;
    v25[1] = v13;
    v26 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v9, &v27, 0, (uint64_t)v25, 1);
    if (v26)
    {
      v15 = v25[0];
      v25[0] = 0;
      if (v15)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v15 + 8))(v15);
    }
    v16 = v27;
    v27 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v17, v18);
    }
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, v25);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v7, (const WTF::String *)v25);
    v20 = v25[0];
    v25[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::deleteSingleCookie(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  WebKit::WebAutomationSession::deleteSingleCookie((WTF::String *)(a1 - 32), a2, a3, a4);
}

void WebKit::WebAutomationSession::addSingleCookie(WTF::String *a1, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  Inspector::BackendDispatcher::CallbackBase *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::JSONImpl::ObjectBase *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::JSONImpl::ObjectBase *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  Inspector::BackendDispatcher::CallbackBase *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::JSONImpl::ObjectBase *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  Inspector::BackendDispatcher::CallbackBase *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  Inspector::BackendDispatcher::CallbackBase *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::JSONImpl::ObjectBase *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::JSONImpl::ObjectBase *v52;
  WTF::StringImpl *v53;
  double v54;
  char v55;
  WTF::StringImpl *v56;
  Inspector::BackendDispatcher::CallbackBase *v57;
  WTF::StringImpl *v58;
  WTF::JSONImpl::ObjectBase *v59;
  WTF::StringImpl *v60;
  unsigned __int16 Boolean;
  WTF::StringImpl *v62;
  Inspector::BackendDispatcher::CallbackBase *v63;
  WTF::StringImpl *v64;
  Inspector::BackendDispatcher::CallbackBase *v65;
  WTF::StringImpl *v66;
  WTF::JSONImpl::ObjectBase *v67;
  WTF::StringImpl *v68;
  unsigned __int16 v69;
  WTF::StringImpl *v70;
  Inspector::BackendDispatcher::CallbackBase *v71;
  WTF::StringImpl *v72;
  WTF::JSONImpl::ObjectBase *v73;
  WTF::StringImpl *v74;
  unsigned __int16 v75;
  WTF::StringImpl *v76;
  Inspector::BackendDispatcher::CallbackBase *v77;
  WTF::StringImpl *v78;
  WTF::JSONImpl::ObjectBase *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  char v83;
  Inspector::BackendDispatcher::CallbackBase *v84;
  WTF::StringImpl *v85;
  Inspector::BackendDispatcher::CallbackBase *v86;
  WTF::StringImpl *v87;
  API::HTTPCookieStore *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  _DWORD *v93;
  _DWORD *v94;
  int v95;
  void *v96;
  Inspector::BackendDispatcher::CallbackBase *v97;
  _QWORD *v98;
  void *v99;
  void *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  _QWORD *v104;
  WTF::StringImpl *v105[2];
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119[2];
  WTF::StringImpl *v120[6];
  _DWORD *v121;
  _DWORD *v122;
  __int128 v123;
  __int128 v124;
  void *__src;
  uint64_t v126;
  char v127;
  _QWORD v128[5];
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  _OWORD v134[2];
  _DWORD *v135;
  _DWORD *v136;
  __int128 v137;
  __int128 v138;
  void *v139;
  int v140;
  int v141;
  char v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v129, a1, a2);
  v6 = v129;
  if (v129)
  {
    WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(_QWORD *)(v129 + 32) + 968), v119);
    MEMORY[0x19AEABB0C](v128, v119, 0);
    v8 = v119[0];
    v119[0] = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    LOBYTE(v120[4]) = 0;
    LOWORD(v120[5]) = 0;
    BYTE2(v120[5]) = 0;
    *(_OWORD *)v119 = 0u;
    memset(v120, 0, 25);
    v121 = 0;
    v122 = 0;
    WTF::URL::invalidate((WTF::URL *)&v122);
    __src = 0;
    v126 = 0;
    v127 = 0;
    v12 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v105[0] = (WTF::StringImpl *)v130;
    WTF::JSONImpl::ObjectBase::getString(v12, (const WTF::String *)v105);
    v14 = (WTF::StringImpl *)v130;
    v130 = 0;
    v15 = v119[0];
    v119[0] = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::destroy(v15, v13);
        v16 = (WTF::StringImpl *)v130;
        v130 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v13);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v15 -= 2;
        v130 = 0;
      }
    }
    v17 = v105[0];
    v105[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    if (!v119[0])
    {
      v22 = *a4;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v118);
      v130 = "The parameter 'name' was not found.";
      v131 = 36;
      LOBYTE(v116) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v118, (char *)&v116, (uint64_t *)&v130, v105);
      if (!v105[0])
      {
        __break(0xC471u);
        JUMPOUT(0x19768AB70);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v22, (const WTF::String *)v105);
      v24 = v105[0];
      v105[0] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v23);
        else
          *(_DWORD *)v24 -= 2;
      }
      v26 = v118;
      v118 = 0;
      if (!v26)
        goto LABEL_199;
      goto LABEL_196;
    }
    v18 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v105[0] = (WTF::StringImpl *)v130;
    WTF::JSONImpl::ObjectBase::getString(v18, (const WTF::String *)v105);
    v20 = (WTF::StringImpl *)v130;
    v130 = 0;
    v21 = v119[1];
    v119[1] = v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, v19);
        v25 = (WTF::StringImpl *)v130;
        v130 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v19);
          else
            *(_DWORD *)v25 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v21 -= 2;
        v130 = 0;
      }
    }
    v27 = v105[0];
    v105[0] = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v19);
      else
        *(_DWORD *)v27 -= 2;
    }
    if (!v119[1])
    {
      v31 = *a4;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v117);
      v130 = "The parameter 'value' was not found.";
      v131 = 37;
      LOBYTE(v116) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v117, (char *)&v116, (uint64_t *)&v130, v105);
      if (!v105[0])
      {
        __break(0xC471u);
        JUMPOUT(0x19768AB78);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v31, (const WTF::String *)v105);
      v32 = v105[0];
      v105[0] = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v23);
        else
          *(_DWORD *)v32 -= 2;
      }
      v26 = v117;
      v117 = 0;
      if (!v26)
        goto LABEL_199;
      goto LABEL_196;
    }
    v28 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v105[0] = (WTF::StringImpl *)v130;
    WTF::JSONImpl::ObjectBase::getString(v28, (const WTF::String *)v105);
    v30 = v105[0];
    v105[0] = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v29);
      else
        *(_DWORD *)v30 -= 2;
    }
    v33 = v116;
    if (!v116)
    {
      v37 = *a4;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v115);
      v130 = "The parameter 'domain' was not found.";
      v131 = 38;
      LOBYTE(v108) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v115, (char *)&v108, (uint64_t *)&v130, v105);
      if (!v105[0])
      {
        __break(0xC471u);
        JUMPOUT(0x19768AB80);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v37, (const WTF::String *)v105);
      v38 = v105[0];
      v105[0] = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v23);
        else
          *(_DWORD *)v38 -= 2;
      }
      v45 = v115;
      v115 = 0;
      if (v45)
        goto LABEL_192;
      goto LABEL_195;
    }
    if (*((_DWORD *)v116 + 1))
    {
      *(_DWORD *)v116 += 2;
      v114 = v33;
      WebKit::domainByAddingDotPrefixIfNeeded((uint64_t *)&v130, (uint64_t *)&v114);
      v35 = (WTF::StringImpl *)v130;
      v130 = 0;
      v36 = v120[0];
      v120[0] = v35;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::destroy(v36, v34);
          v44 = (WTF::StringImpl *)v130;
          v130 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v34);
            else
              *(_DWORD *)v44 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v36 -= 2;
          v130 = 0;
        }
      }
      v42 = v114;
      v114 = 0;
      if (!v42)
        goto LABEL_78;
    }
    else
    {
      WTF::URL::host((WTF::URL *)v128);
      if ((v39 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      v41 = (WTF::StringImpl *)v130;
      v130 = 0;
      v42 = v120[0];
      v120[0] = v41;
      if (!v42)
        goto LABEL_78;
      v43 = *(_DWORD *)v42 - 2;
      if (*(_DWORD *)v42 != 2)
      {
LABEL_76:
        *(_DWORD *)v42 = v43;
        goto LABEL_78;
      }
      WTF::StringImpl::destroy(v42, v40);
      v42 = (WTF::StringImpl *)v130;
      v130 = 0;
      if (!v42)
      {
LABEL_78:
        v46 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v105[0] = (WTF::StringImpl *)v130;
        WTF::JSONImpl::ObjectBase::getString(v46, (const WTF::String *)v105);
        v48 = (WTF::StringImpl *)v130;
        v130 = 0;
        v49 = v120[1];
        v120[1] = v48;
        if (v49)
        {
          if (*(_DWORD *)v49 == 2)
          {
            WTF::StringImpl::destroy(v49, v47);
            v50 = (WTF::StringImpl *)v130;
            v130 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
                WTF::StringImpl::destroy(v50, v47);
              else
                *(_DWORD *)v50 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v49 -= 2;
            v130 = 0;
          }
        }
        v51 = v105[0];
        v105[0] = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            WTF::StringImpl::destroy(v51, v47);
          else
            *(_DWORD *)v51 -= 2;
        }
        if (!v120[1])
        {
          v57 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v113);
          v130 = "The parameter 'path' was not found.";
          v131 = 36;
          LOBYTE(v108) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v113, (char *)&v108, (uint64_t *)&v130, v105);
          if (!v105[0])
          {
            __break(0xC471u);
            JUMPOUT(0x19768AB88);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v57, (const WTF::String *)v105);
          v58 = v105[0];
          v105[0] = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, v23);
            else
              *(_DWORD *)v58 -= 2;
          }
          v45 = v113;
          v113 = 0;
          if (v45)
            goto LABEL_192;
          goto LABEL_195;
        }
        v52 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v105[0] = (WTF::StringImpl *)v130;
        v54 = COERCE_DOUBLE(WTF::JSONImpl::ObjectBase::getDouble(v52, (const WTF::String *)v105));
        v55 = (char)v53;
        v56 = v105[0];
        v105[0] = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, v53);
          else
            *(_DWORD *)v56 -= 2;
        }
        if (!v55)
        {
          v63 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v112);
          v130 = "The parameter 'expires' was not found.";
          v131 = 39;
          LOBYTE(v108) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v112, (char *)&v108, (uint64_t *)&v130, v105);
          if (!v105[0])
          {
            __break(0xC471u);
            JUMPOUT(0x19768AB90);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v63, (const WTF::String *)v105);
          v64 = v105[0];
          v105[0] = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
              WTF::StringImpl::destroy(v64, v23);
            else
              *(_DWORD *)v64 -= 2;
          }
          v45 = v112;
          v112 = 0;
          if (v45)
            goto LABEL_192;
          goto LABEL_195;
        }
        *(double *)&v120[3] = v54 * 1000.0;
        LOBYTE(v120[4]) = 1;
        v59 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v105[0] = (WTF::StringImpl *)v130;
        Boolean = WTF::JSONImpl::ObjectBase::getBoolean(v59, (const WTF::String *)v105);
        v62 = v105[0];
        v105[0] = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
            WTF::StringImpl::destroy(v62, v60);
          else
            *(_DWORD *)v62 -= 2;
        }
        if (Boolean <= 0xFFu)
        {
          v65 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v111);
          v130 = "The parameter 'secure' was not found.";
          v131 = 38;
          LOBYTE(v108) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v111, (char *)&v108, (uint64_t *)&v130, v105);
          if (!v105[0])
          {
            __break(0xC471u);
            JUMPOUT(0x19768AB98);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v65, (const WTF::String *)v105);
          v66 = v105[0];
          v105[0] = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2)
              WTF::StringImpl::destroy(v66, v23);
            else
              *(_DWORD *)v66 -= 2;
          }
          v45 = v111;
          v111 = 0;
          if (!v45)
            goto LABEL_195;
LABEL_192:
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v23);
          else
            *(_DWORD *)v45 -= 2;
          goto LABEL_195;
        }
        BYTE1(v120[5]) = Boolean;
        v67 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v105[0] = (WTF::StringImpl *)v130;
        v69 = WTF::JSONImpl::ObjectBase::getBoolean(v67, (const WTF::String *)v105);
        v70 = v105[0];
        v105[0] = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, v68);
          else
            *(_DWORD *)v70 -= 2;
        }
        if (v69 <= 0xFFu)
        {
          v71 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v110);
          v130 = "The parameter 'session' was not found.";
          v131 = 39;
          LOBYTE(v108) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v110, (char *)&v108, (uint64_t *)&v130, v105);
          if (!v105[0])
          {
            __break(0xC471u);
            JUMPOUT(0x19768ABA0);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v71, (const WTF::String *)v105);
          v72 = v105[0];
          v105[0] = 0;
          if (v72)
          {
            if (*(_DWORD *)v72 == 2)
              WTF::StringImpl::destroy(v72, v23);
            else
              *(_DWORD *)v72 -= 2;
          }
          v45 = v110;
          v110 = 0;
          if (v45)
            goto LABEL_192;
LABEL_195:
          v26 = v116;
          v116 = 0;
          if (!v26)
          {
LABEL_199:
            WebCore::Cookie::~Cookie((WebCore::Cookie *)v119, v23);
            v103 = (WTF::StringImpl *)v128[0];
            v128[0] = 0;
            if (v103)
            {
              if (*(_DWORD *)v103 == 2)
                WTF::StringImpl::destroy(v103, v102);
              else
                *(_DWORD *)v103 -= 2;
            }
            if (v129)
              CFRelease(*(CFTypeRef *)(v129 + 8));
            return;
          }
LABEL_196:
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v23);
          else
            *(_DWORD *)v26 -= 2;
          goto LABEL_199;
        }
        BYTE2(v120[5]) = v69;
        v73 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v105[0] = (WTF::StringImpl *)v130;
        v75 = WTF::JSONImpl::ObjectBase::getBoolean(v73, (const WTF::String *)v105);
        v76 = v105[0];
        v105[0] = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
            WTF::StringImpl::destroy(v76, v74);
          else
            *(_DWORD *)v76 -= 2;
        }
        if (v75 <= 0xFFu)
        {
          v77 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v109);
          v130 = "The parameter 'httpOnly' was not found.";
          v131 = 40;
          LOBYTE(v108) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v109, (char *)&v108, (uint64_t *)&v130, v105);
          if (!v105[0])
          {
            __break(0xC471u);
            JUMPOUT(0x19768ABA8);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v77, (const WTF::String *)v105);
          v78 = v105[0];
          v105[0] = 0;
          if (v78)
          {
            if (*(_DWORD *)v78 == 2)
              WTF::StringImpl::destroy(v78, v23);
            else
              *(_DWORD *)v78 -= 2;
          }
          v45 = v109;
          v109 = 0;
          if (v45)
            goto LABEL_192;
          goto LABEL_195;
        }
        LOBYTE(v120[5]) = v75;
        v79 = *a3;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v105[0] = (WTF::StringImpl *)v130;
        WTF::JSONImpl::ObjectBase::getString(v79, (const WTF::String *)v105);
        v81 = v105[0];
        v105[0] = 0;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2)
            WTF::StringImpl::destroy(v81, v80);
          else
            *(_DWORD *)v81 -= 2;
        }
        if (v108)
        {
          v82 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::CookieSameSitePolicy>(&v108);
          if ((v82 & 0xFF00000000) != 0)
          {
            switch((_DWORD)v82)
            {
              case 0x18:
                v83 = 0;
                goto LABEL_165;
              case 0x6E:
                v83 = 2;
                goto LABEL_165;
              case 0x6D:
                v83 = 1;
LABEL_165:
                v127 = v83;
                v88 = WebKit::WebsiteDataStore::cookieStore(*(WebKit::WebsiteDataStore **)(v6 + 264));
                v89 = v119[0];
                if (v119[0])
                  *(_DWORD *)v119[0] += 2;
                v130 = (const char *)v89;
                v90 = v119[1];
                if (v119[1])
                  *(_DWORD *)v119[1] += 2;
                v131 = (uint64_t)v90;
                v91 = v120[0];
                if (v120[0])
                  *(_DWORD *)v120[0] += 2;
                v132 = v91;
                v92 = v120[1];
                if (v120[1])
                  *(_DWORD *)v120[1] += 2;
                v133 = v92;
                v134[0] = *(_OWORD *)&v120[2];
                *(_OWORD *)((char *)v134 + 11) = *(_OWORD *)((char *)&v120[3] + 3);
                v93 = v121;
                if (v121)
                  *v121 += 2;
                v135 = v93;
                v94 = v122;
                if (v122)
                  *v122 += 2;
                v136 = v94;
                v137 = v123;
                v138 = v124;
                v95 = HIDWORD(v126);
                v139 = 0;
                v140 = 0;
                v141 = HIDWORD(v126);
                if (HIDWORD(v126))
                {
                  if (v126 < 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19768ABB0);
                  }
                  v96 = (void *)WTF::fastMalloc((WTF *)(2 * HIDWORD(v126)));
                  v140 = v95;
                  v139 = v96;
                  memcpy(v96, __src, 2 * HIDWORD(v126));
                }
                v142 = v127;
                WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v105, (const WebCore::Cookie *)&v130, 1uLL);
                v97 = *a4;
                ++*((_DWORD *)v97 + 2);
                v98 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v98 = &off_1E34F4110;
                v98[1] = v97;
                v104 = v98;
                API::HTTPCookieStore::setCookies((uint64_t)v88, (uint64_t *)v105, (uint64_t *)&v104);
                if (v104)
                  (*(void (**)(_QWORD *))(*v104 + 8))(v104);
                WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v105, v99);
                WebCore::Cookie::~Cookie((WebCore::Cookie *)&v130, v100);
                goto LABEL_191;
            }
            __break(0xC471u);
LABEL_219:
            JUMPOUT(0x19768AB68);
          }
          v86 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v106);
          v130 = "The parameter 'sameSite' has an unknown value.";
          v131 = 47;
          LOBYTE(v104) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v106, (char *)&v104, (uint64_t *)&v130, v105);
          if (!v105[0])
          {
            __break(0xC471u);
            goto LABEL_219;
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v86, (const WTF::String *)v105);
          v87 = v105[0];
          v105[0] = 0;
          if (v87)
          {
            if (*(_DWORD *)v87 == 2)
              WTF::StringImpl::destroy(v87, v23);
            else
              *(_DWORD *)v87 -= 2;
          }
          v101 = v106;
          v106 = 0;
          if (v101)
          {
LABEL_188:
            if (*(_DWORD *)v101 == 2)
              WTF::StringImpl::destroy(v101, v23);
            else
              *(_DWORD *)v101 -= 2;
          }
        }
        else
        {
          v84 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v107);
          v130 = "The parameter 'sameSite' was not found.";
          v131 = 40;
          LOBYTE(v104) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v107, (char *)&v104, (uint64_t *)&v130, v105);
          if (!v105[0])
          {
            __break(0xC471u);
            JUMPOUT(0x19768ABB8);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v84, (const WTF::String *)v105);
          v85 = v105[0];
          v105[0] = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
              WTF::StringImpl::destroy(v85, v23);
            else
              *(_DWORD *)v85 -= 2;
          }
          v101 = v107;
          v107 = 0;
          if (v101)
            goto LABEL_188;
        }
LABEL_191:
        v45 = v108;
        v108 = 0;
        if (!v45)
          goto LABEL_195;
        goto LABEL_192;
      }
    }
    v43 = *(_DWORD *)v42 - 2;
    if (*(_DWORD *)v42 != 2)
      goto LABEL_76;
    WTF::StringImpl::destroy(v42, v34);
    goto LABEL_78;
  }
  v9 = *a4;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, v119);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v9, (const WTF::String *)v119);
  v11 = v119[0];
  v119[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
}

uint64_t WebKit::domainByAddingDotPrefixIfNeeded(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;

  v4 = *a2;
  if (*a2
    && *(_DWORD *)(v4 + 4)
    && ((result = *(_QWORD *)(v4 + 8), (*(_DWORD *)(v4 + 16) & 4) == 0)
      ? (v6 = *(unsigned __int16 *)result)
      : (v6 = *(unsigned __int8 *)result),
        v6 == 46)
    || (result = WTF::URL::hostIsIPAddress(), v4 = *a2, (result & 1) != 0))
  {
    *a2 = 0;
    *a1 = v4;
  }
  else
  {
    if (v4)
      *(_DWORD *)v4 += 2;
    v9 = 46;
    v8 = v4;
    result = (uint64_t)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v9, &v8, a1);
    if (*a1)
    {
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)v4, v7);
        else
          *(_DWORD *)v4 -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

void `non-virtual thunk to'WebKit::WebAutomationSession::addSingleCookie(uint64_t a1, WTF::StringImpl **a2, WTF::JSONImpl::ObjectBase **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  WebKit::WebAutomationSession::addSingleCookie((WTF::String *)(a1 - 32), a2, a3, a4);
}

void WebKit::WebAutomationSession::deleteAllCookies(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  API::HTTPCookieStore *v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t i;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20[2];
  WTF::StringImpl *v21;
  WTF::StringImpl *v22[5];
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v23, this, a2);
  v4 = v23;
  if (v23)
  {
    WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(_QWORD *)(v23 + 32) + 968), v20);
    MEMORY[0x19AEABB0C](v22, v20, 0);
    v6 = v20[0];
    v20[0] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    WTF::URL::host((WTF::URL *)v22);
    if ((v7 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    v8 = WebKit::WebsiteDataStore::cookieStore(*(WebKit::WebsiteDataStore **)(v4 + 264));
    v9 = v21;
    if (v21)
      *(_DWORD *)v21 += 4;
    v24 = v9;
    v19 = v9;
    WebKit::domainByAddingDotPrefixIfNeeded(v25, (uint64_t *)&v19);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v20, (_DWORD **)&v24, 2uLL);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E34F4138;
    v18 = v10;
    API::HTTPCookieStore::deleteCookiesForHostnames((uint64_t)v8, (uint64_t)v20, (uint64_t *)&v18);
    v12 = (uint64_t)v18;
    v18 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v11);
    for (i = 1; i != -1; --i)
    {
      v15 = (WTF::StringImpl *)v25[i - 1];
      v25[i - 1] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v13);
      else
        *(_DWORD *)v19 -= 2;
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 0;
    v16 = v21;
    v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, (_QWORD *)a3);
    *(_BYTE *)(a3 + 8) = 1;
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::deleteAllCookies(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WebKit::WebAutomationSession::deleteAllCookies((WebKit::WebAutomationSession *)((char *)this - 32), a2, a3);
}

_QWORD *WebKit::WebAutomationSession::getSessionPermissions@<X0>(WebKit::WebAutomationSession *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  WTF::JSONImpl::Object *v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::JSONImpl::Value *v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  _QWORD *result;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  _BYTE v33[16];
  char v34;

  v4 = WTF::fastMalloc((WTF *)0x20);
  v5 = (WTF::JSONImpl::Object *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v4);
  WTF::JSONImpl::Object::create(v5);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(111, &v30);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v30, v6);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v29 + 16), &v31, (const WTF::StringImpl *)&v32, (uint64_t)v33);
  if (v34)
  {
    v8 = (uint64_t *)(v29 + 24);
    v9 = *(unsigned int *)(v29 + 36);
    if ((_DWORD)v9 == *(_DWORD *)(v29 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v8, (unint64_t)&v31);
    }
    else
    {
      v10 = *v8;
      v11 = v31;
      if (v31)
        *(_DWORD *)v31 += 2;
      *(_QWORD *)(v10 + 8 * v9) = v11;
      *(_DWORD *)(v29 + 36) = v9 + 1;
    }
  }
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v12;
  }
  v13 = v30;
  v30 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v7);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v31;
  v31 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v7);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::JSONImpl::Value *)*((unsigned __int8 *)this + 272);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(v15);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v29 + 16), &v31, (const WTF::StringImpl *)&v32, (uint64_t)v33);
  if (v34)
  {
    v17 = (uint64_t *)(v29 + 24);
    v18 = *(unsigned int *)(v29 + 36);
    if ((_DWORD)v18 == *(_DWORD *)(v29 + 32))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v17, (unint64_t)&v31);
    }
    else
    {
      v19 = *v17;
      v20 = v31;
      if (v31)
        *(_DWORD *)v31 += 2;
      *(_QWORD *)(v19 + 8 * v18) = v20;
      *(_DWORD *)(v29 + 36) = v18 + 1;
    }
  }
  v21 = v32;
  v32 = 0;
  if (v21)
  {
    if (*v21 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v21;
  }
  v22 = v31;
  v31 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v16);
    else
      *(_DWORD *)v22 -= 2;
  }
  result = (_QWORD *)(v4 + 16);
  v24 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v24 == *(_DWORD *)(v4 + 24))
  {
    v25 = v24 + (v24 >> 2);
    if (v25 >= 0x10)
      v26 = v25 + 1;
    else
      v26 = 16;
    if (v26 <= v24 + 1)
      v27 = v24 + 1;
    else
      v27 = v26;
    result = (_QWORD *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)result, v27);
    v24 = *(unsigned int *)(v4 + 28);
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v24);
  }
  else
  {
    v28 = (_QWORD *)(*result + 8 * v24);
  }
  *v28 = v29;
  *(_DWORD *)(v4 + 28) = v24 + 1;
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

_QWORD *`non-virtual thunk to'WebKit::WebAutomationSession::getSessionPermissions@<X0>(WebKit::WebAutomationSession *this@<X0>, uint64_t a2@<X8>)
{
  return WebKit::WebAutomationSession::getSessionPermissions((WebKit::WebAutomationSession *)((char *)this - 32), a2);
}

WTF::StringImpl *WebKit::WebAutomationSession::setSessionPermissions@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *v5;
  WTF::JSONImpl::ObjectBase **v6;
  WTF::JSONImpl::ObjectBase *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned __int16 Boolean;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  char *v25;
  uint64_t v26;

  if (!*(_DWORD *)(*(_QWORD *)a2 + 28))
  {
LABEL_46:
    *a3 = 0;
    a3[8] = 0;
    return result;
  }
  v5 = result;
  v6 = *(WTF::JSONImpl::ObjectBase ***)(*(_QWORD *)a2 + 16);
  while (1)
  {
    v7 = *v6;
    v8 = *((_DWORD *)*v6 + 1);
    if (v8 != 5)
      break;
    ++*(_DWORD *)v7;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = (WTF::StringImpl *)v25;
    WTF::JSONImpl::ObjectBase::getString(v7, (const WTF::String *)&v21);
    v10 = v21;
    v21 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (!v23)
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v20);
      v25 = "The parameter 'permission' is missing or invalid.";
      v26 = 50;
      v24 = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v20, &v24, (uint64_t *)&v25, &v21);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x19768B508);
      }
      *(_QWORD *)a3 = v21;
      a3[8] = 1;
      v14 = v20;
      v20 = 0;
      v21 = 0;
      if (!v14)
        goto LABEL_26;
LABEL_23:
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
LABEL_26:
      v15 = 0;
      goto LABEL_27;
    }
    if ((MEMORY[0x19AEABBCC](v23, "GetUserMedia", 12) & 1) == 0)
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v19);
      v25 = "The parameter 'permission' has an unknown value.";
      v26 = 49;
      v24 = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v19, &v24, (uint64_t *)&v25, &v21);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x19768B510);
      }
      *(_QWORD *)a3 = v21;
      a3[8] = 1;
      v21 = 0;
      v14 = v19;
      v19 = 0;
      if (v14)
        goto LABEL_23;
      goto LABEL_26;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = (WTF::StringImpl *)v25;
    Boolean = WTF::JSONImpl::ObjectBase::getBoolean(v7, (const WTF::String *)&v21);
    v13 = v21;
    v21 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (Boolean <= 0xFFu)
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v18);
      v25 = "The parameter 'value' is missing or invalid.";
      v26 = 45;
      v24 = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v18, &v24, (uint64_t *)&v25, &v21);
      if (!v21)
      {
        __break(0xC471u);
        JUMPOUT(0x19768B518);
      }
      *(_QWORD *)a3 = v21;
      a3[8] = 1;
      v21 = 0;
      v14 = v18;
      v18 = 0;
      if (v14)
        goto LABEL_23;
      goto LABEL_26;
    }
    *((_BYTE *)v5 + 272) = Boolean;
    v15 = 1;
LABEL_27:
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
    if (*(_DWORD *)v7 == 1)
      result = (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v7;
    if ((v15 & 1) == 0)
      return result;
    if (++v6 == (WTF::JSONImpl::ObjectBase **)(*(_QWORD *)(*(_QWORD *)a2 + 16)
                                              + 8 * *(unsigned int *)(*(_QWORD *)a2 + 28)))
      goto LABEL_46;
  }
  v16 = v8 > 6 || v8 == 5;
  if (v16
    || (Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v22),
        v25 = "The parameter 'permissions' is invalid.",
        v26 = 40,
        LOBYTE(v21) = 59,
        WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v22, (char *)&v21, (uint64_t *)&v25, &v23),
        !v23))
  {
    __break(0xC471u);
    JUMPOUT(0x19768B500);
  }
  *(_QWORD *)a3 = v23;
  a3[8] = 1;
  result = v22;
  v22 = 0;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::WebAutomationSession::setSessionPermissions@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return WebKit::WebAutomationSession::setSessionPermissions((WTF::StringImpl *)(a1 - 32), a2, a3);
}

WTF::StringImpl *WebKit::WebAutomationSession::addVirtualAuthenticator@<X0>(const WTF::String *a1@<X0>, WTF::StringImpl **a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, uint64_t a4@<X8>)
{
  WTF::JSONImpl::ObjectBase *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::JSONImpl::ObjectBase *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  WTF::JSONImpl::ObjectBase *v18;
  WTF::StringImpl *v19;
  unsigned __int16 Boolean;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::JSONImpl::ObjectBase *v23;
  WTF::StringImpl *v24;
  unsigned __int16 v25;
  WTF::StringImpl *v26;
  WTF::JSONImpl::ObjectBase *v27;
  WTF::StringImpl *v28;
  unsigned __int16 v29;
  WTF::StringImpl *v30;
  WTF::JSONImpl::ObjectBase *v31;
  WTF::StringImpl *v32;
  unsigned __int16 v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *result;
  WTF::StringImpl *v36;
  uint64_t *v37;
  WTF::StringImpl *v38;
  char v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  char *v52;
  uint64_t v53;

  v8 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::ObjectBase::getString(v8, (const WTF::String *)&v52);
  v10 = (WTF::StringImpl *)v52;
  v52 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (!v51)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v49);
    v52 = "The parameter 'protocol' is missing or invalid.";
    v53 = 48;
    LOBYTE(v48) = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v49, (char *)&v48, (uint64_t *)&v52, &v50);
    if (v50)
    {
      *(_QWORD *)a4 = v50;
      *(_DWORD *)(a4 + 8) = 1;
      v15 = v49;
      v49 = 0;
      v50 = 0;
      if (!v15)
        goto LABEL_59;
      goto LABEL_56;
    }
    __break(0xC471u);
    goto LABEL_82;
  }
  v11 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v48 = (WTF::StringImpl *)v52;
  WTF::JSONImpl::ObjectBase::getString(v11, (const WTF::String *)&v48);
  v13 = v48;
  v48 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (!v50)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v47);
    v52 = "The parameter 'transport' is missing or invalid.";
    v53 = 49;
    LOBYTE(v41) = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v47, (char *)&v41, (uint64_t *)&v52, &v48);
    if (!v48)
    {
      __break(0xC471u);
      JUMPOUT(0x19768BB70);
    }
    *(_QWORD *)a4 = v48;
    *(_DWORD *)(a4 + 8) = 1;
    v22 = v47;
    v47 = 0;
    v48 = 0;
    if (v22)
      goto LABEL_52;
    goto LABEL_55;
  }
  v16 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::AuthenticatorTransport>(&v50);
  if ((v16 & 0xFF00000000) == 0)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v46);
    v52 = "The parameter 'transport' has an unknown value.";
    v53 = 48;
    LOBYTE(v41) = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v46, (char *)&v41, (uint64_t *)&v52, &v48);
    if (!v48)
    {
      __break(0xC471u);
      JUMPOUT(0x19768BB78);
    }
    *(_QWORD *)a4 = v48;
    *(_DWORD *)(a4 + 8) = 1;
    v48 = 0;
    v22 = v46;
    v46 = 0;
    if (v22)
      goto LABEL_52;
    goto LABEL_55;
  }
  v17 = v16;
  v18 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v48 = (WTF::StringImpl *)v52;
  Boolean = WTF::JSONImpl::ObjectBase::getBoolean(v18, (const WTF::String *)&v48);
  v21 = v48;
  v48 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (Boolean <= 0xFFu)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v45);
    v52 = "The parameter 'hasResidentKey' is missing or invalid.";
    v53 = 54;
    LOBYTE(v41) = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v45, (char *)&v41, (uint64_t *)&v52, &v48);
    if (!v48)
    {
      __break(0xC471u);
      JUMPOUT(0x19768BB80);
    }
    *(_QWORD *)a4 = v48;
    *(_DWORD *)(a4 + 8) = 1;
    v48 = 0;
    v22 = v45;
    v45 = 0;
    if (!v22)
      goto LABEL_55;
LABEL_52:
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v14);
    else
      *(_DWORD *)v22 -= 2;
    goto LABEL_55;
  }
  v23 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v48 = (WTF::StringImpl *)v52;
  v25 = WTF::JSONImpl::ObjectBase::getBoolean(v23, (const WTF::String *)&v48);
  v26 = v48;
  v48 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (v25 > 0xFFu)
  {
    v27 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v48 = (WTF::StringImpl *)v52;
    v29 = WTF::JSONImpl::ObjectBase::getBoolean(v27, (const WTF::String *)&v48);
    v30 = v48;
    v48 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v28);
      else
        *(_DWORD *)v30 -= 2;
    }
    if (v29 <= 0xFFu)
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v43);
      v52 = "The parameter 'isUserConsenting' is missing or invalid.";
      v53 = 56;
      LOBYTE(v41) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v43, (char *)&v41, (uint64_t *)&v52, &v48);
      if (!v48)
      {
        __break(0xC471u);
        JUMPOUT(0x19768BB90);
      }
      *(_QWORD *)a4 = v48;
      *(_DWORD *)(a4 + 8) = 1;
      v48 = 0;
      v22 = v43;
      v43 = 0;
      if (v22)
        goto LABEL_52;
      goto LABEL_55;
    }
    v31 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v48 = (WTF::StringImpl *)v52;
    v33 = WTF::JSONImpl::ObjectBase::getBoolean(v31, (const WTF::String *)&v48);
    v34 = v48;
    v48 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v32);
      else
        *(_DWORD *)v34 -= 2;
    }
    if (v33 > 0xFFu)
    {
      WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v48, a1, a2);
      v36 = v48;
      if (v48)
      {
        v37 = (uint64_t *)WebKit::WebsiteDataStore::virtualAuthenticatorManager(*((WebKit::WebsiteDataStore **)v48 + 33));
        v38 = v51;
        if (v51)
          *(_DWORD *)v51 += 2;
        v52 = (char *)v38;
        v39 = v17 - 123;
        if ((v17 - 123) >= 4)
          v39 = 3;
        LOBYTE(v53) = v39;
        BYTE1(v53) = Boolean;
        BYTE2(v53) = v25;
        BYTE3(v53) = v29;
        BYTE4(v53) = v33;
        WebKit::VirtualAuthenticatorManager::createAuthenticator(v37, (uint64_t)&v52, &v41);
        *(_QWORD *)a4 = v41;
        *(_DWORD *)(a4 + 8) = 0;
        v41 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v40);
          else
            *(_DWORD *)v38 -= 2;
        }
        CFRelease(*((CFTypeRef *)v36 + 1));
      }
      else
      {
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, (_QWORD *)a4);
        *(_DWORD *)(a4 + 8) = 1;
      }
      goto LABEL_55;
    }
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v42);
    v52 = "The parameter 'isUserVerified' is missing or invalid.";
    v53 = 54;
    LOBYTE(v41) = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v42, (char *)&v41, (uint64_t *)&v52, &v48);
    if (v48)
    {
      *(_QWORD *)a4 = v48;
      *(_DWORD *)(a4 + 8) = 1;
      v48 = 0;
      v22 = v42;
      v42 = 0;
      if (!v22)
        goto LABEL_55;
      goto LABEL_52;
    }
    __break(0xC471u);
LABEL_82:
    JUMPOUT(0x19768BB68);
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v44);
  v52 = "The parameter 'hasUserVerification' is missing or invalid.";
  v53 = 59;
  LOBYTE(v41) = 59;
  WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v44, (char *)&v41, (uint64_t *)&v52, &v48);
  if (!v48)
  {
    __break(0xC471u);
    JUMPOUT(0x19768BB88);
  }
  *(_QWORD *)a4 = v48;
  *(_DWORD *)(a4 + 8) = 1;
  v48 = 0;
  v22 = v44;
  v44 = 0;
  if (v22)
    goto LABEL_52;
LABEL_55:
  v15 = v50;
  v50 = 0;
  if (!v15)
    goto LABEL_59;
LABEL_56:
  if (*(_DWORD *)v15 == 2)
    WTF::StringImpl::destroy(v15, v14);
  else
    *(_DWORD *)v15 -= 2;
LABEL_59:
  result = v51;
  v51 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::WebAutomationSession::addVirtualAuthenticator@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, WTF::JSONImpl::ObjectBase **a3@<X2>, uint64_t a4@<X8>)
{
  return WebKit::WebAutomationSession::addVirtualAuthenticator((const WTF::String *)(a1 - 32), a2, a3, a4);
}

void WebKit::WebAutomationSession::removeVirtualAuthenticator(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  WebKit::VirtualAuthenticatorManager *v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15[2];

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v13, this, a2);
  v6 = v13;
  if (!v13)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, (_QWORD *)a4);
    *(_BYTE *)(a4 + 8) = 1;
    return;
  }
  v7 = (WebKit::VirtualAuthenticatorManager *)WebKit::WebsiteDataStore::virtualAuthenticatorManager(*(WebKit::WebsiteDataStore **)(v13 + 264));
  if ((WebKit::VirtualAuthenticatorManager::removeAuthenticator(v7, a3, v8) & 1) != 0)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 0;
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v11);
    v15[0] = (uint64_t)"No such authenticator exists.";
    v15[1] = 30;
    v14 = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v11, &v14, v15, &v12);
    if (!v12)
    {
      __break(0xC471u);
      return;
    }
    *(_QWORD *)a4 = v12;
    *(_BYTE *)(a4 + 8) = 1;
    v10 = v11;
    v11 = 0;
    v12 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  CFRelease(*(CFTypeRef *)(v6 + 8));
}

void `non-virtual thunk to'WebKit::WebAutomationSession::removeVirtualAuthenticator(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X8>)
{
  WebKit::WebAutomationSession::removeVirtualAuthenticator((WebKit::WebAutomationSession *)((char *)this - 32), a2, a3, a4);
}

WTF::StringImpl *WebKit::WebAutomationSession::addVirtualAuthenticatorCredential@<X0>(uint64_t a1@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  char v6;
  uint64_t v7[2];

  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(15, &v4);
  v7[0] = (uint64_t)"This method is not yet implemented.";
  v7[1] = 36;
  v6 = 59;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v4, &v6, v7, &v5);
  if (v5)
  {
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = 1;
    result = v4;
    v4 = 0;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::getVirtualAuthenticatorCredentials@<X0>(uint64_t a1@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  uint64_t v10[2];

  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(15, &v7);
  v10[0] = (uint64_t)"This method is not yet implemented.";
  v10[1] = 36;
  v9 = 59;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v7, &v9, v10, &v8);
  if (v8)
  {
    *(_QWORD *)a1 = v8;
    *(_DWORD *)(a1 + 8) = 1;
    result = v7;
    v7 = 0;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::removeVirtualAuthenticatorCredential@<X0>(uint64_t a1@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;
  uint64_t v11[2];

  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(15, &v8);
  v11[0] = (uint64_t)"This method is not yet implemented.";
  v11[1] = 36;
  v10 = 59;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v8, &v10, v11, &v9);
  if (v9)
  {
    *(_QWORD *)a1 = v9;
    *(_BYTE *)(a1 + 8) = 1;
    result = v8;
    v8 = 0;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::removeAllVirtualAuthenticatorCredentials@<X0>(uint64_t a1@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  uint64_t v10[2];

  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(15, &v7);
  v10[0] = (uint64_t)"This method is not yet implemented.";
  v10[1] = 36;
  v9 = 59;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v7, &v9, v10, &v8);
  if (v8)
  {
    *(_QWORD *)a1 = v8;
    *(_BYTE *)(a1 + 8) = 1;
    result = v7;
    v7 = 0;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::setVirtualAuthenticatorUserVerified@<X0>(uint64_t a1@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  uint64_t v10[2];

  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(15, &v7);
  v10[0] = (uint64_t)"This method is not yet implemented.";
  v10[1] = 36;
  v9 = 59;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v7, &v9, v10, &v8);
  if (v8)
  {
    *(_QWORD *)a1 = v8;
    *(_BYTE *)(a1 + 8) = 1;
    result = v7;
    v7 = 0;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::WebAutomationSession::setVirtualAuthenticatorUserVerified@<X0>(uint64_t a1@<X8>)
{
  return WebKit::WebAutomationSession::setVirtualAuthenticatorUserVerified(a1);
}

void WebKit::WebAutomationSession::generateTestReport(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11[2];

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v10, this, a2);
  v8 = v10;
  if (v10)
  {
    v11[0] = (uint64_t *)a3;
    v11[1] = (uint64_t *)a4;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GenerateTestReport>(*(_QWORD *)(v10 + 208), v11, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 1896), 0);
    *(_BYTE *)a5 = 0;
    CFRelease(*(CFTypeRef *)(v8 + 8));
    v9 = 0;
  }
  else
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, (_QWORD *)a5);
    v9 = 1;
  }
  *(_BYTE *)(a5 + 8) = v9;
}

void `non-virtual thunk to'WebKit::WebAutomationSession::generateTestReport(WebKit::WebAutomationSession *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X3>, uint64_t a5@<X8>)
{
  WebKit::WebAutomationSession::generateTestReport((WebKit::WebAutomationSession *)((char *)this - 32), a2, a3, a4, a5);
}

uint64_t WebKit::WebAutomationSession::inputDispatcherForPage(WebKit::WebAutomationSession *this, WebKit::WebPageProxy *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  void *v17;
  WebKit::SimulatedInputDispatcher *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;

  v4 = (uint64_t *)((char *)this + 288);
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
  v6 = *((_QWORD *)this + 36);
  if (v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)this + 36, 0), (v6 = *v4) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = (uint64_t *)(v6 + 16 * v11);
  v13 = *v12;
  if (!*v12)
  {
LABEL_12:
    *v12 = v5;
    v16 = WTF::fastMalloc((WTF *)0x78);
    WebKit::SimulatedInputDispatcher::SimulatedInputDispatcher(v16, (uint64_t)a2, (uint64_t)this + 40);
    v18 = (WebKit::SimulatedInputDispatcher *)v12[1];
    v12[1] = v16;
    if (v18)
      WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v18, v17);
    v19 = *v4;
    if (*v4)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v21 = *v4;
    if (*v4)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(v21 - 16) + v22);
    v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23)
        return v12[1];
    }
    else if (3 * v24 > 4 * v23)
    {
      return v12[1];
    }
    v12 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v4, v12);
    return v12[1];
  }
  v14 = 0;
  v15 = 1;
  while (v13 != v5)
  {
    if (v13 == -1)
      v14 = v12;
    v11 = (v11 + v15) & v7;
    v12 = (uint64_t *)(v6 + 16 * v11);
    v13 = *v12;
    ++v15;
    if (!*v12)
    {
      if (v14)
      {
        *v14 = 0;
        v14[1] = 0;
        --*(_DWORD *)(*v4 - 16);
        v12 = v14;
      }
      goto LABEL_12;
    }
  }
  return v12[1];
}

uint64_t WebKit::WebAutomationSession::viewportInViewCenterPointOfElement(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[3];
  __int16 v13;
  _QWORD *v14;
  _QWORD v15[2];
  char v16;
  __int128 v17;
  uint64_t v18;

  v8 = *a5;
  *a5 = 0;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34F4160;
  v9[1] = v8;
  v17 = *a3;
  v18 = *((_QWORD *)a3 + 2);
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 1896);
  v12[0] = &v11;
  v12[1] = a3;
  v12[2] = a4;
  v13 = 256;
  v14 = v9;
  v15[0] = v12;
  v15[1] = &v14;
  v16 = 0;
  WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::ComputeElementLayout,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)>>(std::optional<std::optional<WTF::String> &&::ProcessQualified<std::optional<std::optional<WTF::String> &&::IntPoint> &&<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::ComputeElementLayout &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)> &&,WTF::OptionSet<void ()(std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String> &&::IntPoint> &&,BOOL)::SendOption>)::{lambda(std::optional<std::optional<WTF::String> &&::IntPoint> &&<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&)#1}>(a2, (uint64_t)&v17, (uint64_t)v15);
  result = (uint64_t)v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSession::simulateTouchInteraction(uint64_t a1, WebKit::WebPageProxy *a2, int a3, IntPoint *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;
  char v22;
  uint64_t v23[3];

  v14 = *((_QWORD *)a2 + 4);
  v23[1] = 0;
  v23[2] = *(_QWORD *)(v14 + 2280);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v23, a4);
  if ((WebCore::FloatRect::contains() & 1) != 0)
  {
    *(_BYTE *)(a1 + 300) = 1;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v15 = *a7;
    *a7 = 0;
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v16 = &off_1E34F4188;
    v16[1] = a1;
    v16[2] = a1;
    v16[3] = v15;
    v23[0] = (uint64_t)v16;
    WebKit::WebAutomationSession::platformSimulateTouchInteraction(a1, a2, a3, (id *)a4, a5, a6, v23);
    result = (WTF::StringImpl *)v23[0];
    v23[0] = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v19 = 23;
    LOBYTE(v20) = 0;
    v21 = 0;
    v22 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(a7, (uint64_t)&v19);
    if (v22)
    {
      if (v21)
      {
        result = v20;
        v20 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::WebAutomationSession::simulateTouchInteraction(uint64_t a1, WebKit::WebPageProxy *a2, int a3, IntPoint *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return WebKit::WebAutomationSession::simulateTouchInteraction(a1 - 40, a2, a3, a4, a5, a6, a7);
}

void WebKit::WebAutomationSession::simulateKeyboardInteraction(uint64_t a1, WebKit::WebAutomationSession *a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  char v23;
  char v24;
  int v25;
  WTF::StringImpl *v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30[3];

  v9 = *a5;
  *a5 = 0;
  v10 = (uint64_t *)(a1 + 176);
  v29 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::add<decltype(nullptr)>(v30, (uint64_t *)(a1 + 176), &v29);
  v11 = (uint64_t *)(v30[0] + 8);
  if (*(_QWORD *)(v30[0] + 8))
  {
    v25 = 6;
    LOBYTE(v26) = 0;
    v27 = 0;
    v28 = 1;
    WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)(v30[0] + 8), &v25);
    if (v28)
    {
      if (v27)
      {
        v13 = v26;
        v26 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
    }
  }
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34F41B0;
  v14[1] = v9;
  v15 = *v11;
  *v11 = (uint64_t)v14;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  WebKit::WebAutomationSession::platformSimulateKeyboardInteraction(a1, a2, a3, a4);
  if (*v11)
  {
    v16 = (_QWORD *)*((_QWORD *)a2 + 4);
    if (v16[94] == v16[95])
    {
      v29 = v16[93];
      v17 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v10, &v29);
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::take(v10, v17, v30);
      LOBYTE(v21) = 0;
      v24 = 0;
      WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(v30, &v21);
      if (v24)
      {
        if (v23)
        {
          v19 = v22;
          v22 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v18);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
      }
      v20 = v30[0];
      v30[0] = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    }
  }
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = *a3 + ~(*a3 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 16 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v26 = v6 + 16 * v20;
        goto LABEL_31;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 16 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v16;
    }
  }
  result = (uint64_t *)v14[1];
  *v14 = v9;
  v14[1] = 0;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_24:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v14);
      v14 = result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_24;
  }
  v26 = v21 + 16 * v24;
  v25 = 1;
LABEL_31:
  *v5 = (uint64_t)v14;
  v5[1] = v26;
  *((_BYTE *)v5 + 16) = v25;
  return result;
}

void `non-virtual thunk to'WebKit::WebAutomationSession::simulateKeyboardInteraction(uint64_t a1, WebKit::WebAutomationSession *a2, int a3, uint64_t a4, uint64_t *a5)
{
  WebKit::WebAutomationSession::simulateKeyboardInteraction(a1 - 40, a2, a3, a4, a5);
}

WTF::StringImpl *WebKit::WebAutomationSession::performMouseInteraction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, Inspector::BackendDispatcher::CallbackBase **a7)
{
  Inspector::BackendDispatcher::CallbackBase *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  v7 = *a7;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(15, &v10);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v7, (const WTF::String *)&v10);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String *a1, WTF::StringImpl **a2, uint64_t a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::JSONImpl::ObjectBase **v11;
  const char *v12;
  WTF::JSONImpl::ObjectBase *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  Inspector::BackendDispatcher::CallbackBase *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  Inspector::BackendDispatcher::CallbackBase *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  Inspector::BackendDispatcher::CallbackBase *v37;
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  Inspector::BackendDispatcher::CallbackBase *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  const char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t *v55;
  _QWORD *v56;
  WTF::StringImpl *v57;
  Inspector::BackendDispatcher::CallbackBase *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  Inspector::BackendDispatcher::CallbackBase *v62;
  uint64_t *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  Inspector::BackendDispatcher::CallbackBase *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  Inspector::BackendDispatcher::CallbackBase *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  Inspector::BackendDispatcher::CallbackBase *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  Inspector::BackendDispatcher::CallbackBase *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  int v87;
  WTF::StringImpl *v88;
  char v89;
  char v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  char v108[9];

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v107, a1, a2);
  v7 = v107;
  if (v107)
  {
    v8 = *(unsigned int *)(*(_QWORD *)a3 + 28);
    if ((_DWORD)v8)
    {
      v104 = 0;
      v105 = 0;
      WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v104, v8);
      v9 = *(unsigned int *)(*(_QWORD *)a3 + 28);
      if (!(_DWORD)v9)
      {
LABEL_112:
        if (HIDWORD(v105))
        {
          CFRetain(*((CFTypeRef *)a1 + 1));
          v62 = *a4;
          *a4 = 0;
          CFRetain(*(CFTypeRef *)(v7 + 8));
          v103 = *(WTF::StringImpl **)(*(_QWORD *)(v7 + 32) + 744);
          WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)&v91, (uint64_t *)a1 + 22, (uint64_t *)&v103);
          v63 = (uint64_t *)((char *)v91 + 8);
          if (*((_QWORD *)v91 + 1))
          {
            v87 = 6;
            LOBYTE(v88) = 0;
            v89 = 0;
            v90 = 1;
            WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)v91 + 1, &v87);
            if (v90)
            {
              if (v89)
              {
                v65 = v88;
                v88 = 0;
                if (v65)
                {
                  if (*(_DWORD *)v65 == 2)
                    WTF::StringImpl::destroy(v65, v64);
                  else
                    *(_DWORD *)v65 -= 2;
                }
              }
            }
          }
          v79 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          *v79 = &off_1E34F4238;
          v79[1] = a1;
          v79[2] = v62;
          v79[3] = v7;
          v80 = *v63;
          *v63 = (uint64_t)v79;
          if (v80)
            (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
          if (HIDWORD(v105))
          {
            v81 = v104;
            v82 = 8 * HIDWORD(v105);
            do
            {
              v83 = *v81++;
              (*(void (**)(uint64_t))(*(_QWORD *)v83 + 16))(v83);
              v82 -= 8;
            }
            while (v82);
          }
          goto LABEL_158;
        }
        v76 = *a4;
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v93);
        v91 = (WTF::StringImpl *)"No actions to perform.";
        v92 = 23;
        LOBYTE(v101) = 59;
        WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v93, (char *)&v101, (uint64_t *)&v91, &v103);
        if (v103)
        {
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v76, (const WTF::String *)&v103);
          v77 = v103;
          v103 = 0;
          if (v77)
          {
            if (*(_DWORD *)v77 == 2)
              WTF::StringImpl::destroy(v77, v22);
            else
              *(_DWORD *)v77 -= 2;
          }
          v78 = v93;
          v93 = 0;
          if (!v78)
            goto LABEL_158;
          goto LABEL_149;
        }
LABEL_169:
        __break(0xC471u);
        JUMPOUT(0x19768D254);
      }
      v10 = 8 * v9;
      v11 = *(WTF::JSONImpl::ObjectBase ***)(*(_QWORD *)a3 + 16);
      v12 = "type";
      while (1)
      {
        v13 = *v11;
        v14 = *((_DWORD *)*v11 + 1);
        if (v14 != 5)
        {
          if (v14 <= 6 && v14 != 5)
          {
            v73 = *a4;
            Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v102);
            v91 = (WTF::StringImpl *)"An interaction in the 'interactions' parameter was invalid.";
            v92 = 60;
            LOBYTE(v101) = 59;
            WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v102, (char *)&v101, (uint64_t *)&v91, &v103);
            if (!v103)
            {
              __break(0xC471u);
              JUMPOUT(0x19768D28CLL);
            }
            Inspector::BackendDispatcher::CallbackBase::sendFailure(v73, (const WTF::String *)&v103);
            v74 = v103;
            v103 = 0;
            if (v74)
            {
              if (*(_DWORD *)v74 == 2)
                WTF::StringImpl::destroy(v74, v22);
              else
                *(_DWORD *)v74 -= 2;
            }
            v78 = v102;
            v102 = 0;
            if (!v78)
            {
LABEL_158:
              WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v104, v22);
              goto LABEL_159;
            }
LABEL_149:
            if (*(_DWORD *)v78 == 2)
              WTF::StringImpl::destroy(v78, v22);
            else
              *(_DWORD *)v78 -= 2;
            goto LABEL_158;
          }
          goto LABEL_169;
        }
        ++*(_DWORD *)v13;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v101 = v91;
        WTF::JSONImpl::ObjectBase::getString(v13, (const WTF::String *)&v101);
        v16 = v101;
        v101 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v15);
          else
            *(_DWORD *)v16 -= 2;
        }
        if (!v103)
        {
          v21 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v100);
          v91 = (WTF::StringImpl *)"An interaction in the 'interactions' parameter is missing the 'type' key.";
          v92 = 74;
          LOBYTE(v98) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v100, (char *)&v98, (uint64_t *)&v91, &v101);
          if (!v101)
          {
            __break(0xC471u);
            JUMPOUT(0x19768D25CLL);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v21, (const WTF::String *)&v101);
          v23 = v101;
          v101 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
          v36 = v100;
          v100 = 0;
          if (v36)
          {
LABEL_43:
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v22);
            else
              *(_DWORD *)v36 -= 2;
          }
LABEL_46:
          v39 = 1;
          goto LABEL_103;
        }
        v17 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::KeyboardInteractionType>(&v103);
        if ((v17 & 0xFF00000000) == 0)
        {
          v24 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v99);
          v91 = (WTF::StringImpl *)"An interaction in the 'interactions' parameter has an invalid 'type' key.";
          v92 = 74;
          LOBYTE(v98) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v99, (char *)&v98, (uint64_t *)&v91, &v101);
          if (!v101)
          {
            __break(0xC471u);
            JUMPOUT(0x19768D264);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v24, (const WTF::String *)&v101);
          v25 = v101;
          v101 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v22);
            else
              *(_DWORD *)v25 -= 2;
          }
          v36 = v99;
          v99 = 0;
          if (v36)
            goto LABEL_43;
          goto LABEL_46;
        }
        v18 = v17;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v98 = v91;
        WTF::JSONImpl::ObjectBase::getString(v13, (const WTF::String *)&v98);
        v20 = v98;
        v98 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v19);
          else
            *(_DWORD *)v20 -= 2;
        }
        if (v101)
        {
          v26 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::VirtualKey>(&v101);
          if (!BYTE4(v26))
          {
            v37 = *a4;
            Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v97);
            v91 = (WTF::StringImpl *)"An interaction in the 'interactions' parameter has an invalid 'key' value.";
            v92 = 75;
            LOBYTE(v96) = 59;
            WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v97, (char *)&v96, (uint64_t *)&v91, &v98);
            if (!v98)
            {
              __break(0xC471u);
              JUMPOUT(0x19768D26CLL);
            }
            Inspector::BackendDispatcher::CallbackBase::sendFailure(v37, (const WTF::String *)&v98);
            v38 = v98;
            v98 = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2)
                WTF::StringImpl::destroy(v38, v22);
              else
                *(_DWORD *)v38 -= 2;
            }
            v54 = v97;
            v97 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2)
                WTF::StringImpl::destroy(v54, v22);
              else
                *(_DWORD *)v54 -= 2;
            }
            v39 = 1;
            goto LABEL_99;
          }
          v27 = v26;
          CFRetain(*(CFTypeRef *)(v7 + 8));
          v28 = v86 & 0xFFFFFF0000000000 | v18 & 0xFFFFFFFFFFLL;
          v29 = HIDWORD(v105);
          if (HIDWORD(v105) == (_DWORD)v105)
          {
            v30 = HIDWORD(v105) + ((unint64_t)HIDWORD(v105) >> 2);
            if (v30 >= 0x10)
              v31 = v30 + 1;
            else
              v31 = 16;
            if (v31 <= (unint64_t)HIDWORD(v105) + 1)
              v32 = HIDWORD(v105) + 1;
            else
              v32 = v31;
            WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v104, v32);
            v84 = HIDWORD(v105);
            v33 = v104;
            v34 = WTF::fastMalloc((WTF *)0x28);
            *(_QWORD *)v34 = &off_1E34F41D8;
            *(_QWORD *)(v34 + 8) = a1;
            v35 = v7;
            *(_QWORD *)(v34 + 16) = v7;
            *(_QWORD *)(v34 + 24) = v28;
            *(_DWORD *)(v34 + 32) = v27;
            *(_BYTE *)(v34 + 36) = BYTE4(v27);
            v33[v84] = v34;
          }
          else
          {
            v85 = v104;
            v40 = WTF::fastMalloc((WTF *)0x28);
            *(_QWORD *)v40 = &off_1E34F41D8;
            *(_QWORD *)(v40 + 8) = a1;
            v35 = v7;
            *(_QWORD *)(v40 + 16) = v7;
            *(_QWORD *)(v40 + 24) = v28;
            *(_DWORD *)(v40 + 32) = v27;
            *(_BYTE *)(v40 + 36) = BYTE4(v27);
            v85[v29] = v40;
          }
          v86 = v86 & 0xFFFFFF0000000000 | v18 & 0xFFFFFFFFFFLL;
          ++HIDWORD(v105);
          v7 = v35;
          v12 = "type";
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v96 = v91;
        WTF::JSONImpl::ObjectBase::getString(v13, (const WTF::String *)&v96);
        v41 = v96;
        v96 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v22);
          else
            *(_DWORD *)v41 -= 2;
        }
        if (v98)
        {
          if ((v18 - 106) < 2)
          {
            v42 = *a4;
            Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v95);
            v91 = (WTF::StringImpl *)"An interaction in the 'interactions' parameter has an invalid 'key' value.";
            v92 = 75;
            v108[0] = 59;
            WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v95, v108, (uint64_t *)&v91, &v96);
            if (!v96)
            {
              __break(0xC471u);
              JUMPOUT(0x19768D274);
            }
            Inspector::BackendDispatcher::CallbackBase::sendFailure(v42, (const WTF::String *)&v96);
            v43 = v96;
            v96 = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
                WTF::StringImpl::destroy(v43, v22);
              else
                *(_DWORD *)v43 -= 2;
            }
            v53 = v95;
            v95 = 0;
            if (v53)
              goto LABEL_91;
            goto LABEL_94;
          }
          if ((_DWORD)v18 == 108)
          {
            CFRetain(*(CFTypeRef *)(v7 + 8));
            v44 = v98;
            if (v98)
              *(_DWORD *)v98 += 2;
            v45 = v12;
            v46 = HIDWORD(v105);
            if (HIDWORD(v105) == (_DWORD)v105)
            {
              v47 = HIDWORD(v105) + ((unint64_t)HIDWORD(v105) >> 2);
              if (v47 >= 0x10)
                v48 = v47 + 1;
              else
                v48 = 16;
              if (v48 <= (unint64_t)HIDWORD(v105) + 1)
                v49 = HIDWORD(v105) + 1;
              else
                v49 = v48;
              WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v104, v49);
              v50 = HIDWORD(v105);
              v51 = v104;
              v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *v52 = &off_1E34F4210;
              v52[1] = a1;
              v52[2] = v7;
              v52[3] = v44;
              v51[v50] = (uint64_t)v52;
            }
            else
            {
              v55 = v104;
              v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
              *v56 = &off_1E34F4210;
              v56[1] = a1;
              v56[2] = v7;
              v56[3] = v44;
              v55[v46] = (uint64_t)v56;
            }
            ++HIDWORD(v105);
            v12 = v45;
          }
        }
        if (v101)
          break;
        v57 = v98;
        if (!v98)
        {
          v58 = *a4;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(16, &v94);
          v91 = (WTF::StringImpl *)"An interaction in the 'interactions' parameter is missing both 'key' and 'text'. One "
                                   "must be provided.";
          v92 = 103;
          v108[0] = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v94, v108, (uint64_t *)&v91, &v96);
          if (!v96)
          {
            __break(0xC471u);
            JUMPOUT(0x19768D27CLL);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v58, (const WTF::String *)&v96);
          v59 = v96;
          v96 = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, v22);
            else
              *(_DWORD *)v59 -= 2;
          }
          v53 = v94;
          v94 = 0;
          if (v53)
          {
LABEL_91:
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v22);
            else
              *(_DWORD *)v53 -= 2;
          }
LABEL_94:
          v39 = 1;
LABEL_95:
          v57 = v98;
          v98 = 0;
          if (!v57)
            goto LABEL_99;
          goto LABEL_96;
        }
        v39 = 0;
        v98 = 0;
LABEL_96:
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v22);
        else
          *(_DWORD *)v57 -= 2;
LABEL_99:
        v60 = v101;
        v101 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, v22);
          else
            *(_DWORD *)v60 -= 2;
        }
LABEL_103:
        v61 = v103;
        v103 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, v22);
          else
            *(_DWORD *)v61 -= 2;
        }
        if (*(_DWORD *)v13 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v13;
        if (v39)
          goto LABEL_158;
        ++v11;
        v10 -= 8;
        if (!v10)
          goto LABEL_112;
      }
      v39 = 0;
      goto LABEL_95;
    }
    v69 = *a4;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v106);
    v91 = (WTF::StringImpl *)"The parameter 'interactions' was not found or empty.";
    v92 = 53;
    LOBYTE(v103) = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v106, (char *)&v103, (uint64_t *)&v91, &v104);
    if (!v104)
    {
      __break(0xC471u);
      JUMPOUT(0x19768D284);
    }
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v69, (const WTF::String *)&v104);
    v71 = (WTF::StringImpl *)v104;
    v104 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v70);
      else
        *(_DWORD *)v71 -= 2;
    }
    v75 = v106;
    v106 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v70);
      else
        *(_DWORD *)v75 -= 2;
    }
LABEL_159:
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  else
  {
    v66 = *a4;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v91);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v66, (const WTF::String *)&v91);
    v68 = v91;
    v91 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v67);
      else
        *(_DWORD *)v68 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::performKeyboardInteractions(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  WebKit::WebAutomationSession::performKeyboardInteractions((WTF::String *)(a1 - 32), a2, a3, a4);
}

void WebKit::WebAutomationSession::performInteractionSequence(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, Inspector::BackendDispatcher::CallbackBase **a6)
{
  const WTF::String *v10;
  WebKit::WebPageProxy *v11;
  Inspector::BackendDispatcher::CallbackBase *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  Inspector::BackendDispatcher::CallbackBase *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::JSONImpl::ObjectBase **v19;
  WTF::JSONImpl::ObjectBase **v20;
  WTF::JSONImpl::ObjectBase *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  Inspector::BackendDispatcher::CallbackBase *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  Inspector::BackendDispatcher::CallbackBase *v34;
  WTF::StringImpl *v35;
  Inspector::BackendDispatcher::CallbackBase *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  Inspector::BackendDispatcher::CallbackBase *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl **v43;
  WTF::JSONImpl::ObjectBase **v44;
  const WTF::StringImpl *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  WTF **v50;
  int v51;
  unsigned int v52;
  WTF **v53;
  WTF *v54;
  WTF *v55;
  WTF *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  WTF *v68;
  Inspector::BackendDispatcher::CallbackBase *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  Inspector::BackendDispatcher::CallbackBase *v74;
  WTF::StringImpl *v75;
  Inspector::BackendDispatcher::CallbackBase *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  WTF::JSONImpl::ObjectBase **v80;
  uint64_t *v81;
  WTF::JSONImpl::ObjectBase *v82;
  unsigned int v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  WTF::JSONImpl::ObjectBase **v88;
  WTF::JSONImpl::ObjectBase *v89;
  unsigned int v90;
  WTF::StringImpl *v91;
  const WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  uint64_t *v94;
  Inspector::BackendDispatcher::CallbackBase **v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  Inspector::BackendDispatcher::CallbackBase *v100;
  WTF::StringImpl *v101;
  int i;
  int v103;
  WTF *v104;
  Inspector::BackendDispatcher::CallbackBase *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  WTF::StringImpl *v111;
  int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  int j;
  uint64_t v116;
  WTF *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  const WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  Inspector::BackendDispatcher::CallbackBase *v123;
  WTF::StringImpl *v124;
  WTF::JSONImpl::Value **v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  WTF::StringImpl *v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  WTF::StringImpl *v136;
  int v137;
  int v138;
  Inspector::BackendDispatcher::CallbackBase *v139;
  WTF::StringImpl *v140;
  Inspector::BackendDispatcher::CallbackBase *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  WTF::StringImpl *v148;
  int v149;
  _DWORD *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  int v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  int v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  Inspector::BackendDispatcher::CallbackBase *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::JSONImpl::ObjectBase *v169;
  WTF::StringImpl *v170;
  uint64_t Integer;
  WTF::StringImpl *v172;
  WTF::JSONImpl::ObjectBase *v173;
  WTF::StringImpl *v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  _DWORD *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::JSONImpl::ObjectBase *v180;
  WTF::StringImpl *v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  WTF::JSONImpl::ObjectBase *v184;
  WTF::StringImpl *v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  _DWORD *v188;
  WTF::StringImpl *v189;
  const WTF::StringImpl *v190;
  uint64_t v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *k;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  unsigned int v196;
  unint64_t v197;
  WTF::StringImpl *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  WTF::StringImpl *v207;
  char *v208;
  __int128 v209;
  __int128 v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  void *v216;
  Inspector::BackendDispatcher::CallbackBase *v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  Inspector::BackendDispatcher::CallbackBase *v221;
  WTF::StringImpl *v222;
  uint64_t v223;
  uint64_t *v224;
  WTF::StringImpl *v225;
  int v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  _DWORD *v229;
  Inspector::BackendDispatcher::CallbackBase *v231;
  WTF::StringImpl *v232;
  Inspector::BackendDispatcher::CallbackBase *v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  uint64_t v236;
  WebKit::SimulatedInputDispatcher *v237;
  Inspector::BackendDispatcher::CallbackBase *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  Inspector::BackendDispatcher::CallbackBase *v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  uint64_t v246;
  WTF::JSONImpl::ObjectBase **v247;
  WebKit::WebAutomationSession *v248;
  CFTypeRef *v249;
  Inspector::BackendDispatcher::CallbackBase **v250;
  WTF::JSONImpl::ObjectBase **v251;
  uint64_t *v252;
  __int128 v253;
  uint64_t v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD v261[2];
  WTF::StringImpl *v262;
  char v263;
  __int128 v264;
  __int128 v265;
  char v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  WTF::StringImpl *v269;
  WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275[2];
  __int128 v276;
  _BYTE v277[13];
  WTF::StringImpl *v278;
  char v279;
  _BYTE v280[32];
  char v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  WTF::StringImpl *v285;
  WTF::StringImpl *v286;
  uint64_t v287;
  WTF::StringImpl *v288;
  uint64_t v289;
  WTF::StringImpl *v290;
  WTF::StringImpl *v291;
  WTF::StringImpl *v292;
  uint64_t v293;
  WTF::StringImpl *v294;
  WTF::StringImpl *v295;
  WTF::StringImpl *v296;
  WTF::StringImpl *v297;
  WTF::StringImpl *v298;
  WTF::StringImpl *v299;
  WTF::StringImpl **v300;
  WTF::StringImpl *v301;
  __int128 v302;
  uint64_t v303;
  char v304;
  WebKit::WebPageProxy *v305;
  char v306;
  char v307[32];

  v10 = a1;
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v305, a1, a2);
  v11 = v305;
  if (!v305)
  {
    v15 = *a6;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v256);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v15, (const WTF::String *)&v256);
    v17 = v256;
    v256 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    return;
  }
  v304 = 0;
  WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v302, v10, a3, &v304);
  if (v304)
  {
    v12 = *a6;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v256);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v12, (const WTF::String *)&v256);
    v14 = v256;
    v256 = 0;
    if (!v14)
    {
LABEL_508:
      CFRelease(*((CFTypeRef *)v11 + 1));
      return;
    }
LABEL_4:
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
    goto LABEL_508;
  }
  v18 = *(unsigned int *)(*(_QWORD *)a4 + 28);
  if (!(_DWORD)v18)
  {
    v76 = *a6;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v301);
    v256 = (WTF::StringImpl *)"The parameter 'inputSources' was not found or empty.";
    v257 = 53;
    v307[0] = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v301, v307, (uint64_t *)&v256, v275);
    if (!v275[0])
    {
      __break(0xC471u);
      JUMPOUT(0x19768F218);
    }
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v76, (const WTF::String *)v275);
    v77 = v275[0];
    v275[0] = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v13);
      else
        *(_DWORD *)v77 -= 2;
    }
    v14 = v301;
    v301 = 0;
    if (!v14)
      goto LABEL_508;
    goto LABEL_4;
  }
  v246 = a5;
  v19 = *(WTF::JSONImpl::ObjectBase ***)(*(_QWORD *)a4 + 16);
  v20 = &v19[v18];
  v252 = (uint64_t *)((char *)v10 + 280);
  v300 = 0;
  do
  {
    v21 = *v19;
    v22 = *((_DWORD *)*v19 + 1);
    if (v22 != 5)
    {
      if (v22 > 6 || v22 == 5)
      {
        __break(0xC471u);
        JUMPOUT(0x19768F180);
      }
      v74 = *a6;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v299);
      v256 = (WTF::StringImpl *)"An input source in the 'inputSources' parameter was invalid.";
      v257 = 61;
      v307[0] = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v299, v307, (uint64_t *)&v256, v275);
      if (!v275[0])
      {
        __break(0xC471u);
        JUMPOUT(0x19768F210);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v74, (const WTF::String *)v275);
      v75 = v275[0];
      v275[0] = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v28);
        else
          *(_DWORD *)v75 -= 2;
      }
      v78 = v299;
      v299 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, v28);
        else
          *(_DWORD *)v78 -= 2;
      }
      goto LABEL_505;
    }
    ++*(_DWORD *)v21;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)v307 = v256;
    WTF::JSONImpl::ObjectBase::getString(v21, (const WTF::String *)v307);
    v24 = *(WTF::StringImpl **)v307;
    *(_QWORD *)v307 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (!v275[0])
    {
      v27 = *a6;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v298);
      v256 = (WTF::StringImpl *)"An input source in the 'inputSources' parameter is missing a 'sourceId'.";
      v257 = 73;
      LOBYTE(v292) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v298, (char *)&v292, (uint64_t *)&v256, v307);
      if (!*(_QWORD *)v307)
      {
        __break(0xC471u);
        JUMPOUT(0x19768F1E8);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v27, (const WTF::String *)v307);
      v29 = *(WTF::StringImpl **)v307;
      *(_QWORD *)v307 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v28);
        else
          *(_DWORD *)v29 -= 2;
      }
      v38 = v298;
      v298 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v28);
        else
          *(_DWORD *)v38 -= 2;
      }
      v39 = 1;
      goto LABEL_109;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v292 = v256;
    WTF::JSONImpl::ObjectBase::getString(v21, (const WTF::String *)&v292);
    v26 = v292;
    v292 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    if (!*(_QWORD *)v307)
    {
      v34 = *a6;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v297);
      v256 = (WTF::StringImpl *)"An input source in the 'inputSources' parameter is missing a 'sourceType'.";
      v257 = 75;
      LOBYTE(v286) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v297, (char *)&v286, (uint64_t *)&v256, &v292);
      if (!v292)
      {
        __break(0xC471u);
        JUMPOUT(0x19768F1F0);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v34, (const WTF::String *)&v292);
      v35 = v292;
      v292 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v28);
        else
          *(_DWORD *)v35 -= 2;
      }
      v40 = v297;
      v297 = 0;
      if (!v40)
        goto LABEL_104;
LABEL_101:
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v28);
      else
        *(_DWORD *)v40 -= 2;
      goto LABEL_104;
    }
    v30 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::InputSourceType>(v307);
    if ((v30 & 0xFF00000000) == 0)
    {
      v36 = *a6;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v296);
      v256 = (WTF::StringImpl *)"An input source in the 'inputSources' parameter has an invalid 'sourceType'.";
      v257 = 77;
      LOBYTE(v286) = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v296, (char *)&v286, (uint64_t *)&v256, &v292);
      if (!v292)
      {
        __break(0xC471u);
        JUMPOUT(0x19768F1F8);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v36, (const WTF::String *)&v292);
      v37 = v292;
      v292 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v28);
        else
          *(_DWORD *)v37 -= 2;
      }
      v40 = v296;
      v296 = 0;
      if (!v40)
        goto LABEL_104;
      goto LABEL_101;
    }
    v32 = 0;
    v33 = 3;
    switch((int)v30)
    {
      case 'p':
        goto LABEL_54;
      case 'q':
      case 'u':
        goto LABEL_55;
      case 'r':
        v32 = 1;
        goto LABEL_54;
      case 's':
        v32 = 3;
LABEL_54:
        v33 = v32;
LABEL_55:
        v250 = a6;
        v43 = v300;
        if (!v300)
          goto LABEL_56;
        v63 = *((_DWORD *)v300 - 2);
        v64 = *((_DWORD *)v275[0] + 4);
        if (v64 >= 0x100)
          v65 = v64 >> 8;
        else
          v65 = WTF::StringImpl::hashSlowCase(v275[0]);
        v66 = 0;
        break;
      case 't':
        v41 = *a6;
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(15, &v295);
        v256 = (WTF::StringImpl *)"Wheel input sources are not yet supported.";
        v257 = 43;
        LOBYTE(v286) = 59;
        WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v295, (char *)&v286, (uint64_t *)&v256, &v292);
        if (!v292)
        {
          __break(0xC471u);
          JUMPOUT(0x19768F200);
        }
        Inspector::BackendDispatcher::CallbackBase::sendFailure(v41, (const WTF::String *)&v292);
        v42 = v292;
        v292 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v28);
          else
            *(_DWORD *)v42 -= 2;
        }
        v40 = v295;
        v295 = 0;
        if (!v40)
          goto LABEL_104;
        goto LABEL_101;
      default:
        __break(0xC471u);
        JUMPOUT(0x19768F1E0);
    }
    while (1)
    {
      v67 = v65 & v63;
      v68 = v43[v65 & v63];
      if (v68 == (WTF *)-1)
        goto LABEL_94;
      if (!v68)
        break;
      if ((WTF::equal(v68, v275[0], v31) & 1) != 0)
      {
        a6 = v250;
        v69 = *v250;
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v294);
        v256 = (WTF::StringImpl *)"Two input sources with the same sourceId were specified.";
        v257 = 57;
        LOBYTE(v286) = 59;
        WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v294, (char *)&v286, (uint64_t *)&v256, &v292);
        if (!v292)
        {
          __break(0xC471u);
          JUMPOUT(0x19768F208);
        }
        Inspector::BackendDispatcher::CallbackBase::sendFailure(v69, (const WTF::String *)&v292);
        v70 = v292;
        v292 = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, v28);
          else
            *(_DWORD *)v70 -= 2;
        }
        v40 = v294;
        v294 = 0;
        if (v40)
          goto LABEL_101;
LABEL_104:
        v39 = 1;
        goto LABEL_105;
      }
LABEL_94:
      v65 = ++v66 + v67;
    }
LABEL_56:
    v44 = v20;
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v300, v275, v31, (uint64_t)&v256);
    v46 = *v252;
    if (*v252
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v252),
          (v46 = *v252) != 0))
    {
      v47 = *(_DWORD *)(v46 - 8);
    }
    else
    {
      v47 = 0;
    }
    v248 = v10;
    v48 = *((_DWORD *)v275[0] + 4);
    if (v48 >= 0x100)
      v49 = v48 >> 8;
    else
      v49 = WTF::StringImpl::hashSlowCase(v275[0]);
    v50 = 0;
    v51 = 1;
    while (2)
    {
      v52 = v49 & v47;
      v53 = (WTF **)(v46 + 16 * (v49 & v47));
      v54 = *v53;
      if (*v53 == (WTF *)-1)
      {
        v50 = (WTF **)(v46 + 16 * v52);
LABEL_68:
        v49 = v51 + v52;
        ++v51;
        continue;
      }
      break;
    }
    if (v54)
    {
      if ((WTF::equal(v54, v275[0], v45) & 1) != 0)
      {
        v39 = 0;
        v10 = v248;
        a6 = v250;
        v20 = v44;
        goto LABEL_105;
      }
      goto LABEL_68;
    }
    if (v50)
    {
      *v50 = 0;
      v50[1] = 0;
      --*(_DWORD *)(*v252 - 16);
      v53 = v50;
    }
    WTF::String::operator=(v53, (WTF::StringImpl *)v275);
    v55 = (WTF *)WTF::fastMalloc((WTF *)0x70);
    *(_DWORD *)v55 = 1;
    *((_DWORD *)v55 + 1) = v33;
    WebKit::SimulatedInputSourceState::emptyStateForSourceType(v33, (uint64_t)v55 + 8);
    v56 = v53[1];
    v53[1] = v55;
    a6 = v250;
    if (v56)
      WTF::RefCounted<WebKit::SimulatedInputSource>::deref(v56, v28);
    v57 = *v252;
    v20 = v44;
    if (*v252)
      v58 = *(_DWORD *)(v57 - 12) + 1;
    else
      v58 = 1;
    *(_DWORD *)(v57 - 12) = v58;
    v59 = *v252;
    if (*v252)
      v60 = *(_DWORD *)(v59 - 12);
    else
      v60 = 0;
    v61 = (*(_DWORD *)(v59 - 16) + v60);
    v62 = *(unsigned int *)(v59 - 4);
    if (v62 > 0x400)
    {
      if (v62 <= 2 * v61)
LABEL_81:
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v252);
    }
    else if (3 * v62 <= 4 * v61)
    {
      goto LABEL_81;
    }
    v39 = 0;
    v10 = v248;
LABEL_105:
    v71 = *(WTF::StringImpl **)v307;
    *(_QWORD *)v307 = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v28);
      else
        *(_DWORD *)v71 -= 2;
    }
LABEL_109:
    v72 = v275[0];
    v275[0] = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, v28);
      else
        *(_DWORD *)v72 -= 2;
    }
    if (*(_DWORD *)v21 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v21;
    if (v39)
      goto LABEL_505;
    ++v19;
  }
  while (v19 != v20);
  v292 = 0;
  v293 = 0;
  v79 = *(unsigned int *)(*(_QWORD *)v246 + 28);
  if (!(_DWORD)v79)
  {
    v233 = *a6;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v291);
    v256 = (WTF::StringImpl *)"The parameter 'steps' was not found or empty.";
    v257 = 46;
    v307[0] = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v291, v307, (uint64_t *)&v256, v275);
    if (!v275[0])
    {
      __break(0xC471u);
      JUMPOUT(0x19768F268);
    }
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v233, (const WTF::String *)v275);
    v234 = v275[0];
    v275[0] = 0;
    if (v234)
    {
      if (*(_DWORD *)v234 == 2)
        WTF::StringImpl::destroy(v234, v218);
      else
        *(_DWORD *)v234 -= 2;
    }
    v235 = v291;
    v291 = 0;
    if (!v235)
      goto LABEL_504;
LABEL_488:
    if (*(_DWORD *)v235 == 2)
      WTF::StringImpl::destroy(v235, v218);
    else
      *(_DWORD *)v235 -= 2;
    goto LABEL_504;
  }
  v249 = (CFTypeRef *)v10;
  v80 = *(WTF::JSONImpl::ObjectBase ***)(*(_QWORD *)v246 + 16);
  v247 = &v80[v79];
  v81 = &v257;
  while (1)
  {
    v82 = *v80;
    v83 = *((_DWORD *)*v80 + 1);
    if (v83 != 5)
      break;
    ++*(_DWORD *)v82;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v275[0] = v256;
    WTF::JSONImpl::ObjectBase::getArray(v82, (const WTF::String *)v275);
    v85 = v275[0];
    v275[0] = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
        WTF::StringImpl::destroy(v85, v84);
      else
        *(_DWORD *)v85 -= 2;
    }
    if (!v289)
    {
      v217 = *a6;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v288);
      v256 = (WTF::StringImpl *)"A step is missing the 'states' property.";
      v257 = 41;
      v307[0] = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v288, v307, (uint64_t *)&v256, v275);
      if (!v275[0])
      {
        __break(0xC471u);
        JUMPOUT(0x19768F250);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v217, (const WTF::String *)v275);
      v219 = v275[0];
      v275[0] = 0;
      if (v219)
      {
        if (*(_DWORD *)v219 == 2)
          WTF::StringImpl::destroy(v219, v218);
        else
          *(_DWORD *)v219 -= 2;
      }
      v227 = v288;
      v288 = 0;
      if (v227)
      {
        if (*(_DWORD *)v227 == 2)
          WTF::StringImpl::destroy(v227, v218);
        else
          *(_DWORD *)v227 -= 2;
      }
      v226 = 1;
      goto LABEL_460;
    }
    v286 = 0;
    v287 = 0;
    WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v286, *(unsigned int *)(v289 + 28));
    v87 = *(unsigned int *)(v289 + 28);
    if (!(_DWORD)v87)
      goto LABEL_443;
    v88 = *(WTF::JSONImpl::ObjectBase ***)(v289 + 16);
    v251 = &v88[v87];
LABEL_153:
    v89 = *v88;
    v90 = *((_DWORD *)*v88 + 1);
    if (v90 == 5)
    {
      ++*(_DWORD *)v89;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v275[0] = v256;
      WTF::JSONImpl::ObjectBase::getString(v89, (const WTF::String *)v275);
      v93 = v275[0];
      v275[0] = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 2)
          WTF::StringImpl::destroy(v93, v91);
        else
          *(_DWORD *)v93 -= 2;
      }
      if (!v284)
      {
        v100 = *a6;
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v283);
        v256 = (WTF::StringImpl *)"Step state lacks required 'sourceId' property.";
        v257 = 47;
        v307[0] = 59;
        WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v283, v307, (uint64_t *)&v256, v275);
        if (!v275[0])
        {
          __break(0xC471u);
          JUMPOUT(0x19768F220);
        }
        Inspector::BackendDispatcher::CallbackBase::sendFailure(v100, (const WTF::String *)v275);
        v101 = v275[0];
        v275[0] = 0;
        if (v101)
        {
          if (*(_DWORD *)v101 == 2)
            WTF::StringImpl::destroy(v101, v86);
          else
            *(_DWORD *)v101 -= 2;
        }
        v111 = v283;
        v283 = 0;
        if (v111)
        {
LABEL_184:
          if (*(_DWORD *)v111 == 2)
            WTF::StringImpl::destroy(v111, v86);
          else
            *(_DWORD *)v111 -= 2;
        }
LABEL_187:
        v112 = 1;
        goto LABEL_188;
      }
      v94 = v81;
      v95 = a6;
      v96 = *v252;
      if (!*v252)
      {
LABEL_172:
        a6 = v95;
        v105 = *v95;
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v282);
        v256 = (WTF::StringImpl *)"Unknown 'sourceId' specified.";
        v257 = 30;
        v307[0] = 59;
        WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v282, v307, (uint64_t *)&v256, v275);
        if (!v275[0])
        {
          __break(0xC471u);
          JUMPOUT(0x19768F228);
        }
        Inspector::BackendDispatcher::CallbackBase::sendFailure(v105, (const WTF::String *)v275);
        v106 = v275[0];
        v275[0] = 0;
        v81 = v94;
        if (v106)
        {
          if (*(_DWORD *)v106 == 2)
            WTF::StringImpl::destroy(v106, v86);
          else
            *(_DWORD *)v106 -= 2;
        }
        v111 = v282;
        v282 = 0;
        if (v111)
          goto LABEL_184;
        goto LABEL_187;
      }
      v97 = *(_DWORD *)(v96 - 8);
      v98 = *((_DWORD *)v284 + 4);
      if (v98 >= 0x100)
        v99 = v98 >> 8;
      else
        v99 = WTF::StringImpl::hashSlowCase(v284);
      for (i = 0; ; v99 = i + v103)
      {
        v103 = v99 & v97;
        v104 = *(WTF **)(v96 + 16 * (v99 & v97));
        if (v104 != (WTF *)-1)
        {
          if (!v104)
            goto LABEL_172;
          if ((WTF::equal(v104, v284, v92) & 1) != 0)
            break;
        }
        ++i;
      }
      v107 = *v252;
      if (*v252)
      {
        v108 = *(_DWORD *)(v107 - 8);
        v109 = *((_DWORD *)v284 + 4);
        a6 = v95;
        if (v109 >= 0x100)
          v110 = v109 >> 8;
        else
          v110 = WTF::StringImpl::hashSlowCase(v284);
        for (j = 0; ; v110 = j + v116)
        {
          v116 = v110 & v108;
          v117 = *(WTF **)(v107 + 16 * v116);
          if (v117 != (WTF *)-1)
          {
            if (!v117)
            {
              v114 = 0;
              goto LABEL_207;
            }
            if ((WTF::equal(v117, v284, v92) & 1) != 0)
              break;
          }
          ++j;
        }
        v114 = *(WTF::StringImpl **)(v107 + 16 * v116 + 8);
      }
      else
      {
        v114 = 0;
        a6 = v95;
      }
LABEL_207:
      ++*(_DWORD *)v114;
      v277[4] = 0;
      v277[8] = 0;
      v277[12] = 0;
      LOBYTE(v278) = 0;
      v279 = 0;
      v280[0] = 0;
      v280[8] = 0;
      v280[12] = 0;
      v280[20] = 0;
      v280[24] = 0;
      v281 = 0;
      *(_OWORD *)v275 = 0u;
      v276 = 0u;
      v277[0] = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_QWORD *)v307 = v256;
      WTF::JSONImpl::ObjectBase::getString(v89, (const WTF::String *)v307);
      v119 = *(WTF::StringImpl **)v307;
      *(_QWORD *)v307 = 0;
      v81 = v94;
      if (v119)
      {
        if (*(_DWORD *)v119 == 2)
          WTF::StringImpl::destroy(v119, v118);
        else
          *(_DWORD *)v119 -= 2;
      }
      if (v274)
      {
        if (WTF::numGraphemeClusters() != 1)
        {
          v123 = *a6;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v273);
          v256 = (WTF::StringImpl *)"Invalid 'pressedCharKey'.";
          v257 = 26;
          LOBYTE(v272) = 59;
          WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v273, (char *)&v272, (uint64_t *)&v256, v307);
          if (!*(_QWORD *)v307)
          {
            __break(0xC471u);
            JUMPOUT(0x19768F230);
          }
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v123, (const WTF::String *)v307);
          v124 = *(WTF::StringImpl **)v307;
          *(_QWORD *)v307 = 0;
          if (v124)
          {
            if (*(_DWORD *)v124 == 2)
              WTF::StringImpl::destroy(v124, v121);
            else
              *(_DWORD *)v124 -= 2;
          }
          v161 = v273;
          v273 = 0;
          if (v161)
          {
            if (*(_DWORD *)v161 == 2)
              WTF::StringImpl::destroy(v161, v121);
            else
              *(_DWORD *)v161 -= 2;
          }
          v112 = 1;
          goto LABEL_417;
        }
        WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t *)v275, &v274, v120, (uint64_t)&v256);
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v272 = v256;
      WTF::JSONImpl::ObjectBase::getArray(v89, (const WTF::String *)&v272);
      v122 = v272;
      v272 = 0;
      if (v122)
      {
        if (*(_DWORD *)v122 == 2)
          WTF::StringImpl::destroy(v122, v121);
        else
          *(_DWORD *)v122 -= 2;
      }
      v245 = v114;
      if (!*(_QWORD *)v307)
        goto LABEL_284;
      v272 = 0;
      if (!*(_DWORD *)(*(_QWORD *)v307 + 28))
      {
LABEL_279:
        WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::operator=((uint64_t *)&v276 + 1, (int **)&v272);
        v149 = 1;
        goto LABEL_281;
      }
      v125 = *(WTF::JSONImpl::Value ***)(*(_QWORD *)v307 + 16);
      while (1)
      {
        WTF::JSONImpl::Value::asString(*v125);
        if (!v271)
          break;
        v126 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::VirtualKey>(&v271);
        if ((v126 & 0xFF00000000) != 0)
        {
          v127 = v126;
          v128 = v126 - 40;
          v129 = v126;
          if ((v126 - 40) <= 0x21)
          {
            v129 = v126;
            if (((0x2AAAA805BuLL >> v128) & 1) != 0)
              v129 = dword_1978D0F08[v128];
          }
          v130 = v272;
          if (v272
            || (WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::expand((uint64_t *)&v272),
                (v130 = v272) != 0))
          {
            v131 = *((_DWORD *)v130 - 2);
          }
          else
          {
            v131 = 0;
          }
          v132 = 9 * ((v129 + ~(v129 << 15)) ^ ((v129 + ~(v129 << 15)) >> 10));
          v133 = (v132 ^ (v132 >> 6)) + ~((v132 ^ (v132 >> 6)) << 11);
          v134 = v131 & (v133 ^ HIWORD(v133));
          v121 = (WTF::StringImpl *)((char *)v130 + 8 * v134);
          v135 = *(_DWORD *)v121;
          if (*(_DWORD *)v121 != 0x7FFFFFFF)
          {
            v136 = 0;
            v137 = 1;
            do
            {
              if (v135 == v129)
              {
                v147 = 1;
                v81 = v94;
                goto LABEL_269;
              }
              if (v135 == 2147483646)
                v136 = v121;
              v134 = (v134 + v137) & v131;
              v121 = (WTF::StringImpl *)((char *)v130 + 8 * v134);
              v135 = *(_DWORD *)v121;
              ++v137;
            }
            while (*(_DWORD *)v121 != 0x7FFFFFFF);
            if (v136)
            {
              *(_QWORD *)v136 = 0x7FFFFFFFLL;
              --*((_DWORD *)v272 - 4);
              v121 = v136;
            }
          }
          *(_DWORD *)v121 = v129;
          *((_DWORD *)v121 + 1) = v127;
          if (v272)
            v138 = *((_DWORD *)v272 - 3) + 1;
          else
            v138 = 1;
          v81 = v94;
          *((_DWORD *)v272 - 3) = v138;
          if (v272)
            v144 = *((_DWORD *)v272 - 3);
          else
            v144 = 0;
          v145 = (*((_DWORD *)v272 - 4) + v144);
          v146 = *((unsigned int *)v272 - 1);
          if (v146 > 0x400)
          {
            if (v146 <= 2 * v145)
LABEL_260:
              WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::expand((uint64_t *)&v272);
          }
          else if (3 * v146 <= 4 * v145)
          {
            goto LABEL_260;
          }
          v147 = 1;
          goto LABEL_269;
        }
        v141 = *a6;
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v268);
        v256 = (WTF::StringImpl *)"Encountered an unknown virtual key value.";
        v257 = 42;
        v306 = 59;
        WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v268, &v306, (uint64_t *)&v256, &v270);
        if (!v270)
        {
          __break(0xC471u);
          JUMPOUT(0x19768F240);
        }
        Inspector::BackendDispatcher::CallbackBase::sendFailure(v141, (const WTF::String *)&v270);
        v142 = v270;
        v270 = 0;
        if (v142)
        {
          if (*(_DWORD *)v142 == 2)
            WTF::StringImpl::destroy(v142, v121);
          else
            *(_DWORD *)v142 -= 2;
        }
        v143 = v268;
        v268 = 0;
        if (v143)
          goto LABEL_265;
LABEL_268:
        v147 = 0;
LABEL_269:
        v148 = v271;
        v271 = 0;
        if (v148)
        {
          if (*(_DWORD *)v148 == 2)
            WTF::StringImpl::destroy(v148, v121);
          else
            *(_DWORD *)v148 -= 2;
        }
        if ((v147 & 1) == 0)
        {
          v149 = 0;
LABEL_281:
          if (v272)
            WTF::fastFree((WTF::StringImpl *)((char *)v272 - 16), v121);
          if (v149)
LABEL_284:
            v149 = 1;
          v150 = *(_DWORD **)v307;
          *(_QWORD *)v307 = 0;
          if (v150)
          {
            if (*v150 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v150;
          }
          if (v149)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *(_QWORD *)v307 = v256;
            WTF::JSONImpl::ObjectBase::getString(v89, (const WTF::String *)v307);
            v152 = *(WTF::StringImpl **)v307;
            *(_QWORD *)v307 = 0;
            if (v152)
            {
              if (*(_DWORD *)v152 == 2)
                WTF::StringImpl::destroy(v152, v151);
              else
                *(_DWORD *)v152 -= 2;
            }
            if (v272)
            {
              v153 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseButton>(&v272);
              if ((v153 & 0xFF00000000) != 0)
                v154 = v153;
              else
                v154 = 24;
              *(_DWORD *)v277 = v154;
              v277[4] = 1;
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            *(_QWORD *)v307 = v256;
            WTF::JSONImpl::ObjectBase::getString(v89, (const WTF::String *)v307);
            v156 = *(WTF::StringImpl **)v307;
            *(_QWORD *)v307 = 0;
            v114 = v245;
            if (v156)
            {
              if (*(_DWORD *)v156 == 2)
                WTF::StringImpl::destroy(v156, v155);
              else
                *(_DWORD *)v156 -= 2;
            }
            if (v271)
            {
              v157 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::MouseMoveOrigin>(&v271);
              *(_DWORD *)&v277[8] = v157;
              v277[12] = BYTE4(v157);
              v158 = BYTE4(v157);
            }
            else
            {
              v158 = v277[12];
              LODWORD(v157) = *(_DWORD *)&v277[8];
            }
            if (!v158 || (_DWORD)v157 != 119)
              goto LABEL_335;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v270 = v256;
            WTF::JSONImpl::ObjectBase::getString(v89, (const WTF::String *)&v270);
            v160 = v270;
            v270 = 0;
            if (v160)
            {
              if (*(_DWORD *)v160 == 2)
                WTF::StringImpl::destroy(v160, v159);
              else
                *(_DWORD *)v160 -= 2;
            }
            v162 = *(_QWORD *)v307;
            if (*(_QWORD *)v307)
            {
              std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String&,void>((uint64_t)&v278, (WTF::StringImpl *)v307);
            }
            else
            {
              v163 = *a6;
              Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v267);
              v256 = (WTF::StringImpl *)"Node handle not provided for 'Element' origin";
              v257 = 46;
              v306 = 59;
              WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v267, &v306, (uint64_t *)&v256, &v270);
              if (!v270)
              {
                __break(0xC471u);
                JUMPOUT(0x19768F248);
              }
              Inspector::BackendDispatcher::CallbackBase::sendFailure(v163, (const WTF::String *)&v270);
              v164 = v270;
              v270 = 0;
              if (v164)
              {
                if (*(_DWORD *)v164 == 2)
                  WTF::StringImpl::destroy(v164, v121);
                else
                  *(_DWORD *)v164 -= 2;
              }
              v165 = v267;
              v267 = 0;
              if (v165)
              {
                if (*(_DWORD *)v165 == 2)
                  WTF::StringImpl::destroy(v165, v121);
                else
                  *(_DWORD *)v165 -= 2;
              }
            }
            v166 = *(WTF::StringImpl **)v307;
            *(_QWORD *)v307 = 0;
            if (v166)
            {
              if (*(_DWORD *)v166 == 2)
                WTF::StringImpl::destroy(v166, v121);
              else
                *(_DWORD *)v166 -= 2;
            }
            if (!v162)
            {
              v112 = 1;
            }
            else
            {
LABEL_335:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v270 = v256;
              WTF::JSONImpl::ObjectBase::getObject(v89, (const WTF::String *)&v270);
              v168 = v270;
              v270 = 0;
              if (v168)
              {
                if (*(_DWORD *)v168 == 2)
                  WTF::StringImpl::destroy(v168, v167);
                else
                  *(_DWORD *)v168 -= 2;
              }
              v169 = *(WTF::JSONImpl::ObjectBase **)v307;
              if (*(_QWORD *)v307)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v270 = v256;
                Integer = WTF::JSONImpl::ObjectBase::getInteger(v169, (const WTF::String *)&v270);
                v172 = v270;
                v270 = 0;
                if (v172)
                {
                  if (*(_DWORD *)v172 == 2)
                    WTF::StringImpl::destroy(v172, v170);
                  else
                    *(_DWORD *)v172 -= 2;
                }
                v173 = *(WTF::JSONImpl::ObjectBase **)v307;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v270 = v256;
                v175 = WTF::JSONImpl::ObjectBase::getInteger(v173, (const WTF::String *)&v270);
                v176 = v270;
                v270 = 0;
                if (v176)
                {
                  if (*(_DWORD *)v176 == 2)
                    WTF::StringImpl::destroy(v176, v174);
                  else
                    *(_DWORD *)v176 -= 2;
                }
                if ((Integer & 0xFF00000000) != 0 && (v175 & 0xFF00000000) != 0)
                {
                  if (!v280[8])
                    v280[8] = 1;
                  *(_QWORD *)v280 = Integer | ((unint64_t)v175 << 32);
                }
                v177 = *(_DWORD **)v307;
                *(_QWORD *)v307 = 0;
                v81 = v94;
                if (v177)
                {
                  if (*v177 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v177;
                }
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v270 = v256;
              WTF::JSONImpl::ObjectBase::getObject(v89, (const WTF::String *)&v270);
              v179 = v270;
              v270 = 0;
              if (v179)
              {
                if (*(_DWORD *)v179 == 2)
                  WTF::StringImpl::destroy(v179, v178);
                else
                  *(_DWORD *)v179 -= 2;
              }
              v180 = *(WTF::JSONImpl::ObjectBase **)v307;
              if (*(_QWORD *)v307)
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v270 = v256;
                v182 = WTF::JSONImpl::ObjectBase::getInteger(v180, (const WTF::String *)&v270);
                v183 = v270;
                v270 = 0;
                if (v183)
                {
                  if (*(_DWORD *)v183 == 2)
                    WTF::StringImpl::destroy(v183, v181);
                  else
                    *(_DWORD *)v183 -= 2;
                }
                v184 = *(WTF::JSONImpl::ObjectBase **)v307;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v270 = v256;
                v186 = WTF::JSONImpl::ObjectBase::getInteger(v184, (const WTF::String *)&v270);
                v187 = v270;
                v270 = 0;
                if (v187)
                {
                  if (*(_DWORD *)v187 == 2)
                    WTF::StringImpl::destroy(v187, v185);
                  else
                    *(_DWORD *)v187 -= 2;
                }
                if ((v182 & 0xFF00000000) != 0 && (v186 & 0xFF00000000) != 0)
                {
                  if (!v280[20])
                    v280[20] = 1;
                  *(_QWORD *)&v280[12] = v182 | ((unint64_t)v186 << 32);
                }
                v188 = *(_DWORD **)v307;
                *(_QWORD *)v307 = 0;
                v81 = v94;
                if (v188)
                {
                  if (*v188 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v188;
                }
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              *(_QWORD *)v307 = v256;
              v191 = WTF::JSONImpl::ObjectBase::getInteger(v89, (const WTF::String *)v307);
              v192 = *(WTF::StringImpl **)v307;
              *(_QWORD *)v307 = 0;
              if (v192)
              {
                if (*(_DWORD *)v192 == 2)
                  WTF::StringImpl::destroy(v192, v189);
                else
                  *(_DWORD *)v192 -= 2;
              }
              if ((v191 & 0xFF00000000) != 0)
              {
                if (!v281)
                  v281 = 1;
                *(double *)&v280[24] = (double)(int)v191 / 1000.0;
              }
              v256 = v245;
              v81[1] = 0;
              v81[2] = 0;
              *v81 = 0;
              for (k = v275[1]; k; k = (WTF::StringImpl *)*((_QWORD *)k + 2))
                WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add(v81, (WTF::StringImpl **)k, v190, (uint64_t)v307);
              WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::HashTable(&v260, (int **)&v276 + 1);
              v261[0] = *(_QWORD *)v277;
              *(_QWORD *)((char *)v261 + 5) = *(_QWORD *)&v277[5];
              LOBYTE(v262) = 0;
              v263 = 0;
              if (v279)
              {
                v195 = v278;
                if (v278)
                  *(_DWORD *)v278 += 2;
                v262 = v195;
                v263 = 1;
              }
              v264 = *(_OWORD *)v280;
              v265 = *(_OWORD *)&v280[16];
              v266 = v281;
              v196 = HIDWORD(v287);
              if (HIDWORD(v287) == (_DWORD)v287)
              {
                v197 = WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v286, HIDWORD(v287) + 1, (unint64_t)&v256);
                std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>::pair[abi:sn180100]((uint64_t)v286 + 112 * HIDWORD(v287), v197);
              }
              else
              {
                v198 = v286;
                v199 = (char *)v286 + 112 * HIDWORD(v287);
                *(_QWORD *)v199 = v256;
                *((_QWORD *)v199 + 1) = 0;
                v200 = v257;
                v257 = 0;
                *((_QWORD *)v199 + 1) = v200;
                v201 = v258;
                v258 = 0;
                *((_QWORD *)v199 + 2) = v201;
                v202 = v259;
                v259 = 0;
                *((_QWORD *)v199 + 3) = v202;
                *((_QWORD *)v199 + 4) = 0;
                v203 = v260;
                v260 = 0;
                *((_QWORD *)v199 + 4) = v203;
                v204 = v261[0];
                v205 = *(_QWORD *)((char *)v261 + 5);
                v199[56] = 0;
                v206 = v199 + 56;
                *(_QWORD *)(v206 - 11) = v205;
                *((_QWORD *)v206 - 2) = v204;
                v206[8] = 0;
                if (v263)
                {
                  v207 = v262;
                  v262 = 0;
                  *(_QWORD *)v206 = v207;
                  v206[8] = 1;
                }
                v208 = (char *)v198 + 112 * v196;
                v209 = v264;
                v210 = v265;
                v208[104] = v266;
                *(_OWORD *)(v208 + 88) = v210;
                *(_OWORD *)(v208 + 72) = v209;
              }
              ++HIDWORD(v287);
              if (v263)
              {
                v211 = v262;
                v262 = 0;
                if (v211)
                {
                  if (*(_DWORD *)v211 == 2)
                    WTF::StringImpl::destroy(v211, v194);
                  else
                    *(_DWORD *)v211 -= 2;
                }
              }
              if (v260)
                WTF::fastFree((WTF *)(v260 - 16), v194);
              WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)v81, v194);
              if (v257)
                WTF::fastFree((WTF *)(v257 - 16), v121);
              v112 = 0;
            }
            v212 = v271;
            v271 = 0;
            if (v212)
            {
              if (*(_DWORD *)v212 == 2)
                WTF::StringImpl::destroy(v212, v121);
              else
                *(_DWORD *)v212 -= 2;
            }
            v213 = v272;
            v272 = 0;
            if (v213)
            {
              if (*(_DWORD *)v213 == 2)
                WTF::StringImpl::destroy(v213, v121);
              else
                *(_DWORD *)v213 -= 2;
            }
          }
          else
          {
            v112 = 1;
            v114 = v245;
          }
LABEL_417:
          v214 = v274;
          v274 = 0;
          if (v214)
          {
            if (*(_DWORD *)v214 == 2)
              WTF::StringImpl::destroy(v214, v121);
            else
              *(_DWORD *)v214 -= 2;
          }
          if (v279)
          {
            v215 = v278;
            v278 = 0;
            if (v215)
            {
              if (*(_DWORD *)v215 == 2)
                WTF::StringImpl::destroy(v215, v121);
              else
                *(_DWORD *)v215 -= 2;
            }
          }
          if (*((_QWORD *)&v276 + 1))
            WTF::fastFree((WTF *)(*((_QWORD *)&v276 + 1) - 16), v121);
          WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)v275, v121);
          if (v275[0])
            WTF::fastFree((WTF::StringImpl *)((char *)v275[0] - 16), v216);
          WTF::RefCounted<WebKit::SimulatedInputSource>::deref(v114, (WTF::StringImpl *)v216);
LABEL_188:
          v113 = v284;
          v284 = 0;
          if (v113)
          {
            if (*(_DWORD *)v113 == 2)
              WTF::StringImpl::destroy(v113, v86);
            else
              *(_DWORD *)v113 -= 2;
          }
          if (*(_DWORD *)v89 == 1)
          {
            WTF::JSONImpl::Value::operator delete();
            if (v112)
              goto LABEL_470;
          }
          else
          {
            --*(_DWORD *)v89;
            if (v112)
            {
LABEL_470:
              v226 = 1;
              goto LABEL_459;
            }
          }
          if (++v88 == v251)
          {
LABEL_443:
            v256 = v286;
            v223 = v287;
            v286 = 0;
            v287 = 0;
            v257 = v223;
            if (HIDWORD(v293) == (_DWORD)v293)
            {
              WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::SimulatedInputKeyFrame>((uint64_t)&v292, (unint64_t)&v256);
            }
            else
            {
              v224 = (uint64_t *)((char *)v292 + 16 * HIDWORD(v293));
              *v224 = 0;
              v224[1] = 0;
              v225 = v256;
              v256 = 0;
              *v224 = (uint64_t)v225;
              LODWORD(v225) = v257;
              LODWORD(v257) = 0;
              *((_DWORD *)v224 + 2) = (_DWORD)v225;
              LODWORD(v225) = HIDWORD(v257);
              HIDWORD(v257) = 0;
              *((_DWORD *)v224 + 3) = (_DWORD)v225;
              ++HIDWORD(v293);
            }
            WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v256, v86);
            v226 = 0;
            goto LABEL_459;
          }
          goto LABEL_153;
        }
        if (++v125 == (WTF::JSONImpl::Value **)(*(_QWORD *)(*(_QWORD *)v307 + 16)
                                               + 8 * *(unsigned int *)(*(_QWORD *)v307 + 28)))
          goto LABEL_279;
      }
      v139 = *a6;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v269);
      v256 = (WTF::StringImpl *)"Encountered a non-string virtual key value.";
      v257 = 44;
      v306 = 59;
      WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v269, &v306, (uint64_t *)&v256, &v270);
      if (!v270)
      {
        __break(0xC471u);
        JUMPOUT(0x19768F238);
      }
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v139, (const WTF::String *)&v270);
      v140 = v270;
      v270 = 0;
      if (v140)
      {
        if (*(_DWORD *)v140 == 2)
          WTF::StringImpl::destroy(v140, v121);
        else
          *(_DWORD *)v140 -= 2;
      }
      v143 = v269;
      v269 = 0;
      if (!v143)
        goto LABEL_268;
LABEL_265:
      if (*(_DWORD *)v143 == 2)
        WTF::StringImpl::destroy(v143, v121);
      else
        *(_DWORD *)v143 -= 2;
      goto LABEL_268;
    }
    if (v90 > 6 || v90 == 5)
    {
      __break(0xC471u);
      JUMPOUT(0x19768F1A0);
    }
    v221 = *a6;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v285);
    v256 = (WTF::StringImpl *)"Encountered a non-object step state.";
    v257 = 37;
    v307[0] = 59;
    WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v285, v307, (uint64_t *)&v256, v275);
    if (!v275[0])
    {
      __break(0xC471u);
      JUMPOUT(0x19768F258);
    }
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v221, (const WTF::String *)v275);
    v222 = v275[0];
    v275[0] = 0;
    if (v222)
    {
      if (*(_DWORD *)v222 == 2)
        WTF::StringImpl::destroy(v222, v86);
      else
        *(_DWORD *)v222 -= 2;
    }
    v228 = v285;
    v285 = 0;
    if (v228)
    {
      if (*(_DWORD *)v228 == 2)
        WTF::StringImpl::destroy(v228, v86);
      else
        *(_DWORD *)v228 -= 2;
    }
    v226 = 1;
LABEL_459:
    WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v286, v86);
LABEL_460:
    v229 = (_DWORD *)v289;
    v289 = 0;
    if (v229)
    {
      if (*v229 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v229;
    }
    if (*(_DWORD *)v82 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v82;
    if (v226)
      goto LABEL_504;
    if (++v80 == v247)
    {
      v236 = WebKit::WebAutomationSession::inputDispatcherForPage((WebKit::WebAutomationSession *)v249, v305);
      v237 = (WebKit::SimulatedInputDispatcher *)v236;
      ++*(_DWORD *)v236;
      if (*(_QWORD *)(v236 + 48))
      {
        v238 = *a6;
        Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v255);
        v256 = (WTF::StringImpl *)"A previous interaction is still underway.";
        v257 = 42;
        v307[0] = 59;
        WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v255, v307, (uint64_t *)&v256, v275);
        if (!v275[0])
        {
          __break(0xC471u);
          JUMPOUT(0x19768F270);
        }
        Inspector::BackendDispatcher::CallbackBase::sendFailure(v238, (const WTF::String *)v275);
        v240 = v275[0];
        v275[0] = 0;
        if (v240)
        {
          if (*(_DWORD *)v240 == 2)
            WTF::StringImpl::destroy(v240, v239);
          else
            *(_DWORD *)v240 -= 2;
        }
        v244 = v255;
        v255 = 0;
        if (v244)
        {
          if (*(_DWORD *)v244 == 2)
            WTF::StringImpl::destroy(v244, v239);
          else
            *(_DWORD *)v244 -= 2;
        }
      }
      else
      {
        v253 = v302;
        v254 = v303;
        CFRetain(v249[1]);
        v241 = *a6;
        *a6 = 0;
        v242 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v242 = &off_1E34F4260;
        *((_QWORD *)v242 + 1) = v249;
        *((_QWORD *)v242 + 2) = v241;
        v256 = v242;
        WebKit::SimulatedInputDispatcher::run((uint64_t)v237, &v253, (uint64_t **)&v292, (_QWORD **)v252, (uint64_t *)&v256);
        v243 = v256;
        v256 = 0;
        if (v243)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v243 + 8))(v243);
      }
      WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v237, v239);
      goto LABEL_504;
    }
  }
  if (v83 > 6 || v83 == 5)
  {
    __break(0xC471u);
    JUMPOUT(0x19768F1C0);
  }
  v231 = *a6;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(17, &v290);
  v256 = (WTF::StringImpl *)"A step in the 'steps' parameter was not an object.";
  v257 = 51;
  v307[0] = 59;
  WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v290, v307, (uint64_t *)&v256, v275);
  if (!v275[0])
  {
    __break(0xC471u);
    JUMPOUT(0x19768F260);
  }
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v231, (const WTF::String *)v275);
  v232 = v275[0];
  v275[0] = 0;
  if (v232)
  {
    if (*(_DWORD *)v232 == 2)
      WTF::StringImpl::destroy(v232, v218);
    else
      *(_DWORD *)v232 -= 2;
  }
  v235 = v290;
  v290 = 0;
  if (v235)
    goto LABEL_488;
LABEL_504:
  WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v292, v218);
LABEL_505:
  if (v300)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v300, v28);
  v11 = v305;
  if (v305)
    goto LABEL_508;
}

void `non-virtual thunk to'WebKit::WebAutomationSession::performInteractionSequence(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, Inspector::BackendDispatcher::CallbackBase **a6)
{
  WebKit::WebAutomationSession::performInteractionSequence((WTF::String *)(a1 - 32), a2, a3, a4, a5, a6);
}

void WebKit::WebAutomationSession::cancelInteractionSequence(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  CFTypeRef *v7;
  Inspector::BackendDispatcher::CallbackBase *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  Inspector::BackendDispatcher::CallbackBase *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  _DWORD *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  WebKit::SimulatedInputDispatcher *v31;
  Inspector::BackendDispatcher::CallbackBase *v32;
  WTF::StringImpl *v33;
  void *v34;
  WTF::StringImpl *v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  CFTypeRef *v44;
  WTF::StringImpl *v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v44, a1, a2);
  v7 = v44;
  if (v44)
  {
    v43 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v41, a1, a3, &v43);
    if (v43)
    {
      v8 = *a4;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v45);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v8, (const WTF::String *)&v45);
      v10 = v45;
      v45 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      WebKit::SimulatedInputKeyFrame::keyFrameToResetInputSources((uint64_t *)a1 + 35, (uint64_t)&v49);
      v14 = WTF::fastMalloc((WTF *)0x10);
      v16 = 1;
      v40 = 1;
      v39 = (uint64_t *)v14;
      v17 = v50;
      *(_QWORD *)v14 = 0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_DWORD *)(v14 + 12) = v17;
      if ((_DWORD)v17)
      {
        if (v17 >= 0x2492493)
        {
          __break(0xC471u);
          return;
        }
        v18 = v14;
        v19 = 112 * v17;
        v20 = WTF::fastMalloc((WTF *)(112 * v17));
        *(_DWORD *)(v18 + 8) = (613566757 * (unint64_t)(v19 >> 4)) >> 32;
        *(_QWORD *)v18 = v20;
        v16 = 1;
        if (v50)
        {
          v22 = v20;
          v23 = v49;
          v24 = v49 + 112 * v50;
          do
          {
            *(_QWORD *)v22 = *(_QWORD *)v23;
            *(_QWORD *)(v22 + 8) = 0;
            *(_QWORD *)(v22 + 16) = 0;
            *(_QWORD *)(v22 + 24) = 0;
            for (i = *(_QWORD *)(v23 + 16); i; i = *(_QWORD *)(i + 16))
              WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t *)(v22 + 8), (WTF::StringImpl **)i, v21, (uint64_t)&v45);
            WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::HashTable((uint64_t *)(v22 + 32), (int **)(v23 + 32));
            v26 = *(_QWORD *)(v23 + 40);
            *(_QWORD *)(v22 + 45) = *(_QWORD *)(v23 + 45);
            *(_QWORD *)(v22 + 40) = v26;
            *(_BYTE *)(v22 + 56) = 0;
            *(_BYTE *)(v22 + 64) = 0;
            if (*(_BYTE *)(v23 + 64))
            {
              v27 = *(_DWORD **)(v23 + 56);
              if (v27)
                *v27 += 2;
              *(_QWORD *)(v22 + 56) = v27;
              *(_BYTE *)(v22 + 64) = 1;
            }
            v28 = *(_OWORD *)(v23 + 72);
            v29 = *(_OWORD *)(v23 + 88);
            *(_BYTE *)(v22 + 104) = *(_BYTE *)(v23 + 104);
            *(_OWORD *)(v22 + 88) = v29;
            *(_OWORD *)(v22 + 72) = v28;
            v22 += 112;
            v23 += 112;
          }
          while (v23 != v24);
          v7 = v44;
          v16 = HIDWORD(v40) + 1;
        }
      }
      HIDWORD(v40) = v16;
      WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v15);
      v30 = WebKit::WebAutomationSession::inputDispatcherForPage(a1, (WebKit::WebPageProxy *)v7);
      v31 = (WebKit::SimulatedInputDispatcher *)v30;
      ++*(_DWORD *)v30;
      if (*(_QWORD *)(v30 + 48))
      {
        LODWORD(v45) = 5;
        v46 = 0;
        v47 = 0;
        v48 = 1;
        WebKit::SimulatedInputDispatcher::finishDispatching(v30, (int *)&v45);
      }
      v37 = v41;
      v38 = v42;
      CFRetain(*((CFTypeRef *)a1 + 1));
      v32 = *a4;
      *a4 = 0;
      v33 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v33 = &off_1E34F4288;
      *((_QWORD *)v33 + 1) = a1;
      *((_QWORD *)v33 + 2) = a1;
      *((_QWORD *)v33 + 3) = v32;
      v45 = v33;
      WebKit::SimulatedInputDispatcher::run((uint64_t)v31, &v37, &v39, (_QWORD **)a1 + 35, (uint64_t *)&v45);
      v35 = v45;
      v45 = 0;
      if (v35)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v35 + 8))(v35);
      WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v31, v34);
      WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v36);
    }
    CFRelease(v7[1]);
  }
  else
  {
    v11 = *a4;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v45);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v11, (const WTF::String *)&v45);
    v13 = v45;
    v45 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::cancelInteractionSequence(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, Inspector::BackendDispatcher::CallbackBase **a4)
{
  WebKit::WebAutomationSession::cancelInteractionSequence((WTF::String *)(a1 - 32), a2, a3, a4);
}

void WebKit::WebAutomationSession::takeScreenshot(WTF::String *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, _BYTE *a5, _BYTE *a6, uint64_t *a7)
{
  uint64_t v13;
  Inspector::BackendDispatcher::CallbackBase *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  Inspector::BackendDispatcher::CallbackBase *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  BOOL v20;
  char v21;
  BOOL v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  __int128 *v63;
  _QWORD *v64;
  char v65;
  __int128 v66;
  uint64_t v67;

  WebKit::WebAutomationSession::webPageProxyForHandle((uint64_t)&v62, a1, a2);
  v13 = v62;
  if (v62)
  {
    v61 = 0;
    WebKit::WebAutomationSession::webFrameIDForHandle((uint64_t)&v59, a1, a3, &v61);
    if (v61)
    {
      v14 = (Inspector::BackendDispatcher::CallbackBase *)*a7;
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v54);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v14, (const WTF::String *)&v54);
      v16 = (WTF::StringImpl *)v54;
      *(_QWORD *)&v54 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      goto LABEL_61;
    }
    if (a5[1])
      v20 = *a5 == 0;
    else
      v20 = 1;
    v21 = !v20;
    if (a6[1])
      v22 = *a6 == 0;
    else
      v22 = 1;
    v23 = !v22;
    if (!*(_QWORD *)a4 || !*(_DWORD *)(*(_QWORD *)a4 + 4))
    {
      v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      v40 = v39;
      *v39 = off_1E34F42B0;
      if (*(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
      {
        CFRetain(*(CFTypeRef *)(v13 + 8));
        v41 = *a7;
        ++*(_DWORD *)(v41 + 8);
        v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *v42 = &off_1E34F4300;
        v42[1] = v13;
        v42[2] = v41;
        v42[3] = v40;
        v66 = v59;
        v67 = v60;
        v52 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 1896);
        v53 = v42;
        *(_QWORD *)&v54 = &v52;
        *((_QWORD *)&v54 + 1) = &v59;
        v55 = a4;
        v56 = v21;
        v57 = v23;
        v63 = &v54;
        v64 = &v53;
        v65 = 0;
        WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>>(std::optional<std::optional<WTF::String> &&::ProcessQualified<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::SnapshotRectForScreenshot &&,WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)> &&,WTF::OptionSet<WTF::CompletionHandler<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)>::SendOption>)::{lambda(std::optional<WTF::String> &&::ProcessQualified<void ()(std::optional<WTF::String> &&,WebCore::IntRect &&)<std::optional<WTF::String> &&::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>&)#1}>(v13, (uint64_t)&v66, (uint64_t)&v63);
        v43 = v53;
        v53 = 0;
        if (v43)
          (*(void (**)(_QWORD *))(*v43 + 8))(v43);
      }
      else
      {
        LOBYTE(v54) = 0;
        LOBYTE(v55) = 0;
        WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,WebKit::WebPageProxy &,std::optional<WebCore::IntRect> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>>>::call((uint64_t)v39, v13, &v54, a7);
        (*(void (**)(_QWORD *))(*v40 + 8))(v40);
      }
      goto LABEL_61;
    }
    v26 = *((_QWORD *)a1 + 26);
    v25 = (uint64_t *)((char *)a1 + 208);
    v24 = v26;
    v27 = *(v25 - 1);
    *(v25 - 1) = v27 + 1;
    if (v26
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v25),
          (v24 = *v25) != 0))
    {
      v28 = *(_DWORD *)(v24 - 8);
    }
    else
    {
      v28 = 0;
    }
    v29 = (v27 + ~(v27 << 32)) ^ ((unint64_t)(v27 + ~(v27 << 32)) >> 22);
    v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
    v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
    v32 = v28 & ((v31 >> 31) ^ v31);
    v33 = (_QWORD *)(v24 + 16 * v32);
    v34 = *v33;
    if (*v33)
    {
      v35 = 0;
      v36 = 1;
      while (v34 != v27)
      {
        if (v34 == -1)
          v35 = v33;
        v32 = (v32 + v36) & v28;
        v33 = (_QWORD *)(v24 + 16 * v32);
        v34 = *v33;
        ++v36;
        if (!*v33)
        {
          if (v35)
          {
            *v35 = 0;
            v35[1] = 0;
            --*(_DWORD *)(*v25 - 16);
            v33 = v35;
          }
          goto LABEL_34;
        }
      }
      v44 = *a7;
      *a7 = 0;
      v45 = (_DWORD *)v33[1];
      v33[1] = v44;
      if (v45)
      {
        if (v45[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
        else
          --v45[2];
      }
      goto LABEL_60;
    }
LABEL_34:
    *v33 = v27;
    v37 = *a7;
    *a7 = 0;
    v38 = (_DWORD *)v33[1];
    v33[1] = v37;
    if (v38)
    {
      if (v38[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
      else
        --v38[2];
    }
    v46 = *v25;
    if (*v25)
      v47 = *(_DWORD *)(v46 - 12) + 1;
    else
      v47 = 1;
    *(_DWORD *)(v46 - 12) = v47;
    v48 = *v25;
    if (*v25)
      v49 = *(_DWORD *)(v48 - 12);
    else
      v49 = 0;
    v50 = (*(_DWORD *)(v48 - 16) + v49);
    v51 = *(unsigned int *)(v48 - 4);
    if (v51 > 0x400)
    {
      if (v51 > 2 * v50)
        goto LABEL_60;
    }
    else if (3 * v51 > 4 * v50)
    {
LABEL_60:
      v66 = v59;
      v67 = v60;
      v53 = *(_QWORD **)(*(_QWORD *)(v13 + 32) + 1896);
      *(_QWORD *)&v54 = &v53;
      *((_QWORD *)&v54 + 1) = &v59;
      v55 = a4;
      v56 = v21;
      v57 = v23;
      v58 = v27;
      v63 = &v54;
      LOBYTE(v64) = 0;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebAutomationSessionProxy::TakeScreenshot>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebAutomationSessionProxy::TakeScreenshot &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebAutomationSessionProxy::TakeScreenshot&)#1}>(v13, (uint64_t)&v66, (uint64_t)&v63);
LABEL_61:
      CFRelease(*(CFTypeRef *)(v13 + 8));
      return;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v25);
    goto LABEL_60;
  }
  v17 = (Inspector::BackendDispatcher::CallbackBase *)*a7;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v54);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v17, (const WTF::String *)&v54);
  v19 = (WTF::StringImpl *)v54;
  *(_QWORD *)&v54 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
}

void `non-virtual thunk to'WebKit::WebAutomationSession::takeScreenshot(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t a4, _BYTE *a5, _BYTE *a6, uint64_t *a7)
{
  WebKit::WebAutomationSession::takeScreenshot((WTF::String *)(a1 - 32), a2, a3, a4, a5, a6, a7);
}

uint64_t *WebKit::WebAutomationSession::didTakeScreenshot(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  Inspector::BackendDispatcher::CallbackBase *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t *v27;
  WTF::StringImpl *v28;
  char v29;

  v6 = *(_QWORD *)(a1 + 208);
  result = (uint64_t *)(a1 + 208);
  v5 = v6;
  if (v6)
  {
    v9 = *(_DWORD *)(v5 - 8);
    v10 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(_QWORD *)(v5 + 16 * v13);
    if (v14 != a2)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(_QWORD *)(v5 + 16 * v13);
        ++v15;
        if (v14 == a2)
          goto LABEL_8;
      }
      v13 = *(unsigned int *)(v5 - 4);
    }
LABEL_8:
    if (v13 != *(_DWORD *)(v5 - 4))
    {
      v16 = (_QWORD *)(v5 + 16 * v13);
      v17 = (Inspector::BackendDispatcher::CallbackBase *)v16[1];
      v16[1] = 0;
      v18 = *result;
      if (!*result || (v18 += 16 * *(unsigned int *)(v18 - 4), (_QWORD *)v18 != v16))
      {
        if ((_QWORD *)v18 != v16)
        {
          *v16 = -1;
          v16[1] = 0;
          ++*(_DWORD *)(*result - 16);
          v19 = *result;
          v20 = *result ? *(_DWORD *)(v19 - 12) - 1 : -1;
          *(_DWORD *)(v19 - 12) = v20;
          v21 = *result;
          if (*result)
          {
            v22 = 6 * *(_DWORD *)(v21 - 12);
            v23 = *(_DWORD *)(v21 - 4);
            if (v22 < v23 && v23 >= 9)
              result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebScriptMessageHandler,WTF::RawPtrTraits<WebKit::WebScriptMessageHandler>,WTF::DefaultRefDerefTraits<WebKit::WebScriptMessageHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, v23 >> 1);
          }
        }
      }
      if (v17)
      {
        if (*a4 && *(_DWORD *)(*a4 + 4))
        {
          v25 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(a4);
          if ((v25 & 0xFF00000000) != 0)
            v25 = v25;
          else
            v25 = 5;
          Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v25, &v28);
          Inspector::BackendDispatcher::CallbackBase::sendFailure(v17, (const WTF::String *)&v28);
        }
        else
        {
          if (!*(_BYTE *)(a3 + 64))
            goto LABEL_36;
          WebKit::WebAutomationSession::platformGetBase64EncodedPNGData(&v28);
          if (!v29)
          {
            Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v27);
            Inspector::BackendDispatcher::CallbackBase::sendFailure(v17, (const WTF::String *)&v27);
            result = v27;
            v27 = 0;
            if (result)
            {
LABEL_33:
              if (*(_DWORD *)result == 2)
                result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
              else
                *(_DWORD *)result -= 2;
            }
LABEL_36:
            if (*((_DWORD *)v17 + 2) == 1)
              return (uint64_t *)(*(uint64_t (**)(Inspector::BackendDispatcher::CallbackBase *))(*(_QWORD *)v17 + 8))(v17);
            --*((_DWORD *)v17 + 2);
            return result;
          }
          result = Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback::sendSuccess(v17, (const WTF::String *)&v28);
          if (!v29)
            goto LABEL_36;
        }
        result = (uint64_t *)v28;
        v28 = 0;
        if (result)
          goto LABEL_33;
        goto LABEL_36;
      }
    }
  }
  return result;
}

void WebKit::WebAutomationSession::Debuggable::~Debuggable(WebKit::WebAutomationSession::Debuggable *this)
{
  WTF *v1;
  void *v2;

  Inspector::RemoteAutomationTarget::~RemoteAutomationTarget(this);
  WTF::fastFree(v1, v2);
}

uint64_t Inspector::RemoteAutomationTarget::type(Inspector::RemoteAutomationTarget *this)
{
  return 0;
}

BOOL Inspector::RemoteAutomationTarget::remoteControlAllowed(Inspector::RemoteAutomationTarget *this)
{
  return *((_BYTE *)this + 20) == 0;
}

uint64_t Inspector::RemoteControllableTarget::targetRunLoop(Inspector::RemoteControllableTarget *this)
{
  return 0;
}

uint64_t API::ObjectImpl<(API::Object::Type)42>::type()
{
  return 42;
}

uint64_t API::AutomationSessionClient::requestNewPageWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t API::AutomationSessionClient::requestMaximizeWindowOfPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t API::AutomationSessionClient::requestHideWindowOfPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t API::AutomationSessionClient::requestRestoreWindowOfPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t API::AutomationSessionClient::requestSwitchToPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t API::AutomationSessionClient::isShowingJavaScriptDialogOnPage()
{
  return 0;
}

void API::AutomationSessionClient::messageOfCurrentJavaScriptDialogOnPage(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t API::AutomationSessionClient::typeOfCurrentJavaScriptDialogOnPage()
{
  return 0;
}

uint64_t API::AutomationSessionClient::currentPresentationOfPage()
{
  return 1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _DWORD *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(_DWORD **)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          WTF::RefCounted<WebKit::SimulatedInputSource>::deref(v6, a2);
          v5 = *(WTF::StringImpl **)v4;
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)(a1 + 16);
    do
    {
      if (*(v4 - 1) != (_DWORD *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (v5[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
          else
            --v5[2];
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  char v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v6 = *(_DWORD *)(v5 + 4);
  else
    v6 = 0;
  v7 = *a3;
  if (*a3)
  {
    v8 = *(_DWORD *)(v7 + 4);
    if (v8 < 0)
      goto LABEL_16;
  }
  else
  {
    v8 = 0;
  }
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  v11 = v9;
  if ((v6 & 0x80000000) == 0 && (v11 & 1) == 0)
  {
    result = (v6 + v10);
    if (!__OFADD__(v6, v10))
    {
      if (v5)
      {
        v12 = *(_DWORD *)(v5 + 16);
        v13 = (v12 >> 2) & 1;
        if (!v7 || (v12 & 4) == 0)
          return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, v5, *a2, (_DWORD *)v7, a4);
      }
      else if (!v7)
      {
        v13 = 1;
        return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, v5, *a2, (_DWORD *)v7, a4);
      }
      v13 = (*(unsigned __int8 *)(v7 + 16) >> 2) & 1;
      return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, v5, *a2, (_DWORD *)v7, a4);
    }
  }
LABEL_16:
  *a4 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, _DWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  int v9;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v17;
        if (v17)
        {
          v12 = v17 + 5;
          *v17 = 2;
          v11[1] = v9;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          v16 = a3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v16, (char *)v11 + 20);
          v13 = v16;
          if (v16)
            v13 = *(unsigned int *)(v16 + 4);
          *((_BYTE *)v12 + v13) = a4;
          v17 = a5;
          result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v17, (char *)v12 + v13 + 1);
        }
        goto LABEL_16;
      }
LABEL_10:
      v11 = 0;
      goto LABEL_16;
    }
LABEL_11:
    v11 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_16;
  }
  if (!(_DWORD)result)
    goto LABEL_11;
  if (result > 0x7FFFFFEF)
    goto LABEL_10;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v17;
  if (v17)
  {
    *v17 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    v16 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v16, (char *)v11 + 20);
    v14 = v16;
    if (v16)
      v14 = *(unsigned int *)(v16 + 4);
    v15 = (uint64_t)v11 + 2 * v14 + 20;
    *(_WORD *)v15 = a4;
    v17 = a5;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v17, (char *)(v15 + 2));
  }
LABEL_16:
  *a6 = v11;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::name(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34F3C60;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::name(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F3C60;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::name(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  if (v1)
  {
    v2 = result;
    v3 = *(WTF::StringImpl **)(v1 + 64);
    if (v3)
      *(_DWORD *)v3 += 2;
    v7 = v3;
    WTF::String::isolatedCopy();
    v5 = *(WTF::StringImpl ***)(v2 + 24);
    v6 = *v5;
    *v5 = v8;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    result = (uint64_t)v7;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        return WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34F3C88;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F3C88;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  if (v1)
    return Inspector::BackendDispatcher::dispatch(*(Inspector::BackendDispatcher **)(v1 + 80), (const WTF::String *)(result + 24));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34F3CB0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F3CB0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  if (v1)
  {
    *(_QWORD *)(v1 + 304) = *(_QWORD *)(result + 24);
    Inspector::FrontendRouter::connectFrontend();
    return Inspector::RemoteAutomationTarget::setIsPaired(*(Inspector::RemoteAutomationTarget **)(v1 + 312));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34F3CD8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F3CD8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

WebKit::WebAutomationSession *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::Debuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebAutomationSession *result;

  result = *(WebKit::WebAutomationSession **)(*(_QWORD *)(a1 + 8) + 24);
  if (result)
    return (WebKit::WebAutomationSession *)WebKit::WebAutomationSession::terminate(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebAutomationSession::*&)(void),WebKit::WebAutomationSession*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Mapper<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>> const&)::{lambda(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&&)#1},WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>> const&,void>::map(uint64_t result, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;

  v3 = result;
  v4 = **a2;
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 12);
    if ((_DWORD)v5)
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(v3 + 8) = v5;
      *(_QWORD *)v3 = result;
    }
  }
  v6 = a2[1];
  v7 = a2[3];
  if (v6 != v7)
  {
    v8 = a2[2];
    v9 = *(_DWORD *)(v3 + 12);
    do
    {
      v10 = *v6;
      v6 += 2;
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v9) = v10;
      v9 = *(_DWORD *)(v3 + 12) + 1;
      *(_DWORD *)(v3 + 12) = v9;
      while (v6 != v8)
      {
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_12;
        v6 += 2;
      }
      v6 = v8;
LABEL_12:
      ;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = (_QWORD *)*a1;
  if (*a1)
    v3 += 2 * *((unsigned int *)v3 - 1);
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = (_QWORD *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v5 = 0;
  }
  if (v5 != a2)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(void)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::UserMediaClient::DeviceChangeObserverTokenType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return a1;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIICaseConverter>(uint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  size_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  int8x16_t v13;
  __int128 v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  __int16 v19;
  uint64_t v20;
  int8x16x2_t v21;
  int8x16x2_t v22;
  int8x16x2_t v23;

  if (a3)
    v4 = a3 - 1;
  else
    v4 = 0;
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x197690770);
  }
  v5 = (_QWORD *)result;
  v6 = *(_DWORD *)(a4 + 16);
  if (((v6 | v4) & 0x80000000) != 0)
    goto LABEL_18;
  v7 = (v4 + v6);
  if (__OFADD__((_DWORD)v4, v6))
    goto LABEL_18;
  if (*(_BYTE *)(a4 + 20))
  {
    if ((_DWORD)v7)
    {
      if ((v7 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(v7 + 20));
        v9 = v20;
        if (v20)
        {
          *(_DWORD *)v20 = 2;
          *(_DWORD *)(v20 + 4) = v7;
          *(_QWORD *)(v20 + 8) = v20 + 20;
          *(_DWORD *)(v20 + 16) = 4;
          if ((_DWORD)v4)
          {
            if ((_DWORD)v4 == 1)
              *(_BYTE *)(v20 + 20) = *(_BYTE *)a2;
            else
              memcpy((void *)(v20 + 20), a2, v4);
          }
          result = WTF::StringView::getCharactersWithASCIICase();
        }
        goto LABEL_15;
      }
LABEL_18:
      v9 = 0;
      goto LABEL_15;
    }
LABEL_19:
    v9 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_15;
  }
  if (!(_DWORD)v7)
    goto LABEL_19;
  if (v7 > 0x7FFFFFEF)
    goto LABEL_18;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * v7 + 20));
  v9 = v20;
  if (v20)
  {
    v10 = (char *)(v20 + 20);
    *(_DWORD *)v20 = 2;
    *(_DWORD *)(v20 + 4) = v7;
    *(_QWORD *)(v20 + 8) = v20 + 20;
    *(_DWORD *)(v20 + 16) = 0;
    if ((v4 & 0xFFFFFFC0) != 0)
    {
      v11 = &v10[2 * (v4 & 0xFFFFFFC0)];
      v12 = 0uLL;
      do
      {
        v21.val[0] = (int8x16_t)*a2;
        v13 = *((int8x16_t *)a2 + 1);
        v22.val[0] = (int8x16_t)a2[2];
        v14 = a2[3];
        a2 += 4;
        v15 = v14;
        v22.val[1] = 0uLL;
        v23.val[0] = v13;
        v21.val[1] = 0uLL;
        v16 = v10;
        vst2q_s8(v16, v21);
        v16 += 32;
        v23.val[1] = 0uLL;
        vst2q_s8(v16, v23);
        v17 = v10 + 64;
        vst2q_s8(v17, v22);
        v18 = v10 + 96;
        vst2q_s8(v18, *(int8x16x2_t *)(&v12 - 1));
        v10 += 128;
      }
      while (v10 != v11);
      v10 = v11;
    }
    while (v10 != (char *)(v20 + 20 + 2 * v4))
    {
      v19 = *(unsigned __int8 *)a2;
      a2 = (_OWORD *)((char *)a2 + 1);
      *(_WORD *)v10 = v19;
      v10 += 2;
    }
    result = WTF::StringView::getCharactersWithASCIICase();
  }
LABEL_15:
  *v5 = v9;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t i;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v9 = (WTF::StringImpl **)(v2 + 16 * i);
      v10 = *v9;
      if (*v9 != (WTF::StringImpl *)-1)
      {
        if (v10)
        {
          v11 = *a1;
          if (*a1)
            v12 = *(_DWORD *)(v11 - 8);
          else
            v12 = 0;
          v13 = *((_DWORD *)v10 + 4);
          if (v13 >= 0x100)
            v14 = v13 >> 8;
          else
            v14 = WTF::StringImpl::hashSlowCase(v10);
          v15 = 0;
          do
          {
            v16 = v14 & v12;
            v14 = ++v15 + v16;
          }
          while (*(_QWORD *)(v11 + 16 * v16));
          v17 = (WTF::StringImpl **)(v11 + 16 * v16);
          *v17 = 0;
          v18 = *v9;
          *v9 = 0;
          *v17 = v18;
          v17[1] = *(WTF::StringImpl **)(v2 + 16 * i + 8);
          v19 = *v9;
          *v9 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v7);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        else
        {
          *v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*a1;
  if (*a1)
    v3 = (WTF::StringImpl *)((char *)v3 + 24 * *((unsigned int *)v3 - 1));
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  v4 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = (WTF::StringImpl *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v5 = 0;
  }
  if (v5 != a2)
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(a1, a2);
  return a1;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl **result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (WTF::StringImpl **)WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (WTF::StringImpl **)(v5 + 24 * v10);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v14 + 4);
          if (v17 >= 0x100)
            v18 = v17 >> 8;
          else
            v18 = WTF::StringImpl::hashSlowCase(v14);
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v21 = (WTF::StringImpl **)(v15 + 24 * (v18 & v16));
            v18 = ++v19 + (v18 & v16);
          }
          while (*v21);
          *v21 = 0;
          v22 = *v13;
          *v13 = 0;
          *v21 = v22;
          *(_OWORD *)(v15 + 24 * v20 + 8) = *(_OWORD *)(v5 + 24 * v10 + 8);
          v23 = *v13;
          *v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v9);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (v13 == a3)
            v11 = v21;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getNextContext(WTF::Ref<WebKit::WebAutomationSession,WTF::RawPtrTraits<WebKit::WebAutomationSession>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationSession>> &&,WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WTF::Vector>,WTF::DefaultRefDerefTraits<WTF::Vector>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>,WTF::Ref<WTF::JSONImpl::AutomationBackendDispatcherHandler::GetBrowsingContextsCallback,WTF::RawPtrTraits<WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>>> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;

  *a1 = off_1E34F3D28;
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (_DWORD *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*v4 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v4;
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 4), a2);
  v5 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getNextContext(WTF::Ref<WebKit::WebAutomationSession,WTF::RawPtrTraits<WebKit::WebAutomationSession>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationSession>> &&,WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WTF::Vector>,WTF::DefaultRefDerefTraits<WTF::Vector>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>,WTF::Ref<WTF::JSONImpl::AutomationBackendDispatcherHandler::GetBrowsingContextsCallback,WTF::RawPtrTraits<WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>>> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  void *v5;
  _DWORD *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E34F3D28;
  v3 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (_DWORD *)*((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = 0;
  if (v4)
  {
    if (*v4 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v4;
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 32, a2);
  v6 = (_DWORD *)*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
  return WTF::fastFree(a1, v5);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getNextContext(WTF::Ref<WebKit::WebAutomationSession,WTF::RawPtrTraits<WebKit::WebAutomationSession>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationSession>> &&,WTF::Vector<WTF::Ref<WebKit::WebPageProxy,WTF::RawPtrTraits<WTF::Vector>,WTF::DefaultRefDerefTraits<WTF::Vector>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>,WTF::Ref<WTF::JSONImpl::AutomationBackendDispatcherHandler::GetBrowsingContextsCallback,WTF::RawPtrTraits<WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>>,WTF::DefaultRefDerefTraits<WTF::Ref<WTF::JSONImpl::ArrayOf<Inspector::Protocol::Automation::BrowsingContext>,WTF::RawPtrTraits<Inspector::Protocol::Automation>,WTF::DefaultRefDerefTraits<Inspector::Protocol::Automation>>>> &&)::$_0,void,WebCore::FloatRect>::call(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *result;
  _DWORD *v16;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = (uint64_t *)(a1 + 16);
  WebKit::WebAutomationSession::buildBrowsingContextForPage((WTF::JSONImpl::Object *)&v16, *(WebKit::WebAutomationSession **)(a1 + 16), *(const WebKit::WebPageProxy **)(a1 + 56), a2, a3, a4, a5);
  v9 = (_QWORD *)(v7 + 16);
  v10 = *(unsigned int *)(v7 + 28);
  if ((_DWORD)v10 == *(_DWORD *)(v7 + 24))
  {
    v11 = v10 + (v10 >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 <= v10 + 1)
      v13 = v10 + 1;
    else
      v13 = v12;
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v9, v13);
    v10 = *(unsigned int *)(v7 + 28);
    *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v10) = v16;
  }
  else
  {
    *(_QWORD *)(*v9 + 8 * v10) = v16;
  }
  *(_DWORD *)(v7 + 28) = v10 + 1;
  v14 = *(_DWORD **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v16 = v14;
  WebKit::WebAutomationSession::getNextContext(v6, v8, (uint64_t *)(a1 + 32), (uint64_t *)&v16, (WTF::JSONImpl::Object **)(a1 + 24));
  result = v16;
  if (v16)
  {
    if (*v16 == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*v16;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback>> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34F3D50;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback>> &&)::$_0,void,WebCore::FloatRect>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F3D50;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback>> &&)::$_0,void,WebCore::FloatRect>::call(WebKit::WebAutomationSession **a1, float a2, float a3, float a4, float a5)
{
  WTF::JSONImpl::Object *v5;
  uint64_t result;
  _DWORD *v7;

  v5 = a1[3];
  WebKit::WebAutomationSession::buildBrowsingContextForPage((WTF::JSONImpl::Object *)&v7, a1[1], a1[2], a2, a3, a4, a5);
  Inspector::AutomationBackendDispatcherHandler::GetBrowsingContextCallback::sendSuccess(v5, &v7);
  result = (uint64_t)v7;
  if (v7)
  {
    if (*v7 == 1)
      return WTF::JSONImpl::Value::operator delete();
    else
      --*v7;
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;

  v11 = *a1;
  v10 = *a2;
  v4 = a3[1];
  v5 = v4 != 0;
  v6 = v4 - 1;
  if (!v5)
    v6 = 0;
  v8 = *a3;
  if (v6 >> 31)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v9 = v6;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v11, &v10, (uint64_t)&v8, a4);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char v10;
  _BOOL4 v11;

  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v6 = *(_DWORD *)(v5 + 4);
  else
    v6 = 0;
  v7 = *(_DWORD *)(a3 + 8);
  if (v7 < 0
    || ((v8 = __OFADD__(v7, 1), v9 = v7 + 1, !v8) ? (v10 = 0) : (v10 = 1),
        v6 < 0 || (v10 & 1) != 0 || (result = (v6 + v9), __OFADD__(v6, v9))))
  {
    *a4 = 0;
  }
  else
  {
    v11 = !v5 || (*(_BYTE *)(v5 + 16) & 4) != 0;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v11, (_DWORD *)v5, *a2, *(_OWORD **)a3, *(_QWORD *)(a3 + 8), a4);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, char a4@<W3>, _OWORD *a5@<X4>, unsigned int a6@<W5>, _QWORD *a7@<X8>)
{
  int v11;
  _DWORD *v13;
  _DWORD *v14;
  int64_t v15;
  unint64_t v16;
  _WORD *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int8x16_t v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  _DWORD *v29;
  int8x16x2_t v30;
  int8x16x2_t v31;
  int8x16x2_t v32;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v29;
        if (v29)
        {
          v14 = v29 + 5;
          *v29 = 2;
          v13[1] = v11;
          *((_QWORD *)v13 + 1) = v13 + 5;
          v13[4] = 4;
          v29 = a3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v29, (char *)v13 + 20);
          v15 = (int64_t)v29;
          if (v29)
            v15 = v29[1];
          *((_BYTE *)v14 + v15) = a4;
          result = (uint64_t)v14 + v15 + 1;
          if (a6)
          {
            if (a6 == 1)
              *(_BYTE *)result = *(_BYTE *)a5;
            else
              result = (uint64_t)memcpy((void *)result, a5, a6);
          }
        }
        goto LABEL_23;
      }
LABEL_12:
      v13 = 0;
      goto LABEL_23;
    }
LABEL_13:
    v13 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_23;
  }
  if (!(_DWORD)result)
    goto LABEL_13;
  if (result > 0x7FFFFFEF)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v29;
  if (v29)
  {
    *v29 = 2;
    v13[1] = v11;
    *((_QWORD *)v13 + 1) = v13 + 5;
    v13[4] = 0;
    v29 = a3;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v29, (char *)v13 + 20);
    v16 = (unint64_t)v29;
    if (v29)
      v16 = v29[1];
    v17 = (_WORD *)v13 + v16 + 10;
    *v17 = a4;
    v18 = (char *)(v17 + 1);
    v19 = &v18[2 * a6];
    if ((a6 & 0xFFFFFFC0) != 0)
    {
      v20 = &v18[2 * (a6 & 0xFFFFFFC0)];
      v21 = 0uLL;
      do
      {
        v30.val[0] = (int8x16_t)*a5;
        v22 = *((int8x16_t *)a5 + 1);
        v31.val[0] = (int8x16_t)a5[2];
        v23 = a5[3];
        a5 += 4;
        v24 = v23;
        v31.val[1] = 0uLL;
        v32.val[0] = v22;
        v30.val[1] = 0uLL;
        v25 = v18;
        vst2q_s8(v25, v30);
        v25 += 32;
        v32.val[1] = 0uLL;
        vst2q_s8(v25, v32);
        v26 = v18 + 64;
        vst2q_s8(v26, v31);
        v27 = v18 + 96;
        vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
        v18 += 128;
      }
      while (v18 != v20);
      v18 = v20;
    }
    while (v18 != v19)
    {
      v28 = *(unsigned __int8 *)a5;
      a5 = (_OWORD *)((char *)a5 + 1);
      *(_WORD *)v18 = v28;
      v18 += 2;
    }
  }
LABEL_23:
  *a7 = v13;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::createBrowsingContext(std::optional<Inspector::Protocol::Automation::BrowsingContextPresentation> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::CreateBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,WebKit::WebPageProxy *>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34F3D78;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::createBrowsingContext(std::optional<Inspector::Protocol::Automation::BrowsingContextPresentation> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::CreateBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,WebKit::WebPageProxy *>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F3D78;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::createBrowsingContext(std::optional<Inspector::Protocol::Automation::BrowsingContextPresentation> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::CreateBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,WebKit::WebPageProxy *>::call(uint64_t a1, WebKit::WebProcessProxy **this)
{
  WTF::JSONImpl::Object *v4;
  int v5;
  uint64_t v6;
  Inspector::BackendDispatcher::CallbackBase *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;
  uint64_t v14[2];

  if (this)
  {
    WebKit::WebPageProxy::launchInitialProcessIfNecessary(this);
    v4 = *(WTF::JSONImpl::Object **)(a1 + 16);
    WebKit::WebAutomationSession::handleForWebPageProxy(*(WebKit::WebAutomationSession **)(a1 + 8), (const WebKit::WebPageProxy *)this, (WTF::StringImpl *)v14);
    v5 = (*(uint64_t (**)(_QWORD, _QWORD, WebKit::WebProcessProxy **))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56)
                                                                               + 120))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56), *(_QWORD *)(a1 + 8), this);
    if (!v5)
    {
      v6 = 4;
LABEL_10:
      Inspector::AutomationBackendDispatcherHandler::CreateBrowsingContextCallback::sendSuccess(v4, (WTF::JSONImpl::Value *)v14, v6);
      result = (WTF::StringImpl *)v14[0];
      v14[0] = 0;
      if (!result)
        return result;
      goto LABEL_14;
    }
    if (v5 == 1)
    {
      v6 = 3;
      goto LABEL_10;
    }
    __break(0xC471u);
LABEL_20:
    JUMPOUT(0x197691454);
  }
  v7 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 16);
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v11);
  v14[0] = (uint64_t)"The remote session failed to create a new browsing context.";
  v14[1] = 60;
  v13 = 59;
  WTF::tryMakeString<WTF::String,char,WTF::ASCIILiteral>((uint64_t *)&v11, &v13, v14, &v12);
  if (!v12)
  {
    __break(0xC471u);
    goto LABEL_20;
  }
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v7, (const WTF::String *)&v12);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
LABEL_14:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::switchToBrowsingContext(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34F3DA0;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::switchToBrowsingContext(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F3DA0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::switchToBrowsingContext(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback>> &&)::$_0,void>::call(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 104) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                 + 104));
  return Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E34F3DC8;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F3DC8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[25];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    CFRetain(*(CFTypeRef *)(v3 + 8));
  *(_QWORD *)&v9 = *(_QWORD *)(a1 + 40);
  BYTE8(v9) = *(_BYTE *)(a1 + 48);
  *(_QWORD *)&v10 = *(_QWORD *)(a1 + 56);
  BYTE8(v10) = *(_BYTE *)(a1 + 64);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 72);
  v11[8] = *(_BYTE *)(a1 + 80);
  v11[24] = *(_BYTE *)(a1 + 96);
  *(_QWORD *)&v11[16] = *(_QWORD *)(a1 + 88);
  v5 = WTF::fastMalloc((WTF *)0x58);
  *(_OWORD *)(v5 + 65) = *(_OWORD *)&v11[9];
  *(_OWORD *)(v5 + 56) = *(_OWORD *)v11;
  v6 = v9;
  *(_OWORD *)(v5 + 40) = v10;
  *(_QWORD *)v5 = &off_1E34F3DF0;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 24) = v6;
  v8 = v5;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(v2 + 56) + 56))(*(_QWORD *)(v2 + 56), v2, v3, &v8);
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E34F3DF0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34F3DF0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[25];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    CFRetain(*(CFTypeRef *)(v2 + 8));
  *(_QWORD *)&v8 = *(_QWORD *)(a1 + 24);
  BYTE8(v8) = *(_BYTE *)(a1 + 32);
  *(_QWORD *)&v9 = *(_QWORD *)(a1 + 40);
  BYTE8(v9) = *(_BYTE *)(a1 + 48);
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 56);
  v10[8] = *(_BYTE *)(a1 + 64);
  v10[24] = *(_BYTE *)(a1 + 80);
  *(_QWORD *)&v10[16] = *(_QWORD *)(a1 + 72);
  v4 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v4 = &off_1E34F3E18;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 16) = v2;
  v5 = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 40) = v5;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)v10;
  *(_OWORD *)(v4 + 65) = *(_OWORD *)&v10[9];
  v7 = v4;
  WebKit::WebPageProxy::getWindowFrameWithCallback(v2, &v7);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(void))(*(_QWORD *)v7 + 8))();
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(WebCore::FloatRect)#1},void,{lambda(void)#1}>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E34F3E18;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(WebCore::FloatRect)#1},void,{lambda(void)#1}>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34F3E18;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setWindowFrameOfBrowsingContext(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetWindowFrameOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(WebCore::FloatRect)#1},void,{lambda(void)#1}>::call(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float v6;
  float v7;
  float v8;
  float v9;
  FloatRect v11;

  if (*(_BYTE *)(a1 + 64))
    v6 = *(double *)(a1 + 56);
  else
    v6 = a2;
  if (*(_BYTE *)(a1 + 80))
    v7 = *(double *)(a1 + 72);
  else
    v7 = a3;
  if (*(_BYTE *)(a1 + 32))
    v8 = *(double *)(a1 + 24);
  else
    v8 = a4;
  if (*(_BYTE *)(a1 + 48))
    v9 = *(double *)(a1 + 40);
  else
    v9 = a5;
  v11.m_location.m_x = v6;
  v11.m_location.m_y = v7;
  v11.m_size.m_width = v8;
  v11.m_size.m_height = v9;
  if (v6 != a2 || v7 != a3 || v8 != a4 || v9 != a5)
    WebKit::WebPageProxy::setWindowFrame(*(WebKit::WebPageProxy **)(a1 + 16), &v11);
  return Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 8));
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t *result;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *v16 = v11;
    v20 = *a4;
    *a4 = 0;
    result = (uint64_t *)v16[1];
    v16[1] = v20;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
    v23 = *a2;
    if (*a2)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *a2;
    if (*a2)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_26:
        result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v16);
        v16 = result;
        v25 = *a2;
        if (*a2)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_26;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v25 + 16 * v28;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v11 = *a3;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v8 + 16 * v22;
  *(_BYTE *)(a1 + 16) = 0;
  v29 = *a4;
  *a4 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v29;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (_DWORD *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (v27[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
            else
              --v27[2];
          }
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(_DWORD **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            if (v30[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
            else
              --v30[2];
          }
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_DWORD **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            if (v16[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
            else
              --v16[2];
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_DWORD *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _DWORD *result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  __int16 v28;
  char v29;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v27 = -1640531527;
  v28 = 0;
  v29 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v27, a3);
  v10 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27) & v9;
  v11 = (_QWORD *)(v8 + 24 * v10);
  v13 = *v11;
  v12 = v11[1];
  if (*(_OWORD *)v11 == 0)
  {
LABEL_13:
    *(_OWORD *)v11 = *(_OWORD *)a3;
    v16 = *a4;
    *a4 = 0;
    result = (_DWORD *)v11[2];
    v11[2] = v16;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
    v18 = *a2;
    if (*a2)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v20 = *a2;
    if (*a2)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 <= 2 * v22)
      {
LABEL_25:
        result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a2, (uint64_t)v11);
        v11 = result;
        v20 = *a2;
        if (*a2)
          LODWORD(v23) = *(_DWORD *)(v20 - 4);
        else
          LODWORD(v23) = 0;
      }
    }
    else if (3 * v23 <= 4 * v22)
    {
      goto LABEL_25;
    }
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v20 + 24 * v23;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v14 = 0;
  v15 = 1;
  while (v13 != *a3 || v12 != a3[1])
  {
    if (v12 == -1)
      v14 = v11;
    v10 = (v10 + v15) & v9;
    v11 = (_QWORD *)(v8 + 24 * v10);
    v13 = *v11;
    v12 = v11[1];
    ++v15;
    if (*(_OWORD *)v11 == 0)
    {
      if (v14)
      {
        *v14 = 0;
        v14[1] = 0;
        v14[2] = 0;
        --*(_DWORD *)(*a2 - 16);
        v11 = v14;
      }
      goto LABEL_13;
    }
  }
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 4);
  else
    v25 = 0;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v24 + 24 * v25;
  *(_BYTE *)(a1 + 16) = 0;
  v26 = *a4;
  *a4 = 0;
  result = (_DWORD *)v11[2];
  v11[2] = v26;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  unsigned int v20;
  _OWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  _QWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _OWORD *result;
  unsigned int v31;
  __int16 v32;
  char v33;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = v5 + 24 * v10;
      if (*(_QWORD *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          v16 = v5 + 24 * v10;
          v17 = *(_DWORD **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v17)
          {
            if (v17[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
            else
              --v17[2];
          }
        }
        else
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v31 = -1640531527;
          v32 = 0;
          v33 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v31, (_QWORD *)(v5 + 24 * v10));
          v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v31);
          v19 = 0;
          do
          {
            v20 = v18 & v15;
            v21 = (_OWORD *)(v14 + 24 * (v18 & v15));
            v18 = ++v19 + (v18 & v15);
          }
          while (*v21 != 0);
          v22 = v14 + 24 * v20;
          v25 = *(_DWORD **)(v22 + 16);
          v24 = (_QWORD *)(v22 + 16);
          v23 = v25;
          *v24 = 0;
          if (v25)
          {
            if (v23[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
            else
              --v23[2];
          }
          *v21 = *(_OWORD *)v13;
          v26 = v5 + 24 * v10;
          v27 = *(_QWORD *)(v26 + 16);
          *(_QWORD *)(v26 + 16) = 0;
          *v24 = v27;
          v28 = *(_DWORD **)(v26 + 16);
          *(_QWORD *)(v26 + 16) = 0;
          if (v28)
          {
            if (v28[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
            else
              --v28[2];
          }
          if (v13 == a3)
            v11 = v21;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = (_QWORD *)*a1;
  if (*a1)
    v3 += 2 * *((unsigned int *)v3 - 1);
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  v4 = a2[1];
  a2[1] = 0;
  *a3 = v4;
  if (*a1)
  {
    v5 = (_QWORD *)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v5 = 0;
  }
  if (v5 != a2)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return a1;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_OWORD *WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(_OWORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *a2;
  if (*a2)
    v3 += 24 * *(unsigned int *)(v3 - 4);
  if (v3 == a3)
  {
    *(_QWORD *)result = 0;
    return result;
  }
  v4 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)result = v4;
  if (*a2)
  {
    v5 = *a2 + 24 * *(unsigned int *)(*a2 - 4);
    if (v5 == a3)
      return result;
  }
  else
  {
    if (!a3)
      return result;
    v5 = 0;
  }
  if (v5 != a3)
  {
    *(_OWORD *)a3 = xmmword_1978CF7D0;
    *(_QWORD *)(a3 + 16) = 0;
    ++*(_DWORD *)(*a2 - 16);
    v6 = *a2;
    v7 = *a2 ? *(_DWORD *)(v6 - 12) - 1 : -1;
    *(_DWORD *)(v6 - 12) = v7;
    v8 = *a2;
    if (*a2)
    {
      v9 = 6 * *(_DWORD *)(v8 - 12);
      v10 = *(_DWORD *)(v8 - 4);
      if (v9 < v10 && v10 >= 9)
        return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a2, v10 >> 1, 0);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E34F3E40;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F3E40;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v1 = a1[1];
  v3 = a1[3];
  v2 = a1[4];
  a1[3] = 0;
  if (v2)
    CFRetain(*(CFTypeRef *)(v2 + 8));
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = &off_1E34F3E68;
  v4[1] = v1;
  v4[2] = v3;
  v4[3] = v2;
  v6 = v4;
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD **))(**(_QWORD **)(v1 + 56) + 56))(*(_QWORD *)(v1 + 56), v1, v2, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E34F3E68;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34F3E68;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v2 = a1[2];
  v1 = a1[3];
  v3 = a1[1];
  a1[2] = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34F3E90;
  v4[1] = v2;
  v6 = v4;
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD **))(**(_QWORD **)(v3 + 56) + 40))(*(_QWORD *)(v3 + 56), v3, v1, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34F3E90;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F3E90;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::maximizeWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::MaximizeWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::hideWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E34F3EB8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::hideWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F3EB8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::hideWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>> &&)::$_0,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v2 = a1[2];
  v1 = a1[3];
  v3 = a1[1];
  a1[2] = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E34F3EE0;
  v4[1] = v2;
  v6 = v4;
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD **))(**(_QWORD **)(v3 + 56) + 48))(*(_QWORD *)(v3 + 56), v3, v1, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::hideWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34F3EE0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::hideWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F3EE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::hideWindowOfBrowsingContext(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::HideWindowOfBrowsingContextCallback>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::exitFullscreenWindowForPage(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebAutomationSession::WindowTransitionedToState>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F3F08;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::exitFullscreenWindowForPage(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebAutomationSession::WindowTransitionedToState>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F3F08;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::exitFullscreenWindowForPage(WebKit::WebPageProxy &,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebAutomationSession::WindowTransitionedToState>::call(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 == 1)
  {
    v2 = *(_QWORD *)(result + 8);
    v3 = *(_QWORD *)(v2 + 216);
    *(_QWORD *)(v2 + 216) = 0;
    v4 = *(_QWORD *)(result + 24);
    *(_QWORD *)(result + 24) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::willShowJavaScriptDialog(WebKit::WebPageProxy &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F3F30;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::willShowJavaScriptDialog(WebKit::WebPageProxy &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F3F30;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::willShowJavaScriptDialog(WebKit::WebPageProxy &)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  _QWORD *v19;
  Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback *v20;
  WTF::StringImpl *v21;
  Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback *v22;
  WTF::StringImpl *v23;
  uint64_t *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  _QWORD *v33;
  BOOL v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback *v44;

  v1 = result[3];
  if (!*(_BYTE *)(v1 + 729))
  {
    if (*(_BYTE *)(v1 + 728))
    {
      v2 = result;
      v3 = (uint64_t *)result[1];
      result = (_QWORD *)v3[7];
      if (result)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*result + 72))(result, v3);
        if ((_DWORD)result)
        {
          v4 = *(_QWORD *)(v2[3] + 32);
          if (*(_QWORD *)(v4 + 984) || *(unsigned __int8 *)(v4 + 968) <= 1u)
          {
            WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v3 + 28));
            WebKit::WebAutomationSession::respondToPendingFrameNavigationCallbacksWithTimeout((uint64_t)v3, v3 + 19);
            result = WebKit::WebAutomationSession::respondToPendingPageNavigationCallbacksWithTimeout((uint64_t)v3, v3 + 17);
          }
          v5 = (uint64_t *)v3[24];
          if (v5)
          {
            v6 = *((unsigned int *)v5 - 3);
            if ((_DWORD)v6)
            {
              v7 = *((unsigned int *)v5 - 1);
              v8 = &v5[2 * v7];
              if ((_DWORD)v7)
              {
                v9 = 16 * v7;
                while ((unint64_t)(*v5 + 1) <= 1)
                {
                  v5 += 2;
                  v9 -= 16;
                  if (!v9)
                  {
                    v5 = v8;
                    break;
                  }
                }
              }
              if (v6 >> 29)
              {
                __break(0xC471u);
                return result;
              }
              v10 = WTF::fastMalloc((WTF *)(8 * v6));
              v12 = (WTF *)v10;
              if (v5 != v8)
              {
                v13 = 0;
                v14 = 1;
LABEL_19:
                v15 = v14;
                v16 = *v5;
                v5 += 2;
                *(_QWORD *)(v10 + 8 * v13++) = v16;
                while (v5 != v8)
                {
                  if ((unint64_t)(*v5 + 1) > 1)
                  {
                    ++v14;
                    if (v5 != v8)
                      goto LABEL_19;
                    break;
                  }
                  v5 += 2;
                }
                if (v13)
                {
                  v17 = 8 * v15;
                  v18 = (WTF **)v10;
                  do
                  {
                    v41 = *v18;
                    v19 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v3 + 24, &v41);
                    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::BackendDispatcher::CallbackBase,WTF::RawPtrTraits<Inspector::BackendDispatcher::CallbackBase>,WTF::DefaultRefDerefTraits<Inspector::BackendDispatcher::CallbackBase>>>,WTF::HashTableTraits>::take(v3 + 24, v19, &v44);
                    v20 = v44;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v43 = v36;
                    Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback::sendSuccess(v20, (const WTF::String *)&v43);
                    v21 = v43;
                    v43 = 0;
                    if (v21)
                    {
                      if (*(_DWORD *)v21 == 2)
                        WTF::StringImpl::destroy(v21, v11);
                      else
                        *(_DWORD *)v21 -= 2;
                    }
                    v22 = v44;
                    v44 = 0;
                    if (v22)
                    {
                      if (*((_DWORD *)v22 + 2) == 1)
                        (*(void (**)(Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback *))(*(_QWORD *)v22 + 8))(v22);
                      else
                        --*((_DWORD *)v22 + 2);
                    }
                    ++v18;
                    v17 -= 8;
                  }
                  while (v17);
                }
              }
              result = (_QWORD *)WTF::fastFree(v12, v11);
            }
          }
          v25 = (WTF::StringImpl *)v3[22];
          v24 = v3 + 22;
          v23 = v25;
          if (v25 && *((_DWORD *)v23 - 3))
          {
            v26 = *((unsigned int *)v23 - 1);
            v27 = (WTF::StringImpl *)((char *)v23 + 16 * v26);
            if ((_DWORD)v26)
            {
              v28 = 16 * v26;
              while ((unint64_t)(*(_QWORD *)v23 + 1) <= 1)
              {
                v23 = (WTF::StringImpl *)((char *)v23 + 16);
                v28 -= 16;
                if (!v28)
                {
                  v23 = v27;
                  break;
                }
              }
            }
            v36 = (WTF::StringImpl *)v24;
            v37 = v23;
            v38 = v27;
            v39 = v27;
            v40 = v27;
            v41 = 0;
            v42 = 0;
            result = (_QWORD *)WTF::Mapper<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>> const&)::{lambda(WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&&)#1},WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>> const&,void>::map((uint64_t)&v41, (uint64_t **)&v36);
            v30 = v41;
            if (HIDWORD(v42))
            {
              v31 = 8 * HIDWORD(v42);
              v32 = v41;
              do
              {
                v44 = *(Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback **)v32;
                v33 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v24, &v44);
                WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>>,WTF::HashTableTraits>::take(v24, v33, &v43);
                LOBYTE(v36) = 0;
                LOBYTE(v39) = 0;
                WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)&v43, (int *)&v36);
                if ((_BYTE)v39)
                  v34 = v38 == 0;
                else
                  v34 = 1;
                if (!v34)
                {
                  v35 = v37;
                  v37 = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                      WTF::StringImpl::destroy(v35, v29);
                    else
                      *(_DWORD *)v35 -= 2;
                  }
                }
                result = v43;
                v43 = 0;
                if (result)
                  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
                v32 = (WTF *)((char *)v32 + 8);
                v31 -= 8;
              }
              while (v31);
            }
            if (v30)
              return (_QWORD *)WTF::fastFree(v30, v29);
          }
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = *a1;
  if (*a1)
    v4 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v4 = 0;
  if (v4 == a2)
  {
    *a3 = 0;
    return a1;
  }
  v5 = a2[1];
  if (v5)
  {
    a2[1] = 0;
    v3 = *a1;
  }
  *a3 = v5;
  if (v3)
  {
    v6 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    if (v6 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v6 = 0;
  }
  if (v6 != a2)
    return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1, a2);
  return a1;
}

WebKit::SimulatedInputDispatcher *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  WebKit::SimulatedInputDispatcher *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (WebKit::SimulatedInputDispatcher *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
    result = WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(result, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WebKit::SimulatedInputDispatcher *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WebKit::SimulatedInputDispatcher *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  WebKit::SimulatedInputDispatcher *v27;
  uint64_t v28;
  uint64_t v29;
  WebKit::SimulatedInputDispatcher *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (WebKit::SimulatedInputDispatcher *)v26[1];
          v26[1] = 0;
          if (v27)
            WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v27, v10);
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(WebKit::SimulatedInputDispatcher **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v30, v10);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WebKit::SimulatedInputDispatcher **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v16, v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::resolveChildFrameHandle(WTF::String const&,WTF::String const&,std::optional<int> &&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::ResolveChildFrameHandleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34F3F58;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::resolveChildFrameHandle(WTF::String const&,WTF::String const&,std::optional<int> &&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::ResolveChildFrameHandleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F3F58;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::resolveChildFrameHandle(WTF::String const&,WTF::String const&,std::optional<int> &&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::ResolveChildFrameHandleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String>::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&>::call(uint64_t a1, uint64_t a2, __int128 *a3)
{
  Inspector::BackendDispatcher::CallbackBase *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback *v8;
  __int128 v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  if (!*(_BYTE *)(a2 + 8))
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback **)(a1 + 24);
    v9 = *a3;
    v10 = *((_QWORD *)a3 + 2);
    WebKit::WebAutomationSession::handleForWebFrameID(&v11, v7, (uint64_t)&v9);
    Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback::sendSuccess(v8, (const WTF::String *)&v11);
    result = v11;
    v11 = 0;
    if (!result)
      return result;
    goto LABEL_8;
  }
  v3 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 24);
  v4 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((_QWORD *)a2);
  if ((v4 & 0xFF00000000) != 0)
    v4 = v4;
  else
    v4 = 5;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v4, &v9);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v3, (const WTF::String *)&v9);
  result = (WTF::StringImpl *)v9;
  *(_QWORD *)&v9 = 0;
  if (result)
  {
LABEL_8:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::resolveParentFrameHandle(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::__1<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34F3F80;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::resolveParentFrameHandle(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::__1<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F3F80;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::resolveParentFrameHandle(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::ResolveParentFrameHandleCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::__1<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<std::optional<WTF::String> &::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&>::call(uint64_t a1, uint64_t a2, __int128 *a3)
{
  Inspector::BackendDispatcher::CallbackBase *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback *v8;
  __int128 v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  if (!*(_BYTE *)(a2 + 8))
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback **)(a1 + 24);
    v9 = *a3;
    v10 = *((_QWORD *)a3 + 2);
    WebKit::WebAutomationSession::handleForWebFrameID(&v11, v7, (uint64_t)&v9);
    Inspector::AutomationBackendDispatcherHandler::EvaluateJavaScriptFunctionCallback::sendSuccess(v8, (const WTF::String *)&v11);
    result = v11;
    v11 = 0;
    if (!result)
      return result;
    goto LABEL_8;
  }
  v3 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 24);
  v4 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((_QWORD *)a2);
  if ((v4 & 0xFF00000000) != 0)
    v4 = v4;
  else
    v4 = 5;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v4, &v9);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v3, (const WTF::String *)&v9);
  result = (WTF::StringImpl *)v9;
  *(_QWORD *)&v9 = 0;
  if (result)
  {
LABEL_8:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::computeElementLayout(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,Inspector::Protocol::Automation::CoordinateSystem,WTF::Ref<std::optional<BOOL> &&::AutomationBackendDispatcherHandler::ComputeElementLayoutCallback,WTF::RawPtrTraits<std::optional<BOOL> &&::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<std::optional<BOOL> &&::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String>::IntPoint> &&,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34F3FA8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::computeElementLayout(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,Inspector::Protocol::Automation::CoordinateSystem,WTF::Ref<std::optional<BOOL> &&::AutomationBackendDispatcherHandler::ComputeElementLayoutCallback,WTF::RawPtrTraits<std::optional<BOOL> &&::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<std::optional<BOOL> &&::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String>::IntPoint> &&,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F3FA8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::computeElementLayout(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,Inspector::Protocol::Automation::CoordinateSystem,WTF::Ref<std::optional<BOOL> &&::AutomationBackendDispatcherHandler::ComputeElementLayoutCallback,WTF::RawPtrTraits<std::optional<BOOL> &&::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<std::optional<BOOL> &&::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<std::optional<WTF::String>::IntPoint> &&,BOOL>::call(WTF::JSONImpl::Object *a1, uint64_t a2, float *a3, uint64_t a4, WTF::JSONImpl::Value *a5)
{
  WTF::StringImpl *v6;
  Inspector::BackendDispatcher::CallbackBase *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  float v12;
  float v13;
  int v14;
  int v15;
  int v16;
  float v17;
  float v18;
  uint64_t *v19;
  WTF::StringImpl *v20;
  uint64_t *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::JSONImpl::Object *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  char v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;

  if (*(_BYTE *)(a2 + 8))
  {
    v6 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v40 = v6;
    v41 = 1;
    v7 = (Inspector::BackendDispatcher::CallbackBase *)*((_QWORD *)a1 + 1);
    v8 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(&v40);
    if ((v8 & 0xFF00000000) != 0)
      v8 = v8;
    else
      v8 = 5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v8, v44);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v7, (const WTF::String *)v44);
    result = v44[0];
    v44[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        if (!v6)
          return result;
LABEL_14:
        if (*(_DWORD *)v6 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v9);
        *(_DWORD *)v6 -= 2;
        return result;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v6)
      return result;
    goto LABEL_14;
  }
  v12 = a3[2];
  v13 = a3[3];
  v15 = *(_DWORD *)a4;
  v14 = *(_DWORD *)(a4 + 4);
  v16 = *(unsigned __int8 *)(a4 + 8);
  v18 = *a3;
  v17 = a3[1];
  WTF::JSONImpl::Object::create(a1);
  v43 = v44[0];
  Inspector::Protocol::Automation::Point::Builder<0>::setX((uint64_t *)&v43, v18);
  v19 = Inspector::Protocol::Automation::Point::Builder<1>::setY((uint64_t *)&v43, v17);
  v20 = v43;
  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v19);
  v43 = v44[0];
  Inspector::Protocol::Automation::Size::Builder<0>::setWidth((uint64_t *)&v43, v12);
  v21 = Inspector::Protocol::Automation::Size::Builder<1>::setHeight((uint64_t *)&v43, v13);
  v22 = v43;
  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v21);
  v23 = v44[0];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v42 = v20;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v23 + 2, &v43, (const WTF::StringImpl *)&v42, (uint64_t)v44);
  if (v45)
  {
    v25 = (uint64_t *)((char *)v23 + 24);
    v26 = *((unsigned int *)v23 + 9);
    if ((_DWORD)v26 == *((_DWORD *)v23 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v25, (unint64_t)&v43);
    }
    else
    {
      v27 = *v25;
      v28 = v43;
      if (v43)
        *(_DWORD *)v43 += 2;
      *(_QWORD *)(v27 + 8 * v26) = v28;
      *((_DWORD *)v23 + 9) = v26 + 1;
    }
  }
  v29 = v42;
  v42 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v29;
  }
  v30 = v43;
  v43 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v24);
    else
      *(_DWORD *)v30 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v42 = v22;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v23 + 2, &v43, (const WTF::StringImpl *)&v42, (uint64_t)v44);
  if (v45)
  {
    v32 = (uint64_t *)((char *)v23 + 24);
    v33 = *((unsigned int *)v23 + 9);
    if ((_DWORD)v33 == *((_DWORD *)v23 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v32, (unint64_t)&v43);
    }
    else
    {
      v34 = *v32;
      v35 = v43;
      if (v43)
        *(_DWORD *)v43 += 2;
      *(_QWORD *)(v34 + 8 * v33) = v35;
      *((_DWORD *)v23 + 9) = v33 + 1;
    }
  }
  v36 = v42;
  v42 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v36;
  }
  v37 = v43;
  v43 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      v37 = (WTF::StringImpl *)WTF::StringImpl::destroy(v37, v31);
    else
      *(_DWORD *)v37 -= 2;
  }
  v44[0] = v23;
  if (v16)
  {
    WTF::JSONImpl::Object::create(v37);
    Inspector::Protocol::Automation::Point::Builder<0>::setX((uint64_t *)&v43, (double)v15);
    Inspector::Protocol::Automation::Point::Builder<1>::setY((uint64_t *)&v43, (double)v14);
    v38 = (WTF::JSONImpl::Object *)*((_QWORD *)a1 + 1);
  }
  else
  {
    v38 = (WTF::JSONImpl::Object *)*((_QWORD *)a1 + 1);
    v43 = 0;
  }
  Inspector::AutomationBackendDispatcherHandler::ComputeElementLayoutCallback::sendSuccess(v38, v44, &v43, a5);
  v39 = v43;
  v43 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v39;
  }
  result = v44[0];
  v44[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::StringImpl *)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getComputedRole(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WTF::String>>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34F3FD0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getComputedRole(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WTF::String>>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F3FD0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback **WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getComputedRole(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WTF::String>>::call(Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback **result, uint64_t a2, WTF::String *a3)
{
  Inspector::BackendDispatcher::CallbackBase *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a2 + 8))
  {
    v3 = result[1];
    v4 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((_QWORD *)a2);
    if ((v4 & 0xFF00000000) != 0)
      v4 = v4;
    else
      v4 = 5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v4, &v6);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v3, (const WTF::String *)&v6);
    result = (Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback **)v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else if (*((_BYTE *)a3 + 8))
  {
    return (Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback **)Inspector::AutomationBackendDispatcherHandler::GetComputedRoleCallback::sendSuccess(result[1], a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getComputedLabel(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WTF::String>>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34F3FF8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getComputedLabel(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WTF::String>>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F3FF8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback **WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getComputedLabel(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback>> &&)::$_0,void,std::optional<WTF::String> &&,std::optional<WTF::String>>::call(Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback **result, uint64_t a2, WTF::String *a3)
{
  Inspector::BackendDispatcher::CallbackBase *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a2 + 8))
  {
    v3 = result[1];
    v4 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((_QWORD *)a2);
    if ((v4 & 0xFF00000000) != 0)
      v4 = v4;
    else
      v4 = 5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v4, &v6);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v3, (const WTF::String *)&v6);
    result = (Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback **)v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else if (*((_BYTE *)a3 + 8))
  {
    return (Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback **)Inspector::AutomationBackendDispatcherHandler::GetComputedLabelCallback::sendSuccess(result[1], a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::selectOptionElement(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback>> &&)::$_0,void,std::optional<WTF::String> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34F4020;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::selectOptionElement(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback>> &&)::$_0,void,std::optional<WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F4020;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::selectOptionElement(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::SelectOptionElementCallback>> &&)::$_0,void,std::optional<WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  Inspector::BackendDispatcher::CallbackBase *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  v2 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 8);
  if (!*(_BYTE *)(a2 + 8))
    return (WTF::StringImpl *)Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 8));
  v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((_QWORD *)a2);
  if ((v3 & 0xFF00000000) != 0)
    v3 = v3;
  else
    v3 = 5;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v3, &v6);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v2, (const WTF::String *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setFilesForInputFileUpload(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetFilesForInputFileUploadCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34F4048;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setFilesForInputFileUpload(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetFilesForInputFileUploadCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F4048;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::setFilesForInputFileUpload(WTF::String const&,WTF::String const&,WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::SetFilesForInputFileUploadCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,std::optional<WTF::String> &&>::call(uint64_t a1, uint64_t a2)
{
  Inspector::BackendDispatcher::CallbackBase *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  v2 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 8);
  if (!*(_BYTE *)(a2 + 8))
    return (WTF::StringImpl *)Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 8));
  v3 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((_QWORD *)a2);
  if ((v3 & 0xFF00000000) != 0)
    v3 = v3;
  else
    v3 = 5;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v3, &v6);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v2, (const WTF::String *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getAllCookies(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback>> &&)::$_0,void,std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34F4070;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getAllCookies(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback>> &&)::$_0,void,std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F4070;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::getAllCookies(WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback>> &&)::$_0,void,std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::call(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  Inspector::BackendDispatcher::CallbackBase *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::JSONImpl::Object *v14;
  uint64_t v15;
  uint64_t v16;
  const WTF::String *v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  const WTF::String *v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  const WTF::String *v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  const WTF::String *v45;
  WTF::StringImpl *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  double v53;
  uint64_t v54;
  WTF::JSONImpl::Value *v55;
  WTF::StringImpl *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  _DWORD *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::JSONImpl::Value *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  _DWORD *v72;
  WTF::StringImpl *v73;
  WTF::JSONImpl::Value *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  _DWORD *v81;
  WTF::StringImpl *v82;
  WTF::JSONImpl::Value *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  _DWORD *v90;
  WTF::StringImpl *v91;
  WTF::JSONImpl::Value *v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  _DWORD *v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const WTF::String *v104;
  WTF::StringImpl *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  _DWORD *v110;
  WTF::StringImpl *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t result;
  WTF::StringImpl *v118;
  WTF::JSONImpl::Object *v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  WTF::StringImpl *v123;
  unsigned __int8 v124;
  WTF::JSONImpl::Object *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  _DWORD *v129;
  WTF::StringImpl *v130[2];
  char v131;

  LOBYTE(v123) = 0;
  v124 = 0;
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a2 + 8))
  {
    v4 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v123 = v4;
    v5 = 1;
    v124 = 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = *a3;
  v120 = *a3;
  v7 = *((_DWORD *)a3 + 2);
  v8 = *((_DWORD *)a3 + 3);
  *a3 = 0;
  a3[1] = 0;
  v121 = v7;
  v122 = v8;
  v9 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 8);
  if (v3)
  {
    v10 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(&v123);
    if ((v10 & 0xFF00000000) != 0)
      v10 = v10;
    else
      v10 = 5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v10, v130);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v9, (const WTF::String *)v130);
    v12 = v130[0];
    v130[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
LABEL_181:
    result = WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v120, v11);
    if (v5)
    {
      result = (uint64_t)v123;
      if (v123)
      {
        if (*(_DWORD *)v123 == 2)
          return WTF::StringImpl::destroy(v123, v118);
        else
          *(_DWORD *)v123 -= 2;
      }
    }
    return result;
  }
  v119 = *(WTF::JSONImpl::Object **)(a1 + 8);
  v13 = WTF::fastMalloc((WTF *)0x20);
  v14 = (WTF::JSONImpl::Object *)WTF::JSONImpl::ArrayBase::ArrayBase((WTF::JSONImpl::ArrayBase *)v13);
  v125 = v14;
  if (!v8)
  {
LABEL_175:
    Inspector::AutomationBackendDispatcherHandler::GetAllCookiesCallback::sendSuccess(v119, &v125);
    if (v125)
    {
      if (*(_DWORD *)v125 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v125;
    }
    v5 = v124;
    goto LABEL_181;
  }
  v15 = v6 + 136 * v8;
  while (1)
  {
    WTF::JSONImpl::Object::create(v14);
    v16 = v126;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)v6, v17);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v126 + 16), &v128, (const WTF::StringImpl *)&v129, (uint64_t)v130);
    if (v131)
    {
      v19 = (uint64_t *)(v126 + 24);
      v20 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v20 == *(_DWORD *)(v126 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v19, (unint64_t)&v128);
      }
      else
      {
        v21 = *v19;
        v22 = v128;
        if (v128)
          *(_DWORD *)v128 += 2;
        *(_QWORD *)(v21 + 8 * v20) = v22;
        *(_DWORD *)(v16 + 36) = v20 + 1;
      }
    }
    v23 = v129;
    v129 = 0;
    if (v23)
    {
      if (*v23 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v23;
    }
    v24 = v128;
    v128 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v18);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v126;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v6 + 8), v26);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v126 + 16), &v128, (const WTF::StringImpl *)&v129, (uint64_t)v130);
    if (v131)
    {
      v28 = (uint64_t *)(v126 + 24);
      v29 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v29 == *(_DWORD *)(v126 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v28, (unint64_t)&v128);
      }
      else
      {
        v30 = *v28;
        v31 = v128;
        if (v128)
          *(_DWORD *)v128 += 2;
        *(_QWORD *)(v30 + 8 * v29) = v31;
        *(_DWORD *)(v25 + 36) = v29 + 1;
      }
    }
    v32 = v129;
    v129 = 0;
    if (v32)
    {
      if (*v32 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v32;
    }
    v33 = v128;
    v128 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v27);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v126;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v6 + 16), v35);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v126 + 16), &v128, (const WTF::StringImpl *)&v129, (uint64_t)v130);
    if (v131)
    {
      v37 = (uint64_t *)(v126 + 24);
      v38 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v38 == *(_DWORD *)(v126 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v37, (unint64_t)&v128);
      }
      else
      {
        v39 = *v37;
        v40 = v128;
        if (v128)
          *(_DWORD *)v128 += 2;
        *(_QWORD *)(v39 + 8 * v38) = v40;
        *(_DWORD *)(v34 + 36) = v38 + 1;
      }
    }
    v41 = v129;
    v129 = 0;
    if (v41)
    {
      if (*v41 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v41;
    }
    v42 = v128;
    v128 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v36);
      else
        *(_DWORD *)v42 -= 2;
    }
    v43 = v126;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v44 = v6 + 24;
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(v6 + 24), v45);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v126 + 16), &v128, (const WTF::StringImpl *)&v129, (uint64_t)v130);
    if (v131)
    {
      v47 = (uint64_t *)(v126 + 24);
      v48 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v48 == *(_DWORD *)(v126 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v47, (unint64_t)&v128);
      }
      else
      {
        v49 = *v47;
        v50 = v128;
        if (v128)
          *(_DWORD *)v128 += 2;
        *(_QWORD *)(v49 + 8 * v48) = v50;
        *(_DWORD *)(v43 + 36) = v48 + 1;
      }
    }
    v51 = v129;
    v129 = 0;
    if (v51)
    {
      if (*v51 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v51;
    }
    v52 = v128;
    v128 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v46);
      else
        *(_DWORD *)v52 -= 2;
    }
    if (*(_BYTE *)(v6 + 48))
      v53 = *(double *)(v6 + 40) / 1000.0;
    else
      v53 = 0.0;
    v54 = v126;
    v55 = (WTF::JSONImpl::Value *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v55, v53);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v126 + 16), &v128, (const WTF::StringImpl *)&v129, (uint64_t)v130);
    if (v131)
    {
      v57 = (uint64_t *)(v126 + 24);
      v58 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v58 == *(_DWORD *)(v126 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v57, (unint64_t)&v128);
      }
      else
      {
        v59 = *v57;
        v60 = v128;
        if (v128)
          *(_DWORD *)v128 += 2;
        *(_QWORD *)(v59 + 8 * v58) = v60;
        *(_DWORD *)(v54 + 36) = v58 + 1;
      }
    }
    v61 = v129;
    v129 = 0;
    if (v61)
    {
      if (*v61 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v61;
    }
    v62 = v128;
    v128 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v56);
      else
        *(_DWORD *)v62 -= 2;
    }
    v63 = *(_QWORD *)(v44 - 24);
    if (v63)
      LODWORD(v63) = *(_DWORD *)(v63 + 4);
    v64 = *(_QWORD *)(v44 - 16);
    if (v64)
      LODWORD(v64) = *(_DWORD *)(v64 + 4);
    v65 = (WTF::JSONImpl::Value *)(v64 + v63);
    v66 = v126;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v65);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v126 + 16), &v128, (const WTF::StringImpl *)&v129, (uint64_t)v130);
    if (v131)
    {
      v68 = (uint64_t *)(v126 + 24);
      v69 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v69 == *(_DWORD *)(v126 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v68, (unint64_t)&v128);
      }
      else
      {
        v70 = *v68;
        v71 = v128;
        if (v128)
          *(_DWORD *)v128 += 2;
        *(_QWORD *)(v70 + 8 * v69) = v71;
        *(_DWORD *)(v66 + 36) = v69 + 1;
      }
    }
    v72 = v129;
    v129 = 0;
    if (v72)
    {
      if (*v72 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v72;
    }
    v73 = v128;
    v128 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
        WTF::StringImpl::destroy(v73, v67);
      else
        *(_DWORD *)v73 -= 2;
    }
    v74 = (WTF::JSONImpl::Value *)*(unsigned __int8 *)(v44 + 32);
    v75 = v126;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v74);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v126 + 16), &v128, (const WTF::StringImpl *)&v129, (uint64_t)v130);
    if (v131)
    {
      v77 = (uint64_t *)(v126 + 24);
      v78 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v78 == *(_DWORD *)(v126 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v77, (unint64_t)&v128);
      }
      else
      {
        v79 = *v77;
        v80 = v128;
        if (v128)
          *(_DWORD *)v128 += 2;
        *(_QWORD *)(v79 + 8 * v78) = v80;
        *(_DWORD *)(v75 + 36) = v78 + 1;
      }
    }
    v81 = v129;
    v129 = 0;
    if (v81)
    {
      if (*v81 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v81;
    }
    v82 = v128;
    v128 = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2)
        WTF::StringImpl::destroy(v82, v76);
      else
        *(_DWORD *)v82 -= 2;
    }
    v83 = (WTF::JSONImpl::Value *)*(unsigned __int8 *)(v44 + 33);
    v84 = v126;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v83);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v126 + 16), &v128, (const WTF::StringImpl *)&v129, (uint64_t)v130);
    if (v131)
    {
      v86 = (uint64_t *)(v126 + 24);
      v87 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v87 == *(_DWORD *)(v126 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v86, (unint64_t)&v128);
      }
      else
      {
        v88 = *v86;
        v89 = v128;
        if (v128)
          *(_DWORD *)v128 += 2;
        *(_QWORD *)(v88 + 8 * v87) = v89;
        *(_DWORD *)(v84 + 36) = v87 + 1;
      }
    }
    v90 = v129;
    v129 = 0;
    if (v90)
    {
      if (*v90 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v90;
    }
    v91 = v128;
    v128 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 2)
        WTF::StringImpl::destroy(v91, v85);
      else
        *(_DWORD *)v91 -= 2;
    }
    v92 = (WTF::JSONImpl::Value *)*(unsigned __int8 *)(v44 + 34);
    v93 = v126;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WTF::JSONImpl::Value::create(v92);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v126 + 16), &v128, (const WTF::StringImpl *)&v129, (uint64_t)v130);
    if (v131)
    {
      v95 = (uint64_t *)(v126 + 24);
      v96 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v96 == *(_DWORD *)(v126 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v95, (unint64_t)&v128);
      }
      else
      {
        v97 = *v95;
        v98 = v128;
        if (v128)
          *(_DWORD *)v128 += 2;
        *(_QWORD *)(v97 + 8 * v96) = v98;
        *(_DWORD *)(v93 + 36) = v96 + 1;
      }
    }
    v99 = v129;
    v129 = 0;
    if (v99)
    {
      if (*v99 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v99;
    }
    v100 = v128;
    v128 = 0;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2)
        WTF::StringImpl::destroy(v100, v94);
      else
        *(_DWORD *)v100 -= 2;
    }
    v101 = *(char *)(v44 + 104);
    if (v101 >= 3)
      break;
    v102 = dword_1978D0F90[v101];
    v103 = v126;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v102, &v127);
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v127, v104);
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v126 + 16), &v128, (const WTF::StringImpl *)&v129, (uint64_t)v130);
    if (v131)
    {
      v106 = (uint64_t *)(v126 + 24);
      v107 = *(unsigned int *)(v126 + 36);
      if ((_DWORD)v107 == *(_DWORD *)(v126 + 32))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v106, (unint64_t)&v128);
      }
      else
      {
        v108 = *v106;
        v109 = v128;
        if (v128)
          *(_DWORD *)v128 += 2;
        *(_QWORD *)(v108 + 8 * v107) = v109;
        *(_DWORD *)(v103 + 36) = v107 + 1;
      }
    }
    v110 = v129;
    v129 = 0;
    if (v110)
    {
      if (*v110 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v110;
    }
    v111 = v127;
    v127 = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
        WTF::StringImpl::destroy(v111, v105);
      else
        *(_DWORD *)v111 -= 2;
    }
    v14 = v128;
    v128 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        v14 = (WTF::JSONImpl::Object *)WTF::StringImpl::destroy(v14, v105);
      else
        *(_DWORD *)v14 -= 2;
    }
    v112 = *(unsigned int *)(v13 + 28);
    if ((_DWORD)v112 == *(_DWORD *)(v13 + 24))
    {
      v113 = v112 + (v112 >> 2);
      if (v113 >= 0x10)
        v114 = v113 + 1;
      else
        v114 = 16;
      if (v114 <= v112 + 1)
        v115 = v112 + 1;
      else
        v115 = v114;
      v14 = (WTF::JSONImpl::Object *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v13 + 16, v115);
      v112 = *(unsigned int *)(v13 + 28);
      v116 = (_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * v112);
    }
    else
    {
      v116 = (_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * v112);
    }
    *v116 = v126;
    *(_DWORD *)(v13 + 28) = v112 + 1;
    v6 = v44 + 112;
    if (v44 + 112 == v15)
      goto LABEL_175;
  }
  result = 1440;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetCookiesForFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F4098;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetCookiesForFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F4098;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::GetCookiesForFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned int v2;
  unsigned int v3;
  WTF::StringImpl *v4;
  uint64_t *v5;
  void *v7;
  WTF::StringImpl *result;
  void *v9;
  int v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  void *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  char v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unsigned __int8 v32;

  v5 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetCookiesForFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::optional<WTF::String>>(a2, (uint64_t)&v26);
  if (!v29)
  {
    v12 = 0;
    v13 = 0;
    LOBYTE(v21) = 0;
    v25 = 0;
    goto LABEL_10;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v7, (uint64_t)&v30);
  v10 = v32;
  if (v32)
  {
    if (!v29)
    {
      __break(1u);
      return result;
    }
    LOBYTE(v21) = 0;
    v22 = 0;
    if ((_BYTE)v27)
    {
      v11 = v26;
      v26 = 0;
      v21 = v11;
      v12 = 1;
      v22 = 1;
    }
    else
    {
      v12 = 0;
    }
    v4 = v30;
    v23 = v30;
    v2 = v31;
    v3 = HIDWORD(v31);
    v30 = 0;
    v31 = 0;
    v24 = __PAIR64__(v3, v2);
    v13 = 1;
    v25 = 1;
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v9);
  }
  else
  {
    v12 = 0;
    v13 = 0;
    LOBYTE(v21) = 0;
    v25 = 0;
  }
  if (!v29 || !(_BYTE)v27 || (v16 = v26, v26 = 0, !v16))
  {
LABEL_21:
    if (v10)
      goto LABEL_22;
LABEL_10:
    v9 = (void *)*a2;
    v14 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15 && v14)
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v15 + 16))(v15, v9);
    goto LABEL_22;
  }
  if (*(_DWORD *)v16 != 2)
  {
    *(_DWORD *)v16 -= 2;
    goto LABEL_21;
  }
  WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v9);
  if (!v10)
    goto LABEL_10;
LABEL_22:
  if (v13)
  {
    LOBYTE(v30) = 0;
    LOBYTE(v31) = 0;
    if (v12)
    {
      v17 = v21;
      v21 = 0;
      v30 = v17;
      LOBYTE(v31) = 1;
    }
    v23 = 0;
    v24 = 0;
    v26 = v4;
    v27 = v2;
    v28 = v3;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(v5, (uint64_t)&v30, &v26);
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v18);
    if ((_BYTE)v31)
    {
      v20 = v30;
      v30 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v19);
  }
  else
  {
    std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v9);
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetCookiesForFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(v5);
  }
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::GetCookiesForFrame,WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(uint64_t *a1)
{
  void *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  _QWORD v4[2];
  WTF::StringImpl *v5;
  char v6;

  LOBYTE(v5) = 0;
  v6 = 0;
  v4[0] = 0;
  v4[1] = 0;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a1, (uint64_t)&v5, v4);
  result = (WTF::StringImpl *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v1);
  if (v6)
  {
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t result;
  _QWORD v9[2];
  WTF::StringImpl *v10;
  char v11;
  uint64_t v12;

  v12 = *a1;
  *a1 = 0;
  LOBYTE(v10) = 0;
  v11 = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v10 = v3;
    v11 = 1;
  }
  v9[0] = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v9[1] = v4;
  WTF::Function<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(&v12, (uint64_t)&v10, v9);
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
  if (v11)
  {
    v7 = v10;
    v10 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::Function<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  void *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  _QWORD v9[2];
  WTF::StringImpl *v10;
  char v11;

  v3 = *a1;
  LOBYTE(v10) = 0;
  v11 = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v4 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v10 = v4;
    v11 = 1;
  }
  v9[0] = *a3;
  v5 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v9[1] = v5;
  (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD *))(*(_QWORD *)v3 + 16))(v3, &v10, v9);
  result = (WTF::StringImpl *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  if (v11)
  {
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 32))
  {
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1, v3);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::deleteSingleCookie(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback>> &&)::$_0,void,std::optional<WTF::String>>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34F40C0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::deleteSingleCookie(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback>> &&)::$_0,void,std::optional<WTF::String>>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F40C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::deleteSingleCookie(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::DeleteSingleCookieCallback>> &&)::$_0,void,std::optional<WTF::String>>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  Inspector::BackendDispatcher::CallbackBase *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;

  if (!*(_BYTE *)(a2 + 8))
    return (WTF::StringImpl *)Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 8));
  v2 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v7 = v2;
  v8 = 1;
  v3 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 8);
  v4 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>(&v7);
  if ((v4 & 0xFF00000000) != 0)
    v4 = v4;
  else
    v4 = 5;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v4, &v9);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v3, (const WTF::String *)&v9);
  result = v9;
  v9 = 0;
  if (!result)
  {
LABEL_8:
    if (!v2)
      return result;
    goto LABEL_12;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_8;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
  if (!v2)
    return result;
LABEL_12:
  if (*(_DWORD *)v2 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v2, v5);
  *(_DWORD *)v2 -= 2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::DeleteCookie,WTF::CompletionHandler<void ()(std::optional<WTF::String>)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F40E8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::DeleteCookie,WTF::CompletionHandler<void ()(std::optional<WTF::String>)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F40E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAutomationSessionProxy::DeleteCookie,WTF::CompletionHandler<void ()(std::optional<WTF::String>)>>(WTF::CompletionHandler<void ()(std::optional<WTF::String>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  char v8;
  WTF::StringImpl *v9;
  char v10;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::DeleteCookie,WTF::CompletionHandler<void ()(std::optional<WTF::String>)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::optional<WTF::String>>>(a2, &v6);
  if (!v8)
    return IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::DeleteCookie,WTF::CompletionHandler<void ()(std::optional<WTF::String>)>>(v2);
  LOBYTE(v9) = 0;
  v10 = 0;
  if (v7)
  {
    v3 = v6;
    v6 = 0;
    v9 = v3;
    v10 = 1;
  }
  result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(v2, (uint64_t)&v9);
  if (v10)
  {
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v8)
  {
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebAutomationSessionProxy::DeleteCookie,WTF::CompletionHandler<void ()(std::optional<WTF::String>)>>(uint64_t *a1)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  char v4;

  LOBYTE(v3) = 0;
  v4 = 0;
  result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a1, (uint64_t)&v3);
  if (v4)
  {
    result = v3;
    v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  char v7;
  uint64_t v8;

  v8 = *a1;
  *a1 = 0;
  LOBYTE(v6) = 0;
  v7 = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v2 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v6 = v2;
    v7 = 1;
  }
  WTF::Function<void ()(std::optional<WTF::String>)>::operator()(&v8, (uint64_t)&v6);
  if (v7)
  {
    v4 = v6;
    v6 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WTF::Function<void ()(std::optional<WTF::String>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v2 = *a1;
  LOBYTE(v6) = 0;
  v7 = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v6 = v3;
    v7 = 1;
  }
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 16))(v2, &v6);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::addSingleCookie(WTF::String const&,WTF::Ref<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::AddSingleCookieCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34F4110;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::addSingleCookie(WTF::String const&,WTF::Ref<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::AddSingleCookieCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F4110;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::addSingleCookie(WTF::String const&,WTF::Ref<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::AddSingleCookieCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::call(uint64_t a1)
{
  return Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 8));
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputDispatcher,WTF::RawPtrTraits<WebKit::SimulatedInputDispatcher>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputDispatcher>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::viewportInViewCenterPointOfElement(WebKit::WebPageProxy &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String const&,WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<WebCore::IntPoint>&&,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F4160;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::viewportInViewCenterPointOfElement(WebKit::WebPageProxy &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String const&,WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<WebCore::IntPoint>&&,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F4160;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::viewportInViewCenterPointOfElement(WebKit::WebPageProxy &,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String const&,WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WTF::String> &&,WebCore::FloatRect &&,std::optional<WebCore::IntPoint>&&,BOOL>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  WTF::StringImpl *v14;
  char v15;
  char v16;

  v4 = (uint64_t *)(a1 + 8);
  if (*(_BYTE *)(a2 + 8))
  {
    v5 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((_QWORD *)a2);
    if ((v5 & 0xFF00000000) != 0)
      v6 = v5;
    else
      v6 = 5;
    v13 = v6;
    LOBYTE(v14) = 0;
    v15 = 0;
    v16 = 1;
    result = WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)>::operator()(v4, 0, 0, &v13);
    if (v16)
      v9 = v15 == 0;
    else
      v9 = 1;
    if (!v9)
    {
LABEL_16:
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a4 + 8))
    {
      v10 = *(_QWORD *)a4;
      v11 = *(_DWORD *)(a4 + 8);
      LOBYTE(v13) = 0;
      v16 = 0;
      v12 = (uint64_t *)(a1 + 8);
    }
    else
    {
      v13 = 23;
      LOBYTE(v14) = 0;
      v15 = 0;
      v16 = 1;
      v12 = (uint64_t *)(a1 + 8);
      v10 = 0;
      v11 = 0;
    }
    result = WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)>::operator()(v12, v10, v11, &v13);
    if (v16 && v15)
      goto LABEL_16;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::simulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34F4188;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::simulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4188;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::simulateTouchInteraction(WebKit::WebPageProxy &,WebKit::TouchInteraction,WebCore::IntPoint const&,std::optional<WTF::Seconds>,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WebKit::AutomationCommandError>>::call(uint64_t a1, int *a2)
{
  WTF::StringImpl *v2;
  int v3;
  int v4;
  int v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  BOOL v8;
  int v9;
  WTF::StringImpl *v10;
  char v11;
  char v12;

  v3 = *((unsigned __int8 *)a2 + 24);
  if (*((_BYTE *)a2 + 24))
  {
    v4 = *a2;
    if (*((_BYTE *)a2 + 16))
    {
      v2 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + 300) = 0;
      v9 = v4;
      if (v2)
        *(_DWORD *)v2 += 2;
      v10 = v2;
      v5 = 1;
      v11 = 1;
    }
    else
    {
      v2 = 0;
      v5 = 0;
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + 300) = 0;
      v9 = v4;
      LOBYTE(v10) = 0;
      v11 = 0;
    }
    v12 = 1;
  }
  else
  {
    v5 = 0;
    *(_BYTE *)(*(_QWORD *)(a1 + 8) + 300) = 0;
    LOBYTE(v9) = 0;
    v12 = 0;
  }
  result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)(a1 + 24), (uint64_t)&v9);
  if (v12)
    v8 = v11 == 0;
  else
    v8 = 1;
  if (v8 || (result = v10, v10 = 0, !result))
  {
LABEL_16:
    if (!v3)
      return result;
    goto LABEL_17;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_16;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
  if (!v3)
    return result;
LABEL_17:
  if (v2 && v5)
  {
    if (*(_DWORD *)v2 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v2, v7);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::simulateKeyboardInteraction(WebKit::WebPageProxy &,Inspector::Protocol::Automation::KeyboardInteractionType,std::variant<Inspector::Protocol::Automation::VirtualKey,WTF::String> &&,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,WebKit::AutomationCommandError>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F41B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::simulateKeyboardInteraction(WebKit::WebPageProxy &,Inspector::Protocol::Automation::KeyboardInteractionType,std::variant<Inspector::Protocol::Automation::VirtualKey,WTF::String> &&,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,WebKit::AutomationCommandError>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F41B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::simulateKeyboardInteraction(WebKit::WebPageProxy &,Inspector::Protocol::Automation::KeyboardInteractionType,std::variant<Inspector::Protocol::Automation::VirtualKey,WTF::String> &&,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,WebKit::AutomationCommandError>::call(uint64_t a1, int *a2)
{
  WTF::StringImpl *v2;
  uint64_t *v3;
  int v4;
  int v5;
  int v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  BOOL v9;
  int v10;
  WTF::StringImpl *v11;
  char v12;
  char v13;

  v3 = (uint64_t *)(a1 + 8);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (*((_BYTE *)a2 + 24))
  {
    v5 = *a2;
    if (*((_BYTE *)a2 + 16))
    {
      v2 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v10 = v5;
      if (v2)
        *(_DWORD *)v2 += 2;
      v11 = v2;
      v6 = 1;
      v12 = 1;
    }
    else
    {
      v2 = 0;
      v6 = 0;
      v10 = *a2;
      LOBYTE(v11) = 0;
      v12 = 0;
    }
    v13 = 1;
  }
  else
  {
    v6 = 0;
    LOBYTE(v10) = 0;
    v13 = 0;
  }
  result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(v3, (uint64_t)&v10);
  if (v13)
    v9 = v12 == 0;
  else
    v9 = 1;
  if (v9 || (result = v11, v11 = 0, !result))
  {
LABEL_16:
    if (!v4)
      return result;
    goto LABEL_17;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_16;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
  if (!v4)
    return result;
LABEL_17:
  if (v2 && v6)
  {
    if (*(_DWORD *)v2 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v2, v8);
    else
      *(_DWORD *)v2 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34F41D8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34F41D8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebAutomationSession *v1;
  uint64_t v2;
  int v3;
  id v4;
  int v5;
  int v6;
  char v7;

  if (*(_BYTE *)(a1 + 28) && *(_BYTE *)(a1 + 36))
  {
    v2 = *(_QWORD *)(a1 + 8);
    v1 = *(WebKit::WebAutomationSession **)(a1 + 16);
    v3 = *(_DWORD *)(a1 + 24);
    v5 = *(_DWORD *)(a1 + 32);
    v6 = 0;
    WebKit::WebAutomationSession::platformSimulateKeyboardInteraction(v2, v1, v3, (uint64_t)&v5);
    if (v6 != -1)
      ((void (*)(char *, int *))off_1E34F41F0[v6])(&v7, &v5);
  }
  else
  {
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void>::~CallableWrapper(v4);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34F4210;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4210;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void>::call(WebKit::WebAutomationSession **a1)
{
  WebKit::WebAutomationSession::platformSimulateKeySequence(a1[1], a1[2], (const WTF::String *)(a1 + 3));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_2,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E34F4238;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_2,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F4238;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performKeyboardInteractions(WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformKeyboardInteractionsCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_2,void,std::optional<WebKit::AutomationCommandError>>::call(uint64_t a1, uint64_t a2)
{
  int v2;
  WTF::StringImpl *v3;
  Inspector::BackendDispatcher::CallbackBase *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  unsigned int v7;
  WTF::StringImpl *v8;
  char v9;
  char v10;
  WTF::StringImpl *v11;

  if (!*(_BYTE *)(a2 + 24))
    return (WTF::StringImpl *)Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 16));
  v7 = *(_DWORD *)a2;
  LOBYTE(v8) = 0;
  v9 = 0;
  v2 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v8 = v3;
    v9 = 1;
  }
  v10 = 1;
  v4 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 16);
  WebKit::AutomationCommandError::toProtocolString((WebKit::AutomationCommandError *)&v11, &v7);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v4, (const WTF::String *)&v11);
  result = v11;
  v11 = 0;
  if (!result)
  {
LABEL_7:
    if (!v2)
      return result;
    goto LABEL_11;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_7;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
  if (!v2)
    return result;
LABEL_11:
  result = v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v8 = 0;
    while (1)
    {
      v9 = (WTF::StringImpl **)(v2 + 16 * v8);
      v10 = *v9;
      if (*v9 != (WTF::StringImpl *)-1)
      {
        if (v10)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = *((_DWORD *)v10 + 4);
          if (v15 >= 0x100)
            v16 = v15 >> 8;
          else
            v16 = WTF::StringImpl::hashSlowCase(v10);
          v17 = 0;
          do
          {
            v18 = v16 & v14;
            v16 = ++v17 + v18;
          }
          while (*(_QWORD *)(v13 + 16 * v18));
          v19 = v13 + 16 * v18;
          v20 = *(_DWORD **)(v19 + 8);
          *(_QWORD *)(v19 + 8) = 0;
          if (v20)
          {
            WTF::RefCounted<WebKit::SimulatedInputSource>::deref(v20, v7);
            v21 = *(WTF::StringImpl **)v19;
            *(_QWORD *)v19 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v7);
              else
                *(_DWORD *)v21 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v19 = 0;
          }
          v22 = *v9;
          *v9 = 0;
          *(_QWORD *)v19 = v22;
          v23 = v2 + 16 * v8;
          v24 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          *(_QWORD *)(v19 + 8) = v24;
          v25 = *(_DWORD **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v25)
            WTF::RefCounted<WebKit::SimulatedInputSource>::deref(v25, v7);
          v10 = *v9;
          *v9 = 0;
          if (!v10)
            goto LABEL_36;
          if (*(_DWORD *)v10 == 2)
            goto LABEL_35;
          *(_DWORD *)v10 -= 2;
        }
        else
        {
          v11 = v2 + 16 * v8;
          v12 = *(_DWORD **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v12)
          {
            WTF::RefCounted<WebKit::SimulatedInputSource>::deref(v12, v7);
            v10 = *v9;
          }
          *v9 = 0;
          if (!v10)
            goto LABEL_36;
          if (*(_DWORD *)v10 == 2)
          {
LABEL_35:
            WTF::StringImpl::destroy(v10, v7);
            goto LABEL_36;
          }
          *(_DWORD *)v10 -= 2;
        }
      }
LABEL_36:
      if (++v8 == v3)
        return WTF::fastFree((WTF *)(v2 - 16), v7);
    }
  }
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  return result;
}

uint64_t WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x2492493)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 112 * a2;
      result = WTF::fastMalloc((WTF *)(112 * a2));
      *(_DWORD *)(v2 + 8) = (613566757 * (unint64_t)(v5 >> 4)) >> 32;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 112 * v4;
        v9 = (uint64_t)v3;
        do
        {
          std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>::pair[abi:sn180100](v7, v9);
          std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v9 + 56, v10);
          v12 = *(_QWORD *)(v9 + 32);
          if (v12)
            WTF::fastFree((WTF *)(v12 - 16), v11);
          result = WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes(v9 + 8, v11);
          v13 = *(_QWORD *)(v9 + 8);
          if (v13)
            result = WTF::fastFree((WTF *)(v13 - 16), v6);
          v7 += 112;
          v9 += 112;
          v8 -= 112;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

__n128 std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>::pair[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 8) = v2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 45) = *(_QWORD *)(a2 + 45);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a1 + 56) = v7;
    *(_BYTE *)(a1 + 64) = 1;
  }
  result = *(__n128 *)(a2 + 72);
  v9 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v9;
  *(__n128 *)(a1 + 72) = result;
  return result;
}

uint64_t WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t i;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::allocateTable(v5);
  *a1 = result;
  *(_DWORD *)(result - 4) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v9 = (_DWORD *)(v2 + 8 * i);
      if ((int)*v9 <= 2147483645)
      {
        v10 = *a1;
        if (*a1)
          v11 = *(_DWORD *)(v10 - 8);
        else
          v11 = 0;
        v12 = 0;
        v13 = 9 * ((*v9 + ~(*v9 << 15)) ^ ((*v9 + ~(*v9 << 15)) >> 10));
        v14 = ((v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11)) ^ (((v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11)) >> 16);
        do
        {
          v7 = v14 & v11;
          v14 = ++v12 + v7;
        }
        while (*(_DWORD *)(v10 + 8 * v7) != 0x7FFFFFFF);
        *(_QWORD *)(v10 + 8 * v7) = *(_QWORD *)v9;
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), (void *)v7);
}

unint64_t WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 112 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performInteractionSequence(WTF::String const&,WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformInteractionSequenceCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34F4260;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performInteractionSequence(WTF::String const&,WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformInteractionSequenceCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4260;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::performInteractionSequence(WTF::String const&,WTF::String const&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,WTF::Ref<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::PerformInteractionSequenceCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void,std::optional<WebKit::AutomationCommandError>>::call(uint64_t a1, uint64_t a2)
{
  int v2;
  WTF::StringImpl *v3;
  Inspector::BackendDispatcher::CallbackBase *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  unsigned int v7;
  WTF::StringImpl *v8;
  char v9;
  char v10;
  WTF::StringImpl *v11;

  if (!*(_BYTE *)(a2 + 24))
    return (WTF::StringImpl *)Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 16));
  v7 = *(_DWORD *)a2;
  LOBYTE(v8) = 0;
  v9 = 0;
  v2 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v8 = v3;
    v9 = 1;
  }
  v10 = 1;
  v4 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 16);
  WebKit::AutomationCommandError::toProtocolString((WebKit::AutomationCommandError *)&v11, &v7);
  Inspector::BackendDispatcher::CallbackBase::sendFailure(v4, (const WTF::String *)&v11);
  result = v11;
  v11 = 0;
  if (!result)
  {
LABEL_7:
    if (!v2)
      return result;
    goto LABEL_11;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_7;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
  if (!v2)
    return result;
LABEL_11:
  result = v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::cancelInteractionSequence(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback>> &&)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34F4288;
  v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::cancelInteractionSequence(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback>> &&)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4288;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::cancelInteractionSequence(WTF::String const&,WTF::String const&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler::CancelInteractionSequenceCallback>> &&)::$_0,void,std::optional<WebKit::AutomationCommandError>>::call(uint64_t a1, uint64_t a2)
{
  int v2;
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  Inspector::BackendDispatcher::CallbackBase *v7;
  WTF::StringImpl *v8;
  uint64_t result;
  unsigned int v10;
  WTF::StringImpl *v11;
  char v12;
  char v13;
  WTF::StringImpl *v14;

  v2 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a2 + 24))
  {
    v10 = *(_DWORD *)a2;
    LOBYTE(v11) = 0;
    v12 = 0;
    if (*(_BYTE *)(a2 + 16))
    {
      v3 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      v11 = v3;
      v4 = 1;
      v12 = 1;
    }
    else
    {
      v4 = 0;
    }
    v13 = 1;
    v5 = *(_QWORD *)(a1 + 8);
    v7 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 24);
    WebKit::AutomationCommandError::toProtocolString((WebKit::AutomationCommandError *)&v14, &v10);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v7, (const WTF::String *)&v14);
    v8 = v14;
    v14 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback::sendSuccess(*(Inspector::AutomationBackendDispatcherHandler::SwitchToBrowsingContextCallback **)(a1 + 24));
    v4 = 0;
  }
  result = *(_QWORD *)(v5 + 280);
  if (result)
  {
    *(_QWORD *)(v5 + 280) = 0;
    result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v6);
  }
  if (v2)
  {
    if (v4)
    {
      result = (uint64_t)v11;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          return WTF::StringImpl::destroy(v11, v6);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0,void,WebKit::WebPageProxy &,std::optional<WebCore::IntRect> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>>>::call(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  int v11;
  uint64_t v12;

  CFRetain(*(CFTypeRef *)(a2 + 8));
  v10 = *a3;
  LOBYTE(v11) = *((_BYTE *)a3 + 16);
  v7 = *a4;
  *a4 = 0;
  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v8 = &off_1E34F42D8;
  *(_QWORD *)(v8 + 8) = a2;
  *(_OWORD *)(v8 + 16) = v10;
  *(_DWORD *)(v8 + 32) = v11;
  *(_QWORD *)(v8 + 40) = v7;
  v12 = v8;
  WebKit::WebPageProxy::callAfterNextPresentationUpdate(a2, &v12);
  result = v12;
  if (v12)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator() const(WebKit::WebPageProxy &,std::optional<WebCore::IntRect> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>>)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E34F42D8;
  v2 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator() const(WebKit::WebPageProxy &,std::optional<WebCore::IntRect> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F42D8;
  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

WebKit::WebAutomationSession *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_0::operator() const(WebKit::WebPageProxy &,std::optional<WebCore::IntRect> &&,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Inspector::BackendDispatcher::CallbackBase *v5;
  WTF::StringImpl *v6;
  Inspector::BackendDispatcher::CallbackBase *v7;
  WTF::StringImpl *v8;
  WebKit::WebAutomationSession *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;
  WebKit::WebAutomationSession *v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1584))(v4);
  (*(void (**)(WebKit::WebAutomationSession **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 456))(&v13, v4, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 1592))(v4);
  if (v13)
  {
    WebKit::WebAutomationSession::platformGetBase64EncodedPNGData(v13, &v11);
    v5 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 40);
    if (!v12)
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v10);
      Inspector::BackendDispatcher::CallbackBase::sendFailure(v5, (const WTF::String *)&v10);
      v8 = v10;
      v10 = 0;
      if (!v8)
        goto LABEL_15;
LABEL_12:
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
      goto LABEL_15;
    }
    Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback::sendSuccess(v5, (const WTF::String *)&v11);
    if (!v12)
      goto LABEL_15;
  }
  else
  {
    v7 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 40);
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v11);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v7, (const WTF::String *)&v11);
  }
  v8 = v11;
  v11 = 0;
  if (v8)
    goto LABEL_12;
LABEL_15:
  result = v13;
  v13 = 0;
  if (result)
    return WTF::RefCounted<WebKit::ViewSnapshot>::deref(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void,std::optional<WTF::String> &&,WebCore::IntRect &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  *a1 = &off_1E34F4300;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void,std::optional<WTF::String> &&,WebCore::IntRect &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F4300;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSession::takeScreenshot(WTF::String const&,WTF::String const&,WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::Ref<Inspector::AutomationBackendDispatcherHandler::TakeScreenshotCallback,WTF::RawPtrTraits<Inspector::AutomationBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::AutomationBackendDispatcherHandler>> &&)::$_1,void,std::optional<WTF::String> &&,WebCore::IntRect &&>::call(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  Inspector::BackendDispatcher::CallbackBase *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  WTF::StringImpl *v8[2];
  char v9;

  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 16);
    v4 = Inspector::Protocol::AutomationHelpers::parseEnumValueFromString<Inspector::Protocol::Automation::ErrorMessage>((_QWORD *)a2);
    if ((v4 & 0xFF00000000) != 0)
      v4 = v4;
    else
      v4 = 5;
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v4, v8);
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v3, (const WTF::String *)v8);
    result = v8[0];
    v8[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    *(_OWORD *)v8 = *a3;
    v9 = 1;
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, WTF::StringImpl **, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v7, v8, a1 + 16);
  }
  return result;
}

void WebKit::WebAutomationSession::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  _BYTE v10[64];
  uint64_t v11;
  char v12;

  CFRetain(this[1]);
  v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 1544)
  {
    IPC::Decoder::decode<std::tuple<unsigned long long,std::optional<WebCore::ShareableBitmapHandle>,WTF::String>>(a3, (uint64_t)&v8);
    if (v12)
      WebKit::WebAutomationSession::didTakeScreenshot((uint64_t)this, v8, (uint64_t)&v9, &v11);
    std::__optional_destruct_base<std::tuple<unsigned long long,std::optional<WebCore::ShareableBitmapHandle>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v8, v7);
  }
  else if (v5 == 1543)
  {
    IPC::Decoder::decode<std::tuple<unsigned long long,WTF::String,WTF::String>>((uint64_t *)a3, (uint64_t)&v8);
    if (v10[8])
      WebKit::WebAutomationSession::didEvaluateJavaScriptFunction((WebKit::WebAutomationSession *)this, v8, &v9, (const WTF::String *)v10);
    std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicy,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v8, v6);
  }
  CFRelease(this[1]);
}

void `non-virtual thunk to'WebKit::WebAutomationSession::didReceiveMessage(CFTypeRef *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  WebKit::WebAutomationSession::didReceiveMessage(this - 2, a2, a3);
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<unsigned long long,WTF::String,WTF::String>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::String,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::String,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unsigned __int8 v17;
  uint64_t v18;
  char v19;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v12 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v5, v4);
        v11 = (WTF::StringImpl *)*a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v11 = 0;
      }
    }
LABEL_17:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (!result)
      goto LABEL_18;
LABEL_21:
    if (v12)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)result
                                                                                                  + 16))(result, v11);
    goto LABEL_18;
  }
  v8 = (uint64_t *)(v5 + v6);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v12 = v4;
    v11 = 0;
    goto LABEL_17;
  }
  v9 = *v8;
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v16);
  if (!v17)
  {
LABEL_18:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return result;
  }
  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v18);
  if (v19)
  {
    if (v17)
    {
      v13 = v16;
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = v18;
      *(_BYTE *)(a2 + 24) = 1;
      return result;
    }
    __break(1u);
    goto LABEL_21;
  }
  *(_BYTE *)a2 = 0;
  v14 = v17;
  *(_BYTE *)(a2 + 24) = 0;
  if (v14)
  {
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<unsigned long long,std::optional<WebCore::ShareableBitmapHandle>,WTF::String>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<unsigned long long,std::optional<WebCore::ShareableBitmapHandle>,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 88))
  {
    v4 = *(_QWORD *)a1;
    v5 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v6 = *((_QWORD *)a1 + 3);
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned long long,std::optional<WebCore::ShareableBitmapHandle>,WTF::String>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE v15[72];
  char v16;
  uint64_t v17;
  char v18;

  v4 = *((_QWORD *)a1 + 1);
  v5 = *(_QWORD *)a1;
  v6 = ((*((_QWORD *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v12 = 0;
    v11 = 0;
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v14 = *((_QWORD *)a1 + 3);
    if (v14)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v5, v4);
        v11 = *(_QWORD *)a1;
        v12 = *((_QWORD *)a1 + 1);
      }
      else
      {
        v12 = 0;
        v11 = 0;
      }
    }
LABEL_17:
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v10 = (_QWORD *)*((_QWORD *)a1 + 3);
    if (!v10)
      goto LABEL_18;
LABEL_21:
    if (v12)
      (*(void (**)(_QWORD *, uint64_t))(*v10 + 16))(v10, v11);
    goto LABEL_18;
  }
  v8 = (uint64_t *)(v5 + v6);
  *((_QWORD *)a1 + 2) = v8 + 1;
  if (!v5)
  {
    v12 = v4;
    v11 = 0;
    goto LABEL_17;
  }
  v9 = *v8;
  IPC::Decoder::decode<std::optional<WebCore::ShareableBitmapHandle>>(a1, v15);
  if (!v16)
  {
LABEL_18:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 88) = 0;
    return;
  }
  v10 = IPC::Decoder::decode<WTF::String>((uint64_t *)a1, &v17);
  v13 = v18;
  if (v18)
  {
    if (!v16)
    {
      __break(1u);
      goto LABEL_21;
    }
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 72) = 0;
    if (v15[64])
    {
      WebCore::ShareableBitmapHandle::ShareableBitmapHandle(a2 + 8, (uint64_t)v15);
      v13 = 1;
      *(_BYTE *)(a2 + 72) = 1;
      *(_QWORD *)(a2 + 80) = v17;
    }
    else
    {
      *(_QWORD *)(a2 + 80) = v17;
      v13 = 1;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 88) = v13;
  if (v16)
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v15);
}

uint64_t std::__optional_destruct_base<std::tuple<unsigned long long,std::optional<WebCore::ShareableBitmapHandle>,WTF::String>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 88))
  {
    v3 = *(WTF::StringImpl **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)(a1 + 8));
  }
  return a1;
}

WebKit::WebAutomationSessionProxy *WebKit::WebAutomationSessionProxy::WebAutomationSessionProxy(WebKit::WebAutomationSessionProxy *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WebKit::WebProcess *v6;
  WebKit::WebProcess *v8;
  WTF::SymbolImpl *v9;
  char v10;

  *(_QWORD *)this = off_1E34F4328;
  *((_QWORD *)this + 1) = 0;
  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *((_QWORD *)this + 2) = v3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::SymbolImpl::create(v9, v4);
  if (*(_DWORD *)v9 == 2)
    WTF::StringImpl::destroy(v9, v5);
  else
    *(_DWORD *)v9 -= 2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v8);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v10 = -101;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)v6 + 5, &v10, (uint64_t)this, (unsigned int **)&v9);
  return this;
}

void WebKit::WebAutomationSessionProxy::~WebAutomationSessionProxy(WebKit::WebAutomationSessionProxy *this, void *a2)
{
  uint64_t v3;
  WebKit::WebProcess *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebKit::WebProcess *v13;

  *(_QWORD *)this = off_1E34F4328;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v3, a2);
  }
  {
    v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v4 = WebKit::WebProcess::WebProcess(v13);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v4;
  }
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)v4 + 5, 0x9Bu);
  v6 = *((_QWORD *)this + 5);
  if (v6)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v6, v5);
  v7 = *((_QWORD *)this + 4);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = v7 + 16;
      do
      {
        if (*(_QWORD *)(v9 - 8) != -1)
        {
          v10 = *(WTF **)v9;
          if (*(_QWORD *)v9)
          {
            *(_QWORD *)v9 = 0;
            *(_DWORD *)(v9 + 8) = 0;
            WTF::fastFree(v10, v5);
          }
        }
        v9 += 32;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), v5);
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v5);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebAutomationSessionProxy::~WebAutomationSessionProxy(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebAutomationSessionProxy::scriptObject(WebKit::WebAutomationSessionProxy *this, OpaqueJSContext *a2)
{
  unint64_t v4;
  WTF::StringImpl *v5;
  JSC::VM *v6;
  char v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  OpaqueJSContext *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int16 *v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  _WORD *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  JSC::VM *v56;
  OpaqueJSContext *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  char v70;
  int v71;
  uint64_t v72;
  JSC::VM *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  int v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unsigned __int8 *v99;
  int v100;
  int v101;
  const WTF::StringImpl *v102;
  const unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  unsigned __int8 *v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  JSC::VM *v113;
  OpaqueJSContext *v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  char v125[8];
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  OpaqueJSContext *v129;
  OpaqueJSContext *v130;
  _QWORD v131[2];
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19AEAA9D8](v125, *((_QWORD *)a2 + 7));
  v4 = *((_QWORD *)this + 3);
  *(_DWORD *)v4 += 2;
  if (!JSC::JSObject::hasProperty())
  {
    v40 = 0;
    goto LABEL_126;
  }
  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v128 = 0xFFFFFFFF00000000;
  LOBYTE(v132) = 0;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v8 = (char *)a2 + 6;
  v7 = *((_BYTE *)a2 + 6);
  v130 = 0;
  memset(v131, 0, 13);
  v129 = a2;
  v9 = v4 >> 4;
  v10 = (uint64_t)a2;
  if ((v7 & 8) != 0)
  {
LABEL_34:
    v32 = *(_DWORD *)(v4 + 16);
    if ((v32 & 0x20) == 0)
    {
      v33 = *(_BYTE **)(v4 + 8);
      v34 = *(unsigned int *)(v4 + 4);
      if ((v32 & 4) != 0)
      {
        if (!(_DWORD)v34)
          goto LABEL_139;
        v35 = *v33 - 48;
        if (v35 > 9 || v34 >= 2 && *v33 == 48)
          goto LABEL_139;
        v107 = v34 - 1;
        v108 = v33 + 1;
        while (v107)
        {
          if (v35 <= 0x19999999)
          {
            v109 = *v108 - 48;
            if (v109 <= 9)
            {
              v39 = __CFADD__(v109, 10 * v35);
              v35 = v109 + 10 * v35;
              --v107;
              ++v108;
              if (!v39)
                continue;
            }
          }
          goto LABEL_139;
        }
      }
      else
      {
        if (!(_DWORD)v34)
          goto LABEL_139;
        v35 = *(unsigned __int16 *)v33 - 48;
        if (v35 > 9 || v34 >= 2 && *(_WORD *)v33 == 48)
          goto LABEL_139;
        v36 = (unsigned __int16 *)(v33 + 2);
        v37 = v34 - 1;
        while (v37)
        {
          if (v35 <= 0x19999999)
          {
            v38 = *v36 - 48;
            if (v38 <= 9)
            {
              v39 = __CFADD__(v38, 10 * v35);
              v35 = v38 + 10 * v35;
              ++v36;
              --v37;
              if (!v39)
                continue;
            }
          }
          goto LABEL_139;
        }
      }
      if (v35 != -1)
      {
        v112 = v35;
        v113 = (JSC::VM *)*((_QWORD *)a2 + 7);
        v114 = a2;
        while (1)
        {
          v115 = 16 * (*(_DWORD *)v114 & 0xFFFFFFFE);
          v116 = (*(uint64_t (**)(OpaqueJSContext *, OpaqueJSContext *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v115 + 0x4C) + 0x70))(v114, a2, v112, &v126);
          v117 = v116;
          if (*((_DWORD *)v113 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v113);
            if (((hasExceptionsAfterHandlingTraps | v117) & 1) != 0)
              goto LABEL_275;
          }
          else if ((v116 & 1) != 0)
          {
            goto LABEL_113;
          }
          v118 = BYTE2(v131[1]);
          if (BYTE2(v131[1]) == 3)
          {
            if (BYTE4(v131[1]))
              goto LABEL_66;
            v119 = *((unsigned __int8 *)v114 + 5);
            if (v119 == 61)
            {
LABEL_252:
              v120 = *(_QWORD *)(16 * (*(_DWORD *)v114 & 0xFFFFFFFE) + 0x30);
              if (!v120)
                v120 = *((_QWORD *)v114 + 2);
              goto LABEL_254;
            }
          }
          else
          {
            v119 = *((unsigned __int8 *)v114 + 5);
            if (v119 == 61)
            {
              if (BYTE2(v131[1]) == 1)
                goto LABEL_66;
              goto LABEL_250;
            }
          }
          if ((v119 - 39) <= 0xA)
          {
            if (JSC::JSArrayBufferView::length(v114) <= v112)
              goto LABEL_66;
            v118 = BYTE2(v131[1]);
          }
LABEL_250:
          if ((*(_WORD *)(v115 + 12) & 0x800) == 0 || v118 == 3)
            goto LABEL_252;
          if ((*(_WORD *)(16 * (*(_DWORD *)v114 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v120 = (*(uint64_t (**)(OpaqueJSContext *, OpaqueJSContext *))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v114 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0xB0))(v114, a2);
          }
          else
          {
            v120 = *(_QWORD *)(16 * (*(_DWORD *)v114 & 0xFFFFFFFE) + 0x30);
            if (!v120)
              v120 = *((_QWORD *)v114 + 2);
          }
          if (*((_DWORD *)v113 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v113) & 1) != 0)
            goto LABEL_66;
LABEL_254:
          if ((v120 & 0xFFFE000000000002) != 0)
            goto LABEL_66;
          v48 = 0;
          v114 = (OpaqueJSContext *)v120;
          if (*(unsigned __int8 *)(v120 + 5) <= 0x16u)
            goto LABEL_114;
        }
      }
    }
LABEL_139:
    v70 = 0;
    goto LABEL_140;
  }
  v11 = a2;
  do
  {
    v12 = *(_DWORD *)v11 & 0xFFFFFFFE;
    v13 = 16 * v12;
    if (!(_DWORD)v9)
      goto LABEL_26;
    if ((v9 & ~*(_DWORD *)(16 * v12 + 0x20)) != 0)
      goto LABEL_26;
    v14 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v13, v6);
    if (!v14 || !*(_DWORD *)(v14 + 24))
      goto LABEL_26;
    v15 = *(_QWORD *)(v14 + 16);
    v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v17 = *(unsigned int *)(v14 + 8);
    v18 = *(_DWORD *)(v4 + 16);
    if ((v15 & 1) != 0)
    {
      if ((v18 & 0x20) != 0)
        v18 = *(_DWORD *)(v4 + 32);
      v25 = *(_DWORD *)(v14 + 12);
      v26 = (v18 >> 8) & *(_QWORD *)&v25;
      v27 = *(unsigned __int8 *)(v16 + v26);
      if (!*(_BYTE *)(v16 + v26))
        goto LABEL_26;
      v28 = v16 + v17;
      v29 = 1;
      while (1)
      {
        v30 = *(_QWORD *)(v28 + 8 * (v27 - 1));
        if (v4 == (v30 & 0xFFFFFFFFFFFFLL))
          break;
        v26 = ((_DWORD)v26 + v29) & v25;
        v27 = *(unsigned __int8 *)(v16 + v26);
        ++v29;
        if (!*(_BYTE *)(v16 + v26))
          goto LABEL_26;
      }
      v31 = (v30 >> 16) & 0xFF00000000 | HIBYTE(v30);
    }
    else
    {
      if ((v18 & 0x20) != 0)
        v18 = *(_DWORD *)(v4 + 32);
      v19 = *(_DWORD *)(v14 + 12);
      v20 = v19 & (v18 >> 8);
      v21 = *(_DWORD *)(v16 + 4 * v20);
      if (!v21)
        goto LABEL_26;
      v22 = v16 + 4 * v17;
      v23 = 1;
      while (1)
      {
        v24 = (v21 - 1);
        if (*(_QWORD *)(v22 + 16 * v24) == v4)
          break;
        v20 = (v20 + v23) & v19;
        v21 = *(_DWORD *)(v16 + 4 * v20);
        ++v23;
        if (!v21)
          goto LABEL_26;
      }
      v31 = *(unsigned int *)(v22 + 16 * v24 + 8) | ((unint64_t)*(unsigned __int8 *)(v22 + 16 * v24 + 12) << 32);
    }
    if ((_DWORD)v31 != -1)
    {
      v52 = HIDWORD(v31);
      if ((int)v31 > 63)
      {
        v53 = *((_QWORD *)v11 + 1) - 8;
        v54 = 0x3F00000000 - (v31 << 32);
      }
      else
      {
        v53 = (uint64_t)v11 + 16;
        v54 = v31 << 32;
      }
      v65 = *(_QWORD *)(v53 + (v54 >> 29));
      if ((v65 & 0xFFFE000000000002) == 0)
      {
        v66 = *(unsigned __int8 *)(v65 + 5);
        if (v66 == 6)
        {
          v71 = *(_DWORD *)(v13 + 16) & 3;
          v72 = *(_QWORD *)(v65 + 16);
          if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0x4C))
          {
            v126 = *(_QWORD *)(v65 + 8);
            v127 = v72;
            LODWORD(v128) = HIDWORD(v31);
            v130 = v11;
            goto LABEL_133;
          }
          v105 = *(_QWORD *)(v65 + 24);
          v104 = *(_QWORD *)(v65 + 32);
          v126 = *(_QWORD *)(v65 + 8);
          v127 = v72;
          LODWORD(v128) = HIDWORD(v31);
          v130 = v11;
LABEL_220:
          BYTE1(v131[1]) = 3;
          v48 = 1;
          if (v71 != 2)
            LOBYTE(v131[1]) = 1;
          BYTE3(v131[1]) = 1;
          v134 = v105;
          v135 = v104;
          goto LABEL_114;
        }
        if (v66 == 5)
        {
LABEL_112:
          JSC::JSObject::fillGetterPropertySlot();
LABEL_113:
          v48 = 1;
          goto LABEL_114;
        }
      }
      v126 = v65;
      v130 = v11;
      goto LABEL_109;
    }
LABEL_26:
    if ((*v8 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      goto LABEL_113;
    v10 = *(_QWORD *)(v13 + 48);
    if (!v10)
      v10 = *((_QWORD *)v11 + 2);
    if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) < 0x17u)
    {
      if (!v4)
        goto LABEL_66;
      v41 = *(_DWORD *)(v4 + 16);
      if ((v41 & 0x20) != 0)
        goto LABEL_66;
      v42 = *(_WORD **)(v4 + 8);
      v43 = *(unsigned int *)(v4 + 4);
      if ((v41 & 4) == 0)
      {
        if ((_DWORD)v43)
        {
          v44 = (unsigned __int16)*v42 - 48;
          if (v44 <= 9 && (v43 < 2 || *v42 != 48))
          {
            v45 = v42 + 1;
            v46 = v43 - 1;
            while (v46)
            {
              if (v44 > 0x19999999)
                goto LABEL_66;
              v47 = *v45 - 48;
              if (v47 > 9)
                goto LABEL_66;
              v48 = 0;
              v39 = __CFADD__(v47, 10 * v44);
              v44 = v47 + 10 * v44;
              ++v45;
              --v46;
              if (v39)
                goto LABEL_114;
            }
            goto LABEL_76;
          }
        }
        goto LABEL_66;
      }
      if (!(_DWORD)v43)
        goto LABEL_66;
      v44 = *(unsigned __int8 *)v42 - 48;
      if (v44 > 9 || v43 >= 2 && *(_BYTE *)v42 == 48)
        goto LABEL_66;
      v49 = (unsigned __int8 *)v42 + 1;
      v50 = v43 - 1;
      while (v50)
      {
        if (v44 > 0x19999999)
          goto LABEL_66;
        v51 = *v49 - 48;
        if (v51 > 9)
          goto LABEL_66;
        v48 = 0;
        v39 = __CFADD__(v51, 10 * v44);
        v44 = v51 + 10 * v44;
        ++v49;
        --v50;
        if (v39)
          goto LABEL_114;
      }
LABEL_76:
      if (v44 == -1)
      {
LABEL_66:
        v48 = 0;
        goto LABEL_114;
      }
      v55 = v44;
      v56 = (JSC::VM *)*((_QWORD *)a2 + 7);
      v57 = a2;
      while (2)
      {
        v58 = 16 * (*(_DWORD *)v57 & 0xFFFFFFFE);
        v59 = (*(uint64_t (**)(OpaqueJSContext *, OpaqueJSContext *, unint64_t, uint64_t *))(16 * *(unsigned int *)(v58 + 0x4C) + 0x70))(v57, a2, v55, &v126);
        v60 = v59;
        if (*((_DWORD *)v56 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v56);
          if (((hasExceptionsAfterHandlingTraps | v60) & 1) != 0)
          {
LABEL_275:
            v48 = hasExceptionsAfterHandlingTraps ^ 1;
            goto LABEL_114;
          }
        }
        else if ((v59 & 1) != 0)
        {
          goto LABEL_113;
        }
        v61 = BYTE2(v131[1]);
        if (BYTE2(v131[1]) == 3)
        {
          if (BYTE4(v131[1]))
            goto LABEL_66;
          v62 = *((unsigned __int8 *)v57 + 5);
          if (v62 == 61)
          {
LABEL_92:
            v63 = *(_QWORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x30);
            if (!v63)
              v63 = *((_QWORD *)v57 + 2);
            goto LABEL_94;
          }
LABEL_87:
          if ((v62 - 39) <= 0xA)
          {
            if (JSC::JSArrayBufferView::length(v57) <= v55)
              goto LABEL_66;
            v61 = BYTE2(v131[1]);
          }
        }
        else
        {
          v62 = *((unsigned __int8 *)v57 + 5);
          if (v62 != 61)
            goto LABEL_87;
          if (BYTE2(v131[1]) == 1)
            goto LABEL_66;
        }
        if ((*(_WORD *)(v58 + 12) & 0x800) == 0 || v61 == 3)
          goto LABEL_92;
        if ((*(_WORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v63 = (*(uint64_t (**)(OpaqueJSContext *, OpaqueJSContext *))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v57, a2);
        }
        else
        {
          v63 = *(_QWORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x30);
          if (!v63)
            v63 = *((_QWORD *)v57 + 2);
        }
        if (*((_DWORD *)v56 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v56) & 1) != 0)
          goto LABEL_66;
LABEL_94:
        if ((v63 & 0xFFFE000000000002) != 0)
          goto LABEL_66;
        v48 = 0;
        v57 = (OpaqueJSContext *)v63;
        if (*(unsigned __int8 *)(v63 + 5) <= 0x16u)
          goto LABEL_114;
        continue;
      }
    }
    v8 = (_BYTE *)(v10 + 6);
    v11 = (OpaqueJSContext *)v10;
  }
  while ((*(_BYTE *)(v10 + 6) & 8) == 0);
  if (v4)
    goto LABEL_34;
  v70 = 1;
LABEL_140:
  v73 = (JSC::VM *)*((_QWORD *)a2 + 7);
  while (2)
  {
    v74 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v10 + 6) & 8) != 0)
    {
      v93 = (*(uint64_t (**)(uint64_t, OpaqueJSContext *, unint64_t, uint64_t *))(16
                                                                                               * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                                                               + 0x68))(v10, a2, v4, &v126);
      v94 = v93;
      if (*((_DWORD *)v73 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v73);
        if (((hasExceptionsAfterHandlingTraps | v94) & 1) != 0)
          goto LABEL_275;
      }
      else if ((v93 & 1) != 0)
      {
        goto LABEL_113;
      }
      if (BYTE2(v131[1]) == 3)
      {
        if (BYTE4(v131[1]))
          goto LABEL_66;
        v95 = *(unsigned __int8 *)(v10 + 5);
        if (v95 == 61)
          goto LABEL_166;
      }
      else
      {
        v95 = *(unsigned __int8 *)(v10 + 5);
        if (v95 == 61)
        {
          if (BYTE2(v131[1]) == 1)
            goto LABEL_66;
          goto LABEL_166;
        }
      }
      if ((v95 - 50) < 0xFFFFFFF5)
        v96 = 1;
      else
        v96 = v70;
      if ((v96 & 1) != 0)
        goto LABEL_166;
      v97 = *(_DWORD *)(v4 + 16);
      if ((v97 & 0x20) != 0)
        goto LABEL_166;
      v98 = *(unsigned int *)(v4 + 4);
      if (!(_DWORD)v98)
        goto LABEL_166;
      v99 = *(unsigned __int8 **)(v4 + 8);
      if ((v97 & 4) != 0)
      {
        v100 = *v99;
        if ((_DWORD)v98 != 1)
        {
          if (v100 == 45)
          {
            v101 = v99[1];
LABEL_203:
            if ((v101 - 48) >= 0xA)
            {
              if ((_DWORD)v98 != 9 || v101 != 73)
                goto LABEL_166;
            }
            else if ((_DWORD)v98 == 2)
            {
              goto LABEL_66;
            }
LABEL_214:
            v124 = v124 & 0xFFFFFF0000000000 | v98 | ((unint64_t)((v97 >> 2) & 1) << 32);
            JSC::jsToNumber();
            v102 = (const WTF::StringImpl *)WTF::numberToString();
            if ((WTF::equal((WTF *)v4, v102, v103) & 1) != 0)
              goto LABEL_66;
            goto LABEL_166;
          }
LABEL_206:
          if ((v100 - 48) >= 0xA && ((_DWORD)v98 != 8 || v100 != 73) && ((_DWORD)v98 != 3 || v100 != 78))
            goto LABEL_166;
          goto LABEL_214;
        }
      }
      else
      {
        v100 = *(unsigned __int16 *)v99;
        if ((_DWORD)v98 != 1)
        {
          if (v100 == 45)
          {
            v101 = *((unsigned __int16 *)v99 + 1);
            goto LABEL_203;
          }
          goto LABEL_206;
        }
      }
      if ((v100 - 48) < 0xA)
        goto LABEL_66;
      goto LABEL_166;
    }
    if (!(_DWORD)v9)
      goto LABEL_164;
    if ((v9 & ~*(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x20)) != 0)
      goto LABEL_164;
    v75 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)), v73);
    if (!v75 || !*(_DWORD *)(v75 + 24))
      goto LABEL_164;
    v76 = *(_QWORD *)(v75 + 16);
    v77 = v76 & 0xFFFFFFFFFFFFFFFELL;
    v78 = *(unsigned int *)(v75 + 8);
    v79 = *(_DWORD *)(v4 + 16);
    if ((v76 & 1) == 0)
    {
      if ((v79 & 0x20) != 0)
        v79 = *(_DWORD *)(v4 + 32);
      v80 = *(_DWORD *)(v75 + 12);
      v81 = v80 & (v79 >> 8);
      v82 = *(_DWORD *)(v77 + 4 * v81);
      if (v82)
      {
        v83 = v77 + 4 * v78;
        v84 = 1;
        while (1)
        {
          v85 = (v82 - 1);
          if (*(_QWORD *)(v83 + 16 * v85) == v4)
            break;
          v81 = (v81 + v84) & v80;
          v82 = *(_DWORD *)(v77 + 4 * v81);
          ++v84;
          if (!v82)
            goto LABEL_164;
        }
        v31 = *(unsigned int *)(v83 + 16 * v85 + 8) | ((unint64_t)*(unsigned __int8 *)(v83 + 16 * v85 + 12) << 32);
        goto LABEL_163;
      }
      goto LABEL_164;
    }
    if ((v79 & 0x20) != 0)
      v79 = *(_DWORD *)(v4 + 32);
    v86 = *(_DWORD *)(v75 + 12);
    v87 = (v79 >> 8) & *(_QWORD *)&v86;
    v88 = *(unsigned __int8 *)(v77 + v87);
    if (!*(_BYTE *)(v77 + v87))
      goto LABEL_164;
    v89 = v77 + v78;
    v90 = 1;
    while (1)
    {
      v91 = *(_QWORD *)(v89 + 8 * (v88 - 1));
      if (v4 == (v91 & 0xFFFFFFFFFFFFLL))
        break;
      v87 = ((_DWORD)v87 + v90) & v86;
      v88 = *(unsigned __int8 *)(v77 + v87);
      ++v90;
      if (!*(_BYTE *)(v77 + v87))
        goto LABEL_164;
    }
    v31 = (v91 >> 16) & 0xFF00000000 | HIBYTE(v91);
LABEL_163:
    if ((_DWORD)v31 == -1)
    {
LABEL_164:
      if ((*(_BYTE *)(v10 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        goto LABEL_113;
LABEL_166:
      if ((*(_WORD *)(v74 + 12) & 0x800) != 0 && BYTE2(v131[1]) != 3)
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v92 = (*(uint64_t (**)(uint64_t, OpaqueJSContext *))(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                        + 0x4C)
                                                                      + 0xB0))(v10, a2);
        }
        else
        {
          v92 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
          if (!v92)
            v92 = *(_QWORD *)(v10 + 16);
        }
        if (*((_DWORD *)v73 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v73) & 1) != 0)
          goto LABEL_66;
      }
      else
      {
        v92 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
        if (!v92)
          v92 = *(_QWORD *)(v10 + 16);
      }
      if ((v92 & 0xFFFE000000000002) != 0)
        goto LABEL_66;
      v48 = 0;
      v10 = v92;
      if (*(unsigned __int8 *)(v92 + 5) <= 0x16u)
        goto LABEL_114;
      continue;
    }
    break;
  }
  v52 = HIDWORD(v31);
  if ((int)v31 > 63)
  {
    v110 = *(_QWORD *)(v10 + 8) - 8;
    v111 = 0x3F00000000 - (v31 << 32);
  }
  else
  {
    v110 = v10 + 16;
    v111 = v31 << 32;
  }
  v121 = *(_QWORD *)(v110 + (v111 >> 29));
  if ((v121 & 0xFFFE000000000002) == 0)
  {
    v122 = *(unsigned __int8 *)(v121 + 5);
    if (v122 != 6)
    {
      if (v122 != 5)
        goto LABEL_268;
      goto LABEL_112;
    }
    v71 = *(_DWORD *)(v74 + 16) & 3;
    v123 = *(_QWORD *)(v121 + 16);
    if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0x4C))
    {
      v126 = *(_QWORD *)(v121 + 8);
      v127 = v123;
      LODWORD(v128) = HIDWORD(v31);
      v130 = (OpaqueJSContext *)v10;
LABEL_133:
      v48 = 1;
      BYTE1(v131[1]) = 3;
      if (v71 != 2)
        LOBYTE(v131[1]) = 1;
      goto LABEL_114;
    }
    v105 = *(_QWORD *)(v121 + 24);
    v104 = *(_QWORD *)(v121 + 32);
    v126 = *(_QWORD *)(v121 + 8);
    v127 = v123;
    LODWORD(v128) = HIDWORD(v31);
    v130 = (OpaqueJSContext *)v10;
    goto LABEL_220;
  }
LABEL_268:
  v126 = v121;
  v130 = (OpaqueJSContext *)v10;
LABEL_109:
  v128 = __PAIR64__(v31, v52);
  v48 = 1;
  LOWORD(v131[1]) = 257;
LABEL_114:
  if (*((_DWORD *)v6 + 20))
  {
    v106 = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
    v40 = 10;
    if ((v106 & 1) != 0 || ((v48 ^ 1) & 1) != 0)
      goto LABEL_123;
LABEL_116:
    if (BYTE1(v131[1]) == 2)
    {
      v67 = JSC::PropertySlot::functionGetter();
    }
    else
    {
      if (BYTE1(v131[1]) == 1)
      {
        v40 = v126;
        goto LABEL_123;
      }
      v67 = JSC::PropertySlot::customGetter();
    }
    v40 = v67;
    goto LABEL_123;
  }
  if (v48)
    goto LABEL_116;
  v40 = 10;
LABEL_123:
  if (v133)
  {
    v68 = *(_DWORD *)(v132 + 4);
    if (!v68)
    {
      __break(0xC471u);
      JUMPOUT(0x197697BC0);
    }
    *(_DWORD *)(v132 + 4) = v68 - 1;
  }
LABEL_126:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v5);
  else
    *(_DWORD *)v4 -= 2;
  MEMORY[0x19AEAA9E4](v125);
  return v40;
}

JSValueRef WebKit::evaluate(JSContextRef ctx, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSValueRef *exception, const OpaqueJSValue **a7)
{
  OpaqueJSString *v9;
  JSValueRef v10;

  if (a4 != (OpaqueJSValue *)1)
    return JSValueMakeUndefined(ctx);
  v9 = JSValueToStringCopy(ctx, *a5, exception);
  v10 = JSEvaluateScript(ctx, v9, 0, 0, 0, exception);
  if (v9)
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)v9);
  return v10;
}

JSValueRef WebKit::createUUID(WebKit *this, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, unint64_t a5, const OpaqueJSValue *const *a6, const OpaqueJSValue **a7)
{
  const WTF::String *v8;
  WTF::StringImpl *v9;
  JSValueRef v10;
  unsigned int *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSStringRef string;

  WTF::createVersion4UUIDString(this);
  WTF::String::convertToASCIIUppercase((WTF::String *)&v15);
  OpaqueJSString::tryCreate((OpaqueJSString *)&v16, v8);
  v10 = JSValueMakeString(this, string);
  v11 = (unsigned int *)string;
  string = 0;
  if (v11)
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v11);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v10;
}

JSValueRef WebKit::isValidNodeIdentifier(JSContextRef ctx, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSValueRef *exception, const OpaqueJSValue **a7)
{
  OpaqueJSString *v8;
  const WTF::String *v9;
  BOOL isValidNodeHandle;
  WTF::StringImpl *v11;
  JSValueRef Boolean;
  WebKit *v14;

  if (a4 == (OpaqueJSValue *)1)
  {
    v8 = JSValueToStringCopy(ctx, *a5, exception);
    OpaqueJSString::string(v8);
    isValidNodeHandle = WebKit::isValidNodeHandle(v14, v9);
    Boolean = JSValueMakeBoolean(ctx, isValidNodeHandle);
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v11);
        if (!v8)
          return Boolean;
        goto LABEL_6;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (!v8)
      return Boolean;
LABEL_6:
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)v8);
    return Boolean;
  }
  return JSValueMakeUndefined(ctx);
}

JSObjectRef WebKit::WebAutomationSessionProxy::elementForNodeHandle(WebKit::WebAutomationSessionProxy *this, WebKit::WebFrame *a2, const WTF::String *a3)
{
  OpaqueJSContext *v5;
  JSObjectRef result;
  const WTF::String *v7;
  OpaqueJSValue *v8;
  const OpaqueJSValue *v9;
  unsigned int *v10;
  const WTF::String *v11;
  OpaqueJSValue *Property;
  unsigned int *v13;
  WTF::StringImpl *v14;
  const OpaqueJSValue *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  JSStringRef string;
  JSValueRef arguments[2];

  arguments[1] = *(JSValueRef *)MEMORY[0x1E0C80C00];
  v5 = (OpaqueJSContext *)WebKit::WebFrame::jsContext(a2);
  result = (JSObjectRef)WebKit::WebAutomationSessionProxy::scriptObject(this, v5);
  if (result)
  {
    v8 = result;
    OpaqueJSString::tryCreate(a3, v7);
    v9 = JSValueMakeString(v5, string);
    v10 = (unsigned int *)string;
    string = 0;
    if (v10)
      WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v10);
    arguments[0] = v9;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    OpaqueJSString::tryCreate((OpaqueJSString *)&v17, v11);
    Property = JSObjectGetProperty(v5, v8, string, 0);
    v13 = (unsigned int *)string;
    string = 0;
    if (v13)
      WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v13);
    v15 = JSObjectCallAsFunction(v5, Property, v8, 1uLL, arguments, 0);
    v16 = v17;
    v17 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    result = JSValueToObject(v5, v15, 0);
    if (result)
    {
      if (*((unsigned __int8 *)result + 5) == 241)
        return (JSObjectRef)*((_QWORD *)result + 3);
      else
        return 0;
    }
  }
  return result;
}

uint64_t WebKit::WebAutomationSessionProxy::getAccessibilityObjectForNode(WebKit::WebAutomationSessionProxy *a1, WTF::StringImpl *a2, uint64_t a3, WebKit **a4, WTF::StringImpl **a5)
{
  WebKit::WebProcess *v9;
  uint64_t v10;
  const WTF::String *v11;
  uint64_t result;
  WebKit::WebFrame *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  JSObjectRef v19;
  unsigned __int8 v20;
  WebKit::WebProcess *v21;
  WebKit::WebProcess *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v23 = a2;
    v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v21);
    a2 = v23;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v24 = a2;
  v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v9 + 14, &v24);
  if (!v10)
  {
    v14 = 9;
LABEL_15:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v14, &v24);
    v18 = *a5;
    *a5 = v24;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    return 0;
  }
  if (*(_BYTE *)(a3 + 16))
  {
    {
      result = WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      result = (uint64_t)WebKit::WebProcess::WebProcess(v22);
      WebKit::WebProcess::singleton(void)::process = result;
      if (!*(_BYTE *)(a3 + 16))
      {
        __break(1u);
        return result;
      }
    }
    v13 = (WebKit::WebFrame *)WebKit::WebProcess::webFrame(result, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
    if (!v13)
      goto LABEL_14;
  }
  else
  {
    v13 = *(WebKit::WebFrame **)(v10 + 88);
    if (!v13)
    {
LABEL_14:
      v14 = 10;
      goto LABEL_15;
    }
  }
  v15 = *((_QWORD *)v13 + 3);
  if (!v15)
    goto LABEL_14;
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16 || *(_BYTE *)(v16 + 144) || !*(_QWORD *)(v16 + 288))
    goto LABEL_14;
  if (!WebKit::isValidNodeHandle(*a4, v11))
  {
    v14 = 12;
    goto LABEL_15;
  }
  v19 = WebKit::WebAutomationSessionProxy::elementForNodeHandle(a1, v13, (const WTF::String *)a4);
  if (!v19)
  {
    v14 = 11;
    goto LABEL_15;
  }
  v20 = atomic_load(MEMORY[0x1E0DCF730]);
  if ((v20 & 1) == 0)
    atomic_store(1u, MEMORY[0x1E0DCF730]);
  if (!WebCore::Document::axObjectCache(*(WebCore::Document **)(*((_QWORD *)v19 + 5) + 8))
    || (result = WebCore::AXObjectCache::getOrCreate()) == 0)
  {
    v14 = 5;
    goto LABEL_15;
  }
  return result;
}

BOOL WebKit::isValidNodeHandle(WebKit *this, const WTF::String *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  unint64_t v6;
  int v7;
  unsigned int v8;

  if (!this || *((_DWORD *)this + 1) != 41)
    return 0;
  v2 = *((_DWORD *)this + 4);
  v3 = *((_QWORD *)this + 1);
  if ((v2 & 4) != 0)
  {
    if (*(_BYTE *)v3 != 110 || *(_BYTE *)(v3 + 1) != 111 || *(_BYTE *)(v3 + 2) != 100)
      return 0;
    v4 = *(unsigned __int8 *)(v3 + 3);
  }
  else
  {
    if (*(_WORD *)v3 != 110 || *(_WORD *)(v3 + 2) != 111 || *(_WORD *)(v3 + 4) != 100)
      return 0;
    v4 = *(unsigned __int16 *)(v3 + 6);
  }
  if (v4 == 101)
  {
    v5 = 0;
    v6 = 4;
    while (1)
    {
      if (v6 <= 0x1C && ((1 << v6) & 0x10842010) != 0)
      {
        if ((v2 & 4) != 0)
          v7 = *(unsigned __int8 *)(v3 + v6);
        else
          v7 = *(unsigned __int16 *)(v3 + 2 * v6);
        if (v7 != 45)
          return v5;
      }
      else
      {
        if ((v2 & 4) != 0)
        {
          v8 = *(unsigned __int8 *)(v3 + v6);
          if (v8 < 0x30)
            return v5;
          if (v8 < 0x3A)
            goto LABEL_15;
          if (v8 < 0x41)
            return v5;
        }
        else
        {
          v8 = *(unsigned __int16 *)(v3 + 2 * v6);
          if (v8 - 48 < 0xA)
            goto LABEL_15;
          if (v8 <= 0x40)
            return v5;
        }
        if (v8 > 0x46)
          return v5;
      }
LABEL_15:
      v5 = v6++ > 0x27;
      if (v6 == 41)
        return v5;
    }
  }
  return 0;
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::didClearWindowObjectForFrame(WebKit::WebAutomationSessionProxy *this, WebKit::WebFrame *a2)
{
  return WebKit::WebAutomationSessionProxy::willDestroyGlobalObjectForFrame((uint64_t)this, *((_QWORD *)a2 + 10), *((_QWORD *)a2 + 11));
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::willDestroyGlobalObjectForFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  void *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WebKit::WebProcess *v33;
  uint64_t v34;
  WebKit::WebProcess *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *result;
  uint64_t v38;
  uint64_t v39[3];
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;

  v42 = a2;
  v43 = a3;
  v4 = (uint64_t *)(a1 + 40);
  if (!WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*(_QWORD *)(a1 + 40), &v42))goto LABEL_32;
  v5 = *v4;
  if (!*v4)
    goto LABEL_32;
  v6 = *(_DWORD *)(v5 - 8);
  LODWORD(v39[0]) = -1640531527;
  WORD2(v39[0]) = 0;
  BYTE6(v39[0]) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)v39, &v42);
  v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v39) & v6;
  v9 = (uint64_t *)(v5 + 24 * v8);
  v10 = *v9;
  v11 = v9[1];
  if (*v9 == v42 && v11 == v43)
  {
LABEL_14:
    v15 = *v4;
    if (!*v4)
    {
LABEL_19:
      if ((uint64_t *)v15 != v9)
      {
        *(_OWORD *)v9 = xmmword_1978CF7D0;
        v16 = v9[2];
        v9[2] = 0;
        if (v16)
          WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref((_DWORD *)(v16 + 16), v7);
        ++*(_DWORD *)(*v4 - 16);
        v17 = *v4;
        if (*v4)
          v18 = *(_DWORD *)(v17 - 12) - 1;
        else
          v18 = -1;
        *(_DWORD *)(v17 - 12) = v18;
        v19 = *v4;
        if (*v4)
        {
          v20 = 6 * *(_DWORD *)(v19 - 12);
          v21 = *(_DWORD *)(v19 - 4);
          if (v20 < v21 && v21 >= 9)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v4, v21 >> 1);
        }
      }
      goto LABEL_32;
    }
LABEL_18:
    v15 += 24 * *(unsigned int *)(v15 - 4);
    if ((uint64_t *)v15 == v9)
      goto LABEL_32;
    goto LABEL_19;
  }
  v13 = 1;
  while (v10 | v11)
  {
    v8 = (v8 + v13) & v6;
    v9 = (uint64_t *)(v5 + 24 * v8);
    v10 = *v9;
    v11 = v9[1];
    ++v13;
    if (*v9 == v42 && v11 == v43)
      goto LABEL_14;
  }
  v15 = *v4;
  if (*v4)
  {
    v9 = (uint64_t *)(v15 + 24 * *(unsigned int *)(v15 - 4));
    goto LABEL_18;
  }
LABEL_32:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v40);
  v23 = (uint64_t *)(a1 + 32);
  v24 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a1 + 32), &v42);
  v25 = v24;
  v26 = *(uint64_t **)(a1 + 32);
  if (v26)
    v26 += 4 * *((unsigned int *)v26 - 1);
  if (v26 != v24)
  {
    v27 = (WTF *)v24[2];
    v28 = *((unsigned int *)v24 + 7);
    v24[2] = 0;
    v24[3] = 0;
    if (*v23)
    {
      v29 = *v23 + 32 * *(unsigned int *)(*v23 - 4);
      if ((uint64_t *)v29 == v24)
        goto LABEL_42;
    }
    else
    {
      if (!v24)
      {
LABEL_42:
        if ((_DWORD)v28)
        {
          v30 = 8 * v28;
          v31 = (uint64_t *)v27;
          do
          {
            v32 = *v31;
            {
              v33 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
            }
            else
            {
              v38 = *v31;
              v35 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
              v33 = WebKit::WebProcess::WebProcess(v35);
              v32 = v38;
              WebKit::WebProcess::singleton(void)::process = (uint64_t)v33;
            }
            v34 = *((_QWORD *)v33 + 4);
            v39[0] = v32;
            v39[1] = (uint64_t)&v41;
            v39[2] = (uint64_t)&v40;
            IPC::Connection::send<Messages::WebAutomationSession::DidEvaluateJavaScriptFunction>(v34, v39);
            ++v31;
            v30 -= 8;
          }
          while (v30);
        }
        if (v27)
          WTF::fastFree(v27, v25);
        goto LABEL_51;
      }
      v29 = 0;
    }
    if ((uint64_t *)v29 != v24)
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v23, v24);
    goto LABEL_42;
  }
LABEL_51:
  v36 = v40;
  v40 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v25);
    else
      *(_DWORD *)v36 -= 2;
  }
  result = v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

char *IPC::Connection::send<Messages::WebAutomationSession::DidEvaluateJavaScriptFunction>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1543;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v19 = (IPC::Encoder *)v4;
  v5 = *a2;
  v6 = *(_QWORD *)(v4 + 544);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;
  v9 = *(_QWORD *)(v4 + 552);
  if (v9 < v7 + 8)
  {
    v16 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v8);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
    v18 = *(void **)(v4 + 528);
    if (v18 != (void *)(v4 + 16))
      munmap(v18, *(_QWORD *)(v4 + 552));
    *(_QWORD *)(v4 + 528) = v10;
    *(_QWORD *)(v4 + 552) = v17;
    v6 = *(_QWORD *)(v4 + 544);
  }
  else
  {
    v10 = *(char **)(v4 + 528);
  }
  bzero(&v10[v6], v7 - v6);
  *(_QWORD *)(v4 + 544) = v8;
  v11 = (_QWORD *)(*(_QWORD *)(v4 + 528) + v7);
  *(_QWORD *)(v4 + 536) = v11 + 1;
  *v11 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, (uint64_t *)a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, (uint64_t *)a2[2]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

unsigned int *WebKit::WebAutomationSessionProxy::evaluateJavaScriptFunction(uint64_t *a1, OpaqueJSString *a2, uint64_t a3, OpaqueJSString *a4, uint64_t a5, _BOOL4 a6, uint64_t a7, char a8, OpaqueJSString *a9)
{
  OpaqueJSString *v17;
  WebKit::WebProcess *v18;
  uint64_t v19;
  WebKit::WebProcess *v20;
  uint64_t v21;
  WebKit::WebProcess *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::LocalFrame *v26;
  WebCore::LocalFrame *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::LocalFrame *v30;
  WebCore::LocalDOMWindow *v31;
  uint64_t v32;
  WebCore::LocalFrame *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::LocalFrame *v36;
  WebCore::LocalFrame *v37;
  WebCore::LocalDOMWindow *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  WebCore::LocalFrame *v42;
  WebCore::LocalFrame *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  void *v50;
  unsigned int v51;
  OpaqueJSString **v52;
  OpaqueJSString *v53;
  OpaqueJSString *v54;
  OpaqueJSString **v55;
  int v56;
  OpaqueJSString *v57;
  uint64_t v58;
  int v59;
  WebKit::WebProcess *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unsigned int *result;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  OpaqueJSString *v68;
  OpaqueJSContext *v69;
  OpaqueJSValue *v70;
  uint64_t v71;
  const WTF::String *v72;
  const WTF::String *v73;
  OpaqueJSValue *v74;
  unsigned int *v75;
  uint64_t *v76;
  JSValueRef String;
  unsigned int *v78;
  JSObjectRef FunctionWithCallback;
  JSObjectRef v80;
  JSObjectRef v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  const WTF::String *v87;
  const OpaqueJSContext *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  _OWORD *v98;
  int v99;
  WTF *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  double v110;
  const WTF::String *v111;
  JSValueRef v112;
  uint64_t v113;
  OpaqueJSString *v114;
  uint64_t v115;
  JSObjectRef Array;
  OpaqueJSString *v117;
  uint64_t v118;
  const OpaqueJSValue *v119;
  unsigned int *v120;
  unsigned int v121;
  const JSValueRef *v122;
  void *v123;
  JSStringRef v124;
  uint64_t v125;
  const OpaqueJSValue *v126;
  double v128;
  const WTF::String *v129;
  OpaqueJSValue *Property;
  unsigned int *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  OpaqueJSValue *v134;
  WTF::StringImpl *v135;
  JSValueRef v136;
  unsigned int *v137;
  WTF::StringImpl *v138;
  const OpaqueJSValue *v139;
  const OpaqueJSContext *v140;
  OpaqueJSString *v141;
  WTF::StringImpl *v142;
  WebKit::WebProcess *v143;
  WebKit::WebProcess *v144;
  WebKit::WebProcess *v145;
  WebKit::WebProcess *v146;
  uint64_t v147;
  uint64_t *v148;
  char v149;
  _BOOL4 BOOLean;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152[2];
  JSStringRef script[2];
  _QWORD v154[8];
  JSValueRef value;
  JSValueRef exception;
  char v157;
  char v158;
  __int128 arguments;
  JSValueRef v160;
  JSValueRef Number;
  JSValueRef v162;
  JSValueRef v163;
  JSObjectRef v164;
  JSValueRef v165;
  uint64_t v166;

  v17 = a9;
  v166 = *MEMORY[0x1E0C80C00];
  {
    v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v143 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v18 = WebKit::WebProcess::WebProcess(v143);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v18;
  }
  script[0] = a2;
  v19 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v18 + 14, script);
  if (v19)
  {
    if (!*(_BYTE *)(a3 + 16))
    {
      v21 = *(_QWORD *)(v19 + 88);
      if (!v21)
      {
LABEL_59:
        {
          v60 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v144 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          v60 = WebKit::WebProcess::WebProcess(v144);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)v60;
        }
        v23 = *((_QWORD *)v60 + 4);
        *(_QWORD *)&arguments = 0;
        v24 = 10;
        goto LABEL_62;
      }
LABEL_13:
      v25 = *(_QWORD *)(v21 + 24);
      if (v25 && (v26 = *(WebCore::LocalFrame **)(v25 + 8)) != 0)
      {
        if (*((_BYTE *)v26 + 144))
          v27 = 0;
        else
          v27 = v26;
      }
      else
      {
        v27 = 0;
      }
      if (!WebCore::LocalFrame::window(v27))
        goto LABEL_59;
      v28 = *(_QWORD *)(v21 + 24);
      if (v28 && (v29 = *(_QWORD *)(v28 + 8)) != 0)
        v30 = *(_BYTE *)(v29 + 144) ? 0 : (WebCore::LocalFrame *)v29;
      else
        v30 = 0;
      v31 = (WebCore::LocalDOMWindow *)WebCore::LocalFrame::window(v30);
      if (!WebCore::LocalDOMWindow::frame(v31))
        goto LABEL_59;
      v32 = *(_QWORD *)(v21 + 24);
      v149 = a8;
      if (v32)
      {
        v33 = *(WebCore::LocalFrame **)(v32 + 8);
        if (*((_BYTE *)v33 + 144))
          v34 = 0;
        else
          v34 = *(_QWORD *)(v32 + 8);
        if (*(_QWORD *)(*(_QWORD *)(v34 + 128) + 8) == v34)
          goto LABEL_82;
      }
      else
      {
        if (!*(_QWORD *)(MEMORY[0x80] + 8))
          goto LABEL_82;
        v33 = 0;
      }
      if (!WebCore::LocalFrame::window(v33)
        || ((v35 = *(_QWORD *)(v21 + 24)) == 0 || (v36 = *(WebCore::LocalFrame **)(v35 + 8)) == 0
          ? (v37 = 0)
          : *((_BYTE *)v36 + 144)
          ? (v37 = 0)
          : (v37 = v36),
            (v38 = (WebCore::LocalDOMWindow *)WebCore::LocalFrame::window(v37), !WebCore::LocalDOMWindow::frame(v38))
         || (v40 = a1 + 5,
             v39 = a1[5],
             *(_OWORD *)script = *(_OWORD *)(v21 + 80),
             (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v39, script) & 1) != 0)))
      {
LABEL_82:
        v69 = (OpaqueJSContext *)WebKit::WebFrame::jsContext((WebKit::WebFrame *)v21);
        v70 = (OpaqueJSValue *)WebKit::WebAutomationSessionProxy::scriptObject((WebKit::WebAutomationSessionProxy *)a1, v69);
        BOOLean = a6;
        if (!v70)
        {
          v71 = a7;
          exception = 0;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          OpaqueJSString::tryCreate((OpaqueJSString *)&value, v72);
          v74 = JSEvaluateScript(v69, script[0], 0, 0, 0, &exception);
          v75 = (unsigned int *)script[0];
          script[0] = 0;
          if (v75)
            WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v75);
          v76 = a1;
          OpaqueJSString::tryCreate((OpaqueJSString *)(a1 + 2), v73);
          String = JSValueMakeString(v69, script[0]);
          v78 = (unsigned int *)script[0];
          script[0] = 0;
          if (v78)
            WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v78);
          FunctionWithCallback = JSObjectMakeFunctionWithCallback(v69, 0, (JSObjectCallAsFunctionCallback)WebKit::evaluate);
          v80 = JSObjectMakeFunctionWithCallback(v69, 0, (JSObjectCallAsFunctionCallback)WebKit::createUUID);
          v81 = JSObjectMakeFunctionWithCallback(v69, 0, (JSObjectCallAsFunctionCallback)WebKit::isValidNodeIdentifier);
          *(_QWORD *)&arguments = String;
          *((_QWORD *)&arguments + 1) = FunctionWithCallback;
          v160 = v80;
          Number = v81;
          v70 = JSObjectCallAsFunction(v69, v74, 0, 4uLL, (const JSValueRef *)&arguments, &exception);
          MEMORY[0x19AEAA9D8](v152, *((_QWORD *)v69 + 7));
          a1 = v76;
          v82 = (WTF::StringImpl *)v76[3];
          *(_DWORD *)v82 += 2;
          script[0] = 0;
          script[1] = v69;
          v154[0] = 0x1000000FFFFFFFFLL;
          v154[1] = 0;
          if (v70)
            v83 = (uint64_t)v70;
          else
            v83 = 2;
          (*(void (**)(OpaqueJSContext *, OpaqueJSContext *, WTF::StringImpl *, uint64_t, JSStringRef *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE) + 0x4C) + 0x48))(v69, v69, v82, v83, script);
          if (*(_DWORD *)v82 == 2)
            WTF::StringImpl::destroy(v82, v84);
          else
            *(_DWORD *)v82 -= 2;
          a7 = v71;
          MEMORY[0x19AEAA9E4](v152);
          v86 = value;
          value = 0;
          a6 = BOOLean;
          if (v86)
          {
            if (*(_DWORD *)v86 == 2)
              WTF::StringImpl::destroy(v86, v85);
            else
              *(_DWORD *)v86 -= 2;
          }
        }
        *(_OWORD *)v152 = *(_OWORD *)(v21 + 80);
        value = 0;
        v88 = (const OpaqueJSContext *)WebKit::WebFrame::jsContext((WebKit::WebFrame *)v21);
        if (!a6)
        {
LABEL_126:
          v110 = *(double *)&a7;
          OpaqueJSString::tryCreate(a4, v87);
          v112 = JSValueMakeString(v88, script[0]);
          result = (unsigned int *)script[0];
          script[0] = 0;
          if (result)
            result = WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(result);
          *(_QWORD *)&arguments = v112;
          v113 = *(unsigned int *)(a5 + 12);
          if (!(_DWORD)v113)
          {
            Array = JSObjectMakeArray(v88, 0, 0, &value);
            goto LABEL_148;
          }
          script[0] = (JSStringRef)v154;
          script[1] = (JSStringRef)8;
          if (v113 > 8)
          {
            if (v113 >> 29)
            {
              __break(0xC471u);
              return result;
            }
            v117 = (OpaqueJSString *)WTF::fastMalloc((WTF *)(8 * v113));
            LODWORD(script[1]) = v113;
            script[0] = v117;
            v118 = *(unsigned int *)(a5 + 12);
            if (!(_DWORD)v118)
            {
              v122 = (const JSValueRef *)v117;
              v121 = HIDWORD(script[1]);
LABEL_139:
              Array = JSObjectMakeArray(v88, v121, v122, &value);
              v124 = script[0];
              if (HIDWORD(script[1]))
              {
                v125 = 8 * HIDWORD(script[1]);
                do
                {
                  v126 = *(const OpaqueJSValue **)v124;
                  v124 = (JSStringRef)((char *)v124 + 8);
                  JSValueUnprotect(v88, v126);
                  v125 -= 8;
                }
                while (v125);
                v124 = script[0];
              }
              if (v154 != (_QWORD *)v124 && v124 != 0)
              {
                script[0] = 0;
                LODWORD(script[1]) = 0;
                WTF::fastFree(v124, v123);
              }
LABEL_148:
              *((_QWORD *)&arguments + 1) = Array;
              v160 = JSValueMakeBoolean(v88, BOOLean);
              Number = JSValueMakeNumber(v88, (double)(unint64_t)v152[0]);
              v162 = JSValueMakeNumber(v88, (double)(unint64_t)v152[1]);
              v163 = JSValueMakeNumber(v88, (double)(unint64_t)a9);
              v164 = JSObjectMakeFunctionWithCallback(v88, 0, (JSObjectCallAsFunctionCallback)WebKit::evaluateJavaScriptCallback);
              v128 = -1.0;
              if (v149)
                v128 = v110;
              v165 = JSValueMakeNumber(v88, v128);
              v157 = 0;
              v158 = 0;
              WebCore::UserGestureIndicator::UserGestureIndicator();
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              OpaqueJSString::tryCreate((OpaqueJSString *)&v151, v129);
              Property = JSObjectGetProperty(v88, v70, script[0], &value);
              v131 = (unsigned int *)script[0];
              script[0] = 0;
              if (v131)
                WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v131);
              JSObjectCallAsFunction(v88, Property, v70, 8uLL, (const JSValueRef *)&arguments, &value);
              v133 = v151;
              v151 = 0;
              if (v133)
              {
                if (*(_DWORD *)v133 == 2)
                  WTF::StringImpl::destroy(v133, v132);
                else
                  *(_DWORD *)v133 -= 2;
              }
              result = (unsigned int *)MEMORY[0x19AEB0CA8](&exception);
              if (value)
              {
                Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, script);
                if (JSValueIsObject(v88, value))
                {
                  v134 = value;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  OpaqueJSString::tryCreate();
                  v136 = JSObjectGetProperty(v88, v134, exception, 0);
                  v137 = (unsigned int *)exception;
                  exception = 0;
                  if (v137)
                    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v137);
                  v138 = v151;
                  v151 = 0;
                  if (v138)
                  {
                    if (*(_DWORD *)v138 == 2)
                      WTF::StringImpl::destroy(v138, v135);
                    else
                      *(_DWORD *)v138 -= 2;
                  }
                  v140 = v88;
                  v139 = v136;
                }
                else
                {
                  v139 = value;
                  v140 = v88;
                }
                v141 = JSValueToStringCopy(v140, v139, 0);
                OpaqueJSString::string(v141);
                exception = v151;
                v151 = 0;
                if (v141)
                  WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)v141);
                WebKit::WebAutomationSessionProxy::didEvaluateJavaScriptFunction((uint64_t)a1, (uint64_t)v152[0], (uint64_t)v152[1], (uint64_t)a9, (uint64_t)&exception, (uint64_t)script);
                v142 = exception;
                exception = 0;
                if (v142)
                {
                  if (*(_DWORD *)v142 == 2)
                    WTF::StringImpl::destroy(v142, v61);
                  else
                    *(_DWORD *)v142 -= 2;
                }
                result = (unsigned int *)script[0];
                script[0] = 0;
                if (result)
                  goto LABEL_67;
              }
              return result;
            }
            v114 = *(OpaqueJSString **)a5;
            v115 = *(_QWORD *)a5 + 8 * v118;
          }
          else
          {
            v114 = *(OpaqueJSString **)a5;
            v115 = *(_QWORD *)a5 + 8 * v113;
          }
          do
          {
            OpaqueJSString::tryCreate(v114, v111);
            v119 = JSValueMakeString(v88, exception);
            v120 = (unsigned int *)exception;
            exception = 0;
            if (v120)
              WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v120);
            JSValueProtect(v88, v119);
            v121 = HIDWORD(script[1]) + 1;
            *((_QWORD *)script[0] + HIDWORD(script[1])) = v119;
            HIDWORD(script[1]) = v121;
            v114 = (OpaqueJSString *)((char *)v114 + 8);
          }
          while (v114 != (OpaqueJSString *)v115);
          v122 = (const JSValueRef *)script[0];
          goto LABEL_139;
        }
        v89 = a7;
        v148 = a1;
        v92 = a1[4];
        v91 = a1 + 4;
        v90 = v92;
        if (v92
          || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v91, 0), (v90 = *v91) != 0))
        {
          v93 = *(_DWORD *)(v90 - 8);
        }
        else
        {
          v93 = 0;
        }
        LODWORD(script[0]) = -1640531527;
        WORD2(script[0]) = 0;
        BYTE6(script[0]) = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)script, v152);
        v94 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)script) & v93;
        v95 = v90 + 32 * v94;
        v97 = *(WTF::StringImpl **)v95;
        v96 = *(WTF::StringImpl **)(v95 + 8);
        if (*(_OWORD *)v95 != 0)
        {
          v98 = 0;
          v99 = 1;
          do
          {
            if (v97 == v152[0] && v96 == v152[1])
            {
              a7 = v89;
              goto LABEL_122;
            }
            if (v96 == (WTF::StringImpl *)-1)
              v98 = (_OWORD *)v95;
            v94 = ((_DWORD)v94 + v99) & v93;
            v95 = v90 + 32 * v94;
            v97 = *(WTF::StringImpl **)v95;
            v96 = *(WTF::StringImpl **)(v95 + 8);
            ++v99;
          }
          while (*(_OWORD *)v95 != 0);
          if (v98)
          {
            *v98 = 0u;
            v98[1] = 0u;
            --*(_DWORD *)(*v91 - 16);
            v95 = (uint64_t)v98;
          }
        }
        *(_OWORD *)v95 = *(_OWORD *)v152;
        v100 = *(WTF **)(v95 + 16);
        if (v100)
        {
          *(_QWORD *)(v95 + 16) = 0;
          *(_DWORD *)(v95 + 24) = 0;
          WTF::fastFree(v100, v87);
        }
        *(_QWORD *)(v95 + 16) = 0;
        *(_QWORD *)(v95 + 24) = 0;
        v101 = *v91;
        if (*v91)
          v102 = *(_DWORD *)(v101 - 12) + 1;
        else
          v102 = 1;
        a7 = v89;
        *(_DWORD *)(v101 - 12) = v102;
        v103 = *v91;
        if (*v91)
          v104 = *(_DWORD *)(v103 - 12);
        else
          v104 = 0;
        v105 = (*(_DWORD *)(v103 - 16) + v104);
        v106 = *(unsigned int *)(v103 - 4);
        if (v106 > 0x400)
        {
          if (v106 > 2 * v105)
            goto LABEL_122;
        }
        else if (3 * v106 > 4 * v105)
        {
LABEL_122:
          v107 = (_QWORD *)(v95 + 16);
          v108 = *(unsigned int *)(v95 + 28);
          a1 = v148;
          if ((_DWORD)v108 == *(_DWORD *)(v95 + 24))
          {
            v109 = (_QWORD *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v107, v108 + 1, (unint64_t)&a9);
            v108 = *(unsigned int *)(v95 + 28);
            *(_QWORD *)(*(_QWORD *)(v95 + 16) + 8 * v108) = *v109;
          }
          else
          {
            *(_QWORD *)(*v107 + 8 * v108) = a9;
          }
          *(_DWORD *)(v95 + 28) = v108 + 1;
          goto LABEL_126;
        }
        v95 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v91, v95);
        goto LABEL_122;
      }
      v147 = a7;
      *(_OWORD *)script = *(_OWORD *)(v21 + 80);
      v41 = *(_QWORD *)(v21 + 24);
      if (v41 && (v42 = *(WebCore::LocalFrame **)(v41 + 8)) != 0)
      {
        if (*((_BYTE *)v42 + 144))
          v43 = 0;
        else
          v43 = v42;
      }
      else
      {
        v43 = 0;
      }
      v44 = WebCore::LocalFrame::window(v43);
      arguments = *(_OWORD *)script;
      v45 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v45 = off_1E34F4360;
      *(_QWORD *)(v45 + 8) = a1;
      *(_OWORD *)(v45 + 16) = arguments;
      exception = (JSValueRef)v45;
      v46 = WTF::fastMalloc((WTF *)0x30);
      WebKit::WebAutomationDOMWindowObserver::WebAutomationDOMWindowObserver(v46, v44, (uint64_t *)&exception);
      v47 = a1;
      v48 = a1[5];
      if (v48
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1 + 5),
            (v48 = *v40) != 0))
      {
        v49 = *(_DWORD *)(v48 - 8);
      }
      else
      {
        v49 = 0;
      }
      LODWORD(v152[0]) = -1640531527;
      WORD2(v152[0]) = 0;
      BYTE6(v152[0]) = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)v152, script);
      v51 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v152) & v49;
      v52 = (OpaqueJSString **)(v48 + 24 * v51);
      v54 = *v52;
      v53 = v52[1];
      if (*(_OWORD *)v52 != 0)
      {
        v55 = 0;
        v56 = 1;
        while (v54 != script[0] || v53 != script[1])
        {
          if (v53 == (OpaqueJSString *)-1)
            v55 = v52;
          v51 = (v51 + v56) & v49;
          v52 = (OpaqueJSString **)(v48 + 24 * v51);
          v54 = *v52;
          v53 = v52[1];
          ++v56;
          if (*(_OWORD *)v52 == 0)
          {
            if (v55)
            {
              *v55 = 0;
              v55[1] = 0;
              v55[2] = 0;
              --*(_DWORD *)(*v40 - 16);
              v52 = v55;
            }
            goto LABEL_55;
          }
        }
        v68 = v52[2];
        v52[2] = (OpaqueJSString *)v46;
        a1 = v47;
        a7 = v147;
        if (v68)
          WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref((_DWORD *)v68 + 4, v50);
        goto LABEL_80;
      }
LABEL_55:
      *(_OWORD *)v52 = *(_OWORD *)script;
      v57 = v52[2];
      v52[2] = (OpaqueJSString *)v46;
      a1 = v47;
      if (v57)
        WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref((_DWORD *)v57 + 4, v50);
      v58 = *v40;
      a7 = v147;
      if (*v40)
        v59 = *(_DWORD *)(v58 - 12) + 1;
      else
        v59 = 1;
      *(_DWORD *)(v58 - 12) = v59;
      v64 = *v40;
      if (*v40)
        v65 = *(_DWORD *)(v64 - 12);
      else
        v65 = 0;
      v66 = (*(_DWORD *)(v64 - 16) + v65);
      v67 = *(unsigned int *)(v64 - 4);
      if (v67 > 0x400)
      {
        if (v67 > 2 * v66)
        {
LABEL_80:
          if (exception)
            (*(void (**)(JSValueRef))(*(_QWORD *)exception + 8))(exception);
          goto LABEL_82;
        }
      }
      else if (3 * v67 > 4 * v66)
      {
        goto LABEL_80;
      }
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v40);
      goto LABEL_80;
    }
    {
      v20 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      goto LABEL_7;
    }
    v145 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v20 = WebKit::WebProcess::WebProcess(v145);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v20;
    if (*(_BYTE *)(a3 + 16))
    {
LABEL_7:
      v21 = WebKit::WebProcess::webFrame((uint64_t)v20, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
      if (!v21)
        goto LABEL_59;
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_191;
  }
  {
LABEL_191:
    v146 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v22 = WebKit::WebProcess::WebProcess(v146);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v22;
    goto LABEL_11;
  }
  v22 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
LABEL_11:
  v23 = *((_QWORD *)v22 + 4);
  *(_QWORD *)&arguments = 0;
  v24 = 9;
LABEL_62:
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v24, v152);
  script[0] = v17;
  script[1] = (JSStringRef)&arguments;
  v154[0] = v152;
  IPC::Connection::send<Messages::WebAutomationSession::DidEvaluateJavaScriptFunction>(v23, (uint64_t *)script);
  v62 = v152[0];
  v152[0] = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v61);
    else
      *(_DWORD *)v62 -= 2;
  }
  result = (unsigned int *)arguments;
  *(_QWORD *)&arguments = 0;
  if (result)
  {
LABEL_67:
    if (*result == 2)
      return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v61);
    else
      *result -= 2;
  }
  return result;
}

JSValueRef WebKit::evaluateJavaScriptCallback(JSContextRef ctx, const OpaqueJSContext *a2, OpaqueJSValue *a3, OpaqueJSValue *a4, JSValueRef *a5, JSValueRef *exception, const OpaqueJSValue **a7)
{
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 IsString;
  const OpaqueJSValue *v16;
  OpaqueJSString *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  OpaqueJSValue *v21;
  WTF::StringImpl *v22;
  const OpaqueJSValue *Property;
  unsigned int *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  JSStringRef v27;
  OpaqueJSString *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  const OpaqueJSValue *v33;
  unsigned int *v34;
  OpaqueJSString *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WebKit::WebProcess *v39;
  WTF::StringImpl *v40;
  JSStringRef v41;
  WTF::StringImpl *v42;
  JSStringRef propertyName;

  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v39 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v10 = WebKit::WebProcess::WebProcess(v39);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
  }
  v11 = *((_QWORD *)v10 + 62);
  if (!v11)
    return JSValueMakeUndefined(ctx);
  v12 = (unint64_t)JSValueToNumber(ctx, *a5, exception);
  v13 = (unint64_t)JSValueToNumber(ctx, a5[1], exception);
  v14 = (unint64_t)JSValueToNumber(ctx, a5[2], exception);
  IsString = JSValueIsString(ctx, a5[3]);
  v16 = a5[3];
  if (!IsString)
  {
    if (!JSValueIsObject(ctx, v16))
    {
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &propertyName);
      v42 = 0;
      WebKit::WebAutomationSessionProxy::didEvaluateJavaScriptFunction(v11, v12, v13, v14, (uint64_t)&v42, (uint64_t)&propertyName);
LABEL_57:
      v37 = v42;
      v42 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v26);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = propertyName;
      propertyName = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v26);
        else
          *(_DWORD *)v38 -= 2;
      }
      return JSValueMakeUndefined(ctx);
    }
    v21 = JSValueToObject(ctx, a5[3], exception);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v42 = propertyName;
    OpaqueJSString::tryCreate();
    Property = JSObjectGetProperty(ctx, v21, propertyName, exception);
    v24 = (unsigned int *)propertyName;
    propertyName = 0;
    if (v24)
      WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v24);
    v25 = v42;
    v42 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v22);
      else
        *(_DWORD *)v25 -= 2;
    }
    v28 = JSValueToStringCopy(ctx, Property, 0);
    OpaqueJSString::string(v28);
    if (v28)
      WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)v28);
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(7, &v42);
    if (MEMORY[0x19AEABBCC](propertyName, "JavaScriptTimeout", 17))
    {
      v29 = 8;
    }
    else if (MEMORY[0x19AEABBCC](propertyName, "NodeNotFound", 12))
    {
      v29 = 11;
    }
    else if (MEMORY[0x19AEABBCC](propertyName, "InvalidNodeIdentifier", 21))
    {
      v29 = 12;
    }
    else if (MEMORY[0x19AEABBCC](propertyName, "InvalidElementState", 19))
    {
      v29 = 13;
    }
    else if (MEMORY[0x19AEABBCC](propertyName, "InvalidParameter", 16))
    {
      v29 = 17;
    }
    else if (MEMORY[0x19AEABBCC](propertyName, "InvalidSelector", 15))
    {
      v29 = 18;
    }
    else
    {
      if (!MEMORY[0x19AEABBCC](propertyName, "ElementNotInteractable", 22))
      {
LABEL_45:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        OpaqueJSString::tryCreate();
        v33 = JSObjectGetProperty(ctx, v21, v41, exception);
        v34 = (unsigned int *)v41;
        v41 = 0;
        if (v34)
          WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(v34);
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v32);
          else
            *(_DWORD *)v40 -= 2;
        }
        v35 = JSValueToStringCopy(ctx, v33, exception);
        OpaqueJSString::string(v35);
        if (v35)
          WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)v35);
        WebKit::WebAutomationSessionProxy::didEvaluateJavaScriptFunction(v11, v12, v13, v14, (uint64_t)&v41, (uint64_t)&v42);
        v36 = v41;
        v41 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v26);
          else
            *(_DWORD *)v36 -= 2;
        }
        goto LABEL_57;
      }
      v29 = 19;
    }
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(v29, &v41);
    v31 = v42;
    v42 = v41;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
    goto LABEL_45;
  }
  v17 = JSValueToStringCopy(ctx, v16, exception);
  OpaqueJSString::string(v17);
  v42 = 0;
  WebKit::WebAutomationSessionProxy::didEvaluateJavaScriptFunction(v11, v12, v13, v14, (uint64_t)&propertyName, (uint64_t)&v42);
  v19 = v42;
  v42 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  v27 = propertyName;
  propertyName = 0;
  if (!v27)
  {
LABEL_20:
    if (!v17)
      return JSValueMakeUndefined(ctx);
    goto LABEL_23;
  }
  if (*(_DWORD *)v27 != 2)
  {
    *(_DWORD *)v27 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v27, v18);
  if (v17)
LABEL_23:
    WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref((unsigned int *)v17);
  return JSValueMakeUndefined(ctx);
}

char *WebKit::WebAutomationSessionProxy::didEvaluateJavaScriptFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  WebKit::WebProcess *v21;
  uint64_t v22;
  WebKit::WebProcess *v24;
  uint64_t v25[3];
  _QWORD v26[2];

  v26[0] = a2;
  v26[1] = a3;
  v10 = (uint64_t *)(a1 + 32);
  v11 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a1 + 32), v26);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
    v14 = (uint64_t *)(v13 + 32 * *(unsigned int *)(v13 - 4));
  else
    v14 = 0;
  if (v14 == v11)
    goto LABEL_20;
  v15 = *((unsigned int *)v11 + 7);
  if ((_DWORD)v15)
  {
    v16 = (_QWORD *)v11[2];
    if (*v16 != a4)
    {
      v17 = 0;
      while (v15 - 1 != v17)
      {
        v18 = v16[++v17];
        if (v18 == a4)
          goto LABEL_11;
      }
      goto LABEL_20;
    }
    v17 = 0;
LABEL_11:
    memmove(&v16[v17], &v16[v17 + 1], 8 * v15 - (8 * v17 + 8));
    v19 = *((_DWORD *)v12 + 7) - 1;
    *((_DWORD *)v12 + 7) = v19;
    if (v19)
      goto LABEL_20;
    v13 = *v10;
  }
  if (v13)
  {
    v20 = (uint64_t *)(v13 + 32 * *(unsigned int *)(v13 - 4));
    if (v20 == v12)
      goto LABEL_20;
  }
  else
  {
    if (!v12)
      goto LABEL_20;
    v20 = 0;
  }
  if (v20 != v12)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(v10, v12);
LABEL_20:
  {
    v21 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v21 = WebKit::WebProcess::WebProcess(v24);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v21;
  }
  v22 = *((_QWORD *)v21 + 4);
  v25[0] = a4;
  v25[1] = a5;
  v25[2] = a6;
  return IPC::Connection::send<Messages::WebAutomationSession::DidEvaluateJavaScriptFunction>(v22, v25);
}

void WebKit::WebAutomationSessionProxy::resolveChildFrameWithOrdinal(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebKit::WebProcess *v22;
  WebKit::WebProcess *v23;
  __int128 v24;
  char v25;
  WTF::StringImpl *v26;
  char v27;
  __int128 v28;
  char v29;
  WTF::StringImpl *v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  __int128 v37;
  char v38;
  WTF::StringImpl *v39;
  char v40;
  __int128 v41;
  char v42;
  WTF::StringImpl *v43;
  char v44;
  __int128 v45;
  char v46;
  WTF::StringImpl *v47;
  char v48;
  WTF::StringImpl *v49;

  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v21 = a2;
    v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v22);
    a2 = v21;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v49 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v7 + 14, &v49);
  if (!v8)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v49);
    v14 = v49;
    if (v49)
      *(_DWORD *)v49 += 2;
    v47 = v14;
    v48 = 1;
    LOBYTE(v45) = 0;
    v46 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v47, &v45);
    if (v48 && v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v15);
      else
        *(_DWORD *)v47 -= 2;
    }
    goto LABEL_50;
  }
  v9 = v8;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v49);
  if (!*(_BYTE *)(a3 + 16))
  {
    v11 = *(_QWORD *)(v9 + 88);
    if (v11)
      goto LABEL_8;
LABEL_23:
    v14 = v49;
    if (v49)
      *(_DWORD *)v49 += 2;
    v43 = v14;
    v44 = 1;
    LOBYTE(v41) = 0;
    v42 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v43, &v41);
    if (!v44)
      goto LABEL_49;
    v16 = v43;
    v43 = 0;
    if (!v16)
      goto LABEL_49;
    goto LABEL_27;
  }
  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v10 = WebKit::WebProcess::WebProcess(v23);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v10;
    if (!*(_BYTE *)(a3 + 16))
    {
      __break(1u);
      return;
    }
  }
  v11 = WebKit::WebProcess::webFrame((uint64_t)v10, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  if (!v11)
    goto LABEL_23;
LABEL_8:
  v12 = *(_QWORD *)(v11 + 24);
  if (v12 && (v13 = *(_QWORD *)(v12 + 8)) != 0 && !*(_BYTE *)(v13 + 144))
  {
    v17 = WebCore::FrameTree::scopedChild((WebCore::FrameTree *)(v13 + 48));
    if (v17)
    {
      WebKit::WebFrame::fromCoreFrame(v17, &v32);
      v18 = v32;
      if (v32)
      {
        LOBYTE(v26) = 0;
        v27 = 0;
        v24 = *(_OWORD *)(v32 + 80);
        v25 = 1;
        WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v26, &v24);
        if (v27)
        {
          v20 = v26;
          v26 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v19);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        CFRelease(*(CFTypeRef *)(v18 + 8));
        v14 = v49;
        goto LABEL_49;
      }
      v14 = v49;
      if (v49)
        *(_DWORD *)v49 += 2;
      v30 = v14;
      v31 = 1;
      LOBYTE(v28) = 0;
      v29 = 0;
      WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v30, &v28);
      if (!v31)
        goto LABEL_49;
      v16 = v30;
      v30 = 0;
      if (!v16)
        goto LABEL_49;
    }
    else
    {
      v14 = v49;
      if (v49)
        *(_DWORD *)v49 += 2;
      v35 = v14;
      v36 = 1;
      LOBYTE(v33) = 0;
      v34 = 0;
      WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v35, &v33);
      if (!v36)
        goto LABEL_49;
      v16 = v35;
      v35 = 0;
      if (!v16)
        goto LABEL_49;
    }
  }
  else
  {
    v14 = v49;
    if (v49)
      *(_DWORD *)v49 += 2;
    v39 = v14;
    v40 = 1;
    LOBYTE(v37) = 0;
    v38 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v39, &v37);
    if (!v40)
      goto LABEL_49;
    v16 = v39;
    v39 = 0;
    if (!v16)
      goto LABEL_49;
  }
LABEL_27:
  if (*(_DWORD *)v16 == 2)
    WTF::StringImpl::destroy(v16, v15);
  else
    *(_DWORD *)v16 -= 2;
LABEL_49:
  v49 = 0;
LABEL_50:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;

  v3 = *a1;
  *a1 = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v4 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v8 = *a3;
    v9 = *((_QWORD *)a3 + 2);
    v12 = v4;
    v13 = 1;
  }
  else
  {
    v8 = *a3;
    v9 = *((_QWORD *)a3 + 2);
    LOBYTE(v12) = 0;
    v13 = 0;
  }
  v11 = v9;
  v10 = v8;
  (*(void (**)(uint64_t, WTF::StringImpl **, __int128 *))(*(_QWORD *)v3 + 16))(v3, &v12, &v10);
  if (v13)
  {
    v6 = v12;
    v12 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::resolveChildFrameWithNodeHandle(WebKit::WebAutomationSessionProxy *a1, WTF::StringImpl *a2, uint64_t a3, WebKit **a4, uint64_t *a5)
{
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  const WTF::String *v12;
  WTF::StringImpl *result;
  WebKit::WebFrame *v14;
  JSObjectRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WebKit::WebProcess *v31;
  WebKit::WebProcess *v32;
  __int128 v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  __int128 v37;
  char v38;
  WTF::StringImpl *v39;
  char v40;
  __int128 v41;
  char v42;
  WTF::StringImpl *v43;
  char v44;
  __int128 v45;
  char v46;
  WTF::StringImpl *v47;
  char v48;
  __int128 v49;
  char v50;
  WTF::StringImpl *v51;
  char v52;
  __int128 v53;
  char v54;
  WTF::StringImpl *v55;
  char v56;
  WTF::StringImpl *v57;
  __int128 v58;
  char v59;
  WTF::StringImpl *v60;
  char v61;
  __int128 v62;
  char v63;
  WTF::StringImpl *v64;
  char v65;
  WTF::StringImpl *v66;

  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v30 = a2;
    v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v31);
    a2 = v30;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v66 = a2;
  v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v9 + 14, &v66);
  if (!v10)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v66);
    v21 = v66;
    if (v66)
      *(_DWORD *)v66 += 2;
    v64 = v21;
    v65 = 1;
    LOBYTE(v62) = 0;
    v63 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v64, &v62);
    if (v65)
    {
      result = v64;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v64, v22);
          if (!v21)
            return result;
LABEL_27:
          if (*(_DWORD *)v21 != 2)
          {
            *(_DWORD *)v21 -= 2;
            return result;
          }
          result = v21;
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
        }
        *(_DWORD *)v64 -= 2;
      }
    }
    if (!v21)
      return result;
    goto LABEL_27;
  }
  v11 = v10;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v66);
  if (!*(_BYTE *)(a3 + 16))
  {
    v14 = *(WebKit::WebFrame **)(v11 + 88);
    if (v14)
      goto LABEL_8;
LABEL_30:
    v23 = v66;
    if (v66)
      *(_DWORD *)v66 += 2;
    v60 = v23;
    v61 = 1;
    LOBYTE(v58) = 0;
    v59 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v60, &v58);
    if (!v61)
      goto LABEL_60;
    v24 = v60;
    if (!v60)
      goto LABEL_60;
    goto LABEL_45;
  }
  {
    result = (WTF::StringImpl *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    result = WebKit::WebProcess::WebProcess(v32);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
    if (!*(_BYTE *)(a3 + 16))
    {
      __break(1u);
      return result;
    }
  }
  v14 = (WebKit::WebFrame *)WebKit::WebProcess::webFrame((uint64_t)result, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  if (!v14)
    goto LABEL_30;
LABEL_8:
  if (!WebKit::isValidNodeHandle(*a4, v12))
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(12, &v57);
    v25 = v57;
    if (v57)
      *(_DWORD *)v57 += 2;
    v55 = v25;
    v56 = 1;
    LOBYTE(v53) = 0;
    v54 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v55, &v53);
    if (!v56)
      goto LABEL_55;
    v26 = v55;
    if (!v55)
      goto LABEL_55;
    goto LABEL_53;
  }
  v15 = WebKit::WebAutomationSessionProxy::elementForNodeHandle(a1, v14, (const WTF::String *)a4);
  if (!v15)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(11, &v57);
    v25 = v57;
    if (v57)
      *(_DWORD *)v57 += 2;
    v51 = v25;
    v52 = 1;
    LOBYTE(v49) = 0;
    v50 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v51, &v49);
    if (!v52)
      goto LABEL_55;
    v26 = v51;
    if (!v51)
      goto LABEL_55;
LABEL_53:
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::destroy(v26, v22);
      if (!v25)
        goto LABEL_60;
LABEL_56:
      if (*(_DWORD *)v25 != 2)
      {
        *(_DWORD *)v25 -= 2;
        goto LABEL_60;
      }
      v24 = v25;
LABEL_59:
      WTF::StringImpl::destroy(v24, v22);
      goto LABEL_60;
    }
    *(_DWORD *)v26 -= 2;
LABEL_55:
    if (!v25)
      goto LABEL_60;
    goto LABEL_56;
  }
  if ((*((_WORD *)v15 + 14) & 0x10) != 0
    && ((v16 = *(_QWORD *)(*((_QWORD *)v15 + 12) + 24), v16 == *(_QWORD *)(*MEMORY[0x1E0DD60A8] + 24))
     || v16 == *(_QWORD *)(*MEMORY[0x1E0DD61C0] + 24)))
  {
    v17 = *((_QWORD *)v15 + 14);
    if (v17 && (v18 = *(_QWORD *)(v17 + 8)) != 0)
    {
      WebKit::WebFrame::fromCoreFrame(v18, &v57);
      v19 = v57;
      if (v57)
      {
        LOBYTE(v35) = 0;
        v36 = 0;
        v33 = *((_OWORD *)v57 + 5);
        v34 = 1;
        WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v35, &v33);
        if (v36 && v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v20);
          else
            *(_DWORD *)v35 -= 2;
        }
        CFRelease(*((CFTypeRef *)v19 + 1));
        goto LABEL_60;
      }
      v29 = v66;
      if (v66)
        *(_DWORD *)v66 += 2;
      v39 = v29;
      v40 = 1;
      LOBYTE(v37) = 0;
      v38 = 0;
      WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v39, &v37);
      if (!v40)
        goto LABEL_60;
      v24 = v39;
      if (!v39)
        goto LABEL_60;
    }
    else
    {
      v28 = v66;
      if (v66)
        *(_DWORD *)v66 += 2;
      v43 = v28;
      v44 = 1;
      LOBYTE(v41) = 0;
      v42 = 0;
      WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v43, &v41);
      if (!v44)
        goto LABEL_60;
      v24 = v43;
      if (!v43)
        goto LABEL_60;
    }
  }
  else
  {
    v27 = v66;
    if (v66)
      *(_DWORD *)v66 += 2;
    v47 = v27;
    v48 = 1;
    LOBYTE(v45) = 0;
    v46 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v47, &v45);
    if (!v48)
      goto LABEL_60;
    v24 = v47;
    if (!v47)
      goto LABEL_60;
  }
LABEL_45:
  if (*(_DWORD *)v24 == 2)
    goto LABEL_59;
  *(_DWORD *)v24 -= 2;
LABEL_60:
  result = v66;
  if (!v66)
    return result;
  if (*(_DWORD *)v66 != 2)
  {
    *(_DWORD *)v66 -= 2;
    return result;
  }
  return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
}

void WebKit::WebAutomationSessionProxy::resolveChildFrameWithName(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, WTF::AtomStringImpl **a4, uint64_t *a5)
{
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::WebProcess *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebCore::FrameTree *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  StringImpl *m_ptr;
  StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebKit::WebProcess *v26;
  WebKit::WebProcess *v27;
  __int128 v28;
  char v29;
  WTF::StringImpl *v30;
  char v31;
  __int128 v32;
  char v33;
  WTF::StringImpl *v34;
  char v35;
  __int128 v36;
  char v37;
  WTF::StringImpl *v38;
  char v39;
  AtomString v40;
  __int128 v41;
  char v42;
  WTF::StringImpl *v43;
  char v44;
  __int128 v45;
  char v46;
  WTF::StringImpl *v47;
  char v48;
  __int128 v49;
  char v50;
  WTF::StringImpl *v51;
  char v52;
  WTF::StringImpl *v53;

  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v25 = a2;
    v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v26);
    a2 = v25;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v53 = a2;
  v9 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v8 + 14, &v53);
  if (!v9)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v53);
    v15 = v53;
    if (v53)
      *(_DWORD *)v53 += 2;
    v51 = v15;
    v52 = 1;
    LOBYTE(v49) = 0;
    v50 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v51, &v49);
    if (v52 && v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v16);
      else
        *(_DWORD *)v51 -= 2;
    }
    goto LABEL_54;
  }
  v10 = v9;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v53);
  if (*(_BYTE *)(a3 + 16))
  {
    {
      v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v11 = WebKit::WebProcess::WebProcess(v27);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
      if (!*(_BYTE *)(a3 + 16))
      {
        __break(1u);
        return;
      }
    }
    v12 = WebKit::WebProcess::webFrame((uint64_t)v11, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
    if (v12)
    {
LABEL_8:
      v13 = *(_QWORD *)(v12 + 24);
      if (!v13 || (v14 = *(_QWORD *)(v13 + 8)) == 0 || *(_BYTE *)(v14 + 144))
      {
        v15 = v53;
        if (v53)
          *(_DWORD *)v53 += 2;
        v43 = v15;
        v44 = 1;
        LOBYTE(v41) = 0;
        v42 = 0;
        WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v43, &v41);
        if (!v44)
          goto LABEL_53;
        v17 = v43;
        v43 = 0;
        if (!v17)
          goto LABEL_53;
        goto LABEL_27;
      }
      v18 = (WebCore::FrameTree *)(v14 + 48);
      WTF::AtomString::AtomString((WTF::AtomString *)&v40, a4);
      v20 = WebCore::FrameTree::scopedChildByUniqueName(v18, &v40);
      m_ptr = v40.var0.m_impl.m_ptr;
      v40.var0.m_impl.m_ptr = 0;
      if (m_ptr)
      {
        if (*(_DWORD *)m_ptr == 2)
        {
          WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v19);
          if (v20)
            goto LABEL_33;
LABEL_41:
          v15 = v53;
          if (v53)
            *(_DWORD *)v53 += 2;
          v38 = v15;
          v39 = 1;
          LOBYTE(v36) = 0;
          v37 = 0;
          WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v38, &v36);
          if (!v39)
            goto LABEL_53;
          v17 = v38;
          v38 = 0;
          if (!v17)
            goto LABEL_53;
          goto LABEL_27;
        }
        *(_DWORD *)m_ptr -= 2;
      }
      if (v20)
      {
LABEL_33:
        WebKit::WebFrame::fromCoreFrame(v20, &v40);
        v22 = v40.var0.m_impl.m_ptr;
        if (v40.var0.m_impl.m_ptr)
        {
          LOBYTE(v30) = 0;
          v31 = 0;
          v28 = *((_OWORD *)v40.var0.m_impl.m_ptr + 5);
          v29 = 1;
          WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v30, &v28);
          if (v31)
          {
            v24 = v30;
            v30 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v23);
              else
                *(_DWORD *)v24 -= 2;
            }
          }
          CFRelease(*((CFTypeRef *)v22 + 1));
          v15 = v53;
          goto LABEL_53;
        }
        v15 = v53;
        if (v53)
          *(_DWORD *)v53 += 2;
        v34 = v15;
        v35 = 1;
        LOBYTE(v32) = 0;
        v33 = 0;
        WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v34, &v32);
        if (!v35)
          goto LABEL_53;
        v17 = v34;
        v34 = 0;
        if (!v17)
          goto LABEL_53;
        goto LABEL_27;
      }
      goto LABEL_41;
    }
  }
  else
  {
    v12 = *(_QWORD *)(v10 + 88);
    if (v12)
      goto LABEL_8;
  }
  v15 = v53;
  if (v53)
    *(_DWORD *)v53 += 2;
  v47 = v15;
  v48 = 1;
  LOBYTE(v45) = 0;
  v46 = 0;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a5, (uint64_t)&v47, &v45);
  if (!v48)
    goto LABEL_53;
  v17 = v47;
  v47 = 0;
  if (!v17)
    goto LABEL_53;
LABEL_27:
  if (*(_DWORD *)v17 == 2)
    WTF::StringImpl::destroy(v17, v16);
  else
    *(_DWORD *)v17 -= 2;
LABEL_53:
  v53 = 0;
LABEL_54:
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
}

void WebKit::WebAutomationSessionProxy::resolveParentFrame(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebProcess *v6;
  uint64_t v7;
  uint64_t v8;
  WebKit::WebProcess *v9;
  unsigned int *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebKit::WebProcess *v18;
  WebKit::WebProcess *v19;
  __int128 v20;
  char v21;
  WTF::StringImpl *v22;
  char v23;
  __int128 v24;
  char v25;
  WTF::StringImpl *v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  WTF::StringImpl *v31;
  char v32;
  __int128 v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  WTF::StringImpl *v37;

  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = a2;
    v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v18);
    a2 = v17;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v37 = a2;
  v7 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v6 + 14, &v37);
  if (!v7)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v37);
    v14 = v37;
    if (v37)
      *(_DWORD *)v37 += 2;
    v35 = v14;
    v36 = 1;
    LOBYTE(v33) = 0;
    v34 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a4, (uint64_t)&v35, &v33);
    if (v36 && v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v15);
      else
        *(_DWORD *)v35 -= 2;
    }
    goto LABEL_36;
  }
  v8 = v7;
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v37);
  if (*(_BYTE *)(a3 + 16))
  {
    {
      v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v9 = WebKit::WebProcess::WebProcess(v19);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
      if (!*(_BYTE *)(a3 + 16))
      {
        __break(1u);
        return;
      }
    }
    v10 = (unsigned int *)WebKit::WebProcess::webFrame((uint64_t)v9, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
    if (v10)
      goto LABEL_8;
LABEL_20:
    v14 = v37;
    if (v37)
      *(_DWORD *)v37 += 2;
    v31 = v14;
    v32 = 1;
    LOBYTE(v29) = 0;
    v30 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a4, (uint64_t)&v31, &v29);
    if (!v32)
      goto LABEL_35;
    v16 = v31;
    v31 = 0;
    if (!v16)
      goto LABEL_35;
    goto LABEL_29;
  }
  v10 = *(unsigned int **)(v8 + 88);
  if (!v10)
    goto LABEL_20;
LABEL_8:
  WebKit::WebFrame::parentFrame(v10, &v28);
  v11 = v28;
  if (v28)
  {
    LOBYTE(v22) = 0;
    v23 = 0;
    v20 = *(_OWORD *)(v28 + 80);
    v21 = 1;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a4, (uint64_t)&v22, &v20);
    if (v23)
    {
      v13 = v22;
      v22 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
    v14 = v37;
    goto LABEL_35;
  }
  v14 = v37;
  if (v37)
    *(_DWORD *)v37 += 2;
  v26 = v14;
  v27 = 1;
  LOBYTE(v24) = 0;
  v25 = 0;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>)>::operator()(a4, (uint64_t)&v26, &v24);
  if (!v27)
    goto LABEL_35;
  v16 = v26;
  v26 = 0;
  if (!v16)
    goto LABEL_35;
LABEL_29:
  if (*(_DWORD *)v16 == 2)
    WTF::StringImpl::destroy(v16, v15);
  else
    *(_DWORD *)v16 -= 2;
LABEL_35:
  v37 = 0;
LABEL_36:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
}

uint64_t WebKit::WebAutomationSessionProxy::computeElementLayout(WebKit::WebAutomationSessionProxy *a1, WTF::StringImpl *a2, uint64_t a3, WebKit **a4, int a5, int a6, uint64_t *a7)
{
  WebKit::WebProcess *v13;
  uint64_t v14;
  const WTF::String *v15;
  WebKit::WebProcess *v16;
  WebKit::WebFrame *v17;
  WTF::StringImpl *v18;
  uint64_t result;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  WebCore::LocalFrameView *v31;
  WebCore::ScrollView *v32;
  unsigned int v33;
  unsigned int v34;
  float v35;
  float v36;
  float *v37;
  unsigned int *v38;
  unsigned int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  __int32 v44;
  __int32 v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  float v50;
  float v51;
  WebCore::DOMRectList *v52;
  float64x2_t *v53;
  unsigned int v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  float v64;
  uint64_t v65;
  float v66;
  float *v67;
  unsigned int *v68;
  unsigned int v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  int v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  float v84;
  float v85;
  float v86;
  unint64_t v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  WebKit::WebProcess *v91;
  WebKit::WebProcess *v92;
  float32x2_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  char v96;
  WTF::StringImpl *v97;
  char v98;
  _DWORD *v99;
  char v100;
  WTF::StringImpl *v101;
  char v102;
  WTF::StringImpl *v103;
  char v104;
  WTF::StringImpl *v105;
  char v106;
  WTF::StringImpl *v107;
  char v108;
  WTF::StringImpl *v109;
  char v110;
  WTF::StringImpl *v111;
  char v112;
  float32x4_t v113;
  WTF::StringImpl *v114;
  float v115;
  float v116;
  IntPoint v117;

  {
    v13 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v94 = a2;
    v91 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v13 = WebKit::WebProcess::WebProcess(v91);
    a2 = v94;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v13;
  }
  v114 = a2;
  v14 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v13 + 14, &v114);
  if (!v14)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v114);
    v18 = v114;
    if (v114)
      *(_DWORD *)v114 += 2;
    v111 = v18;
    v112 = 1;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v111, 0, 0);
    if (!v112)
      goto LABEL_25;
    result = (uint64_t)v111;
    if (!v111)
      goto LABEL_25;
LABEL_22:
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
    else
      *(_DWORD *)result -= 2;
LABEL_25:
    if (!v18)
      return result;
    if (*(_DWORD *)v18 != 2)
    {
      *(_DWORD *)v18 -= 2;
      return result;
    }
    result = (uint64_t)v18;
    return WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
  }
  if (*(_BYTE *)(a3 + 16))
  {
    {
      v16 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v92 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v16 = WebKit::WebProcess::WebProcess(v92);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v16;
      v65 = *(unsigned __int8 *)(a3 + 16);
      if (!*(_BYTE *)(a3 + 16))
      {
        __break(1u);
        goto LABEL_155;
      }
    }
    v17 = (WebKit::WebFrame *)WebKit::WebProcess::webFrame((uint64_t)v16, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
    if (!v17)
      goto LABEL_18;
  }
  else
  {
    v17 = *(WebKit::WebFrame **)(v14 + 88);
    if (!v17)
      goto LABEL_18;
  }
  v21 = *((_QWORD *)v17 + 3);
  if (!v21 || (v22 = *(_QWORD *)(v21 + 8)) == 0 || *(_BYTE *)(v22 + 144) || !*(_QWORD *)(v22 + 288))
  {
LABEL_18:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v114);
    v18 = v114;
    if (v114)
      *(_DWORD *)v114 += 2;
    v109 = v18;
    v110 = 1;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v109, 0, 0);
    if (!v110)
      goto LABEL_25;
    result = (uint64_t)v109;
    if (!v109)
      goto LABEL_25;
    goto LABEL_22;
  }
  if (!WebKit::isValidNodeHandle(*a4, v15))
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(12, &v114);
    v18 = v114;
    if (v114)
      *(_DWORD *)v114 += 2;
    v107 = v18;
    v108 = 1;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v107, 0, 0);
    if (!v108)
      goto LABEL_25;
    result = (uint64_t)v107;
    if (!v107)
      goto LABEL_25;
    goto LABEL_22;
  }
  result = (uint64_t)WebKit::WebAutomationSessionProxy::elementForNodeHandle(a1, v17, (const WTF::String *)a4);
  if (!result)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(11, &v114);
    v18 = v114;
    if (v114)
      *(_DWORD *)v114 += 2;
    v105 = v18;
    v106 = 1;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v105, 0, 0);
    if (!v106)
      goto LABEL_25;
    result = (uint64_t)v105;
    if (!v105)
      goto LABEL_25;
    goto LABEL_22;
  }
  v23 = result;
  v24 = result;
  if ((*(_WORD *)(result + 28) & 0x10) != 0)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(result + 96) + 24);
    if (v25 == *(_QWORD *)(*MEMORY[0x1E0DD6200] + 24))
    {
      v24 = *(_QWORD *)(result + 32);
      if (v24 && (v26 = *(_WORD *)(v24 + 28), (v26 & 8) != 0))
      {
        while ((v26 & 0x10) == 0
             || (v26 & 0x110) == 0x110
             || *(_QWORD *)(*(_QWORD *)(v24 + 96) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD5D30] + 24))
        {
          v24 = *(_QWORD *)(v24 + 32);
          if (v24)
          {
            v26 = *(_WORD *)(v24 + 28);
            if ((v26 & 8) != 0)
              continue;
          }
          goto LABEL_56;
        }
      }
      else
      {
LABEL_56:
        result = WebCore::HTMLOptionElement::ownerSelectElement((WebCore::HTMLOptionElement *)result);
        v24 = result;
      }
    }
    else
    {
      v24 = result;
      if (v25 == *(_QWORD *)(*MEMORY[0x1E0DD5D68] + 24))
      {
        *(_DWORD *)(result + 24) += 2;
        result = WebCore::HTMLOptGroupElement::ownerSelectElement((WebCore::HTMLOptGroupElement *)result);
        v24 = result;
        if (*(_DWORD *)(v23 + 24) == 2)
        {
          if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)v23);
        }
        else
        {
          *(_DWORD *)(v23 + 24) -= 2;
        }
      }
    }
  }
  if (a5 && v24)
    result = WebCore::Element::scrollIntoViewIfNotVisible((WebCore::Element *)v24);
  v27 = *(_QWORD *)(*((_QWORD *)v17 + 3) + 8);
  if (*(_BYTE *)(v27 + 144))
    v28 = 0;
  else
    v28 = *(_QWORD *)(*((_QWORD *)v17 + 3) + 8);
  v29 = *(_QWORD *)(*(_QWORD *)(v27 + 128) + 8);
  if (v29)
    v30 = *(_BYTE *)(v29 + 144) == 0;
  else
    v30 = 0;
  if (!v30)
    return result;
  v31 = *(WebCore::LocalFrameView **)(v28 + 288);
  v32 = *(WebCore::ScrollView **)(v29 + 288);
  if (a6 == 1)
  {
    WebCore::Element::boundingClientRect((WebCore::Element *)v23);
    v114 = (WTF::StringImpl *)__PAIR64__(v34, v33);
    v115 = v35;
    v116 = v36;
    if (*((_BYTE *)v31 + 312) == 1)
    {
      v37 = (float *)WebCore::LocalFrameView::frame(v31);
      v38 = (unsigned int *)(v37 + 2);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 + 1, v38));
      v40 = v37[148];
      WebCore::LocalFrame::frameScaleFactor((WebCore::LocalFrame *)v37);
      WebCore::FloatRect::scale((WebCore::FloatRect *)&v114, v40 * v41, v40 * v41);
      v117 = (IntPoint)WebCore::ScrollView::contentsScrollPosition(v31);
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v113, &v117);
      v93 = vadd_f32(*(float32x2_t *)v113.f32, (float32x2_t)v114);
      v114 = (WTF::StringImpl *)v93;
      v42 = v115;
      v43 = v116;
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v38);
      v45 = v93.i32[1];
      v44 = v93.i32[0];
    }
    else
    {
      WebCore::LocalFrameView::clientToDocumentRect();
      v113.i64[0] = __PAIR64__(v47, v46);
      v113.i64[1] = __PAIR64__(v49, v48);
      WebCore::ScrollView::contentsToRootView(v31, (const WebCore::FloatRect *)&v113);
      v42 = v50;
      v43 = v51;
    }
    v114 = (WTF::StringImpl *)__PAIR64__(v45, v44);
    v115 = v42;
    v116 = v43;
    WebCore::ScrollView::rootViewToContents(v32, (const WebCore::FloatRect *)&v114);
    WebCore::LocalFrameView::absoluteToLayoutViewportRect();
  }
  else if (!a6)
  {
    WebCore::Element::boundingClientRect((WebCore::Element *)v23);
  }
  if (!v24)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(19, &v114);
    v18 = v114;
    if (v114)
      *(_DWORD *)v114 += 2;
    v103 = v18;
    v104 = 1;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v103, 0, 0);
    if (!v104)
      goto LABEL_25;
    result = (uint64_t)v103;
    if (!v103)
      goto LABEL_25;
    goto LABEL_22;
  }
  WebCore::Element::getClientRects((WebCore::Element *)v24);
  v52 = v114;
  if (!*((_DWORD *)v114 + 5))
  {
    v114 = 0;
    WTF::RefCounted<WebCore::DOMRectList>::deref(v52);
LABEL_98:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(19, &v114);
    v18 = v114;
    if (v114)
      *(_DWORD *)v114 += 2;
    v101 = v18;
    v102 = 1;
    result = WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v101, 0, 0);
    if (!v102)
      goto LABEL_25;
    result = (uint64_t)v101;
    if (!v101)
      goto LABEL_25;
    goto LABEL_22;
  }
  v53 = (float64x2_t *)**((_QWORD **)v114 + 1);
  v114 = 0;
  WTF::RefCounted<WebCore::DOMRectList>::deref(v52);
  if (!v53)
    goto LABEL_98;
  WebCore::LocalFrameView::visualViewportRect(v31);
  WebCore::LocalFrameView::documentToClientRect();
  v113 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v53[1]), v53[2]);
  v114 = (WTF::StringImpl *)__PAIR64__(v55, v54);
  v115 = v56;
  v116 = v57;
  WebCore::FloatRect::intersect((WebCore::FloatRect *)&v114, (const WebCore::FloatRect *)&v113);
  if (v115 > 0.0 && v116 > 0.0)
  {
    v58 = *(float *)&v114 + (float)(v115 * 0.5);
    v59 = *((float *)&v114 + 1) + (float)(v116 * 0.5);
    WebCore::TreeScope::elementsFromPoint();
    if (v116 == 0.0)
    {
LABEL_86:
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(19, &v117);
      v61 = (WTF::StringImpl *)v117;
      if (v117)
        *(_DWORD *)v117.m_x += 2;
      v97 = v61;
      v98 = 1;
      WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v97, 0, 0);
      if (v98 && v97)
      {
        if (*(_DWORD *)v97 == 2)
          WTF::StringImpl::destroy(v97, v62);
        else
          *(_DWORD *)v97 -= 2;
      }
      if (!v61)
        goto LABEL_139;
      if (*(_DWORD *)v61 != 2)
      {
        *(_DWORD *)v61 -= 2;
LABEL_139:
        if (v116 != 0.0)
        {
          v88 = v114;
          v89 = 8 * LODWORD(v116);
          do
          {
            v90 = *(_QWORD *)v88;
            *(_QWORD *)v88 = 0;
            if (v90)
            {
              if (*(_DWORD *)(v90 + 24) == 2)
              {
                if ((*(_WORD *)(v90 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v90);
              }
              else
              {
                *(_DWORD *)(v90 + 24) -= 2;
              }
            }
            v88 = (WTF::StringImpl *)((char *)v88 + 8);
            v89 -= 8;
          }
          while (v89);
        }
        result = (uint64_t)v114;
        if (v114)
        {
          v114 = 0;
          v115 = 0.0;
          return WTF::fastFree((WTF *)result, v62);
        }
        return result;
      }
      v63 = v61;
LABEL_138:
      WTF::StringImpl::destroy(v63, v62);
      goto LABEL_139;
    }
    v60 = 0;
    while (*(_QWORD *)((char *)v114 + v60) != v24)
    {
      v60 += 8;
      if (8 * LODWORD(v116) == v60)
        goto LABEL_86;
    }
    if (*(_QWORD *)v114 != v24)
      WebCore::Node::isDescendantOrShadowDescendantOf(*(WebCore::Node **)v114, (const WebCore::Node *)v24);
    if (a6 == 1)
    {
      if (*((_BYTE *)v31 + 312) == 1)
      {
        v67 = (float *)WebCore::LocalFrameView::frame(v31);
        v68 = (unsigned int *)(v67 + 2);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 + 1, v68));
        v70 = v67[148];
        WebCore::LocalFrame::frameScaleFactor((WebCore::LocalFrame *)v67);
        v72 = v70 * v71;
        v73 = v58 * v72;
        v74 = v59 * v72;
        v75 = WebCore::ScrollView::contentsScrollPosition(v31);
        *(float *)&v76 = v73 + (float)(int)v75;
        *(float *)&v77 = v74 + (float)SHIDWORD(v75);
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v68);
      }
      else
      {
        WebCore::LocalFrameView::clientToDocumentPoint();
        v117.m_x = v80;
        v117.m_y = v81;
        WebCore::ScrollView::contentsToRootView(v31, (const WebCore::FloatPoint *)&v117);
        v76 = v82;
        v77 = v83;
      }
      v117.m_x = v76;
      v117.m_y = v77;
      WebCore::ScrollView::rootViewToContents(v32, (const WebCore::FloatPoint *)&v117);
      WebCore::LocalFrameView::absoluteToLayoutViewportPoint();
      v86 = roundf(v85);
      if (v86 >= 2147500000.0)
      {
        v65 = 0x7FFFFFFFLL;
      }
      else
      {
        v65 = 0x80000000;
        if (v86 > -2147500000.0)
          v65 = (int)v86;
      }
      v66 = roundf(v84);
    }
    else
    {
      if (a6)
      {
        v78 = 0;
        v79 = 0;
LABEL_134:
        LOBYTE(v95) = 0;
        v96 = 0;
        WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v95, v79, v78);
        if (!v96)
          goto LABEL_139;
        v63 = v95;
        if (!v95)
          goto LABEL_139;
        if (*(_DWORD *)v95 != 2)
        {
          *(_DWORD *)v95 -= 2;
          goto LABEL_139;
        }
        goto LABEL_138;
      }
      v64 = roundf(v58);
      if (v64 >= 2147500000.0)
      {
        v65 = 0x7FFFFFFFLL;
      }
      else
      {
        v65 = 0x80000000;
        if (v64 > -2147500000.0)
          v65 = (int)v64;
      }
      v66 = roundf(v59);
    }
    if (v66 < 2147500000.0)
    {
      if (v66 <= -2147500000.0)
        v87 = 0x8000000000000000;
      else
        v87 = (unint64_t)(int)v66 << 32;
      goto LABEL_133;
    }
LABEL_155:
    v87 = 0x7FFFFFFF00000000;
LABEL_133:
    v79 = v87 | v65;
    v78 = 1;
    goto LABEL_134;
  }
  LOBYTE(v99) = 0;
  v100 = 0;
  result = WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(a7, (uint64_t)&v99, 0, 0);
  if (v100)
  {
    result = (uint64_t)v99;
    if (v99)
    {
      if (*v99 != 2)
      {
        *v99 -= 2;
        return result;
      }
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::FloatRect,std::optional<WebCore::IntPoint>,BOOL)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  char v10;

  v4 = *a1;
  *a1 = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v5 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v9 = v5;
    v10 = 1;
  }
  else
  {
    LOBYTE(v9) = 0;
    v10 = 0;
  }
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, &v9, a3, a4);
  if (v10)
  {
    v7 = v9;
    v9 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::getComputedRole(WebKit::WebAutomationSessionProxy *a1, WTF::StringImpl *a2, __int128 *a3, WTF::StringImpl **a4, uint64_t *a5)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t AccessibilityObjectForNode;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  __int128 v24;
  uint64_t v25;
  WTF::StringImpl *v26;

  v24 = *a3;
  v25 = *((_QWORD *)a3 + 2);
  v26 = 0;
  v6 = *a4;
  if (*a4)
    *(_DWORD *)v6 += 2;
  v23 = v6;
  AccessibilityObjectForNode = WebKit::WebAutomationSessionProxy::getAccessibilityObjectForNode(a1, a2, (uint64_t)&v24, &v23, &v26);
  v9 = v23;
  v23 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v26;
  if (v26)
  {
    *(_DWORD *)v26 += 2;
    v21 = v10;
    v22 = 1;
    LOBYTE(v19) = 0;
    v20 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v21, (uint64_t)&v19);
    if (v20)
    {
      result = v19;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v19, v12);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
    if (v22)
    {
      result = v21;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v21, v12);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    if (*(_DWORD *)v10 != 2)
    {
      *(_DWORD *)v10 -= 2;
      return result;
    }
    result = v10;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
  }
  LOBYTE(v17) = 0;
  v18 = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)AccessibilityObjectForNode + 2192))(&v14, AccessibilityObjectForNode);
  v13 = v14;
  v14 = 0;
  v15 = v13;
  v16 = 1;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v17, (uint64_t)&v15);
  if (v16 && v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  if (v18)
  {
    result = v17;
    if (v17)
    {
      if (*(_DWORD *)v17 != 2)
      {
        *(_DWORD *)v17 -= 2;
        return result;
      }
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WTF::String>)>::operator()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;
  char v15;

  v3 = *a1;
  *a1 = 0;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a2 + 8))
  {
    v5 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
  }
  else
  {
    v5 = 0;
  }
  v6 = *(unsigned __int8 *)(a3 + 8);
  if (*(_BYTE *)(a3 + 8))
  {
    v7 = *(WTF::StringImpl **)a3;
    *(_QWORD *)a3 = 0;
  }
  else
  {
    v7 = 0;
  }
  LOBYTE(v14) = 0;
  v15 = 0;
  if (v4)
  {
    v14 = v5;
    v15 = 1;
    v5 = 0;
  }
  LOBYTE(v12) = 0;
  v13 = 0;
  if (v6)
  {
    v12 = v7;
    v13 = 1;
    v7 = 0;
  }
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v14, &v12);
  if (v13)
  {
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  if (!v15 || (v10 = v14, v14 = 0, !v10))
  {
LABEL_20:
    if (!v6)
      goto LABEL_27;
    goto LABEL_21;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v10, v8);
  if (!v6)
    goto LABEL_27;
LABEL_21:
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v8);
    else
      *(_DWORD *)v7 -= 2;
  }
LABEL_27:
  if (v4 && v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v8);
    else
      *(_DWORD *)v5 -= 2;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::getComputedLabel(WebKit::WebAutomationSessionProxy *a1, WTF::StringImpl *a2, __int128 *a3, WTF::StringImpl **a4, uint64_t *a5)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WebCore::AccessibilityObject *AccessibilityObjectForNode;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;
  WTF::StringImpl *v16;
  char v17;
  WTF::StringImpl *v18;
  char v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  __int128 v23;
  uint64_t v24;
  WTF::StringImpl *v25;

  v23 = *a3;
  v24 = *((_QWORD *)a3 + 2);
  v25 = 0;
  v6 = *a4;
  if (*a4)
    *(_DWORD *)v6 += 2;
  v22 = v6;
  AccessibilityObjectForNode = (WebCore::AccessibilityObject *)WebKit::WebAutomationSessionProxy::getAccessibilityObjectForNode(a1, a2, (uint64_t)&v23, &v22, &v25);
  v9 = v22;
  v22 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v25;
  if (v25)
  {
    *(_DWORD *)v25 += 2;
    v20 = v10;
    v21 = 1;
    LOBYTE(v18) = 0;
    v19 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v20, (uint64_t)&v18);
    if (v19)
    {
      result = v18;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v18, v12);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
    if (v21)
    {
      result = v20;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(v20, v12);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    if (*(_DWORD *)v10 != 2)
    {
      *(_DWORD *)v10 -= 2;
      return result;
    }
    result = v10;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
  }
  LOBYTE(v16) = 0;
  v17 = 0;
  WebCore::AccessibilityObject::computedLabel(AccessibilityObjectForNode);
  v14 = v13;
  v15 = 1;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>,std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v16, (uint64_t)&v14);
  if (v15 && v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = 0;
  if (v17)
  {
    result = v16;
    if (v16)
    {
      if (*(_DWORD *)v16 != 2)
      {
        *(_DWORD *)v16 -= 2;
        return result;
      }
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::selectOptionElement(WebKit::WebAutomationSessionProxy *a1, WTF::StringImpl *a2, uint64_t a3, WebKit **a4, uint64_t *a5)
{
  WebKit::WebProcess *v9;
  uint64_t v10;
  const WTF::String *v11;
  WebKit::WebProcess *v12;
  WebKit::WebFrame *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSObjectRef v19;
  JSObjectRef v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::HTMLSelectElement *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WebKit::WebProcess *v30;
  WebKit::WebProcess *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  char v34;
  WTF::StringImpl *v35;
  char v36;
  WTF::StringImpl *v37;
  char v38;
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  char v42;
  WTF::StringImpl *v43;
  char v44;
  WTF::StringImpl *v45;
  char v46;
  WTF::StringImpl *v47;

  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v32 = a2;
    v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v30);
    a2 = v32;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v47 = a2;
  v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v9 + 14, &v47);
  if (!v10)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v47);
    v14 = v47;
    if (v47)
      *(_DWORD *)v47 += 2;
    v45 = v14;
    v46 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v45);
    if (!v46)
      goto LABEL_25;
    result = v45;
    v45 = 0;
    if (!result)
      goto LABEL_25;
LABEL_22:
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
LABEL_25:
    if (!v14)
      return result;
    if (*(_DWORD *)v14 != 2)
    {
      *(_DWORD *)v14 -= 2;
      return result;
    }
    result = v14;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
  }
  if (*(_BYTE *)(a3 + 16))
  {
    {
      v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v12 = WebKit::WebProcess::WebProcess(v31);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v12;
      if (!*(_BYTE *)(a3 + 16))
      {
        __break(1u);
LABEL_76:
        JUMPOUT(0x19769BF6CLL);
      }
    }
    v13 = (WebKit::WebFrame *)WebKit::WebProcess::webFrame((uint64_t)v12, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
    if (!v13)
      goto LABEL_18;
  }
  else
  {
    v13 = *(WebKit::WebFrame **)(v10 + 88);
    if (!v13)
      goto LABEL_18;
  }
  v17 = *((_QWORD *)v13 + 3);
  if (!v17 || (v18 = *(_QWORD *)(v17 + 8)) == 0 || *(_BYTE *)(v18 + 144) || !*(_QWORD *)(v18 + 288))
  {
LABEL_18:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v47);
    v14 = v47;
    if (v47)
      *(_DWORD *)v47 += 2;
    v43 = v14;
    v44 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v43);
    if (!v44)
      goto LABEL_25;
    result = v43;
    v43 = 0;
    if (!result)
      goto LABEL_25;
    goto LABEL_22;
  }
  if (!WebKit::isValidNodeHandle(*a4, v11))
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(12, &v47);
    v14 = v47;
    if (v47)
      *(_DWORD *)v47 += 2;
    v41 = v14;
    v42 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v41);
    if (!v42)
      goto LABEL_25;
    result = v41;
    v41 = 0;
    if (!result)
      goto LABEL_25;
    goto LABEL_22;
  }
  v19 = WebKit::WebAutomationSessionProxy::elementForNodeHandle(a1, v13, (const WTF::String *)a4);
  if (!v19
    || (v20 = v19, (*((_WORD *)v19 + 14) & 0x10) == 0)
    || (v21 = MEMORY[0x1E0DD6200],
        v22 = *(_QWORD *)(*((_QWORD *)v19 + 12) + 24),
        v23 = MEMORY[0x1E0DD5D68],
        v22 != *(_QWORD *)(*MEMORY[0x1E0DD6200] + 24))
    && v22 != *(_QWORD *)(*MEMORY[0x1E0DD5D68] + 24))
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(11, &v47);
    v14 = v47;
    if (v47)
      *(_DWORD *)v47 += 2;
    v39 = v14;
    v40 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v39);
    if (!v40)
      goto LABEL_25;
    result = v39;
    v39 = 0;
    if (!result)
      goto LABEL_25;
    goto LABEL_22;
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(19, &v47);
  if ((*((_WORD *)v20 + 14) & 0x10) == 0)
    goto LABEL_72;
  v24 = *(_QWORD *)(*((_QWORD *)v20 + 12) + 24);
  if (v24 == *(_QWORD *)(*(_QWORD *)v23 + 24))
  {
    v28 = v47;
    if (v47)
      *(_DWORD *)v47 += 2;
    v37 = v28;
    v38 = 1;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v37);
    if (v38)
    {
      v27 = v37;
      v37 = 0;
      if (v27)
        goto LABEL_66;
    }
    goto LABEL_69;
  }
  if (v24 != *(_QWORD *)(*(_QWORD *)v21 + 24))
  {
LABEL_72:
    __break(0xC471u);
    goto LABEL_76;
  }
  v25 = WebCore::HTMLOptionElement::ownerSelectElement(v20);
  if (v25)
  {
    v26 = (WebCore::HTMLSelectElement *)v25;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 960))(v25) & 1) == 0
      && (WebCore::HTMLOptionElement::isDisabledFormControl(v20) & 1) == 0)
    {
      WebCore::HTMLOptionElement::index(v20);
      WebCore::HTMLSelectElement::optionSelectedByUser(v26);
    }
    LOBYTE(v33) = 0;
    v34 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v33);
    if (!v34)
      goto LABEL_69;
    v27 = v33;
    v33 = 0;
    if (!v27)
      goto LABEL_69;
LABEL_66:
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v16);
    else
      *(_DWORD *)v27 -= 2;
    goto LABEL_69;
  }
  v29 = v47;
  if (v47)
    *(_DWORD *)v47 += 2;
  v35 = v29;
  v36 = 1;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v35);
  if (v36)
  {
    v27 = v35;
    v35 = 0;
    if (v27)
      goto LABEL_66;
  }
LABEL_69:
  result = v47;
  if (v47)
  {
    if (*(_DWORD *)v47 != 2)
    {
      *(_DWORD *)v47 -= 2;
      return result;
    }
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::setFilesForInputFileUpload(WebKit::WebAutomationSessionProxy *a1, WTF::StringImpl *a2, uint64_t a3, const WTF::String *a4, uint64_t *a5, uint64_t *a6)
{
  WebKit::WebProcess *v11;
  uint64_t v12;
  WTF::StringImpl *result;
  WebKit::WebFrame *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSObjectRef v19;
  JSObjectRef v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  _QWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  int v42;
  void *v43;
  bmalloc::api *v44;
  void *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WebKit::WebProcess *v48;
  WebKit::WebProcess *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  char v56;
  WTF::StringImpl *v57;
  char v58;
  WTF::StringImpl *v59;
  char v60;
  _DWORD *v61;
  WTF::StringImpl *v62;
  char v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;

  {
    v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v50 = a2;
    v48 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v11 = WebKit::WebProcess::WebProcess(v48);
    a2 = v50;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
  }
  v62 = a2;
  v12 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v11 + 14, &v62);
  if (!v12)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v62);
    v15 = v62;
    if (v62)
      *(_DWORD *)v62 += 2;
    v59 = v15;
    v60 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a6, (uint64_t)&v59);
    if (!v60)
      goto LABEL_24;
    result = v59;
    v59 = 0;
    if (!result)
      goto LABEL_24;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a3 + 16))
  {
    {
      result = (WTF::StringImpl *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v49 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      result = WebKit::WebProcess::WebProcess(v49);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
      if (!*(_BYTE *)(a3 + 16))
      {
        __break(1u);
        goto LABEL_100;
      }
    }
    v14 = (WebKit::WebFrame *)WebKit::WebProcess::webFrame((uint64_t)result, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
    if (!v14)
      goto LABEL_18;
  }
  else
  {
    v14 = *(WebKit::WebFrame **)(v12 + 88);
    if (!v14)
      goto LABEL_18;
  }
  v17 = *((_QWORD *)v14 + 3);
  if (!v17 || (v18 = *(_QWORD *)(v17 + 8)) == 0 || *(_BYTE *)(v18 + 144) || !*(_QWORD *)(v18 + 288))
  {
LABEL_18:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v62);
    v15 = v62;
    if (v62)
      *(_DWORD *)v62 += 2;
    v57 = v15;
    v58 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a6, (uint64_t)&v57);
    if (!v58)
      goto LABEL_24;
    result = v57;
    v57 = 0;
    if (!result)
      goto LABEL_24;
LABEL_22:
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      if (!v15)
        return result;
LABEL_25:
      if (*(_DWORD *)v15 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v15, v16);
      *(_DWORD *)v15 -= 2;
      return result;
    }
    *(_DWORD *)result -= 2;
LABEL_24:
    if (!v15)
      return result;
    goto LABEL_25;
  }
  v19 = WebKit::WebAutomationSessionProxy::elementForNodeHandle(a1, v14, a4);
  v20 = v19;
  if (!v19)
    goto LABEL_46;
  if ((*((_WORD *)v19 + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)v19 + 12) + 24) != *(_QWORD *)(*MEMORY[0x1E0DD60B8] + 24))
  {
    v20 = 0;
LABEL_46:
    v28 = 1;
    goto LABEL_48;
  }
  *((_DWORD *)v19 + 6) += 2;
  if ((WebCore::HTMLInputElement::isFileUpload(v19) & 1) != 0)
  {
    v53 = 0;
    v54 = 0;
    v21 = 0;
    if (WebCore::HTMLInputElement::multiple(v20))
    {
      v22 = WebCore::HTMLInputElement::files(v20);
      if (v22)
      {
        v21 = *(unsigned int *)(v22 + 28);
        if ((_DWORD)v21)
        {
          v23 = *(uint64_t **)(v22 + 16);
          if (v21 <= 0x10)
            v24 = 16;
          else
            v24 = *(unsigned int *)(v22 + 28);
          result = (WTF::StringImpl *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)&v53, v24);
          if (v21 >= HIDWORD(v54))
          {
            v25 = &v53[HIDWORD(v54)];
            v26 = 8 * v21;
            do
            {
              v27 = *v23++;
              ++*(_DWORD *)(v27 + 16);
              *v25++ = v27;
              v26 -= 8;
            }
            while (v26);
            HIDWORD(v54) = v21;
            goto LABEL_63;
          }
LABEL_100:
          __break(0xC471u);
          return result;
        }
      }
      v21 = 0;
    }
LABEL_63:
    WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)&v53, v21 + *((unsigned int *)a5 + 3));
    v31 = *((unsigned int *)a5 + 3);
    if ((_DWORD)v31)
    {
      v32 = *a5;
      v33 = 8 * v31;
      do
      {
        v64 = 0;
        v65 = 0;
        LOBYTE(v62) = 0;
        v63 = 0;
        WebCore::File::create();
        v35 = v64;
        v64 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v34);
          else
            *(_DWORD *)v35 -= 2;
        }
        v36 = v65;
        v65 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v34);
          else
            *(_DWORD *)v36 -= 2;
        }
        v37 = HIDWORD(v54) + 1;
        v38 = v53;
        v39 = v61;
        v61 = 0;
        v53[HIDWORD(v54)] = v39;
        HIDWORD(v54) = v37;
        v40 = v61;
        v61 = 0;
        if (v40)
        {
          if (v40[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
          else
            --v40[4];
        }
        v32 += 8;
        v33 -= 8;
      }
      while (v33);
    }
    else
    {
      v38 = v53;
      v37 = HIDWORD(v54);
    }
    v41 = WebCore::FileList::operator new((WebCore::FileList *)0x20);
    *(_QWORD *)v41 = 0;
    *(_DWORD *)(v41 + 8) = 1;
    *(_QWORD *)(v41 + 16) = v38;
    v42 = v54;
    v53 = 0;
    v54 = 0;
    *(_DWORD *)(v41 + 24) = v42;
    *(_DWORD *)(v41 + 28) = v37;
    v62 = (WTF::StringImpl *)v41;
    WebCore::HTMLInputElement::setFiles();
    v44 = v62;
    v62 = 0;
    if (v44)
    {
      if (*((_DWORD *)v44 + 2) == 1)
      {
        WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44 + 16, v43);
        if (*(_QWORD *)v44)
        {
          *(_QWORD *)(*(_QWORD *)v44 + 8) = 3;
          *(_QWORD *)v44 = 0;
        }
        bmalloc::api::isoDeallocate(v44, v45);
      }
      else
      {
        --*((_DWORD *)v44 + 2);
      }
    }
    LOBYTE(v51) = 0;
    v52 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a6, (uint64_t)&v51);
    if (v52)
    {
      v47 = v51;
      v51 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v46);
        else
          *(_DWORD *)v47 -= 2;
      }
    }
    result = (WTF::StringImpl *)WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v46);
    goto LABEL_92;
  }
  v28 = 0;
LABEL_48:
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(11, &v62);
  v29 = v62;
  if (v62)
    *(_DWORD *)v62 += 2;
  v55 = v29;
  v56 = 1;
  result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a6, (uint64_t)&v55);
  if (v56)
  {
    result = v55;
    v55 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v29, v30);
      if ((v28 & 1) != 0)
        return result;
      goto LABEL_92;
    }
    *(_DWORD *)v29 -= 2;
  }
  if ((v28 & 1) != 0)
    return result;
LABEL_92:
  if (*((_DWORD *)v20 + 6) == 2)
  {
    if ((*((_WORD *)v20 + 15) & 0x400) == 0)
      return (WTF::StringImpl *)WebCore::Node::removedLastRef(v20);
  }
  else
  {
    *((_DWORD *)v20 + 6) -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::takeScreenshot(WebKit::WebAutomationSessionProxy *a1, unint64_t a2, __int128 *a3, WTF::StringImpl **a4, int a5, int a6, uint64_t a7)
{
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  __int128 v16;
  char v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  __int128 v20;
  uint64_t v21;

  v20 = *a3;
  v21 = *((_QWORD *)a3 + 2);
  v12 = *a4;
  if (*a4)
    *(_DWORD *)v12 += 2;
  v19 = v12;
  v16 = *a3;
  v17 = *((_BYTE *)a3 + 16);
  v13 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v13 = off_1E34F4388;
  *(_QWORD *)(v13 + 8) = a2;
  *(_OWORD *)(v13 + 16) = v16;
  *(_BYTE *)(v13 + 32) = v17;
  *(_QWORD *)(v13 + 40) = a7;
  v18 = v13;
  WebKit::WebAutomationSessionProxy::snapshotRectForScreenshot(a1, a2, (uint64_t)&v20, (const WTF::String *)&v19, a5, a6, &v18);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::snapshotRectForScreenshot(WebKit::WebAutomationSessionProxy *a1, unint64_t a2, uint64_t a3, const WTF::String *a4, int a5, int a6, uint64_t *a7)
{
  WebKit::WebProcess *v14;
  uint64_t v15;
  const WTF::String *v16;
  WebKit::WebPage *v17;
  WebKit::WebProcess *v18;
  WebKit::WebFrame *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WebKit *v25;
  WebCore::Element *v26;
  WebCore::Element *v27;
  char v28;
  WebCore::ScrollView *v29;
  unint64_t v30;
  uint64_t v31;
  WebCore::RenderObject *v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  IntSize v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  BOOL v52;
  WTF::StringImpl *m_location;
  int v54;
  int v55;
  int v56;
  int v57;
  WebKit::WebProcess *v58;
  WebKit::WebProcess *v59;
  int v60;
  WTF::StringImpl *v61;
  char v62;
  WTF::StringImpl *v63;
  char v64;
  WTF::StringImpl *v65;
  char v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  char v69;
  WTF::StringImpl *v70;
  char v71;
  WTF::StringImpl *v72;
  char v73;
  WTF::StringImpl *v74;
  char v75;
  IntRect v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;

  {
    v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v58 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v58);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  v79 = a2;
  v15 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v14 + 14, &v79);
  if (!v15)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v77);
    v20 = v77;
    if (v77)
      *(_DWORD *)v77 += 2;
    v74 = v20;
    v75 = 1;
    v79 = 0;
    v80 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(a7, (uint64_t)&v74);
    if (!v75)
      goto LABEL_25;
    result = v74;
    if (!v74)
      goto LABEL_25;
LABEL_22:
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
    else
      *(_DWORD *)result -= 2;
LABEL_25:
    if (!v20)
      return result;
    if (*(_DWORD *)v20 != 2)
    {
      *(_DWORD *)v20 -= 2;
      return result;
    }
    result = v20;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
  }
  v17 = (WebKit::WebPage *)v15;
  if (*(_BYTE *)(a3 + 16))
  {
    {
      v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v59 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v18 = WebKit::WebProcess::WebProcess(v59);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v18;
      if (!*(_BYTE *)(a3 + 16))
      {
        __break(1u);
LABEL_98:
        JUMPOUT(0x19769CBB4);
      }
    }
    v19 = (WebKit::WebFrame *)WebKit::WebProcess::webFrame((uint64_t)v18, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
    if (!v19)
      goto LABEL_18;
  }
  else
  {
    v19 = *(WebKit::WebFrame **)(v15 + 88);
    if (!v19)
      goto LABEL_18;
  }
  v23 = *((_QWORD *)v19 + 3);
  if (!v23 || (v24 = *(_QWORD *)(v23 + 8)) == 0 || *(_BYTE *)(v24 + 144))
  {
LABEL_18:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v77);
    v20 = v77;
    if (v77)
      *(_DWORD *)v77 += 2;
    v72 = v20;
    v73 = 1;
    v79 = 0;
    v80 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(a7, (uint64_t)&v72);
    if (!v73)
      goto LABEL_25;
    result = v72;
    if (!v72)
      goto LABEL_25;
    goto LABEL_22;
  }
  v25 = *(WebKit **)a4;
  if (!*(_QWORD *)a4 || !*((_DWORD *)v25 + 1))
  {
    v27 = 0;
    v28 = 1;
    goto LABEL_39;
  }
  if (!WebKit::isValidNodeHandle(v25, v16))
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(12, &v77);
    v20 = v77;
    if (v77)
      *(_DWORD *)v77 += 2;
    v70 = v20;
    v71 = 1;
    v79 = 0;
    v80 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(a7, (uint64_t)&v70);
    if (!v71)
      goto LABEL_25;
    result = v70;
    if (!v70)
      goto LABEL_25;
    goto LABEL_22;
  }
  v26 = WebKit::WebAutomationSessionProxy::elementForNodeHandle(a1, v19, a4);
  if (!v26)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(11, &v77);
    v20 = v77;
    if (v77)
      *(_DWORD *)v77 += 2;
    v68 = v20;
    v69 = 1;
    v79 = 0;
    v80 = 0;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(a7, (uint64_t)&v68);
    if (!v69)
      goto LABEL_25;
    result = v68;
    if (!v68)
      goto LABEL_25;
    goto LABEL_22;
  }
  v27 = v26;
  if (a5)
    WebCore::Element::scrollIntoViewIfNotVisible(v26);
  v28 = 0;
LABEL_39:
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(21, &v67);
  if (!WebKit::WebPage::localMainFrameView(v17))
    goto LABEL_57;
  if ((v28 & 1) != 0)
  {
    v29 = (WebCore::ScrollView *)WebKit::WebPage::localMainFrameView(v17);
    if (v29)
    {
      if (a6)
      {
        v30 = WebCore::ScrollableArea::visibleContentRect();
      }
      else
      {
        v31 = WebCore::ScrollView::contentsSize(v29);
        v30 = 0;
      }
      goto LABEL_69;
    }
LABEL_57:
    v79 = 0;
    v80 = 0;
    goto LABEL_58;
  }
  v32 = (WebCore::RenderObject *)(*((_QWORD *)v27 + 8) & 0xFFFFFFFFFFFFLL);
  if (!v32)
    goto LABEL_57;
  if ((*(_BYTE *)((*((_QWORD *)v27 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    goto LABEL_98;
  }
  v77 = 0;
  v78 = 0;
  v33 = WebCore::RenderObject::paintingRootRect(v32, (WebCore::LayoutRect *)&v77);
  v36 = v33 - (v35 & 0xFFFFFFC0);
  v37 = v36 + 32;
  v39 = HIDWORD(v33) - (v38 & 0xFFFFFFC0);
  v40 = v39 + 32;
  v30 = (((int)(v36 + 32) >> 6) + (int)v33 / 64) | ((unint64_t)(((int)(v39 + 32) >> 6)
                                                                                                 + SHIDWORD(v33) / 64) << 32);
  v42 = __OFADD__(v36, v41);
  v43 = v36 + v41;
  v44 = (v36 >> 31) + 0x7FFFFFFF;
  if (!v42)
    v44 = v43;
  v45 = (v44 / 64 - (v37 >> 6) + ((int)(v44 - (v43 & 0xFFFFFFC0) + 32) >> 6));
  v42 = __OFADD__(v39, v34);
  v46 = v39 + v34;
  v47 = (v39 >> 31) + 0x7FFFFFFF;
  if (!v42)
    v47 = v46;
  v31 = v45 | ((unint64_t)(v47 / 64 - (v40 >> 6) + ((int)(v47 - (v46 & 0xFFFFFFC0) + 32) >> 6)) << 32);
  v79 = v30;
  v80 = v31;
  if (a6)
  {
    v76.m_location = (IntPoint)WebCore::ScrollableArea::visibleContentRect();
    v76.m_size = v48;
    WebCore::IntRect::intersect((WebCore::IntRect *)&v79, &v76);
    v30 = v79;
    v31 = v80;
  }
LABEL_69:
  v79 = v30;
  v80 = v31;
  if ((int)v31 < 1 || v31 <= 0)
  {
LABEL_58:
    v49 = v67;
    if (v67)
      *(_DWORD *)v67 += 2;
    v65 = v49;
    v66 = 1;
    v77 = 0;
    v78 = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(a7, (uint64_t)&v65);
    if (!v66)
      goto LABEL_91;
    v50 = v65;
    if (!v65)
      goto LABEL_91;
LABEL_83:
    if (*(_DWORD *)v50 != 2)
    {
      *(_DWORD *)v50 -= 2;
      goto LABEL_91;
    }
LABEL_90:
    WTF::StringImpl::destroy(v50, v22);
    goto LABEL_91;
  }
  v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v19 + 3) + 8) + 128) + 8);
  if (v51)
    v52 = *(_BYTE *)(v51 + 144) == 0;
  else
    v52 = 0;
  if (v52)
  {
    LOBYTE(v61) = 0;
    v62 = 0;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v60, (const WebCore::IntRect *)&v79);
    WebCore::LocalFrameView::documentToClientRect();
    v76.m_location.m_x = v54;
    v76.m_location.m_y = v55;
    v76.m_size.m_width = v56;
    v76.m_size.m_height = v57;
    WebCore::IntRect::IntRect((WebCore::IntRect *)&v77, (const FloatRect *)&v76);
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(a7, (uint64_t)&v61);
    if (!v62)
      goto LABEL_91;
    v50 = v61;
    if (!v61)
      goto LABEL_91;
    goto LABEL_83;
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(5, &v76);
  m_location = (WTF::StringImpl *)v76.m_location;
  if (v76.m_location)
    **(_DWORD **)&v76.m_location += 2;
  v63 = m_location;
  v64 = 1;
  v77 = 0;
  v78 = 0;
  WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(a7, (uint64_t)&v63);
  if (v64 && v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v22);
    else
      *(_DWORD *)v63 -= 2;
  }
  if (m_location)
  {
    if (*(_DWORD *)m_location != 2)
    {
      *(_DWORD *)m_location -= 2;
      goto LABEL_91;
    }
    v50 = m_location;
    goto LABEL_90;
  }
LABEL_91:
  result = v67;
  if (v67)
  {
    if (*(_DWORD *)v67 != 2)
    {
      *(_DWORD *)v67 -= 2;
      return result;
    }
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::String>,WebCore::IntRect &&)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  char v8;

  v2 = *a1;
  *a1 = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v7 = v3;
    v8 = 1;
  }
  else
  {
    LOBYTE(v7) = 0;
    v8 = 0;
  }
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 16))(v2, &v7);
  if (v8)
  {
    v5 = v7;
    v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::getCookiesForFrame(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *result;
  uint64_t v11;
  WTF::StringImpl *v12;
  void *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  __int128 v30;
  _DWORD *v31;
  _DWORD *v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WebKit::WebProcess *v38;
  WebKit::WebProcess *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  char v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  _QWORD v46[2];
  WTF::StringImpl *v47;
  char v48;
  _QWORD v49[2];
  WTF::StringImpl *v50;
  char v51;

  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v38 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v38);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
  }
  v44 = a2;
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v7 + 14, &v44);
  if (!v8)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v44);
    v12 = v44;
    if (v44)
      *(_DWORD *)v44 += 2;
    v49[1] = 0;
    v50 = v12;
    v51 = 1;
    v49[0] = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a4, (uint64_t)&v50, v49);
    result = (WTF::StringImpl *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v49, v13);
    if (!v51)
      goto LABEL_24;
    result = v50;
    v50 = 0;
    if (!result)
      goto LABEL_24;
    goto LABEL_22;
  }
  v9 = v8;
  if (*(_BYTE *)(a3 + 16))
  {
    {
      result = (WTF::StringImpl *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v39 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      result = WebKit::WebProcess::WebProcess(v39);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
      if (!*(_BYTE *)(a3 + 16))
      {
        __break(1u);
        goto LABEL_62;
      }
    }
    v11 = WebKit::WebProcess::webFrame((uint64_t)result, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
    if (!v11)
      goto LABEL_18;
  }
  else
  {
    v11 = *(_QWORD *)(v8 + 88);
    if (!v11)
      goto LABEL_18;
  }
  v15 = *(_QWORD *)(v11 + 24);
  if (!v15 || (v16 = *(_QWORD *)(v15 + 8)) == 0 || *(_BYTE *)(v16 + 144) || (v18 = *(_QWORD *)(v16 + 296)) == 0)
  {
LABEL_18:
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v44);
    v12 = v44;
    if (v44)
      *(_DWORD *)v44 += 2;
    v46[1] = 0;
    v47 = v12;
    v48 = 1;
    v46[0] = 0;
    WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a4, (uint64_t)&v47, v46);
    result = (WTF::StringImpl *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v46, v17);
    if (!v48)
      goto LABEL_24;
    result = v47;
    v47 = 0;
    if (!result)
      goto LABEL_24;
LABEL_22:
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      if (!v12)
        return result;
LABEL_25:
      if (*(_DWORD *)v12 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v14);
      *(_DWORD *)v12 -= 2;
      return result;
    }
    *(_DWORD *)result -= 2;
LABEL_24:
    if (!v12)
      return result;
    goto LABEL_25;
  }
  v44 = 0;
  v45 = 0;
  v19 = *(_QWORD *)(v18 + 968);
  if (v19 && *(_DWORD *)(v19 + 4))
  {
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(v9 + 48) + 888) + 40))(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 888), v18, v18 + 968, &v44);
    LOBYTE(v42) = 0;
    v43 = 0;
    v40 = 0;
    LODWORD(v41) = 0;
    HIDWORD(v41) = HIDWORD(v45);
    if (HIDWORD(v45))
    {
      if (HIDWORD(v45) < 0x1E1E1E2)
      {
        v20 = 136 * HIDWORD(v45);
        v21 = WTF::fastMalloc((WTF *)(136 * HIDWORD(v45)));
        LODWORD(v41) = (v20 & 0xFFFFFFF8) / 0x88;
        v40 = v21;
        if (HIDWORD(v45))
        {
          v22 = (_DWORD *)((char *)v44 + 136 * HIDWORD(v45));
          v23 = v21 + 112;
          v24 = (uint64_t)v44 + 112;
          do
          {
            v26 = v24 - 112;
            v25 = *(_DWORD **)(v24 - 112);
            if (v25)
              *v25 += 2;
            *(_QWORD *)(v23 - 112) = v25;
            v27 = *(_DWORD **)(v24 - 104);
            if (v27)
              *v27 += 2;
            *(_QWORD *)(v23 - 104) = v27;
            v28 = *(_DWORD **)(v24 - 96);
            if (v28)
              *v28 += 2;
            *(_QWORD *)(v23 - 96) = v28;
            v29 = *(_DWORD **)(v24 - 88);
            if (v29)
              *v29 += 2;
            *(_QWORD *)(v23 - 88) = v29;
            v30 = *(_OWORD *)(v24 - 80);
            *(_OWORD *)(v23 - 69) = *(_OWORD *)(v24 - 69);
            *(_OWORD *)(v23 - 80) = v30;
            v31 = *(_DWORD **)(v24 - 48);
            if (v31)
              *v31 += 2;
            *(_QWORD *)(v23 - 48) = v31;
            v32 = *(_DWORD **)(v24 - 40);
            if (v32)
              *v32 += 2;
            *(_QWORD *)(v23 - 40) = v32;
            v33 = *(_OWORD *)(v24 - 16);
            *(_OWORD *)(v23 - 32) = *(_OWORD *)(v24 - 32);
            *(_OWORD *)(v23 - 16) = v33;
            v34 = WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v23, v24);
            *(_BYTE *)(v34 + 16) = *(_BYTE *)(v24 + 16);
            v23 = v34 + 136;
            v24 += 136;
          }
          while ((_DWORD *)(v26 + 136) != v22);
        }
        goto LABEL_52;
      }
LABEL_62:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v40 = 0;
    v41 = 0;
  }
LABEL_52:
  WTF::CompletionHandler<void ()(std::optional<WTF::String>,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a4, (uint64_t)&v42, &v40);
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v35);
  if (v43)
  {
    v37 = v42;
    v42 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  return (WTF::StringImpl *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v36);
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::deleteCookie(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *result;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WebKit::WebProcess *v22;
  WebKit::WebProcess *v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;

  {
    v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v9 = WebKit::WebProcess::WebProcess(v22);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v9;
  }
  v28 = a2;
  v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v9 + 14, &v28);
  if (!v10)
  {
    Inspector::Protocol::AutomationHelpers::getEnumConstantValue(9, &v28);
    v14 = v28;
    if (v28)
      *(_DWORD *)v28 += 2;
    v26 = v14;
    v27 = 1;
    result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v26);
    if (!v27)
      goto LABEL_24;
    result = v26;
    v26 = 0;
    if (!result)
      goto LABEL_24;
    goto LABEL_22;
  }
  v11 = v10;
  if (*(_BYTE *)(a3 + 16))
  {
    {
      result = (WTF::StringImpl *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      result = WebKit::WebProcess::WebProcess(v23);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)result;
      if (!*(_BYTE *)(a3 + 16))
      {
        __break(1u);
        return result;
      }
    }
    v13 = WebKit::WebProcess::webFrame((uint64_t)result, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
    if (!v13)
    {
LABEL_18:
      Inspector::Protocol::AutomationHelpers::getEnumConstantValue(10, &v28);
      v14 = v28;
      if (v28)
        *(_DWORD *)v28 += 2;
      v24 = v14;
      v25 = 1;
      result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()(a5, (uint64_t)&v24);
      if (!v25)
        goto LABEL_24;
      result = v24;
      v24 = 0;
      if (!result)
        goto LABEL_24;
LABEL_22:
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        if (!v14)
          return result;
        goto LABEL_25;
      }
      *(_DWORD *)result -= 2;
LABEL_24:
      if (!v14)
        return result;
LABEL_25:
      if (*(_DWORD *)v14 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v14, v15);
      *(_DWORD *)v14 -= 2;
      return result;
    }
  }
  else
  {
    v13 = *(_QWORD *)(v10 + 88);
    if (!v13)
      goto LABEL_18;
  }
  v16 = *(_QWORD *)(v13 + 24);
  if (!v16)
    goto LABEL_18;
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
    goto LABEL_18;
  if (*(_BYTE *)(v17 + 144))
    goto LABEL_18;
  v18 = *(_QWORD *)(v17 + 296);
  if (!v18)
    goto LABEL_18;
  v19 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 888);
  v20 = *a5;
  *a5 = 0;
  v21 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v21 = &off_1E34F43B0;
  *((_QWORD *)v21 + 1) = v20;
  v28 = v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v19 + 56))(v19, v18, v18 + 968, a4, &v28);
  result = v28;
  v28 = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref((_DWORD *)(v5 + 16), a2);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

unint64_t JSC::JSArrayBufferView::length(JSC::JSArrayBufferView *this)
{
  int v1;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  JSC::JSArrayBufferView *v25;
  JSC::JSArrayBufferView *v26;

  v1 = *((unsigned __int8 *)this + 40);
  if ((v1 & 7u) <= 2)
    return *((_QWORD *)this + 3);
  if ((v1 & 8) != 0)
  {
    v3 = *((_QWORD *)this + 2);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v4)
    {
      v5 = *(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || *MEMORY[0x1E0CC10F0] == 0;
      v6 = v3 & 0x3FFFFFFFFLL;
      if (v5 && v6 + v4 == 0)
        return 0;
    }
  }
  v8 = v1 & 6;
  if ((v1 & 6) == 0)
  {
    v9 = 0;
    if ((v1 & 1) != 0)
    {
LABEL_16:
      v23 = v9;
      v25 = this;
      v21 = v8;
      v10 = v1 - 88;
      if ((v1 - 88) <= 0x35)
      {
        if (((1 << v10) & 0x3D) != 0)
        {
          result = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
          goto LABEL_29;
        }
        if (((1 << v10) & 0x3D000000000000) != 0)
        {
          result = *((_QWORD *)this + 6);
          goto LABEL_29;
        }
      }
      if (v1 == 16 || v1 == 48)
      {
        result = JSC::JSArrayBufferView::slowDownAndWasteMemory(this);
LABEL_29:
        if (result)
        {
          *(_DWORD *)result += 2;
          if (!v21)
          {
            if (*(_BYTE *)(result + 64) && (v12 = *(_QWORD *)(result + 32)) != 0)
              v13 = atomic_load((unint64_t *)(v12 + 32));
            else
              v13 = *(_QWORD *)(result + 48);
            v23 = v13;
          }
          if ((*((_BYTE *)v25 + 5) - 42) > 7u)
            LOBYTE(v19) = 0;
          else
            v19 = qword_1978D23D8[(char)(*((_BYTE *)v25 + 5) - 42)];
          v20 = (v23 - *((_QWORD *)v25 + 4)) >> v19;
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)result);
          return v20;
        }
        return result;
      }
      return 0;
    }
    return *((_QWORD *)this + 3);
  }
  v22 = v1 & 6;
  v26 = this;
  v11 = v1 - 88;
  if ((v1 - 88) > 0x35)
    goto LABEL_35;
  if (((1 << v11) & 0x3D) != 0)
  {
    result = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
    goto LABEL_37;
  }
  if (((1 << v11) & 0x3D000000000000) != 0)
  {
    result = *((_QWORD *)this + 6);
  }
  else
  {
LABEL_35:
    if (v1 != 16 && v1 != 48)
      return 0;
    result = JSC::JSArrayBufferView::slowDownAndWasteMemory(this);
  }
LABEL_37:
  if (result)
  {
    *(_DWORD *)result += 2;
    if (*(_BYTE *)(result + 64) && (v14 = *(_QWORD *)(result + 32)) != 0)
      v15 = atomic_load((unint64_t *)(v14 + 32));
    else
      v15 = *(_QWORD *)(result + 48);
    v24 = v15;
    v16 = v15;
    v17 = *((_QWORD *)v26 + 4);
    if ((*((_BYTE *)v26 + 40) & 1) == 0)
    {
      if ((*((_BYTE *)v26 + 5) - 42) > 7u)
        LOBYTE(v18) = 0;
      else
        v18 = qword_1978D23D8[(char)(*((_BYTE *)v26 + 5) - 42)];
      v16 = (*((_QWORD *)v26 + 3) << v18) + v17;
    }
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)result);
    result = 0;
    if (v17 <= v24 && v16 <= v24)
    {
      v9 = v24;
      this = v26;
      v1 = *((unsigned __int8 *)v26 + 40);
      v8 = v22;
      if ((v1 & 1) != 0)
        goto LABEL_16;
      return *((_QWORD *)this + 3);
    }
  }
  return result;
}

uint64_t JSC::Structure::ensurePropertyTableIfNotEmpty(JSC::Structure *this, JSC::VM *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 11);
  if (v2)
    return v2;
  v2 = *((_QWORD *)this + 8);
  if (!v2)
    return v2;
  if (*(_BYTE *)(v2 + 5) != 1 && *(_DWORD *)(v2 + 80) < 2u)
    return 0;
  return JSC::Structure::materializePropertyTable(this, a2);
}

unsigned int *WTF::ThreadSafeRefCounted<OpaqueJSString,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    OpaqueJSString::~OpaqueJSString((OpaqueJSString *)result);
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

WebCore::DOMRectList *WTF::RefCounted<WebCore::DOMRectList>::deref(WebCore::DOMRectList *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::DOMRectList::~DOMRectList(result);
    return (WebCore::DOMRectList *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v16;
  __int16 v17;
  char v18;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v16 = -1640531527;
    v17 = 0;
    v18 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v16, a2);
    v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v16);
    v6 = a2[1];
    v7 = v5 & v4;
    v8 = (uint64_t *)(v3 + 24 * (v5 & v4));
    v9 = *v8;
    v10 = v8[1];
    if (*v8 == *a2 && v10 == v6)
    {
      return 1;
    }
    else
    {
      v12 = 1;
      do
      {
        v13 = v9 | v10;
        result = v13 != 0;
        if (!v13)
          break;
        v7 = (v7 + v12) & v4;
        v14 = (uint64_t *)(v3 + 24 * v7);
        v9 = *v14;
        v10 = v14[1];
        ++v12;
      }
      while (v9 != *a2 || v10 != v6);
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSessionProxy::ensureObserverForFrame(WebKit::WebFrame &)::$_0,void,WebKit::WebAutomationDOMWindowObserver &>::call(uint64_t *a1)
{
  return WebKit::WebAutomationSessionProxy::willDestroyGlobalObjectForFrame(a1[1], a1[2], a1[3]);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebKit::WebAutomationDOMWindowObserver,WTF::RawPtrTraits<WebKit::WebAutomationDOMWindowObserver>,WTF::DefaultRefDerefTraits<WebKit::WebAutomationDOMWindowObserver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  __int16 v27;
  char v28;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = v4 + 24 * v9;
      if (*(_QWORD *)(v11 + 8) != -1)
      {
        if (*(_OWORD *)v11 != 0)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v26 = -1640531527;
          v27 = 0;
          v28 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v26, (_QWORD *)(v4 + 24 * v9));
          v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v26);
          v17 = 0;
          do
          {
            v18 = v16 & v13;
            v19 = (_OWORD *)(v12 + 24 * (v16 & v13));
            v16 = ++v17 + (v16 & v13);
          }
          while (*v19 != 0);
          v20 = v12 + 24 * v18;
          v23 = *(_QWORD *)(v20 + 16);
          v22 = (_QWORD *)(v20 + 16);
          v21 = v23;
          *v22 = 0;
          if (v23)
            WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref((_DWORD *)(v21 + 16), v8);
          *v19 = *(_OWORD *)v11;
          v24 = v4 + 24 * v9;
          v25 = *(_QWORD *)(v24 + 16);
          *(_QWORD *)(v24 + 16) = 0;
          *v22 = v25;
          v15 = *(_QWORD *)(v24 + 16);
          *(_QWORD *)(v24 + 16) = 0;
          if (!v15)
            goto LABEL_19;
LABEL_18:
          WTF::RefCounted<WebKit::WebAutomationDOMWindowObserver>::deref((_DWORD *)(v15 + 16), v8);
          goto LABEL_19;
        }
        v14 = v4 + 24 * v9;
        v15 = *(_QWORD *)(v14 + 16);
        *(_QWORD *)(v14 + 16) = 0;
        if (v15)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  int v13;
  unsigned int v15;
  __int16 v16;
  char v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v15 = -1640531527;
  v16 = 0;
  v17 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v15, a2);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  v7 = a2[1];
  v8 = v6 & v5;
  result = (uint64_t *)(v2 + 32 * v8);
  v10 = *result;
  v11 = result[1];
  if (*result != *a2 || v11 != v7)
  {
    v13 = 1;
    while (v10 | v11)
    {
      v8 = ((_DWORD)v8 + v13) & v5;
      result = (uint64_t *)(v2 + 32 * v8);
      v10 = *result;
      v11 = result[1];
      ++v13;
      if (*result == *a2 && v11 == v7)
        return result;
    }
    if (*a1)
      return (uint64_t *)(*a1 + 32 * *(unsigned int *)(*a1 - 4));
    return 0;
  }
  return result;
}

WTF *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, void *a2)
{
  WTF *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_OWORD *)a2 = xmmword_1978CF7D0;
  result = (WTF *)*((_QWORD *)a2 + 2);
  if (result)
  {
    *((_QWORD *)a2 + 2) = 0;
    *((_DWORD *)a2 + 6) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSessionProxy::takeScreenshot(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String,BOOL,BOOL,unsigned long long)::$_0,void,std::optional<WTF::String>,WebCore::IntRect &&>::call(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  WTF::StringImpl *v4;
  WebKit::WebProcess *v5;
  uint64_t v6;
  WebKit::WebProcess *v8;
  uint64_t v9;
  unsigned int *v10;
  WebKit::WebProcess *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  float v18;
  WebKit::WebProcess *v19;
  uint64_t v20;
  FloatPoint v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WebKit::WebProcess *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *result;
  WTF::StringImpl *v29;
  WebKit::WebProcess *v30;
  WebKit::WebProcess *v31;
  WebKit::WebProcess *v32;
  WebKit::WebProcess *v33;
  WebKit::WebProcess *v34;
  WTF::StringImpl *v35;
  char v36;
  FloatRect v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  CFTypeRef *v40;
  int v41;
  int32x2_t v42[2];
  _BYTE v43[64];
  char v44;

  LOBYTE(v35) = 0;
  v36 = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v4 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    v35 = v4;
    v36 = 1;
    v43[0] = 0;
    v44 = 0;
    {
      v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v5 = WebKit::WebProcess::WebProcess(v30);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
    }
    v6 = *((_QWORD *)v5 + 4);
    v37.m_location = *(FloatPoint *)(a1 + 40);
    v37.m_size = (FloatSize)v43;
    v38 = &v35;
    IPC::Connection::send<Messages::WebAutomationSession::DidTakeScreenshot>(v6, (uint64_t *)&v37);
    goto LABEL_30;
  }
  v43[0] = 0;
  v44 = 0;
  {
    v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v8 = WebKit::WebProcess::WebProcess(v31);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
  }
  v37.m_location = *(FloatPoint *)(a1 + 8);
  v9 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v8 + 14, &v37);
  v10 = (unsigned int *)v9;
  if (*(_BYTE *)(a1 + 32))
  {
    {
      v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v11 = WebKit::WebProcess::WebProcess(v32);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v11;
      if (!*(_BYTE *)(a1 + 32))
      {
        __break(1u);
        goto LABEL_41;
      }
    }
    v12 = WebKit::WebProcess::webFrame((uint64_t)v11, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    v12 = *(_QWORD *)(v9 + 88);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 128) + 8);
  if (v13)
    v14 = *(_BYTE *)(v13 + 144) == 0;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_30;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v41, (const WebCore::IntRect *)a3);
  WebCore::LocalFrameView::clientToDocumentRect();
  v37.m_location.m_x = v15;
  v37.m_location.m_y = v16;
  v37.m_size.m_width = v17;
  v37.m_size.m_height = v18;
  WebCore::IntRect::IntRect((WebCore::IntRect *)v42, &v37);
  WebKit::WebPage::scaledSnapshotWithOptions(v10, v42, 1.0, (FloatSize *)1, &v40);
  a3 = v40;
  if (v40)
  {
    WebKit::WebImage::createHandle((uint64_t)v40, 0, &v37);
    std::__optional_storage_base<WebCore::ShareableBitmapHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ShareableBitmapHandle,false>>((WTF::MachSendRight *)v43, (uint64_t)&v37);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v37);
    {
      v19 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
LABEL_20:
      v20 = *((_QWORD *)v19 + 4);
      v21 = *(FloatPoint *)(a1 + 40);
      v39 = 0;
      v37.m_location = v21;
      v37.m_size = (FloatSize)v43;
      v38 = &v39;
      IPC::Connection::send<Messages::WebAutomationSession::DidTakeScreenshot>(v20, (uint64_t *)&v37);
      v23 = v39;
      v39 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
      CFRelease(a3[1]);
      goto LABEL_30;
    }
LABEL_41:
    v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v19 = WebKit::WebProcess::WebProcess(v33);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v19;
    goto LABEL_20;
  }
  Inspector::Protocol::AutomationHelpers::getEnumConstantValue(21, &v39);
  {
    v24 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v34 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v24 = WebKit::WebProcess::WebProcess(v34);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v24;
  }
  v25 = *((_QWORD *)v24 + 4);
  v37.m_location = *(FloatPoint *)(a1 + 40);
  v37.m_size = (FloatSize)v43;
  v38 = &v39;
  IPC::Connection::send<Messages::WebAutomationSession::DidTakeScreenshot>(v25, (uint64_t *)&v37);
  v27 = v39;
  v39 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
LABEL_30:
  result = std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v43);
  if (v36)
  {
    result = v35;
    v35 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

char *IPC::Connection::send<Messages::WebAutomationSession::DidTakeScreenshot>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1544;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v19 = (IPC::Encoder *)v4;
  v5 = *a2;
  v6 = *(_QWORD *)(v4 + 544);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 8;
  v9 = *(_QWORD *)(v4 + 552);
  if (v9 < v7 + 8)
  {
    v16 = (2 * v9 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v8);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v10 = result;
    memcpy(result, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
    v18 = *(void **)(v4 + 528);
    if (v18 != (void *)(v4 + 16))
      munmap(v18, *(_QWORD *)(v4 + 552));
    *(_QWORD *)(v4 + 528) = v10;
    *(_QWORD *)(v4 + 552) = v17;
    v6 = *(_QWORD *)(v4 + 544);
  }
  else
  {
    v10 = *(char **)(v4 + 528);
  }
  bzero(&v10[v6], v7 - v6);
  *(_QWORD *)(v4 + 544) = v8;
  v11 = (_QWORD *)(*(_QWORD *)(v4 + 528) + v7);
  *(_QWORD *)(v4 + 536) = v11 + 1;
  *v11 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::ShareableBitmapHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::ShareableBitmapHandle>>((IPC::Encoder *)v4, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, (uint64_t *)a2[2]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebAutomationSessionProxy::deleteCookie(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::String>)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F43B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebAutomationSessionProxy::deleteCookie(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::String>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F43B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebAutomationSessionProxy::deleteCookie(WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String,WTF::CompletionHandler<void ()(std::optional<WTF::String>)> &&)::$_0,void>::call(uint64_t a1)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  char v4;

  LOBYTE(v3) = 0;
  v4 = 0;
  result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WTF::String>)>::operator()((uint64_t *)(a1 + 8), (uint64_t)&v3);
  if (v4)
  {
    result = v3;
    v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebAutomationSessionProxy::didReceiveMessage(WTF::StringImpl *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  uint64_t v3;
  OpaqueJSString *v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t *v8;
  WebKit::WebAutomationSessionProxy *v10;
  unint64_t v11;
  char v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  void *v27;
  void *v28;
  int v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  int v46;
  int v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  void *v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  WTF::StringImpl *v62;
  int v63;
  unint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  unsigned __int8 *v82;
  unsigned int v83;
  unsigned __int8 *v84;
  unsigned int v85;
  unint64_t v86;
  int v87;
  int v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  WTF::StringImpl *v97;
  unint64_t v98;
  unsigned int *v100;
  uint64_t v101;
  char v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  unint64_t v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  WebKit *v119;
  WTF::StringImpl *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _BYTE v167[24];
  uint64_t v168;
  WebKit *v169;
  WTF::StringImpl *v170;
  unint64_t v171;
  unsigned __int8 v172;
  __int128 v173;
  OpaqueJSString *v174;
  char v175;
  WTF::StringImpl *v176;
  unsigned __int8 v177;
  WTF::StringImpl *v178;
  uint64_t v179;
  unsigned __int8 v180;
  __int128 v181;
  uint64_t v182;
  unsigned __int8 v183;
  __int128 v184;
  unsigned __int8 v185;

  v8 = (uint64_t *)a3;
  v10 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5F9:
      v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v12
        || (v13 = (WTF::StringImpl *)v11,
            IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v8, (uint64_t)v167), !(_BYTE)v168)|| (this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(v8, &v184), !BYTE8(v184)))
      {
        v23 = 0;
        v13 = 0;
        goto LABEL_113;
      }
      v14 = v8[1];
      v15 = (WTF::StringImpl *)*v8;
      v16 = v8[2] - *v8;
      if (v14 <= v16)
      {
        v131 = 0;
        v132 = 0;
        *v8 = 0;
        v8[1] = 0;
        v133 = v8[3];
        if (v133)
        {
          if (v14)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v133 + 16))(v133);
            v132 = *v8;
            v131 = v8[1];
          }
          else
          {
            v131 = 0;
            v132 = 0;
          }
        }
      }
      else
      {
        v17 = (unsigned __int8 *)v15 + v16;
        v8[2] = (uint64_t)(v17 + 1);
        if (v15)
        {
          v18 = *v17;
          if (v18 < 2)
          {
            LOBYTE(v6) = v18 != 0;
            if (v14 <= v17 + 1 - (unsigned __int8 *)v15)
            {
              v19 = 0;
              v20 = 0;
              *v8 = 0;
              v8[1] = 0;
              v142 = v8[3];
              if (v142)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v142 + 16))(v142);
                v19 = 0;
                v15 = (WTF::StringImpl *)*v8;
                v162 = v8[1];
                v163 = v8[3];
                *v8 = 0;
                v8[1] = 0;
                v20 = 0;
                if (v163)
                {
                  if (v162)
                  {
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v163 + 16))(v163, v15);
                    v20 = *v8;
                    v19 = v8[1];
                  }
                }
              }
            }
            else
            {
              v8[2] = (uint64_t)(v17 + 2);
              v5 = v17[1];
              v19 = v14;
              v20 = (unint64_t)v15;
              if (v5 < 2)
              {
                v21 = v168;
                if (!(_BYTE)v168)
                  goto LABEL_154;
                v22 = 0;
                v181 = *(_OWORD *)v167;
                v182 = *(_QWORD *)&v167[16];
                v4 = (OpaqueJSString *)v184;
                *(_QWORD *)&v184 = 0;
                v23 = 1;
LABEL_181:
                if (BYTE8(v184))
                {
                  this = (WTF::StringImpl *)v184;
                  *(_QWORD *)&v184 = 0;
                  if (this)
                  {
                    if (*(_DWORD *)this == 2)
                      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v15);
                    else
                      *(_DWORD *)this -= 2;
                  }
                }
                if (!v22)
                {
LABEL_187:
                  if (v23)
                  {
                    this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
                    if (!(_BYTE)v34)
                      goto LABEL_197;
                    *(_QWORD *)v167 = this;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v167[8], a2);
                    v143 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                    *(_QWORD *)v143 = off_1E34F4478;
                    *((_QWORD *)v143 + 1) = *(_QWORD *)v167;
                    v144 = *(_QWORD *)&v167[8];
                    *(_QWORD *)&v167[8] = 0;
                    *((_QWORD *)v143 + 2) = v144;
                    v178 = v143;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v167[8]);
                    *(_OWORD *)v167 = v181;
                    *(_QWORD *)&v167[16] = v182;
                    *(_QWORD *)&v184 = v4;
                    WebKit::WebAutomationSessionProxy::computeElementLayout(v10, v13, (uint64_t)v167, (WebKit **)&v184, v6 != 0, v5, (uint64_t *)&v178);
                    goto LABEL_190;
                  }
                  return this;
                }
LABEL_113:
                v109 = *v8;
                v110 = v8[1];
                *v8 = 0;
                v8[1] = 0;
                this = (WTF::StringImpl *)v8[3];
                if (this && v110)
                  this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)this
                                                                                                  + 16))(this, v109);
                goto LABEL_187;
              }
            }
            *v8 = 0;
            v8[1] = 0;
            this = (WTF::StringImpl *)v8[3];
            if (this && v19)
              this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, unint64_t, unint64_t))(*(_QWORD *)this + 16))(this, v20, v19);
LABEL_180:
            v13 = 0;
            v23 = 0;
            v22 = 1;
            goto LABEL_181;
          }
LABEL_167:
          *v8 = 0;
          v8[1] = 0;
          this = (WTF::StringImpl *)v8[3];
          if (this && v14)
            this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)this + 16))(this, v15);
          goto LABEL_180;
        }
        v131 = v14;
        v132 = 0;
      }
      v14 = 0;
      v15 = 0;
      *v8 = 0;
      v8[1] = 0;
      v134 = v8[3];
      if (v134)
      {
        if (v131)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v134 + 16))(v134, v132, v131);
          v15 = (WTF::StringImpl *)*v8;
          v14 = v8[1];
        }
        else
        {
          v14 = 0;
          v15 = 0;
        }
      }
      goto LABEL_167;
    case 0x5FA:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String>>((uint64_t)v167, (uint64_t *)a3);
      if ((_BYTE)v170)
      {
        v70 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if (!(_BYTE)v34)
          goto LABEL_152;
        *(_QWORD *)&v181 = v70;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v181 + 1, a2);
        v71 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v71 = off_1E34F4590;
        *((_QWORD *)v71 + 1) = v181;
        v72 = *((_QWORD *)&v181 + 1);
        *((_QWORD *)&v181 + 1) = 0;
        *((_QWORD *)v71 + 2) = v72;
        v178 = v71;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v181 + 1);
        v181 = *(_OWORD *)&v167[8];
        v182 = v168;
        *(_QWORD *)&v184 = v169;
        WebKit::WebAutomationSessionProxy::deleteCookie((uint64_t)v10, *(WTF::StringImpl **)v167, (uint64_t)&v181, (uint64_t)&v184, (uint64_t *)&v178);
        goto LABEL_190;
      }
      return this;
    case 0x5FB:
      v51 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v52)
        goto LABEL_157;
      v53 = v51;
      IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v8, (uint64_t)&v181);
      if (!v183)
        goto LABEL_157;
      IPC::Decoder::decode<WTF::String>(v8, &v176);
      if (!v177)
        goto LABEL_157;
      IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, v54, (uint64_t)&v178);
      if (!v180)
      {
        v63 = 0;
        v167[0] = 0;
        v175 = 0;
        goto LABEL_221;
      }
      v56 = v8[1];
      v55 = (char *)*v8;
      v57 = v8[2] - *v8;
      if (v56 <= v57)
      {
        v149 = 0;
        v150 = 0;
        *v8 = 0;
        v8[1] = 0;
        v151 = v8[3];
        if (v151)
        {
          if (v56)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v151 + 16))(v151);
            v150 = *v8;
            v149 = v8[1];
          }
          else
          {
            v149 = 0;
            v150 = 0;
          }
        }
        goto LABEL_212;
      }
      v58 = &v55[v57];
      v8[2] = (uint64_t)(v58 + 1);
      if (!v55)
      {
        v149 = v56;
        v150 = 0;
LABEL_212:
        v56 = 0;
        v55 = 0;
        *v8 = 0;
        v8[1] = 0;
        v152 = v8[3];
        if (v152)
        {
          if (v149)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v152 + 16))(v152, v150, v149);
            v55 = (char *)*v8;
            v56 = v8[1];
          }
          else
          {
            v56 = 0;
            v55 = 0;
          }
        }
        goto LABEL_213;
      }
      v59 = *v58;
      if (v59 < 2)
      {
        LOBYTE(v3) = v59 != 0;
        IPC::Decoder::decode<std::optional<double>>(v8, &v184);
        if (v185)
        {
          v60 = v8[1];
          v55 = (char *)*v8;
          v61 = ((v8[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *v8;
          if (v60 < v61 || v60 - v61 <= 7)
          {
            v154 = 0;
            v155 = 0;
            *v8 = 0;
            v8[1] = 0;
            v156 = v8[3];
            if (v156)
            {
              if (v60)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v156 + 16))(v156);
                v155 = *v8;
                v154 = v8[1];
              }
              else
              {
                v154 = 0;
                v155 = 0;
              }
            }
          }
          else
          {
            v21 = (unint64_t)&v55[v61];
            v8[2] = v21 + 8;
            if (v55)
            {
              v20 = v183;
              if (!v183)
                goto LABEL_154;
              v20 = v177;
              if (!v177)
                goto LABEL_154;
              v20 = v180;
              if (!v180)
                goto LABEL_154;
              v4 = *(OpaqueJSString **)v21;
              *(_QWORD *)v167 = v53;
              *(_OWORD *)&v167[8] = v181;
              v62 = v176;
              v176 = 0;
              v168 = v182;
              v169 = v62;
              v6 = v178;
              v170 = v178;
              v5 = v179;
              LODWORD(v53) = HIDWORD(v179);
              v178 = 0;
              v179 = 0;
              v171 = __PAIR64__(v53, v5);
              v172 = v3;
              v173 = v184;
              v63 = 1;
              v174 = v4;
              goto LABEL_218;
            }
            v154 = v60;
            v155 = 0;
          }
          *v8 = 0;
          v8[1] = 0;
          v157 = v8[3];
          if (v157 && v154)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v157 + 16))(v157, v155);
        }
        v63 = 0;
        v167[0] = 0;
LABEL_218:
        v175 = v63;
        goto LABEL_219;
      }
LABEL_213:
      *v8 = 0;
      v8[1] = 0;
      v153 = v8[3];
      if (v153 && v56)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v153 + 16))(v153, v55);
      v63 = 0;
      v167[0] = 0;
      v175 = 0;
LABEL_219:
      if (v180)
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v178, v55);
LABEL_221:
      if (v177)
      {
        v158 = v176;
        v176 = 0;
        if (v158)
        {
          if (*(_DWORD *)v158 == 2)
            WTF::StringImpl::destroy(v158, (WTF::StringImpl *)v55);
          else
            *(_DWORD *)v158 -= 2;
        }
      }
      if (!v63)
        goto LABEL_157;
      v182 = v168;
      v181 = *(_OWORD *)&v167[8];
      v170 = 0;
      v171 = 0;
      *(_QWORD *)&v184 = v6;
      *((_QWORD *)&v184 + 1) = __PAIR64__(v53, v5);
      WebKit::WebAutomationSessionProxy::evaluateJavaScriptFunction((uint64_t *)v10, *(OpaqueJSString **)v167, (uint64_t)&v181, (OpaqueJSString *)&v169, (uint64_t)&v184, v3 != 0, v173, SBYTE8(v173), v4);
      this = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v184, v159);
      if (v175)
        goto LABEL_148;
      return this;
    case 0x5FC:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String>>((uint64_t)v167, (uint64_t *)a3);
      if ((_BYTE)v170)
      {
        v64 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if (!(_BYTE)v34)
          goto LABEL_152;
        *(_QWORD *)&v181 = v64;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v181 + 1, a2);
        v65 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v65 = off_1E34F44C8;
        *((_QWORD *)v65 + 1) = v181;
        v66 = *((_QWORD *)&v181 + 1);
        *((_QWORD *)&v181 + 1) = 0;
        *((_QWORD *)v65 + 2) = v66;
        v178 = v65;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v181 + 1);
        v181 = *(_OWORD *)&v167[8];
        v182 = v168;
        *(_QWORD *)&v184 = v169;
        WebKit::WebAutomationSessionProxy::getComputedLabel(v10, *(WTF::StringImpl **)v167, &v181, (WTF::StringImpl **)&v184, (uint64_t *)&v178);
        goto LABEL_190;
      }
      return this;
    case 0x5FD:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String>>((uint64_t)v167, (uint64_t *)a3);
      if ((_BYTE)v170)
      {
        v33 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if (!(_BYTE)v34)
          goto LABEL_152;
        *(_QWORD *)&v181 = v33;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v181 + 1, a2);
        v35 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(_QWORD *)v35 = off_1E34F44A0;
        *((_QWORD *)v35 + 1) = v181;
        v36 = *((_QWORD *)&v181 + 1);
        *((_QWORD *)&v181 + 1) = 0;
        *((_QWORD *)v35 + 2) = v36;
        v178 = v35;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v181 + 1);
        v181 = *(_OWORD *)&v167[8];
        v182 = v168;
        *(_QWORD *)&v184 = v169;
        WebKit::WebAutomationSessionProxy::getComputedRole(v10, *(WTF::StringImpl **)v167, &v181, (WTF::StringImpl **)&v184, (uint64_t *)&v178);
        goto LABEL_190;
      }
      return this;
    case 0x5FE:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>((uint64_t)v167, (uint64_t *)a3);
      if ((_BYTE)v169)
      {
        this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if (v73)
        {
          *(_QWORD *)&v181 = this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v181 + 1, a2);
          v74 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v74 = off_1E34F4568;
          v74[1] = v181;
          v75 = *((_QWORD *)&v181 + 1);
          *((_QWORD *)&v181 + 1) = 0;
          v74[2] = v75;
          *(_QWORD *)&v184 = v74;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v181 + 1);
          v181 = *(_OWORD *)&v167[8];
          v182 = v168;
          WebKit::WebAutomationSessionProxy::getCookiesForFrame((uint64_t)v10, *(WTF::StringImpl **)v167, (uint64_t)&v181, (uint64_t *)&v184);
          goto LABEL_102;
        }
      }
      return this;
    case 0x5FF:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String>>((uint64_t)v167, (uint64_t *)a3);
      if ((_BYTE)v170)
      {
        v89 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if (!(_BYTE)v34)
          goto LABEL_149;
        *(_QWORD *)&v181 = v89;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v181 + 1, a2);
        v90 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v90 = off_1E34F4428;
        v90[1] = v181;
        v91 = *((_QWORD *)&v181 + 1);
        *((_QWORD *)&v181 + 1) = 0;
        v90[2] = v91;
        *(_QWORD *)&v184 = v90;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v181 + 1);
        v181 = *(_OWORD *)&v167[8];
        v182 = v168;
        WebKit::WebAutomationSessionProxy::resolveChildFrameWithName((uint64_t)v10, *(WTF::StringImpl **)v167, (uint64_t)&v181, &v169, (uint64_t *)&v184);
        goto LABEL_85;
      }
      return this;
    case 0x600:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String>>((uint64_t)v167, (uint64_t *)a3);
      if ((_BYTE)v170)
      {
        v67 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if (!(_BYTE)v34)
          goto LABEL_149;
        *(_QWORD *)&v181 = v67;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v181 + 1, a2);
        v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v68 = off_1E34F4400;
        v68[1] = v181;
        v69 = *((_QWORD *)&v181 + 1);
        *((_QWORD *)&v181 + 1) = 0;
        v68[2] = v69;
        *(_QWORD *)&v184 = v68;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v181 + 1);
        v181 = *(_OWORD *)&v167[8];
        v182 = v168;
        WebKit::WebAutomationSessionProxy::resolveChildFrameWithNodeHandle(v10, *(WTF::StringImpl **)v167, (uint64_t)&v181, &v169, (uint64_t *)&v184);
LABEL_85:
        this = (WTF::StringImpl *)v184;
        *(_QWORD *)&v184 = 0;
        if (this)
          this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
        if ((_BYTE)v170)
          goto LABEL_149;
      }
      return this;
    case 0x601:
      v95 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v96)
        goto LABEL_157;
      v97 = (WTF::StringImpl *)v95;
      IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v8, (uint64_t)v167);
      if (!(_BYTE)v168)
        goto LABEL_157;
      v20 = v8[1];
      v21 = *v8;
      v98 = ((v8[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *v8;
      if (v20 < v98 || v20 - v98 <= 3)
        goto LABEL_155;
      v100 = (unsigned int *)(v21 + v98);
      v8[2] = (uint64_t)(v100 + 1);
      if (!v21)
      {
        v121 = v20;
        v122 = 0;
        goto LABEL_156;
      }
      v101 = *v100;
      v181 = *(_OWORD *)v167;
      v182 = *(_QWORD *)&v167[16];
      this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
      if (v102)
      {
        *(_QWORD *)v167 = this;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v167[8], a2);
        v103 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v103 = off_1E34F43D8;
        v103[1] = *(_QWORD *)v167;
        v104 = *(_QWORD *)&v167[8];
        *(_QWORD *)&v167[8] = 0;
        v103[2] = v104;
        *(_QWORD *)&v184 = v103;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v167[8]);
        *(_OWORD *)v167 = v181;
        *(_QWORD *)&v167[16] = v182;
        WebKit::WebAutomationSessionProxy::resolveChildFrameWithOrdinal((uint64_t)v10, v97, (uint64_t)v167, v101, (uint64_t *)&v184);
        goto LABEL_102;
      }
      return this;
    case 0x602:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>((uint64_t)v167, (uint64_t *)a3);
      if ((_BYTE)v169)
      {
        this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if (v48)
        {
          *(_QWORD *)&v181 = this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v181 + 1, a2);
          v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v49 = off_1E34F4450;
          v49[1] = v181;
          v50 = *((_QWORD *)&v181 + 1);
          *((_QWORD *)&v181 + 1) = 0;
          v49[2] = v50;
          *(_QWORD *)&v184 = v49;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v181 + 1);
          v181 = *(_OWORD *)&v167[8];
          v182 = v168;
          WebKit::WebAutomationSessionProxy::resolveParentFrame((uint64_t)v10, *(WTF::StringImpl **)v167, (uint64_t)&v181, (uint64_t *)&v184);
LABEL_102:
          this = (WTF::StringImpl *)v184;
          *(_QWORD *)&v184 = 0;
          if (this)
            return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
        }
      }
      return this;
    case 0x603:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String>>((uint64_t)v167, (uint64_t *)a3);
      if ((_BYTE)v170)
      {
        v92 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
        if ((_BYTE)v34)
        {
          *(_QWORD *)&v181 = v92;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v181 + 1, a2);
          v93 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v93 = off_1E34F44F0;
          *((_QWORD *)v93 + 1) = v181;
          v94 = *((_QWORD *)&v181 + 1);
          *((_QWORD *)&v181 + 1) = 0;
          *((_QWORD *)v93 + 2) = v94;
          v178 = v93;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v181 + 1);
          v181 = *(_OWORD *)&v167[8];
          v182 = v168;
          *(_QWORD *)&v184 = v169;
          WebKit::WebAutomationSessionProxy::selectOptionElement(v10, *(WTF::StringImpl **)v167, (uint64_t)&v181, (WebKit **)&v184, (uint64_t *)&v178);
          goto LABEL_190;
        }
LABEL_152:
        this = v169;
        if (v169)
          goto LABEL_150;
      }
      return this;
    case 0x604:
      v24 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (v25
        && (v26 = v24,
            IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v8, (uint64_t)&v181), v183)&& (IPC::Decoder::decode<WTF::String>(v8, &v178), (_BYTE)v179))
      {
        this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, v27, (uint64_t)&v184);
        v29 = v185;
        if (v185)
        {
          v21 = v183;
          if (!v183)
            goto LABEL_154;
          v21 = v179;
          if (!(_BYTE)v179)
            goto LABEL_154;
          *(_QWORD *)v167 = v26;
          *(_OWORD *)&v167[8] = v181;
          v30 = v178;
          v178 = 0;
          v168 = v182;
          v169 = v30;
          v31 = *((_QWORD *)&v184 + 1);
          v170 = (WTF::StringImpl *)v184;
          v184 = 0uLL;
          v171 = v31;
          v32 = 1;
          v172 = 1;
          this = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v184, v28);
        }
        else
        {
          v32 = 0;
          v167[0] = 0;
          v172 = 0;
        }
        if ((_BYTE)v179)
        {
          this = v178;
          v178 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v28);
            else
              *(_DWORD *)this -= 2;
          }
        }
        if (v29)
        {
LABEL_138:
          if (v32)
          {
            v115 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
            if (!(_BYTE)v116)
              goto LABEL_148;
            *(_QWORD *)&v181 = v115;
            v8 = (uint64_t *)&v181 + 1;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v181 + 1, a2);
            v117 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v117 = off_1E34F4518;
            *((_QWORD *)v117 + 1) = v181;
            v118 = *((_QWORD *)&v181 + 1);
            *((_QWORD *)&v181 + 1) = 0;
            *((_QWORD *)v117 + 2) = v118;
            v178 = v117;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v181 + 1);
            v21 = v172;
            if (!v172)
              goto LABEL_154;
            v181 = *(_OWORD *)&v167[8];
            v119 = v169;
            v182 = v168;
            v169 = 0;
            *(_QWORD *)&v184 = v119;
            WebKit::WebAutomationSessionProxy::setFilesForInputFileUpload(v10, *(WTF::StringImpl **)v167, (uint64_t)&v181, (const WTF::String *)&v184, (uint64_t *)&v170, (uint64_t *)&v178);
            v120 = (WTF::StringImpl *)v184;
            *(_QWORD *)&v184 = 0;
            if (v120)
            {
              if (*(_DWORD *)v120 == 2)
                WTF::StringImpl::destroy(v120, v116);
              else
                *(_DWORD *)v120 -= 2;
            }
            this = v178;
            v178 = 0;
            if (this)
              this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
            if (v172)
            {
LABEL_148:
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v170, v116);
LABEL_149:
              this = v169;
              v169 = 0;
              if (this)
                goto LABEL_150;
            }
          }
          return this;
        }
      }
      else
      {
        v32 = 0;
        v167[0] = 0;
        v172 = 0;
      }
      v105 = *v8;
      v106 = v8[1];
      *v8 = 0;
      v8[1] = 0;
      this = (WTF::StringImpl *)v8[3];
      if (this && v106)
        this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)this + 16))(this, v105);
      goto LABEL_138;
    case 0x605:
      v38 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v39
        || (v40 = v38,
            IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v8, (uint64_t)v167), !(_BYTE)v168)|| (this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(v8, &v184), !BYTE8(v184)))
      {
        v47 = 0;
        v40 = 0;
        goto LABEL_109;
      }
      v41 = v8[1];
      v42 = (WTF::StringImpl *)*v8;
      v43 = v8[2] - *v8;
      if (v41 <= v43)
      {
        v127 = 0;
        v128 = 0;
        *v8 = 0;
        v8[1] = 0;
        v129 = v8[3];
        if (v129)
        {
          if (v41)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v129 + 16))(v129);
            v128 = *v8;
            v127 = v8[1];
          }
          else
          {
            v127 = 0;
            v128 = 0;
          }
        }
      }
      else
      {
        v44 = (unsigned __int8 *)v42 + v43;
        v8[2] = (uint64_t)(v44 + 1);
        if (v42)
        {
          v45 = *v44;
          if (v45 < 2)
          {
            LOBYTE(v5) = v45 != 0;
            if (v41 <= v44 + 1 - (unsigned __int8 *)v42)
            {
              v139 = 0;
              v140 = 0;
              *v8 = 0;
              v8[1] = 0;
              v141 = v8[3];
              if (v141)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v141 + 16))(v141);
                v139 = 0;
                v42 = (WTF::StringImpl *)*v8;
                v160 = v8[1];
                v161 = v8[3];
                *v8 = 0;
                v8[1] = 0;
                v140 = 0;
                if (v161)
                {
                  if (v160)
                  {
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v161 + 16))(v161, v42);
                    v140 = *v8;
                    v139 = v8[1];
                  }
                }
              }
            }
            else
            {
              v8[2] = (uint64_t)(v44 + 2);
              v21 = v44[1];
              if (v21 < 2)
              {
                v20 = v168;
                if (!(_BYTE)v168)
                  goto LABEL_154;
                v46 = 0;
                LOBYTE(v6) = (_DWORD)v21 != 0;
                v181 = *(_OWORD *)v167;
                v182 = *(_QWORD *)&v167[16];
                v4 = (OpaqueJSString *)v184;
                *(_QWORD *)&v184 = 0;
                v47 = 1;
LABEL_32:
                if (BYTE8(v184))
                {
                  this = (WTF::StringImpl *)v184;
                  *(_QWORD *)&v184 = 0;
                  if (this)
                  {
                    if (*(_DWORD *)this == 2)
                      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v42);
                    else
                      *(_DWORD *)this -= 2;
                  }
                }
                if (!v46)
                {
LABEL_133:
                  if (v47)
                  {
                    this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(v8);
                    if ((_BYTE)v34)
                    {
                      *(_QWORD *)v167 = this;
                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v167[8], a2);
                      v113 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
                      *(_QWORD *)v113 = off_1E34F4540;
                      *((_QWORD *)v113 + 1) = *(_QWORD *)v167;
                      v114 = *(_QWORD *)&v167[8];
                      *(_QWORD *)&v167[8] = 0;
                      *((_QWORD *)v113 + 2) = v114;
                      v178 = v113;
                      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v167[8]);
                      *(_OWORD *)v167 = v181;
                      *(_QWORD *)&v167[16] = v182;
                      *(_QWORD *)&v184 = v4;
                      WebKit::WebAutomationSessionProxy::snapshotRectForScreenshot(v10, v40, (uint64_t)v167, (const WTF::String *)&v184, v5 != 0, v6 != 0, (uint64_t *)&v178);
LABEL_190:
                      v145 = (WTF::StringImpl *)v184;
                      *(_QWORD *)&v184 = 0;
                      if (v145)
                      {
                        if (*(_DWORD *)v145 == 2)
                          WTF::StringImpl::destroy(v145, v37);
                        else
                          *(_DWORD *)v145 -= 2;
                      }
                      this = v178;
                      v178 = 0;
                      if (this)
                        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
                    }
                    else
                    {
LABEL_197:
                      if (v4)
                      {
                        if (*(_DWORD *)v4 == 2)
                        {
                          this = v4;
                          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v34);
                        }
                        *(_DWORD *)v4 -= 2;
                      }
                    }
                  }
                  return this;
                }
LABEL_109:
                v107 = *v8;
                v108 = v8[1];
                *v8 = 0;
                v8[1] = 0;
                this = (WTF::StringImpl *)v8[3];
                if (this && v108)
                  this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)this
                                                                                                  + 16))(this, v107);
                goto LABEL_133;
              }
              v139 = v41;
              v140 = (uint64_t)v42;
            }
            *v8 = 0;
            v8[1] = 0;
            this = (WTF::StringImpl *)v8[3];
            if (this && v139)
              this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, unint64_t))(*(_QWORD *)this + 16))(this, v140, v139);
LABEL_177:
            v40 = 0;
            v47 = 0;
            v46 = 1;
            goto LABEL_32;
          }
LABEL_162:
          *v8 = 0;
          v8[1] = 0;
          this = (WTF::StringImpl *)v8[3];
          if (this && v41)
            this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)this + 16))(this, v42);
          goto LABEL_177;
        }
        v127 = v41;
        v128 = 0;
      }
      v41 = 0;
      v42 = 0;
      *v8 = 0;
      v8[1] = 0;
      v130 = v8[3];
      if (v130)
      {
        if (v127)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v130 + 16))(v130, v128, v127);
          v42 = (WTF::StringImpl *)*v8;
          v41 = v8[1];
        }
        else
        {
          v41 = 0;
          v42 = 0;
        }
      }
      goto LABEL_162;
    case 0x606:
      v76 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!v77
        || (v78 = v76,
            IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(v8, (uint64_t)v167), !(_BYTE)v168)|| (this = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(v8, &v184), !BYTE8(v184)))
      {
        v88 = 0;
        v78 = 0;
        goto LABEL_117;
      }
      v79 = v8[1];
      v80 = (WTF::StringImpl *)*v8;
      v81 = v8[2] - *v8;
      if (v79 <= v81)
      {
        v135 = 0;
        v136 = 0;
        *v8 = 0;
        v8[1] = 0;
        v137 = v8[3];
        if (v137)
        {
          if (v79)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v137 + 16))(v137);
            v136 = *v8;
            v135 = v8[1];
          }
          else
          {
            v135 = 0;
            v136 = 0;
          }
        }
      }
      else
      {
        v82 = (unsigned __int8 *)v80 + v81;
        v8[2] = (uint64_t)(v82 + 1);
        if (v80)
        {
          v83 = *v82;
          if (v83 < 2)
          {
            LOBYTE(v6) = v83 != 0;
            if (v79 <= v82 + 1 - (unsigned __int8 *)v80)
            {
              v146 = 0;
              v147 = 0;
              *v8 = 0;
              v8[1] = 0;
              v148 = v8[3];
              if (v148)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v148 + 16))(v148);
                v146 = 0;
                v80 = (WTF::StringImpl *)*v8;
                v164 = v8[1];
                v165 = v8[3];
                *v8 = 0;
                v8[1] = 0;
                v147 = 0;
                if (v165)
                {
                  if (v164)
                  {
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v165 + 16))(v165, v80);
                    v147 = *v8;
                    v146 = v8[1];
                  }
                }
              }
            }
            else
            {
              v84 = v82 + 2;
              v8[2] = (uint64_t)(v82 + 2);
              v85 = v82[1];
              if (v85 < 2)
              {
                LOBYTE(v5) = v85 != 0;
                v86 = ((unint64_t)(v84 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v80;
                if (v79 >= v86 && v79 - v86 > 7)
                {
                  v21 = (unint64_t)(v84 + 7) & 0xFFFFFFFFFFFFFFF8;
                  v8[2] = v21 + 8;
                  v20 = v168;
                  if (!(_BYTE)v168)
                  {
LABEL_154:
                    __break(1u);
LABEL_155:
                    v121 = 0;
                    v122 = 0;
                    *v8 = 0;
                    v8[1] = 0;
                    v123 = v8[3];
                    if (v123)
                    {
                      if (v20)
                      {
                        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v123 + 16))(v123, v21, v20);
                        v122 = *v8;
                        v121 = v8[1];
                      }
                      else
                      {
                        v121 = 0;
                        v122 = 0;
                      }
                    }
LABEL_156:
                    *v8 = 0;
                    v8[1] = 0;
                    v124 = v8[3];
                    if (v124 && v121)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v124 + 16))(v124, v122);
LABEL_157:
                    v125 = *v8;
                    v126 = v8[1];
                    *v8 = 0;
                    v8[1] = 0;
                    this = (WTF::StringImpl *)v8[3];
                    if (this && v126)
                      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)this + 16))(this, v125);
                    return this;
                  }
                  v87 = 0;
                  v3 = *(_QWORD *)v21;
                  v181 = *(_OWORD *)v167;
                  v182 = *(_QWORD *)&v167[16];
                  v7 = v184;
                  *(_QWORD *)&v184 = 0;
                  v88 = 1;
LABEL_78:
                  if (BYTE8(v184))
                  {
                    this = (WTF::StringImpl *)v184;
                    *(_QWORD *)&v184 = 0;
                    if (this)
                    {
                      if (*(_DWORD *)this == 2)
                        this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v80);
                      else
                        *(_DWORD *)this -= 2;
                    }
                  }
                  if (!v87)
                  {
LABEL_128:
                    if (v88)
                    {
                      *(_OWORD *)v167 = v181;
                      *(_QWORD *)&v167[16] = v182;
                      *(_QWORD *)&v184 = v7;
                      WebKit::WebAutomationSessionProxy::takeScreenshot(v10, v78, (__int128 *)v167, (WTF::StringImpl **)&v184, v6 != 0, v5 != 0, v3);
                      this = (WTF::StringImpl *)v184;
                      *(_QWORD *)&v184 = 0;
                      if (this)
                      {
LABEL_150:
                        if (*(_DWORD *)this == 2)
                          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v34);
                        else
                          *(_DWORD *)this -= 2;
                      }
                    }
                    return this;
                  }
LABEL_117:
                  v111 = *v8;
                  v112 = v8[1];
                  *v8 = 0;
                  v8[1] = 0;
                  this = (WTF::StringImpl *)v8[3];
                  if (this && v112)
                    this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)this + 16))(this, v111);
                  goto LABEL_128;
                }
                *v8 = 0;
                v8[1] = 0;
                this = (WTF::StringImpl *)v8[3];
                if (this)
                {
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)this + 16))(this);
                  v88 = 0;
                  v78 = 0;
                  v80 = (WTF::StringImpl *)*v8;
                  v166 = v8[1];
                  this = (WTF::StringImpl *)v8[3];
                  v87 = 1;
                  *v8 = 0;
                  v8[1] = 0;
                  if (this && v166)
                  {
                    this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)this + 16))(this, v80);
                    v78 = 0;
                    v88 = 0;
                  }
                  goto LABEL_78;
                }
LABEL_209:
                v78 = 0;
                v88 = 0;
                v87 = 1;
                goto LABEL_78;
              }
              v146 = v79;
              v147 = (uint64_t)v80;
            }
            *v8 = 0;
            v8[1] = 0;
            this = (WTF::StringImpl *)v8[3];
            if (this && v146)
              this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, unint64_t))(*(_QWORD *)this + 16))(this, v147, v146);
            goto LABEL_209;
          }
LABEL_172:
          *v8 = 0;
          v8[1] = 0;
          this = (WTF::StringImpl *)v8[3];
          if (this && v79)
            this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)this + 16))(this, v80);
          goto LABEL_209;
        }
        v135 = v79;
        v136 = 0;
      }
      v79 = 0;
      v80 = 0;
      *v8 = 0;
      v8[1] = 0;
      v138 = v8[3];
      if (v138)
      {
        if (v135)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v138 + 16))(v138, v136, v135);
          v80 = (WTF::StringImpl *)*v8;
          v79 = v8[1];
        }
        else
        {
          v79 = 0;
          v80 = 0;
        }
      }
      goto LABEL_172;
    default:
      return this;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy28ResolveChildFrameWithOrdinalEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEEjONS_17CompletionHandlerIFvNSG_INS_6StringEEESL_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F43D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy28ResolveChildFrameWithOrdinalEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEEjONS_17CompletionHandlerIFvNSG_INS_6StringEEESL_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F43D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy28ResolveChildFrameWithOrdinalEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEEjONS_17CompletionHandlerIFvNSG_INS_6StringEEESL_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SL_EE4callESO_SL_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3151;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5
    && (v6 = v4,
        IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2, (uint64_t)&v12), v14)&& (result = IPC::Decoder::decode<WTF::String>(a2, &v15), v16))
  {
    if (v14)
    {
      *(_QWORD *)a1 = v6;
      *(_OWORD *)(a1 + 8) = v12;
      v8 = v15;
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v8;
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 40) = 0;
    v9 = *a2;
    v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy31ResolveChildFrameWithNodeHandleEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEERKNS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EESL_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F4400;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy31ResolveChildFrameWithNodeHandleEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEERKNS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EESL_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F4400;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy31ResolveChildFrameWithNodeHandleEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEERKNS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EESL_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SL_EE4callESQ_SL_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3150;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy25ResolveChildFrameWithNameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEERKNS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EESL_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F4428;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy25ResolveChildFrameWithNameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEERKNS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EESL_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F4428;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy25ResolveChildFrameWithNameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEERKNS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EESL_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSQ_SL_EE4callESQ_SL_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3149;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5
    && (v6 = v4,
        result = IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a2, (uint64_t)&v11), v13))
  {
    *(_QWORD *)a1 = v6;
    *(_OWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 24) = v12;
    *(_BYTE *)(a1 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    v8 = *a2;
    v9 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (uint64_t *)a2[3];
    if (result)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v8);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy18ResolveParentFrameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEEONS_17CompletionHandlerIFvNSG_INS_6StringEEESL_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F4450;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy18ResolveParentFrameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEEONS_17CompletionHandlerIFvNSG_INS_6StringEEESL_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F4450;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy18ResolveParentFrameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEEONS_17CompletionHandlerIFvNSG_INS_6StringEEESL_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SL_EE4callESO_SL_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3152;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy20ComputeElementLayoutEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEbNS7_16CoordinateSystemEONS_17CompletionHandlerIFvNSG_ISM_EENSA_9FloatRectENSG_INSA_8IntPointEEEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SQ_SS_bEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F4478;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy20ComputeElementLayoutEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEbNS7_16CoordinateSystemEONS_17CompletionHandlerIFvNSG_ISM_EENSA_9FloatRectENSG_INSA_8IntPointEEEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SQ_SS_bEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F4478;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy20ComputeElementLayoutEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEbNS7_16CoordinateSystemEONS_17CompletionHandlerIFvNSG_ISM_EENSA_9FloatRectENSG_INSA_8IntPointEEEbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_SQ_SS_bEE4callESP_SQ_SS_b(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, float a6, float a7, float a8, float a9)
{
  char v10;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  IPC::Encoder *result;
  WTF *v18;
  void *v19;
  uint64_t v20;
  int v21;
  int v22[4];
  IPC::Encoder *v23;

  v10 = a4;
  *(float *)v22 = a6;
  *(float *)&v22[1] = a7;
  *(float *)&v22[2] = a8;
  *(float *)&v22[3] = a9;
  v20 = a3;
  v21 = a4;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 3144;
  *(_QWORD *)(v14 + 8) = v13;
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v23 = (IPC::Encoder *)v14;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>((IPC::Encoder *)v14, a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v14, v22);
  v15 = IPC::Encoder::grow((IPC::Encoder *)v14, 1uLL, 1);
  if (v10)
  {
    *v15 = 1;
    IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v14, &v20);
  }
  else
  {
    *v15 = 0;
  }
  *IPC::Encoder::grow((IPC::Encoder *)v14, 1uLL, 1) = a5;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v23, 0, 0);
  result = v23;
  v23 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy15GetComputedRoleEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EESO_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F44A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy15GetComputedRoleEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EESO_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F44A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy15GetComputedRoleEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EESO_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SO_EE4callESO_SO_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3147;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy16GetComputedLabelEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EESO_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F44C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy16GetComputedLabelEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EESO_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F44C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy16GetComputedLabelEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EESO_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SO_EE4callESO_SO_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3146;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy19SelectOptionElementEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F44F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy19SelectOptionElementEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F44F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy19SelectOptionElementEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3153;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy26SetFilesForInputFileUploadEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_6VectorISM_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNSG_ISM_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F4518;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy26SetFilesForInputFileUploadEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_6VectorISM_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNSG_ISM_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F4518;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy26SetFilesForInputFileUploadEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_6VectorISM_Lm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvNSG_ISM_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJST_EE4callEST_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3154;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy25SnapshotRectForScreenshotEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEbbONS_17CompletionHandlerIFvNSG_ISM_EEONSA_7IntRectEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SQ_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F4540;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy25SnapshotRectForScreenshotEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEbbONS_17CompletionHandlerIFvNSG_ISM_EEONSA_7IntRectEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SQ_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F4540;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy25SnapshotRectForScreenshotEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEbbONS_17CompletionHandlerIFvNSG_ISM_EEONSA_7IntRectEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_SQ_EE4callESO_SQ_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3155;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>((IPC::Encoder *)v7, a2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy18GetCookiesForFrameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEEONS_17CompletionHandlerIFvNSG_INS_6StringEEENS_6VectorINSA_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_ST_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F4568;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy18GetCookiesForFrameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEEONS_17CompletionHandlerIFvNSG_INS_6StringEEENS_6VectorINSA_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_ST_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F4568;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy18GetCookiesForFrameEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEEONS_17CompletionHandlerIFvNSG_INS_6StringEEENS_6VectorINSA_6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_ST_EE4callESO_ST_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 3148;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>((IPC::Encoder *)v7, a2);
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v7, a3);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy12DeleteCookieEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F4590;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy12DeleteCookieEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F4590;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages25WebAutomationSessionProxy12DeleteCookieEN6WebKit25WebAutomationSessionProxyES8_FvNS_23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENSt3__18optionalINSA_16ProcessQualifiedINS9_INSA_19FrameIdentifierTypeESD_yEEEEEENS_6StringEONS_17CompletionHandlerIFvNSG_ISM_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3145;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebChromeClient::createIconForFiles(uint64_t a1, uint64_t a2)
{
  UIImage *v2;
  CFTypeRef v3;
  CFTypeRef cf;

  WebKit::iconForFiles(a2, &cf);
  WebCore::Icon::create((WebCore::Icon *)cf, v2);
  v3 = cf;
  cf = 0;
  if (v3)
    CFRelease(v3);
}

void sub_1976A052C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

unint64_t IPC::handleMessageAsync<Messages::WebCookieManager::GetHostnamesWithCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unint64_t, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned __int8 **v18;
  _QWORD *v19;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v11)
  {
    v12 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v13)
    {
      v17 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, a1);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v14 = off_1E34F45B8;
      v14[1] = v17;
      v15 = v18;
      v18 = 0;
      v19 = v14;
      v14[2] = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
      v16 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, unint64_t, _QWORD **))(*v16 + a4);
      a4(v16, v12, &v19);
      result = (unint64_t)v19;
      v19 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned __int8 ***IPC::handleMessageAsync<Messages::WebCookieManager::DeleteCookiesForHostnames,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unint64_t, _QWORD *, unsigned __int8 ****), uint64_t a5)
{
  unint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  unsigned __int8 **v14;
  unint64_t v15;
  void *v16;
  unsigned __int8 ***v17;
  unsigned __int8 **v18;
  unsigned __int8 ***result;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unsigned __int8 ***v24;
  unint64_t v25;
  _QWORD v26[2];
  char v27;
  unint64_t v28;
  unsigned __int8 **v29;
  char v30;

  v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if ((_BYTE)v11
    && (v12 = v10,
        IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v11, (uint64_t)&v28), v30))
  {
    v25 = v12;
    v26[0] = v28;
    v14 = v29;
    v28 = 0;
    v29 = 0;
    v26[1] = v14;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v13);
    v27 = 1;
    v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v16)
      return (unsigned __int8 ***)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v16);
    v28 = v15;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v29, a1);
    v17 = (unsigned __int8 ***)WTF::fastMalloc((WTF *)0x18);
    *v17 = (unsigned __int8 **)off_1E34F45E0;
    v17[1] = (unsigned __int8 **)v28;
    v18 = v29;
    v29 = 0;
    v17[2] = v18;
    v24 = v17;
    result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v29);
    if (v27)
    {
      v20 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, unint64_t, _QWORD *, unsigned __int8 ****))(*v20 + a4);
      a4(v20, v25, v26, &v24);
      result = v24;
      v24 = 0;
      if (result)
        result = (unsigned __int8 ***)((uint64_t (*)(unsigned __int8 ***))(*result)[1])(result);
      if (v27)
        return (unsigned __int8 ***)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v16);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v21 = *a2;
    v22 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (unsigned __int8 ***)a2[3];
    if (result)
      v23 = v22 == 0;
    else
      v23 = 1;
    if (!v23)
      return (unsigned __int8 ***)((uint64_t (*)(unsigned __int8 ***, uint64_t))(*result)[2])(result, v21);
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebCookieManager::DeleteAllCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unint64_t, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned __int8 **v18;
  _QWORD *v19;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v11)
  {
    v12 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v13)
    {
      v17 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, a1);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v14 = off_1E34F4608;
      v14[1] = v17;
      v15 = v18;
      v18 = 0;
      v19 = v14;
      v14[2] = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
      v16 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, unint64_t, _QWORD **))(*v16 + a4);
      a4(v16, v12, &v19);
      result = (unint64_t)v19;
      v19 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void *IPC::handleMessageAsync<Messages::WebCookieManager::SetCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::URL const&,WTF::URL const&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unint64_t, _QWORD *, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **), uint64_t a5)
{
  unint64_t v10;
  void *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  void *result;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  _QWORD v30[2];
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  WTF::StringImpl *v34;
  __int128 v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  WTF::StringImpl *v41;
  __int128 v42;
  __int128 v43;
  char v44;
  WTF::StringImpl *v45;
  _OWORD v46[2];
  char v47;

  v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v11
    || (v12 = v10,
        IPC::Decoder::decode<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v11, (uint64_t)&v38), !v40))
  {
LABEL_27:
    v25 = *a2;
    v26 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (void *)a2[3];
    if (result)
      v27 = v26 == 0;
    else
      v27 = 1;
    if (!v27)
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)result + 16))(result, v25);
    return result;
  }
  IPC::Decoder::decode<WTF::URL>(a2, &v41);
  if (!v44)
  {
    v17 = 0;
    LOBYTE(v29) = 0;
    v37 = 0;
    goto LABEL_14;
  }
  result = IPC::Decoder::decode<WTF::URL>(a2, &v45);
  if (v47)
  {
    if (!v40 || !v44)
      goto LABEL_39;
    v29 = v12;
    v30[0] = v38;
    v15 = v39;
    v38 = 0;
    v39 = 0;
    v30[1] = v15;
    v16 = v41;
    v41 = 0;
    v31 = v16;
    v32 = v42;
    v33 = v43;
    LODWORD(v42) = v42 & 0xFFFFFFFE;
    v34 = v45;
    v35 = v46[0];
    v36 = v46[1];
    v17 = 1;
    v37 = 1;
  }
  else
  {
    v17 = 0;
    LOBYTE(v29) = 0;
    v37 = 0;
    if (!v44)
      goto LABEL_14;
  }
  v18 = v41;
  v41 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v13);
    else
      *(_DWORD *)v18 -= 2;
  }
LABEL_14:
  if (v40)
    WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v13);
  if (!v17)
    goto LABEL_27;
  v19 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!(_BYTE)v20)
  {
LABEL_24:
    v24 = v34;
    v34 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v20);
      else
        *(_DWORD *)v24 -= 2;
    }
    v28 = v31;
    v31 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v20);
      else
        *(_DWORD *)v28 -= 2;
    }
    return (void *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v20);
  }
  v45 = (WTF::StringImpl *)v19;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)v46, a1);
  v21 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v21 = off_1E34F4658;
  *((_QWORD *)v21 + 1) = v45;
  v22 = *(_QWORD *)&v46[0];
  *(_QWORD *)&v46[0] = 0;
  *((_QWORD *)v21 + 2) = v22;
  v41 = v21;
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v46);
  if (!v37)
  {
LABEL_39:
    __break(1u);
    return result;
  }
  v23 = (_QWORD *)(a3 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(void (**)(_QWORD *, unint64_t, _QWORD *, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **))(*v23 + a4);
  a4(v23, v29, v30, &v31, &v34, &v41);
  result = v41;
  v41 = 0;
  if (result)
    result = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 8))(result);
  if (v37)
    goto LABEL_24;
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebCookieManager::GetAllCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unint64_t, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned __int8 **v18;
  _QWORD *v19;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v11)
  {
    v12 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v13)
    {
      v17 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, a1);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v14 = off_1E34F4680;
      v14[1] = v17;
      v15 = v18;
      v18 = 0;
      v19 = v14;
      v14[2] = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
      v16 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, unint64_t, _QWORD **))(*v16 + a4);
      a4(v16, v12, &v19);
      result = (unint64_t)v19;
      v19 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void IPC::handleMessageAsync<Messages::WebCookieManager::GetCookies,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, WTF::StringImpl **, _QWORD **), uint64_t a5)
{
  unint64_t v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  unsigned __int8 **v18;
  _QWORD *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;

  IPC::Decoder::decode<std::tuple<PAL::SessionID,WTF::URL>>(a2, &v20);
  if (v22)
  {
    v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if ((_BYTE)v11)
    {
      v17 = v10;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, a1);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v12 = off_1E34F46A8;
      v12[1] = v17;
      v13 = v18;
      v18 = 0;
      v19 = v12;
      v12[2] = v13;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
      if (!v22)
      {
        __break(1u);
        return;
      }
      v14 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, uint64_t, WTF::StringImpl **, _QWORD **))(*v14 + a4);
      a4(v14, v20, &v21, &v19);
      v15 = v19;
      v19 = 0;
      if (v15)
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    }
    if (v22)
    {
      v16 = v21;
      v21 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v11);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
  }
}

void IPC::handleMessageAsync<Messages::WebCookieManager::DeleteCookie,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WebCore::Cookie const&,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unint64_t, _OWORD *, _QWORD **), uint64_t a5)
{
  unint64_t v10;
  char v11;
  unint64_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  _QWORD *v26;
  unint64_t v27;
  _OWORD v28[2];
  _OWORD v29[5];
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;

  v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v11 && (v12 = v10, IPC::Decoder::decode<WebCore::Cookie>(a2, &v34), v43))
  {
    v28[0] = v34;
    v28[1] = v35;
    v34 = 0u;
    v35 = 0u;
    v29[0] = v36[0];
    *(_OWORD *)((char *)v29 + 11) = *(_OWORD *)((char *)v36 + 11);
    v14 = v37;
    v37 = 0u;
    v27 = v12;
    v29[2] = v14;
    v29[3] = v38;
    v29[4] = v39;
    LODWORD(v38) = v38 & 0xFFFFFFFE;
    v30 = v40;
    v15 = v41;
    v40 = 0;
    v41 = 0;
    v31 = v15;
    v32 = v42;
    v33 = 1;
    WebCore::Cookie::~Cookie((WebCore::Cookie *)&v34, v13);
    v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (!(_BYTE)v17)
    {
LABEL_10:
      WebCore::Cookie::~Cookie((WebCore::Cookie *)v28, v17);
      return;
    }
    *(_QWORD *)&v34 = v16;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v34 + 1, a1);
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v18 = off_1E34F46D0;
    v18[1] = v34;
    v19 = *((_QWORD *)&v34 + 1);
    *((_QWORD *)&v34 + 1) = 0;
    v18[2] = v19;
    v26 = v18;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v34 + 1);
    if (v33)
    {
      v20 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, unint64_t, _OWORD *, _QWORD **))(*v20 + a4);
      a4(v20, v27, v28, &v26);
      v21 = v26;
      v26 = 0;
      if (v21)
        (*(void (**)(_QWORD *))(*v21 + 8))(v21);
      if (v33)
        goto LABEL_10;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v22 = *a2;
    v23 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24)
      v25 = v23 == 0;
    else
      v25 = 1;
    if (!v25)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
  }
}

unint64_t IPC::handleMessageAsync<Messages::WebCookieManager::DeleteAllCookiesModifiedSince,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unint64_t, _QWORD **, double), uint64_t a5)
{
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  double v15;
  unint64_t result;
  char v17;
  _QWORD *v18;
  unsigned __int8 **v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned __int8 **v25;
  _QWORD *v26;

  v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v11 && (v12 = v10, v13 = IPC::Decoder::decode<WTF::MonotonicTime>(a2), v14))
  {
    v15 = *(double *)&v13;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v17)
    {
      v24 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v25, a1);
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v18 = off_1E34F46F8;
      v18[1] = v24;
      v19 = v25;
      v25 = 0;
      v26 = v18;
      v18[2] = v19;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v25);
      v20 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, unint64_t, _QWORD **, double))(*v20 + a4);
      a4(v20, v12, &v26, v15);
      result = (unint64_t)v26;
      v26 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    v21 = *a2;
    v22 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v23 = v22 == 0;
    else
      v23 = 1;
    if (!v23)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v21);
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, _QWORD, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v11;
  _QWORD *v12;
  unsigned __int8 **v13;
  _QWORD *v14;
  unint64_t v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  char v20;

  result = IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::HTTPCookieAcceptPolicy>>((uint64_t)&v18, a2);
  if (v20)
  {
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v11)
    {
      v15 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a1);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v12 = off_1E34F4720;
      v12[1] = v15;
      v13 = v16;
      v16 = 0;
      v17 = v12;
      v12[2] = v13;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
      v14 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD **))(*v14 + a4);
      a4(v14, v18, v19, &v17);
      result = (unint64_t)v17;
      v17 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unint64_t IPC::handleMessageAsync<Messages::WebCookieManager::GetHTTPCookieAcceptPolicy,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy)> &&)>(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, unint64_t, _QWORD **), uint64_t a5)
{
  unint64_t result;
  char v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned __int8 **v18;
  _QWORD *v19;

  result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a2);
  if (v11)
  {
    v12 = result;
    result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
    if (v13)
    {
      v17 = result;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v18, a1);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v14 = off_1E34F4748;
      v14[1] = v17;
      v15 = v18;
      v18 = 0;
      v19 = v14;
      v14[2] = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v18);
      v16 = (_QWORD *)(a3 + (a5 >> 1));
      if ((a5 & 1) != 0)
        a4 = *(void (**)(_QWORD *, unint64_t, _QWORD **))(*v16 + a4);
      a4(v16, v12, &v19);
      result = (unint64_t)v19;
      v19 = 0;
      if (result)
        return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager23GetHostnamesWithCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F45B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager23GetHostnamesWithCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F45B8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager23GetHostnamesWithCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3164;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25DeleteCookiesForHostnamesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F45E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25DeleteCookiesForHostnamesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F45E0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25DeleteCookiesForHostnamesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3160;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager16DeleteAllCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F4608;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager16DeleteAllCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F4608;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager16DeleteAllCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3158;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager9SetCookieEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F4630;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager10SetCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_3URLESL_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F4658;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager10SetCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_3URLESL_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F4658;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager10SetCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERKNS_3URLESL_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3166;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager13GetAllCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F4680;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager13GetAllCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F4680;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager13GetAllCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3161;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager10GetCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_3URLEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F46A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager10GetCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_3URLEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F46A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager10GetCookiesEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKNS_3URLEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore6CookieELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3162;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager12DeleteCookieEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKN7WebCore6CookieEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F46D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager12DeleteCookieEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKN7WebCore6CookieEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F46D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager12DeleteCookieEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDERKN7WebCore6CookieEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3159;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager29DeleteAllCookiesModifiedSinceEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F46F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager29DeleteAllCookiesModifiedSinceEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F46F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager29DeleteAllCookiesModifiedSinceEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDENS_8WallTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3157;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<PAL::SessionID,WebCore::HTTPCookieAcceptPolicy>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<PAL::SessionID,WebCore::HTTPCookieAcceptPolicy>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<PAL::SessionID,WebCore::HTTPCookieAcceptPolicy>,void>::decode<IPC::Decoder>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  char v5;
  unint64_t v6;
  char v7;

  result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (v5
    && (v6 = result,
        result = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>(a2),
        (unsigned __int16)result > 0xFFu))
  {
    *(_QWORD *)a1 = v6;
    *(_BYTE *)(a1 + 8) = result;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 16) = v7;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25SetHTTPCookieAcceptPolicyEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEN7WebCore22HTTPCookieAcceptPolicyEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F4720;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25SetHTTPCookieAcceptPolicyEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEN7WebCore22HTTPCookieAcceptPolicyEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F4720;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25SetHTTPCookieAcceptPolicyEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEN7WebCore22HTTPCookieAcceptPolicyEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  return IPC::handleMessageAsync<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebCookieManager *,void ()(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&) WebKit::WebCookieManager::*)::{lambda(Messages::WebCookieManager::SetHTTPCookieAcceptPolicy &&)#1}::operator()<>((uint64_t *)(a1 + 8));
}

IPC::Encoder *IPC::handleMessageAsync<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WebKit::WebCookieManager,WebKit::WebCookieManager,void ()(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&)>(IPC::Connection &,IPC::Decoder &,WebKit::WebCookieManager *,void ()(PAL::SessionID,WebCore::HTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)> &&) WebKit::WebCookieManager::*)::{lambda(Messages::WebCookieManager::SetHTTPCookieAcceptPolicy &&)#1}::operator()<>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v2 = *a1;
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 3167;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  IPC::Connection::sendMessageImpl(a1[1], (uint64_t *)&v8, 0, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25GetHTTPCookieAcceptPolicyEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvN7WebCore22HTTPCookieAcceptPolicyEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34F4748;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25GetHTTPCookieAcceptPolicyEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvN7WebCore22HTTPCookieAcceptPolicyEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34F4748;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

char *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16WebCookieManager25GetHTTPCookieAcceptPolicyEN6WebKit16WebCookieManagerES8_FvN3PAL9SessionIDEONS_17CompletionHandlerIFvN7WebCore22HTTPCookieAcceptPolicyEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3163;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v19 = (IPC::Encoder *)v5;
  v6 = *(_QWORD *)(v5 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v5 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v5 + 528), *(_QWORD *)(v5 + 544));
    v18 = *(void **)(v5 + 528);
    if (v18 != (void *)(v5 + 16))
      munmap(v18, *(_QWORD *)(v5 + 552));
    *(_QWORD *)(v5 + 528) = v9;
    *(_QWORD *)(v5 + 552) = v17;
    v10 = *(_QWORD *)(v5 + 544);
  }
  else
  {
    v9 = *(char **)(v5 + 528);
    v10 = *(_QWORD *)(v5 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v5 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v5 + 528) + v6);
  *(_QWORD *)(v5 + 536) = v11 + 1;
  *v11 = a2;
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

void WebKit::WebDeviceOrientationUpdateProvider::~WebDeviceOrientationUpdateProvider(WebKit::WebDeviceOrientationUpdateProvider *this)
{
  WebKit::WebProcess *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WebKit::WebProcess *v9;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v9);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t)v2 + 40, 0x9Eu, *((_QWORD *)this + 5));
  v4 = *((_QWORD *)this + 8);
  if (v4)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v4, v3);
  v5 = *((_QWORD *)this + 6);
  if (v5)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v5, v3);
  v6 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v3);
    }
  }
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v3);
}

{
  WTF *v1;
  void *v2;

  WebKit::WebDeviceOrientationUpdateProvider::~WebDeviceOrientationUpdateProvider(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::WebDeviceOrientationUpdateProvider::~WebDeviceOrientationUpdateProvider(WebKit::WebDeviceOrientationUpdateProvider *this)
{
  WebKit::WebDeviceOrientationUpdateProvider::~WebDeviceOrientationUpdateProvider((WebKit::WebDeviceOrientationUpdateProvider *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebDeviceOrientationUpdateProvider::~WebDeviceOrientationUpdateProvider((WebKit::WebDeviceOrientationUpdateProvider *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

unsigned int *WebKit::WebDeviceOrientationUpdateProvider::startUpdatingDeviceOrientation(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v16[3];

  v4 = (_DWORD *)(a1 + 48);
  if (WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(a1 + 48)))
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v8 = *(_QWORD *)(v6 + 16);
        v7 = v6 + 16;
        v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
        v10 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v10 = 1560;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)(v10 + 528) = v10 + 16;
        *(_QWORD *)(v10 + 536) = v10 + 16;
        *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v10 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
        v16[0] = (IPC::Encoder *)v10;
        (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, v16, 0);
        v12 = v16[0];
        v16[0] = 0;
        if (v12)
        {
          IPC::Encoder::~Encoder(v12, v11);
          WTF::fastFree(v13, v14);
        }
      }
    }
  }
  return WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MotionManagerClient>((uint64_t)v16, v4, a2);
}

unsigned int *WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MotionManagerClient>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  unsigned int *result;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;

  v6 = a2[3];
  v7 = a2[2] + 1;
  a2[2] = v7;
  if (v7 <= v6)
    goto LABEL_31;
  v8 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_26;
  v9 = *(_DWORD *)(v8 - 4);
  if (!v9)
  {
LABEL_25:
    a2[2] = 0;
    goto LABEL_28;
  }
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = *(_QWORD *)(v8 + 8 * --v9);
      if ((unint64_t)(v11 + 1) >= 2 && !*(_QWORD *)(v11 + 8))
        break;
      if (!v9)
        goto LABEL_14;
    }
    *(_QWORD *)(v8 + 8 * v9) = 0;
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      WTF::fastFree((WTF *)v11, a2);
    }
    *(_QWORD *)(v8 + 8 * v9) = -1;
    ++v10;
  }
  while (v9);
LABEL_14:
  v8 = *(_QWORD *)a2;
  if (v10)
  {
    *(_DWORD *)(v8 - 16) += v10;
    v14 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v10;
    v8 = *(_QWORD *)a2;
  }
  if (!v8)
  {
LABEL_26:
    v18 = 0;
    a2[2] = 0;
LABEL_29:
    v19 = v18;
    goto LABEL_30;
  }
  v16 = *(_DWORD *)(v8 - 4);
  if (v16 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v16)
    goto LABEL_25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
  v8 = *(_QWORD *)a2;
  a2[2] = 0;
  if (!v8)
  {
    v18 = 0;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *(_DWORD *)(v8 - 12);
  v19 = 0x7FFFFFFF;
  if (v18 < 0x7FFFFFFF)
    goto LABEL_29;
LABEL_30:
  a2[3] = 2 * v19;
LABEL_31:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v20 = *(unsigned int **)(a3 + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 + 1, v20));
  v29 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a2, &v29, a1);
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    do
    {
      v27 = __ldaxr(result);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, result));
    if (!v28)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v23);
    }
  }
  if (v20)
  {
    do
    {
      v25 = __ldaxr(v20);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v20));
    if (!v26)
    {
      atomic_store(1u, v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v23);
    }
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::MotionManagerClient>(unsigned int *result, _QWORD *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = result;
  v4 = result[3];
  v5 = result[2] + 1;
  result[2] = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v7 = *(_DWORD *)(v6 - 4);
      if (!v7)
        goto LABEL_25;
      v8 = 0;
      do
      {
        while (1)
        {
          result = *(unsigned int **)(v6 + 8 * --v7);
          if ((unint64_t)result + 1 >= 2 && !*((_QWORD *)result + 1))
            break;
          if (!v7)
            goto LABEL_14;
        }
        *(_QWORD *)(v6 + 8 * v7) = 0;
        do
        {
          v9 = __ldaxr(result);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, result));
        if (!v10)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
        *(_QWORD *)(v6 + 8 * v7) = -1;
        ++v8;
      }
      while (v7);
LABEL_14:
      v6 = *(_QWORD *)v3;
      if (v8)
      {
        *(_DWORD *)(v6 - 16) += v8;
        v11 = *(_QWORD *)v3;
        if (*(_QWORD *)v3)
          v12 = *(_DWORD *)(v11 - 12);
        else
          v12 = 0;
        *(_DWORD *)(v11 - 12) = v12 - v8;
        v6 = *(_QWORD *)v3;
      }
      if (v6)
      {
        v13 = *(_DWORD *)(v6 - 4);
        if (v13 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v13)
        {
          result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)v3);
          v6 = *(_QWORD *)v3;
          v3[2] = 0;
          if (!v6)
          {
            v15 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        v3[2] = 0;
LABEL_28:
        v15 = *(_DWORD *)(v6 - 12);
        v16 = 0x7FFFFFFF;
        if (v15 >= 0x7FFFFFFF)
        {
LABEL_30:
          v3[3] = 2 * v16;
          goto LABEL_31;
        }
LABEL_29:
        v16 = v15;
        goto LABEL_30;
      }
    }
    v15 = 0;
    v3[2] = 0;
    goto LABEL_29;
  }
LABEL_31:
  v17 = a2[1];
  if (v17 && *(_QWORD *)(v17 + 8))
  {
    v19 = a2[1];
    result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)v3, &v19);
    if (*(_QWORD *)v3)
    {
      v18 = *(_QWORD *)v3 + 8 * *(unsigned int *)(*(_QWORD *)v3 - 4);
      if ((unsigned int *)v18 == result)
        return result;
    }
    else
    {
      if (!result)
        return result;
      v18 = 0;
    }
    if ((unsigned int *)v18 != result)
      return (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove((uint64_t *)v3, (unsigned int **)result);
  }
  return result;
}

unsigned int *WebKit::WebDeviceOrientationUpdateProvider::startUpdatingDeviceMotion(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  IPC::Encoder *v16[3];

  v4 = (_DWORD *)(a1 + 64);
  if (WTF::WeakHashSet<WebKit::ProvisionalPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(a1 + 64)))
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v8 = *(_QWORD *)(v6 + 16);
        v7 = v6 + 16;
        v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
        v10 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v10 = 1559;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)(v10 + 528) = v10 + 16;
        *(_QWORD *)(v10 + 536) = v10 + 16;
        *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v10 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
        v16[0] = (IPC::Encoder *)v10;
        (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v7 + 32))(v7, v16, 0);
        v12 = v16[0];
        v16[0] = 0;
        if (v12)
        {
          IPC::Encoder::~Encoder(v12, v11);
          WTF::fastFree(v13, v14);
        }
      }
    }
  }
  return WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MotionManagerClient>((uint64_t)v16, v4, a2);
}

uint64_t WebKit::WebDeviceOrientationUpdateProvider::deviceOrientationChanged(WebKit::WebDeviceOrientationUpdateProvider *this, double a2, double a3, double a4, double a5, double a6)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>&&)#1},WTF::Vector<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v16, (_DWORD *)this + 12);
  if (HIDWORD(v17))
  {
    v12 = v16;
    v13 = 8 * HIDWORD(v17);
    do
    {
      if (*(_QWORD *)v12)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v12 + 8);
        if (v14)
          (*(void (**)(uint64_t, double, double, double, double, double))(*(_QWORD *)v14 + 16))(v14, a2, a3, a4, a5, a6);
      }
      v12 += 8;
      v13 -= 8;
    }
    while (v13);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v11);
}

uint64_t WebKit::WebDeviceOrientationUpdateProvider::deviceMotionChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v30 = 0;
  v31 = 0;
  WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>&&)#1},WTF::Vector<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v30, (_DWORD *)(a1 + 64));
  if (HIDWORD(v31))
  {
    v26 = v30;
    v27 = 8 * HIDWORD(v31);
    do
    {
      if (*(_QWORD *)v26)
      {
        v28 = *(_QWORD *)(*(_QWORD *)v26 + 8);
        if (v28)
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double, double))(*(_QWORD *)v28 + 24))(v28, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
      }
      v26 += 8;
      v27 -= 8;
    }
    while (v27);
  }
  return WTF::Vector<WTF::WeakPtr<WebKit::LinkDecorationFilteringDataObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v25);
}

uint64_t WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>&&)#1},WTF::Vector<WTF::WeakPtr<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::MotionManagerClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;

  v3 = result;
  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_25;
  v5 = *(_DWORD *)(v4 - 4);
  if (!v5)
    goto LABEL_24;
  v6 = 0;
  do
  {
    while (1)
    {
      result = *(_QWORD *)(v4 + 8 * --v5);
      if ((unint64_t)(result + 1) >= 2 && !*(_QWORD *)(result + 8))
        break;
      if (!v5)
        goto LABEL_13;
    }
    *(_QWORD *)(v4 + 8 * v5) = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)result));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
    }
    *(_QWORD *)(v4 + 8 * v5) = -1;
    ++v6;
  }
  while (v5);
LABEL_13:
  v4 = *(_QWORD *)a2;
  if (v6)
  {
    *(_DWORD *)(v4 - 16) += v6;
    v9 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v10 = *(_DWORD *)(v9 - 12);
    else
      v10 = 0;
    *(_DWORD *)(v9 - 12) = v10 - v6;
    v4 = *(_QWORD *)a2;
  }
  if (!v4)
  {
LABEL_25:
    a2[2] = 0;
    goto LABEL_26;
  }
  v11 = *(_DWORD *)(v4 - 4);
  if (v11 >= 9 && 6 * *(_DWORD *)(v4 - 12) < v11)
  {
    result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
    v4 = *(_QWORD *)a2;
    a2[2] = 0;
    if (v4)
      goto LABEL_28;
LABEL_26:
    a2[3] = 0;
    goto LABEL_34;
  }
LABEL_24:
  a2[2] = 0;
LABEL_28:
  v13 = *(_DWORD *)(v4 - 12);
  if (v13 >= 0x7FFFFFFF)
    v14 = -2;
  else
    v14 = 2 * v13;
  a2[3] = v14;
  v15 = *(unsigned int *)(v4 - 12);
  if ((_DWORD)v15)
  {
    if (v15 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v16 = WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(v3 + 8) = v15;
    *(_QWORD *)v3 = v16;
  }
LABEL_34:
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v31, (_QWORD **)a2);
  v17 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v18 = *(unsigned int *)(v17 - 4);
    v19 = (_QWORD *)(v17 + 8 * v18);
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  v26 = a2;
  v27 = v19;
  v28 = v19;
  v29 = v19;
  v30 = v17 + 8 * v18;
  result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v26);
  v20 = v32;
  while (v20 != v27)
  {
    v21 = *(_QWORD *)(*v20 + 8);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v21 + 8), v21);
    v22 = *(unsigned int **)(v21 + 8);
    if (v22)
    {
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
      v20 = v32;
    }
    v24 = *(unsigned int *)(v3 + 12);
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v24) = v22;
    *(_DWORD *)(v3 + 12) = v24 + 1;
    v25 = v20 + 1;
    v32 = v20 + 1;
    if (v20 + 1 != v33)
    {
      while ((unint64_t)(*v25 + 1) <= 1)
      {
        if (++v25 == v33)
        {
          v25 = v33;
          break;
        }
      }
      v32 = v25;
    }
    result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v31);
    v20 = v32;
    ++*(_DWORD *)(v31 + 8);
  }
  return result;
}

_QWORD *WebKit::WebDeviceOrientationUpdateProvider::didReceiveMessage(_QWORD *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  _DWORD *v3;
  int v4;

  v3 = this;
  ++*((_DWORD *)this + 2);
  v4 = *((unsigned __int16 *)a3 + 25);
  if (v4 == 1563)
  {
    this = IPC::handleMessage<Messages::WebDeviceOrientationUpdateProvider::DeviceMotionChanged,WebKit::WebDeviceOrientationUpdateProvider,WebKit::WebDeviceOrientationUpdateProvider,void ()(double,double,double,double,double,double,std::optional<double>,std::optional<double>,std::optional<double>)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double))0x38, 1);
  }
  else if (v4 == 1564)
  {
    this = IPC::handleMessage<Messages::WebDeviceOrientationUpdateProvider::DeviceOrientationChanged,WebKit::WebDeviceOrientationUpdateProvider,WebKit::WebDeviceOrientationUpdateProvider,void ()(double,double,double,double,double)>((uint64_t)a2, (uint64_t *)a3, (uint64_t)this, (uint64_t (*)(_QWORD *, double, double, double, double, double))0x30, 1);
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return this;
}

_QWORD *IPC::handleMessage<Messages::WebDeviceOrientationUpdateProvider::DeviceOrientationChanged,WebKit::WebDeviceOrientationUpdateProvider,WebKit::WebDeviceOrientationUpdateProvider,void ()(double,double,double,double,double)>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD *, double, double, double, double, double), uint64_t a5)
{
  _QWORD *result;
  _QWORD *v9;
  double v10[5];
  char v11;

  result = IPC::Decoder::decode<std::tuple<double,double,double,double,double>>(a2, (uint64_t)v10);
  if (v11)
  {
    v9 = (_QWORD *)(a3 + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(uint64_t (**)(_QWORD *, double, double, double, double, double))(*v9 + a4);
    return (_QWORD *)a4(v9, v10[0], v10[1], v10[2], v10[3], v10[4]);
  }
  return result;
}

_QWORD *IPC::handleMessage<Messages::WebDeviceOrientationUpdateProvider::DeviceMotionChanged,WebKit::WebDeviceOrientationUpdateProvider,WebKit::WebDeviceOrientationUpdateProvider,void ()(double,double,double,double,double,double,std::optional<double>,std::optional<double>,std::optional<double>)>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double), uint64_t a5)
{
  _QWORD *result;
  _BYTE v9[104];

  result = IPC::Decoder::decode<std::tuple<double,double,double,double,double,double,std::optional<double>,std::optional<double>,std::optional<double>>>(a2, (uint64_t)v9);
  if (v9[96])
    return (_QWORD *)IPC::callMemberFunction<WebKit::WebDeviceOrientationUpdateProvider,WebKit::WebDeviceOrientationUpdateProvider,void ()(double,double,double,double,double,double,std::optional<double>,std::optional<double>,std::optional<double>),std::tuple<double,double,double,double,double,double,std::optional<double>,std::optional<double>,std::optional<double>>>(a3, a4, a5, (uint64_t)v9);
  return result;
}

_QWORD *`non-virtual thunk to'WebKit::WebDeviceOrientationUpdateProvider::didReceiveMessage(WebKit::WebDeviceOrientationUpdateProvider *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebDeviceOrientationUpdateProvider::didReceiveMessage((_QWORD *)this - 2, a2, a3);
}

_QWORD *IPC::Decoder::decode<std::tuple<double,double,double,double,double>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<double,double,double,double,double>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 40))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<double,double,double,double,double>,void>::decode<IPC::Decoder>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v2 = result[1];
  v3 = *result;
  v4 = ((result[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *result;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    v28 = 0;
    v29 = 0;
    *result = 0;
    result[1] = 0;
    v30 = result[3];
    if (v30)
    {
      v31 = result;
      v33 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
        result = v31;
        a2 = v33;
        v29 = *v31;
        v28 = v31[1];
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
    }
    goto LABEL_35;
  }
  v6 = (uint64_t *)(v3 + v4);
  result[2] = v6 + 1;
  if (!v3)
  {
    v28 = v2;
    v29 = 0;
LABEL_35:
    *result = 0;
    result[1] = 0;
    result = (_QWORD *)result[3];
    if (!result || !v28)
      goto LABEL_36;
    v32 = a2;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(*result + 16))(result, v29, v28);
LABEL_39:
    a2 = v32;
LABEL_36:
    v23 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_28;
  }
  v7 = (((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 < v7 || v2 - v7 <= 7)
    goto LABEL_29;
  v9 = *v6;
  result[2] = (((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v10 = *(_QWORD *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (((((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 < v11 || v2 - v11 <= 7)
    goto LABEL_29;
  v13 = (uint64_t *)(v3 + v11);
  result[2] = v13 + 1;
  v14 = *v13;
  v15 = (((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) - v3;
  v16 = v2 >= v15 && v2 - v15 > 7;
  if (!v16
    || ((v17 = (uint64_t *)(v3 + v15),
         result[2] = v17 + 1,
         v18 = *v17,
         v19 = (((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8) - v3,
         v2 >= v19)
      ? (v20 = v2 - v19 > 7)
      : (v20 = 0),
        !v20))
  {
LABEL_29:
    *result = 0;
    result[1] = 0;
    v24 = result[3];
    if (!v24)
      goto LABEL_36;
    if (!v2)
      goto LABEL_36;
    v25 = result;
    v32 = a2;
    (*(void (**)(_QWORD))(*(_QWORD *)v24 + 16))(result[3]);
    a2 = v32;
    v26 = *v25;
    v27 = v25[1];
    result = (_QWORD *)v25[3];
    *v25 = 0;
    v25[1] = 0;
    if (!result || !v27)
      goto LABEL_36;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v26);
    goto LABEL_39;
  }
  v21 = (uint64_t *)(v3 + v19);
  v22 = *v21;
  result[2] = v21 + 1;
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)(a2 + 32) = v22;
  v23 = 1;
LABEL_28:
  *(_BYTE *)(a2 + 40) = v23;
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<double,double,double,double,double,double,std::optional<double>,std::optional<double>,std::optional<double>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<double,double,double,double,double,double,std::optional<double>,std::optional<double>,std::optional<double>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 96))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::callMemberFunction<WebKit::WebDeviceOrientationUpdateProvider,WebKit::WebDeviceOrientationUpdateProvider,void ()(double,double,double,double,double,double,std::optional<double>,std::optional<double>,std::optional<double>),std::tuple<double,double,double,double,double,double,std::optional<double>,std::optional<double>,std::optional<double>>>(uint64_t a1, uint64_t (*a2)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double), uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double);
  _QWORD *v5;

  v4 = a2;
  v5 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double, double, double))(*v5 + a2);
  return v4(v5, *(_QWORD *)(a4 + 48), *(_QWORD *)(a4 + 56), *(_QWORD *)(a4 + 64), *(_QWORD *)(a4 + 72), *(_QWORD *)(a4 + 80), *(_QWORD *)(a4 + 88), *(double *)a4, *(double *)(a4 + 8), *(double *)(a4 + 16), *(double *)(a4 + 24), *(double *)(a4 + 32), *(double *)(a4 + 40));
}

_QWORD *IPC::ArgumentCoder<std::tuple<double,double,double,double,double,double,std::optional<double>,std::optional<double>,std::optional<double>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *result;
  char v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  __int128 v39;
  char v40;
  __int128 v41;
  char v42;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    v32 = 0;
    v33 = 0;
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
        v33 = *a1;
        v32 = a1[1];
      }
      else
      {
        v32 = 0;
        v33 = 0;
      }
    }
    goto LABEL_43;
  }
  v8 = (uint64_t *)(v5 + v6);
  a1[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v32 = v4;
    v33 = 0;
LABEL_43:
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
    {
      if (v32)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*result + 16))(result, v33, v32);
    }
    goto LABEL_41;
  }
  v9 = (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8) - v5;
  if (v4 >= v9 && v4 - v9 > 7)
  {
    v11 = *v8;
    a1[2] = (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    v12 = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (((((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) - v5;
    if (v4 >= v13 && v4 - v13 > 7)
    {
      v15 = (uint64_t *)(v5 + v13);
      a1[2] = (uint64_t)(v15 + 1);
      v16 = *v15;
      v17 = (((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8) - v5;
      if (v4 >= v17 && v4 - v17 > 7)
      {
        v19 = (uint64_t *)(v5 + v17);
        a1[2] = (uint64_t)(v19 + 1);
        v20 = *v19;
        v21 = (((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8) - v5;
        if (v4 >= v21 && v4 - v21 > 7)
        {
          v23 = (uint64_t *)(v5 + v21);
          a1[2] = (uint64_t)(v23 + 1);
          v24 = *v23;
          v25 = (((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8) - v5;
          if (v4 >= v25 && v4 - v25 > 7)
          {
            v27 = (uint64_t *)(v5 + v25);
            v28 = *v27;
            a1[2] = (uint64_t)(v27 + 1);
            result = IPC::Decoder::decode<std::optional<double>>(a1, &v37);
            if (!v38)
              goto LABEL_41;
            result = IPC::Decoder::decode<std::optional<double>>(a1, &v39);
            if (!v40)
              goto LABEL_41;
            result = IPC::Decoder::decode<std::optional<double>>(a1, &v41);
            v30 = v42;
            if (v42)
            {
              if (!v38 || !v40)
              {
                __break(1u);
                goto LABEL_47;
              }
              *(_QWORD *)a2 = v11;
              *(_QWORD *)(a2 + 8) = v12;
              *(_QWORD *)(a2 + 16) = v16;
              *(_QWORD *)(a2 + 24) = v20;
              *(_QWORD *)(a2 + 32) = v24;
              *(_QWORD *)(a2 + 40) = v28;
              v31 = v39;
              *(_OWORD *)(a2 + 48) = v37;
              *(_OWORD *)(a2 + 64) = v31;
              v30 = 1;
              *(_OWORD *)(a2 + 80) = v41;
            }
            else
            {
              *(_BYTE *)a2 = 0;
            }
            *(_BYTE *)(a2 + 96) = v30;
            return result;
          }
        }
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  result = (_QWORD *)a1[3];
  if (result)
  {
LABEL_47:
    if (v4)
    {
      (*(void (**)(_QWORD *))(*result + 16))(result);
      v35 = *a1;
      v36 = a1[1];
      result = (_QWORD *)a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (result)
      {
        if (v36)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v35);
      }
    }
  }
LABEL_41:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 96) = 0;
  return result;
}

void `non-virtual thunk to'WebKit::WebDeviceOrientationUpdateProviderProxy::~WebDeviceOrientationUpdateProviderProxy(WebKit::WebDeviceOrientationUpdateProviderProxy *this)
{
  WebKit::WebDeviceOrientationUpdateProviderProxy::~WebDeviceOrientationUpdateProviderProxy((WebKit::WebDeviceOrientationUpdateProviderProxy *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebDeviceOrientationUpdateProviderProxy::~WebDeviceOrientationUpdateProviderProxy((WebKit::WebDeviceOrientationUpdateProviderProxy *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebDeviceOrientationUpdateProviderProxy::startUpdatingDeviceOrientation(WebKit::WebDeviceOrientationUpdateProviderProxy *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DCDD88], "sharedManager"), "addOrientationClient:", this);
}

uint64_t WebKit::WebDeviceOrientationUpdateProviderProxy::stopUpdatingDeviceOrientation(WebKit::WebDeviceOrientationUpdateProviderProxy *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DCDD88], "sharedManager"), "removeOrientationClient:", this);
}

uint64_t WebKit::WebDeviceOrientationUpdateProviderProxy::startUpdatingDeviceMotion(WebKit::WebDeviceOrientationUpdateProviderProxy *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DCDD88], "sharedManager"), "addMotionClient:", this);
}

uint64_t WebKit::WebDeviceOrientationUpdateProviderProxy::stopUpdatingDeviceMotion(WebKit::WebDeviceOrientationUpdateProviderProxy *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DCDD88], "sharedManager"), "removeMotionClient:", this);
}

IPC::Encoder *WebKit::WebDeviceOrientationUpdateProviderProxy::orientationChanged(WebKit::WebDeviceOrientationUpdateProviderProxy *this, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  char *v26;
  double *v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  double *v33;
  uint64_t v34;
  unint64_t v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  double *v39;
  uint64_t v40;
  unint64_t v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  double *v45;
  void *v46;
  uint64_t v47;
  IPC::Encoder *result;
  WTF *v49;
  void *v50;
  unint64_t v51;
  size_t v52;
  char *v53;
  void *v54;
  unint64_t v55;
  size_t v56;
  char *v57;
  void *v58;
  unint64_t v59;
  size_t v60;
  char *v61;
  void *v62;
  unint64_t v63;
  size_t v64;
  char *v65;
  void *v66;
  unint64_t v67;
  size_t v68;
  char *v69;
  void *v70;
  uint64_t v71;
  char v72;
  IPC::Encoder *v73;

  v11 = *((_QWORD *)this + 4);
  v12 = *(_QWORD *)(v11 + 208);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 1896);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 1564;
  *(_QWORD *)(v14 + 8) = v13;
  v15 = (void *)(v14 + 16);
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v73 = (IPC::Encoder *)v14;
  v16 = *(_QWORD *)(v14 + 544);
  v17 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = v17 + 8;
  v19 = *(_QWORD *)(v14 + 552);
  if (v19 < v17 + 8)
  {
    v51 = (2 * v19 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v52 = v51;
      v51 *= 2;
    }
    while (v52 < v18);
    v53 = (char *)mmap(0, v52, 3, 4098, -1, 0);
    if (v53 == (char *)-1)
      goto LABEL_51;
    v20 = v53;
    memcpy(v53, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
    v54 = *(void **)(v14 + 528);
    if (v54 != v15)
      munmap(v54, *(_QWORD *)(v14 + 552));
    *(_QWORD *)(v14 + 528) = v20;
    *(_QWORD *)(v14 + 552) = v52;
    v16 = *(_QWORD *)(v14 + 544);
  }
  else
  {
    v20 = *(char **)(v14 + 528);
  }
  bzero(&v20[v16], v17 - v16);
  *(_QWORD *)(v14 + 544) = v18;
  v21 = (double *)(*(_QWORD *)(v14 + 528) + v17);
  *(_QWORD *)(v14 + 536) = v21 + 1;
  *v21 = a2;
  v22 = *(_QWORD *)(v14 + 544);
  v23 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = v23 + 8;
  v25 = *(_QWORD *)(v14 + 552);
  if (v25 < v23 + 8)
  {
    v55 = (2 * v25 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v56 = v55;
      v55 *= 2;
    }
    while (v56 < v24);
    v57 = (char *)mmap(0, v56, 3, 4098, -1, 0);
    if (v57 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1976A3464);
    }
    v26 = v57;
    memcpy(v57, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
    v58 = *(void **)(v14 + 528);
    if (v58 != v15)
      munmap(v58, *(_QWORD *)(v14 + 552));
    *(_QWORD *)(v14 + 528) = v26;
    *(_QWORD *)(v14 + 552) = v56;
    v22 = *(_QWORD *)(v14 + 544);
  }
  else
  {
    v26 = *(char **)(v14 + 528);
  }
  bzero(&v26[v22], v23 - v22);
  *(_QWORD *)(v14 + 544) = v24;
  v27 = (double *)(*(_QWORD *)(v14 + 528) + v23);
  *(_QWORD *)(v14 + 536) = v27 + 1;
  *v27 = a3;
  v28 = *(_QWORD *)(v14 + 544);
  v29 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = v29 + 8;
  v31 = *(_QWORD *)(v14 + 552);
  if (v31 < v29 + 8)
  {
    v59 = (2 * v31 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v60 = v59;
      v59 *= 2;
    }
    while (v60 < v30);
    v61 = (char *)mmap(0, v60, 3, 4098, -1, 0);
    if (v61 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1976A346CLL);
    }
    v32 = v61;
    memcpy(v61, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
    v62 = *(void **)(v14 + 528);
    if (v62 != v15)
      munmap(v62, *(_QWORD *)(v14 + 552));
    *(_QWORD *)(v14 + 528) = v32;
    *(_QWORD *)(v14 + 552) = v60;
    v28 = *(_QWORD *)(v14 + 544);
  }
  else
  {
    v32 = *(char **)(v14 + 528);
  }
  bzero(&v32[v28], v29 - v28);
  *(_QWORD *)(v14 + 544) = v30;
  v33 = (double *)(*(_QWORD *)(v14 + 528) + v29);
  *(_QWORD *)(v14 + 536) = v33 + 1;
  *v33 = a4;
  v34 = *(_QWORD *)(v14 + 544);
  v35 = (v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = v35 + 8;
  v37 = *(_QWORD *)(v14 + 552);
  if (v37 < v35 + 8)
  {
    v63 = (2 * v37 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v64 = v63;
      v63 *= 2;
    }
    while (v64 < v36);
    v65 = (char *)mmap(0, v64, 3, 4098, -1, 0);
    if (v65 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1976A3474);
    }
    v38 = v65;
    memcpy(v65, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
    v66 = *(void **)(v14 + 528);
    if (v66 != v15)
      munmap(v66, *(_QWORD *)(v14 + 552));
    *(_QWORD *)(v14 + 528) = v38;
    *(_QWORD *)(v14 + 552) = v64;
    v34 = *(_QWORD *)(v14 + 544);
  }
  else
  {
    v38 = *(char **)(v14 + 528);
  }
  bzero(&v38[v34], v35 - v34);
  *(_QWORD *)(v14 + 544) = v36;
  v39 = (double *)(*(_QWORD *)(v14 + 528) + v35);
  *(_QWORD *)(v14 + 536) = v39 + 1;
  *v39 = a5;
  v40 = *(_QWORD *)(v14 + 544);
  v41 = (v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  v42 = v41 + 8;
  v43 = *(_QWORD *)(v14 + 552);
  if (v43 >= v41 + 8)
  {
    v44 = *(char **)(v14 + 528);
    goto LABEL_11;
  }
  v67 = (2 * v43 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v68 = v67;
    v67 *= 2;
  }
  while (v68 < v42);
  v69 = (char *)mmap(0, v68, 3, 4098, -1, 0);
  if (v69 == (char *)-1)
  {
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x1976A345CLL);
  }
  v44 = v69;
  memcpy(v69, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
  v70 = *(void **)(v14 + 528);
  if (v70 != v15)
    munmap(v70, *(_QWORD *)(v14 + 552));
  *(_QWORD *)(v14 + 528) = v44;
  *(_QWORD *)(v14 + 552) = v68;
  v40 = *(_QWORD *)(v14 + 544);
LABEL_11:
  bzero(&v44[v40], v41 - v40);
  *(_QWORD *)(v14 + 544) = v42;
  v45 = (double *)(*(_QWORD *)(v14 + 528) + v41);
  *(_QWORD *)(v14 + 536) = v45 + 1;
  *v45 = a6;
  LOBYTE(v71) = 0;
  v72 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v12, &v73, 0, (uint64_t)&v71, 1);
  if (v72)
  {
    v47 = v71;
    v71 = 0;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  result = v73;
  v73 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v46);
    return (IPC::Encoder *)WTF::fastFree(v49, v50);
  }
  return result;
}

void sub_1976A3480(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebDeviceOrientationUpdateProviderProxy::motionChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  char *v28;
  double *v29;
  uint64_t v30;
  unint64_t v31;
  size_t v32;
  unint64_t v33;
  char *v34;
  double *v35;
  uint64_t v36;
  unint64_t v37;
  size_t v38;
  unint64_t v39;
  char *v40;
  double *v41;
  uint64_t v42;
  unint64_t v43;
  size_t v44;
  unint64_t v45;
  char *v46;
  double *v47;
  uint64_t v48;
  unint64_t v49;
  size_t v50;
  unint64_t v51;
  char *v52;
  double *v53;
  uint64_t v54;
  unint64_t v55;
  size_t v56;
  unint64_t v57;
  char *v58;
  double *v59;
  void *v60;
  uint64_t v61;
  IPC::Encoder *result;
  WTF *v63;
  void *v64;
  unint64_t v65;
  size_t v66;
  char *v67;
  void *v68;
  unint64_t v69;
  size_t v70;
  char *v71;
  void *v72;
  unint64_t v73;
  size_t v74;
  char *v75;
  void *v76;
  unint64_t v77;
  size_t v78;
  char *v79;
  void *v80;
  unint64_t v81;
  size_t v82;
  char *v83;
  void *v84;
  unint64_t v85;
  size_t v86;
  char *v87;
  void *v88;
  uint64_t v89[2];
  uint64_t v90[2];
  uint64_t v91[2];
  uint64_t v92;
  char v93;
  IPC::Encoder *v94;

  v91[0] = a2;
  v91[1] = a3;
  v90[0] = a4;
  v90[1] = a5;
  v89[0] = a6;
  v89[1] = a7;
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_QWORD *)(v19 + 208);
  v21 = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 1896);
  v22 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v22 = 1563;
  *(_QWORD *)(v22 + 8) = v21;
  v23 = (void *)(v22 + 16);
  *(_QWORD *)(v22 + 528) = v22 + 16;
  *(_QWORD *)(v22 + 536) = v22 + 16;
  *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v22 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
  v94 = (IPC::Encoder *)v22;
  v24 = *(_QWORD *)(v22 + 544);
  v25 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = v25 + 8;
  v27 = *(_QWORD *)(v22 + 552);
  if (v27 < v25 + 8)
  {
    v65 = (2 * v27 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v66 = v65;
      v65 *= 2;
    }
    while (v66 < v26);
    v67 = (char *)mmap(0, v66, 3, 4098, -1, 0);
    if (v67 == (char *)-1)
      goto LABEL_60;
    v28 = v67;
    memcpy(v67, *(const void **)(v22 + 528), *(_QWORD *)(v22 + 544));
    v68 = *(void **)(v22 + 528);
    if (v68 != v23)
      munmap(v68, *(_QWORD *)(v22 + 552));
    *(_QWORD *)(v22 + 528) = v28;
    *(_QWORD *)(v22 + 552) = v66;
    v24 = *(_QWORD *)(v22 + 544);
  }
  else
  {
    v28 = *(char **)(v22 + 528);
  }
  bzero(&v28[v24], v25 - v24);
  *(_QWORD *)(v22 + 544) = v26;
  v29 = (double *)(*(_QWORD *)(v22 + 528) + v25);
  *(_QWORD *)(v22 + 536) = v29 + 1;
  *v29 = a8;
  v30 = *(_QWORD *)(v22 + 544);
  v31 = (v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = v31 + 8;
  v33 = *(_QWORD *)(v22 + 552);
  if (v33 < v31 + 8)
  {
    v69 = (2 * v33 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v70 = v69;
      v69 *= 2;
    }
    while (v70 < v32);
    v71 = (char *)mmap(0, v70, 3, 4098, -1, 0);
    if (v71 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1976A3A6CLL);
    }
    v34 = v71;
    memcpy(v71, *(const void **)(v22 + 528), *(_QWORD *)(v22 + 544));
    v72 = *(void **)(v22 + 528);
    if (v72 != v23)
      munmap(v72, *(_QWORD *)(v22 + 552));
    *(_QWORD *)(v22 + 528) = v34;
    *(_QWORD *)(v22 + 552) = v70;
    v30 = *(_QWORD *)(v22 + 544);
  }
  else
  {
    v34 = *(char **)(v22 + 528);
  }
  bzero(&v34[v30], v31 - v30);
  *(_QWORD *)(v22 + 544) = v32;
  v35 = (double *)(*(_QWORD *)(v22 + 528) + v31);
  *(_QWORD *)(v22 + 536) = v35 + 1;
  *v35 = a9;
  v36 = *(_QWORD *)(v22 + 544);
  v37 = (v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = v37 + 8;
  v39 = *(_QWORD *)(v22 + 552);
  if (v39 < v37 + 8)
  {
    v73 = (2 * v39 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v74 = v73;
      v73 *= 2;
    }
    while (v74 < v38);
    v75 = (char *)mmap(0, v74, 3, 4098, -1, 0);
    if (v75 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1976A3A74);
    }
    v40 = v75;
    memcpy(v75, *(const void **)(v22 + 528), *(_QWORD *)(v22 + 544));
    v76 = *(void **)(v22 + 528);
    if (v76 != v23)
      munmap(v76, *(_QWORD *)(v22 + 552));
    *(_QWORD *)(v22 + 528) = v40;
    *(_QWORD *)(v22 + 552) = v74;
    v36 = *(_QWORD *)(v22 + 544);
  }
  else
  {
    v40 = *(char **)(v22 + 528);
  }
  bzero(&v40[v36], v37 - v36);
  *(_QWORD *)(v22 + 544) = v38;
  v41 = (double *)(*(_QWORD *)(v22 + 528) + v37);
  *(_QWORD *)(v22 + 536) = v41 + 1;
  *v41 = a10;
  v42 = *(_QWORD *)(v22 + 544);
  v43 = (v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v44 = v43 + 8;
  v45 = *(_QWORD *)(v22 + 552);
  if (v45 < v43 + 8)
  {
    v77 = (2 * v45 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v78 = v77;
      v77 *= 2;
    }
    while (v78 < v44);
    v79 = (char *)mmap(0, v78, 3, 4098, -1, 0);
    if (v79 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1976A3A7CLL);
    }
    v46 = v79;
    memcpy(v79, *(const void **)(v22 + 528), *(_QWORD *)(v22 + 544));
    v80 = *(void **)(v22 + 528);
    if (v80 != v23)
      munmap(v80, *(_QWORD *)(v22 + 552));
    *(_QWORD *)(v22 + 528) = v46;
    *(_QWORD *)(v22 + 552) = v78;
    v42 = *(_QWORD *)(v22 + 544);
  }
  else
  {
    v46 = *(char **)(v22 + 528);
  }
  bzero(&v46[v42], v43 - v42);
  *(_QWORD *)(v22 + 544) = v44;
  v47 = (double *)(*(_QWORD *)(v22 + 528) + v43);
  *(_QWORD *)(v22 + 536) = v47 + 1;
  *v47 = a11;
  v48 = *(_QWORD *)(v22 + 544);
  v49 = (v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  v50 = v49 + 8;
  v51 = *(_QWORD *)(v22 + 552);
  if (v51 < v49 + 8)
  {
    v81 = (2 * v51 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v82 = v81;
      v81 *= 2;
    }
    while (v82 < v50);
    v83 = (char *)mmap(0, v82, 3, 4098, -1, 0);
    if (v83 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1976A3A84);
    }
    v52 = v83;
    memcpy(v83, *(const void **)(v22 + 528), *(_QWORD *)(v22 + 544));
    v84 = *(void **)(v22 + 528);
    if (v84 != v23)
      munmap(v84, *(_QWORD *)(v22 + 552));
    *(_QWORD *)(v22 + 528) = v52;
    *(_QWORD *)(v22 + 552) = v82;
    v48 = *(_QWORD *)(v22 + 544);
  }
  else
  {
    v52 = *(char **)(v22 + 528);
  }
  bzero(&v52[v48], v49 - v48);
  *(_QWORD *)(v22 + 544) = v50;
  v53 = (double *)(*(_QWORD *)(v22 + 528) + v49);
  *(_QWORD *)(v22 + 536) = v53 + 1;
  *v53 = a12;
  v54 = *(_QWORD *)(v22 + 544);
  v55 = (v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  v56 = v55 + 8;
  v57 = *(_QWORD *)(v22 + 552);
  if (v57 >= v55 + 8)
  {
    v58 = *(char **)(v22 + 528);
    goto LABEL_13;
  }
  v85 = (2 * v57 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v86 = v85;
    v85 *= 2;
  }
  while (v86 < v56);
  v87 = (char *)mmap(0, v86, 3, 4098, -1, 0);
  if (v87 == (char *)-1)
  {
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1976A3A64);
  }
  v58 = v87;
  memcpy(v87, *(const void **)(v22 + 528), *(_QWORD *)(v22 + 544));
  v88 = *(void **)(v22 + 528);
  if (v88 != v23)
    munmap(v88, *(_QWORD *)(v22 + 552));
  *(_QWORD *)(v22 + 528) = v58;
  *(_QWORD *)(v22 + 552) = v86;
  v54 = *(_QWORD *)(v22 + 544);
LABEL_13:
  bzero(&v58[v54], v55 - v54);
  *(_QWORD *)(v22 + 544) = v56;
  v59 = (double *)(*(_QWORD *)(v22 + 528) + v55);
  *(_QWORD *)(v22 + 536) = v59 + 1;
  *v59 = a13;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>((IPC::Encoder *)v22, v91);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>((IPC::Encoder *)v22, v90);
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>((IPC::Encoder *)v22, v89);
  LOBYTE(v92) = 0;
  v93 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v20, &v94, 0, (uint64_t)&v92, 1);
  if (v93)
  {
    v61 = v92;
    v92 = 0;
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  }
  result = v94;
  v94 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v60);
    return (IPC::Encoder *)WTF::fastFree(v63, v64);
  }
  return result;
}

void sub_1976A3A90(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, IPC::Encoder *a18)
{
  WTF *v19;
  void *v20;

  if (a17 && a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a18)
  {
    IPC::Encoder::~Encoder(a18, a2);
    WTF::fastFree(v19, v20);
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebDeviceOrientationUpdateProviderProxy *WebKit::WebDeviceOrientationUpdateProviderProxy::didReceiveMessage(WebKit::WebDeviceOrientationUpdateProviderProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0x617:
      this = (WebKit::WebDeviceOrientationUpdateProviderProxy *)WebKit::WebDeviceOrientationUpdateProviderProxy::startUpdatingDeviceMotion(this);
      break;
    case 0x618:
      this = (WebKit::WebDeviceOrientationUpdateProviderProxy *)WebKit::WebDeviceOrientationUpdateProviderProxy::startUpdatingDeviceOrientation(this);
      break;
    case 0x619:
      this = (WebKit::WebDeviceOrientationUpdateProviderProxy *)WebKit::WebDeviceOrientationUpdateProviderProxy::stopUpdatingDeviceMotion(this);
      break;
    case 0x61A:
      this = (WebKit::WebDeviceOrientationUpdateProviderProxy *)WebKit::WebDeviceOrientationUpdateProviderProxy::stopUpdatingDeviceOrientation(this);
      break;
    default:
      return this;
  }
  return this;
}

WebKit::WebDeviceOrientationUpdateProviderProxy *`non-virtual thunk to'WebKit::WebDeviceOrientationUpdateProviderProxy::didReceiveMessage(WebKit::WebDeviceOrientationUpdateProviderProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::WebDeviceOrientationUpdateProviderProxy::didReceiveMessage((WebKit::WebDeviceOrientationUpdateProviderProxy *)((char *)this - 16), a2, a3);
}

void sub_1976A3BD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1976A3F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, WTF::StringImpl *a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v23);

  _Unwind_Resume(a1);
}

void sub_1976A46EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,WTF::StringImpl *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,WTF::StringImpl *a45,uint64_t a46,WTF::StringImpl *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,WTF::StringImpl *a53,char a54)
{
  void *v54;
  void *v55;
  uint64_t v56;
  WTF::StringImpl *v58;

  WTF::RefCounted<WebKit::WebExtensionTab>::deref(v56);
  if (a32 && a31)
  {
    if (*(_DWORD *)a31 == 2)
      WTF::StringImpl::destroy(a31, v58);
    else
      *(_DWORD *)a31 -= 2;
  }
  if (a30 && a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, v58);
    else
      *(_DWORD *)a25 -= 2;
  }

  _Unwind_Resume(a1);
}

uint64_t std::optional<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 16))
  {
    v4 = *(_DWORD *)(a1 + 12);
    if (v4)
      WTF::VectorDestructor<true,WebKit::WebExtensionTabParameters>::destruct(*(_QWORD *)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 176 * v4));
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v5 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v5;
    LODWORD(v5) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 8) = v5;
    LODWORD(v5) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 12) = v5;
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void WebKit::WebExtensionAction::closePopup(WebKit::WebExtensionAction *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  uint8_t v11[16];

  v2 = qword_1ECE710C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v11 = 0;
    _os_log_debug_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEBUG, "Popup closed", v11, 2u);
  }
  *((_BYTE *)this + 124) &= 0xFCu;
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 64);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      CFRetain(*(CFTypeRef *)(v6 - 8));
      *(_BYTE *)(v6 + 161) = 0;
      CFRelease(*(CFTypeRef *)(v6 - 8));
    }
  }
  v7 = (void *)*((_QWORD *)this + 7);
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v7);
  objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "_close");

  v8 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (void *)*((_QWORD *)this + 6);
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v9);
  objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "dismissViewControllerAnimated:completion:", 1, 0);

  v10 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
    CFRelease(v10);
}

void sub_1976A4AB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1976A4C00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1976A4D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1976A4E84(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1976A5008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1976A5098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)_WKWebExtensionActionWebView;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1976A5180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1976A51DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1976A53F8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1976A56A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v5 = v3;

  CFRelease(*(CFTypeRef *)(v4 - 8));
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAction::popupWebView(WebKit::WebExtensionAction *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v6;
  _WKWebExtensionActionWebViewDelegate *v7;
  _WKWebExtensionActionWebViewDelegate *v8;
  const void *v9;
  _WKWebExtensionActionWebView *v10;
  _WKWebExtensionActionWebView *v11;
  _WKWebExtensionActionWebView *v12;
  const void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  WebKit::WebExtensionContext *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;

  if (WebKit::WebExtensionAction::presentsPopup(this)
    && (v2 = *((_QWORD *)this + 3)) != 0
    && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    v4 = (void *)*((_QWORD *)this + 7);
    if (v4)
    {
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(*((id *)this + 7));
      objc_claimAutoreleasedReturnValue();
    }
    else
    {
      WebKit::WebExtensionContext::webViewConfiguration(v3 - 16, 3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setSuppressesIncrementalRendering:", 1);
      v7 = -[_WKWebExtensionActionWebViewDelegate initWithWebExtensionAction:]([_WKWebExtensionActionWebViewDelegate alloc], "initWithWebExtensionAction:", this);
      v8 = v7;
      if (v7)
        CFRetain(v7);

      v9 = (const void *)*((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = v8;
      if (v9)
        CFRelease(v9);

      v10 = [_WKWebExtensionActionWebView alloc];
      v11 = -[_WKWebExtensionActionWebView initWithFrame:configuration:webExtensionAction:](v10, "initWithFrame:configuration:webExtensionAction:", v6, this, *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
      v12 = v11;
      if (v11)
        CFRetain(v11);

      v13 = (const void *)*((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v12;
      if (v13)
        CFRelease(v13);

      v14 = (void *)*((_QWORD *)this + 8);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v14);
      objc_claimAutoreleasedReturnValue();
      v15 = (void *)*((_QWORD *)this + 7);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v15);
      objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "setNavigationDelegate:", v14);

      v16 = (void *)*((_QWORD *)this + 8);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v16);
      objc_claimAutoreleasedReturnValue();
      v17 = (void *)*((_QWORD *)this + 7);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v17);
      objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "setUIDelegate:", v16);

      v18 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v18)
        v19 = v18 - 16;
      else
        v19 = 0;
      v20 = *(unsigned __int8 *)(v19 + 121);
      v21 = (void *)*((_QWORD *)this + 7);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v21);
      objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "setInspectable:", v20);

      v22 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v22)
        v23 = v22 - 16;
      else
        v23 = 0;
      v24 = *(uint64_t **)(v23 + 56);
      WebKit::WebExtension::populateDisplayStringsIfNeeded((WebKit::WebExtension *)v24);
      WTF::RetainPtr<__IOHIDDevice *>::get(v24 + 24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = (void *)*((_QWORD *)this + 7);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v26);
      objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "setAccessibilityLabel:", v25);

      WebKit::WebExtensionAction::popupWebViewInspectionName(this);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = (void *)*((_QWORD *)this + 7);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v28);
      objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "_setRemoteInspectionNameOverride:", v27);

      v29 = (void *)*((_QWORD *)this + 7);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v29);
      objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "_overrideViewportWithArguments:", &unk_1E356F898);

      v30 = *((_QWORD *)this + 3);
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 8);
        if (v31)
          v32 = (WebKit::WebExtensionContext *)(v31 - 16);
        else
          v32 = 0;
      }
      else
      {
        v32 = 0;
      }
      v33 = (void *)*((_QWORD *)this + 7);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v33);
      objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "_page");
      WebKit::WebExtensionContext::addPopupPage(v32, v47, (CFTypeRef *)this);

      v34 = *((_QWORD *)this + 3);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 8);
        if (v35)
          v36 = v35 - 16;
        else
          v36 = 0;
      }
      else
      {
        v36 = 0;
      }
      WebKit::WebExtensionAction::popupPath(this, &v46);
      MEMORY[0x19AEABB24](&v47, v36 + 72, &v46, 0);
      v38 = v46;
      v46 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v37);
        else
          *(_DWORD *)v38 -= 2;
      }
      v39 = (void *)*((_QWORD *)this + 7);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v39);
      objc_claimAutoreleasedReturnValue();
      v40 = (void *)MEMORY[0x1E0C92C80];
      WTF::URL::operator NSURL *();
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "requestWithURL:", v41, v46);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = (id)objc_msgSend(v39, "loadRequest:", v42);

      v4 = (void *)*((_QWORD *)this + 7);
      WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v4);
      objc_claimAutoreleasedReturnValue();
      v45 = v47;
      v47 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v44);
        else
          *(_DWORD *)v45 -= 2;
      }

    }
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

void sub_1976A5AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1976A5BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id WTF::dynamic_objc_cast<UISheetPresentationController>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_1976A5C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1976A5CFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1976A5E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1976A6078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1976A6194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1976A6210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

WebKit::WebExtensionAction *WebKit::WebExtensionAction::WebExtensionAction(WebKit::WebExtensionAction *this, WebKit::WebExtensionContext *a2)
{
  unsigned int *v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E34F4870;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v4 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *((_QWORD *)this + 3) = v4;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *((_BYTE *)this + 124) &= 0xFCu;
  return this;
}

void sub_1976A633C(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

WebKit::WebExtensionAction *WebKit::WebExtensionAction::WebExtensionAction(WebKit::WebExtensionAction *this, WebKit::WebExtensionContext *a2, WebKit::WebExtensionTab *a3)
{
  unsigned int *v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E34F4870;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v6 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  ++*(_DWORD *)a3;
  *((_QWORD *)this + 3) = v6;
  *((_QWORD *)this + 4) = a3;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  *((_BYTE *)this + 124) &= 0xFCu;
  return this;
}

void sub_1976A640C(_Unwind_Exception *a1, void *a2)
{
  unsigned int **v2;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v2, a2);
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAction::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1 == a2)
    return 1;
  v2 = a1[3];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v2 = v3 - 16;
    else
      v2 = 0;
  }
  v4 = a2[3];
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v4 = v5 - 16;
    else
      v4 = 0;
  }
  return v2 == v4 && a1[4] == a2[4] && a1[5] == a2[5];
}

void WebKit::WebExtensionAction::clearCustomizations(WebKit::WebExtensionAction *this)
{
  const void *v2;
  WTF::StringImpl *v3;

  v2 = (const void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 11) = 0;
    CFRelease(v2);
  }
  else
  {
    if (!*((_QWORD *)this + 9)
      && !*((_QWORD *)this + 12)
      && !*((_QWORD *)this + 13)
      && !*((_BYTE *)this + 121)
      && !*((_QWORD *)this + 14))
    {
      return;
    }
    *((_QWORD *)this + 11) = 0;
  }
  v3 = (WTF::StringImpl *)MEMORY[0x1E0CBF6F0];
  WTF::String::operator=((WTF::StringImpl **)this + 9, MEMORY[0x1E0CBF6F0]);
  WTF::String::operator=((WTF::StringImpl **)this + 12, v3);
  WTF::String::operator=((WTF::StringImpl **)this + 13, v3);
  if (*((_BYTE *)this + 121))
    *((_BYTE *)this + 121) = 0;
  *((_QWORD *)this + 14) = 0;
  WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)this);
}

void WebKit::WebExtensionAction::propertiesDidChange(CFTypeRef *this)
{
  _QWORD *v2;
  void *v3;
  void *aBlock;

  CFRetain(this[1]);
  v2 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v2 = MEMORY[0x1E0C809A0];
  v2[1] = 50331650;
  v2[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::propertiesDidChange(void)::$_0>(WebKit::WebExtensionAction::propertiesDidChange(void)::$_0)::{lambda(void *)#1}::__invoke;
  v2[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::propertiesDidChange(void)::$_0>(WebKit::WebExtensionAction::propertiesDidChange(void)::$_0)::descriptor;
  v2[4] = this;
  v2[5] = this;
  aBlock = _Block_copy(v2);

  v3 = _Block_copy(aBlock);
  dispatch_async(MEMORY[0x1E0C80D38], v3);

}

void sub_1976A65E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAction::fallbackAction(WebKit::WebExtensionAction *this)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::WebExtensionContext *v3;
  WebKit::WebExtensionWindow *v4;
  uint64_t v5;
  WebKit::WebExtensionWindow *v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*((_QWORD *)this + 4))
      {
        v3 = (WebKit::WebExtensionContext *)(v2 - 16);
        WebKit::WebExtensionTab::window(*((WebKit::WebExtensionTab **)this + 4), &v7);
        v4 = v7;
        WebKit::WebExtensionContext::getAction(v3, v7, &v8);
        v5 = v8;
        if (v8)
          CFRelease(*(CFTypeRef *)(v8 + 8));
        if (v4)
          WTF::RefCounted<WebKit::WebExtensionWindow>::deref((uint64_t)v4);
        return v5;
      }
      if (*((_QWORD *)this + 5))
        return WebKit::WebExtensionContext::defaultAction((WebKit::WebExtensionContext *)(v2 - 16));
    }
  }
  return 0;
}

void sub_1976A6698(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v1);
  _Unwind_Resume(exception_object);
}

id WebKit::WebExtensionAction::icon(WebKit::WebExtensionAction *this, CGSize a2)
{
  uint64_t v2;
  uint64_t v3;
  double height;
  double width;
  id *v7;
  uint64_t v8;
  WebKit::WebExtension *v9;
  NSDictionary *v10;
  double v11;
  void *v12;
  uint64_t v13;
  CFTypeRef *v14;
  uint64_t v16;
  uint64_t v17;
  CGSize v18;
  CGSize v19;

  v2 = *((_QWORD *)this + 3);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    height = a2.height;
    width = a2.width;
    v8 = *((_QWORD *)this + 11);
    v7 = (id *)((char *)this + 88);
    if (!v8
      || ((v9 = *(WebKit::WebExtension **)(v3 + 40),
           WTF::RetainPtr<NSMutableArray>::get(v7),
           v10 = (NSDictionary *)objc_claimAutoreleasedReturnValue(),
           width <= height)
        ? (v11 = height)
        : (v11 = width),
          WebKit::WebExtension::bestImageInIconsDictionary(v9, v10, (unint64_t)v11),
          v12 = (void *)objc_claimAutoreleasedReturnValue(),
          v10,
          !v12))
    {
      v13 = WebKit::WebExtensionAction::fallbackAction(this);
      if (v13)
      {
        v14 = (CFTypeRef *)v13;
        CFRetain(*(CFTypeRef *)(v13 + 8));
        v18.width = width;
        v18.height = height;
        WebKit::WebExtensionAction::icon((WebKit::WebExtensionAction *)v14, v18);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        CFRelease(v14[1]);
      }
      else
      {
        v16 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if (v16)
          v17 = v16 - 16;
        else
          v17 = 0;
        v19.width = width;
        v19.height = height;
        WebKit::WebExtension::actionIcon(*(WebKit::WebExtension **)(v17 + 56), v19);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
      }
    }
  }
  else
  {
    v12 = 0;
  }
  return v12;
}

void sub_1976A67A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::setIconsDictionary(id *this, NSDictionary *a2)
{
  NSDictionary *v3;
  const void **v4;
  void *v5;
  void *v6;
  void *v7;
  NSDictionary *v8;
  char v9;
  CFTypeRef v10;
  NSDictionary *v11;
  const void *v12;
  CFTypeRef cf;

  v3 = a2;
  v4 = (const void **)(this + 11);
  if (this[11])
  {
    WTF::RetainPtr<NSMutableArray>::get(this + 11);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, v5);

  }
  else
  {
    WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, MEMORY[0x1E0C9AA70]);
  }
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
    v8 = v3;
  else
    v8 = (NSDictionary *)MEMORY[0x1E0C9AA70];
  v9 = objc_msgSend(v6, "isEqualToDictionary:", v8);

  v10 = cf;
  cf = 0;
  if (v10)
    CFRelease(v10);
  if ((v9 & 1) == 0)
  {
    if (-[NSDictionary count](v3, "count"))
      v11 = v3;
    else
      v11 = 0;
    WTF::RetainPtr<NSDictionary>::RetainPtr(&cf, v11);
    v12 = *v4;
    *v4 = cf;
    cf = 0;
    if (v12)
      CFRelease(v12);
    WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)this);
  }

}

void sub_1976A68C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::popupPath(WebKit::WebExtensionAction *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  CFTypeRef *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  id v11;

  v3 = *((_QWORD *)this + 3);
  if (!v3 || !*(_QWORD *)(v3 + 8))
  {
    v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (!*MEMORY[0x1E0CBF738])
    {
LABEL_8:
      *a2 = v5;
      return;
    }
LABEL_7:
    *v5 += 2;
    goto LABEL_8;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 9);
  if (v5)
    goto LABEL_7;
  v6 = WebKit::WebExtensionAction::fallbackAction(this);
  if (v6)
  {
    v7 = (CFTypeRef *)v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    WebKit::WebExtensionAction::popupPath((WebKit::WebExtensionAction *)v7);
    CFRelease(v7[1]);
  }
  else
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v8)
      v9 = v8 - 16;
    else
      v9 = 0;
    v10 = *(uint64_t **)(v9 + 56);
    WebKit::WebExtension::populateActionPropertiesIfNeeded((WebKit::WebExtension *)v10);
    WTF::RetainPtr<__IOHIDDevice *>::get(v10 + 33);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    MEMORY[0x19AEABCC8](a2);

  }
}

void sub_1976A69FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::setPopupPath(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **v5;

  v5 = (WTF::StringImpl **)(a1 + 72);
  if ((WTF::equal(*(WTF **)(a1 + 72), *(const WTF::StringImpl **)a2, a3) & 1) == 0)
  {
    WTF::String::operator=(v5, a2);
    WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)a1);
  }
}

__CFString *WebKit::WebExtensionAction::popupWebViewInspectionName(WebKit::WebExtensionAction *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  const __CFString *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  __CFString *v13;
  WTF::StringImpl *v15;

  v2 = *((_QWORD *)this + 10);
  if (v2 && *(_DWORD *)(v2 + 4))
    goto LABEL_15;
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  v5 = *(uint64_t **)(v4 + 56);
  WebKit::WebExtension::populateDisplayStringsIfNeeded((WebKit::WebExtension *)v5);
  v6 = WTF::RetainPtr<__IOHIDDevice *>::get(v5 + 25);
  WebCore::formatLocalizedString((WebCore *)CFSTR("%@ — Extension Popup Page"), v7, v6);
  v9 = v15;
  v15 = 0;
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      v12 = v15;
      v15 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  }
  if (v9)
LABEL_15:
    v13 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v13 = &stru_1E351F1B8;
  return v13;
}

void WebKit::WebExtensionAction::setPopupWebViewInspectionName(WTF::StringImpl **this, const WTF::String *a2)
{
  const __CFString *v4;
  WTF::StringImpl *v5;
  __CFString *v6;

  WTF::String::operator=(this + 10, a2);
  if (*(_QWORD *)a2)
    v4 = (const __CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v4 = &stru_1E351F1B8;
  v6 = (__CFString *)v4;
  v5 = this[7];
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v5);
  objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "_setRemoteInspectionNameOverride:", v6);

}

void sub_1976A6BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAction::popupViewController(WebKit::WebExtensionAction *this)
{
  void *v2;
  _WKWebExtensionActionViewController *v3;
  _WKWebExtensionActionViewController *v4;
  const void *v5;
  id v6;

  if (WebKit::WebExtensionAction::presentsPopup(this))
  {
    v2 = (void *)*((_QWORD *)this + 6);
    if (!v2)
    {
      v3 = -[_WKWebExtensionActionViewController initWithWebExtensionAction:]([_WKWebExtensionActionViewController alloc], "initWithWebExtensionAction:", this);
      v4 = v3;
      if (v3)
        CFRetain(v3);

      v5 = (const void *)*((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = v4;
      if (v5)
        CFRelease(v5);

      v2 = (void *)*((_QWORD *)this + 6);
    }
    v6 = v2;
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

void sub_1976A6C7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAction::canProgrammaticallyPresentPopup(WebKit::WebExtensionAction *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;

  v1 = *((_QWORD *)this + 3);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 48)) != 0 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    WebKit::WebExtensionController::delegate((id *)(v4 - 16));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_opt_respondsToSelector();

    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

void sub_1976A6D1C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 - 8));
  _Unwind_Resume(a1);
}

id WebKit::WebExtensionController::delegate(id *this)
{
  void *v1;
  void *v2;

  WebKit::WebExtension::wrapper(this);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "delegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1976A6D74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::presentPopupWhenReady(WebKit::WebExtensionAction *this)
{
  uint64_t v1;
  char canProgrammaticallyPresentPopup;
  NSObject *v4;
  id v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v1 = *((_QWORD *)this + 3);
  if (v1 && *(_QWORD *)(v1 + 8) && (*((_BYTE *)this + 124) & 3) == 0)
  {
    canProgrammaticallyPresentPopup = WebKit::WebExtensionAction::canProgrammaticallyPresentPopup(this);
    v4 = qword_1ECE710C8;
    if ((canProgrammaticallyPresentPopup & 1) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v6 = 0;
        _os_log_debug_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEBUG, "Present popup when ready", v6, 2u);
      }
      *((_BYTE *)this + 124) |= 1u;
      v5 = WebKit::WebExtensionAction::popupWebView(this);
    }
    else if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Delegate does not implement the webExtensionController:presentPopupForAction:forExtensionContext:completionHandler: method", buf, 2u);
    }
  }
}

void WebKit::WebExtensionAction::readyToPresentPopup(WebKit::WebExtensionAction *this)
{
  char v1;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void *aBlock;

  v1 = *((_BYTE *)this + 124);
  *((_BYTE *)this + 124) = v1 & 0xFE;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = v1 & 2;
    v4 = *(_QWORD *)(v2 + 8) && v3 == 0;
    if (v4 && *((_QWORD *)this + 7))
    {
      WebKit::WebExtensionAction::setHasUnreadBadgeText(this, 0);
      *((_BYTE *)this + 124) |= 2u;
      v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v6)
        v7 = v6 - 16;
      else
        v7 = 0;
      v8 = *(_QWORD *)(v7 + 64);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          CFRetain(*(CFTypeRef *)(v9 - 8));
          *(_BYTE *)(v9 + 161) = 1;
          CFRelease(*(CFTypeRef *)(v9 - 8));
        }
      }
      CFRetain(*((CFTypeRef *)this + 1));
      v10 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
      *v10 = MEMORY[0x1E0C809A0];
      v10[1] = 50331650;
      v10[2] = WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0)::{lambda(void *)#1}::__invoke;
      v10[3] = &WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0)::descriptor;
      v10[4] = this;
      v10[5] = this;
      aBlock = _Block_copy(v10);

      v11 = _Block_copy(aBlock);
      dispatch_async(MEMORY[0x1E0C80D38], v11);

    }
  }
}

void sub_1976A6FAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::setHasUnreadBadgeText(WebKit::WebExtensionAction *this, int a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  CFTypeRef *v14;
  WTF::StringImpl *v15;

  WebKit::WebExtensionAction::badgeText(this, &v15);
  v5 = v15;
  if (v15)
  {
    v6 = *(_DWORD *)v15;
    v7 = *((_DWORD *)v15 + 1);
    v8 = v7 != 0;
    if (v7)
      v9 = a2;
    else
      v9 = 0;
    v15 = 0;
    v10 = v6 - 2;
    if (v10)
      *(_DWORD *)v5 = v10;
    else
      WTF::StringImpl::destroy(v5, v4);
    v11 = *((unsigned __int8 *)this + 123);
    if (v7)
      v12 = v11 == 0;
    else
      v12 = 1;
    if (v12)
    {
      if ((v7 != 0) == (v11 != 0))
        return;
    }
    else
    {
      if (*((unsigned __int8 *)this + 122) == v9)
        return;
      v8 = 1;
    }
  }
  else
  {
    if (!*((_BYTE *)this + 123))
      return;
    LOWORD(v9) = 0;
    v8 = 0;
  }
  *((_WORD *)this + 61) = v9 | (v8 << 8);
  v13 = WebKit::WebExtensionAction::fallbackAction(this);
  if (v13)
  {
    v14 = (CFTypeRef *)v13;
    CFRetain(*(CFTypeRef *)(v13 + 8));
    if ((a2 & 1) == 0)
      WebKit::WebExtensionAction::setHasUnreadBadgeText((WebKit::WebExtensionAction *)v14, 0);
    CFRelease(v14[1]);
  }
  WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)this);
}

void sub_1976A70C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::label(WebKit::WebExtensionAction *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v8;
  uint64_t *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  id v20;

  v4 = *((_QWORD *)a1 + 3);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v8 = (_DWORD *)*((_QWORD *)a1 + 12);
    if (v8)
    {
      if (a2 && !v8[1])
      {
        v9 = *(uint64_t **)(v5 + 40);
        WebKit::WebExtension::populateDisplayStringsIfNeeded((WebKit::WebExtension *)v9);
        WTF::RetainPtr<__IOHIDDevice *>::get(v9 + 24);
        v20 = (id)objc_claimAutoreleasedReturnValue();
        MEMORY[0x19AEABCC8](a3);
LABEL_7:

        return;
      }
      *v8 += 2;
      *a3 = v8;
    }
    else
    {
      v11 = WebKit::WebExtensionAction::fallbackAction(a1);
      if (!v11)
      {
        v13 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
        if (v13)
          v14 = v13 - 16;
        else
          v14 = 0;
        v15 = *(uint64_t **)(v14 + 56);
        WebKit::WebExtension::populateActionPropertiesIfNeeded((WebKit::WebExtension *)v15);
        WTF::RetainPtr<__IOHIDDevice *>::get(v15 + 32);
        v20 = (id)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v20, "length");
        if (!a2 || v16)
        {
          MEMORY[0x19AEABCC8](a3, v20);
        }
        else
        {

          v17 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
          if (v17)
            v18 = v17 - 16;
          else
            v18 = 0;
          v19 = *(uint64_t **)(v18 + 56);
          WebKit::WebExtension::populateDisplayStringsIfNeeded((WebKit::WebExtension *)v19);
          WTF::RetainPtr<__IOHIDDevice *>::get(v19 + 24);
          v20 = (id)objc_claimAutoreleasedReturnValue();
          MEMORY[0x19AEABCC8](a3);
        }
        goto LABEL_7;
      }
      v12 = v11;
      CFRetain(*(CFTypeRef *)(v11 + 8));
      WebKit::WebExtensionAction::label(v12, 1);
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
  }
  else
  {
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v10 += 2;
    *a3 = v10;
  }
}

void sub_1976A7274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::setLabel(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **v5;

  v5 = (WTF::StringImpl **)(a1 + 96);
  if ((WTF::equal(*(WTF **)(a1 + 96), *(const WTF::StringImpl **)a2, a3) & 1) == 0)
  {
    WTF::String::operator=(v5, a2);
    WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)a1);
  }
}

void WebKit::WebExtensionAction::badgeText(WebKit::WebExtensionAction *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  CFTypeRef *v6;

  v3 = *((_QWORD *)this + 3);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = (_DWORD *)*((_QWORD *)this + 13);
    if (v4)
    {
LABEL_9:
      *v4 += 2;
      goto LABEL_10;
    }
    if (*((_QWORD *)this + 14))
    {
      WTF::String::number(*((WTF::String **)this + 14));
      return;
    }
    v5 = WebKit::WebExtensionAction::fallbackAction(this);
    if (v5)
    {
      v6 = (CFTypeRef *)v5;
      CFRetain(*(CFTypeRef *)(v5 + 8));
      WebKit::WebExtensionAction::badgeText((WebKit::WebExtensionAction *)v6);
      CFRelease(v6[1]);
      return;
    }
  }
  v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    goto LABEL_9;
LABEL_10:
  *a2 = v4;
}

void sub_1976A739C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::setBadgeText(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **v5;

  v5 = (WTF::StringImpl **)(a1 + 104);
  if ((WTF::equal(*(WTF **)(a1 + 104), *(const WTF::StringImpl **)a2, a3) & 1) == 0)
  {
    WTF::String::operator=(v5, a2);
    if (*(_QWORD *)a2)
    {
      *(_WORD *)(a1 + 122) = (*(_DWORD *)(*(_QWORD *)a2 + 4) != 0) | 0x100;
    }
    else if (*(_BYTE *)(a1 + 123))
    {
      *(_BYTE *)(a1 + 123) = 0;
    }
    WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)a1);
  }
}

BOOL WebKit::WebExtensionAction::hasUnreadBadgeText(WebKit::WebExtensionAction *this)
{
  uint64_t v1;
  uint64_t hasUnreadBadgeText;
  uint64_t v3;
  CFTypeRef *v4;

  v1 = *((_QWORD *)this + 3);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  if (!*((_BYTE *)this + 123))
  {
    v3 = WebKit::WebExtensionAction::fallbackAction(this);
    if (v3)
    {
      v4 = (CFTypeRef *)v3;
      CFRetain(*(CFTypeRef *)(v3 + 8));
      hasUnreadBadgeText = WebKit::WebExtensionAction::hasUnreadBadgeText((WebKit::WebExtensionAction *)v4);
      CFRelease(v4[1]);
      return hasUnreadBadgeText;
    }
    return 0;
  }
  return *((_BYTE *)this + 122) != 0;
}

void sub_1976A74AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::incrementBlockedResourceCount(WebKit::WebExtensionAction *this, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;

  if (a2)
  {
    *((_QWORD *)this + 14) = (*((_QWORD *)this + 14) + a2) & ~((*((_QWORD *)this + 14) + a2) >> 63);
    WebKit::WebExtensionAction::badgeText(this, &v6);
    v4 = v6;
    if (v6)
    {
      v6 = 0;
      v5 = *((_DWORD *)v4 + 1);
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::destroy(v4, v3);
        if (!v5)
          goto LABEL_6;
        goto LABEL_5;
      }
      *(_DWORD *)v4 -= 2;
      if (v5)
LABEL_5:
        *((_WORD *)this + 61) = 257;
    }
LABEL_6:
    WebKit::WebExtensionAction::propertiesDidChange((CFTypeRef *)this);
  }
}

BOOL WebKit::WebExtensionAction::isEnabled(WebKit::WebExtensionAction *this)
{
  uint64_t v1;
  uint64_t isEnabled;
  uint64_t v4;
  CFTypeRef *v5;

  v1 = *((_QWORD *)this + 3);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  if (*((_BYTE *)this + 121))
    return *((_BYTE *)this + 120) != 0;
  v4 = WebKit::WebExtensionAction::fallbackAction(this);
  if (!v4)
    return 1;
  v5 = (CFTypeRef *)v4;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  isEnabled = WebKit::WebExtensionAction::isEnabled((WebKit::WebExtensionAction *)v5);
  CFRelease(v5[1]);
  return isEnabled;
}

void sub_1976A75B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAction::setEnabled(CFTypeRef *this, __int16 a2)
{
  if ((a2 & 0xFF00) != 0 && *((_BYTE *)this + 121))
  {
    if (*((unsigned __int8 *)this + 120) == a2)
      return;
    goto LABEL_4;
  }
  if (((a2 & 0xFF00) != 0) != (*((_BYTE *)this + 121) != 0))
  {
LABEL_4:
    *((_WORD *)this + 60) = a2;
    WebKit::WebExtensionAction::propertiesDidChange(this);
  }
}

id WebKit::WebExtensionAction::platformMenuItems(WebKit::WebExtensionAction *this)
{
  uint64_t v1;
  WebKit::WebExtensionTab *v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17[5];
  __int128 v18;
  char v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v1 = *((_QWORD *)this + 3);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return MEMORY[0x1E0C9AA60];
  v3 = (WebKit::WebExtensionTab *)*((_QWORD *)this + 4);
  if (v3)
  {
    ++*(_DWORD *)v3;
  }
  else
  {
    v16 = *((_QWORD *)this + 5);
    if (v16)
    {
      WebKit::WebExtensionWindow::activeTab(v16, 0, (uint64_t *)&v18);
      v3 = (WebKit::WebExtensionTab *)v18;
    }
    else
    {
      v3 = 0;
    }
  }
  WebKit::WebExtensionMenuItemContextParameters::WebExtensionMenuItemContextParameters((WebKit::WebExtensionMenuItemContextParameters *)&v18);
  LOWORD(v18) = 1;
  if (v3)
  {
    *((_QWORD *)&v18 + 1) = *((_QWORD *)v3 + 2);
    v19 = 1;
    WebKit::WebExtensionTab::url(v3, (uint64_t)v17);
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0;
    WTF::URL::URL((WTF::URL *)v17);
  }
  WTF::URL::operator=((uint64_t)&v20, (WTF::StringImpl *)v17);
  v6 = v17[0];
  v17[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v7 = v8 - 16;
    else
      v7 = 0;
  }
  WebKit::WebExtensionMenuItem::matchingPlatformMenuItems(v7 + 672, &v18, 6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v24;
  v24 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v23;
  v23 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v22;
  v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v9);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v20;
  v20 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v9);
      if (!v3)
        return v10;
      goto LABEL_37;
    }
    *(_DWORD *)v15 -= 2;
  }
  if (v3)
LABEL_37:
    WTF::RefCounted<WebKit::WebExtensionTab>::deref((uint64_t)v3);
  return v10;
}

void sub_1976A77F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,WTF::StringImpl *a35)
{
  uint64_t v35;

  if (a35)
  {
    if (*(_DWORD *)a35 == 2)
      WTF::StringImpl::destroy(a35, a2);
    else
      *(_DWORD *)a35 -= 2;
  }
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
      WTF::StringImpl::destroy(a30, a2);
    else
      *(_DWORD *)a30 -= 2;
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, a2);
    else
      *(_DWORD *)a25 -= 2;
  }
  if (a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, a2);
    else
      *(_DWORD *)a24 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (v35)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v35);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAction::~WebExtensionAction(WebKit::WebExtensionAction *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAction::~WebExtensionAction(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  *(_QWORD *)this = &off_1E34F4870;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
    WTF::RefCounted<WebKit::WebExtensionWindow>::deref(v11);
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
    WTF::RefCounted<WebKit::WebExtensionTab>::deref(v12);
  v13 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

uint64_t API::ObjectImpl<(API::Object::Type)111>::type()
{
  return 111;
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::propertiesDidChange(void)::$_0>(WebKit::WebExtensionAction::propertiesDidChange(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::propertiesDidChange(void)::$_0>(WebKit::WebExtensionAction::propertiesDidChange(void)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  id *v1;
  void *v2;
  id v3;

  v1 = *(id **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtension::wrapper(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "postNotificationName:object:userInfo:", CFSTR("_WKWebExtensionActionPropertiesDidChange"), v2, 0);

}

void sub_1976A79B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::popupDidFinishDocumentLoad(void)::$_0>(WebKit::WebExtensionAction::popupDidFinishDocumentLoad(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::popupDidFinishDocumentLoad(void)::$_0>(WebKit::WebExtensionAction::popupDidFinishDocumentLoad(void)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v1 + 124) & 2) == 0 && (*(_BYTE *)(v1 + 124) & 1) != 0)
  {
    if (*(_QWORD *)(v1 + 56))
    {
      v2 = *(_QWORD *)(v1 + 24);
      if (v2)
      {
        if (*(_QWORD *)(v2 + 8))
        {
          v3 = qword_1ECE710C8;
          if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
          {
            v4 = 134349056;
            v5 = 0x406F400000000000;
            _os_log_debug_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEBUG, "Presenting popup after %{public}.0fms timeout", (uint8_t *)&v4, 0xCu);
          }
          WebKit::WebExtensionAction::readyToPresentPopup((WebKit::WebExtensionAction *)v1);
        }
      }
    }
  }
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
}

void WTF::BlockPtrArc<void ()(void)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  char v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void *v17;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if ((*(_BYTE *)(v1 + 124) & 2) != 0)
      {
        v4 = *(_QWORD *)(v3 + 48);
        if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
        {
          v6 = v5 - 16;
          CFRetain(*(CFTypeRef *)(v5 - 8));
          WebKit::WebExtensionController::delegate((id *)v6);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          if (v7 && (objc_opt_respondsToSelector() & 1) != 0)
          {
            WebKit::WebExtension::wrapper((id *)v6);
            v8 = (void *)objc_claimAutoreleasedReturnValue();
            WebKit::WebExtension::wrapper((id *)v1);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = *(_QWORD *)(v1 + 24);
            if (v10)
            {
              v11 = *(_QWORD *)(v10 + 8);
              if (v11)
                v12 = (id *)(v11 - 16);
              else
                v12 = 0;
            }
            else
            {
              v12 = 0;
            }
            WebKit::WebExtension::wrapper(v12);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            CFRetain(*(CFTypeRef *)(v1 + 8));
            v15 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
            *v15 = MEMORY[0x1E0C809A0];
            v15[1] = 50331650;
            v15[2] = WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1}>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1})::{lambda(void *,NSError *)#1}::__invoke;
            v15[3] = &WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1}>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1})::descriptor;
            v15[4] = v1;
            v15[5] = v1;
            v16 = _Block_copy(v15);

            v17 = _Block_copy(v16);
            objc_msgSend(v7, "webExtensionController:presentPopupForAction:forExtensionContext:completionHandler:", v8, v9, v14, v17);

            goto LABEL_16;
          }
          v13 = 0;
        }
        else
        {
          v6 = 0;
          v7 = 0;
          v13 = 1;
        }
        WebKit::WebExtensionAction::closePopup((WebKit::WebExtensionAction *)v1);

        if ((v13 & 1) != 0)
          return;
LABEL_16:
        CFRelease(*(CFTypeRef *)(v6 + 8));
      }
    }
  }
}

void sub_1976A7C94(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v7;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1}>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 + 8));
}

void WTF::BlockPtrArc<void ()(NSError *)>::fromCallable<WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1}>(WebKit::WebExtensionAction::readyToPresentPopup(void)::$_0::operator() const(void)::{lambda(NSError *)#1})::{lambda(void *,NSError *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
    WebKit::WebExtensionAction::closePopup(*(WebKit::WebExtensionAction **)(a1 + 32));
}

WebKit::WebExtensionMenuItemContextParameters *WebKit::WebExtensionMenuItemContextParameters::WebExtensionMenuItemContextParameters(WebKit::WebExtensionMenuItemContextParameters *this)
{
  *(_WORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 32) = 0;
  WTF::URL::URL((WebKit::WebExtensionMenuItemContextParameters *)((char *)this + 40));
  *((_QWORD *)this + 10) = 0;
  WTF::URL::URL((WebKit::WebExtensionMenuItemContextParameters *)((char *)this + 88));
  WTF::URL::URL((WebKit::WebExtensionMenuItemContextParameters *)((char *)this + 128));
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  return this;
}

void sub_1976A7D94(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v5 = v4;
  v7 = *v5;
  *v5 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)(v3 + 80);
  *(_QWORD *)(v3 + 80) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *v2;
  *v2 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::Vector<WebKit::WebExtensionTabParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  _DWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  if (a3 < 0x1745D18)
  {
    v6 = 176 * a3;
    v7 = WTF::fastMalloc((WTF *)(176 * a3));
    *((_DWORD *)v3 + 2) = v6 / 0xB0;
    *v3 = v7;
    v8 = a2 + 176 * a3;
    v9 = *((_DWORD *)v3 + 3);
    do
    {
      v10 = *v3;
      v11 = v9;
      v12 = *v3 + 176 * v9;
      *(_OWORD *)v12 = *(_OWORD *)a2;
      *(_BYTE *)(v12 + 16) = 0;
      v13 = (_QWORD *)(v12 + 16);
      *(_BYTE *)(v12 + 56) = 0;
      v14 = (_BYTE *)(v12 + 56);
      if (*(_BYTE *)(a2 + 56))
      {
        v15 = *(_DWORD **)(a2 + 16);
        if (v15)
          *v15 += 2;
        *v13 = v15;
        v16 = v10 + 176 * v11;
        v17 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(v16 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(v16 + 24) = v17;
        *v14 = 1;
      }
      v18 = v10 + 176 * v11;
      *(_BYTE *)(v18 + 64) = 0;
      v19 = v18 + 64;
      *(_BYTE *)(v19 + 8) = 0;
      if (*(_BYTE *)(a2 + 72))
      {
        v20 = *(_DWORD **)(a2 + 64);
        if (v20)
          *v20 += 2;
        *(_QWORD *)v19 = v20;
        *(_BYTE *)(v19 + 8) = 1;
      }
      v21 = (_OWORD *)(v10 + 176 * v11);
      v22 = *(_OWORD *)(a2 + 96);
      v21[5] = *(_OWORD *)(a2 + 80);
      v21[6] = v22;
      v23 = *(_OWORD *)(a2 + 112);
      v24 = *(_OWORD *)(a2 + 128);
      v25 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)((char *)v21 + 154) = *(_OWORD *)(a2 + 154);
      v21[8] = v24;
      v21[9] = v25;
      v21[7] = v23;
      v9 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v9;
      a2 += 176;
    }
    while (a2 != v8);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_1976A7F90(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::RetainPtr<NSDictionary>::RetainPtr(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = v3;
  *a1 = v3;
  if (v3)
    CFRetain(v3);

  return a1;
}

void sub_1976A8028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIAction::parseActionDetails(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  BOOL v11;
  NSString *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  NSString *v16;
  long double v17;
  double v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  NSString *v25;
  long double v26;
  double v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v33;
  BOOL v35;
  long double v37;
  _QWORD v38[2];
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  if (_MergedGlobals_105 == 1)
  {
    v8 = (void *)qword_1ECE72FC0;
  }
  else
  {
    v38[0] = CFSTR("tabId");
    v38[1] = CFSTR("windowId");
    v39[0] = objc_opt_class();
    v39[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE72FC0 = (uint64_t)v8;
    _MergedGlobals_105 = 1;
  }
  if (!WebKit::validateDictionary(v7, CFSTR("details"), 0, v8, a4))
    goto LABEL_15;
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("tabId"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("windowId"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10 == 0;

    if (!v11)
    {
      WebKit::toErrorString(0, CFSTR("details"), CFSTR("it cannot specify both 'tabId' and 'windowID'"), v12);
      v13 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_32;
    }
  }
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("tabId"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v14)
  {
    objc_msgSend(v14, "doubleValue");
    v18 = v17;
    if (v17 == -1.0)
    {
      v19 = -256;
      v20 = 1;
      LOBYTE(v21) = -2;
    }
    else
    {
      LOBYTE(v21) = 0;
      v20 = 0;
      v31 = v17 < 0.0 || ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
      if (v31 && (unint64_t)(*(_QWORD *)&v17 - 1) > 0xFFFFFFFFFFFFELL)
      {
        v19 = 0;
      }
      else
      {
        v19 = 0;
        if (v17 < 1.84467441e19)
        {
          if (modf(v17, &v37) == 0.0)
          {
            LOBYTE(v21) = -2;
            if ((unint64_t)v18 - 1 >= 0xFFFFFFFFFFFFFFFELL)
            {
              v19 = -256;
            }
            else
            {
              v21 = (unint64_t)v18;
              v19 = (unint64_t)v18 & 0xFFFFFFFFFFFFFF00;
            }
            v20 = 1;
          }
          else
          {
            v20 = 0;
            LOBYTE(v21) = 0;
            v19 = 0;
          }
        }
      }
    }
    v22 = v19 & 0xFFFFFFFFFFFFFF00 | v21;
    *(_QWORD *)a3 = v22;
    *(_BYTE *)(a3 + 8) = v20;
    if (!WebKit::isValid(v22, *(_QWORD *)(a3 + 8), a4, v16))
    {

LABEL_15:
      v13 = 0;
      goto LABEL_32;
    }
  }

  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("windowId"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23;
  if (!v23)
    goto LABEL_29;
  objc_msgSend(v23, "doubleValue");
  v27 = v26;
  if (v26 == -1.0)
  {
    v28 = -256;
    v29 = 1;
    LOBYTE(v30) = -2;
  }
  else if (v26 == -2.0)
  {
    v28 = -256;
    v29 = 1;
    LOBYTE(v30) = -3;
  }
  else
  {
    LOBYTE(v30) = 0;
    v29 = 0;
    v35 = v26 < 0.0 || ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
    if (v35 && (unint64_t)(*(_QWORD *)&v26 - 1) > 0xFFFFFFFFFFFFELL)
    {
      v28 = 0;
    }
    else
    {
      v28 = 0;
      if (v26 < 1.84467441e19)
      {
        if (modf(v26, &v37) == 0.0)
        {
          LOBYTE(v30) = -2;
          if ((unint64_t)v27 - 1 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v28 = -256;
          }
          else
          {
            v30 = (unint64_t)v27;
            v28 = (unint64_t)v27 & 0xFFFFFFFFFFFFFF00;
          }
          v29 = 1;
        }
        else
        {
          v29 = 0;
          LOBYTE(v30) = 0;
          v28 = 0;
        }
      }
    }
  }
  v33 = v28 & 0xFFFFFFFFFFFFFF00 | v30;
  *(_QWORD *)a2 = v33;
  *(_BYTE *)(a2 + 8) = v29;
  if (!WebKit::isValid(v33, *(_QWORD *)(a2 + 8), a4, v25))
    v13 = 0;
  else
LABEL_29:
    v13 = 1;

LABEL_32:
  return v13;
}

void sub_1976A854C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::getTitle(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  _QWORD v23[2];
  IPC::Encoder *v24;

  v7 = a2;
  LOBYTE(v21) = 0;
  v22 = 0;
  LOBYTE(v19) = 0;
  v20 = 0;
  if ((WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)&v21, (uint64_t)&v19, a4) & 1) != 0)
  {
    {
      v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v8);
    }
    ++*(_DWORD *)(a1 + 48);
    v9 = *a3;
    *a3 = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 1603;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v24 = (IPC::Encoder *)v11;
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v11, &v21);
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v11, &v19);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = &off_1E34F49B0;
    v12[1] = a1;
    v12[2] = v9;
    v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v23[0] = v12;
    v23[1] = v13;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v8 + 2) + 40))((_QWORD *)v8 + 2, &v24, v23, 0);
    v15 = v23[0];
    v23[0] = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v24;
    v24 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v17, v18);
    }
  }

}

void sub_1976A8720(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  void *v16;
  WTF *v18;
  void *v19;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::setTitle(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  WTF::StringImpl *v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  WTF::StringImpl *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  WTF::StringImpl *v30[3];
  WTF::StringImpl *v31;
  _BYTE v32[16];
  _BYTE v33[16];
  _QWORD v34[2];
  IPC::Encoder *v35;
  const __CFString *v36;
  void *v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  if ((byte_1ECE72FB9 & 1) == 0)
  {
    v38[0] = CFSTR("title");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v38, 1);
    qword_1ECE72FC8 = objc_claimAutoreleasedReturnValue();
    byte_1ECE72FB9 = 1;
  }
  if ((byte_1ECE72FBA & 1) == 0)
  {
    v36 = CFSTR("title");
    v27 = (void *)MEMORY[0x1E0C99E40];
    v28 = objc_opt_class();
    objc_msgSend(v27, "orderedSetWithObjects:", v28, objc_opt_class(), 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = v29;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
    qword_1ECE72FD0 = objc_claimAutoreleasedReturnValue();

    byte_1ECE72FBA = 1;
  }
  if (WebKit::validateDictionary(v7, CFSTR("details"), (void *)qword_1ECE72FC8, (void *)qword_1ECE72FD0, a4))
  {
    v33[0] = 0;
    v33[8] = 0;
    v32[0] = 0;
    v32[8] = 0;
    if ((WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)v33, (uint64_t)v32, a4) & 1) != 0)
    {
      v8 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
      if (*MEMORY[0x1E0CBF6F0])
        *(_DWORD *)v8 += 2;
      v31 = v8;
      WebKit::objectForKey<NSString>(v7, (uint64_t)CFSTR("title"), 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v9)
        goto LABEL_15;
      MEMORY[0x19AEABCC8](v30, v9);
      v11 = v30[0];
      v30[0] = 0;
      v12 = v31;
      v31 = v11;
      if (!v12)
        goto LABEL_15;
      v13 = *(_DWORD *)v12 - 2;
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v10);
        v12 = v30[0];
        v30[0] = 0;
        if (!v12)
        {
LABEL_15:

          {
            v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
          }
          else
          {
            v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v15);
          }
          v30[0] = (WTF::StringImpl *)v33;
          v30[1] = (WTF::StringImpl *)v32;
          v30[2] = (WTF::StringImpl *)&v31;
          ++*(_DWORD *)(a1 + 48);
          v16 = *a3;
          *a3 = 0;
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
          v18 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v18 = 1609;
          *(_QWORD *)(v18 + 8) = v17;
          *(_QWORD *)(v18 + 528) = v18 + 16;
          *(_QWORD *)(v18 + 536) = v18 + 16;
          *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v18 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
          v35 = (IPC::Encoder *)v18;
          IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v18, (uint64_t **)v30);
          v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v19 = &off_1E34F49F8;
          v19[1] = a1;
          v19[2] = v16;
          v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
          v34[0] = v19;
          v34[1] = v20;
          (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v15 + 2) + 40))((_QWORD *)v15 + 2, &v35, v34, 0);
          v22 = v34[0];
          v34[0] = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v23 = v35;
          v35 = 0;
          if (v23)
          {
            IPC::Encoder::~Encoder(v23, v21);
            WTF::fastFree(v24, v25);
          }
          v26 = v31;
          v31 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v21);
            else
              *(_DWORD *)v26 -= 2;
          }
          goto LABEL_25;
        }
        v13 = *(_DWORD *)v12 - 2;
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v14);
          goto LABEL_15;
        }
      }
      *(_DWORD *)v12 = v13;
      goto LABEL_15;
    }
  }
LABEL_25:

}

void sub_1976A8B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::getBadgeText(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  _QWORD v23[2];
  IPC::Encoder *v24;

  v7 = a2;
  LOBYTE(v21) = 0;
  v22 = 0;
  LOBYTE(v19) = 0;
  v20 = 0;
  if ((WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)&v21, (uint64_t)&v19, a4) & 1) != 0)
  {
    {
      v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v8);
    }
    ++*(_DWORD *)(a1 + 48);
    v9 = *a3;
    *a3 = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 1600;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v24 = (IPC::Encoder *)v11;
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v11, &v21);
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v11, &v19);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = &off_1E34F4A20;
    v12[1] = a1;
    v12[2] = v9;
    v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v23[0] = v12;
    v23[1] = v13;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v8 + 2) + 40))((_QWORD *)v8 + 2, &v24, v23, 0);
    v15 = v23[0];
    v23[0] = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v24;
    v24 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v17, v18);
    }
  }

}

void sub_1976A8E54(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  void *v16;
  WTF *v18;
  void *v19;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::setBadgeText(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  WTF::StringImpl *v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  WTF::StringImpl *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  WTF::StringImpl *v30[3];
  WTF::StringImpl *v31;
  _BYTE v32[16];
  _BYTE v33[16];
  _QWORD v34[2];
  IPC::Encoder *v35;
  const __CFString *v36;
  void *v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  if ((byte_1ECE72FBB & 1) == 0)
  {
    v38[0] = CFSTR("text");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v38, 1);
    qword_1ECE72FD8 = objc_claimAutoreleasedReturnValue();
    byte_1ECE72FBB = 1;
  }
  if ((byte_1ECE72FBC & 1) == 0)
  {
    v36 = CFSTR("text");
    v27 = (void *)MEMORY[0x1E0C99E40];
    v28 = objc_opt_class();
    objc_msgSend(v27, "orderedSetWithObjects:", v28, objc_opt_class(), 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = v29;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
    qword_1ECE72FE0 = objc_claimAutoreleasedReturnValue();

    byte_1ECE72FBC = 1;
  }
  if (WebKit::validateDictionary(v7, CFSTR("details"), (void *)qword_1ECE72FD8, (void *)qword_1ECE72FE0, a4))
  {
    v33[0] = 0;
    v33[8] = 0;
    v32[0] = 0;
    v32[8] = 0;
    if ((WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)v33, (uint64_t)v32, a4) & 1) != 0)
    {
      v8 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
      if (*MEMORY[0x1E0CBF6F0])
        *(_DWORD *)v8 += 2;
      v31 = v8;
      WebKit::objectForKey<NSString>(v7, (uint64_t)CFSTR("text"), 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v9)
        goto LABEL_15;
      MEMORY[0x19AEABCC8](v30, v9);
      v11 = v30[0];
      v30[0] = 0;
      v12 = v31;
      v31 = v11;
      if (!v12)
        goto LABEL_15;
      v13 = *(_DWORD *)v12 - 2;
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v10);
        v12 = v30[0];
        v30[0] = 0;
        if (!v12)
        {
LABEL_15:

          {
            v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
          }
          else
          {
            v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v15);
          }
          v30[0] = (WTF::StringImpl *)v33;
          v30[1] = (WTF::StringImpl *)v32;
          v30[2] = (WTF::StringImpl *)&v31;
          ++*(_DWORD *)(a1 + 48);
          v16 = *a3;
          *a3 = 0;
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
          v18 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v18 = 1605;
          *(_QWORD *)(v18 + 8) = v17;
          *(_QWORD *)(v18 + 528) = v18 + 16;
          *(_QWORD *)(v18 + 536) = v18 + 16;
          *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v18 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
          v35 = (IPC::Encoder *)v18;
          IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v18, (uint64_t **)v30);
          v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v19 = &off_1E34F4A48;
          v19[1] = a1;
          v19[2] = v16;
          v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
          v34[0] = v19;
          v34[1] = v20;
          (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v15 + 2) + 40))((_QWORD *)v15 + 2, &v35, v34, 0);
          v22 = v34[0];
          v34[0] = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v23 = v35;
          v35 = 0;
          if (v23)
          {
            IPC::Encoder::~Encoder(v23, v21);
            WTF::fastFree(v24, v25);
          }
          v26 = v31;
          v31 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v21);
            else
              *(_DWORD *)v26 -= 2;
          }
          goto LABEL_25;
        }
        v13 = *(_DWORD *)v12 - 2;
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v14);
          goto LABEL_15;
        }
      }
      *(_DWORD *)v12 = v13;
      goto LABEL_15;
    }
  }
LABEL_25:

}

void sub_1976A92BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::getBadgeBackgroundColor(uint64_t a1, void *a2, WebKit::WebExtensionCallbackHandler **a3, _QWORD *a4)
{
  id v6;
  id v7;
  _BYTE v8[16];
  _BYTE v9[16];

  v9[0] = 0;
  v9[8] = 0;
  v8[0] = 0;
  v8[8] = 0;
  v7 = a2;
  if ((WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)v9, (uint64_t)v8, a4) & 1) != 0)
    v6 = WebKit::WebExtensionCallbackHandler::call(*a3, (objc_object *)&unk_1E356F6F0);

}

void sub_1976A9470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::setBadgeBackgroundColor(uint64_t a1, void *a2, JSObjectRef **a3, _QWORD *a4)
{
  id v6;
  id v7;
  _BYTE v8[16];
  _BYTE v9[16];

  v9[0] = 0;
  v9[8] = 0;
  v8[0] = 0;
  v8[8] = 0;
  v7 = a2;
  if ((WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)v9, (uint64_t)v8, a4) & 1) != 0)
    v6 = WebKit::WebExtensionCallbackHandler::call(*a3);

}

void sub_1976A94EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIAction::enable(uint64_t a1, uint64_t *a2, _QWORD *a3, NSString *a4, long double a5)
{
  uint64_t v9;
  uint64_t result;
  BOOL v13;
  WebKit::WebProcess *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  long double v27;
  WTF *v28;
  void *v29;
  unint64_t v30;
  size_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  long double __y[2];
  IPC::Encoder *v36;

  if (a5 == -1.0)
  {
    v9 = -2;
    goto LABEL_3;
  }
  v13 = (a5 >= 0.0 && ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v13 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v9 = -2;
    else
      v9 = (unint64_t)a5;
LABEL_3:
    v33 = v9;
    v34 = 1;
    result = WebKit::isValid(v9, 1, a3, a4);
    if ((result & 1) == 0)
      return result;
    goto LABEL_18;
  }
  v33 = 0;
  v34 = 0;
LABEL_18:
  {
    v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v14);
  }
  ++*(_DWORD *)(a1 + 48);
  v15 = *a2;
  *a2 = 0;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 1606;
  *(_QWORD *)(v17 + 8) = v16;
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v36 = (IPC::Encoder *)v17;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v17, &v33);
  v18 = *(_QWORD *)(v17 + 544);
  v19 = v18 + 1;
  v20 = *(_QWORD *)(v17 + 552);
  if (v20 < v18 + 1)
  {
    v30 = (2 * v20 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v31 = v30;
      v30 *= 2;
    }
    while (v31 < v19);
    result = (uint64_t)mmap(0, v31, 3, 4098, -1, 0);
    if (result == -1)
    {
      __break(0xC471u);
      return result;
    }
    v21 = result;
    memcpy((void *)result, *(const void **)(v17 + 528), *(_QWORD *)(v17 + 544));
    v32 = *(void **)(v17 + 528);
    if (v32 != (void *)(v17 + 16))
      munmap(v32, *(_QWORD *)(v17 + 552));
    *(_QWORD *)(v17 + 528) = v21;
    *(_QWORD *)(v17 + 552) = v31;
    v22 = *(_QWORD *)(v17 + 544);
  }
  else
  {
    v21 = *(_QWORD *)(v17 + 528);
    v22 = *(_QWORD *)(v17 + 544);
  }
  bzero((void *)(v21 + v22), v18 - v22);
  *(_QWORD *)(v17 + 544) = v19;
  v23 = (_BYTE *)(*(_QWORD *)(v17 + 528) + v18);
  *(_QWORD *)(v17 + 536) = v23 + 1;
  *v23 = 1;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v24 = &off_1E34F4A70;
  v24[1] = a1;
  v24[2] = v15;
  v25 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)&__y[0] = v24;
  *(_QWORD *)&__y[1] = v25;
  (*(void (**)(_QWORD *, IPC::Encoder **, long double *, _QWORD))(*((_QWORD *)v14 + 2) + 40))((_QWORD *)v14 + 2, &v36, __y, 0);
  v27 = __y[0];
  __y[0] = 0.0;
  if (v27 != 0.0)
    (*(void (**)(long double))(**(_QWORD **)&v27 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v27));
  result = (uint64_t)v36;
  v36 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v26);
    return WTF::fastFree(v28, v29);
  }
  return result;
}

void sub_1976A97C4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1976A9898()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x1976A9860);
  JUMPOUT(0x1976A984CLL);
}

uint64_t WebKit::WebExtensionAPIAction::disable(uint64_t a1, uint64_t *a2, _QWORD *a3, NSString *a4, long double a5)
{
  uint64_t v9;
  uint64_t result;
  BOOL v13;
  WebKit::WebProcess *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  long double v27;
  WTF *v28;
  void *v29;
  unint64_t v30;
  size_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  long double __y[2];
  IPC::Encoder *v36;

  if (a5 == -1.0)
  {
    v9 = -2;
    goto LABEL_3;
  }
  v13 = (a5 >= 0.0 && ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&a5 - 1) <= 0xFFFFFFFFFFFFELL)
     && a5 < 1.84467441e19;
  if (v13 && modf(a5, __y) == 0.0)
  {
    if ((unint64_t)a5 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v9 = -2;
    else
      v9 = (unint64_t)a5;
LABEL_3:
    v33 = v9;
    v34 = 1;
    result = WebKit::isValid(v9, 1, a3, a4);
    if ((result & 1) == 0)
      return result;
    goto LABEL_18;
  }
  v33 = 0;
  v34 = 0;
LABEL_18:
  {
    v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v14);
  }
  ++*(_DWORD *)(a1 + 48);
  v15 = *a2;
  *a2 = 0;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v17 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v17 = 1606;
  *(_QWORD *)(v17 + 8) = v16;
  *(_QWORD *)(v17 + 528) = v17 + 16;
  *(_QWORD *)(v17 + 536) = v17 + 16;
  *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v17 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
  v36 = (IPC::Encoder *)v17;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v17, &v33);
  v18 = *(_QWORD *)(v17 + 544);
  v19 = v18 + 1;
  v20 = *(_QWORD *)(v17 + 552);
  if (v20 < v18 + 1)
  {
    v30 = (2 * v20 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v31 = v30;
      v30 *= 2;
    }
    while (v31 < v19);
    result = (uint64_t)mmap(0, v31, 3, 4098, -1, 0);
    if (result == -1)
    {
      __break(0xC471u);
      return result;
    }
    v21 = result;
    memcpy((void *)result, *(const void **)(v17 + 528), *(_QWORD *)(v17 + 544));
    v32 = *(void **)(v17 + 528);
    if (v32 != (void *)(v17 + 16))
      munmap(v32, *(_QWORD *)(v17 + 552));
    *(_QWORD *)(v17 + 528) = v21;
    *(_QWORD *)(v17 + 552) = v31;
    v22 = *(_QWORD *)(v17 + 544);
  }
  else
  {
    v21 = *(_QWORD *)(v17 + 528);
    v22 = *(_QWORD *)(v17 + 544);
  }
  bzero((void *)(v21 + v22), v18 - v22);
  *(_QWORD *)(v17 + 544) = v19;
  v23 = (_BYTE *)(*(_QWORD *)(v17 + 528) + v18);
  *(_QWORD *)(v17 + 536) = v23 + 1;
  *v23 = 0;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v24 = &off_1E34F4A98;
  v24[1] = a1;
  v24[2] = v15;
  v25 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)&__y[0] = v24;
  *(_QWORD *)&__y[1] = v25;
  (*(void (**)(_QWORD *, IPC::Encoder **, long double *, _QWORD))(*((_QWORD *)v14 + 2) + 40))((_QWORD *)v14 + 2, &v36, __y, 0);
  v27 = __y[0];
  __y[0] = 0.0;
  if (v27 != 0.0)
    (*(void (**)(long double))(**(_QWORD **)&v27 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v27));
  result = (uint64_t)v36;
  v36 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v26);
    return WTF::fastFree(v28, v29);
  }
  return result;
}

void sub_1976A9B64(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1976A9C38()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x1976A9C00);
  JUMPOUT(0x1976A9BECLL);
}

void WebKit::WebExtensionAPIAction::isEnabled(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  _QWORD v23[2];
  IPC::Encoder *v24;

  v7 = a2;
  LOBYTE(v21) = 0;
  v22 = 0;
  LOBYTE(v19) = 0;
  v20 = 0;
  if ((WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)&v21, (uint64_t)&v19, a4) & 1) != 0)
  {
    {
      v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v8);
    }
    ++*(_DWORD *)(a1 + 48);
    v9 = *a3;
    *a3 = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 1601;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v24 = (IPC::Encoder *)v11;
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v11, &v21);
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v11, &v19);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = &off_1E34F4AC0;
    v12[1] = a1;
    v12[2] = v9;
    v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v23[0] = v12;
    v23[1] = v13;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v8 + 2) + 40))((_QWORD *)v8 + 2, &v24, v23, 0);
    v15 = v23[0];
    v23[0] = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v24;
    v24 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v17, v18);
    }
  }

}

void sub_1976A9DCC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  void *v16;
  WTF *v18;
  void *v19;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAPIAction::isValidDimensionKey(WebKit::WebExtensionAPIAction *this, NSString *a2)
{
  long double v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  long double __y;

  -[WebKit::WebExtensionAPIAction doubleValue](this, "doubleValue");
  if (v2 != 0.0
    && (v2 >= 0.0 ? (v3 = ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE) : (v3 = 1),
        v3 ? (v4 = (unint64_t)(*(_QWORD *)&v2 - 1) > 0xFFFFFFFFFFFFELL) : (v4 = 0),
        !v4 ? (v5 = v2 < 1.84467441e19) : (v5 = 0),
        v5))
  {
    return modf(v2, &__y) == 0.0;
  }
  else
  {
    return 0;
  }
}

void WebKit::WebExtensionAPIAction::setIcon(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5)
{
  id v6;
  void *v7;
  void *v8;
  BOOL v9;
  NSString *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  NSString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  WebKit::WebExtensionAPIAction *v23;
  NSString *v24;
  void *v25;
  void *v26;
  void *v27;
  BOOL v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  NSString *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t j;
  WebKit::WebExtensionAPIAction *v42;
  NSString *v43;
  void *v44;
  void *v45;
  void *v46;
  BOOL v47;
  id v48;
  void *v49;
  void *v50;
  WebKit::WebProcess *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  IPC::Encoder *v59;
  WTF *v60;
  void *v61;
  WTF::StringImpl *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  WTF::StringImpl *v78;
  uint64_t *v79[3];
  _QWORD v80[5];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[16];
  _BYTE v90[16];
  _QWORD v91[2];
  IPC::Encoder *v92;
  _BYTE v93[128];
  const __CFString *v94;
  uint64_t v95;
  _BYTE v96[128];
  void *v97;
  void *v98;
  _QWORD v99[2];
  _QWORD v100[5];

  v100[2] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v90[0] = 0;
  v90[8] = 0;
  v89[0] = 0;
  v89[8] = 0;
  if ((WebKit::WebExtensionAPIAction::parseActionDetails(v6, (uint64_t)v90, (uint64_t)v89, a5) & 1) != 0)
  {
    if ((byte_1ECE72FBD & 1) == 0)
    {
      v99[0] = CFSTR("path");
      v63 = (void *)MEMORY[0x1E0C99E40];
      v64 = objc_opt_class();
      v65 = objc_opt_class();
      objc_msgSend(v63, "orderedSetWithObjects:", v64, v65, objc_opt_class(), 0);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      v99[1] = CFSTR("imageData");
      v100[0] = v66;
      v67 = (void *)MEMORY[0x1E0C99E40];
      v68 = objc_opt_class();
      v69 = objc_opt_class();
      objc_msgSend(v67, "orderedSetWithObjects:", v68, v69, objc_opt_class(), 0);
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      v100[1] = v70;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v100, v99, 2);
      qword_1ECE72FE8 = objc_claimAutoreleasedReturnValue();

      byte_1ECE72FBD = 1;
    }
    if (WebKit::validateDictionary(v6, CFSTR("details"), 0, (void *)qword_1ECE72FE8, a5))
    {
      objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("path"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v7
        || (objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("imageData")),
            v8 = (void *)objc_claimAutoreleasedReturnValue(),
            v9 = v8 == 0,
            v8,
            v7,
            v9))
      {
        objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("imageData"));
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        WTF::dynamic_objc_cast<JSValue>(v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (v12)
        {
          v79[0] = 0;
          WebKit::dataURLFromImageData(v12, (size_t *)v79, CFSTR("imageData"), a5);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v13)
          {

            goto LABEL_54;
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v79[0]);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "stringValue");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v97 = v15;
          v98 = v13;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v98, &v97, 1);
          v72 = (void *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v72 = 0;
        }

        WebKit::objectForKey<NSDictionary>(v6, (uint64_t)CFSTR("imageData"), 1, 0);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v16;
        if (v16)
        {
          v71 = v16;
          objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v16, "count"));
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v18 = v17;
          v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v85, v96, 16);
          if (v20)
          {
            v21 = *(_QWORD *)v86;
            while (2)
            {
              for (i = 0; i != v20; ++i)
              {
                if (*(_QWORD *)v86 != v21)
                  objc_enumerationMutation(v18);
                v23 = *(WebKit::WebExtensionAPIAction **)(*((_QWORD *)&v85 + 1) + 8 * i);
                if (!WebKit::WebExtensionAPIAction::isValidDimensionKey(v23, v19))
                {
                  WebKit::toErrorString(0, CFSTR("imageData"), CFSTR("'%@' in not a valid dimension"), v24, v23);
                  *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_51:

                  goto LABEL_54;
                }
                objc_msgSend(v18, "objectForKeyedSubscript:", v23);
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@[%@]"), CFSTR("imageData"), v23);
                v26 = (void *)objc_claimAutoreleasedReturnValue();
                v27 = (void *)objc_opt_class();
                v28 = WebKit::validateObject(v25, v26, v27, a5);

                if (!v28)
                  goto LABEL_51;
                objc_msgSend(v18, "objectForKeyedSubscript:", v23);
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                WebKit::dataURLFromImageData(v29, 0, v23, a5);
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                if (!v30)
                {

                  goto LABEL_51;
                }
                objc_msgSend(v73, "setObject:forKeyedSubscript:", v30, v23);

              }
              v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v85, v96, 16);
              if (v20)
                continue;
              break;
            }
          }

          v31 = objc_msgSend(v73, "copy");
          v72 = (void *)v31;
          v17 = v71;
        }

        WebKit::objectForKey<NSString>(v6, (uint64_t)CFSTR("path"), 1);
        v32 = objc_claimAutoreleasedReturnValue();
        v33 = (void *)v32;
        if (v32)
        {
          v94 = CFSTR("16");
          v95 = v32;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v95, &v94, 1);
          v34 = objc_claimAutoreleasedReturnValue();

          v72 = (void *)v34;
        }

        WebKit::objectForKey<NSDictionary>(v6, (uint64_t)CFSTR("path"), 1, 0);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = v35;
        if (v35)
        {
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v37 = v35;
          v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v81, v93, 16);
          v74 = v36;
          if (v39)
          {
            v40 = *(_QWORD *)v82;
            while (2)
            {
              for (j = 0; j != v39; ++j)
              {
                if (*(_QWORD *)v82 != v40)
                  objc_enumerationMutation(v37);
                v42 = *(WebKit::WebExtensionAPIAction **)(*((_QWORD *)&v81 + 1) + 8 * j);
                if (!WebKit::WebExtensionAPIAction::isValidDimensionKey(v42, v38))
                {
                  WebKit::toErrorString(0, CFSTR("path"), CFSTR("'%@' in not a valid dimension"), v43, v42);
                  *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_53:

                  goto LABEL_54;
                }
                objc_msgSend(v37, "objectForKeyedSubscript:", v42);
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@[%@]"), CFSTR("path"), v42);
                v45 = (void *)objc_claimAutoreleasedReturnValue();
                v46 = (void *)objc_opt_class();
                v47 = WebKit::validateObject(v44, v45, v46, a5);

                if (!v47)
                  goto LABEL_53;
              }
              v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v81, v93, 16);
              if (v39)
                continue;
              break;
            }
          }

          v48 = v37;
          v72 = v48;
          v36 = v74;
        }

        v80[0] = MEMORY[0x1E0C809B0];
        v80[1] = 3221225472;
        v80[2] = ___ZN6WebKit21WebExtensionAPIAction7setIconERNS_8WebFrameEP12NSDictionaryON3WTF3RefINS_27WebExtensionCallbackHandlerENS5_12RawPtrTraitsIS7_EENS5_21DefaultRefDerefTraitsIS7_EEEEPU15__autoreleasingP8NSString_block_invoke;
        v80[3] = &__block_descriptor_40_e31___NSString_24__0_8__NSString_16l;
        v80[4] = a2;
        WebKit::mapObjects<NSDictionary>(v72, v80);
        v49 = (void *)objc_claimAutoreleasedReturnValue();

        WebKit::encodeJSONString(v49, 0, 0);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        {
          v51 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v51 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v51);
        }
        MEMORY[0x19AEABCC8](&v78, v50);
        v79[0] = (uint64_t *)v90;
        v79[1] = (uint64_t *)v89;
        v79[2] = (uint64_t *)&v78;
        ++*(_DWORD *)(a1 + 48);
        v52 = *a4;
        *a4 = 0;
        v53 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
        v54 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v54 = 1607;
        *(_QWORD *)(v54 + 8) = v53;
        *(_QWORD *)(v54 + 528) = v54 + 16;
        *(_QWORD *)(v54 + 536) = v54 + 16;
        *(_OWORD *)(v54 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v54 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v54);
        v92 = (IPC::Encoder *)v54;
        IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v54, v79);
        v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v55 = &off_1E34F4B08;
        v55[1] = a1;
        v55[2] = v52;
        v56 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v91[0] = v55;
        v91[1] = v56;
        (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v51 + 2) + 40))((_QWORD *)v51 + 2, &v92, v91, 0);
        v58 = v91[0];
        v91[0] = 0;
        if (v58)
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
        v59 = v92;
        v92 = 0;
        if (v59)
        {
          IPC::Encoder::~Encoder(v59, v57);
          WTF::fastFree(v60, v61);
        }
        v62 = v78;
        v78 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
            WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v57);
          else
            *(_DWORD *)v62 -= 2;
        }

      }
      else
      {
        WebKit::toErrorString(0, CFSTR("details"), CFSTR("it cannot specify both 'path' and 'imageData'"), v10);
        *a5 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
  }
LABEL_54:

}

void sub_1976AA7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,IPC::Encoder *a49)
{
  void *v49;
  void *v50;
  void *v51;

  _Unwind_Resume(a1);
}

id WebKit::dataURLFromImageData(void *a1, size_t *a2, void *a3, _QWORD *a4)
{
  id v7;
  NSString *v8;
  void *v9;
  void *v10;
  NSString *v11;
  void *v12;
  NSString *v13;
  void *v14;
  const OpaqueJSContext *v15;
  OpaqueJSValue *v16;
  id v17;
  void *TypedArrayBytesPtr;
  void *v19;
  void *v20;
  size_t v21;
  void *v22;
  void *v23;
  size_t v24;
  void *v25;
  void *v26;
  int v27;
  CFStringRef *v28;
  CGColorSpace *v29;
  CGDataProvider *v30;
  CGImage *v31;
  NSString *v32;
  UIImage *v33;
  void *v34;
  NSString *v35;
  void *v36;
  NSString *v37;
  void *v38;
  void *v39;
  void *v41;
  const __CFData *data;

  v7 = a1;
  v8 = a3;
  if (a2)
    *a2 = 0;
  objc_msgSend(v7, "context");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("ImageData"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v7, "isInstanceOf:", v10) & 1) != 0)
  {
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("data"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v12, "isObject") & 1) != 0
      && (objc_msgSend(v7, "context"),
          v14 = (void *)objc_claimAutoreleasedReturnValue(),
          v15 = (const OpaqueJSContext *)objc_msgSend(v14, "JSGlobalContextRef"),
          v14,
          v16 = JSValueToObject(v15, (JSValueRef)objc_msgSend(v12, "JSValueRef"), 0),
          JSValueGetTypedArrayType(v15, v16, 0) == kJSTypedArrayTypeUint8ClampedArray))
    {
      v17 = objc_alloc(MEMORY[0x1E0C99D50]);
      TypedArrayBytesPtr = JSObjectGetTypedArrayBytesPtr(v15, v16, 0);
      data = (const __CFData *)objc_msgSend(v17, "initWithBytes:length:", TypedArrayBytesPtr, JSObjectGetTypedArrayByteLength(v15, v16, 0));
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("width"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "toNumber");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "unsignedLongValue");

      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("height"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "toNumber");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "unsignedLongValue");

      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("colorSpace"));
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "toString");
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      v41 = v26;
      v27 = objc_msgSend(v26, "isEqualToString:", CFSTR("display-p3"));
      v28 = (CFStringRef *)MEMORY[0x1E0C9D908];
      if (!v27)
        v28 = (CFStringRef *)MEMORY[0x1E0C9DA10];
      v29 = CGColorSpaceCreateWithName(*v28);
      v30 = CGDataProviderCreateWithCFData(data);
      v31 = CGImageCreate(v21, v24, 8uLL, 0x20uLL, 4 * v21, v29, 1u, v30, 0, 1, kCGRenderingIntentDefault);
      CGDataProviderRelease(v30);
      CGColorSpaceRelease(v29);
      if (v31)
      {
        objc_msgSend(MEMORY[0x1E0CEA638], "imageWithCGImage:", v31);
        v33 = (UIImage *)objc_claimAutoreleasedReturnValue();
        CGImageRelease(v31);
        UIImagePNGRepresentation(v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v34, "length"))
        {
          objc_msgSend(v34, "base64EncodedStringWithOptions:", 0);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v36, "length"))
          {
            if (a2)
              *a2 = v21;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("data:image/png;base64,%@"), v36);
            v38 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            WebKit::toErrorString(0, v8, CFSTR("it is not an ImageData object"), v37);
            v38 = 0;
            *a4 = (id)objc_claimAutoreleasedReturnValue();
          }
          v39 = v41;

        }
        else
        {
          WebKit::toErrorString(0, v8, CFSTR("it is not an ImageData object"), v35);
          v38 = 0;
          *a4 = (id)objc_claimAutoreleasedReturnValue();
          v39 = v41;
        }

      }
      else
      {
        WebKit::toErrorString(0, v8, CFSTR("it is not an ImageData object"), v32);
        v38 = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        v39 = v41;
      }

    }
    else
    {
      WebKit::toErrorString(0, v8, CFSTR("it is not an ImageData object"), v13);
      v38 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    WebKit::toErrorString(0, v8, CFSTR("it is not an ImageData object"), v11);
    v38 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v38;
}

void sub_1976AAE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1976AB0AC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  void *v15;
  uint64_t v16;
  WTF::StringImpl *v18;

  v18 = *(WTF::StringImpl **)(v16 - 24);
  *(_QWORD *)(v16 - 24) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::getPopup(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  _QWORD v23[2];
  IPC::Encoder *v24;

  v7 = a2;
  LOBYTE(v21) = 0;
  v22 = 0;
  LOBYTE(v19) = 0;
  v20 = 0;
  if ((WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)&v21, (uint64_t)&v19, a4) & 1) != 0)
  {
    {
      v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v8);
    }
    ++*(_DWORD *)(a1 + 48);
    v9 = *a3;
    *a3 = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 1602;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v24 = (IPC::Encoder *)v11;
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v11, &v21);
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v11, &v19);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = &off_1E34F4B30;
    v12[1] = a1;
    v12[2] = v9;
    v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v23[0] = v12;
    v23[1] = v13;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v8 + 2) + 40))((_QWORD *)v8 + 2, &v24, v23, 0);
    v15 = v23[0];
    v23[0] = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v24;
    v24 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v14);
      WTF::fastFree(v17, v18);
    }
  }

}

void sub_1976AB2F4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  void *v16;
  WTF *v18;
  void *v19;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::setPopup(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  WTF::StringImpl *v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WebKit::WebProcess *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  WTF::StringImpl *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  WTF::StringImpl *v30[3];
  WTF::StringImpl *v31;
  _BYTE v32[16];
  _BYTE v33[16];
  _QWORD v34[2];
  IPC::Encoder *v35;
  const __CFString *v36;
  void *v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  if ((byte_1ECE72FBE & 1) == 0)
  {
    v38[0] = CFSTR("popup");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v38, 1);
    qword_1ECE72FF0 = objc_claimAutoreleasedReturnValue();
    byte_1ECE72FBE = 1;
  }
  if ((byte_1ECE72FBF & 1) == 0)
  {
    v36 = CFSTR("popup");
    v27 = (void *)MEMORY[0x1E0C99E40];
    v28 = objc_opt_class();
    objc_msgSend(v27, "orderedSetWithObjects:", v28, objc_opt_class(), 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = v29;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
    qword_1ECE72FF8 = objc_claimAutoreleasedReturnValue();

    byte_1ECE72FBF = 1;
  }
  if (WebKit::validateDictionary(v7, CFSTR("details"), (void *)qword_1ECE72FF0, (void *)qword_1ECE72FF8, a4))
  {
    v33[0] = 0;
    v33[8] = 0;
    v32[0] = 0;
    v32[8] = 0;
    if ((WebKit::WebExtensionAPIAction::parseActionDetails(v7, (uint64_t)v33, (uint64_t)v32, a4) & 1) != 0)
    {
      v8 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
      if (*MEMORY[0x1E0CBF6F0])
        *(_DWORD *)v8 += 2;
      v31 = v8;
      WebKit::objectForKey<NSString>(v7, (uint64_t)CFSTR("popup"), 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v9)
        goto LABEL_15;
      MEMORY[0x19AEABCC8](v30, v9);
      v11 = v30[0];
      v30[0] = 0;
      v12 = v31;
      v31 = v11;
      if (!v12)
        goto LABEL_15;
      v13 = *(_DWORD *)v12 - 2;
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v10);
        v12 = v30[0];
        v30[0] = 0;
        if (!v12)
        {
LABEL_15:

          {
            v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
          }
          else
          {
            v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v15);
          }
          v30[0] = (WTF::StringImpl *)v33;
          v30[1] = (WTF::StringImpl *)v32;
          v30[2] = (WTF::StringImpl *)&v31;
          ++*(_DWORD *)(a1 + 48);
          v16 = *a3;
          *a3 = 0;
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
          v18 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v18 = 1608;
          *(_QWORD *)(v18 + 8) = v17;
          *(_QWORD *)(v18 + 528) = v18 + 16;
          *(_QWORD *)(v18 + 536) = v18 + 16;
          *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v18 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
          v35 = (IPC::Encoder *)v18;
          IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,0ul,1ul,2ul>((IPC::Encoder *)v18, (uint64_t **)v30);
          v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v19 = &off_1E34F4B58;
          v19[1] = a1;
          v19[2] = v16;
          v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
          v34[0] = v19;
          v34[1] = v20;
          (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v15 + 2) + 40))((_QWORD *)v15 + 2, &v35, v34, 0);
          v22 = v34[0];
          v34[0] = 0;
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v23 = v35;
          v35 = 0;
          if (v23)
          {
            IPC::Encoder::~Encoder(v23, v21);
            WTF::fastFree(v24, v25);
          }
          v26 = v31;
          v31 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v21);
            else
              *(_DWORD *)v26 -= 2;
          }
          goto LABEL_25;
        }
        v13 = *(_DWORD *)v12 - 2;
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v14);
          goto LABEL_15;
        }
      }
      *(_DWORD *)v12 = v13;
      goto LABEL_15;
    }
  }
LABEL_25:

}

void sub_1976AB75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::openPopup(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5)
{
  id v9;
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  _QWORD v26[2];
  IPC::Encoder *v27;

  v9 = a3;
  LOBYTE(v24) = 0;
  v25 = 0;
  LOBYTE(v22) = 0;
  v23 = 0;
  if ((WebKit::WebExtensionAPIAction::parseActionDetails(v9, (uint64_t)&v24, (uint64_t)&v22, a5) & 1) != 0)
  {
    {
      v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v10);
    }
    v21 = *(_QWORD *)(a2 + 2120);
    ++*(_DWORD *)(a1 + 48);
    v11 = *a4;
    *a4 = 0;
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 1604;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v27 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v13, &v21);
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v13, &v24);
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v13, &v22);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = &off_1E34F4B80;
    v14[1] = a1;
    v14[2] = v11;
    v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v26[0] = v14;
    v26[1] = v15;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v10 + 2) + 40))((_QWORD *)v10 + 2, &v27, v26, 0);
    v17 = v26[0];
    v26[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      IPC::Encoder::~Encoder(v18, v16);
      WTF::fastFree(v19, v20);
    }
  }

}

void sub_1976ABA44(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  void *v16;
  WTF *v18;
  void *v19;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v18, v19);
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIAction::onClicked(WebKit::WebExtensionAPIAction *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    v6 = 1;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIAction &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 7);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIAction &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976ABC18(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchActionClickedEvent(uint64_t a1, uint64_t a2)
{
  void *v3;
  WebCore *v4;
  uint64_t v5;
  WebCore *v6;
  WebCore *v7;
  id v8;

  if (*(_BYTE *)(a2 + 176))
  {
    WebKit::toWebAPI(a2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }
  v8 = v3;
  v4 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E34F4C00;
  *((_QWORD *)v4 + 1) = &v8;
  v7 = v4;
  v5 = WebCore::mainThreadNormalWorld(v4);
  WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects(a1, (uint64_t)&v7, v5);
  v6 = v7;
  v7 = 0;
  if (v6)
    (*(void (**)(WebCore *))(*(_QWORD *)v6 + 8))(v6);

}

void sub_1976ABCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetTitle,WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F49B0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetTitle,WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F49B0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetTitle,WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  char v6;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v3);
    if (v5)
    {
      WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v3, v4);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F49C8[v4])(&v6, &v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetTitle,WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetTitle,WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976ABE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  uint64_t v12;

  if (a12)
  {
    if (a10 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34F49C8[a10])(v12 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetTitle,WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = 0;
  v2 = 0;
  WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1E34F49C8[v2])(&v3, &v1);
}

void sub_1976ABEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F49C8[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1976ABF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 16))
  {
    v15 = *(unsigned int *)(v13 + 8);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))off_1E34F49C8[v15])(&a13, v13);
    *(_DWORD *)(v13 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  char v6;
  char v7;

  result = (uint64_t)IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>(a1, (uint64_t)&v4);
  if (v6)
  {
    result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, (uint64_t)&v4);
    a2[16] = 1;
    if (v6)
    {
      if (v5 != -1)
        return ((uint64_t (*)(char *, uint64_t *))off_1E34F49C8[v5])(&v7, &v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

void sub_1976AC03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  uint64_t v12;

  if (a12)
  {
    if (a10 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34F49C8[a10])(v12 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 16))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_1976AC0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 16))
  {
    v15 = *(unsigned int *)(v13 + 8);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))off_1E34F49C8[v15])(&a13, v13);
    *(_DWORD *)(v13 + 8) = -1;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  _QWORD *result;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v15 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        a1 = v15;
        v11 = *v15;
        v10 = v15[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_13;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v10 = v3;
    v11 = 0;
LABEL_13:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      v14 = a1;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        a1 = v14;
        v4 = *v14;
        v3 = v14[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_14;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = IPC::Decoder::decode<WTF::String>(a1, &v16);
      v9 = v17;
      if (v17)
      {
        *(_QWORD *)a2 = v16;
        *(_DWORD *)(a2 + 8) = 0;
        v9 = 1;
LABEL_10:
        *(_BYTE *)(a2 + 16) = v9;
        return result;
      }
    }
    else
    {
      result = IPC::Decoder::decode<WTF::String>(a1, &v16);
      v9 = v17;
      if (v17)
      {
        *(_QWORD *)a2 = v16;
        v9 = 1;
        *(_DWORD *)(a2 + 8) = 1;
        goto LABEL_10;
      }
    }
    *(_BYTE *)a2 = 0;
    goto LABEL_10;
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  result = (_QWORD *)a1[3];
  if (result)
  {
    if (v3)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v4);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

void sub_1976AC2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 8);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_1E34F49C8[v15])(&a13, v13);
  *(_DWORD *)(v13 + 8) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WTF::String>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34F49C8[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34F49D8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringES9_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_S9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringES9_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJS9_S9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIAction::getTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  __CFString *v4;
  objc_object *v5;
  id v6;
  _Unwind_Exception *v7;
  id v8;
  id v9;

  if (a3)
  {
    if (a3 != 1)
    {
      v7 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v7);
    }
    if (a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v9 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    if (a2)
      v5 = (objc_object *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = (objc_object *)&stru_1E351F1B8;
    v9 = v5;
    v6 = WebKit::WebExtensionCallbackHandler::call(a1, v5);
  }

}

void IPC::ArgumentCoder<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionWindowIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, *a2);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[2]);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetTitle,WebKit::WebExtensionAPIAction::setTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F49F8;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetTitle,WebKit::WebExtensionAPIAction::setTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F49F8;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetTitle,WebKit::WebExtensionAPIAction::setTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setTitle(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976AC644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t *IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_1976AC6E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  char v4;
  uint64_t v5;
  char v6;
  char v7;

  result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<void,WTF::String>>(a1, &v5);
  v4 = v7;
  if (v7)
  {
    *a2 = 0;
    a2[8] = 0;
    v4 = 1;
    if (v6)
    {
      *(_QWORD *)a2 = v5;
      a2[8] = 1;
    }
  }
  else
  {
    *a2 = 0;
  }
  a2[16] = v4;
  return result;
}

uint64_t *IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<void,WTF::String>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

void sub_1976AC7B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v9 = 0;
    v10 = 0;
    *result = 0;
    result[1] = 0;
    v11 = result[3];
    if (v11)
    {
      v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        result = v14;
        v10 = *v14;
        v9 = v14[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v9 = v3;
    v10 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
        result = v13;
        v4 = *v13;
        v3 = v13[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      *a2 = 0;
      a2[8] = 0;
      v8 = 1;
    }
    else
    {
      result = IPC::Decoder::decode<WTF::String>(result, &v15);
      v8 = v16;
      if (v16)
      {
        *(_QWORD *)a2 = v15;
        v8 = 1;
        a2[8] = 1;
      }
      else
      {
        *a2 = 0;
      }
    }
    a2[16] = v8;
    return result;
  }
LABEL_13:
  *result = 0;
  result[1] = 0;
  result = (uint64_t *)result[3];
  if (result && v3)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  *a2 = 0;
  a2[16] = 0;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetBadgeText,WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4A20;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetBadgeText,WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4A20;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetBadgeText,WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  char v6;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v3);
    if (v5)
    {
      WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v3, v4);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F49C8[v4])(&v6, &v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetBadgeText,WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetBadgeText,WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976ACAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  uint64_t v12;

  if (a12)
  {
    if (a10 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34F49C8[a10])(v12 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetBadgeText,WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = 0;
  v2 = 0;
  WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1E34F49C8[v2])(&v3, &v1);
}

void sub_1976ACB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F49C8[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIAction::getBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  __CFString *v4;
  objc_object *v5;
  id v6;
  _Unwind_Exception *v7;
  id v8;
  id v9;

  if (a3)
  {
    if (a3 != 1)
    {
      v7 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v7);
    }
    if (a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v9 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    if (a2)
      v5 = (objc_object *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = (objc_object *)&stru_1E351F1B8;
    v9 = v5;
    v6 = WebKit::WebExtensionCallbackHandler::call(a1, v5);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetBadgeText,WebKit::WebExtensionAPIAction::setBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4A48;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetBadgeText,WebKit::WebExtensionAPIAction::setBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4A48;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetBadgeText,WebKit::WebExtensionAPIAction::setBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setBadgeText(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976ACDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetEnabled,WebKit::WebExtensionAPIAction::enable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::enable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4A70;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetEnabled,WebKit::WebExtensionAPIAction::enable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::enable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4A70;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetEnabled,WebKit::WebExtensionAPIAction::enable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::enable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976ACFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetEnabled,WebKit::WebExtensionAPIAction::disable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::disable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4A98;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetEnabled,WebKit::WebExtensionAPIAction::disable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::disable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4A98;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetEnabled,WebKit::WebExtensionAPIAction::disable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::disable(double,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976AD1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetEnabled,WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4AC0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetEnabled,WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4AC0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetEnabled,WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22[8];
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  char v29;

  if (!a2 || (v4 = *a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetEnabled,WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v9 = 0;
    v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (!v11)
      goto LABEL_22;
    if (!v5)
    {
      v9 = 0;
      v10 = 0;
      goto LABEL_22;
    }
    goto LABEL_35;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  if (*v6 >= 2u)
  {
LABEL_38:
    v9 = v5;
    v10 = v4;
    goto LABEL_22;
  }
  if (*v6)
  {
    if (v5 > (unint64_t)&v6[-v4 + 1])
    {
      a2[2] = (uint64_t)(v6 + 2);
      v7 = v6[1];
      if (v7 < 2)
      {
        v8 = 0;
        LOBYTE(v25) = v7 != 0;
        v26 = 0;
        v27 = 1;
LABEL_12:
        v22[0] = 0;
        v23 = -1;
        ((void (*)(uint64_t *, unsigned __int8 *, uint64_t *))off_1E34F4AE8[v8])(&v28, v22, &v25);
        v23 = v8;
        v24 = 1;
        if (!v27)
          goto LABEL_15;
        if (v26 == -1)
          goto LABEL_15;
        ((void (*)(uint64_t *, uint64_t *))off_1E34F4AD8[v26])(&v28, &v25);
        if (v24)
          goto LABEL_15;
        goto LABEL_25;
      }
      goto LABEL_38;
    }
    v9 = 0;
    v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    v11 = a2[3];
    if (!v11)
    {
LABEL_22:
      *a2 = 0;
      a2[1] = 0;
      v12 = a2[3];
      if (v12 && v9)
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v10, v9);
      goto LABEL_23;
    }
LABEL_35:
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v9 = 0;
    v19 = *a2;
    v20 = a2[1];
    v21 = a2[3];
    *a2 = 0;
    a2[1] = 0;
    v10 = 0;
    if (v21 && v20)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
      v10 = *a2;
      v9 = a2[1];
    }
    goto LABEL_22;
  }
  IPC::Decoder::decode<WTF::String>(a2, &v28);
  if (v29)
  {
    v25 = v28;
    v8 = 1;
    v26 = 1;
    v27 = 1;
    goto LABEL_12;
  }
LABEL_23:
  v13 = *a2;
  v14 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v15 = a2[3];
  if (v15 && v14)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
  v22[0] = 0;
  v24 = 0;
LABEL_25:
  v16 = *a2;
  v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v18 = a2[3];
  if (!v18 || !v17 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16), !v24))
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetEnabled,WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
LABEL_15:
  WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v22);
  if (v24)
  {
    if (v23 != -1)
      ((void (*)(uint64_t *, unsigned __int8 *))off_1E34F4AD8[v23])(&v25, v22);
  }
}

void sub_1976AD56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, int a20,int a21,char a22)
{
  if (a14)
  {
    if (a12 != -1)
      ((void (*)(__int16 *, char *))off_1E34F4AD8[a12])(&a16, &a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetEnabled,WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  unsigned __int8 v1[8];
  int v2;
  char v3;

  v1[0] = 0;
  v2 = 0;
  WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, v1);
  if (v2 != -1)
    ((void (*)(char *, unsigned __int8 *))off_1E34F4AD8[v2])(&v3, v1);
}

void sub_1976AD658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F4AD8[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJbN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJbS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIAction::isEnabled(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, unsigned __int8 *a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *((_DWORD *)a2 + 2);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *a2);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetIcon,WebKit::WebExtensionAPIAction::setIcon(WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setIcon(WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4B08;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetIcon,WebKit::WebExtensionAPIAction::setIcon(WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setIcon(WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4B08;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetIcon,WebKit::WebExtensionAPIAction::setIcon(WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setIcon(WebKit::WebFrame &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976AD904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetPopup,WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4B30;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetPopup,WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4B30;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionGetPopup,WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  char v6;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v3);
    if (v5)
    {
      WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v3, v4);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F49C8[v4])(&v6, &v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetPopup,WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetPopup,WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976ADAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  uint64_t v12;

  if (a12)
  {
    if (a10 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34F49C8[a10])(v12 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::ActionGetPopup,WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = 0;
  v2 = 0;
  WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1E34F49C8[v2])(&v3, &v1);
}

void sub_1976ADB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F49C8[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIAction::getPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  __CFString *v4;
  objc_object *v5;
  id v6;
  _Unwind_Exception *v7;
  id v8;
  id v9;

  if (a3)
  {
    if (a3 != 1)
    {
      v7 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v7);
    }
    if (a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v9 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    if (a2)
      v5 = (objc_object *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = (objc_object *)&stru_1E351F1B8;
    v9 = v5;
    v6 = WebKit::WebExtensionCallbackHandler::call(a1, v5);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetPopup,WebKit::WebExtensionAPIAction::setPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4B58;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetPopup,WebKit::WebExtensionAPIAction::setPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4B58;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionSetPopup,WebKit::WebExtensionAPIAction::setPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::setPopup(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976ADDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionOpenPopup,WebKit::WebExtensionAPIAction::openPopup(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::openPopup(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4B80;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionOpenPopup,WebKit::WebExtensionAPIAction::openPopup(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::openPopup(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4B80;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ActionOpenPopup,WebKit::WebExtensionAPIAction::openPopup(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIAction::openPopup(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976ADFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(WTF::StringImpl **a1, const WebKit::WebExtensionAPIObject *a2, int a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  v6 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)a1, (uint64_t)a2);
  *(_DWORD *)(v6 + 48) = 1;
  *(_QWORD *)v6 = off_1E34F4BA8;
  *(_QWORD *)(v6 + 40) = &unk_1E34F4BD8;
  *(_QWORD *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 64) = a3;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  WebKit::toAPIString(a3);
  WebKit::WebExtensionAPIObject::setPropertyPath(a1, (const WTF::String *)&v10, a2);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

void sub_1976AE0D8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  WebKit::WebExtensionAPIObject *v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v10, v13);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIObject::WebExtensionAPIObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E34F4C28;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  ++*(_DWORD *)(v4 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
    ++*(_DWORD *)(v5 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

WTF::StringImpl **WebKit::WebExtensionAPIObject::setPropertyPath(WTF::StringImpl **this, const WTF::String *a2, const WebKit::WebExtensionAPIObject *a3)
{
  WTF::StringImpl **result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  if (!a3)
    return WTF::String::operator=(this + 4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)a3 + 4);
  if (!v5 || !*((_DWORD *)v5 + 1))
    return WTF::String::operator=(this + 4, a2);
  *(_DWORD *)v5 += 2;
  v13 = v5;
  v6 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v6 += 2;
  v12 = v6;
  WTF::makeString<WTF::String,char,WTF::String>((uint64_t *)&v13, 46, (uint64_t *)&v12, &v14);
  v8 = v14;
  v14 = 0;
  v9 = this[4];
  this[4] = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v7);
      v11 = v14;
      v14 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v7);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v9 -= 2;
      v14 = 0;
    }
  }
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = (WTF::StringImpl **)v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1976AE2B4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::toAPIString(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1976AE338()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *v0 = v2;
  return result;
}

void WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(WebKit::WebExtensionAPIObject *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E34F4C28;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v4 + 16));
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
}

{
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::WebExtensionAPIEvent::~WebExtensionAPIEvent(WebKit::WebExtensionAPIEvent *this)
{
  WTF *v1;
  void *v2;

  WebKit::WebExtensionAPIEvent::~WebExtensionAPIEvent(this);
  WTF::fastFree(v1, v2);
}

{
  void *v2;
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E34F4BA8;
  *((_QWORD *)this + 5) = &unk_1E34F4BD8;
  WebKit::WebExtensionAPIEvent::removeAllListeners((unsigned int *)this);
  WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, v3);
}

uint64_t WebKit::WebExtensionAPIObject::runtime(WebKit::WebExtensionAPIObject *this)
{
  return *((_QWORD *)this + 2);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIEvent::~WebExtensionAPIEvent(WebKit::WebExtensionAPIEvent *this)
{
  WebKit::WebExtensionAPIEvent::~WebExtensionAPIEvent((WebKit::WebExtensionAPIEvent *)((char *)this - 40));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebExtensionAPIEvent::~WebExtensionAPIEvent((WebKit::WebExtensionAPIEvent *)((char *)this - 40));
  WTF::fastFree(v1, v2);
}

uint64_t WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebKit::WebExtensionCallbackHandler **v4;
  uint64_t v5;
  WebKit::WebExtensionCallbackHandler *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WebKit::WebExtensionCallbackHandler ***)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void sub_1976AE784(_Unwind_Exception *a1, void *a2)
{
  WebKit::WebExtensionAPIObject *v2;
  WTF::StringImpl *v4;

  WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2 + 72, a2);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v2, v4);
  _Unwind_Resume(a1);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchActionClickedEvent(std::optional<WebKit::WebExtensionTabParameters> const&)::$_0,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, uint64_t a2, WebKit::WebExtensionAPINamespace *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unsigned int v9;
  WebKit::WebExtensionAPIAction *v10;
  WebKit::WebExtensionAPIEvent *v11;
  unsigned int *result;
  _BYTE v13[48];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 24);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0 && !*(_BYTE *)(v6 + 144))
  {
    v8 = (unsigned int *)(v6 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v13[8] = 0;
  v13[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v10 = (WebKit::WebExtensionAPIAction *)WebKit::WebExtensionAPINamespace::action(a3);
  v11 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIAction::onClicked(v10);
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v11, **(objc_object ***)(a1 + 8));
  result = (unsigned int *)MEMORY[0x19AEB0CA8](v13);
  if ((v7 & 1) == 0)
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  return result;
}

void sub_1976AE898(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v2;

  if ((v2 & 1) == 0)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIAlarms::createAlarm(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  __CFString *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  NSString *v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  WTF::WallTime *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  WebKit::WebProcess *v28;
  const __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  char *v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  size_t v41;
  unint64_t v42;
  char *v43;
  double *v44;
  void *v45;
  IPC::Encoder *v46;
  WTF *v47;
  void *v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  void *v53;
  unint64_t v54;
  size_t v55;
  char *v56;
  void *v57;
  size_t v58;
  size_t v59;
  void *v60;
  WTF::StringImpl *v61;
  IPC::Encoder *v62;
  _QWORD v63[3];
  _QWORD v64[4];

  v64[3] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  if (_MergedGlobals_106 == 1)
  {
    v9 = (void *)qword_1ECE73008;
  }
  else
  {
    v63[0] = CFSTR("when");
    v64[0] = objc_opt_class();
    v63[1] = CFSTR("delayInMinutes");
    v64[1] = objc_opt_class();
    v63[2] = CFSTR("periodInMinutes");
    v64[2] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v64, v63, 3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE73008 = (uint64_t)v9;
    _MergedGlobals_106 = 1;
  }
  if (WebKit::validateDictionary(v8, CFSTR("info"), 0, v9, a4))
  {
    WebKit::objectForKey<NSNumber>(v8, (uint64_t)CFSTR("when"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::objectForKey<NSNumber>(v8, (uint64_t)CFSTR("delayInMinutes"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::objectForKey<NSNumber>(v8, (uint64_t)CFSTR("periodInMinutes"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10 && v11)
    {
      WebKit::toErrorString(0, CFSTR("info"), CFSTR("it cannot specify both 'delayInMinutes' and 'when'"), v12);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_42:

      goto LABEL_43;
    }
    v60 = v13;
    objc_msgSend(v10, "doubleValue");
    v15 = v14;
    objc_msgSend(v11, "doubleValue");
    v17 = v16;
    v18 = (WTF::WallTime *)objc_msgSend(v13, "doubleValue");
    v20 = v19;
    WTF::WallTime::now(v18);
    v22 = v15 / 1000.0;
    v23 = v20 * 60.0;
    if (v22 == 0.0)
    {
      v24 = v17 * 60.0;
      if (v24 == 0.0)
      {
        if (v23 != 0.0)
          goto LABEL_14;
        v24 = 0.0;
        goto LABEL_16;
      }
    }
    else
    {
      v24 = v22 - floor(v21 * 1000.0) / 1000.0;
    }
    if (v23 != 0.0)
    {
      if (v24 != 0.0)
      {
LABEL_17:
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
        if (!v25 || (v26 = *(_QWORD *)(v25 + 8)) == 0 || !*(_BYTE *)(v26 + 32))
        {
          v27 = 30.0;
          if (v24 < 30.0)
            v24 = 30.0;
          if (v23 >= 30.0)
            v27 = v23;
          if (v23 == 0.0)
            v23 = 0.0;
          else
            v23 = v27;
        }
        {
          v28 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v28);
        }
        if (v7)
          v29 = v7;
        else
          v29 = &stru_1E351F1B8;
        MEMORY[0x19AEABCC8](&v61, v29);
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1613;
        *(_QWORD *)(v31 + 8) = v30;
        v32 = (void *)(v31 + 16);
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v62 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, (uint64_t *)&v61);
        v33 = *(_QWORD *)(v31 + 544);
        v34 = (v33 + 7) & 0xFFFFFFFFFFFFFFF8;
        v35 = v34 + 8;
        v36 = *(_QWORD *)(v31 + 552);
        if (v36 < v34 + 8)
        {
          v50 = (2 * v36 + 4095) & 0xFFFFFFFFFFFFF000;
          do
          {
            v51 = v50;
            v50 *= 2;
          }
          while (v51 < v35);
          v58 = v51;
          v52 = (char *)mmap(0, v51, 3, 4098, -1, 0);
          if (v52 == (char *)-1)
            goto LABEL_58;
          v37 = v52;
          memcpy(v52, *(const void **)(v31 + 528), *(_QWORD *)(v31 + 544));
          v53 = *(void **)(v31 + 528);
          if (v53 != v32)
            munmap(v53, *(_QWORD *)(v31 + 552));
          *(_QWORD *)(v31 + 528) = v37;
          *(_QWORD *)(v31 + 552) = v58;
          v33 = *(_QWORD *)(v31 + 544);
        }
        else
        {
          v37 = *(char **)(v31 + 528);
        }
        bzero(&v37[v33], v34 - v33);
        *(_QWORD *)(v31 + 544) = v35;
        v38 = (double *)(*(_QWORD *)(v31 + 528) + v34);
        *(_QWORD *)(v31 + 536) = v38 + 1;
        *v38 = v24;
        v39 = *(_QWORD *)(v31 + 544);
        v40 = (v39 + 7) & 0xFFFFFFFFFFFFFFF8;
        v41 = v40 + 8;
        v42 = *(_QWORD *)(v31 + 552);
        if (v42 >= v40 + 8)
        {
          v43 = *(char **)(v31 + 528);
LABEL_36:
          bzero(&v43[v39], v40 - v39);
          *(_QWORD *)(v31 + 544) = v41;
          v44 = (double *)(*(_QWORD *)(v31 + 528) + v40);
          *(_QWORD *)(v31 + 536) = v44 + 1;
          *v44 = v23;
          (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v28 + 2) + 32))((_QWORD *)v28 + 2, &v62, 0);
          v46 = v62;
          v62 = 0;
          v13 = v60;
          if (v46)
          {
            IPC::Encoder::~Encoder(v46, v45);
            WTF::fastFree(v47, v48);
          }
          v49 = v61;
          v61 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v45);
            else
              *(_DWORD *)v49 -= 2;
          }
          goto LABEL_42;
        }
        v54 = (2 * v42 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v55 = v54;
          v54 *= 2;
        }
        while (v55 < v41);
        v59 = v55;
        v56 = (char *)mmap(0, v55, 3, 4098, -1, 0);
        if (v56 != (char *)-1)
        {
          v43 = v56;
          memcpy(v56, *(const void **)(v31 + 528), *(_QWORD *)(v31 + 544));
          v57 = *(void **)(v31 + 528);
          if (v57 != v32)
            munmap(v57, *(_QWORD *)(v31 + 552));
          *(_QWORD *)(v31 + 528) = v43;
          *(_QWORD *)(v31 + 552) = v59;
          v39 = *(_QWORD *)(v31 + 544);
          goto LABEL_36;
        }
LABEL_58:
        __break(0xC471u);
        JUMPOUT(0x1976AEE10);
      }
LABEL_14:
      v24 = v20 * 60.0;
      goto LABEL_17;
    }
LABEL_16:
    v23 = 0.0;
    goto LABEL_17;
  }
LABEL_43:

}

void sub_1976AEE1C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, WTF::StringImpl *a12, IPC::Encoder *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  WTF *v18;
  void *v19;

  if (a13)
  {
    IPC::Encoder::~Encoder(a13, a2);
    WTF::fastFree(v18, v19);
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a12 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAlarms::get(uint64_t a1, void *a2, uint64_t *a3)
{
  __CFString *v5;
  WebKit::WebProcess *v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD v20[2];
  IPC::Encoder *v21;

  v5 = a2;
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v6);
  }
  if (v5)
    v7 = v5;
  else
    v7 = &stru_1E351F1B8;
  MEMORY[0x19AEABCC8](&v19, v7);
  ++*(_DWORD *)(a1 + 48);
  v8 = *a3;
  *a3 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1614;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v21 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)&v19);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E34F4C78;
  v11[1] = a1;
  v11[2] = v8;
  v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v20[0] = v11;
  v20[1] = v12;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v6 + 2) + 40))((_QWORD *)v6 + 2, &v21, v20, 0);
  v14 = v20[0];
  v20[0] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v13);
    WTF::fastFree(v16, v17);
  }
  v18 = v19;
  v19 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)v18 -= 2;
  }

}

void sub_1976AF054(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  void *v12;
  WTF *v14;
  void *v15;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v14, v15);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a9 -= 2;
  }

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIAlarms::getAll(uint64_t a1, _QWORD *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  WebKit::WebProcess *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = a2;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v3);
    a2 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  ++*(_DWORD *)(a1 + 48);
  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1615;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v16 = (IPC::Encoder *)v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34F4CA0;
  v7[1] = a1;
  v7[2] = v4;
  v15[0] = v7;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v3 + 2) + 40))((_QWORD *)v3 + 2, &v16, v15, 0);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_1976AF27C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIAlarms::clear(uint64_t a1, void *a2, uint64_t *a3)
{
  __CFString *v5;
  WebKit::WebProcess *v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD v20[2];
  IPC::Encoder *v21;

  v5 = a2;
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v6);
  }
  if (v5)
    v7 = v5;
  else
    v7 = &stru_1E351F1B8;
  MEMORY[0x19AEABCC8](&v19, v7);
  ++*(_DWORD *)(a1 + 48);
  v8 = *a3;
  *a3 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 1611;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v21 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)&v19);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v11 = &off_1E34F4CC8;
  v11[1] = a1;
  v11[2] = v8;
  v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v20[0] = v11;
  v20[1] = v12;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v6 + 2) + 40))((_QWORD *)v6 + 2, &v21, v20, 0);
  v14 = v20[0];
  v20[0] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v13);
    WTF::fastFree(v16, v17);
  }
  v18 = v19;
  v19 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)v18 -= 2;
  }

}

void sub_1976AF4C4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  void *v12;
  WTF *v14;
  void *v15;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v14, v15);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a9 -= 2;
  }

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIAlarms::clearAll(uint64_t a1, _QWORD *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  WebKit::WebProcess *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = a2;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v3);
    a2 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  ++*(_DWORD *)(a1 + 48);
  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1612;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v16 = (IPC::Encoder *)v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34F4CF0;
  v7[1] = a1;
  v7[2] = v4;
  v15[0] = v7;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v3 + 2) + 40))((_QWORD *)v3 + 2, &v16, v15, 0);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_1976AF6EC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionAPIAlarms::onAlarm(WebKit::WebExtensionAPIAlarms *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    v6 = 2;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIAlarms &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 7);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIAlarms &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976AF88C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchAlarmsEvent(uint64_t a1, uint64_t a2)
{
  WebCore *v3;
  WebCore *v4;
  WebCore *v5;
  id v6;

  WebKit::toWebAPI(a2);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v3 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E34F4D18;
  *((_QWORD *)v3 + 1) = &v6;
  v5 = v3;
  WebCore::mainThreadNormalWorld(v3);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v5);
  v4 = v5;
  v5 = 0;
  if (v4)
    (*(void (**)(WebCore *))(*(_QWORD *)v4 + 8))(v4);

}

void sub_1976AF924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

id WebKit::toWebAPI(uint64_t a1)
{
  void *v2;
  __CFString *v3;
  void *v4;
  double v5;
  void *v6;
  double v7;
  void *v8;
  void *v9;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_QWORD *)a1)
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E351F1B8;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("name"));

  v4 = (void *)MEMORY[0x1E0CB37E8];
  WTF::MonotonicTime::approximateWallTime((WTF::MonotonicTime *)(a1 + 24));
  objc_msgSend(v4, "numberWithDouble:", floor(v5 * 1000.0));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, CFSTR("scheduledTime"));

  v7 = *(double *)(a1 + 16);
  if (v7 != 0.0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7 / 60.0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("periodInMinutes"));

  }
  v9 = (void *)objc_msgSend(v2, "copy");

  return v9;
}

{
  void *v2;
  __CFString *v3;
  void *v4;
  unint64_t v5;
  double v6;
  void *v7;
  WebCore::SecurityOrigin *v8;
  uint64_t v9;
  __CFString *v10;
  const WTF::URL *v11;
  __CFString *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v16;
  WebCore::SecurityOrigin *v18;
  WTF::StringImpl *v19;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_QWORD *)a1)
      v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v3 = &stru_1E351F1B8;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("id"));

  }
  if (*(_BYTE *)(a1 + 192))
  {
    WebKit::toWebAPI(a1 + 16);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("tab"));

    if (*(_BYTE *)(a1 + 208))
    {
      if (*(_BYTE *)(a1 + 192))
      {
        v5 = *(_QWORD *)(a1 + 200);
        if (v5 == -3)
        {
          v6 = -1.0;
        }
        else
        {
          v6 = 0.0;
          if (v5 != -2)
            v6 = (double)v5;
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v6);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v7, CFSTR("frameId"));

      }
    }
  }
  if ((*(_BYTE *)(a1 + 240) & 1) != 0)
  {
    v9 = *(_QWORD *)(a1 + 232);
    v8 = (WebCore::SecurityOrigin *)(a1 + 232);
    if (v9)
      v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v10 = &stru_1E351F1B8;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, CFSTR("url"));

    WebCore::SecurityOrigin::create(v8, v11);
    WebCore::SecurityOrigin::toString(v18);
    if (v19)
      v12 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v12 = &stru_1E351F1B8;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v12, CFSTR("origin"));

    v14 = v19;
    v19 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = (uint64_t)v18;
    v18 = 0;
    if (v15)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v15, v13);
  }
  v16 = (void *)objc_msgSend(v2, "copy", v18, v19);

  return v16;
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __CFString *v7;
  void *v8;
  CFTypeRef v9;
  uint64_t v10;
  unint64_t v11;
  const __CFString *v12;
  const __CFString *v13;
  void *v14;
  CFTypeRef v15;
  void *v16;
  CFTypeRef v17;
  void *v18;
  CFTypeRef v19;
  const __CFString *v20;
  void *v21;
  id result;
  CFTypeRef cf;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 9);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!*(_BYTE *)(a1 + 113))
    goto LABEL_38;
  v4 = MEMORY[0x1E0C9AAB0];
  v5 = MEMORY[0x1E0C9AAA0];
  if (*(_BYTE *)(a1 + 112))
    v6 = MEMORY[0x1E0C9AAB0];
  else
    v6 = MEMORY[0x1E0C9AAA0];
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, CFSTR("allFrames"));
  if (*(_QWORD *)(a1 + 48))
    v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E351F1B8;
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v7, CFSTR("id"));

  if (!*(_BYTE *)(a1 + 104))
  {
    result = std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_40;
  }
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1 + 88, (uint64_t *)&cf);
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v8, CFSTR("matches"));

  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  if (!*(_BYTE *)(a1 + 115)
    || (*(_BYTE *)(a1 + 114) ? (v10 = v4) : (v10 = v5),
        (objc_msgSend(v3, "setObject:forKeyedSubscript:", v10, CFSTR("persistAcrossSessions")), !*(_BYTE *)(a1 + 57))
     || ((v11 = *(char *)(a1 + 56), v11 > 2) ? (v12 = CFSTR("document_idle")) : (v12 = off_1E34F5E08[v11]),
         objc_msgSend(v3, "setObject:forKeyedSubscript:", v12, CFSTR("runAt")),
         !*(_BYTE *)(a1 + 117))))
  {
LABEL_38:
    result = std::__throw_bad_optional_access[abi:sn180100]();
LABEL_40:
    __break(1u);
    return result;
  }
  if (*(_BYTE *)(a1 + 116))
    v13 = CFSTR("ISOLATED");
  else
    v13 = CFSTR("MAIN");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v13, CFSTR("world"));
  if (*(_BYTE *)(a1 + 16))
  {
    WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t *)&cf);
    WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v14, CFSTR("css"));

    v15 = cf;
    cf = 0;
    if (v15)
      CFRelease(v15);
  }
  if (*(_BYTE *)(a1 + 40))
  {
    WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1 + 24, (uint64_t *)&cf);
    WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v16, CFSTR("js"));

    v17 = cf;
    cf = 0;
    if (v17)
      CFRelease(v17);
  }
  if (*(_BYTE *)(a1 + 80))
  {
    WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1 + 64, (uint64_t *)&cf);
    WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v18, CFSTR("excludeMatches"));

    v19 = cf;
    cf = 0;
    if (v19)
      CFRelease(v19);
  }
  if (*(_BYTE *)(a1 + 119))
  {
    if (*(_BYTE *)(a1 + 118))
      v20 = CFSTR("author");
    else
      v20 = CFSTR("user");
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v20, CFSTR("cssOrigin"));
  }
  v21 = (void *)objc_msgSend(v3, "copy");

  return v21;
}

{
  void *v2;
  double v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  double v10;
  void *v11;
  void *v12;
  double v13;
  void *v14;
  void *v15;
  unint64_t v16;
  double v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  const __CFString *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id result;
  const __CFString *v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (double)*(unint64_t *)a1;
    if (*(_QWORD *)a1 == -2)
      v3 = -1.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("id"));

  }
  if (*(_BYTE *)(a1 + 56))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = v5 ? (id)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, CFSTR("url"));
    if (v5)

  }
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(_QWORD *)(a1 + 64);
    v8 = v7 ? (id)WTF::StringImpl::operator NSString *() : &stru_1E351F1B8;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("title"));
    if (v7)

  }
  if (*(_BYTE *)(a1 + 88))
  {
    v9 = *(_QWORD *)(a1 + 80);
    v10 = (double)v9;
    if (v9 + 3 < 2)
      v10 = -1.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, CFSTR("windowId"));

  }
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(_QWORD *)(a1 + 96) == -1)
    {
      v12 = &unk_1E356FF08;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v12, CFSTR("index"));

  }
  if (*(_BYTE *)(a1 + 128))
  {
    v13 = *(double *)(a1 + 120);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 112));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v14, CFSTR("width"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v15, CFSTR("height"));

  }
  if (*(_BYTE *)(a1 + 144))
  {
    v16 = *(_QWORD *)(a1 + 136);
    v17 = (double)v16;
    if (v16 == -2)
      v17 = -1.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v18, CFSTR("openerTabId"));

  }
  if (*(_BYTE *)(a1 + 153))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 152));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v19, CFSTR("active"));

  }
  if (*(_BYTE *)(a1 + 155))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 154));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v20, CFSTR("selected"));

    if (!*(_BYTE *)(a1 + 155))
    {
      result = std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 154));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v21, CFSTR("highlighted"));

  }
  if (*(_BYTE *)(a1 + 157))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 156));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v22, CFSTR("pinned"));

  }
  if (*(_BYTE *)(a1 + 159))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 158));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v23, CFSTR("audible"));

  }
  if (*(_BYTE *)(a1 + 161))
  {
    v32 = CFSTR("muted");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 160));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v33[0] = v24;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v33, &v32, 1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v25, CFSTR("mutedInfo"));

  }
  if (*(_BYTE *)(a1 + 163))
  {
    if (*(_BYTE *)(a1 + 162))
      v26 = CFSTR("loading");
    else
      v26 = CFSTR("complete");
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v26, CFSTR("status"));
  }
  if (*(_BYTE *)(a1 + 165))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 164));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v27, CFSTR("incognito"));

  }
  if (*(_BYTE *)(a1 + 167))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 166));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v28, CFSTR("isArticle"));

  }
  if (*(_BYTE *)(a1 + 169))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 168));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v29, CFSTR("isInReaderMode"));

  }
  v30 = (void *)objc_msgSend(v2, "copy");

  return v30;
}

{
  double v2;
  void *v3;
  unsigned int v4;
  __CFString *v5;
  const __CFString *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  id result;
  _QWORD v30[4];
  _QWORD v31[4];
  _QWORD v32[6];
  _QWORD v33[7];

  v33[6] = *MEMORY[0x1E0C80C00];
  v32[0] = CFSTR("id");
  if (!*(_BYTE *)(a1 + 8))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_23:
    result = std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_28;
  }
  v2 = (double)*(unint64_t *)a1;
  if ((unint64_t)(*(_QWORD *)a1 + 3) < 2)
    v2 = -1.0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v33[0] = v3;
  v32[1] = CFSTR("state");
  if (!*(_BYTE *)(a1 + 17))
    goto LABEL_23;
  v4 = *(unsigned __int8 *)(a1 + 16) - 1;
  v5 = CFSTR("normal");
  v6 = CFSTR("normal");
  if (v4 <= 2)
    v6 = off_1E34F6B50[(char)v4];
  v33[1] = v6;
  v32[2] = CFSTR("type");
  if (!*(_BYTE *)(a1 + 19))
    goto LABEL_23;
  if (*(_BYTE *)(a1 + 18))
    v5 = CFSTR("popup");
  v7 = v5;
  v33[2] = v7;
  v32[3] = CFSTR("focused");
  if (!*(_BYTE *)(a1 + 89))
    goto LABEL_23;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 88));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v33[3] = v8;
  v32[4] = CFSTR("incognito");
  if (!*(_BYTE *)(a1 + 91))
    goto LABEL_23;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 90));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v32[5] = CFSTR("alwaysOnTop");
  v33[4] = v9;
  v33[5] = MEMORY[0x1E0C9AAA0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v33, v32, 6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v10, "mutableCopy");

  if (*(_BYTE *)(a1 + 80))
  {
    v13 = *(double *)(a1 + 48);
    v12 = *(double *)(a1 + 56);
    v15 = *(double *)(a1 + 64);
    v14 = *(double *)(a1 + 72);
    v30[0] = CFSTR("top");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v12);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v31[0] = v16;
    v30[1] = CFSTR("left");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v13);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v31[1] = v17;
    v30[2] = CFSTR("width");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v15);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v31[2] = v18;
    v30[3] = CFSTR("height");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v14);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v31[3] = v19;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v31, v30, 4);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addEntriesFromDictionary:", v20);

  }
  if (!*(_BYTE *)(a1 + 40))
    goto LABEL_21;
  v21 = objc_alloc(MEMORY[0x1E0C99DE8]);
  if (*(_BYTE *)(a1 + 40))
  {
    v22 = (void *)objc_msgSend(v21, "initWithCapacity:", *(unsigned int *)(a1 + 36));
    if (*(_BYTE *)(a1 + 40))
    {
      v23 = *(_DWORD *)(a1 + 36);
      if (v23)
      {
        v24 = *(_QWORD *)(a1 + 24);
        v25 = 176 * v23;
        do
        {
          WebKit::toWebAPI(v24);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "addObject:", v26);

          v24 += 176;
          v25 -= 176;
        }
        while (v25);
      }
      v27 = (void *)objc_msgSend(v22, "copy");
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v27, CFSTR("tabs"));

LABEL_21:
      v28 = (void *)objc_msgSend(v11, "copy");

      return v28;
    }
  }
  result = std::__throw_bad_optional_access[abi:sn180100]();
LABEL_28:
  __break(1u);
  return result;
}

void sub_1976AFA68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(uint64_t a1, uint64_t a2)
{
  WebCore *v4;
  uint64_t v5;
  uint64_t result;
  WebCore *v7;

  v4 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E34F4C50;
  *((_QWORD *)v4 + 1) = a2;
  v7 = v4;
  v5 = WebCore::mainThreadNormalWorld(v4);
  WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects(a1, (uint64_t)&v7, v5);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1976AFB08(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit24WebExtensionContextProxy25enumerateNamespaceObjectsERKNS_8FunctionIFvRNS2_24WebExtensionAPINamespaceEEEERN7WebCore15DOMWrapperWorldEEUlRT_RT0_E_vJRNS2_8WebFrameES6_EE4callESK_S6_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8), a3);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsGet,WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4C78;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsGet,WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4C78;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsGet,WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  WebKit::WebExtensionCallbackHandler *v8;
  objc_object *v9;
  id v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  char v28;
  WTF::StringImpl *v29;
  __int128 v30;
  uint64_t v31;
  char v32;

  if (!a2 || (v4 = *a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::AlarmsGet,WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v13 = 0;
    v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v4, v5);
        v13 = 0;
        v21 = *a2;
        v22 = a2[1];
        v23 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v14 = 0;
        if (v23 && v22)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v22);
          v14 = *a2;
          v13 = a2[1];
        }
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_17;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v13 = v5;
    v14 = v4;
LABEL_17:
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16 && v13)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
    goto LABEL_18;
  }
  if (!v7)
  {
    LOBYTE(v24) = 0;
    v27 = 0;
    goto LABEL_10;
  }
  IPC::Decoder::decode<WebKit::WebExtensionAlarmParameters>(a2, (uint64_t)&v29);
  if (v32)
  {
    v25 = v30;
    v26 = v31;
    v24 = v29;
    v27 = 1;
LABEL_10:
    v28 = 1;
    v8 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    WebKit::toWebAPI<WebKit::WebExtensionAlarmParameters>((uint64_t)&v24);
    v9 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v10 = WebKit::WebExtensionCallbackHandler::call(v8, v9);

    if (v28)
    {
      if (v27)
      {
        v12 = v24;
        v24 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
    return;
  }
LABEL_18:
  v17 = *a2;
  v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v19 = a2[3];
  if (!v19)
  {
    v18 = 0;
LABEL_20:
    v20 = 0;
    goto LABEL_21;
  }
  if (!v18)
    goto LABEL_20;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
  v20 = *a2;
  v18 = a2[1];
  v19 = a2[3];
LABEL_21:
  *a2 = 0;
  a2[1] = 0;
  if (v19 && v18)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v20);
  IPC::Connection::cancelReply<Messages::WebExtensionContext::AlarmsGet,WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
}

void sub_1976AFE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  WTF::StringImpl *v20;

  if ((_BYTE)a16 && a14 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v20);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::AlarmsGet,WebKit::WebExtensionAPIAlarms::get(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  objc_object *v2;
  id v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  LOBYTE(v6) = 0;
  v7 = 0;
  WebKit::toWebAPI<WebKit::WebExtensionAlarmParameters>((uint64_t)&v6);
  v2 = (objc_object *)objc_claimAutoreleasedReturnValue();
  v3 = WebKit::WebExtensionCallbackHandler::call(a1, v2);

  if (v7)
  {
    v5 = v6;
    v6 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
}

void sub_1976AFEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void *v14;
  void *v15;
  WTF::StringImpl *v17;

  v15 = v14;

  if (a14 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebExtensionAlarmParameters>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebExtensionAlarmParameters,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 32))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1976AFF90(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::WebExtensionAlarmParameters,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<WebKit::WebExtensionAlarmParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

id WebKit::toWebAPI<WebKit::WebExtensionAlarmParameters>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
    WebKit::toWebAPI(a1);
  else
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  return (id)objc_claimAutoreleasedReturnValue();
}

{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  NSMutableArray *v8;
  objc_object *v9;
  void *v10;
  CFTypeRef v11;
  CFTypeRef cf;

  v2 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 12));
  v3 = v2;
  cf = v2;
  if (v2)
    CFRetain(v2);

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)a1;
    v6 = 32 * v4;
    do
    {
      WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
      v7 = (WTF *)objc_claimAutoreleasedReturnValue();
      WebKit::toWebAPI(v5);
      v8 = (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
      WTF::addUnlessNil(v7, v8, v9);

      v5 += 32;
      v6 -= 32;
    }
    while (v6);
  }
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  return v10;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsGetAll,WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4CA0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsGetAll,WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4CA0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsGetAll,WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  WebKit::WebExtensionCallbackHandler *v21;
  objc_object *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  char v44;
  _QWORD v45[2];
  char v46;
  WTF::StringImpl *v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebExtensionContext::AlarmsGetAll,WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  v4 = (WTF::StringImpl *)*a2;
  if (!v4)
    return IPC::Connection::cancelReply<Messages::WebExtensionContext::AlarmsGetAll,WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v26 = a2[3];
    if (v26)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v27 = *a2;
        v28 = a2[1];
        v29 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v29)
        {
          if (v28)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v27);
        }
      }
    }
    goto LABEL_51;
  }
  v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  a2[2] = (uint64_t)(v8 + 1);
  v51 = 0;
  v52 = 0;
  if (v9 >= 0x8000)
  {
    do
    {
      result = (uint64_t)IPC::Decoder::decode<WebKit::WebExtensionAlarmParameters>(a2, (uint64_t)&v47);
      if (!v50)
        goto LABEL_50;
      v30 = HIDWORD(v52);
      if (HIDWORD(v52) == (_DWORD)v52)
      {
        result = WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v51, HIDWORD(v52) + 1, (unint64_t)&v47);
        v30 = HIDWORD(v52);
        v31 = v51 + 32 * HIDWORD(v52);
        v32 = *(_QWORD *)result;
        *(_QWORD *)result = 0;
        *(_QWORD *)v31 = v32;
        v33 = *(_OWORD *)(result + 8);
        *(_QWORD *)(v31 + 24) = *(_QWORD *)(result + 24);
      }
      else
      {
        v31 = v51 + 32 * HIDWORD(v52);
        v34 = v47;
        v47 = 0;
        *(_QWORD *)v31 = v34;
        v33 = v48;
        *(_QWORD *)(v31 + 24) = v49;
      }
      *(_OWORD *)(v31 + 8) = v33;
      HIDWORD(v52) = v30 + 1;
      if (v50)
      {
        result = (uint64_t)v47;
        v47 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
          else
            *(_DWORD *)result -= 2;
        }
      }
      --v9;
    }
    while (v9);
    v35 = HIDWORD(v52);
    v17 = (WTF::StringImpl *)v51;
    if (v52 > HIDWORD(v52))
    {
      v36 = (WTF::StringImpl *)v51;
      if (HIDWORD(v52))
      {
        if (HIDWORD(v52) >> 27)
        {
          __break(0xC471u);
          return result;
        }
        v37 = WTF::fastMalloc((WTF *)(32 * HIDWORD(v52)));
        LODWORD(v52) = v35;
        v51 = v37;
        v36 = v17;
        if ((WTF::StringImpl *)v37 != v17)
        {
          WTF::VectorMover<false,WebKit::WebExtensionAlarmParameters>::move(v17, (WTF::StringImpl *)((char *)v17 + 32 * v35), v37);
          v36 = (WTF::StringImpl *)v51;
        }
      }
      if (v17)
      {
        if (v36 == v17)
        {
          v51 = 0;
          LODWORD(v52) = 0;
        }
        WTF::fastFree(v17, v4);
LABEL_21:
        v17 = (WTF::StringImpl *)v51;
      }
      else
      {
        v17 = v36;
      }
    }
    v18 = v52;
    goto LABEL_25;
  }
  if (v9)
  {
    LODWORD(v52) = v9;
    v51 = WTF::fastMalloc((WTF *)(32 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebExtensionAlarmParameters>(a2, (uint64_t)&v47);
      if (!v50)
        break;
      v10 = HIDWORD(v52);
      if (HIDWORD(v52) == (_DWORD)v52)
      {
        v11 = WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v51, HIDWORD(v52) + 1, (unint64_t)&v47);
        v10 = HIDWORD(v52);
        v12 = v51 + 32 * HIDWORD(v52);
        v13 = *(_QWORD *)v11;
        *(_QWORD *)v11 = 0;
        *(_QWORD *)v12 = v13;
        v14 = *(_OWORD *)(v11 + 8);
        *(_QWORD *)(v12 + 24) = *(_QWORD *)(v11 + 24);
      }
      else
      {
        v12 = v51 + 32 * HIDWORD(v52);
        v15 = v47;
        v47 = 0;
        *(_QWORD *)v12 = v15;
        v14 = v48;
        *(_QWORD *)(v12 + 24) = v49;
      }
      *(_OWORD *)(v12 + 8) = v14;
      HIDWORD(v52) = v10 + 1;
      if (v50)
      {
        v16 = v47;
        v47 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v4);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
      if (!--v9)
        goto LABEL_21;
    }
LABEL_50:
    WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v4);
LABEL_51:
    v38 = *a2;
    v39 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v40 = a2[3];
    if (v40)
    {
      if (v39)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38);
        v41 = *a2;
        v39 = a2[1];
        v40 = a2[3];
        goto LABEL_54;
      }
    }
    else
    {
      v39 = 0;
    }
    v41 = 0;
LABEL_54:
    *a2 = 0;
    a2[1] = 0;
    if (v40)
    {
      if (v39)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v41);
    }
    return IPC::Connection::cancelReply<Messages::WebExtensionContext::AlarmsGetAll,WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
  v17 = 0;
  v18 = 0;
LABEL_25:
  v42 = v18;
  v51 = 0;
  v52 = 0;
  v46 = 1;
  WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v4);
  v45[0] = 0;
  v45[1] = 0;
  WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v20);
  v44 = 1;
  v43[0] = 0;
  v47 = v17;
  v43[1] = 0;
  *(_QWORD *)&v48 = v42;
  v21 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
  WebKit::toWebAPI<WebKit::WebExtensionAlarmParameters>((uint64_t)&v47);
  v22 = (objc_object *)objc_claimAutoreleasedReturnValue();
  v23 = WebKit::WebExtensionCallbackHandler::call(v21, v22);

  WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v24);
  return WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v25);
}

void sub_1976B04E4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (a22 && a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, a2);
    else
      *(_DWORD *)a18 -= 2;
  }
  WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22 - 48, a2);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebExtensionContext::AlarmsGetAll,WebKit::WebExtensionAPIAlarms::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  objc_object *v2;
  id v3;
  void *v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  WebKit::toWebAPI<WebKit::WebExtensionAlarmParameters>((uint64_t)v6);
  v2 = (objc_object *)objc_claimAutoreleasedReturnValue();
  v3 = WebKit::WebExtensionCallbackHandler::call(a1, v2);

  return WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
}

void sub_1976B05B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v11;

  WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  int v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1976B0708);
    }
    v3 = result;
    v4 = *(WTF::StringImpl **)result;
    v5 = (WTF::StringImpl *)(*(_QWORD *)result + 32 * *((unsigned int *)result + 3));
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *((_DWORD *)v3 + 2) = v2;
    *(_QWORD *)v3 = v6;
    result = WTF::VectorMover<false,WebKit::WebExtensionAlarmParameters>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v4, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebKit::WebExtensionAlarmParameters>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int128 v7;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      v7 = *(_OWORD *)((char *)v5 + 8);
      *(_QWORD *)(a3 + 24) = *((_QWORD *)v5 + 3);
      *(_OWORD *)(a3 + 8) = v7;
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 32);
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::WebExtensionAlarmParameters>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 4;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtensionAlarmParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebKit::WebExtensionAlarmParameters>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_1976B0914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsClear,WebKit::WebExtensionAPIAlarms::clear(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::clear(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4CC8;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsClear,WebKit::WebExtensionAPIAlarms::clear(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::clear(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4CC8;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

id WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsClear,WebKit::WebExtensionAPIAlarms::clear(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::clear(NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  return WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsClearAll,WebKit::WebExtensionAPIAlarms::clearAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::clearAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4CF0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsClearAll,WebKit::WebExtensionAPIAlarms::clearAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::clearAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4CF0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

id WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::AlarmsClearAll,WebKit::WebExtensionAPIAlarms::clearAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIAlarms::clearAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  return WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchAlarmsEvent(WebKit::WebExtensionAlarmParameters const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIAlarms *v3;
  WebKit::WebExtensionAPIEvent *v4;

  v3 = (WebKit::WebExtensionAPIAlarms *)WebKit::WebExtensionAPINamespace::alarms(this);
  v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIAlarms::onAlarm(v3);
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, **(objc_object ***)(a1 + 8));
}

IPC::Encoder *WebKit::WebExtensionAPICommands::getAll(uint64_t a1, _QWORD *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  WebKit::WebProcess *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = a2;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v3);
    a2 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  ++*(_DWORD *)(a1 + 48);
  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1616;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v16 = (IPC::Encoder *)v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34F4D40;
  v7[1] = a1;
  v7[2] = v4;
  v15[0] = v7;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v3 + 2) + 40))((_QWORD *)v3 + 2, &v16, v15, 0);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_1976B0CBC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionAPICommands::onCommand(WebKit::WebExtensionAPICommands *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    v6 = 4;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPICommands &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 7);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPICommands &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976B0E5C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPICommands::onChanged(WebKit::WebExtensionAPICommands *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v6 = 3;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPICommands &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 8);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 8);
  }
  return result;
}

void WebKit::WebExtensionContextProxy::dispatchCommandsCommandEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  WebCore *v6;
  uint64_t v7;
  WebCore *v8;
  WebCore *v9;
  id v10;

  if (*(_BYTE *)(a3 + 176))
  {
    WebKit::toWebAPI(a3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = off_1E34F4D68;
  *((_QWORD *)v6 + 1) = a2;
  *((_QWORD *)v6 + 2) = &v10;
  v9 = v6;
  v7 = WebCore::mainThreadNormalWorld(v6);
  WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects(a1, (uint64_t)&v9, v7);
  v8 = v9;
  v9 = 0;
  if (v8)
    (*(void (**)(WebCore *))(*(_QWORD *)v8 + 8))(v8);

}

void sub_1976B0FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchCommandsChangedEvent(WebKit::WebExtensionContextProxy *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  WebCore *v10;
  WebCore *v11;
  WebCore *v12;
  id v13;
  _QWORD v14[3];
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  v14[0] = CFSTR("name");
  if (*(_QWORD *)a2)
    v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E351F1B8;
  v15[0] = v7;
  v14[1] = CFSTR("oldShortcut");
  if (*(_QWORD *)a3)
    v8 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v8 = &stru_1E351F1B8;
  v15[1] = v8;
  v14[2] = CFSTR("newShortcut");
  if (*(_QWORD *)a4)
    v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v9 = &stru_1E351F1B8;
  v15[2] = v9;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 3);
  v13 = (id)objc_claimAutoreleasedReturnValue();

  v10 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v10 = off_1E34F4D90;
  *((_QWORD *)v10 + 1) = &v13;
  v12 = v10;
  WebCore::mainThreadNormalWorld(v10);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects((uint64_t)this, (uint64_t)&v12);
  v11 = v12;
  v12 = 0;
  if (v11)
    (*(void (**)(WebCore *))(*(_QWORD *)v11 + 8))(v11);

}

void sub_1976B1154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CommandsGetAll,WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4D40;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CommandsGetAll,WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4D40;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CommandsGetAll,WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t result;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl **v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  _QWORD v40[2];
  char v41;
  _QWORD v42[2];
  char v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  char v47;
  uint64_t v48;
  WTF::StringImpl *v49;

  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebExtensionContext::CommandsGetAll,WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  v4 = (void *)*a2;
  if (!v4)
    return IPC::Connection::cancelReply<Messages::WebExtensionContext::CommandsGetAll,WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
        v23 = *a2;
        v24 = a2[1];
        v25 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v25)
        {
          if (v24)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
        }
      }
    }
    goto LABEL_42;
  }
  v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  a2[2] = (uint64_t)(v8 + 1);
  v48 = 0;
  v49 = 0;
  if (v9 >= 0xAAAA)
  {
    do
    {
      IPC::Decoder::decode<WebKit::WebExtensionCommandParameters>((uint64_t)&v44, a2);
      if (!v47)
        goto LABEL_41;
      if (HIDWORD(v49) == (_DWORD)v49)
      {
        WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionCommandParameters>((unsigned int *)&v48, (unint64_t)&v44);
      }
      else
      {
        v26 = HIDWORD(v49) + 1;
        v27 = (WTF::StringImpl **)(v48 + 24 * HIDWORD(v49));
        v28 = v44;
        v44 = 0;
        *v27 = v28;
        v29 = v45;
        v45 = 0;
        v27[1] = v29;
        v30 = v46;
        v46 = 0;
        v27[2] = v30;
        HIDWORD(v49) = v26;
      }
      result = std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44, v10);
      --v9;
    }
    while (v9);
    v31 = HIDWORD(v49);
    v16 = (WTF::StringImpl *)v48;
    if (v49 > HIDWORD(v49))
    {
      v32 = (WTF::StringImpl *)v48;
      if (HIDWORD(v49))
      {
        if (HIDWORD(v49) >= 0xAAAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        v33 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(24 * HIDWORD(v49)));
        LODWORD(v49) = 24 * v31 / 0x18;
        v48 = (uint64_t)v33;
        v32 = v16;
        if (v33 != (WTF::StringImpl **)v16)
        {
          WTF::VectorMover<false,WebCore::LinkDecorationFilteringData>::move(v16, (WTF::StringImpl *)((char *)v16 + 24 * v31), v33);
          v32 = (WTF::StringImpl *)v48;
        }
      }
      if (v16)
      {
        if (v32 == v16)
        {
          v48 = 0;
          LODWORD(v49) = 0;
        }
        WTF::fastFree(v16, v4);
        v16 = (WTF::StringImpl *)v48;
      }
      else
      {
        v16 = v32;
      }
    }
    v48 = 0;
    v39 = v49;
    goto LABEL_20;
  }
  if (v9)
  {
    LODWORD(v49) = 24 * (int)v9 / 0x18u;
    v48 = WTF::fastMalloc((WTF *)(24 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebKit::WebExtensionCommandParameters>((uint64_t)&v44, a2);
      if (!v47)
        break;
      if (HIDWORD(v49) == (_DWORD)v49)
      {
        WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionCommandParameters>((unsigned int *)&v48, (unint64_t)&v44);
      }
      else
      {
        v11 = HIDWORD(v49) + 1;
        v12 = (WTF::StringImpl **)(v48 + 24 * HIDWORD(v49));
        v13 = v44;
        v44 = 0;
        *v12 = v13;
        v14 = v45;
        v45 = 0;
        v12[1] = v14;
        v15 = v46;
        v46 = 0;
        v12[2] = v15;
        HIDWORD(v49) = v11;
      }
      std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44, v10);
      if (!--v9)
      {
        v16 = (WTF::StringImpl *)v48;
        v17 = v49;
        goto LABEL_19;
      }
    }
LABEL_41:
    std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44, v10);
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v34);
LABEL_42:
    v35 = *a2;
    v36 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v37 = a2[3];
    if (v37)
    {
      if (v36)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
        v38 = *a2;
        v36 = a2[1];
        v37 = a2[3];
        goto LABEL_45;
      }
    }
    else
    {
      v36 = 0;
    }
    v38 = 0;
LABEL_45:
    *a2 = 0;
    a2[1] = 0;
    if (v37)
    {
      if (v36)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v38);
    }
    return IPC::Connection::cancelReply<Messages::WebExtensionContext::CommandsGetAll,WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
  v16 = 0;
  v17 = 0;
LABEL_19:
  v39 = v17;
  v48 = 0;
LABEL_20:
  v49 = 0;
  v43 = 1;
  WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v4);
  v42[0] = 0;
  v42[1] = 0;
  WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v19);
  v41 = 1;
  v40[0] = 0;
  v44 = v16;
  v40[1] = 0;
  v45 = v39;
  WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)&v44);
  WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v20);
  return WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v21);
}

void sub_1976B161C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  void *v12;
  va_list va;

  va_start(va, a10);
  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v10 - 48, v12);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebExtensionContext::CommandsGetAll,WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  void *v1;
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, (uint64_t)v3);
  return WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v1);
}

void sub_1976B169C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebExtensionCommandParameters>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebExtensionCommandParameters,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 24))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1976B170C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::PCM::DestinationSecretToken,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t *WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionCommandParameters>(unsigned int *a1, unint64_t a2)
{
  uint64_t *result;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (uint64_t *)WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = a1[3];
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 24 * v4);
  v7 = *result;
  *result = 0;
  *v6 = v7;
  v8 = result[1];
  result[1] = 0;
  v6[1] = v8;
  v9 = result[2];
  result[2] = 0;
  v6[2] = v9;
  a1[3] = v5;
  return result;
}

unint64_t WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl **v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1976B18E0);
    }
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 24 * *((unsigned int *)result + 3));
    v5 = 24 * a2;
    v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)(24 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebCore::LinkDecorationFilteringData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebKit::WebExtensionCommandParameters>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[2];
      v3[2] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = v3[1];
      v3[1] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtensionCommandParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebKit::WebExtensionCommandParameters>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebKit::WebExtensionAPICommands::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  _DWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  void *v10;
  objc_object *v11;
  id v12;
  _QWORD v14[3];
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)(a2 + 12);
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(unsigned int *)(a2 + 12));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (*v3)
  {
    v5 = *(_QWORD **)a2;
    v6 = *(_QWORD *)a2 + 24 * *v3;
    do
    {
      v14[0] = CFSTR("name");
      if (*v5)
        v7 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v7 = &stru_1E351F1B8;
      v15[0] = v7;
      v14[1] = CFSTR("description");
      if (v5[1])
        v8 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v8 = &stru_1E351F1B8;
      v15[1] = v8;
      v14[2] = CFSTR("shortcut");
      if (v5[2])
        v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v9 = &stru_1E351F1B8;
      v15[2] = v9;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 3);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v4, "addObject:", v10);
      v5 += 3;
    }
    while (v5 != (_QWORD *)v6);
  }
  v11 = (objc_object *)objc_msgSend(v4, "copy");

  v12 = WebKit::WebExtensionCallbackHandler::call(a1, v11);
}

void sub_1976B1B78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchCommandsCommandEvent(WTF::String const&,std::optional<WebKit::WebExtensionTabParameters> const&)::$_0,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, uint64_t a2, WebKit::WebExtensionAPINamespace *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unsigned int v9;
  WebKit::WebExtensionAPICommands *v10;
  WebKit::WebExtensionAPIEvent *v11;
  objc_object *v12;
  unsigned int *result;
  _BYTE v14[48];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 24);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0 && !*(_BYTE *)(v6 + 144))
  {
    v8 = (unsigned int *)(v6 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v14[8] = 0;
  v14[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v10 = (WebKit::WebExtensionAPICommands *)WebKit::WebExtensionAPINamespace::commands(a3);
  v11 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPICommands::onCommand(v10);
  if (**(_QWORD **)(a1 + 8))
    v12 = (objc_object *)(id)WTF::StringImpl::operator NSString *();
  else
    v12 = (objc_object *)&stru_1E351F1B8;
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v11, v12, **(objc_object ***)(a1 + 16));

  result = (unsigned int *)MEMORY[0x19AEB0CA8](v14);
  if ((v7 & 1) == 0)
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  return result;
}

void sub_1976B1D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  char v4;
  va_list va;

  va_start(va, a2);

  MEMORY[0x19AEB0CA8](va);
  if ((v4 & 1) == 0)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchCommandsChangedEvent(WTF::String const&,WTF::String const&,WTF::String const&)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPICommands *v3;
  WebKit::WebExtensionAPIEvent *v4;

  v3 = (WebKit::WebExtensionAPICommands *)WebKit::WebExtensionAPINamespace::commands(this);
  v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPICommands::onChanged(v3);
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, **(objc_object ***)(a1 + 8));
}

void WebKit::WebExtensionAPICookies::parseCookieDetails(_BYTE *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  NSString *v11;
  void *v12;
  void *v13;
  NSString *v14;
  WTF::StringImpl *v15;
  NSString *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  void *v19;
  WTF::StringImpl *v20;
  void *v21;
  NSString *v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  NSString *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  char v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  __int128 v43;
  __int128 v44;
  WTF::StringImpl *v45;
  _QWORD v46[3];
  _QWORD v47[4];

  v47[3] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  if (_MergedGlobals_107 == 1)
  {
    v9 = (void *)qword_1ECE73018;
  }
  else
  {
    v46[0] = CFSTR("name");
    v47[0] = objc_opt_class();
    v46[1] = CFSTR("storeId");
    v47[1] = objc_opt_class();
    v46[2] = CFSTR("url");
    v47[2] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v47, v46, 3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE73018 = (uint64_t)v9;
    _MergedGlobals_107 = 1;
  }
  if (!WebKit::validateDictionary(v7, CFSTR("details"), v8, v9, a4))
  {
    *a1 = 0;
    a1[64] = 0;
    goto LABEL_54;
  }
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("name"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x19AEABCC8](&v45, v10);

  if (!v45 || *((_DWORD *)v45 + 1))
  {
    WTF::URL::URL((WTF::URL *)&v42);
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("url"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v12)
    {
      if (!objc_msgSend(v12, "length"))
      {
        WebKit::toErrorString(0, CFSTR("url"), CFSTR("it must not be empty"), v14);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_21:
        *a4 = v19;
        *a1 = 0;
        a1[64] = 0;

LABEL_46:
        v33 = v42;
        v42 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v18);
          else
            *(_DWORD *)v33 -= 2;
        }
        goto LABEL_50;
      }
      MEMORY[0x19AEABCC8](&v41, v13);
      MEMORY[0x19AEABB0C](&v35, &v41, 0);
      WTF::URL::operator=((uint64_t)&v42, (WTF::StringImpl *)&v35);
      v17 = v35;
      v35 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v15);
        else
          *(_DWORD *)v17 -= 2;
      }
      v20 = v41;
      v41 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v15);
        else
          *(_DWORD *)v20 -= 2;
      }
      if ((v43 & 1) == 0)
      {
        WebKit::toErrorString(0, CFSTR("url"), CFSTR("'%@' is not a valid URL"), v16, v13);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_21;
      }
    }

    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("storeId"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v21;
    if (!v21)
    {
      v25 = 0;
      LOBYTE(v26) = 0;
      v27 = 0;
LABEL_27:

      v35 = (WTF::StringImpl *)(v26 | v25);
      v36 = v27;
      v28 = v45;
      if (v45)
        *(_DWORD *)v45 += 2;
      v37 = v28;
      v29 = v42;
      if (v42)
        *(_DWORD *)v42 += 2;
      v38 = v29;
      v39 = v43;
      v40 = v44;
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::optional<PAL::SessionID>,WTF::String,WTF::URL>::__tuple_impl((uint64_t)a1, (uint64_t)&v35);
      a1[64] = 1;
      v30 = v38;
      v38 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v18);
        else
          *(_DWORD *)v30 -= 2;
      }
      v32 = v37;
      v37 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v18);
        else
          *(_DWORD *)v32 -= 2;
      }
      goto LABEL_46;
    }
    if (!objc_msgSend(v21, "length"))
    {
      WebKit::toErrorString(0, CFSTR("storeId"), CFSTR("it must not be empty"), v22);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_21;
    }
    objc_msgSend(MEMORY[0x1E0CB3900], "scannerWithString:", v13);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v23, "scanString:intoString:", CFSTR("ephemeral-"), 0) & 1) != 0)
    {
      v24 = 0x8000000000000000;
    }
    else
    {
      if (!objc_msgSend(v23, "scanString:intoString:", CFSTR("persistent-"), 0))
        goto LABEL_40;
      v24 = 0;
    }
    v35 = 0;
    if (objc_msgSend(v23, "scanUnsignedLongLong:", &v35))
    {
      v26 = (unint64_t)v35 | v24;
      if (v26 - 1 < 0xFFFFFFFFFFFFFFFELL)
      {

        v25 = v26 & 0xFFFFFFFFFFFFFF00;
        v27 = 1;
        goto LABEL_27;
      }
    }
LABEL_40:

    WebKit::toErrorString(0, CFSTR("storeId"), CFSTR("'%@' is not a valid cookie store identifier"), v31, v13);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_21;
  }
  WebKit::toErrorString(0, CFSTR("name"), CFSTR("it must not be empty"), v11);
  *a4 = (id)objc_claimAutoreleasedReturnValue();
  *a1 = 0;
  a1[64] = 0;
LABEL_50:
  v34 = v45;
  v45 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v18);
    else
      *(_DWORD *)v34 -= 2;
  }
LABEL_54:

}

void sub_1976B2234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  WTF::StringImpl *v30;

  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, v30);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, v30);
    else
      *(_DWORD *)a25 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPICookies::get(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  void *v9;
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t *v22[3];
  _BYTE v23[16];
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _BYTE v26[72];
  _QWORD v27[2];
  IPC::Encoder *v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v29[0] = CFSTR("name");
  v29[1] = CFSTR("url");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v29, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionAPICookies::parseCookieDetails(v26, v7, v8, a4);

  if (v26[64])
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::optional<PAL::SessionID>,WTF::String,WTF::URL>::__tuple_impl((uint64_t)v23, (uint64_t)v26);
    {
      v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v10);
    }
    v22[0] = (uint64_t *)v23;
    v22[1] = (uint64_t *)&v24;
    v22[2] = (uint64_t *)&v25;
    ++*(_DWORD *)(a1 + 48);
    v11 = *a3;
    *a3 = 0;
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 1617;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v28 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<std::tuple<std::optional<PAL::SessionID> const&,WTF::String const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<PAL::SessionID> const&,WTF::String const&,WTF::URL const&>,0ul,1ul,2ul>((IPC::Encoder *)v13, v22);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = &off_1E34F4DB8;
    v14[1] = a1;
    v14[2] = v11;
    v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v27[0] = v14;
    v27[1] = v15;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v10 + 2) + 40))((_QWORD *)v10 + 2, &v28, v27, 0);
    v16 = v27[0];
    v27[0] = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v28;
    v28 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v9);
      WTF::fastFree(v18, v19);
    }
    v20 = v25;
    v25 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v24;
    v24 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26, (WTF::StringImpl *)v9);

}

void sub_1976B25FC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;
  uint64_t v21;
  uint64_t v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;

  v23 = *(_QWORD *)(v21 - 128);
  *(_QWORD *)(v21 - 128) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(IPC::Encoder **)(v21 - 112);
  *(_QWORD *)(v21 - 112) = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, a2);
    WTF::fastFree(v25, v26);
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a20, (WTF::StringImpl *)a2);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPICookies::getAll(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  BOOL v11;
  void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  BOOL v17;
  void *v18;
  BOOL v19;
  void *v20;
  void *v21;
  BOOL v22;
  void *v23;
  WebKit::WebProcess *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  IPC::Encoder *v31;
  WTF *v32;
  void *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  id v39;
  WTF::StringImpl *v40;
  char v41;
  WTF::StringImpl *v42;
  char v43;
  WTF::StringImpl *v44;
  char v45;
  int v46;
  uint64_t v47[2];
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  _BYTE v50[72];
  WTF::StringImpl *v51[2];
  const WTF::String *v52;
  _QWORD v53[4];
  _QWORD v54[5];

  v54[4] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  WebKit::WebExtensionAPICookies::parseCookieDetails(v50, v7, 0, a4);
  if (v50[64])
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::optional<PAL::SessionID>,WTF::String,WTF::URL>::__tuple_impl((uint64_t)v47, (uint64_t)v50);
    if (byte_1ECE73011 == 1)
    {
      v9 = (void *)qword_1ECE73020;
    }
    else
    {
      v53[0] = CFSTR("domain");
      v54[0] = objc_opt_class();
      v53[1] = CFSTR("path");
      v54[1] = objc_opt_class();
      v53[2] = CFSTR("secure");
      v54[2] = objc_opt_class();
      v53[3] = CFSTR("session");
      v54[3] = objc_opt_class();
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v54, v53, 4);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      qword_1ECE73020 = (uint64_t)v9;
      byte_1ECE73011 = 1;
    }
    if (WebKit::validateDictionary(v7, CFSTR("details"), 0, v9, a4))
    {
      LOBYTE(v40) = 0;
      v41 = 0;
      LOBYTE(v42) = 0;
      v43 = 0;
      LOBYTE(v44) = 0;
      v45 = 0;
      v46 = 0;
      if (v48)
        std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String&,void>((uint64_t)&v40, (WTF::StringImpl *)&v48);
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("domain"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10 == 0;

      if (!v11)
      {
        objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("domain"));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        MEMORY[0x19AEABCC8](&v52, v12);
        WebKit::normalizeDomain(v51, v52);
        if (v43)
        {
          v14 = v42;
          v42 = v51[0];
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v13);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        else
        {
          v42 = v51[0];
          v43 = 1;
        }
        v15 = v52;
        v52 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v13);
          else
            *(_DWORD *)v15 -= 2;
        }

      }
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("path"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v16 == 0;

      if (!v17)
      {
        objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("path"));
        v39 = (id)objc_claimAutoreleasedReturnValue();
        std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)&v44, &v39);

      }
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("secure"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = v18 == 0;

      if (!v19)
      {
        WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("secure"));
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        LOWORD(v46) = objc_msgSend(v20, "BOOLValue") | 0x100;

      }
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("session"));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = v21 == 0;

      if (!v22)
      {
        WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("session"));
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        HIWORD(v46) = objc_msgSend(v23, "BOOLValue") | 0x100;

      }
      {
        v24 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v24);
      }
      ++*(_DWORD *)(a1 + 48);
      v25 = *a3;
      *a3 = 0;
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
      v27 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v27 = 1618;
      *(_QWORD *)(v27 + 8) = v26;
      *(_QWORD *)(v27 + 528) = v27 + 16;
      *(_QWORD *)(v27 + 536) = v27 + 16;
      *(_OWORD *)(v27 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v27 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v27);
      v52 = (const WTF::String *)v27;
      IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v27, v47);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v27, (uint64_t *)&v49);
      IPC::ArgumentCoder<WebKit::WebExtensionCookieFilterParameters,void>::encode((IPC::Encoder *)v27, (uint64_t)&v40);
      v28 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v28 = &off_1E34F4E00;
      *((_QWORD *)v28 + 1) = a1;
      *((_QWORD *)v28 + 2) = v25;
      v29 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v51[0] = v28;
      v51[1] = v29;
      (*(void (**)(_QWORD *, const WTF::String **, WTF::StringImpl **, _QWORD))(*((_QWORD *)v24 + 2) + 40))((_QWORD *)v24 + 2, &v52, v51, 0);
      v30 = v51[0];
      v51[0] = 0;
      if (v30)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 8))(v30);
      v31 = v52;
      v52 = 0;
      if (v31)
      {
        IPC::Encoder::~Encoder(v31, v8);
        WTF::fastFree(v32, v33);
      }
      if (v45)
      {
        v34 = v44;
        v44 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v34 -= 2;
        }
      }
      if (v43)
      {
        v35 = v42;
        v42 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v35 -= 2;
        }
      }
      if (v41)
      {
        v36 = v40;
        v40 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v8);
          else
            *(_DWORD *)v36 -= 2;
        }
      }
    }
    v37 = v49;
    v49 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = v48;
    v48 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v50, (WTF::StringImpl *)v8);

}

void sub_1976B2CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, char a12, WTF::StringImpl *a13, char a14, WTF::StringImpl *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  WTF::StringImpl *v29;

  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v29);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a14 && a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, v29);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a12 && a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v29);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, v29);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, v29);
    else
      *(_DWORD *)a20 -= 2;
  }
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a26, v29);

  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::normalizeDomain(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::StringImpl **v2;
  double v4;
  double v5;
  float v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = this;
  if (!a2)
  {
    *this = 0;
    return this;
  }
  *(_DWORD *)a2 += 2;
  *this = a2;
  if (WTF::StringImpl::startsWith())
  {
    this = (WTF::StringImpl **)WTF::StringImpl::substring(a2);
    v8 = v10;
    *v2 = v10;
    if (*(_DWORD *)a2 == 2)
    {
      this = (WTF::StringImpl **)WTF::StringImpl::destroy(a2, v7);
      if (!v10)
        return this;
    }
    else
    {
      *(_DWORD *)a2 -= 2;
      if (!v10)
        return this;
    }
  }
  else
  {
    v8 = a2;
  }
  this = (WTF::StringImpl **)WTF::StringImpl::find((uint64_t)v8, 0x3Au, 0, v4, v5, v6);
  if (this != (WTF::StringImpl **)-1)
  {
    this = (WTF::StringImpl **)WTF::StringImpl::startsWith();
    if ((_DWORD)this)
    {
      this = (WTF::StringImpl **)WTF::StringImpl::endsWith();
      if ((_DWORD)this)
      {
        this = (WTF::StringImpl **)WTF::StringImpl::substring(v8);
        *v2 = v10;
        if (*(_DWORD *)v8 == 2)
          return (WTF::StringImpl **)WTF::StringImpl::destroy(v8, v9);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  return this;
}

void sub_1976B3034(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  _QWORD *v2;
  WTF::StringImpl *v3;

  *v2 = 0;
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, a2);
  else
    *(_DWORD *)v3 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  if (!*(_BYTE *)(a1 + 8))
  {
    MEMORY[0x19AEABCC8](a1, *a2);
    *(_BYTE *)(a1 + 8) = 1;
    return a1;
  }
  MEMORY[0x19AEABCC8](&v9, *a2);
  v4 = v9;
  v9 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    v6 = *(_DWORD *)v5 - 2;
    if (*(_DWORD *)v5 != 2)
    {
LABEL_6:
      *(_DWORD *)v5 = v6;
      return a1;
    }
    WTF::StringImpl::destroy(v5, v3);
    v5 = v9;
    v9 = 0;
    if (v5)
    {
      v6 = *(_DWORD *)v5 - 2;
      if (*(_DWORD *)v5 == 2)
      {
        WTF::StringImpl::destroy(v5, v7);
        return a1;
      }
      goto LABEL_6;
    }
  }
  return a1;
}

void WebKit::WebExtensionAPICookies::set(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  WTF::StringImpl *v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  const __CFString *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  void *v21;
  const __CFString *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  void *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  void *v44;
  WTF::WallTime *v45;
  double v46;
  void *v47;
  double v48;
  uint64_t v49;
  void *v50;
  void *v51;
  char v52;
  NSString *v53;
  WebKit::WebProcess *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  void *v60;
  WTF::StringImpl *v61;
  IPC::Encoder *v62;
  WTF *v63;
  void *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  char v69;
  WTF::StringImpl *v70[2];
  WTF::StringImpl *v71[2];
  __int128 v72;
  __int128 v73;
  _OWORD v74[3];
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80[5];
  _BYTE v81[72];
  WTF::StringImpl *v82[2];
  IPC::Encoder *v83;
  _QWORD v84[7];
  _QWORD v85[7];
  _QWORD v86[2];

  v86[1] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v86[0] = CFSTR("url");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v86, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionAPICookies::parseCookieDetails(v81, v7, v8, a4);

  if (!v81[64])
    goto LABEL_83;
  v10 = &v77;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::optional<PAL::SessionID>,WTF::String,WTF::URL>::__tuple_impl((uint64_t)&v77, (uint64_t)v81);
  if (byte_1ECE73012 == 1)
  {
    v11 = (void *)qword_1ECE73028;
  }
  else
  {
    v84[0] = CFSTR("domain");
    v85[0] = objc_opt_class();
    v84[1] = CFSTR("expirationDate");
    v85[1] = objc_opt_class();
    v84[2] = CFSTR("httpOnly");
    v85[2] = objc_opt_class();
    v84[3] = CFSTR("path");
    v85[3] = objc_opt_class();
    v84[4] = CFSTR("sameSite");
    v85[4] = objc_opt_class();
    v84[5] = CFSTR("secure");
    v85[5] = objc_opt_class();
    v84[6] = CFSTR("value");
    v85[6] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v85, v84, 7);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE73028 = (uint64_t)v11;
    byte_1ECE73012 = 1;
  }
  if (WebKit::validateDictionary(v7, CFSTR("details"), 0, v11, a4))
  {
    v68 = v77;
    v69 = v78;
    *(_OWORD *)v70 = 0u;
    *(_OWORD *)v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    memset(v74, 0, sizeof(v74));
    v75 = 0u;
    v76 = 0;
    WTF::URL::URL((WTF::URL *)((char *)v74 + 8));
    v75 = 0uLL;
    LOBYTE(v76) = 0;
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("name"));
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = (void *)v12;
    if (v12)
      v14 = (const __CFString *)v12;
    else
      v14 = &stru_1E351F1B8;
    MEMORY[0x19AEABCC8](v82, v14);
    v16 = v82[0];
    v82[0] = 0;
    v17 = v70[0];
    v70[0] = v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v15);
        v19 = v82[0];
        v82[0] = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v18);
          else
            *(_DWORD *)v19 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v17 -= 2;
        v82[0] = 0;
      }
    }

    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("value"));
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)v20;
    if (v20)
      v22 = (const __CFString *)v20;
    else
      v22 = &stru_1E351F1B8;
    MEMORY[0x19AEABCC8](v82, v22);
    v24 = v82[0];
    v82[0] = 0;
    v25 = v70[1];
    v70[1] = v24;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v23);
        v27 = v82[0];
        v82[0] = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v26);
          else
            *(_DWORD *)v27 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v25 -= 2;
        v82[0] = 0;
      }
    }

    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("secure"));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    if (v28)
    {
      WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("secure"));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      BYTE9(v73) = objc_msgSend(v29, "BOOLValue");

    }
    else
    {
      BYTE9(v73) = 0;
    }

    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("domain"));
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v80;
    if (v30)
    {
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("domain"));
      v10 = (uint64_t *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x19AEABCC8](v82, v10);
    }
    else
    {
      WTF::URL::host((WTF::URL *)v80);
      if ((v33 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      WebKit::normalizeDomain(v82, v67);
    }
    v34 = v82[0];
    v82[0] = 0;
    v35 = v71[0];
    v71[0] = v34;
    if (v35)
    {
      if (*(_DWORD *)v35 != 2)
      {
        *(_DWORD *)v35 -= 2;
        v82[0] = 0;
        if (!v30)
          goto LABEL_36;
LABEL_43:

        goto LABEL_44;
      }
      WTF::StringImpl::destroy(v35, v32);
      v36 = v82[0];
      v82[0] = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::destroy(v36, v32);
          if (v30)
            goto LABEL_43;
          goto LABEL_36;
        }
        *(_DWORD *)v36 -= 2;
      }
    }
    if (v30)
      goto LABEL_43;
LABEL_36:
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v32);
      else
        *(_DWORD *)v67 -= 2;
    }
LABEL_44:

    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("path"));
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    if (v37)
    {
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("path"));
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x19AEABCC8](v82, v31);
    }
    else
    {
      WTF::URL::path((WTF::URL *)v80);
      if ((v39 & 0xFF00000000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
    }
    v40 = v82[0];
    v82[0] = 0;
    v41 = v71[1];
    v71[1] = v40;
    if (v41)
    {
      if (*(_DWORD *)v41 != 2)
      {
        *(_DWORD *)v41 -= 2;
        v82[0] = 0;
        if (!v37)
          goto LABEL_57;
        goto LABEL_56;
      }
      WTF::StringImpl::destroy(v41, v38);
      v43 = v82[0];
      v82[0] = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
        {
          WTF::StringImpl::destroy(v43, v42);
          if (!v37)
          {
LABEL_57:

            WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("httpOnly"));
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            BYTE8(v73) = objc_msgSend(v44, "BOOLValue");

            WTF::WallTime::now(v45);
            *(double *)&v72 = v46 * 1000.0;
            WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("expirationDate"));
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v47, "doubleValue");
            if (v48 <= 0.0)
            {
              BYTE10(v73) = 1;
            }
            else
            {
              objc_msgSend(v47, "doubleValue");
              *((_QWORD *)&v72 + 1) = v49;
              LOBYTE(v73) = 1;
            }

            objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("sameSite"));
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            v51 = v50;
            if (v50)
            {
              if ((objc_msgSend(v50, "isEqualToString:", CFSTR("no_restriction")) & 1) != 0)
              {
                v52 = 0;
              }
              else if ((objc_msgSend(v51, "isEqualToString:", CFSTR("lax")) & 1) != 0)
              {
                v52 = 1;
              }
              else
              {
                if ((objc_msgSend(v51, "isEqualToString:", CFSTR("strict")) & 1) == 0)
                {
                  WebKit::toErrorString(0, CFSTR("sameSite"), CFSTR("it must specify either 'no_restriction', 'lax', or 'strict'"), v53);
                  *a4 = (id)objc_claimAutoreleasedReturnValue();

LABEL_74:
                  WebCore::Cookie::~Cookie((WebCore::Cookie *)v70, v60);
                  goto LABEL_75;
                }
                v52 = 2;
              }
              LOBYTE(v76) = v52;
            }

            {
              v54 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
            }
            else
            {
              v54 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
              WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v54);
            }
            ++*(_DWORD *)(a1 + 48);
            v55 = *a3;
            *a3 = 0;
            v56 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
            v57 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v57 = 1621;
            *(_QWORD *)(v57 + 8) = v56;
            *(_QWORD *)(v57 + 528) = v57 + 16;
            *(_QWORD *)(v57 + 536) = v57 + 16;
            *(_OWORD *)(v57 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v57 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v57);
            v83 = (IPC::Encoder *)v57;
            IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v57, &v77);
            IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v57, &v68);
            IPC::ArgumentCoder<WebCore::Cookie,void>::encode((IPC::Encoder *)v57, (uint64_t *)v70);
            v58 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
            *(_QWORD *)v58 = &off_1E34F4E48;
            *((_QWORD *)v58 + 1) = a1;
            *((_QWORD *)v58 + 2) = v55;
            v59 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
            v82[0] = v58;
            v82[1] = v59;
            (*(void (**)(_QWORD *, IPC::Encoder **, WTF::StringImpl **, _QWORD))(*((_QWORD *)v54 + 2) + 40))((_QWORD *)v54 + 2, &v83, v82, 0);
            v61 = v82[0];
            v82[0] = 0;
            if (v61)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v61 + 8))(v61);
            v62 = v83;
            v83 = 0;
            if (v62)
            {
              IPC::Encoder::~Encoder(v62, v60);
              WTF::fastFree(v63, v64);
            }
            goto LABEL_74;
          }
LABEL_56:

          goto LABEL_57;
        }
        *(_DWORD *)v43 -= 2;
      }
    }
    if (!v37)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_75:
  v65 = v80[0];
  v80[0] = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v9);
    else
      *(_DWORD *)v65 -= 2;
  }
  v66 = v79;
  v79 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v9);
    else
      *(_DWORD *)v66 -= 2;
  }
LABEL_83:
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v81, v9);

}

void sub_1976B395C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF::StringImpl *a31,WTF::StringImpl *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  WebCore::Cookie *v38;
  void *v39;
  void *v41;
  WTF::StringImpl *v42;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }

  WebCore::Cookie::~Cookie(v38, v41);
  if (a32)
  {
    if (*(_DWORD *)a32 == 2)
      WTF::StringImpl::destroy(a32, v42);
    else
      *(_DWORD *)a32 -= 2;
  }
  if (a31)
  {
    if (*(_DWORD *)a31 == 2)
      WTF::StringImpl::destroy(a31, v42);
    else
      *(_DWORD *)a31 -= 2;
  }
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a37, v42);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPICookies::remove(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  void *v9;
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t *v22[3];
  _BYTE v23[16];
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _BYTE v26[72];
  _QWORD v27[2];
  IPC::Encoder *v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v29[0] = CFSTR("name");
  v29[1] = CFSTR("url");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v29, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionAPICookies::parseCookieDetails(v26, v7, v8, a4);

  if (v26[64])
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::optional<PAL::SessionID>,WTF::String,WTF::URL>::__tuple_impl((uint64_t)v23, (uint64_t)v26);
    {
      v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v10);
    }
    v22[0] = (uint64_t *)v23;
    v22[1] = (uint64_t *)&v24;
    v22[2] = (uint64_t *)&v25;
    ++*(_DWORD *)(a1 + 48);
    v11 = *a3;
    *a3 = 0;
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 1620;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v28 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<std::tuple<std::optional<PAL::SessionID> const&,WTF::String const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<PAL::SessionID> const&,WTF::String const&,WTF::URL const&>,0ul,1ul,2ul>((IPC::Encoder *)v13, v22);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = &off_1E34F4E70;
    v14[1] = a1;
    v14[2] = v11;
    v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v27[0] = v14;
    v27[1] = v15;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v10 + 2) + 40))((_QWORD *)v10 + 2, &v28, v27, 0);
    v16 = v27[0];
    v27[0] = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v28;
    v28 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v9);
      WTF::fastFree(v18, v19);
    }
    v20 = v25;
    v25 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v24;
    v24 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v26, (WTF::StringImpl *)v9);

}

void sub_1976B3EC4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;
  uint64_t v21;
  uint64_t v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;

  v23 = *(_QWORD *)(v21 - 128);
  *(_QWORD *)(v21 - 128) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(IPC::Encoder **)(v21 - 112);
  *(_QWORD *)(v21 - 112) = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, a2);
    WTF::fastFree(v25, v26);
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a20, (WTF::StringImpl *)a2);

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPICookies::getAllCookieStores(uint64_t a1, _QWORD *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  WebKit::WebProcess *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = a2;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v3);
    a2 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  ++*(_DWORD *)(a1 + 48);
  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1619;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v16 = (IPC::Encoder *)v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34F4E98;
  v7[1] = a1;
  v7[2] = v4;
  v15[0] = v7;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v3 + 2) + 40))((_QWORD *)v3 + 2, &v16, v15, 0);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_1976B4164(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionAPICookies::onChanged(WebKit::WebExtensionAPICookies *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    v6 = 5;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPICookies &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 7);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPICookies &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976B4304(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContextProxy::dispatchCookiesChangedEvent(WebKit::WebExtensionContextProxy *this)
{
  WebCore *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E34F4EE0;
  v4 = (uint64_t)v2;
  WebCore::mainThreadNormalWorld(v2);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects((uint64_t)this, (uint64_t)&v4);
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1976B4380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::optional<PAL::SessionID>,WTF::String,WTF::URL>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  WTF::URL::URL(a1 + 24, (uint64_t *)(a2 + 24));
  return a1;
}

void sub_1976B43E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  v4 = *(WTF::StringImpl **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<std::tuple<std::optional<PAL::SessionID>,WTF::String,WTF::URL>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 64))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

void IPC::ArgumentCoder<std::tuple<std::optional<PAL::SessionID> const&,WTF::String const&,WTF::URL const&>,void>::encode<IPC::Encoder,std::tuple<std::optional<PAL::SessionID> const&,WTF::String const&,WTF::URL const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[2]);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGet,WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4DB8;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGet,WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4DB8;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGet,WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE v4[8];
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>>>((uint64_t)v4, a2);
    if (v7)
    {
      WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v7)
      {
        if (v6 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F4DD0[v6])(&v3, &v5);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGet,WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGet,WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976B4674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v38;

  if (a36)
  {
    v38 = *(unsigned int *)(v36 + 168);
    if ((_DWORD)v38 != -1)
      ((void (*)(char *, uint64_t *))off_1E34F4DD0[v38])(&a13, &a15);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGet,WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  char v1;
  _BYTE v2[8];
  _BYTE v3[160];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v3[152] = 0;
  v4 = 0;
  WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F4DD0[v4])(&v1, v3);
}

void sub_1976B4744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  uint64_t v34;

  if (a34 != -1)
    ((void (*)(char *, uint64_t))off_1E34F4DD0[a34])(&a12, v34);
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  void *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  _BYTE v38[136];
  char v39;
  char v40;
  __int128 v41;
  uint64_t v42[17];
  char v43;
  char v44;
  _QWORD v45[20];
  int v46;
  unsigned __int8 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v12 = 0;
    v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a2;
        v12 = a2[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_19;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v12 = v6;
    v13 = 0;
LABEL_19:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_20;
  }
  if (*v8 >= 2u)
  {
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    v16 = a2[3];
    if (v16 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v5);
    v44 = 0;
    v47 = 0;
    goto LABEL_22;
  }
  if (!*v8)
  {
    IPC::Decoder::decode<WTF::String>(a2, &v37);
    v11 = BYTE8(v37);
    if (BYTE8(v37))
    {
      v45[0] = v37;
      v11 = 1;
      v46 = 1;
    }
    else
    {
      v44 = 0;
    }
    v47 = v11;
    if (v11)
      goto LABEL_35;
    goto LABEL_22;
  }
  if (v6 <= (unint64_t)&v8[-v5 + 1])
  {
    v23 = 0;
    v24 = 0;
    *a2 = 0;
    a2[1] = 0;
    v25 = a2[3];
    if (v25)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
      v23 = 0;
      v34 = *a2;
      v35 = a2[1];
      v36 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      v24 = 0;
      if (v36)
      {
        if (v35)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 16))(v36, v34);
          v24 = *a2;
          v23 = a2[1];
        }
      }
    }
    goto LABEL_28;
  }
  a2[2] = (uint64_t)(v8 + 2);
  v9 = v8[1];
  if (v9 >= 2)
  {
    v23 = v6;
    v24 = v5;
LABEL_28:
    *a2 = 0;
    a2[1] = 0;
    v26 = a2[3];
    if (v26 && v23)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v26 + 16))(v26, v24, v23);
    goto LABEL_29;
  }
  if (v9)
  {
    IPC::Decoder::decode<WebKit::WebExtensionCookieParameters>(a2, (uint64_t)&v41);
    if (v43)
    {
      v37 = v41;
      WebCore::Cookie::Cookie((uint64_t)v38, v42);
      v39 = 1;
      v40 = 1;
      if (v43)
        goto LABEL_14;
      goto LABEL_30;
    }
LABEL_29:
    LOBYTE(v37) = 0;
    v40 = 0;
    goto LABEL_30;
  }
  LOBYTE(v41) = 0;
  v43 = 0;
  std::__optional_move_base<WebKit::WebExtensionCookieParameters,false>::__optional_move_base[abi:sn180100](&v37, (uint64_t)&v41);
  v40 = 1;
  if (v43)
LABEL_14:
    WebCore::Cookie::~Cookie((WebCore::Cookie *)v42, v10);
LABEL_30:
  if (v40
    || (v31 = *a2, v32 = a2[1], *a2 = 0, a2[1] = 0, (v33 = a2[3]) != 0)
    && v32
    && ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v31), v40))
  {
    std::__optional_move_base<WebKit::WebExtensionCookieParameters,false>::__optional_move_base[abi:sn180100](v45, (uint64_t)&v37);
    v46 = 0;
    v28 = 1;
    v47 = 1;
    if (v40 && v39)
    {
      WebCore::Cookie::~Cookie((WebCore::Cookie *)v38, v27);
      v28 = v47;
    }
    if (v28)
      goto LABEL_35;
  }
  else
  {
    v44 = 0;
    v47 = 0;
  }
LABEL_22:
  v17 = *a2;
  v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v19 = a2[3];
  if (!v19 || !v18 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v17), !v47))
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 176) = 0;
LABEL_24:
    v20 = *a2;
    v21 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v21)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
    }
    return;
  }
LABEL_35:
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  v29 = v46;
  if (v46 == -1)
  {
    *(_BYTE *)(a1 + 176) = 1;
    return;
  }
  ((void (*)(__int128 *, uint64_t, _QWORD *))off_1E34F4DE0[v46])(&v37, a1 + 8, v45);
  *(_DWORD *)(a1 + 168) = v29;
  v30 = v47;
  *(_BYTE *)(a1 + 176) = 1;
  if (v30)
  {
    if (v46 != -1)
    {
      ((void (*)(__int128 *, _QWORD *))off_1E34F4DD0[v46])(&v37, v45);
      if (!*(_BYTE *)(a1 + 176))
        goto LABEL_24;
    }
  }
}

void sub_1976B4B98(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if ((_BYTE)a30)
  {
    if (a28)
      WebCore::Cookie::~Cookie((WebCore::Cookie *)&a11, a2);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Decoder::decode<WebKit::WebExtensionCookieParameters>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<WebKit::WebExtensionCookieParameters,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 152))
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void sub_1976B4D18(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 152))
    WebCore::Cookie::~Cookie((WebCore::Cookie *)(v2 + 16), a2);
  _Unwind_Resume(exception_object);
}

_BYTE *std::__optional_move_base<WebKit::WebExtensionCookieParameters,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[152] = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    WebCore::Cookie::Cookie((uint64_t)(a1 + 16), (uint64_t *)(a2 + 16));
    a1[152] = 1;
  }
  return a1;
}

void sub_1976B4D88(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WebCore::Cookie *v3;

  if (*(_BYTE *)(v2 + 152))
    WebCore::Cookie::~Cookie(v3, a2);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionCookieParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, _BYTE *a2)
{
  if (a2[152])
    WebCore::Cookie::~Cookie((WebCore::Cookie *)(a2 + 16), a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionCookieParametersEEEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionCookieParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return std::__optional_move_base<WebKit::WebExtensionCookieParameters,false>::__optional_move_base[abi:sn180100](a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN6WebKit28WebExtensionCookieParametersEEEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSB_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPICookies::get(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 168);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)(a2 + 8))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionCookieParameters>(a2 + 8);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

id WebKit::toWebAPI<WebKit::WebExtensionCookieParameters>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 152))
    WebKit::toWebAPI((uint64_t *)a1);
  else
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  return (id)objc_claimAutoreleasedReturnValue();
}

id WebKit::toWebAPI(uint64_t *a1)
{
  uint64_t v2;
  __CFString *v3;
  void *v4;
  __CFString *v5;
  __CFString *v6;
  int v7;
  const __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  const __CFString *v14;
  void *v15;
  __CFString *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v22;
  void *v23;
  __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  const __CFString *v33;
  const __CFString *v34;
  _QWORD v35[12];

  v35[10] = *MEMORY[0x1E0C80C00];
  v25 = CFSTR("domain");
  v2 = a1[4];
  if (v2)
  {
    v3 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    v2 = a1[4];
    v24 = v3;
    v35[0] = v3;
    v26 = CFSTR("hostOnly");
    v4 = (void *)MEMORY[0x1E0CB37E8];
    if (v2)
      LODWORD(v2) = WTF::StringImpl::startsWith();
  }
  else
  {
    v24 = &stru_1E351F1B8;
    v35[0] = &stru_1E351F1B8;
    v26 = CFSTR("hostOnly");
    v4 = (void *)MEMORY[0x1E0CB37E8];
  }
  objc_msgSend(v4, "numberWithBool:", v2 ^ 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v35[1] = v23;
  v27 = CFSTR("httpOnly");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *((unsigned __int8 *)a1 + 72));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v35[2] = v22;
  v28 = CFSTR("name");
  if (a1[2])
    v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  v35[3] = v5;
  v29 = CFSTR("path");
  if (a1[5])
    v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E351F1B8;
  v35[4] = v6;
  v30 = CFSTR("sameSite");
  v7 = *((unsigned __int8 *)a1 + 144);
  v8 = CFSTR("no_restriction");
  if (v7 == 1)
    v8 = CFSTR("lax");
  if (v7 == 2)
    v9 = CFSTR("strict");
  else
    v9 = (__CFString *)v8;
  v10 = v9;
  v35[5] = v10;
  v31 = CFSTR("secure");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *((unsigned __int8 *)a1 + 73));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v35[6] = v11;
  v32 = CFSTR("session");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *((unsigned __int8 *)a1 + 74));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v35[7] = v12;
  v33 = CFSTR("storeId");
  if (!*((_BYTE *)a1 + 8))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
  }
  v13 = *a1;
  v14 = CFSTR("persistent-");
  if (*a1 < 0 && v13 != -1)
    v14 = CFSTR("ephemeral-");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%llu"), v14, v13 & 0x7FFFFFFFFFFFFFFFLL);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v35[8] = v15;
  v34 = CFSTR("value");
  if (a1[3])
    v16 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v16 = &stru_1E351F1B8;
  v35[9] = v16;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, &v25, 10);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend(v17, "mutableCopy");

  if (*((_BYTE *)a1 + 64))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)a1 + 7));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v19, CFSTR("expirationDate"));

  }
  v20 = (void *)objc_msgSend(v18, "copy");

  return v20;
}

void sub_1976B5234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGetAll,WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4E00;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGetAll,WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4E00;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGetAll,WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  _OWORD *v14;
  uint64_t v15;
  int v16;
  void *v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  int v43;
  char v44;
  _QWORD v45[2];
  int v46;
  char v47;
  __int128 v48;
  uint64_t v49[17];
  char v50;
  uint64_t v51;
  uint64_t v52;

  if (!a2 || (v4 = (char *)*a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGetAll,WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
  v5 = a2[1];
  if (v5 <= a2[2] - (uint64_t)v4)
  {
    v19 = 0;
    v20 = 0;
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        v19 = 0;
        v38 = *a2;
        v39 = a2[1];
        v40 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v20 = 0;
        if (v40 && v39)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, v38);
          v20 = (char *)*a2;
          v19 = a2[1];
        }
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    goto LABEL_30;
  }
  v6 = (unsigned __int8 *)a2[2];
  v7 = v6 + 1;
  a2[2] = (uint64_t)(v6 + 1);
  v8 = *v6;
  if (v8 >= 2)
  {
    v19 = v5;
    v20 = v4;
LABEL_30:
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22 && v19)
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v22 + 16))(v22, v20, v19);
    goto LABEL_31;
  }
  if (v8)
  {
    v9 = ((unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
    if (v5 >= v9 && v5 - v9 > 7)
    {
      v11 = (unint64_t *)&v4[v9];
      v12 = *v11;
      a2[2] = (uint64_t)(v11 + 1);
      v51 = 0;
      v52 = 0;
      if (v12 >> 1 >= 0xD79)
      {
        while (1)
        {
          IPC::Decoder::decode<WebKit::WebExtensionCookieParameters>(a2, (uint64_t)&v48);
          if (!v50)
            break;
          if (HIDWORD(v52) == (_DWORD)v52)
          {
            WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionCookieParameters>((uint64_t)&v51, (unint64_t)&v48);
          }
          else
          {
            v34 = (_OWORD *)(v51 + 152 * HIDWORD(v52));
            *v34 = v48;
            WebCore::Cookie::Cookie((uint64_t)(v34 + 1), v49);
            ++HIDWORD(v52);
          }
          if (v50)
            WebCore::Cookie::~Cookie((WebCore::Cookie *)v49, v33);
          if (!--v12)
          {
            WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v51, HIDWORD(v52));
LABEL_21:
            v12 = v51;
            v15 = v52;
            goto LABEL_26;
          }
        }
      }
      else
      {
        if (!v12)
        {
          v15 = 0;
LABEL_26:
          v41 = v15;
          v51 = 0;
          v52 = 0;
          v16 = 1;
          LOBYTE(v49[0]) = 1;
          WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v51, v4);
          v48 = 0uLL;
          v45[0] = v12;
          v45[1] = v41;
          v46 = 0;
          WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v48, v17);
          goto LABEL_50;
        }
        LODWORD(v52) = 152 * (int)v12 / 0x98u;
        v51 = WTF::fastMalloc((WTF *)(152 * v12));
        while (1)
        {
          IPC::Decoder::decode<WebKit::WebExtensionCookieParameters>(a2, (uint64_t)&v48);
          if (!v50)
            break;
          if (HIDWORD(v52) == (_DWORD)v52)
          {
            WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionCookieParameters>((uint64_t)&v51, (unint64_t)&v48);
          }
          else
          {
            v14 = (_OWORD *)(v51 + 152 * HIDWORD(v52));
            *v14 = v48;
            WebCore::Cookie::Cookie((uint64_t)(v14 + 1), v49);
            ++HIDWORD(v52);
          }
          if (v50)
            WebCore::Cookie::~Cookie((WebCore::Cookie *)v49, v4);
          if (!--v12)
            goto LABEL_21;
        }
      }
      WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v51, v13);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      v29 = a2[3];
      if (v29)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        v30 = *a2;
        v31 = a2[1];
        v32 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v32)
        {
          if (v31)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v30);
        }
      }
    }
    v35 = *a2;
    v36 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v37 = a2[3];
    if (v37 && v36)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v35);
    v16 = 0;
    LOBYTE(v45[0]) = 0;
LABEL_50:
    v18 = 0;
    v47 = v16;
    goto LABEL_51;
  }
  IPC::Decoder::decode<WTF::String>(a2, &v48);
  if (BYTE8(v48))
  {
    v45[0] = v48;
    v16 = 1;
    v46 = 1;
  }
  else
  {
    v16 = 0;
    LOBYTE(v45[0]) = 0;
  }
  v47 = v16;
  v18 = 1;
LABEL_51:
  if (v16)
  {
    v42[0] = 0;
    v43 = -1;
    ((void (*)(__int128 *, _BYTE *, _QWORD *))off_1E34F4E28[v18])(&v48, v42, v45);
    v43 = v18;
    v44 = 1;
    if (!v47)
      goto LABEL_55;
    if (v46 == -1)
      goto LABEL_55;
    ((void (*)(__int128 *, _QWORD *))off_1E34F4E18[v46])(&v48, v45);
    if (v44)
      goto LABEL_55;
    goto LABEL_33;
  }
LABEL_31:
  v23 = *a2;
  v24 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v25 = a2[3];
  if (v25 && v24)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
  v42[0] = 0;
  v44 = 0;
LABEL_33:
  v26 = *a2;
  v27 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v28 = a2[3];
  if (!v28 || !v27 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v26), !v44))
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGetAll,WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
LABEL_55:
  WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v42);
  if (v44)
  {
    if (v43 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E34F4E18[v43])(&v48, v42);
  }
}

void sub_1976B583C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,int a21,int a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a15)
  {
    if (a13 != -1)
      ((void (*)(__int16 *, char *))off_1E34F4E18[a13])(&a25, &a11);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGetAll,WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  _QWORD v1[2];
  int v2;
  char v3;

  v1[0] = 0;
  v1[1] = 0;
  v2 = 0;
  WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1)
    ((void (*)(char *, _QWORD *))off_1E34F4E18[v2])(&v3, v1);
}

void sub_1976B595C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;

  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F4E18[a11])(v11 - 17, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionCookieParameters>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _OWORD *v4;

  v3 = WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_OWORD *)(*(_QWORD *)a1 + 152 * *(unsigned int *)(a1 + 12));
  *v4 = *(_OWORD *)v3;
  WebCore::Cookie::Cookie((uint64_t)(v4 + 1), (uint64_t *)(v3 + 16));
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 152 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1AF286C)
    {
      __break(0xC471u);
      JUMPOUT(0x1976B5B38);
    }
    v3 = *(WTF **)a1;
    v4 = *(_QWORD *)a1 + 152 * *(unsigned int *)(a1 + 12);
    v5 = 152 * a2;
    v6 = WTF::fastMalloc((WTF *)(152 * a2));
    *(_DWORD *)(a1 + 8) = v5 / 0x98;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebKit::WebExtensionCookieParameters>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

void WTF::VectorMover<false,WebKit::WebExtensionCookieParameters>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a3 + 16;
    do
    {
      *(_OWORD *)(v5 - 16) = *(_OWORD *)v4;
      WebCore::Cookie::Cookie(v5, (uint64_t *)(v4 + 16));
      WebCore::Cookie::~Cookie((WebCore::Cookie *)(v4 + 16), v6);
      v4 += 152;
      v5 += 152;
    }
    while (v4 != a2);
  }
}

void WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WebCore::Cookie *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    v4 = *(unsigned int *)(a1 + 12);
    if (v4 > a2)
    {
      v5 = 152 * v4 - 152 * a2;
      v6 = (WebCore::Cookie *)(152 * a2 + *(_QWORD *)a1 + 16);
      do
      {
        WebCore::Cookie::~Cookie(v6, (void *)a2);
        v6 = (WebCore::Cookie *)(v7 + 152);
        v5 -= 152;
      }
      while (v5);
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v8 = *(WTF **)a1;
    if (a2)
    {
      if (a2 >= 0x1AF286C)
      {
        __break(0xC471u);
        return;
      }
      v9 = (WTF *)(152 * a2);
      v10 = WTF::fastMalloc(v9);
      *(_DWORD *)(a1 + 8) = v9 / 0x98;
      *(_QWORD *)a1 = v10;
      if ((WTF *)v10 != v8)
        WTF::VectorMover<false,WebKit::WebExtensionCookieParameters>::move((uint64_t)v8, (uint64_t)v8 + 152 * v4, v10);
    }
    if (v8)
    {
      if (*(WTF **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v8, (void *)a2);
    }
  }
}

_DWORD *WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(_DWORD *a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  WebCore::Cookie *v5;
  uint64_t v6;
  WTF *v7;

  v3 = a1[3];
  if (v3)
  {
    v4 = 152 * v3;
    v5 = (WebCore::Cookie *)(*(_QWORD *)a1 + 16);
    do
    {
      WebCore::Cookie::~Cookie(v5, a2);
      v5 = (WebCore::Cookie *)(v6 + 152);
      v4 -= 152;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionCookieParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, _DWORD *a2)
{
  return WTF::Vector<WebKit::WebExtensionCookieParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionCookieParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionCookieParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit28WebExtensionCookieParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPICookies::getAll(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  void *v2;
  int v5;
  __CFString *v6;
  id v7;
  void *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  WTF *v12;
  NSMutableArray *v13;
  objc_object *v14;
  objc_object *v15;
  CFTypeRef v16;
  id v17;
  _Unwind_Exception *v18;
  objc_object *v19;
  CFTypeRef cf;

  v5 = *(_DWORD *)(a2 + 16);
  if (v5)
  {
    if (v5 != 1)
    {
      v18 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v18);
    }
    if (*(_QWORD *)a2)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    v19 = (objc_object *)v6;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v6->isa);
  }
  else
  {
    v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
    v8 = v7;
    cf = v7;
    if (v7)
      CFRetain(v7);

    v9 = *(_DWORD *)(a2 + 12);
    if (v9)
    {
      v10 = *(uint64_t **)a2;
      v11 = 152 * v9;
      do
      {
        WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
        v12 = (WTF *)objc_claimAutoreleasedReturnValue();
        WebKit::toWebAPI(v10);
        v13 = (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
        WTF::addUnlessNil(v12, v13, v14);

        v10 += 19;
        v11 -= 152;
      }
      while (v11);
    }
    WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
    v15 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v16 = cf;
    v19 = v15;
    cf = 0;
    if (v16)
    {
      CFRelease(v16);
      v15 = v19;
    }
    v17 = WebKit::WebExtensionCallbackHandler::call(a1, v15);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesSet,WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4E48;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesSet,WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4E48;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesSet,WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE v4[8];
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>>>((uint64_t)v4, a2);
    if (v7)
    {
      WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v7)
      {
        if (v6 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F4DD0[v6])(&v3, &v5);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesSet,WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesSet,WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976B60D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v38;

  if (a36)
  {
    v38 = *(unsigned int *)(v36 + 168);
    if ((_DWORD)v38 != -1)
      ((void (*)(char *, uint64_t *))off_1E34F4DD0[v38])(&a13, &a15);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesSet,WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  char v1;
  _BYTE v2[8];
  _BYTE v3[160];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v3[152] = 0;
  v4 = 0;
  WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F4DD0[v4])(&v1, v3);
}

void sub_1976B61A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  uint64_t v34;

  if (a34 != -1)
    ((void (*)(char *, uint64_t))off_1E34F4DD0[a34])(&a12, v34);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPICookies::set(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 168);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)(a2 + 8))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionCookieParameters>(a2 + 8);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesRemove,WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4E70;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesRemove,WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4E70;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesRemove,WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE v4[8];
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebKit::WebExtensionCookieParameters>,WTF::String>>>((uint64_t)v4, a2);
    if (v7)
    {
      WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v4);
      if (v7)
      {
        if (v6 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F4DD0[v6])(&v3, &v5);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesRemove,WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesRemove,WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976B6438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v38;

  if (a36)
  {
    v38 = *(unsigned int *)(v36 + 168);
    if ((_DWORD)v38 != -1)
      ((void (*)(char *, uint64_t *))off_1E34F4DD0[v38])(&a13, &a15);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesRemove,WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  char v1;
  _BYTE v2[8];
  _BYTE v3[160];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v3[152] = 0;
  v4 = 0;
  WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F4DD0[v4])(&v1, v3);
}

void sub_1976B6508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  uint64_t v34;

  if (a34 != -1)
    ((void (*)(char *, uint64_t))off_1E34F4DD0[a34])(&a12, v34);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPICookies::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  int v3;
  __CFString *v4;
  id v5;
  _Unwind_Exception *v6;
  id v7;
  objc_object *v8;

  v3 = *(_DWORD *)(a2 + 168);
  if (v3)
  {
    if (v3 != 1)
    {
      v6 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v6);
    }
    if (*(_QWORD *)(a2 + 8))
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v8 = (objc_object *)v4;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v4->isa);
  }
  else
  {
    WebKit::toWebAPI<WebKit::WebExtensionCookieParameters>(a2 + 8);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(a1, v8);
  }

}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGetAllCookieStores,WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4E98;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGetAllCookieStores,WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4E98;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::CookiesGetAllCookieStores,WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unint64_t v9;
  int *v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  WTF *v28;
  uint64_t v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  WTF *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  char v61;
  WTF *v62;
  int v63;
  char v64;
  WTF *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  if (!a2 || (v4 = *a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGetAllCookieStores,WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v42 = 0;
    v43 = 0;
    *a2 = 0;
    a2[1] = 0;
    v44 = a2[3];
    if (v44)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
        v42 = 0;
        v56 = *a2;
        v57 = a2[1];
        v58 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v43 = 0;
        if (v58 && v57)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 16))(v58, v56);
          v43 = *a2;
          v42 = a2[1];
        }
      }
      else
      {
        v42 = 0;
        v43 = 0;
      }
    }
    goto LABEL_74;
  }
  v6 = (unsigned __int8 *)a2[2];
  v7 = v6 + 1;
  a2[2] = (uint64_t)(v6 + 1);
  v8 = *v6;
  if (v8 >= 2)
  {
    v42 = v5;
    v43 = v4;
LABEL_74:
    *a2 = 0;
    a2[1] = 0;
    v45 = a2[3];
    if (v45 && v42)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v43, v42);
LABEL_75:
    v46 = *a2;
    v47 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v48 = a2[3];
    if (v48 && v47)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
    LOBYTE(v59) = 0;
    v61 = 0;
LABEL_77:
    v49 = *a2;
    v50 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v51 = a2[3];
    if (!v51 || !v50 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, v49), !v61))
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGetAllCookieStores,WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
      return;
    }
    goto LABEL_67;
  }
  if (v8)
  {
    v9 = ((unint64_t)(v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v4;
    if (v5 < v9 || v5 - v9 <= 3)
    {
      *a2 = 0;
      a2[1] = 0;
      v52 = a2[3];
      if (v52)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
        v53 = *a2;
        v54 = a2[1];
        v55 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v55)
        {
          if (v54)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, v53);
        }
      }
      goto LABEL_56;
    }
    v11 = (int *)(v4 + v9);
    v13 = *v11;
    v12 = *v11;
    a2[2] = (uint64_t)(v11 + 1);
    v68 = 0;
    if (!v13)
    {
      v40 = 0;
LABEL_59:
      v62 = (WTF *)v40;
      v63 = 0;
      v36 = 1;
      goto LABEL_60;
    }
    v14 = 0;
    while (1)
    {
      v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(a2);
      if (!(_BYTE)v16
        || (v17 = v15,
            IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v16, (uint64_t)&v65), !v67))
      {
LABEL_54:
        if (v68)
          WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::deallocateTable(v68, v16);
LABEL_56:
        v37 = *a2;
        v38 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        v39 = a2[3];
        if (v39 && v38)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v37);
        v36 = 0;
LABEL_58:
        LOBYTE(v62) = 0;
        goto LABEL_60;
      }
      if (v17 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v31 = 0;
LABEL_41:
        v35 = v65;
        if (v65)
        {
          v65 = 0;
          LODWORD(v66) = 0;
          WTF::fastFree(v35, v16);
        }
        goto LABEL_43;
      }
      v18 = v68;
      if (v68
        || (WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(&v68, 0), (v18 = v68) != 0))
      {
        v19 = *(_DWORD *)(v18 - 8);
      }
      else
      {
        v19 = 0;
      }
      v20 = (v17 + ~(v17 << 32)) ^ ((v17 + ~(v17 << 32)) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = v18 + 24 * v23;
      v25 = *(_QWORD *)v24;
      if (*(_QWORD *)v24)
      {
        v26 = 0;
        v27 = 1;
        do
        {
          if (v25 == v17)
          {
            v31 = 0;
            goto LABEL_40;
          }
          if (v25 == -1)
            v26 = (_QWORD *)v24;
          v23 = (v23 + v27) & v19;
          v24 = v18 + 24 * v23;
          v25 = *(_QWORD *)v24;
          ++v27;
        }
        while (*(_QWORD *)v24);
        if (v26)
        {
          *v26 = 0;
          v26[1] = 0;
          v26[2] = 0;
          --*(_DWORD *)(v18 - 16);
          v24 = (uint64_t)v26;
        }
      }
      *(_QWORD *)v24 = v17;
      v28 = *(WTF **)(v24 + 8);
      if (v28)
      {
        *(_QWORD *)(v24 + 8) = 0;
        *(_DWORD *)(v24 + 16) = 0;
        WTF::fastFree(v28, v16);
      }
      *(_QWORD *)(v24 + 8) = v65;
      v29 = v66;
      v65 = 0;
      v66 = 0;
      *(_QWORD *)(v24 + 16) = v29;
      v30 = v68 ? *(_DWORD *)(v68 - 12) + 1 : 1;
      *(_DWORD *)(v68 - 12) = v30;
      v32 = v68 ? *(_DWORD *)(v68 - 12) : 0;
      v33 = (*(_DWORD *)(v68 - 16) + v32);
      v34 = *(unsigned int *)(v68 - 4);
      if (v34 > 0x400)
        break;
      if (3 * v34 <= 4 * v33)
        goto LABEL_38;
LABEL_39:
      v31 = 1;
LABEL_40:
      if (v67)
        goto LABEL_41;
LABEL_43:
      if ((v31 & 1) == 0)
        goto LABEL_54;
      if (++v14 == v12)
      {
        v40 = v68;
        goto LABEL_59;
      }
    }
    if (v34 > 2 * v33)
      goto LABEL_39;
LABEL_38:
    WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(&v68, v24);
    goto LABEL_39;
  }
  IPC::Decoder::decode<WTF::String>(a2, &v65);
  v36 = v66;
  if (!(_BYTE)v66)
    goto LABEL_58;
  v62 = v65;
  v36 = 1;
  v63 = 1;
LABEL_60:
  v64 = v36;
  if (!v36)
    goto LABEL_75;
  LOBYTE(v59) = 0;
  v60 = -1;
  v41 = v63;
  if (v63 == -1)
  {
    v61 = 1;
    goto LABEL_67;
  }
  ((void (*)(WTF **, int *, WTF **))off_1E34F4EC0[v63])(&v65, &v59, &v62);
  v60 = v41;
  v61 = 1;
  if (v64)
  {
    if (v63 != -1)
    {
      ((void (*)(WTF **, WTF **))off_1E34F4EB0[v63])(&v65, &v62);
      if (!v61)
        goto LABEL_77;
    }
  }
LABEL_67:
  WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), &v59);
  if (v61)
  {
    if (v60 != -1)
      ((void (*)(WTF **, int *))off_1E34F4EB0[v60])(&v65, &v59);
  }
}

void sub_1976B6BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, int a18, int a19, char a20,WTF *a21,int a22,int a23,char a24,uint64_t a25)
{
  if (a12)
  {
    if (a10 != -1)
      ((void (*)(WTF **, uint64_t *))off_1E34F4EB0[a10])(&a21, &a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::CookiesGetAllCookieStores,WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = 0;
  v2 = 0;
  WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, &v1);
  if (v2 != -1)
    ((void (*)(char *, uint64_t *))off_1E34F4EB0[v2])(&v3, &v1);
}

void sub_1976B6CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F4EB0[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

WTF *IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  WTF *result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_1976B6D64(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  if (*(_BYTE *)(v2 + 16))
  {
    v4 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *IPC::VectorArgumentCoder<false,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  int v13;
  WTF *v14;
  int v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  WTF *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  WTF *v26;
  uint64_t v27;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v20 = 0;
    v21 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v6, v5);
        v21 = *a1;
        v20 = a1[1];
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
    }
    goto LABEL_29;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v6)
  {
    v20 = v5;
    v21 = 0;
LABEL_29:
    *a1 = 0;
    a1[1] = 0;
    result = (WTF *)a1[3];
    if (result)
    {
      if (v20)
        result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v21);
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v10 = *v9;
  v26 = 0;
  v27 = 0;
  if (v10 >= 0x20000)
  {
    while (1)
    {
      v18 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
      v24 = v18;
      v25 = a2;
      if (!(_BYTE)a2)
        break;
      if (HIDWORD(v27) == (_DWORD)v27)
      {
        v16 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, HIDWORD(v27) + 1, (unint64_t)&v24);
        *((_QWORD *)v26 + HIDWORD(v27)) = *v16;
      }
      else
      {
        *((_QWORD *)v26 + HIDWORD(v27)) = v18;
      }
      v17 = ++HIDWORD(v27);
      if (!--v10)
      {
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v26, v17);
        *(_QWORD *)a3 = v26;
        v23 = v27;
        v26 = 0;
        v27 = 0;
        *(_QWORD *)(a3 + 8) = v23;
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (!v10)
    {
      v13 = 0;
      v15 = 0;
      v14 = 0;
LABEL_17:
      v26 = 0;
      *(_QWORD *)a3 = v14;
      HIDWORD(v27) = 0;
      *(_DWORD *)(a3 + 8) = v15;
      *(_DWORD *)(a3 + 12) = v13;
LABEL_18:
      *(_BYTE *)(a3 + 16) = 1;
      goto LABEL_25;
    }
    LODWORD(v27) = v10;
    v26 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
    while (1)
    {
      v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
      v24 = v11;
      v25 = a2;
      if (!(_BYTE)a2)
        break;
      if (HIDWORD(v27) == (_DWORD)v27)
      {
        v12 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, HIDWORD(v27) + 1, (unint64_t)&v24);
        *((_QWORD *)v26 + HIDWORD(v27)) = *v12;
      }
      else
      {
        *((_QWORD *)v26 + HIDWORD(v27)) = v11;
      }
      v13 = ++HIDWORD(v27);
      if (!--v10)
      {
        v14 = v26;
        v15 = v27;
        goto LABEL_17;
      }
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
LABEL_25:
  result = v26;
  if (v26)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void sub_1976B6FB8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  _QWORD *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v14 = v7;
    v15 = v6;
    do
    {
      if (*(_QWORD *)v15 != -1)
      {
        if (*(_QWORD *)v15)
        {
          v17 = WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::lookupForReinsert(a1, (_QWORD *)v15);
          v18 = (WTF *)v17[1];
          if (v18)
          {
            v17[1] = 0;
            *((_DWORD *)v17 + 4) = 0;
            WTF::fastFree(v18, v10);
          }
          v19 = *(_QWORD *)v15;
          v17[1] = 0;
          v17[2] = 0;
          v20 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          *v17 = v19;
          v17[1] = v20;
          LODWORD(v19) = *(_DWORD *)(v15 + 16);
          *(_DWORD *)(v15 + 16) = 0;
          *((_DWORD *)v17 + 4) = v19;
          LODWORD(v19) = *(_DWORD *)(v15 + 20);
          *(_DWORD *)(v15 + 20) = 0;
          *((_DWORD *)v17 + 5) = v19;
          v21 = *(WTF **)(v15 + 8);
          if (v21)
          {
            *(_QWORD *)(v15 + 8) = 0;
            *(_DWORD *)(v15 + 16) = 0;
            WTF::fastFree(v21, v10);
          }
          if (v15 == a3)
            v13 = v17;
        }
        else
        {
          v16 = *(WTF **)(v15 + 8);
          if (v16)
          {
            *(_QWORD *)(v15 + 8) = 0;
            *(_DWORD *)(v15 + 16) = 0;
            WTF::fastFree(v16, v10);
          }
        }
      }
      v15 += 24;
      --v14;
    }
    while (v14);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

_QWORD *WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::lookupForReinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  _QWORD *result;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = *a2 + ~(*a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = 1;
  do
  {
    result = (_QWORD *)(v2 + 24 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (*result);
  return result;
}

uint64_t WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 8;
    do
    {
      if (*(_QWORD *)(v4 - 8) != -1)
      {
        v5 = *(WTF **)v4;
        if (*(_QWORD *)v4)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
          WTF::fastFree(v5, a2);
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7HashMapIN3PAL9SessionIDENS8_6VectorINS8_23ObjectIdentifierGenericIN6WebKit29WebExtensionTabIdentifierTypeENS8_38ObjectIdentifierMainThreadAccessTraitsIyEEyEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENSO_ISL_EENS8_15HashTableTraitsEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (*a2)
    return WTF::HashTable<PAL::SessionID,WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<PAL::SessionID>,WTF::HashMap<PAL::SessionID,WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<PAL::SessionID>>::deallocateTable(result, a2);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7HashMapIN3PAL9SessionIDENS8_6VectorINS8_23ObjectIdentifierGenericIN6WebKit29WebExtensionTabIdentifierTypeENS8_38ObjectIdentifierMainThreadAccessTraitsIyEEyEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENSO_ISL_EENS8_15HashTableTraitsEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSS_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7HashMapIN3PAL9SessionIDENS8_6VectorINS8_23ObjectIdentifierGenericIN6WebKit29WebExtensionTabIdentifierTypeENS8_38ObjectIdentifierMainThreadAccessTraitsIyEEyEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENSO_ISL_EENS8_15HashTableTraitsEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJSS_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  *a2 = 0;
  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF7HashMapIN3PAL9SessionIDENS8_6VectorINS8_23ObjectIdentifierGenericIN6WebKit29WebExtensionTabIdentifierTypeENS8_38ObjectIdentifierMainThreadAccessTraitsIyEEyEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_11DefaultHashISB_EENS8_10HashTraitsISB_EENSO_ISL_EENS8_15HashTableTraitsEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJSS_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPICookies::getAllCookieStores(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, _DWORD *a2)
{
  int v3;
  __CFString *v4;
  WebKit::WebExtensionCallbackHandler *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  WTF *v19;
  double v20;
  NSMutableArray *v21;
  objc_object *v22;
  void *v23;
  CFTypeRef v24;
  uint64_t v25;
  const __CFString *v26;
  void *v27;
  _BOOL8 v28;
  void *v29;
  void *v30;
  uint64_t *v31;
  objc_object *v32;
  id v33;
  _Unwind_Exception *v34;
  __CFString *v36;
  CFTypeRef cf;
  _QWORD v38[3];
  _QWORD v39[4];

  v39[3] = *MEMORY[0x1E0C80C00];
  v3 = a2[2];
  if (v3)
  {
    if (v3 != 1)
    {
      v34 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v34);
    }
    if (*(_QWORD *)a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v5 = a1;
    v36 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(v5, &v4->isa);

    return;
  }
  if (*(_QWORD *)a2)
    v6 = *(unsigned int *)(*(_QWORD *)a2 - 12);
  else
    v6 = 0;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v9 = *(unsigned int *)(v8 - 4);
    v10 = (uint64_t *)(v8 + 24 * v9);
    if (*(_DWORD *)(v8 - 12))
    {
      v11 = *(uint64_t **)a2;
      if ((_DWORD)v9)
      {
        v12 = 24 * v9;
        v11 = *(uint64_t **)a2;
        while ((unint64_t)(*v11 + 1) <= 1)
        {
          v11 += 3;
          v12 -= 24;
          if (!v12)
          {
            v11 = v10;
            goto LABEL_19;
          }
        }
      }
      goto LABEL_19;
    }
    v11 = (uint64_t *)(v8 + 24 * v9);
  }
  else
  {
    v11 = 0;
    LODWORD(v9) = 0;
  }
  v10 = (uint64_t *)(v8 + 24 * v9);
LABEL_19:
  if (v8)
    v13 = (uint64_t *)(v8 + 24 * *(unsigned int *)(v8 - 4));
  else
    v13 = 0;
  while (v11 != v13)
  {
    v14 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)v11 + 5));
    v15 = v14;
    cf = v14;
    if (v14)
      CFRetain(v14);

    v16 = *((unsigned int *)v11 + 5);
    if ((_DWORD)v16)
    {
      v17 = (unint64_t *)v11[1];
      v18 = 8 * v16;
      do
      {
        WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
        v19 = (WTF *)objc_claimAutoreleasedReturnValue();
        v20 = (double)*v17;
        if (*v17 == -2)
          v20 = -1.0;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v20);
        v21 = (NSMutableArray *)(id)objc_claimAutoreleasedReturnValue();
        WTF::addUnlessNil(v19, v21, v22);

        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
    WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = cf;
    cf = 0;
    if (v24)
      CFRelease(v24);
    v38[0] = CFSTR("id");
    v25 = *v11;
    v26 = CFSTR("persistent-");
    if (*v11 < 0 && v25 != -1)
      v26 = CFSTR("ephemeral-");
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%llu"), v26, v25 & 0x7FFFFFFFFFFFFFFFLL);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v39[0] = v27;
    v39[1] = v23;
    v38[1] = CFSTR("tabIds");
    v38[2] = CFSTR("incognito");
    v28 = *v11 < 0 && *v11 != -1;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v39[2] = v29;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 3);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v30);

    v31 = v11 + 3;
    v11 = v10;
    if (v31 != v10)
    {
      v11 = v31;
      while ((unint64_t)(*v11 + 1) <= 1)
      {
        v11 += 3;
        if (v11 == v10)
        {
          v11 = v10;
          break;
        }
      }
    }
  }
  v32 = (objc_object *)objc_msgSend(v7, "copy");

  v33 = WebKit::WebExtensionCallbackHandler::call(a1, v32);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchCookiesChangedEvent(void)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(int a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPICookies *v2;
  unsigned int *v3;

  v2 = (WebKit::WebExtensionAPICookies *)WebKit::WebExtensionAPINamespace::cookies(this);
  v3 = (unsigned int *)WebKit::WebExtensionAPICookies::onChanged(v2);
  return WebKit::WebExtensionAPIEvent::invokeListeners(v3);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  WebKit::WebProcess *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _BYTE v27[16];
  _BYTE v28[16];
  _QWORD v29[2];
  IPC::Encoder *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = &_MergedGlobals_106;
  if ((_MergedGlobals_108 & 1) == 0)
  {
    v33[0] = CFSTR("disableRulesetIds");
    v32 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v32, 1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v33[1] = CFSTR("enableRulesetIds");
    v34[0] = v25;
    v31 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v31, 1);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v34[1] = v26;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, v33, 2);
    qword_1ECE73038 = objc_claimAutoreleasedReturnValue();

    _MergedGlobals_108 = 1;
    v8 = &_MergedGlobals_106;
  }
  if (WebKit::validateDictionary(v7, CFSTR("options"), 0, *((void **)v8 + 7), a4))
  {
    v9 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v7, (uint64_t)CFSTR("enableRulesetIds"), 1, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::makeVector<WTF::String>(v10, (uint64_t)v28);

    v11 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v7, (uint64_t)CFSTR("disableRulesetIds"), 1, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::makeVector<WTF::String>(v12, (uint64_t)v27);

    {
      v13 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v13);
    }
    ++*(_DWORD *)(a1 + 48);
    v14 = *a3;
    *a3 = 0;
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v16 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v16 = 1629;
    *(_QWORD *)(v16 + 8) = v15;
    *(_QWORD *)(v16 + 528) = v16 + 16;
    *(_QWORD *)(v16 + 536) = v16 + 16;
    *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v16 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
    v30 = (IPC::Encoder *)v16;
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v16, (uint64_t)v28);
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v16, (uint64_t)v27);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v17 = &off_1E34F4F08;
    v17[1] = a1;
    v17[2] = v14;
    v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v29[0] = v17;
    v29[1] = v18;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v13 + 2) + 40))((_QWORD *)v13 + 2, &v30, v29, 0);
    v20 = v29[0];
    v29[0] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v30;
    v30 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v19);
      WTF::fastFree(v22, v23);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v19);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v24);
  }

}

void sub_1976B7A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, IPC::Encoder *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(uint64_t a1, _QWORD *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  WebKit::WebProcess *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = a2;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v3);
    a2 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  ++*(_DWORD *)(a1 + 48);
  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1624;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v16 = (IPC::Encoder *)v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34F4F30;
  v7[1] = a1;
  v7[2] = v4;
  v15[0] = v7;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v3 + 2) + 40))((_QWORD *)v3 + 2, &v16, v15, 0);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_1976B7CB8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _WKWebExtensionDeclarativeNetRequestRule *v18;
  _WKWebExtensionDeclarativeNetRequestRule *v19;
  NSString *v20;
  void *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  WTF *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t i;
  WTF::StringImpl *v32;
  _QWORD *v33;
  WebKit::WebProcess *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  void *v40;
  WTF::StringImpl *v41;
  IPC::Encoder *v42;
  WTF *v43;
  void *v44;
  WTF::StringImpl *v45;
  void *v46;
  void *v47;
  uint64_t *v48;
  uint64_t v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  WTF *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  id v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  WTF::StringImpl *v63[2];
  IPC::Encoder *v64;
  _BYTE v65[128];
  _BYTE v66[128];
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  _QWORD v70[4];

  v70[2] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  if ((byte_1ECE73031 & 1) == 0)
  {
    v69[0] = CFSTR("addRules");
    v68 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v68, 1);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v69[1] = CFSTR("removeRuleIds");
    v70[0] = v46;
    v67 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v67, 1);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v70[1] = v47;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v70, v69, 2);
    qword_1ECE73040 = objc_claimAutoreleasedReturnValue();

    byte_1ECE73031 = 1;
  }
  if (WebKit::validateDictionary(v7, CFSTR("options"), 0, (void *)qword_1ECE73040, a4))
  {
    v50 = v7;
    v8 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v7, (uint64_t)CFSTR("addRules"), 0, v8);
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v9 = (id)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v59, v66, 16);
    v48 = a3;
    v49 = a1;
    if (v10)
    {
      v11 = 0;
      v12 = 0;
      v13 = *(_QWORD *)v60;
      while (2)
      {
        v14 = 0;
        v15 = v10 + v11;
        v16 = v12;
        do
        {
          if (*(_QWORD *)v60 != v13)
            objc_enumerationMutation(v9);
          v17 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v14);
          v18 = [_WKWebExtensionDeclarativeNetRequestRule alloc];
          v58 = v16;
          v19 = -[_WKWebExtensionDeclarativeNetRequestRule initWithDictionary:errorString:](v18, "initWithDictionary:errorString:", v17, &v58);
          v12 = v58;

          if (!v19)
          {
            WebKit::toErrorString(0, CFSTR("addRules"), CFSTR("an error with rule at index %lu: %@"), v20, v11 + v14, v12);
            *a4 = (id)objc_claimAutoreleasedReturnValue();

            goto LABEL_44;
          }
          ++v14;
          v16 = v12;
        }
        while (v10 != v14);
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v59, v66, 16);
        v11 = v15;
        if (v10)
          continue;
        break;
      }
    }
    else
    {
      v12 = 0;
    }

    v57 = 0;
    if (v9)
    {
      WebKit::encodeJSONString(v9, 1, 0);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x19AEABCC8](v63, v21);
      v22 = v63[0];
      v63[0] = 0;
      v57 = v22;

    }
    v55 = 0;
    v56 = 0;
    v23 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v50, (uint64_t)CFSTR("removeRuleIds"), 0, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = v24;
    if (v24)
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v26 = v24;
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v51, v65, 16);
      if (v27)
      {
        v28 = 0;
        v29 = 0;
        v30 = *(_QWORD *)v52;
        do
        {
          for (i = 0; i != v27; ++i)
          {
            if (*(_QWORD *)v52 != v30)
              objc_enumerationMutation(v26);
            objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * i), "doubleValue");
            v63[0] = v32;
            if (v29 == (_DWORD)v56)
            {
              v33 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v55, v29 + 1, (unint64_t)v63);
              v29 = HIDWORD(v56);
              v28 = v55;
              *((_QWORD *)v55 + HIDWORD(v56)) = *v33;
            }
            else
            {
              *((_QWORD *)v28 + v29) = v32;
            }
            HIDWORD(v56) = ++v29;
          }
          v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v51, v65, 16);
        }
        while (v27);
      }
      else
      {
        v29 = 0;
        v28 = 0;
      }

    }
    else
    {
      v29 = 0;
      v28 = 0;
    }

    {
      v34 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v34 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v34);
    }
    ++*(_DWORD *)(v49 + 48);
    v35 = *v48;
    *v48 = 0;
    v36 = *(_QWORD *)(*(_QWORD *)(v49 + 24) + 24);
    v37 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v37 = 1628;
    *(_QWORD *)(v37 + 8) = v36;
    *(_QWORD *)(v37 + 528) = v37 + 16;
    *(_QWORD *)(v37 + 536) = v37 + 16;
    *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v37 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
    v64 = (IPC::Encoder *)v37;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v37, (uint64_t *)&v57);
    IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v37, v28, v29);
    v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v38 = &off_1E34F4F58;
    *((_QWORD *)v38 + 1) = v49;
    *((_QWORD *)v38 + 2) = v35;
    v39 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v63[0] = v38;
    v63[1] = v39;
    (*(void (**)(_QWORD *, IPC::Encoder **, WTF::StringImpl **, _QWORD))(*((_QWORD *)v34 + 2) + 40))((_QWORD *)v34 + 2, &v64, v63, 0);
    v41 = v63[0];
    v63[0] = 0;
    if (v41)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v41 + 8))(v41);
    v42 = v64;
    v64 = 0;
    if (v42)
    {
      IPC::Encoder::~Encoder(v42, v40);
      WTF::fastFree(v43, v44);
    }
    if (v55)
      WTF::fastFree(v55, v40);
    v45 = v57;
    v57 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v40);
      else
        *(_DWORD *)v45 -= 2;
    }
LABEL_44:

    v7 = v50;
  }

}

void sub_1976B8328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,IPC::Encoder *a38)
{
  void *v38;
  void *v39;

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(uint64_t a1, _QWORD *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  WebKit::WebProcess *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = a2;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v3);
    a2 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  ++*(_DWORD *)(a1 + 48);
  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1623;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v16 = (IPC::Encoder *)v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34F4F80;
  v7[1] = a1;
  v7[2] = v4;
  v15[0] = v7;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v3 + 2) + 40))((_QWORD *)v3 + 2, &v16, v15, 0);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_1976B8610(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _WKWebExtensionDeclarativeNetRequestRule *v18;
  _WKWebExtensionDeclarativeNetRequestRule *v19;
  NSString *v20;
  void *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  WTF *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t i;
  WTF::StringImpl *v32;
  _QWORD *v33;
  WebKit::WebProcess *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  void *v40;
  WTF::StringImpl *v41;
  IPC::Encoder *v42;
  WTF *v43;
  void *v44;
  WTF::StringImpl *v45;
  void *v46;
  void *v47;
  uint64_t *v48;
  uint64_t v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  WTF *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  id v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  WTF::StringImpl *v63[2];
  IPC::Encoder *v64;
  _BYTE v65[128];
  _BYTE v66[128];
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  _QWORD v70[4];

  v70[2] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  if ((byte_1ECE73032 & 1) == 0)
  {
    v69[0] = CFSTR("addRules");
    v68 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v68, 1);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v69[1] = CFSTR("removeRuleIds");
    v70[0] = v46;
    v67 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v67, 1);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v70[1] = v47;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v70, v69, 2);
    qword_1ECE73048 = objc_claimAutoreleasedReturnValue();

    byte_1ECE73032 = 1;
  }
  if (WebKit::validateDictionary(v7, CFSTR("options"), 0, (void *)qword_1ECE73048, a4))
  {
    v50 = v7;
    v8 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v7, (uint64_t)CFSTR("addRules"), 0, v8);
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v9 = (id)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v59, v66, 16);
    v48 = a3;
    v49 = a1;
    if (v10)
    {
      v11 = 0;
      v12 = 0;
      v13 = *(_QWORD *)v60;
      while (2)
      {
        v14 = 0;
        v15 = v10 + v11;
        v16 = v12;
        do
        {
          if (*(_QWORD *)v60 != v13)
            objc_enumerationMutation(v9);
          v17 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v14);
          v18 = [_WKWebExtensionDeclarativeNetRequestRule alloc];
          v58 = v16;
          v19 = -[_WKWebExtensionDeclarativeNetRequestRule initWithDictionary:errorString:](v18, "initWithDictionary:errorString:", v17, &v58);
          v12 = v58;

          if (!v19)
          {
            WebKit::toErrorString(0, CFSTR("addRules"), CFSTR("an error with rule at index %lu: %@"), v20, v11 + v14, v12);
            *a4 = (id)objc_claimAutoreleasedReturnValue();

            goto LABEL_44;
          }
          ++v14;
          v16 = v12;
        }
        while (v10 != v14);
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v59, v66, 16);
        v11 = v15;
        if (v10)
          continue;
        break;
      }
    }
    else
    {
      v12 = 0;
    }

    v57 = 0;
    if (v9)
    {
      WebKit::encodeJSONString(v9, 1, 0);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x19AEABCC8](v63, v21);
      v22 = v63[0];
      v63[0] = 0;
      v57 = v22;

    }
    v55 = 0;
    v56 = 0;
    v23 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v50, (uint64_t)CFSTR("removeRuleIds"), 0, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = v24;
    if (v24)
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v26 = v24;
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v51, v65, 16);
      if (v27)
      {
        v28 = 0;
        v29 = 0;
        v30 = *(_QWORD *)v52;
        do
        {
          for (i = 0; i != v27; ++i)
          {
            if (*(_QWORD *)v52 != v30)
              objc_enumerationMutation(v26);
            objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * i), "doubleValue");
            v63[0] = v32;
            if (v29 == (_DWORD)v56)
            {
              v33 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::FilterEffect,WTF::RawPtrTraits<WebCore::FilterEffect>,WTF::DefaultRefDerefTraits<WebCore::FilterEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v55, v29 + 1, (unint64_t)v63);
              v29 = HIDWORD(v56);
              v28 = v55;
              *((_QWORD *)v55 + HIDWORD(v56)) = *v33;
            }
            else
            {
              *((_QWORD *)v28 + v29) = v32;
            }
            HIDWORD(v56) = ++v29;
          }
          v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v51, v65, 16);
        }
        while (v27);
      }
      else
      {
        v29 = 0;
        v28 = 0;
      }

    }
    else
    {
      v29 = 0;
      v28 = 0;
    }

    {
      v34 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v34 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v34);
    }
    ++*(_DWORD *)(v49 + 48);
    v35 = *v48;
    *v48 = 0;
    v36 = *(_QWORD *)(*(_QWORD *)(v49 + 24) + 24);
    v37 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v37 = 1630;
    *(_QWORD *)(v37 + 8) = v36;
    *(_QWORD *)(v37 + 528) = v37 + 16;
    *(_QWORD *)(v37 + 536) = v37 + 16;
    *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v37 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
    v64 = (IPC::Encoder *)v37;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v37, (uint64_t *)&v57);
    IPC::ArgumentCoder<std::span<double const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v37, v28, v29);
    v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v38 = &off_1E34F4FB8;
    *((_QWORD *)v38 + 1) = v49;
    *((_QWORD *)v38 + 2) = v35;
    v39 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v63[0] = v38;
    v63[1] = v39;
    (*(void (**)(_QWORD *, IPC::Encoder **, WTF::StringImpl **, _QWORD))(*((_QWORD *)v34 + 2) + 40))((_QWORD *)v34 + 2, &v64, v63, 0);
    v41 = v63[0];
    v63[0] = 0;
    if (v41)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v41 + 8))(v41);
    v42 = v64;
    v64 = 0;
    if (v42)
    {
      IPC::Encoder::~Encoder(v42, v40);
      WTF::fastFree(v43, v44);
    }
    if (v55)
      WTF::fastFree(v55, v40);
    v45 = v57;
    v57 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v40);
      else
        *(_DWORD *)v45 -= 2;
    }
LABEL_44:

    v7 = v50;
  }

}

void sub_1976B8C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,IPC::Encoder *a38)
{
  void *v38;
  void *v39;

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(uint64_t a1, _QWORD *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  WebKit::WebProcess *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = a2;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v3);
    a2 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  ++*(_DWORD *)(a1 + 48);
  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1626;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v16 = (IPC::Encoder *)v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34F4FE0;
  v7[1] = a1;
  v7[2] = v4;
  v15[0] = v7;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v3 + 2) + 40))((_QWORD *)v3 + 2, &v16, v15, 0);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_1976B8F68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  WebKit::WebExtensionContextProxy *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WebKit::WebExtensionContextProxy *v12;
  WTF::StringImpl *v13;
  NSString *v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  NSString *v21;
  long double v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  void *v28;
  void *v29;
  double v30;
  WebKit::WebProcess *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  long double v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  uint64_t v44;
  double v45;
  char v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  long double __y[2];
  IPC::Encoder *v50;
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[2];

  v53[1] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = *(WebKit::WebExtensionContextProxy **)(a1 + 24);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v47 = *(WTF::StringImpl **)&__y[0];
  v10 = WebKit::WebExtensionContextProxy::hasPermission(v8, &v47);
  v11 = v47;
  v47 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WebKit::WebExtensionContextProxy **)(a1 + 24);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v47 = *(WTF::StringImpl **)&__y[0];
  v15 = WebKit::WebExtensionContextProxy::hasPermission(v12, &v47);
  v16 = v47;
  v47 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (((v10 | v15) & 1) != 0)
  {
    if ((byte_1ECE73033 & 1) == 0)
    {
      v53[0] = CFSTR("tabId");
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v53, 1);
      qword_1ECE73050 = objc_claimAutoreleasedReturnValue();
      byte_1ECE73033 = 1;
    }
    if ((byte_1ECE73034 & 1) == 0)
    {
      v51[0] = CFSTR("tabId");
      v44 = objc_opt_class();
      v51[1] = CFSTR("minTimeStamp");
      v52[0] = v44;
      v52[1] = objc_opt_class();
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v52, v51, 2);
      qword_1ECE73058 = objc_claimAutoreleasedReturnValue();
      byte_1ECE73034 = 1;
    }
    v17 = (void *)qword_1ECE73050;
    if (v10)
      v17 = (void *)MEMORY[0x1E0C9AA60];
    v18 = v17;
    if (!WebKit::validateDictionary(v7, 0, v18, (void *)qword_1ECE73058, a4))
      goto LABEL_36;
    WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("tabId"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v19;
    if (!v19)
    {
      LOBYTE(v47) = 0;
      LOBYTE(v48) = 0;
      goto LABEL_26;
    }
    objc_msgSend(v19, "doubleValue");
    v23 = v22;
    if (v22 == -1.0)
    {
      v24 = -256;
      LOBYTE(v25) = -2;
    }
    else
    {
      v26 = 0;
      if ((v22 < 0.0 || ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
        && (unint64_t)(*(_QWORD *)&v22 - 1) > 0xFFFFFFFFFFFFELL)
      {
        LOBYTE(v25) = 0;
        v24 = 0;
        goto LABEL_21;
      }
      LOBYTE(v25) = 0;
      v24 = 0;
      if (v22 >= 1.84467441e19)
      {
LABEL_21:
        v27 = (WTF::StringImpl *)(v24 & 0xFFFFFFFFFFFFFF00 | v25);
        v47 = v27;
        v48 = v26;
        if (!v26 || v27 == (WTF::StringImpl *)-2)
        {
          WebKit::toErrorString(0, CFSTR("tabId"), CFSTR("%@ is not a valid tab identifier"), v21, v20);
          *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_35:

LABEL_36:
          goto LABEL_37;
        }
LABEL_26:
        WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("minTimeStamp"));
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = v28;
        LOBYTE(v45) = 0;
        v46 = 0;
        if (v28)
        {
          objc_msgSend(v28, "doubleValue");
          v46 = 1;
          v45 = v30 / 1000.0;
        }
        {
          v31 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v31);
        }
        ++*(_DWORD *)(a1 + 48);
        v32 = *a3;
        *a3 = 0;
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
        v34 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v34 = 1625;
        *(_QWORD *)(v34 + 8) = v33;
        *(_QWORD *)(v34 + 528) = v34 + 16;
        *(_QWORD *)(v34 + 536) = v34 + 16;
        *(_OWORD *)(v34 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v34 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v34);
        v50 = (IPC::Encoder *)v34;
        IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v34, (uint64_t *)&v47);
        IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>((IPC::Encoder *)v34, (uint64_t *)&v45);
        v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v35 = &off_1E34F5008;
        v35[1] = a1;
        v35[2] = v32;
        v36 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        *(_QWORD *)&__y[0] = v35;
        *(_QWORD *)&__y[1] = v36;
        (*(void (**)(_QWORD *, IPC::Encoder **, long double *, _QWORD))(*((_QWORD *)v31 + 2) + 40))((_QWORD *)v31 + 2, &v50, __y, 0);
        v38 = __y[0];
        __y[0] = 0.0;
        if (v38 != 0.0)
          (*(void (**)(long double))(**(_QWORD **)&v38 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v38));
        v39 = v50;
        v50 = 0;
        if (v39)
        {
          IPC::Encoder::~Encoder(v39, v37);
          WTF::fastFree(v40, v41);
        }

        goto LABEL_35;
      }
      if (modf(v22, __y) != 0.0)
      {
        v26 = 0;
        LOBYTE(v25) = 0;
        v24 = 0;
        goto LABEL_21;
      }
      if ((unint64_t)v23 - 1 >= 0xFFFFFFFFFFFFFFFELL)
        LOBYTE(v25) = -2;
      else
        v25 = (unint64_t)v23;
      if ((unint64_t)v23 - 1 >= 0xFFFFFFFFFFFFFFFELL)
        v24 = -256;
      else
        v24 = (unint64_t)v23 & 0xFFFFFFFFFFFFFF00;
    }
    v26 = 1;
    goto LABEL_21;
  }
  WebKit::toErrorString(0, 0, CFSTR("either the 'declarativeNetRequestFeedback' or 'activeTab' permission is required"), v14);
  *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_37:

}

void sub_1976B9524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::isRegexSupported(uint64_t a1, void *a2, WebKit::WebExtensionCallbackHandler **a3, _QWORD *a4)
{
  id v6;
  void *v7;
  BOOL v8;
  void *v9;
  objc_object *v10;
  id v11;
  const __CFString *v12;
  _QWORD v13[3];
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  if ((byte_1ECE73035 & 1) == 0)
  {
    v13[0] = CFSTR("regex");
    v14[0] = objc_opt_class();
    v13[1] = CFSTR("isCaseSensitive");
    v14[1] = objc_opt_class();
    v13[2] = CFSTR("requireCapturing");
    v14[2] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 3);
    qword_1ECE73060 = objc_claimAutoreleasedReturnValue();
    byte_1ECE73035 = 1;
  }
  v12 = CFSTR("regex");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v12, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = WebKit::validateDictionary(v6, CFSTR("regexOptions"), v7, (void *)qword_1ECE73060, a4);

  if (v8)
  {
    WebKit::objectForKey<NSString>(v6, (uint64_t)CFSTR("regex"), 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (+[WKContentRuleList _supportsRegularExpression:](WKContentRuleList, "_supportsRegularExpression:", v9))
    {
      v10 = (objc_object *)&unk_1E356F8E8;
    }
    else
    {
      v10 = (objc_object *)&unk_1E356F8C0;
    }
    v11 = WebKit::WebExtensionCallbackHandler::call(*a3, v10);

  }
}

void sub_1976B982C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  BOOL v11;
  void *v12;
  NSString *v13;
  long double v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WebKit::WebProcess *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  long double v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  WebKit::WebProcess *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  long double v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  BOOL v45;
  double __y;
  uint64_t v47;
  IPC::Encoder *v48;
  _QWORD v49[2];
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[3];

  v53[2] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  if (byte_1ECE73036 == 1)
  {
    v8 = (void *)qword_1ECE73068;
  }
  else
  {
    v52[0] = CFSTR("displayActionCountAsBadgeText");
    v52[1] = CFSTR("tabUpdate");
    v53[0] = objc_opt_class();
    v53[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v53, v52, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE73068 = (uint64_t)v8;
    byte_1ECE73036 = 1;
  }
  if (WebKit::validateDictionary(v7, CFSTR("extensionActionOptions"), 0, v8, a4))
  {
    WebKit::objectForKey<NSDictionary>(v7, (uint64_t)CFSTR("tabUpdate"), 1, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v9)
    {
      {
        v33 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v33);
      }
      WebKit::objectForKey<NSNumber>(v7, (uint64_t)CFSTR("displayActionCountAsBadgeText"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = objc_msgSend(v9, "BOOLValue");
      ++*(_DWORD *)(a1 + 48);
      v35 = *a3;
      *a3 = 0;
      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
      v37 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v37 = 1622;
      *(_QWORD *)(v37 + 8) = v36;
      *(_QWORD *)(v37 + 528) = v37 + 16;
      *(_QWORD *)(v37 + 536) = v37 + 16;
      *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v37 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
      v48 = (IPC::Encoder *)v37;
      *IPC::Encoder::grow((IPC::Encoder *)v37, 1uLL, 1) = v34;
      v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v38 = &off_1E34F5078;
      v38[1] = a1;
      v38[2] = v35;
      __y = *(double *)&v38;
      v47 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      (*(void (**)(_QWORD *, IPC::Encoder **, double *, _QWORD))(*((_QWORD *)v33 + 2) + 40))((_QWORD *)v33 + 2, &v48, &__y, 0);
      v40 = __y;
      __y = 0.0;
      if (v40 != 0.0)
        (*(void (**)(long double))(**(_QWORD **)&v40 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v40));
      v41 = v48;
      v48 = 0;
      if (v41)
      {
        IPC::Encoder::~Encoder(v41, v39);
        WTF::fastFree(v42, v43);
      }
      goto LABEL_35;
    }
    if ((byte_1ECE73037 & 1) == 0)
    {
      v50[0] = CFSTR("tabId");
      v50[1] = CFSTR("increment");
      v51[0] = objc_opt_class();
      v51[1] = objc_opt_class();
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v51, v50, 2);
      qword_1ECE73070 = objc_claimAutoreleasedReturnValue();
      byte_1ECE73037 = 1;
    }
    v49[0] = CFSTR("tabId");
    v49[1] = CFSTR("increment");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v49, 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = WebKit::validateDictionary(v9, CFSTR("tabUpdate"), v10, (void *)qword_1ECE73070, a4);

    if (!v11)
    {
LABEL_35:

      goto LABEL_36;
    }
    WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("tabId"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "doubleValue");
    v15 = v14;
    if (v14 == -1.0)
    {
      v16 = -256;
      LOBYTE(v17) = -2;
    }
    else
    {
      v45 = (v14 < 0.0 || ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         && (unint64_t)(*(_QWORD *)&v14 - 1) > 0xFFFFFFFFFFFFELL;
      if (v45 || v14 >= 1.84467441e19 || modf(v14, &__y) != 0.0)
        goto LABEL_33;
      v17 = (unint64_t)v15;
      if ((unint64_t)v15 - 1 < 0xFFFFFFFFFFFFFFFELL)
      {
        v16 = (unint64_t)v15 & 0xFFFFFFFFFFFFFF00;
      }
      else
      {
        LOBYTE(v17) = -2;
        v16 = -256;
      }
    }
    v18 = v16 & 0xFFFFFFFFFFFFFF00 | v17;
    if (v18 != -2)
    {
      {
        v19 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v19);
      }
      WebKit::objectForKey<NSNumber>(v9, (uint64_t)CFSTR("increment"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "doubleValue");
      v22 = v21;
      ++*(_DWORD *)(a1 + 48);
      v23 = *a3;
      *a3 = 0;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
      v25 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v25 = 1627;
      *(_QWORD *)(v25 + 8) = v24;
      *(_QWORD *)(v25 + 528) = v25 + 16;
      *(_QWORD *)(v25 + 536) = v25 + 16;
      *(_OWORD *)(v25 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v25 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v25);
      v48 = (IPC::Encoder *)v25;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v25, 8uLL, 8) = v18;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v25, 8uLL, 8) = v22;
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v26 = &off_1E34F5050;
      v26[1] = a1;
      v26[2] = v23;
      v27 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      __y = *(double *)&v26;
      v47 = v27;
      (*(void (**)(_QWORD *, IPC::Encoder **, double *, _QWORD))(*((_QWORD *)v19 + 2) + 40))((_QWORD *)v19 + 2, &v48, &__y, 0);
      v29 = __y;
      __y = 0.0;
      if (v29 != 0.0)
        (*(void (**)(long double))(**(_QWORD **)&v29 + 8))(COERCE_LONG_DOUBLE(*(_QWORD *)&v29));
      v30 = v48;
      v48 = 0;
      if (v30)
      {
        IPC::Encoder::~Encoder(v30, v28);
        WTF::fastFree(v31, v32);
      }

      goto LABEL_34;
    }
LABEL_33:
    WebKit::toErrorString(0, CFSTR("tabId"), CFSTR("%@ is not a valid tab identifier"), v13, v12);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_34:

    goto LABEL_35;
  }
LABEL_36:

}

void sub_1976B9E0C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, IPC::Encoder *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  WTF *v18;
  void *v19;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (a13)
  {
    IPC::Encoder::~Encoder(a13, a2);
    WTF::fastFree(v18, v19);
  }

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4F08;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4F08;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateEnabledRulesets(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976BA18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4F30;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4F30;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v10[2];

  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)&v7);
  if (!v9)
    return IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  v10[0] = v7;
  v3 = v8;
  v7 = 0;
  v8 = 0;
  v10[1] = v3;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v10);
  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v4);
  if (v9)
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v6);
  return result;
}

void sub_1976BA344(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, a2);
  if ((_BYTE)v8)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v4);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetEnabledRulesets,WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  void *v1;
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, (uint64_t)v3);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v1);
}

void sub_1976BA39C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::getEnabledRulesets(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2)
{
  objc_object *v3;
  id v4;
  CFTypeRef v5;
  CFTypeRef cf;

  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(a2, (uint64_t *)&cf);
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v3 = (objc_object *)objc_claimAutoreleasedReturnValue();
  v4 = WebKit::WebExtensionCallbackHandler::call(a1, v3);

  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
}

void sub_1976BA418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;

  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4F58;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4F58;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateDynamicRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976BA5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4F80;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4F80;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  char v6;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v3);
    if (v5)
    {
      WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v3, v4);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F4F98[v4])(&v6, &v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976BA7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  uint64_t v12;

  if (a12)
  {
    if (a10 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34F4F98[a10])(v12 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetDynamicRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = 0;
  v2 = 0;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1E34F4F98[v2])(&v3, &v1);
}

void sub_1976BA838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F4F98[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::getDynamicRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  void *v3;
  __CFString *v5;
  __CFString *v6;
  objc_object *v7;
  id v8;
  _Unwind_Exception *v9;
  id v10;
  __CFString *v11;

  if (a3)
  {
    if (a3 != 1)
    {
      v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v9);
    }
    if (a2)
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    v11 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v5->isa);
  }
  else
  {
    if (a2)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    v11 = v6;
    WebKit::parseJSON(v6, 1, 0);
    v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v8 = WebKit::WebExtensionCallbackHandler::call(a1, v7);

  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4FB8;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4FB8;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestUpdateSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::updateSessionRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976BAAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F4FE0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F4FE0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  char v6;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v3);
    if (v5)
    {
      WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v3, v4);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F4F98[v4])(&v6, &v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976BACB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  uint64_t v12;

  if (a12)
  {
    if (a10 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34F4F98[a10])(v12 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetSessionRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = 0;
  v2 = 0;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1E34F4F98[v2])(&v3, &v1);
}

void sub_1976BAD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F4F98[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::getSessionRules(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  void *v3;
  __CFString *v5;
  __CFString *v6;
  objc_object *v7;
  id v8;
  _Unwind_Exception *v9;
  id v10;
  __CFString *v11;

  if (a3)
  {
    if (a3 != 1)
    {
      v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v9);
    }
    if (a2)
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    v11 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v5->isa);
  }
  else
  {
    if (a2)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    v11 = v6;
    WebKit::parseJSON(v6, 1, 0);
    v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v8 = WebKit::WebExtensionCallbackHandler::call(a1, v7);

  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetMatchedRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5008;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetMatchedRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5008;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestGetMatchedRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  char *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  void *v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46[4];
  int v47;
  char v48;
  _QWORD v49[2];
  int v50;
  char v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  uint64_t v58;

  if (!a2 || (v4 = (char *)*a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetMatchedRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
  v5 = a2[1];
  if (v5 <= a2[2] - (uint64_t)v4)
  {
    v21 = 0;
    v22 = 0;
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
        v21 = 0;
        v42 = *a2;
        v43 = a2[1];
        v44 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v22 = 0;
        if (v44 && v43)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v42);
          v22 = (char *)*a2;
          v21 = a2[1];
        }
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
    goto LABEL_33;
  }
  v6 = (unsigned __int8 *)a2[2];
  v7 = v6 + 1;
  a2[2] = (uint64_t)(v6 + 1);
  v8 = *v6;
  if (v8 >= 2)
  {
    v21 = v5;
    v22 = v4;
LABEL_33:
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24 && v21)
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22, v21);
    goto LABEL_34;
  }
  if (v8)
  {
    v9 = ((unint64_t)(v7 + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
    if (v5 >= v9 && v5 - v9 > 7)
    {
      v11 = (unint64_t *)&v4[v9];
      v12 = *v11;
      a2[2] = (uint64_t)(v11 + 1);
      v57 = 0;
      v58 = 0;
      if (v12 >= 0x4924)
      {
        while (1)
        {
          IPC::Decoder::decode<WebKit::WebExtensionMatchedRuleParameters>((uint64_t)&v52, a2);
          if (!v56)
            break;
          v35 = HIDWORD(v58);
          if (HIDWORD(v58) == (_DWORD)v58)
          {
            WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters>((uint64_t)&v57, (unint64_t)&v52);
          }
          else
          {
            v37 = v57;
            WTF::URL::URL(v57 + 56 * HIDWORD(v58), (uint64_t *)&v52);
            *(_OWORD *)(v37 + 56 * v35 + 40) = v55;
            ++HIDWORD(v58);
          }
          if (v56)
          {
            v38 = v52;
            v52 = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2)
                WTF::StringImpl::destroy(v38, v36);
              else
                *(_DWORD *)v38 -= 2;
            }
          }
          if (!--v12)
          {
            WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v57, HIDWORD(v58));
LABEL_24:
            v12 = v57;
            v17 = v58;
            goto LABEL_29;
          }
        }
      }
      else
      {
        if (!v12)
        {
          v17 = 0;
LABEL_29:
          v45 = v17;
          v57 = 0;
          v58 = 0;
          v18 = 1;
          v54 = 1;
          WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v4);
          v52 = 0;
          v53 = 0;
          v49[0] = v12;
          v49[1] = v45;
          v50 = 0;
          WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v19);
          goto LABEL_56;
        }
        LODWORD(v58) = 56 * (int)v12 / 0x38u;
        v57 = WTF::fastMalloc((WTF *)(56 * v12));
        while (1)
        {
          IPC::Decoder::decode<WebKit::WebExtensionMatchedRuleParameters>((uint64_t)&v52, a2);
          if (!v56)
            break;
          v14 = HIDWORD(v58);
          if (HIDWORD(v58) == (_DWORD)v58)
          {
            WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters>((uint64_t)&v57, (unint64_t)&v52);
          }
          else
          {
            v15 = v57;
            WTF::URL::URL(v57 + 56 * HIDWORD(v58), (uint64_t *)&v52);
            *(_OWORD *)(v15 + 56 * v14 + 40) = v55;
            ++HIDWORD(v58);
          }
          if (v56)
          {
            v16 = v52;
            v52 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v4);
              else
                *(_DWORD *)v16 -= 2;
            }
          }
          if (!--v12)
            goto LABEL_24;
        }
      }
      WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v13);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      v31 = a2[3];
      if (v31)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
        v32 = *a2;
        v33 = a2[1];
        v34 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v34)
        {
          if (v33)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
        }
      }
    }
    v39 = *a2;
    v40 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v41 = a2[3];
    if (v41 && v40)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 16))(v41, v39);
    v18 = 0;
    LOBYTE(v49[0]) = 0;
LABEL_56:
    v20 = 0;
    v51 = v18;
    goto LABEL_57;
  }
  IPC::Decoder::decode<WTF::String>(a2, &v52);
  if ((_BYTE)v53)
  {
    v49[0] = v52;
    v18 = 1;
    v50 = 1;
  }
  else
  {
    v18 = 0;
    LOBYTE(v49[0]) = 0;
  }
  v51 = v18;
  v20 = 1;
LABEL_57:
  if (v18)
  {
    LOBYTE(v46[0]) = 0;
    v47 = -1;
    ((void (*)(WTF::StringImpl **, unsigned int *, _QWORD *))off_1E34F5030[v20])(&v52, v46, v49);
    v47 = v20;
    v48 = 1;
    if (!v51)
      goto LABEL_61;
    if (v50 == -1)
      goto LABEL_61;
    ((void (*)(WTF::StringImpl **, _QWORD *))off_1E34F5020[v50])(&v52, v49);
    if (v48)
      goto LABEL_61;
    goto LABEL_36;
  }
LABEL_34:
  v25 = *a2;
  v26 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v27 = a2[3];
  if (v27 && v26)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
  LOBYTE(v46[0]) = 0;
  v48 = 0;
LABEL_36:
  v28 = *a2;
  v29 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v30 = a2[3];
  if (!v30 || !v29 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, v28), !v48))
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetMatchedRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    return;
  }
LABEL_61:
  WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v46);
  if (v48)
  {
    if (v47 != -1)
      ((void (*)(WTF::StringImpl **, unsigned int *))off_1E34F5020[v47])(&v52, v46);
  }
}

void sub_1976BB3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, int a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,int a21,int a22,char a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a15)
  {
    if (a13 != -1)
      ((void (*)(WTF::StringImpl **, char *))off_1E34F5020[a13])(&a24, &a11);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::DeclarativeNetRequestGetMatchedRules,WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  _QWORD v1[2];
  int v2;
  char v3;

  v1[0] = 0;
  v1[1] = 0;
  v2 = 0;
  WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (unsigned int *)v1);
  if (v2 != -1)
    ((void (*)(char *, _QWORD *))off_1E34F5020[v2])(&v3, v1);
}

void sub_1976BB530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;

  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F5020[a11])(v11 - 17, &a9);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::WebExtensionMatchedRuleParameters>(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::WebExtensionMatchedRuleParameters,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 56))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1976BB5BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(v2 + 56))
  {
    v4 = *(WTF::StringImpl **)v2;
    *(_QWORD *)v2 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionMatchedRuleParameters>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WTF::URL::URL(*(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 12), (uint64_t *)v3);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(v3 + 40);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x4924925)
  {
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 56 * *(unsigned int *)(result + 12));
    v5 = 56 * a2;
    v6 = WTF::fastMalloc((WTF *)(56 * a2));
    *(_DWORD *)(v2 + 8) = v5 / 0x38;
    *(_QWORD *)v2 = v6;
    WTF::VectorMover<false,std::pair<WTF::URL,WebCore::CharacterRange>>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebKit::WebExtensionMatchedRuleParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      result = (uint64_t)WTF::VectorDestructor<true,std::pair<WTF::URL,WebCore::CharacterRange>>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 56 * a2), (WTF::StringImpl *)(*(_QWORD *)result + 56 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >= 0x4924925)
      {
        __break(0xC471u);
        return result;
      }
      v6 = (WTF *)(56 * a2);
      result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = v6 / 0x38;
      *(_QWORD *)v3 = result;
      if ((WTF::StringImpl *)result != v5)
        result = (uint64_t)WTF::VectorMover<false,std::pair<WTF::URL,WebCore::CharacterRange>>::move(v5, (WTF::StringImpl *)((char *)v5 + 56 * v4), result);
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit33WebExtensionMatchedRuleParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<std::pair<WTF::URL,WebCore::CharacterRange>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN6WebKit33WebExtensionMatchedRuleParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit33WebExtensionMatchedRuleParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN6WebKit33WebExtensionMatchedRuleParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::getMatchedRules(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, unsigned int *a2)
{
  unsigned int v3;
  __CFString *v4;
  WebKit::WebExtensionCallbackHandler *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __CFString *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  double v14;
  void *v15;
  void *v16;
  objc_object *v17;
  id v18;
  _Unwind_Exception *v19;
  WebKit::WebExtensionCallbackHandler *v20;
  __CFString *v21;
  WebKit::WebExtensionCallbackHandler *v22;
  const __CFString *v23;
  void *v24;
  const __CFString *v25;
  __CFString *v26;
  _QWORD v27[3];
  _QWORD v28[4];

  v20 = a1;
  v28[3] = *MEMORY[0x1E0C80C00];
  v3 = a2[4];
  if (v3)
  {
    if (v3 != 1)
    {
      v19 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v19);
    }
    if (*(_QWORD *)a2)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v5 = v20;
    v21 = v4;
    WebKit::WebExtensionCallbackHandler::reportError(v5, &v4->isa);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", a2[3]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = a2[3];
    if (v7)
    {
      v8 = *(_QWORD *)a2;
      v9 = *(_QWORD *)a2 + 56 * v7;
      do
      {
        v27[0] = CFSTR("request");
        v25 = CFSTR("url");
        if (*(_QWORD *)v8)
          v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v10 = &stru_1E351F1B8;
        v26 = v10;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1, v20);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v28[0] = v11;
        v27[1] = CFSTR("timeStamp");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", floor(*(double *)(v8 + 40) * 1000.0));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v28[1] = v12;
        v27[2] = CFSTR("tabId");
        v13 = *(_QWORD *)(v8 + 48);
        v14 = (double)v13;
        if (v13 == -2)
          v14 = -1.0;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v28[2] = v15;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 3);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObject:", v16);

        v8 += 56;
      }
      while (v8 != v9);
    }
    v23 = CFSTR("rulesMatchedInfo");
    v24 = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1, v20);
    v17 = (objc_object *)objc_claimAutoreleasedReturnValue();

    v18 = WebKit::WebExtensionCallbackHandler::call(v22, v17);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestIncrementActionCount,WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5050;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestIncrementActionCount,WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5050;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestIncrementActionCount,WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976BBDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestDisplayActionCountAsBadgeText,WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5078;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestDisplayActionCountAsBadgeText,WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5078;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::DeclarativeNetRequestDisplayActionCountAsBadgeText,WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIDeclarativeNetRequest::setExtensionActionOptions(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976BBFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebExtensionAPIEvent::invokeListeners(unsigned int *this)
{
  uint64_t v1;
  JSObjectRef **v2;
  uint64_t v3;
  JSObjectRef *v4;

  v1 = this[21];
  if ((_DWORD)v1)
  {
    v2 = (JSObjectRef **)*((_QWORD *)this + 9);
    v3 = 8 * v1;
    do
    {
      v4 = *v2++;
      this = (unsigned int *)WebKit::WebExtensionCallbackHandler::call(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

void WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(WebKit::WebExtensionAPIEvent *this, objc_object *a2)
{
  uint64_t v3;
  WebKit::WebExtensionCallbackHandler **v4;
  uint64_t v5;
  id v6;
  objc_object *v7;

  v7 = a2;
  v3 = *((unsigned int *)this + 21);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::WebExtensionCallbackHandler **)*((_QWORD *)this + 9);
    v5 = 8 * v3;
    do
    {
      v6 = WebKit::WebExtensionCallbackHandler::call(*v4++, v7);
      v5 -= 8;
    }
    while (v5);
  }

}

void sub_1976BC094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(WebKit::WebExtensionAPIEvent *this, objc_object *a2, objc_object *a3)
{
  objc_object *v5;
  uint64_t v6;
  WebKit::WebExtensionCallbackHandler **v7;
  uint64_t v8;
  id v9;
  objc_object *v10;

  v10 = a2;
  v5 = a3;
  v6 = *((unsigned int *)this + 21);
  if ((_DWORD)v6)
  {
    v7 = (WebKit::WebExtensionCallbackHandler **)*((_QWORD *)this + 9);
    v8 = 8 * v6;
    do
    {
      v9 = WebKit::WebExtensionCallbackHandler::call(*v7++, v10, v5);
      v8 -= 8;
    }
    while (v8);
  }

}

void sub_1976BC124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(WebKit::WebExtensionAPIEvent *this, objc_object *a2, objc_object *a3, objc_object *a4)
{
  objc_object *v7;
  objc_object *v8;
  uint64_t v9;
  WebKit::WebExtensionCallbackHandler **v10;
  uint64_t v11;
  id v12;
  objc_object *v13;

  v13 = a2;
  v7 = a3;
  v8 = a4;
  v9 = *((unsigned int *)this + 21);
  if ((_DWORD)v9)
  {
    v10 = (WebKit::WebExtensionCallbackHandler **)*((_QWORD *)this + 9);
    v11 = 8 * v9;
    do
    {
      v12 = WebKit::WebExtensionCallbackHandler::call(*v10++, v13, v7, v8);
      v11 -= 8;
    }
    while (v11);
  }

}

void sub_1976BC1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIEvent::addListener(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  IPC::Encoder *result;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  void *v16;
  char v17;
  uint64_t v18;
  _QWORD v19[3];
  IPC::Encoder *v20;

  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 2120);
  result = (IPC::Encoder *)(a1 + 72);
  v6 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 80))
  {
    result = (IPC::Encoder *)WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>&>((uint64_t)result, (unint64_t)a3);
  }
  else
  {
    v7 = *(_QWORD *)result;
    v8 = (_DWORD *)*a3;
    if (*a3)
      ++*v8;
    *(_QWORD *)(v7 + 8 * v6) = v8;
    *(_DWORD *)(a1 + 84) = v6 + 1;
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    {
      v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v10);
      v9 = *(_QWORD *)(a1 + 24);
    }
    v11 = *(_QWORD *)(a2 + 2120);
    v17 = *(_BYTE *)(a1 + 8);
    v18 = v11;
    v19[0] = &v18;
    v19[1] = a1 + 64;
    v19[2] = &v17;
    v12 = *(_QWORD *)(v9 + 24);
    v13 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v13 = 1610;
    *(_QWORD *)(v13 + 8) = v12;
    *(_QWORD *)(v13 + 528) = v13 + 16;
    *(_QWORD *)(v13 + 536) = v13 + 16;
    *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v13 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
    v20 = (IPC::Encoder *)v13;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,0ul,1ul,2ul>(v13, (uint64_t)v19);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v10 + 2) + 32))((_QWORD *)v10 + 2, &v20, 0);
    result = v20;
    v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v14);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  return result;
}

void sub_1976BC348(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIEvent::removeListener(uint64_t a1, uint64_t a2, WebKit::WebExtensionCallbackHandler **a3)
{
  WebKit::WebExtensionCallbackHandler **v4;
  uint64_t v5;
  WebKit::WebExtensionCallbackHandler **v6;
  unsigned int v8;
  uint64_t v9;
  WebKit::WebExtensionCallbackHandler **v10;
  WebKit::WebExtensionCallbackHandler **v11;
  void *v12;
  void *v13;
  WebKit::WebExtensionCallbackHandler **v14;
  WebKit::WebExtensionCallbackHandler *v15;
  WebKit::WebExtensionCallbackHandler **v16;
  uint64_t v17;
  WebKit::WebProcess *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  char v25;
  _QWORD v26[4];
  IPC::Encoder *v27;

  v4 = *(WebKit::WebExtensionCallbackHandler ***)(a1 + 72);
  v5 = *(unsigned int *)(a1 + 84);
  v6 = &v4[v5];
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 72);
    v10 = &v4[v5];
    v11 = v10;
    do
    {
      WebKit::WebExtensionCallbackHandler::callbackFunction(*v4);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionCallbackHandler::callbackFunction(*a3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12 == v13)
      {
        v14 = v4;
        if (v11 != (WebKit::WebExtensionCallbackHandler **)(*(_QWORD *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 84)))
        {
          if (v4 == v10)
          {
            v14 = v11;
          }
          else
          {
            memmove(v11, v10, v9 - (_QWORD)v10);
            v14 = (WebKit::WebExtensionCallbackHandler **)((char *)v11 + v9 - (_QWORD)v10);
          }
        }
        v15 = *v4;
        *v4 = 0;
        v10 = v4 + 1;
        if (v15)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v15);
        ++v8;
        v11 = v14;
      }
      ++v4;
      v9 += 8;
    }
    while (v4 < v6);
    v4 = *(WebKit::WebExtensionCallbackHandler ***)(a1 + 72);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
    v6 = v11;
  }
  else
  {
    v8 = 0;
    v10 = &v4[v5];
  }
  v16 = &v4[v5];
  if (v10 != v16)
  {
    memmove(v6, v10, (char *)v16 - (char *)v10);
    LODWORD(v5) = *(_DWORD *)(a1 + 84);
  }
  *(_DWORD *)(a1 + 84) = v5 - v8;
  if (v8)
  {
    v17 = *(_QWORD *)(a1 + 24);
    if (v17)
    {
      {
        v18 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v18);
        v17 = *(_QWORD *)(a1 + 24);
      }
      v25 = *(_BYTE *)(a1 + 8);
      v26[0] = a1 + 56;
      v26[1] = a1 + 64;
      v26[2] = &v25;
      v26[3] = v8;
      v19 = *(_QWORD *)(v17 + 24);
      v20 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v20 = 1642;
      *(_QWORD *)(v20 + 8) = v19;
      *(_QWORD *)(v20 + 528) = v20 + 16;
      *(_QWORD *)(v20 + 536) = v20 + 16;
      *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v20 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
      v27 = (IPC::Encoder *)v20;
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v20, (uint64_t)v26);
      (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v18 + 2) + 32))((_QWORD *)v18 + 2, &v27, 0);
      v22 = v27;
      v27 = 0;
      if (v22)
      {
        IPC::Encoder::~Encoder(v22, v21);
        WTF::fastFree(v23, v24);
      }
    }
  }
}

void sub_1976BC590(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::WebExtensionAPIEvent::hasListener(uint64_t a1, WebKit::WebExtensionCallbackHandler **a2)
{
  unint64_t v4;
  void *v5;
  void *v6;
  _BOOL8 result;

  if (!*(_DWORD *)(a1 + 84))
    return 0;
  v4 = 0;
  do
  {
    WebKit::WebExtensionCallbackHandler::callbackFunction(*(WebKit::WebExtensionCallbackHandler **)(*(_QWORD *)(a1 + 72)
                                                                                                  + 8 * v4));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionCallbackHandler::callbackFunction(*a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    result = v5 == v6;
    if (v5 == v6)
      break;
    ++v4;
  }
  while (v4 < *(unsigned int *)(a1 + 84));
  return result;
}

void sub_1976BC648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebExtensionAPIEvent::removeAllListeners(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  WebKit::WebProcess *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  void *v9;
  char v10;
  _QWORD v11[4];
  IPC::Encoder *v12;

  v1 = this[21];
  if ((_DWORD)v1)
  {
    v2 = this;
    this = WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(this + 18, 0);
    v3 = *((_QWORD *)v2 + 3);
    if (v3)
    {
      {
        v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v4);
        v3 = *((_QWORD *)v2 + 3);
      }
      v10 = *((_BYTE *)v2 + 8);
      v11[0] = v2 + 14;
      v11[1] = v2 + 16;
      v11[2] = &v10;
      v11[3] = v1;
      v5 = *(_QWORD *)(v3 + 24);
      v6 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v6 = 1642;
      *(_QWORD *)(v6 + 8) = v5;
      *(_QWORD *)(v6 + 528) = v6 + 16;
      *(_QWORD *)(v6 + 536) = v6 + 16;
      *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v6 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
      v12 = (IPC::Encoder *)v6;
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v6, (uint64_t)v11);
      (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v4 + 2) + 32))((_QWORD *)v4 + 2, &v12, 0);
      this = (unsigned int *)v12;
      v12 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)this, v7);
        return (unsigned int *)WTF::fastFree(v8, v9);
      }
    }
  }
  return this;
}

void sub_1976BC778(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WTF *v15;
  void *v16;

  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v15, v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>&>(uint64_t a1, unint64_t a2)
{
  _DWORD **v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  v3 = (_DWORD **)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  if (*v3)
    ++*v6;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,0ul,1ul,2ul>(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;

  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, *(uint64_t **)a2);
  v4 = **(_BYTE **)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v18 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v6);
    v20 = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (v20 == (char *)-1)
      goto LABEL_18;
    v8 = v20;
    memcpy(v20, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v21 = *(void **)(a1 + 528);
    if (v21 != (void *)(a1 + 16))
      munmap(v21, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v19;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  v11 = **(_BYTE **)(a2 + 16);
  v12 = *(_QWORD *)(a1 + 544);
  v13 = v12 + 1;
  v14 = *(_QWORD *)(a1 + 552);
  if (v14 >= v12 + 1)
  {
    v15 = *(char **)(a1 + 528);
    v16 = *(_QWORD *)(a1 + 544);
    goto LABEL_5;
  }
  v22 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v23 = v22;
    v22 *= 2;
  }
  while (v23 < v13);
  v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
  if (v24 == (char *)-1)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1976BC9BCLL);
  }
  v15 = v24;
  memcpy(v24, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
  v25 = *(void **)(a1 + 528);
  if (v25 != (void *)(a1 + 16))
    munmap(v25, *(_QWORD *)(a1 + 552));
  *(_QWORD *)(a1 + 528) = v15;
  *(_QWORD *)(a1 + 552) = v23;
  v16 = *(_QWORD *)(a1 + 544);
LABEL_5:
  bzero(&v15[v16], v12 - v16);
  *(_QWORD *)(a1 + 544) = v13;
  v17 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v12);
  *(_QWORD *)(a1 + 536) = v17 + 1;
  *v17 = v11;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  char v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  void *v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  void *v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  void *v36;

  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, *(uint64_t **)a2);
  v4 = **(_BYTE **)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 < v5 + 1)
  {
    v25 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v26 = v25;
      v25 *= 2;
    }
    while (v26 < v6);
    v27 = (char *)mmap(0, v26, 3, 4098, -1, 0);
    if (v27 == (char *)-1)
      goto LABEL_28;
    v8 = v27;
    memcpy(v27, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v28 = *(void **)(a1 + 528);
    if (v28 != (void *)(a1 + 16))
      munmap(v28, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v26;
    v9 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(a1 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  v11 = **(_BYTE **)(a2 + 16);
  v12 = *(_QWORD *)(a1 + 544);
  v13 = v12 + 1;
  v14 = *(_QWORD *)(a1 + 552);
  if (v14 < v12 + 1)
  {
    v29 = (2 * v14 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v30 = v29;
      v29 *= 2;
    }
    while (v30 < v13);
    v31 = (char *)mmap(0, v30, 3, 4098, -1, 0);
    if (v31 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1976BCC60);
    }
    v15 = v31;
    memcpy(v31, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v32 = *(void **)(a1 + 528);
    if (v32 != (void *)(a1 + 16))
      munmap(v32, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v15;
    *(_QWORD *)(a1 + 552) = v30;
    v16 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v15 = *(char **)(a1 + 528);
    v16 = *(_QWORD *)(a1 + 544);
  }
  bzero(&v15[v16], v12 - v16);
  *(_QWORD *)(a1 + 544) = v13;
  v17 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v12);
  *(_QWORD *)(a1 + 536) = v17 + 1;
  *v17 = v11;
  v18 = *(_QWORD *)(a2 + 24);
  v19 = *(_QWORD *)(a1 + 544);
  v20 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 + 8;
  v22 = *(_QWORD *)(a1 + 552);
  if (v22 >= v20 + 8)
  {
    v23 = *(char **)(a1 + 528);
    goto LABEL_7;
  }
  v33 = (2 * v22 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v34 = v33;
    v33 *= 2;
  }
  while (v34 < v21);
  v35 = (char *)mmap(0, v34, 3, 4098, -1, 0);
  if (v35 == (char *)-1)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x1976BCC58);
  }
  v23 = v35;
  memcpy(v35, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
  v36 = *(void **)(a1 + 528);
  if (v36 != (void *)(a1 + 16))
    munmap(v36, *(_QWORD *)(a1 + 552));
  *(_QWORD *)(a1 + 528) = v23;
  *(_QWORD *)(a1 + 552) = v34;
  v19 = *(_QWORD *)(a1 + 544);
LABEL_7:
  bzero(&v23[v19], v20 - v19);
  *(_QWORD *)(a1 + 544) = v21;
  v24 = (_QWORD *)(*(_QWORD *)(a1 + 528) + v20);
  *(_QWORD *)(a1 + 536) = v24 + 1;
  *v24 = v18;
}

unsigned int *WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;

  if (result[2] > a2)
  {
    v3 = result;
    if (result[3] > a2)
      result = WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v4, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = v3[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)memcpy(result, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

unsigned int *WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int **v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if (v4 != a2)
  {
    v5 = (unsigned int **)(*(_QWORD *)result + 8 * a2);
    v6 = 8 * v4 - 8 * a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
        result = (unsigned int *)WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref((WebKit::WebExtensionCallbackHandler *)result);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

BOOL WebKit::WebExtensionAPIExtension::isPropertyAllowed(WebKit::WebExtensionAPIExtension *this, const char **a2, WebKit::WebPage *a3)
{
  if ((WebKit::WebExtensionContextProxy::isUnsupportedAPI(*((WebKit::WebExtensionContextProxy **)this + 3), (WTF::StringImpl **)this + 4, (const WTF::ASCIILiteral *)a2) & 1) == 0)
  {
    if (*a2)
    {
      if (!strcmp(*a2, "getURL"))
        return *(double *)(*((_QWORD *)this + 3) + 112) < 3.0;
    }
    else if (!"getURL")
    {
      return *(double *)(*((_QWORD *)this + 3) + 112) < 3.0;
    }
  }
  return 0;
}

id WebKit::WebExtensionAPIExtension::getURL(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  id v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v1 = *(_QWORD *)(a1 + 24);
  MEMORY[0x19AEABCC8](&v7);
  MEMORY[0x19AEABB24](&v8, v1 + 40, &v7, 0);
  v3 = (id)WTF::URL::operator NSURL *();
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

void sub_1976BCEBC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id WebKit::WebExtensionAPIExtension::getBackgroundPage(WebKit::WebExtensionAPIExtension *this, JSContextRef ctx)
{
  uint64_t v3;
  uint64_t v4;
  WebKit::WebFrame *v5;
  void *v6;
  JSValueRef Null;
  JSValueRef v9;
  void *v10;
  uint64_t v11;
  JSValueRef v12;
  void *v13;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 168);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    WebKit::toWindowObject(ctx, *(const OpaqueJSContext **)(v4 + 72), v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
  else
  {
    Null = JSValueMakeNull(ctx);
    if (Null)
    {
      v9 = Null;
      v10 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(ctx));
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = v9;
      v13 = (void *)v11;
      objc_msgSend(v10, "valueWithJSValueRef:inContext:", v12, v11);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v6 = 0;
    }
  }
  return v6;
}

void sub_1976BCFE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPIExtension::getViews(uint64_t a1, WebKit *a2, void *a3, _QWORD *a4)
{
  id v7;
  __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSString *v14;
  long double v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  NSString *v23;
  long double v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  NSString *v28;
  uint64_t v29;
  unint64_t v30;
  void *v33;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  WebKit::WebFrame *v38;
  void *v39;
  char v40;
  void *v41;
  WebKit::WebFrame *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  int v46;
  void *v47;
  WebKit::WebFrame *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v54;
  int v55;
  char v56;
  long double __y;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = CFSTR("filter");
  if (_MergedGlobals_109 == 1)
  {
    v9 = (void *)qword_1ECE73080;
  }
  else
  {
    v58[0] = CFSTR("type");
    v59 = objc_opt_class();
    v58[1] = CFSTR("tabId");
    v60 = objc_opt_class();
    v58[2] = CFSTR("windowId");
    v61 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v59, v58, 3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE73080 = (uint64_t)v9;
    _MergedGlobals_109 = 1;
  }
  if (!WebKit::validateDictionary(v7, CFSTR("filter"), 0, v9, a4))
    goto LABEL_32;
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("type"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10 && (objc_msgSend(v10, "isEqualToString:", CFSTR("popup")) & 1) == 0)
  {
    if ((objc_msgSend(v11, "isEqualToString:", CFSTR("tab")) & 1) == 0)
    {
      WebKit::toErrorString(0, CFSTR("type"), CFSTR("it must specify either 'popup' or 'tab'"), v28);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_31;
    }
    v55 = 1;
  }
  else
  {
    v55 = 0;
  }

  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("tabId"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (!v12)
  {
    v19 = 0;
    v20 = 0;
LABEL_14:
    v56 = v19;

    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("windowId"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (!v21)
    {
      v29 = 0;
      v30 = 0;
      goto LABEL_39;
    }
    objc_msgSend(v21, "doubleValue");
    v25 = v24;
    if (v24 == -1.0)
    {
      v26 = -256;
      LOBYTE(v27) = -2;
    }
    else
    {
      if (v24 != -2.0)
      {
        v29 = 0;
        if ((v24 < 0.0 || ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
          && (unint64_t)(*(_QWORD *)&v24 - 1) > 0xFFFFFFFFFFFFELL)
        {
          LOBYTE(v27) = 0;
          v26 = 0;
        }
        else
        {
          LOBYTE(v27) = 0;
          v26 = 0;
          if (v24 < 1.84467441e19)
          {
            if (modf(v24, &__y) == 0.0)
            {
              v27 = (unint64_t)v25;
              if ((unint64_t)v25 - 1 < 0xFFFFFFFFFFFFFFFELL)
              {
                v26 = (unint64_t)v25 & 0xFFFFFFFFFFFFFF00;
              }
              else
              {
                LOBYTE(v27) = -2;
                v26 = -256;
              }
              goto LABEL_37;
            }
            v29 = 0;
            LOBYTE(v27) = 0;
            v26 = 0;
          }
        }
LABEL_38:
        v30 = v26 & 0xFFFFFFFFFFFFFF00 | v27;
        if (!WebKit::isValid(v30, v29, a4, v23))
        {

          goto LABEL_33;
        }
LABEL_39:

        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11 || v19 | v29)
        {
          v40 = v55 ^ 1;
          if (!v11)
            v40 = 1;
          if ((v40 & 1) == 0)
            goto LABEL_59;
        }
        else
        {
          v36 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 168);
          if (v36)
          {
            v37 = *(_QWORD *)(v36 + 8);
            if (v37)
            {
              CFRetain(*(CFTypeRef *)(v37 - 8));
              WebKit::toWindowObject(a2, *(const OpaqueJSContext **)(v37 + 72), v38);
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              if (v39)
                objc_msgSend(v35, "addObject:", v39);

              CFRelease(*(CFTypeRef *)(v37 - 8));
            }
          }
        }
        v54 = a1;
        WebKit::WebExtensionContextProxy::popupPages(*(_QWORD *)(a1 + 24), v20, v56, v30, v29, (uint64_t)&v59);
        if (HIDWORD(v60))
        {
          v43 = v59;
          v44 = 8 * HIDWORD(v60);
          do
          {
            WebKit::toWindowObject(a2, *(const OpaqueJSContext **)(*(_QWORD *)v43 + 88), v42);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            if (v45)
              objc_msgSend(v35, "addObject:", v45);

            v43 += 8;
            v44 -= 8;
          }
          while (v44);
        }
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v41);
        if (v11)
          v46 = v55;
        else
          v46 = 1;
        if (v46 != 1)
          goto LABEL_65;
        a1 = v54;
LABEL_59:
        WebKit::WebExtensionContextProxy::tabPages(*(_QWORD *)(a1 + 24), v20, v56, v30, v29, (uint64_t)&v59);
        if (HIDWORD(v60))
        {
          v49 = v59;
          v50 = 8 * HIDWORD(v60);
          do
          {
            WebKit::toWindowObject(a2, *(const OpaqueJSContext **)(*(_QWORD *)v49 + 88), v48);
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            if (v51)
              objc_msgSend(v35, "addObject:", v51);

            v49 += 8;
            v50 -= 8;
          }
          while (v50);
        }
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v47);
LABEL_65:
        v33 = (void *)objc_msgSend(v35, "copy");

        goto LABEL_34;
      }
      v26 = -256;
      LOBYTE(v27) = -3;
    }
LABEL_37:
    v29 = 1;
    goto LABEL_38;
  }
  objc_msgSend(v12, "doubleValue");
  v16 = v15;
  if (v15 == -1.0)
  {
    v17 = -256;
    LOBYTE(v18) = -2;
LABEL_10:
    v19 = 1;
    goto LABEL_11;
  }
  v19 = 0;
  if ((v15 < 0.0 || ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
    && (unint64_t)(*(_QWORD *)&v15 - 1) > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v18) = 0;
    v17 = 0;
  }
  else
  {
    LOBYTE(v18) = 0;
    v17 = 0;
    if (v15 < 1.84467441e19)
    {
      if (modf(v15, &__y) == 0.0)
      {
        v18 = (unint64_t)v16;
        if ((unint64_t)v16 - 1 < 0xFFFFFFFFFFFFFFFELL)
        {
          v17 = (unint64_t)v16 & 0xFFFFFFFFFFFFFF00;
        }
        else
        {
          LOBYTE(v18) = -2;
          v17 = -256;
        }
        goto LABEL_10;
      }
      v19 = 0;
      LOBYTE(v18) = 0;
      v17 = 0;
    }
  }
LABEL_11:
  v20 = v17 & 0xFFFFFFFFFFFFFF00 | v18;
  if (WebKit::isValid(v20, v19, a4, v14))
    goto LABEL_14;
  v11 = v13;
LABEL_31:

LABEL_32:
LABEL_33:
  v33 = 0;
LABEL_34:

  return v33;
}

void sub_1976BD5D8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;

  CFRelease(*(CFTypeRef *)(v2 - 8));
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(uint64_t a1, _QWORD *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  WebKit::WebProcess *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = a2;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v3);
    a2 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  ++*(_DWORD *)(a1 + 48);
  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1631;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v16 = (IPC::Encoder *)v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34F50A0;
  v7[1] = a1;
  v7[2] = v4;
  v15[0] = v7;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v3 + 2) + 40))((_QWORD *)v3 + 2, &v16, v15, 0);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_1976BD7D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

id WebKit::toWindowObject(WebKit *this, const OpaqueJSContext *a2, WebKit::WebFrame *a3)
{
  const OpaqueJSContext *v4;
  void *GlobalObject;
  void *v6;
  void *v7;

  v4 = (const OpaqueJSContext *)WebKit::WebFrame::jsContext(a2);
  if (v4)
  {
    GlobalObject = JSContextGetGlobalObject(v4);
    if (GlobalObject)
    {
      v6 = (void *)MEMORY[0x1E0CBE108];
      objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(this));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "valueWithJSValueRef:inContext:", GlobalObject, v7);
      GlobalObject = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    GlobalObject = 0;
  }
  return GlobalObject;
}

void sub_1976BD91C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ExtensionIsAllowedIncognitoAccess,WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F50A0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ExtensionIsAllowedIncognitoAccess,WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F50A0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ExtensionIsAllowedIncognitoAccess,WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  WebKit::WebExtensionCallbackHandler *v4;
  id v5;
  objc_object *v6;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3 != 0);
    v6 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v5 = WebKit::WebExtensionCallbackHandler::call(v4, v6);

  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::ExtensionIsAllowedIncognitoAccess,WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976BDA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::ExtensionIsAllowedIncognitoAccess,WebKit::WebExtensionAPIExtension::isAllowedIncognitoAccess(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  id v2;
  objc_object *v3;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0);
  v3 = (objc_object *)objc_claimAutoreleasedReturnValue();
  v2 = WebKit::WebExtensionCallbackHandler::call(a1, v3);

}

void sub_1976BDAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPILocalization::getMessage(WebKit::WebExtensionAPILocalization *this, NSString *a2, objc_object *a3)
{
  NSString *v5;
  objc_object *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WTF::RetainPtr<NSMutableArray>::get((id *)(*((_QWORD *)this + 3) + 96));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v12[0] = v6;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 1);
    v8 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v9 = 0;
      goto LABEL_7;
    }
    WebKit::filterObjects<NSArray>(v6, &__block_literal_global_33);
    v8 = objc_claimAutoreleasedReturnValue();
  }
  v9 = (void *)v8;
LABEL_7:
  objc_msgSend(v7, "localizedStringForKey:withPlaceholders:", v5, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1976BDC4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit27WebExtensionAPILocalization10getMessageEP8NSStringP11objc_object_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  char isKindOfClass;

  v3 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_1976BDCBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPILocalization::getUILanguage(WebKit::WebExtensionAPILocalization *this)
{
  WebKit *v1;
  NSLocale *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v1 = (WebKit *)objc_claimAutoreleasedReturnValue();
  WebKit::toWebAPI(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1976BDD0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPILocalization::getAcceptLanguages(uint64_t a1, WebKit::WebExtensionCallbackHandler **a2)
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  void *v11;
  WebKit::WebExtensionCallbackHandler *v12;
  objc_object *v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLanguages");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E10], "orderedSetWithCapacity:", objc_msgSend(v3, "count"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v5);
        v9 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(v4, "addObject:", v9, (_QWORD)v15);
        objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "languageCode");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addObject:", v11);

      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  v12 = *a2;
  objc_msgSend(v4, "array");
  v13 = (objc_object *)objc_claimAutoreleasedReturnValue();
  v14 = WebKit::WebExtensionCallbackHandler::call(v12, v13);

}

void sub_1976BDEB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIMenus::parseCreateAndUpdateProperties(uint64_t a1, int a2, void *a3, uint64_t a4, WebKit::WebExtensionCallbackHandler **a5, _QWORD *a6)
{
  uint64_t v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  NSString *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t k;
  void *v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  char v27;
  int m;
  int v29;
  WTF *v30;
  NSString *v31;
  WTF::StringImpl *v32;
  const WTF::StringImpl *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int n;
  uint64_t v39;
  WTF *v40;
  __int16 v41;
  WTF::StringImpl *v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t ii;
  uint64_t v49;
  const WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  NSString *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t jj;
  uint64_t v62;
  const WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  NSString *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  void *v68;
  void *v69;
  void *v70;
  NSString *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  void *v78;
  WTF::StringImpl *v79;
  void *v80;
  void *v81;
  void *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  NSString *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  NSString *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  int v98;
  WTF::StringImpl *v99;
  JSValue *v100;
  JSValue *v101;
  NSString *v102;
  WebKit::WebExtensionCallbackHandler *v103;
  WebKit::WebExtensionCallbackHandler *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  void *v108;
  id v109;
  NSString *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t kk;
  WebKit::WebExtensionAPIAction *v114;
  NSString *v115;
  void *v116;
  void *v117;
  void *v118;
  BOOL v119;
  id v120;
  void *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  void *v128;
  NSString *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  int v133;
  WTF::StringImpl *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  WTF::StringImpl *v141;
  _DWORD *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  void *v146;
  void *v147;
  uint64_t v148;
  void *v149;
  void *v150;
  uint64_t v151;
  void *v152;
  void *v153;
  uint64_t v154;
  void *v155;
  void *v156;
  uint64_t v157;
  const WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  int v160;
  WTF::StringImpl **v161;
  unsigned int v162;
  unsigned int v163;
  char *v164;
  int i;
  unsigned int v166;
  WTF::StringImpl **v167;
  WTF *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  int v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t j;
  WTF::StringImpl *v175;
  void *v176;
  id v177;
  id v178;
  void *v180;
  id v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  id v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int16 v202;
  __int16 v203;
  __int16 v204;
  __int16 v205;
  __int16 v206;
  __int16 v207;
  __int16 v208;
  __int16 v209;
  __int16 v210;
  __int16 v211;
  __int16 v212;
  __int16 v213;
  WTF::StringImpl *Table;
  WTF::StringImpl *v215;
  _DWORD *v216;
  char v217;
  __int16 v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221[2];
  unsigned __int8 v222[24];
  unsigned __int8 v223[24];
  int v224;
  _BYTE v225[128];
  const __CFString *v226;
  uint64_t v227;
  _BYTE v228[128];
  _BYTE v229[128];
  _BYTE v230[128];
  id v231[2];
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD v246[13];
  _QWORD v247[13];
  _QWORD v248[3];

  LODWORD(v6) = a2;
  v248[1] = *MEMORY[0x1E0C80C00];
  v184 = a3;
  if ((_MergedGlobals_110 & 1) == 0)
  {
LABEL_220:
    v248[0] = CFSTR("title");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v248, 1);
    qword_1ECE73090 = objc_claimAutoreleasedReturnValue();
    _MergedGlobals_110 = 1;
  }
  if ((byte_1ECE73089 & 1) == 0)
  {
    v246[0] = CFSTR("checked");
    v247[0] = objc_opt_class();
    v246[1] = CFSTR("command");
    v247[1] = objc_opt_class();
    v246[2] = CFSTR("contexts");
    v245 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v245, 1);
    v178 = (id)objc_claimAutoreleasedReturnValue();
    v247[2] = v178;
    v246[3] = CFSTR("documentUrlPatterns");
    v244 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v244, 1);
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    v247[3] = v146;
    v246[4] = CFSTR("enabled");
    v247[4] = objc_opt_class();
    v246[5] = CFSTR("icons");
    v147 = (void *)MEMORY[0x1E0C99E40];
    v148 = objc_opt_class();
    objc_msgSend(v147, "orderedSetWithObjects:", v148, objc_opt_class(), 0);
    v149 = (void *)objc_claimAutoreleasedReturnValue();
    v247[5] = v149;
    v246[6] = CFSTR("id");
    v150 = (void *)MEMORY[0x1E0C99E40];
    v151 = objc_opt_class();
    objc_msgSend(v150, "orderedSetWithObjects:", v151, objc_opt_class(), 0);
    v152 = (void *)objc_claimAutoreleasedReturnValue();
    v247[6] = v152;
    v246[7] = CFSTR("onclick");
    v247[7] = objc_opt_class();
    v246[8] = CFSTR("parentId");
    v153 = (void *)MEMORY[0x1E0C99E40];
    v154 = objc_opt_class();
    objc_msgSend(v153, "orderedSetWithObjects:", v154, objc_opt_class(), 0);
    v155 = (void *)objc_claimAutoreleasedReturnValue();
    v247[8] = v155;
    v246[9] = CFSTR("targetUrlPatterns");
    v243 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v243, 1);
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    v247[9] = v156;
    v246[10] = CFSTR("title");
    v247[10] = objc_opt_class();
    v246[11] = CFSTR("type");
    v247[11] = objc_opt_class();
    v246[12] = CFSTR("visible");
    v247[12] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v247, v246, 13);
    qword_1ECE73098 = objc_claimAutoreleasedReturnValue();

    byte_1ECE73089 = 1;
  }
  WebKit::objectForKey<NSString>(v184, (uint64_t)CFSTR("type"), 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isEqualToString:", CFSTR("separator"));

  if (v8 | v6)
    v9 = 0;
  else
    v9 = (void *)qword_1ECE73090;
  if (!WebKit::validateDictionary(v184, CFSTR("properties"), v9, (void *)qword_1ECE73098, a6))
  {
    v13 = 0;
    goto LABEL_180;
  }
  v215 = 0;
  LOBYTE(v216) = 0;
  v217 = 0;
  v218 = 0;
  v222[0] = 0;
  v222[16] = 0;
  v223[0] = 0;
  v223[16] = 0;
  LOBYTE(v224) = 0;
  BYTE2(v224) = 0;
  v220 = 0;
  memset(v221, 0, 14);
  v219 = 0;
  objc_msgSend(v184, "objectForKeyedSubscript:", CFSTR("type"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
  {
    if ((objc_msgSend(v10, "isEqualToString:", CFSTR("normal")) & 1) != 0)
    {
      v12 = 256;
    }
    else if ((objc_msgSend(v11, "isEqualToString:", CFSTR("checkbox")) & 1) != 0)
    {
      v12 = 257;
    }
    else if ((objc_msgSend(v11, "isEqualToString:", CFSTR("radio")) & 1) != 0)
    {
      v12 = 258;
    }
    else
    {
      if ((objc_msgSend(v11, "isEqualToString:", CFSTR("separator")) & 1) == 0)
      {
        WebKit::toErrorString(0, CFSTR("type"), CFSTR("it must specify either 'normal', 'checkbox', 'radio', or 'separator'"), v14);
        *a6 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_178;
      }
      v12 = 259;
    }
    v218 = v12;
  }

  objc_msgSend(v184, "objectForKeyedSubscript:", CFSTR("contexts"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v15)
    goto LABEL_76;
  v177 = v15;
  if ((byte_1ECE7308A & 1) == 0)
  {
    v213 = 1;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)v231, (uint64_t)"action", 7, &v213);
    v212 = 2;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v232, (uint64_t)"audio", 6, &v212);
    v211 = 1;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v233, (uint64_t)"browser_action", 15, &v211);
    v210 = 4;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v234, (uint64_t)"editable", 9, &v210);
    v209 = 8;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v235, (uint64_t)"frame", 6, &v209);
    v208 = 16;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v236, (uint64_t)"image", 6, &v208);
    v207 = 32;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v237, (uint64_t)"link", 5, &v207);
    v206 = 64;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v238, (uint64_t)"page", 5, &v206);
    v205 = 1;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v239, (uint64_t)"page_action", 12, &v205);
    v204 = 128;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v240, (uint64_t)"selection", 10, &v204);
    v203 = 256;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v241, (uint64_t)"tab", 4, &v203);
    v202 = 512;
    WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>((uint64_t)&v242, (uint64_t)"video", 6, &v202);
    Table = 0;
    v157 = 0;
    Table = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtensionMenuItemContextType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtensionMenuItemContextType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(0x20u);
    *((_OWORD *)Table - 1) = xmmword_1978D24A0;
    while (1)
    {
      v159 = Table;
      if (Table
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtensionMenuItemContextType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtensionMenuItemContextType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&Table),
            (v159 = Table) != 0))
      {
        v160 = *((_DWORD *)v159 - 2);
      }
      else
      {
        v160 = 0;
      }
      v161 = (WTF::StringImpl **)&v231[2 * v157];
      v162 = *((_DWORD *)*v161 + 4);
      if (v162 >= 0x100)
        v163 = v162 >> 8;
      else
        v163 = WTF::StringImpl::hashSlowCase(*v161);
      v164 = 0;
      for (i = 1; ; ++i)
      {
        v166 = v163 & v160;
        v167 = (WTF::StringImpl **)((char *)v159 + 16 * (v163 & v160));
        v168 = *v167;
        if (*v167 == (WTF::StringImpl *)-1)
        {
          v164 = (char *)v159 + 16 * v166;
          goto LABEL_234;
        }
        if (!v168)
          break;
        if ((WTF::equal(v168, *v161, v158) & 1) != 0)
          goto LABEL_243;
LABEL_234:
        v163 = i + v166;
      }
      if (v164)
      {
        *(_QWORD *)v164 = 0;
        *((_WORD *)v164 + 4) = 0;
        --*((_DWORD *)Table - 4);
        v167 = (WTF::StringImpl **)v164;
      }
      WTF::String::operator=(v167, (WTF::StringImpl *)&v231[2 * v157]);
      *((_WORD *)v167 + 4) = *((_WORD *)v161 + 4);
      v170 = Table;
      if (Table)
        v171 = *((_DWORD *)Table - 3) + 1;
      else
        v171 = 1;
      *((_DWORD *)Table - 3) = v171;
      v172 = (*((_DWORD *)v170 - 4) + v171);
      v173 = *((unsigned int *)v170 - 1);
      if (v173 > 0x400)
      {
        if (v173 <= 2 * v172)
LABEL_242:
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtensionMenuItemContextType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtensionMenuItemContextType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)&Table);
      }
      else if (3 * v173 <= 4 * v172)
      {
        goto LABEL_242;
      }
LABEL_243:
      if (++v157 == 12)
      {
        qword_1ECE730A0 = (uint64_t)Table;
        for (j = 22; j != -2; j -= 2)
        {
          v175 = (WTF::StringImpl *)v231[j];
          v231[j] = 0;
          if (v175)
          {
            if (*(_DWORD *)v175 == 2)
              WTF::StringImpl::destroy(v175, v169);
            else
              *(_DWORD *)v175 -= 2;
          }
        }
        byte_1ECE7308A = 1;
        v15 = v177;
        break;
      }
    }
  }
  if (!BYTE2(v224))
    BYTE2(v224) = 1;
  LOWORD(v224) = 0;
  v198 = 0u;
  v199 = 0u;
  v200 = 0u;
  v201 = 0u;
  v16 = v15;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v198, v230, 16);
  if (!v17)
    goto LABEL_75;
  v6 = *(_QWORD *)v199;
  while (2)
  {
    for (k = 0; k != v17; ++k)
    {
      if (*(_QWORD *)v199 != v6)
        objc_enumerationMutation(v16);
      v19 = *(void **)(*((_QWORD *)&v198 + 1) + 8 * k);
      if (objc_msgSend(v19, "isEqualToString:", CFSTR("all")))
      {
        if (!BYTE2(v224))
          BYTE2(v224) = 1;
        LOWORD(v224) = 1023;
        goto LABEL_75;
      }
      MEMORY[0x19AEABCC8](v231, v19);
      v22 = qword_1ECE730A0;
      v23 = (WTF::StringImpl *)v231[0];
      if (qword_1ECE730A0)
      {
        v24 = *(_DWORD *)(qword_1ECE730A0 - 8);
        v25 = *((_DWORD *)v231[0] + 4);
        if (v25 >= 0x100)
          v26 = v25 >> 8;
        else
          v26 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v231[0]);
        for (m = 0; ; v26 = m + v29)
        {
          v29 = v26 & v24;
          v30 = *(WTF **)(v22 + 16 * (v26 & v24));
          if (v30 != (WTF *)-1)
          {
            if (!v30)
            {
              v27 = 0;
              goto LABEL_41;
            }
            if ((WTF::equal(v30, (const WTF::StringImpl *)v231[0], v21) & 1) != 0)
              break;
          }
          ++m;
        }
        v27 = 1;
LABEL_41:
        v23 = (WTF::StringImpl *)v231[0];
      }
      else
      {
        v27 = 0;
      }
      v231[0] = 0;
      if (!v23)
        goto LABEL_45;
      if (*(_DWORD *)v23 != 2)
      {
        *(_DWORD *)v23 -= 2;
LABEL_45:
        if ((v27 & 1) == 0)
          continue;
        goto LABEL_48;
      }
      WTF::StringImpl::destroy(v23, v20);
      if ((v27 & 1) == 0)
        continue;
LABEL_48:
      if (objc_msgSend(v19, "isEqualToString:", CFSTR("action"))
        && *(double *)(*(_QWORD *)(a1 + 24) + 112) < 3.0
        || ((objc_msgSend(v19, "isEqualToString:", CFSTR("browser_action")) & 1) != 0
         || objc_msgSend(v19, "isEqualToString:", CFSTR("page_action")))
        && *(double *)(*(_QWORD *)(a1 + 24) + 112) >= 3.0)
      {
        WebKit::toErrorString(0, CFSTR("contexts"), CFSTR("'%@' is not a valid context"), v31, v19);
        *a6 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_178;
      }
      if (!BYTE2(v224))
      {
        std::__throw_bad_optional_access[abi:sn180100]();
        __break(1u);
        goto LABEL_220;
      }
      MEMORY[0x19AEABCC8](v231, v19);
      v34 = qword_1ECE730A0;
      if (qword_1ECE730A0)
      {
        v35 = *(_DWORD *)(qword_1ECE730A0 - 8);
        v36 = *((_DWORD *)v231[0] + 4);
        if (v36 >= 0x100)
          v37 = v36 >> 8;
        else
          v37 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v231[0]);
        for (n = 0; ; v37 = n + v39)
        {
          v39 = v37 & v35;
          v40 = *(WTF **)(v34 + 16 * v39);
          if (v40 != (WTF *)-1)
          {
            if (!v40)
              goto LABEL_63;
            if ((WTF::equal(v40, (const WTF::StringImpl *)v231[0], v33) & 1) != 0)
              break;
          }
          ++n;
        }
        v41 = *(_WORD *)(v34 + 16 * v39 + 8);
      }
      else
      {
LABEL_63:
        v41 = 0;
      }
      LOWORD(v224) = v224 | v41;
      v42 = (WTF::StringImpl *)v231[0];
      v231[0] = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v32);
        else
          *(_DWORD *)v42 -= 2;
      }
    }
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v198, v230, 16);
    if (v17)
      continue;
    break;
  }
LABEL_75:

  v15 = v177;
LABEL_76:

  objc_msgSend(v184, "objectForKeyedSubscript:", CFSTR("documentUrlPatterns"));
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = v43;
  if (v43)
  {
    v196 = 0u;
    v197 = 0u;
    v194 = 0u;
    v195 = 0u;
    v45 = v43;
    v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v194, v229, 16);
    if (v46)
    {
      v47 = *(_QWORD *)v195;
      while (2)
      {
        for (ii = 0; ii != v46; ++ii)
        {
          if (*(_QWORD *)v195 != v47)
            objc_enumerationMutation(v45);
          v49 = *(_QWORD *)(*((_QWORD *)&v194 + 1) + 8 * ii);
          MEMORY[0x19AEABCC8](&Table, v49);
          WebKit::WebExtensionMatchPattern::getOrCreate(&Table, v50, v231);
          v53 = Table;
          Table = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v51);
            else
              *(_DWORD *)v53 -= 2;
          }
          if (!v231[0]
            || (WebKit::WebExtensionMatchPattern::isSupported((WebKit::WebExtensionMatchPattern *)v231[0]) & 1) == 0)
          {
            WebKit::toErrorString(0, CFSTR("documentUrlPatterns"), CFSTR("'%@' is not a valid pattern"), v52, v49);
            *a6 = (id)objc_claimAutoreleasedReturnValue();
            v77 = (WTF::StringImpl *)v231[0];
            v231[0] = 0;
            if (v77)
              CFRelease(*((CFTypeRef *)v77 + 1));

            goto LABEL_178;
          }
          v54 = (WTF::StringImpl *)v231[0];
          v231[0] = 0;
          if (v54)
            CFRelease(*((CFTypeRef *)v54 + 1));
        }
        v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v194, v229, 16);
        if (v46)
          continue;
        break;
      }
    }

    WTF::makeVector<WTF::String>(v45, (uint64_t)v231);
    std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v222, v231);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v231, v55);
  }

  objc_msgSend(v184, "objectForKeyedSubscript:", CFSTR("targetUrlPatterns"));
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = v56;
  if (v56)
  {
    v192 = 0u;
    v193 = 0u;
    v190 = 0u;
    v191 = 0u;
    v58 = v56;
    v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v190, v228, 16);
    if (v59)
    {
      v60 = *(_QWORD *)v191;
      while (2)
      {
        for (jj = 0; jj != v59; ++jj)
        {
          if (*(_QWORD *)v191 != v60)
            objc_enumerationMutation(v58);
          v62 = *(_QWORD *)(*((_QWORD *)&v190 + 1) + 8 * jj);
          MEMORY[0x19AEABCC8](&Table, v62);
          WebKit::WebExtensionMatchPattern::getOrCreate(&Table, v63, v231);
          v66 = Table;
          Table = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2)
              WTF::StringImpl::destroy(v66, v64);
            else
              *(_DWORD *)v66 -= 2;
          }
          v67 = (WTF::StringImpl *)v231[0];
          if (!v231[0] || !*((_BYTE *)v231[0] + 49))
          {
            WebKit::toErrorString(0, CFSTR("targetUrlPatterns"), CFSTR("'%@' is not a valid pattern"), v65, v62);
            *a6 = (id)objc_claimAutoreleasedReturnValue();
            v79 = (WTF::StringImpl *)v231[0];
            v231[0] = 0;
            if (v79)
              CFRelease(*((CFTypeRef *)v79 + 1));

            goto LABEL_178;
          }
          v231[0] = 0;
          CFRelease(*((CFTypeRef *)v67 + 1));
        }
        v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v190, v228, 16);
        if (v59)
          continue;
        break;
      }
    }

    WTF::makeVector<WTF::String>(v58, (uint64_t)v231);
    std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v223, v231);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v231, v68);
  }

  WebKit::objectForKey<NSString>(v184, (uint64_t)CFSTR("id"), 0);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  v70 = v69;
  if (!v69)
  {
    WebKit::objectForKey<NSNumber>(v184, (uint64_t)CFSTR("id"));
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    v81 = v80;
    if (v80)
    {
      objc_msgSend(v80, "stringValue");
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      MEMORY[0x19AEABCC8](v231, v82);
      v84 = (WTF::StringImpl *)v231[0];
      v231[0] = 0;
      v85 = v215;
      v215 = v84;
      if (v85)
      {
        if (*(_DWORD *)v85 == 2)
        {
          WTF::StringImpl::destroy(v85, v83);
          v87 = (WTF::StringImpl *)v231[0];
          v231[0] = 0;
          if (v87)
          {
            if (*(_DWORD *)v87 == 2)
              WTF::StringImpl::destroy(v87, v86);
            else
              *(_DWORD *)v87 -= 2;
          }
        }
        else
        {
          *(_DWORD *)v85 -= 2;
          v231[0] = 0;
        }
      }

    }
    goto LABEL_135;
  }
  if (!objc_msgSend(v69, "length"))
  {
    WebKit::toErrorString(0, CFSTR("id"), CFSTR("it must not be empty"), v71);
    *a6 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_178;
  }
  MEMORY[0x19AEABCC8](v231, v70);
  v73 = (WTF::StringImpl *)v231[0];
  v231[0] = 0;
  v74 = v215;
  v215 = v73;
  if (v74)
  {
    v75 = *(_DWORD *)v74 - 2;
    if (*(_DWORD *)v74 != 2)
      goto LABEL_114;
    WTF::StringImpl::destroy(v74, v72);
    v74 = (WTF::StringImpl *)v231[0];
    v231[0] = 0;
    if (v74)
    {
      v75 = *(_DWORD *)v74 - 2;
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v76);
      else
LABEL_114:
        *(_DWORD *)v74 = v75;
    }
  }
LABEL_135:

  WebKit::objectForKey<NSString>(v184, (uint64_t)CFSTR("parentId"), 0);
  v88 = (WTF::StringImpl *)objc_claimAutoreleasedReturnValue();
  v231[0] = v88;
  if (!v88)
  {
    WebKit::objectForKey<NSNumber>(v184, (uint64_t)CFSTR("parentId"));
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    v91 = v90;
    if (v90)
    {
      objc_msgSend(v90, "stringValue");
      v189 = (id)objc_claimAutoreleasedReturnValue();
      std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)&v216, &v189);

    }
LABEL_141:

    objc_msgSend(v184, "objectForKeyedSubscript:", CFSTR("title"));
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    v93 = v92;
    if (!v92)
      goto LABEL_150;
    if (!objc_msgSend(v92, "length") && (!HIBYTE(v218) || v218 != 3))
    {
      WebKit::toErrorString(0, CFSTR("title"), CFSTR("it must not be empty"), v94);
      *a6 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_178;
    }
    MEMORY[0x19AEABCC8](v231, v93);
    v96 = (WTF::StringImpl *)v231[0];
    v231[0] = 0;
    v97 = v219;
    v219 = v96;
    if (!v97)
      goto LABEL_150;
    v98 = *(_DWORD *)v97 - 2;
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::destroy(v97, v95);
      v97 = (WTF::StringImpl *)v231[0];
      v231[0] = 0;
      if (!v97)
      {
LABEL_150:

        objc_msgSend(v184, "objectForKeyedSubscript:", CFSTR("onclick"));
        v100 = (JSValue *)objc_claimAutoreleasedReturnValue();
        v101 = v100;
        if (v100)
        {
          if (!-[JSValue _isFunction](v100, "_isFunction"))
          {
            WebKit::toErrorString(0, CFSTR("onclick"), CFSTR("it must be a function"), v102);
            *a6 = (id)objc_claimAutoreleasedReturnValue();

            goto LABEL_178;
          }
          v103 = (WebKit::WebExtensionCallbackHandler *)WTF::fastMalloc((WTF *)0x28);
          WebKit::WebExtensionCallbackHandler::WebExtensionCallbackHandler(v103, v101);
          v104 = *a5;
          *a5 = v103;
          if (v104)
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v104);

        }
        WebKit::objectForKey<NSString>(v184, (uint64_t)CFSTR("icons"), 1);
        v105 = objc_claimAutoreleasedReturnValue();
        v106 = (void *)v105;
        if (v105)
        {
          v226 = CFSTR("16");
          v227 = v105;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v227, &v226, 1);
          v180 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v180 = 0;
        }

        WebKit::objectForKey<NSDictionary>(v184, (uint64_t)CFSTR("icons"), 1, 0);
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        v108 = v107;
        if (v107)
        {
          v187 = 0u;
          v188 = 0u;
          v185 = 0u;
          v186 = 0u;
          v109 = v107;
          v111 = objc_msgSend(v109, "countByEnumeratingWithState:objects:count:", &v185, v225, 16);
          v176 = v108;
          if (v111)
          {
            v112 = *(_QWORD *)v186;
            while (2)
            {
              for (kk = 0; kk != v111; ++kk)
              {
                if (*(_QWORD *)v186 != v112)
                  objc_enumerationMutation(v109);
                v114 = *(WebKit::WebExtensionAPIAction **)(*((_QWORD *)&v185 + 1) + 8 * kk);
                if (!WebKit::WebExtensionAPIAction::isValidDimensionKey(v114, v110))
                {
                  WebKit::toErrorString(0, CFSTR("icons"), CFSTR("'%@' in not a valid dimension"), v115, v114);
                  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_176:

                  goto LABEL_216;
                }
                objc_msgSend(v109, "objectForKeyedSubscript:", v114);
                v116 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@[%@]"), CFSTR("icons"), v114);
                v117 = (void *)objc_claimAutoreleasedReturnValue();
                v118 = (void *)objc_opt_class();
                v119 = WebKit::validateObject(v116, v117, v118, a6);

                if (!v119)
                  goto LABEL_176;
              }
              v111 = objc_msgSend(v109, "countByEnumeratingWithState:objects:count:", &v185, v225, 16);
              if (v111)
                continue;
              break;
            }
          }

          v120 = v109;
          v180 = v120;
          v108 = v176;
        }

        if (objc_msgSend(v180, "count"))
        {
          WebKit::encodeJSONString(v180, 0, 0);
          v121 = (void *)objc_claimAutoreleasedReturnValue();
          MEMORY[0x19AEABCC8](v231, v121);
          v123 = (WTF::StringImpl *)v231[0];
          v231[0] = 0;
          v124 = v221[0];
          v221[0] = v123;
          if (v124)
          {
            if (*(_DWORD *)v124 == 2)
            {
              WTF::StringImpl::destroy(v124, v122);
              v127 = (WTF::StringImpl *)v231[0];
              v231[0] = 0;
              if (v127)
              {
                if (*(_DWORD *)v127 == 2)
                  WTF::StringImpl::destroy(v127, v126);
                else
                  *(_DWORD *)v127 -= 2;
              }
            }
            else
            {
              *(_DWORD *)v124 -= 2;
              v231[0] = 0;
            }
          }

        }
        objc_msgSend(v184, "objectForKeyedSubscript:", CFSTR("command"));
        v128 = (void *)objc_claimAutoreleasedReturnValue();
        v109 = v128;
        if (v128)
        {
          if (!objc_msgSend(v128, "length"))
          {
            WebKit::toErrorString(0, CFSTR("command"), CFSTR("it must not be empty"), v129);
            *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_216:

            v13 = 0;
            goto LABEL_217;
          }
          MEMORY[0x19AEABCC8](v231, v109);
          v131 = (WTF::StringImpl *)v231[0];
          v231[0] = 0;
          v132 = v220;
          v220 = v131;
          if (v132)
          {
            v133 = *(_DWORD *)v132 - 2;
            if (*(_DWORD *)v132 != 2)
            {
LABEL_193:
              *(_DWORD *)v132 = v133;
              goto LABEL_194;
            }
            WTF::StringImpl::destroy(v132, v130);
            v132 = (WTF::StringImpl *)v231[0];
            v231[0] = 0;
            if (v132)
            {
              v133 = *(_DWORD *)v132 - 2;
              if (*(_DWORD *)v132 == 2)
              {
                WTF::StringImpl::destroy(v132, v134);
                goto LABEL_194;
              }
              goto LABEL_193;
            }
          }
        }
LABEL_194:

        objc_msgSend(v184, "objectForKeyedSubscript:", CFSTR("checked"));
        v135 = (void *)objc_claimAutoreleasedReturnValue();
        v136 = v135;
        if (v135)
          LOWORD(v221[1]) = objc_msgSend(v135, "BOOLValue") | 0x100;

        objc_msgSend(v184, "objectForKeyedSubscript:", CFSTR("enabled"));
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        v138 = v137;
        if (v137)
          WORD1(v221[1]) = objc_msgSend(v137, "BOOLValue") | 0x100;

        objc_msgSend(v184, "objectForKeyedSubscript:", CFSTR("visible"));
        v139 = (void *)objc_claimAutoreleasedReturnValue();
        v140 = v139;
        if (v139)
          WORD2(v221[1]) = objc_msgSend(v139, "BOOLValue") | 0x100;

        if (*(_BYTE *)(a4 + 120))
        {
          WTF::String::operator=((WTF::StringImpl **)a4, (WTF::StringImpl *)&v215);
          std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>((WTF::StringImpl **)(a4 + 8), (WTF::StringImpl *)&v216);
          *(_WORD *)(a4 + 24) = v218;
          WTF::String::operator=((WTF::StringImpl **)(a4 + 32), (WTF::StringImpl *)&v219);
          WTF::String::operator=((WTF::StringImpl **)(a4 + 40), (WTF::StringImpl *)&v220);
          WTF::String::operator=((WTF::StringImpl **)(a4 + 48), (WTF::StringImpl *)v221);
          *(_DWORD *)(a4 + 56) = v221[1];
          *(_WORD *)(a4 + 60) = WORD2(v221[1]);
          std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a4 + 64), v222);
          std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((unsigned int *)(a4 + 88), v223);
          *(_WORD *)(a4 + 112) = v224;
          *(_BYTE *)(a4 + 114) = BYTE2(v224);
          v13 = 1;
        }
        else
        {
          v141 = v215;
          if (v215)
            *(_DWORD *)v215 += 2;
          *(_QWORD *)a4 = v141;
          *(_BYTE *)(a4 + 8) = 0;
          *(_BYTE *)(a4 + 16) = 0;
          if (v217)
          {
            v142 = v216;
            if (v216)
              *v216 += 2;
            *(_QWORD *)(a4 + 8) = v142;
            *(_BYTE *)(a4 + 16) = 1;
          }
          *(_WORD *)(a4 + 24) = v218;
          v143 = v219;
          if (v219)
            *(_DWORD *)v219 += 2;
          *(_QWORD *)(a4 + 32) = v143;
          v144 = v220;
          if (v220)
            *(_DWORD *)v220 += 2;
          *(_QWORD *)(a4 + 40) = v144;
          v145 = v221[0];
          if (v221[0])
            *(_DWORD *)v221[0] += 2;
          *(_QWORD *)(a4 + 48) = v145;
          *(_DWORD *)(a4 + 56) = v221[1];
          *(_WORD *)(a4 + 60) = WORD2(v221[1]);
          std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(a4 + 64), (uint64_t)v222);
          std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(a4 + 88), (uint64_t)v223);
          *(_DWORD *)(a4 + 112) = v224;
          v13 = 1;
          *(_BYTE *)(a4 + 120) = 1;
        }
LABEL_217:

        goto LABEL_179;
      }
      v98 = *(_DWORD *)v97 - 2;
      if (*(_DWORD *)v97 == 2)
      {
        WTF::StringImpl::destroy(v97, v99);
        goto LABEL_150;
      }
    }
    *(_DWORD *)v97 = v98;
    goto LABEL_150;
  }
  if (-[WTF::StringImpl length](v88, "length"))
  {
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)&v216, v231);
    goto LABEL_141;
  }
  WebKit::toErrorString(0, CFSTR("parentId"), CFSTR("it must not be empty"), v89);
  *a6 = (id)objc_claimAutoreleasedReturnValue();

LABEL_178:
  v13 = 0;
LABEL_179:
  WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&v215, v78);
LABEL_180:

  return v13;
}

void sub_1976BF5C0(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,WTF::StringImpl *a57,char a58)
{
  uint64_t v59;
  WTF::StringImpl *v60;
  void *v61;

  v59 = 176;
  while (1)
  {
    v60 = *(WTF::StringImpl **)((char *)&STACK[0x410] + v59);
    *(unint64_t *)((char *)&STACK[0x410] + v59) = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, a2);
      else
        *(_DWORD *)v60 -= 2;
    }
    v59 -= 16;
    if (v59 == -16)
    {

      WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&a58, v61);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 16))
  {
    v4 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v4)
      WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v4));
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v5 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v5;
    LODWORD(v5) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 8) = v5;
    LODWORD(v5) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 12) = v5;
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

id WebKit::WebExtensionAPIMenus::createMenu(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5)
{
  id v9;
  uint64_t updated;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WebKit::WebProcess *v17;
  uint64_t v18;
  WebKit::WebExtensionCallbackHandler *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  void *v30;
  id result;
  WebKit::WebExtensionCallbackHandler *v32;
  WTF::StringImpl *v33[15];
  char v34;
  _QWORD v35[2];
  IPC::Encoder *v36;

  v9 = a3;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 2120);
  LOBYTE(v33[0]) = 0;
  v34 = 0;
  v32 = 0;
  updated = WebKit::WebExtensionAPIMenus::parseCreateAndUpdateProperties(a1, 0, v9, (uint64_t)v33, &v32, a5);
  if ((updated & 1) == 0)
  {
    if (v32)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v32);
    v30 = 0;
    goto LABEL_25;
  }
  if (!v34)
    goto LABEL_31;
  if (v33[0] && *((_DWORD *)v33[0] + 1))
    goto LABEL_11;
  WTF::createVersion4UUIDString((WTF *)updated);
  if (!v34)
  {
LABEL_31:
    result = std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  v13 = (WTF::StringImpl *)v35[0];
  v35[0] = 0;
  v14 = v33[0];
  v33[0] = v13;
  if (v14)
  {
    v15 = *(_DWORD *)v14 - 2;
    if (*(_DWORD *)v14 != 2)
    {
LABEL_10:
      *(_DWORD *)v14 = v15;
      goto LABEL_11;
    }
    WTF::StringImpl::destroy(v14, v12);
    v14 = (WTF::StringImpl *)v35[0];
    v35[0] = 0;
    if (v14)
    {
      v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v16);
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
LABEL_11:
  {
    v17 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v17);
  }
  if (!v34)
    goto LABEL_31;
  ++*(_DWORD *)(a1 + 48);
  v18 = *a4;
  *a4 = 0;
  v19 = v32;
  v20 = v33[0];
  v32 = 0;
  if (v33[0])
    *(_DWORD *)v33[0] += 2;
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v22 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v22 = 1632;
  *(_QWORD *)(v22 + 8) = v21;
  *(_QWORD *)(v22 + 528) = v22 + 16;
  *(_QWORD *)(v22 + 536) = v22 + 16;
  *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v22 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
  v36 = (IPC::Encoder *)v22;
  IPC::ArgumentCoder<WebKit::WebExtensionMenuItemParameters,void>::encode((IPC::Encoder *)v22, (uint64_t)v33);
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v23 = &off_1E34F5108;
  v23[1] = a1;
  v23[2] = a1;
  v23[3] = v18;
  v23[4] = v19;
  v23[5] = v20;
  v24 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v35[0] = v23;
  v35[1] = v24;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v17 + 2) + 40))((_QWORD *)v17 + 2, &v36, v35, 0);
  v26 = v35[0];
  v35[0] = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = v36;
  v36 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v25);
    WTF::fastFree(v28, v29);
  }
  if (!v34)
    goto LABEL_31;
  WebKit::toMenuIdentifierWebAPI((WebKit *)v33, (const WTF::String *)v25);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_25:
  if (v34)
    WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)v33, v11);

  return v30;
}

void sub_1976BFE5C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WebKit::WebExtensionCallbackHandler *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  uint64_t v26;
  WTF::StringImpl *v28;

  v28 = *(WTF::StringImpl **)(v26 - 88);
  *(_QWORD *)(v26 - 88) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, a2);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (a9)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(a9);
  if (a25)
    WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&a10, a2);

  _Unwind_Resume(a1);
}

__CFString *WebKit::toMenuIdentifierWebAPI(WebKit *this, const WTF::String *a2)
{
  __CFString *v3;
  __CFString *v4;
  BOOL v6;

  v6 = 0;
  WTF::String::toDouble(this, &v6);
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
    v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (*(_QWORD *)this)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v3 = v4;
  }
  return v3;
}

void WebKit::WebExtensionAPIMenus::update(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, _QWORD *a6)
{
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  WebKit::WebProcess *v20;
  uint64_t v21;
  WebKit::WebExtensionCallbackHandler *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  __int128 v36;
  WebKit::WebExtensionCallbackHandler *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WebKit::WebExtensionCallbackHandler *v41;
  _QWORD v42[15];
  char v43;
  _QWORD v44[2];
  IPC::Encoder *v45;

  v11 = a3;
  v12 = a4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 2120);
  v13 = (void *)MEMORY[0x1E0C99E40];
  v14 = objc_opt_class();
  objc_msgSend(v13, "orderedSetWithObjects:", v14, objc_opt_class(), 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v14) = WebKit::validateObject(v11, CFSTR("identifier"), v15, a6);

  if ((v14 & 1) == 0)
    goto LABEL_26;
  LOBYTE(v42[0]) = 0;
  v43 = 0;
  v41 = 0;
  if ((WebKit::WebExtensionAPIMenus::parseCreateAndUpdateProperties(a1, 1, v12, (uint64_t)v42, &v41, a6) & 1) == 0)
  {
    if (v41)
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v41);
    goto LABEL_24;
  }
  objc_opt_class();
  WTF::dynamic_objc_cast<NSNumber>(v11);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v17;
  if (v17)
  {
    objc_msgSend(v17, "stringValue");
    v19 = objc_claimAutoreleasedReturnValue();

    v11 = (id)v19;
  }

  {
    v20 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v20);
  }
  MEMORY[0x19AEABCC8](&v40, v11);
  if (v43)
  {
    ++*(_DWORD *)(a1 + 48);
    v35 = a1;
    *(_QWORD *)&v36 = a1;
    v21 = *a5;
    *a5 = 0;
    v22 = v41;
    v41 = 0;
    *((_QWORD *)&v36 + 1) = v21;
    v37 = v22;
    v23 = v42[0];
    if (v42[0])
      *(_DWORD *)v42[0] += 2;
    v38 = v23;
    MEMORY[0x19AEABCC8](&v39, v11);
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v25 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v25 = 1635;
    *(_QWORD *)(v25 + 8) = v24;
    *(_QWORD *)(v25 + 528) = v25 + 16;
    *(_QWORD *)(v25 + 536) = v25 + 16;
    *(_OWORD *)(v25 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v25 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v25);
    v45 = (IPC::Encoder *)v25;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, (uint64_t *)&v40);
    IPC::ArgumentCoder<WebKit::WebExtensionMenuItemParameters,void>::encode((IPC::Encoder *)v25, (uint64_t)v42);
    v26 = v39;
    v39 = 0;
    v27 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v27 = &off_1E34F5130;
    *(_QWORD *)(v27 + 8) = v35;
    *(_OWORD *)(v27 + 16) = v36;
    *(_QWORD *)(v27 + 32) = v37;
    *(_QWORD *)(v27 + 40) = v38;
    *(_QWORD *)(v27 + 48) = v26;
    v28 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v44[0] = v27;
    v44[1] = v28;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v20 + 2) + 40))((_QWORD *)v20 + 2, &v45, v44, 0);
    v29 = v44[0];
    v44[0] = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      IPC::Encoder::~Encoder(v30, v16);
      WTF::fastFree(v31, v32);
    }
    v33 = v39;
    v39 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v40;
    v40 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v16);
      else
        *(_DWORD *)v34 -= 2;
    }
LABEL_24:
    if (v43)
      WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)v42, v16);
LABEL_26:

    return;
  }
  std::__throw_bad_optional_access[abi:sn180100]();
  __break(1u);
}

void sub_1976C0418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WebKit::WebExtensionCallbackHandler *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v38;

  if (a18)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(a18);
  if (a34)
    WebKit::WebExtensionMenuItemParameters::~WebExtensionMenuItemParameters((WebKit::WebExtensionMenuItemParameters *)&a19, v38);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIMenus::remove(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  WebKit::WebProcess *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  _QWORD v33[2];
  IPC::Encoder *v34;

  v7 = a2;
  v8 = (void *)MEMORY[0x1E0C99E40];
  v9 = objc_opt_class();
  objc_msgSend(v8, "orderedSetWithObjects:", v9, objc_opt_class(), 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(a4) = WebKit::validateObject(v7, CFSTR("identifier"), v10, a4);

  if ((a4 & 1) != 0)
  {
    objc_opt_class();
    WTF::dynamic_objc_cast<NSNumber>(v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v11)
    {
      objc_msgSend(v11, "stringValue");
      v13 = objc_claimAutoreleasedReturnValue();

      v7 = (id)v13;
    }

    {
      v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v14);
    }
    MEMORY[0x19AEABCC8](&v32, v7);
    ++*(_DWORD *)(a1 + 48);
    v28 = a1;
    v29 = a1;
    v15 = *a3;
    *a3 = 0;
    v30 = v15;
    MEMORY[0x19AEABCC8](&v31, v7);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v17 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v17 = 1633;
    *(_QWORD *)(v17 + 8) = v16;
    *(_QWORD *)(v17 + 528) = v17 + 16;
    *(_QWORD *)(v17 + 536) = v17 + 16;
    *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v17 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
    v34 = (IPC::Encoder *)v17;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, (uint64_t *)&v32);
    v18 = v31;
    v31 = 0;
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v19 = &off_1E34F5158;
    v19[1] = v28;
    v19[2] = v29;
    v19[3] = v30;
    v19[4] = v18;
    v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v33[0] = v19;
    v33[1] = v20;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v14 + 2) + 40))((_QWORD *)v14 + 2, &v34, v33, 0);
    v22 = v33[0];
    v33[0] = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v34;
    v34 = 0;
    if (v23)
    {
      IPC::Encoder::~Encoder(v23, v21);
      WTF::fastFree(v24, v25);
    }
    v26 = v31;
    v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v32;
    v32 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v27 -= 2;
    }
  }

}

void sub_1976C08D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, uint64_t a17, IPC::Encoder *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIMenus::removeAll(uint64_t a1, _QWORD *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  WebKit::WebProcess *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = a2;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v3);
    a2 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  ++*(_DWORD *)(a1 + 48);
  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1634;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v16 = (IPC::Encoder *)v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E34F5180;
  v7[1] = a1;
  v7[2] = a1;
  v7[3] = v4;
  v15[0] = v7;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v3 + 2) + 40))((_QWORD *)v3 + 2, &v16, v15, 0);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_1976C0B7C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionAPIMenus::onClicked(WebKit::WebExtensionAPIMenus *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v6 = 18;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIMenus &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 8);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 8);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIMenus &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976C0D1C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchMenusClickedEvent(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  const WTF::String *v11;
  void *v12;
  const WTF::String *v13;
  void *v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const __CFString *v19;
  void *v20;
  unint64_t v21;
  double v22;
  void *v23;
  uint64_t v24;
  __CFString *v25;
  void *v26;
  WebCore *v27;
  uint64_t v28;
  WebCore *v29;
  WebCore *v30;
  id v31;
  id v32;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = v10;
  WebKit::toMenuIdentifierWebAPI((WebKit *)a2, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v12, CFSTR("menuItemId"));

  if (a2[16])
  {
    WebKit::toMenuIdentifierWebAPI((WebKit *)(a2 + 8), v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v14, CFSTR("parentMenuItemId"));

  }
  if (!a2[25])
    goto LABEL_50;
  if (a2[24] - 1 <= 1)
  {
    if (a2[57])
      v15 = a2[56] == 0;
    else
      v15 = 1;
    v16 = !v15;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v17, CFSTR("checked"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v18, CFSTR("wasChecked"));

  }
  if (*(_QWORD *)(a4 + 168))
    objc_msgSend(v10, "setObject:forKeyedSubscript:", WTF::StringImpl::operator NSString *(), CFSTR("selectionText"));
  if (!*(_QWORD *)(a4 + 128))
    goto LABEL_22;
  objc_msgSend(v10, "setObject:forKeyedSubscript:", WTF::StringImpl::operator NSString *(), CFSTR("srcUrl"));
  if ((*(_WORD *)a4 & 2) != 0)
  {
    v19 = CFSTR("audio");
  }
  else if ((*(_WORD *)a4 & 0x10) != 0)
  {
    v19 = CFSTR("image");
  }
  else
  {
    if ((*(_WORD *)a4 & 0x200) == 0)
      goto LABEL_22;
    v19 = CFSTR("video");
  }
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v19, CFSTR("mediaType"));
LABEL_22:
  if (*(_QWORD *)(a4 + 88))
    objc_msgSend(v10, "setObject:forKeyedSubscript:", WTF::StringImpl::operator NSString *(), CFSTR("linkUrl"));
  if (*(_QWORD *)(a4 + 80))
    objc_msgSend(v10, "setObject:forKeyedSubscript:", WTF::StringImpl::operator NSString *(), CFSTR("linkText"));
  if (!*(_BYTE *)(a4 + 32) || !*(_QWORD *)(a4 + 40))
    goto LABEL_42;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a4 + 176));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v20, CFSTR("editable"));

  if (!*(_BYTE *)(a4 + 32))
  {
LABEL_50:
    std::__throw_bad_optional_access[abi:sn180100]();
    __break(1u);
    return;
  }
  v21 = *(_QWORD *)(a4 + 24);
  if (v21 == -3)
  {
    v22 = -1.0;
  }
  else
  {
    v22 = 0.0;
    if (v21 != -2)
      v22 = (double)v21;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v23, CFSTR("frameId"));

  v24 = *(_QWORD *)(a4 + 40);
  if (*(_BYTE *)(a4 + 32) && *(_QWORD *)(a4 + 24) == -2)
  {
    if (v24)
      v25 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v25 = &stru_1E351F1B8;
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v25, CFSTR("pageUrl"));
  }
  else
  {
    if (v24)
      v25 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v25 = &stru_1E351F1B8;
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v25, CFSTR("frameUrl"));
  }

LABEL_42:
  if (*(_BYTE *)(a5 + 176))
  {
    WebKit::toWebAPI(a5);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v26 = 0;
  }
  v31 = v26;
  v27 = (WebCore *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v27 = off_1E34F51A8;
  *((_QWORD *)v27 + 1) = a2;
  *((_QWORD *)v27 + 2) = &v32;
  *((_QWORD *)v27 + 3) = &v31;
  v30 = v27;
  v28 = WebCore::mainThreadNormalWorld(v27);
  WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects(a1, (uint64_t)&v30, v28);
  v29 = v30;
  v30 = 0;
  if (v29)
    (*(void (**)(WebCore *))(*(_QWORD *)v29 + 8))(v29);

}

void sub_1976C10D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_BYTE *std::__optional_copy_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a1, a2);
    a1[16] = 1;
  }
  return a1;
}

void sub_1976C119C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>::KeyValuePair<WTF::ASCIILiteral,WebKit::WebExtensionMenuItemContextType>(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  uint64_t v6;
  uint64_t v8;

  if (a3)
  {
    if (a3 == 1)
    {
      v6 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v8;
    }
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
  *(_WORD *)(a1 + 8) = *a4;
  return a1;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtensionMenuItemContextType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtensionMenuItemContextType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _WORD *v5;

  v2 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_WORD *)(v2 + 24);
    do
    {
      *((_QWORD *)v5 - 1) = 0;
      *v5 = 0;
      v5 += 8;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtensionMenuItemContextType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtensionMenuItemContextType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t i;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::WebExtensionMenuItemContextType>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::WebExtensionMenuItemContextType,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::WebExtensionMenuItemContextType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(v5);
  *a1 = result;
  *(_DWORD *)(result - 4) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v9 = (WTF::StringImpl **)(v2 + 16 * i);
      v10 = *v9;
      if (*v9 != (WTF::StringImpl *)-1)
      {
        if (v10)
        {
          v11 = *a1;
          if (*a1)
            v12 = *(_DWORD *)(v11 - 8);
          else
            v12 = 0;
          v13 = *((_DWORD *)v10 + 4);
          if (v13 >= 0x100)
            v14 = v13 >> 8;
          else
            v14 = WTF::StringImpl::hashSlowCase(v10);
          v15 = 0;
          do
          {
            v16 = v14 & v12;
            v14 = ++v15 + v16;
          }
          while (*(_QWORD *)(v11 + 16 * v16));
          v17 = v11 + 16 * v16;
          *(_QWORD *)v17 = 0;
          v18 = *v9;
          *v9 = 0;
          *(_QWORD *)v17 = v18;
          *(_WORD *)(v17 + 8) = *(_WORD *)(v2 + 16 * i + 8);
          v19 = *v9;
          *v9 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v7);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        else
        {
          *v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusCreate,WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebKit::WebExtensionCallbackHandler *v4;
  WebKit::WebExtensionCallbackHandler *v5;
  uint64_t v6;

  *a1 = &off_1E34F5108;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebKit::WebExtensionCallbackHandler *)a1[4];
  a1[4] = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v4);
  v5 = (WebKit::WebExtensionCallbackHandler *)a1[3];
  a1[3] = 0;
  if (v5)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v5);
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 8))(v6 + 40);
    else
      --*(_DWORD *)(v6 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusCreate,WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebKit::WebExtensionCallbackHandler *v4;
  WebKit::WebExtensionCallbackHandler *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34F5108;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v4);
  v5 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v5);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 8))(v6 + 40);
    else
      --*(_DWORD *)(v6 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusCreate,WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;
  char v7;

  v2 = (WebKit::WebExtensionCallbackHandler **)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v5);
    if (v7)
    {
      WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, (uint64_t)v5, v6);
      if (v7)
      {
        if (v6)
        {
          v4 = v5;
          v5 = 0;
          if (v4)
          {
            if (*(_DWORD *)v4 == 2)
              WTF::StringImpl::destroy(v4, v3);
            else
              *(_DWORD *)v4 -= 2;
          }
        }
      }
    }
    else
    {
      WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, 0, 0);
    }
  }
  else
  {
    WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()((WebKit::WebExtensionCallbackHandler **)(a1 + 8), 0, 0);
  }
}

void sub_1976C1604(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIMenus::createMenu(WebKit::WebPage &,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler **a1, uint64_t a2, char a3)
{
  WebKit::WebExtensionCallbackHandler *v4;
  __CFString *v5;
  IPC::Encoder *v6;
  WebKit::WebExtensionCallbackHandler *v7;
  uint64_t *v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  id v16;
  __CFString *v17;
  char v18;
  char v19;
  _QWORD v20[3];
  IPC::Encoder *v21;

  if (a3)
  {
    v4 = a1[2];
    if (a2)
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    v17 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(v4, &v5->isa);

  }
  else
  {
    v6 = a1[3];
    if (v6)
    {
      v7 = *a1;
      v8 = (uint64_t *)((char *)*a1 + 72);
      if (!*v8 || !*(_DWORD *)(*v8 - 12))
      {
        {
          v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v9);
        }
        v19 = 18;
        v18 = *((_BYTE *)v7 + 8);
        v20[0] = (char *)v7 + 56;
        v20[1] = &v19;
        v20[2] = &v18;
        v10 = *(_QWORD *)(*((_QWORD *)v7 + 3) + 24);
        v11 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v11 = 1610;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)(v11 + 528) = v11 + 16;
        *(_QWORD *)(v11 + 536) = v11 + 16;
        *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v11 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
        v21 = (IPC::Encoder *)v11;
        IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,0ul,1ul,2ul>(v11, (uint64_t)v20);
        (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v9 + 2) + 32))((_QWORD *)v9 + 2, &v21, 0);
        v13 = v21;
        v21 = 0;
        if (v13)
        {
          IPC::Encoder::~Encoder(v13, v12);
          WTF::fastFree(v14, v15);
        }
        v6 = a1[3];
      }
      v21 = v6;
      a1[3] = 0;
      WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>((uint64_t)v20, v8, a1 + 4, &v21);
      if (v21)
        WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v21);
    }
    v16 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)a1[2]);
  }
}

void sub_1976C180C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  if (a14)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(a14);
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionCallbackHandler *WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, WTF **a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF **v12;
  int i;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  WTF *v17;
  WebKit::WebExtensionCallbackHandler *result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  WTF *v28;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF **)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v12 = (WTF **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = v12;
    }
    WTF::String::operator=(v15, (WTF::StringImpl *)a3);
    v17 = *a4;
    *a4 = 0;
    result = v15[1];
    v15[1] = v17;
    if (result)
      result = WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
    v19 = *a2;
    if (*a2)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v23 = *a2;
    if (*a2)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_28:
        result = (WebKit::WebExtensionCallbackHandler *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, v15);
        v15 = (WTF **)result;
        v23 = *a2;
        if (*a2)
          v26 = *(unsigned int *)(v23 - 4);
        else
          v26 = 0;
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_28;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v23 + 16 * v26;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_13;
  v21 = *a2;
  if (*a2)
    v22 = *(unsigned int *)(v21 - 4);
  else
    v22 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v21 + 16 * v22;
  *(_BYTE *)(a1 + 16) = 0;
  v27 = v8 + 16 * v14;
  v28 = *a4;
  *a4 = 0;
  result = *(WebKit::WebExtensionCallbackHandler **)(v27 + 8);
  *(_QWORD *)(v27 + 8) = v28;
  if (result)
    return WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebKit::WebExtensionCallbackHandler *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WebKit::WebExtensionCallbackHandler *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WebKit::WebExtensionCallbackHandler *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 >= 0x100)
            v20 = v19 >> 8;
          else
            v20 = WTF::StringImpl::hashSlowCase(v14);
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = (WTF::StringImpl **)(v17 + 16 * v22);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
          {
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v24);
            v25 = *v23;
            *v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v10);
              else
                *(_DWORD *)v25 -= 2;
            }
          }
          else
          {
            *v23 = 0;
          }
          v26 = *v13;
          *v13 = 0;
          *v23 = v26;
          v27 = v6 + 16 * v11;
          v28 = *(WTF::StringImpl **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          v23[1] = v28;
          v29 = *(WebKit::WebExtensionCallbackHandler **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v29);
          v30 = *v13;
          *v13 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v10);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WebKit::WebExtensionCallbackHandler **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v16);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusUpdate,WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WebKit::WebExtensionCallbackHandler *v5;
  WebKit::WebExtensionCallbackHandler *v6;
  uint64_t v7;

  *a1 = &off_1E34F5130;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WebKit::WebExtensionCallbackHandler *)a1[4];
  a1[4] = 0;
  if (v5)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v5);
  v6 = (WebKit::WebExtensionCallbackHandler *)a1[3];
  a1[3] = 0;
  if (v6)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v6);
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusUpdate,WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WebKit::WebExtensionCallbackHandler *v5;
  WebKit::WebExtensionCallbackHandler *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E34F5130;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v5);
  v6 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v6);
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusUpdate,WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 v6;
  char v7;

  v2 = (WTF::StringImpl **)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v5);
    if (v7)
    {
      WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, (uint64_t)v5, (const WTF::StringImpl *)v6);
      if (v7)
      {
        if (v6)
        {
          v4 = v5;
          v5 = 0;
          if (v4)
          {
            if (*(_DWORD *)v4 == 2)
              WTF::StringImpl::destroy(v4, v3);
            else
              *(_DWORD *)v4 -= 2;
          }
        }
      }
    }
    else
    {
      WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, 0, 0);
    }
  }
  else
  {
    WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()((WTF::StringImpl **)(a1 + 8), 0, 0);
  }
}

void sub_1976C1EB4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIMenus::update(WebKit::WebPage &,objc_object *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WTF::StringImpl **a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WebKit::WebExtensionCallbackHandler *v4;
  __CFString *v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  int v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;
  uint64_t v18;
  WebKit::WebExtensionCallbackHandler *v19;
  uint64_t v20;
  uint64_t *v21;
  WebKit::WebProcess *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  IPC::Encoder *v26;
  WTF *v27;
  void *v28;
  id v29;
  __CFString *v30;
  char v31;
  char v32;
  _QWORD v33[3];
  IPC::Encoder *v34;

  if (!(_BYTE)a3)
  {
    v6 = *a1;
    v7 = a1[4];
    if (!v7 || !*((_DWORD *)v7 + 1))
    {
      WTF::String::operator=(a1 + 4, (WTF::StringImpl *)(a1 + 5));
      v7 = a1[4];
    }
    v8 = WTF::equal(a1[5], v7, a3);
    v10 = a1[3];
    if (v8)
    {
      if (!v10)
      {
LABEL_46:
        v29 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)a1[2]);
        return;
      }
      goto LABEL_12;
    }
    if (v10)
    {
LABEL_12:
      v11 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)v6 + 9, a1 + 5, v9);
      v12 = *((_QWORD *)v6 + 9);
      if (v12)
      {
        v13 = (WTF::StringImpl **)(v12 + 16 * *(unsigned int *)(v12 - 4));
        if (v13 == v11)
          goto LABEL_35;
LABEL_17:
        if (v13 != v11)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)v6 + 9, v11);
        goto LABEL_35;
      }
      if (v11)
      {
        v13 = 0;
        goto LABEL_17;
      }
LABEL_35:
      v17 = a1[3];
LABEL_36:
      if (v17)
      {
        v21 = (uint64_t *)((char *)v6 + 72);
        v20 = *((_QWORD *)v6 + 9);
        if (!v20 || !*(_DWORD *)(v20 - 12))
        {
          {
            v22 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
          }
          else
          {
            v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
            WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v22);
          }
          v32 = 18;
          v31 = *((_BYTE *)v6 + 8);
          v33[0] = (char *)v6 + 56;
          v33[1] = &v32;
          v33[2] = &v31;
          v23 = *(_QWORD *)(*((_QWORD *)v6 + 3) + 24);
          v24 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v24 = 1610;
          *(_QWORD *)(v24 + 8) = v23;
          *(_QWORD *)(v24 + 528) = v24 + 16;
          *(_QWORD *)(v24 + 536) = v24 + 16;
          *(_OWORD *)(v24 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v24 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v24);
          v34 = (IPC::Encoder *)v24;
          IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&>,0ul,1ul,2ul>(v24, (uint64_t)v33);
          (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v22 + 2) + 32))((_QWORD *)v22 + 2, &v34, 0);
          v26 = v34;
          v34 = 0;
          if (v26)
          {
            IPC::Encoder::~Encoder(v26, v25);
            WTF::fastFree(v27, v28);
          }
          v17 = a1[3];
        }
        v34 = v17;
        a1[3] = 0;
        WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>((uint64_t)v33, v21, a1 + 4, &v34);
        if (v34)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v34);
      }
      goto LABEL_46;
    }
    v14 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)v6 + 9, a1 + 5, v9);
    v15 = *((_QWORD *)v6 + 9);
    if (v15)
      v16 = v15 + 16 * *(unsigned int *)(v15 - 4);
    else
      v16 = 0;
    if (v16 == v14)
    {
      v17 = 0;
    }
    else
    {
      v17 = *(IPC::Encoder **)(v14 + 8);
      if (v17)
      {
        *(_QWORD *)(v14 + 8) = 0;
        v15 = *((_QWORD *)v6 + 9);
      }
      if (v15)
      {
        v18 = v15 + 16 * *(unsigned int *)(v15 - 4);
        if (v18 == v14)
          goto LABEL_33;
LABEL_31:
        if (v18 != v14)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)v6 + 9, (WTF::StringImpl **)v14);
        goto LABEL_33;
      }
      if (v14)
      {
        v18 = 0;
        goto LABEL_31;
      }
    }
LABEL_33:
    v19 = a1[3];
    a1[3] = v17;
    if (!v19)
      goto LABEL_36;
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    goto LABEL_35;
  }
  v4 = a1[2];
  if (a2)
    v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  v30 = v5;
  WebKit::WebExtensionCallbackHandler::reportError(v4, &v5->isa);

}

void sub_1976C21D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  WebKit::WebExtensionCallbackHandler *v14;

  if (v14)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v14);
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionCallbackHandler *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WebKit::WebExtensionCallbackHandler *result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  result = a2[1];
  a2[1] = 0;
  if (result)
    result = WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(result);
  ++*(_DWORD *)(*a1 - 16);
  v5 = *a1;
  if (*a1)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *a1;
  if (*a1)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return (WebKit::WebExtensionCallbackHandler *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v9 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusRemove,WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebKit::WebExtensionCallbackHandler *v4;
  uint64_t v5;

  *a1 = &off_1E34F5158;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebKit::WebExtensionCallbackHandler *)a1[3];
  a1[3] = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusRemove,WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebKit::WebExtensionCallbackHandler *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F5158;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusRemove,WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned __int8 v6;
  char v7;

  v2 = (WTF::StringImpl **)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v5);
    if (v7)
    {
      WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, (uint64_t)v5, (const WTF::StringImpl *)v6);
      if (v7)
      {
        if (v6)
        {
          v4 = v5;
          v5 = 0;
          if (v4)
          {
            if (*(_DWORD *)v4 == 2)
              WTF::StringImpl::destroy(v4, v3);
            else
              *(_DWORD *)v4 -= 2;
          }
        }
      }
    }
    else
    {
      WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(v2, 0, 0);
    }
  }
  else
  {
    WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()((WTF::StringImpl **)(a1 + 8), 0, 0);
  }
}

void sub_1976C249C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIMenus::remove(objc_object *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WTF::StringImpl **a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WebKit::WebExtensionCallbackHandler *v4;
  __CFString *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WebKit::WebProcess *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  id v18;
  __CFString *v19;
  char v20;
  char v21;
  _QWORD v22[4];
  IPC::Encoder *v23;

  if (!(_BYTE)a3)
  {
    v6 = *a1;
    v7 = (uint64_t *)((char *)*a1 + 72);
    v8 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::RetainPtr<_WKSmartCardSlotStateObserver>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RetainPtr<_WKSmartCardSlotStateObserver>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v7, a1 + 3, a3);
    v9 = *((_QWORD *)v6 + 9);
    if (v9)
    {
      v10 = (WTF::StringImpl **)(v9 + 16 * *(unsigned int *)(v9 - 4));
      if (v10 == v8)
      {
LABEL_13:
        if (*(_DWORD *)(v9 - 12))
        {
LABEL_18:
          v18 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)a1[2]);
          return;
        }
LABEL_14:
        {
          v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v11);
        }
        v21 = 18;
        v20 = *((_BYTE *)v6 + 8);
        v22[0] = (char *)v6 + 56;
        v22[1] = &v21;
        v22[2] = &v20;
        v22[3] = 1;
        v12 = *(_QWORD *)(*((_QWORD *)v6 + 3) + 24);
        v13 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v13 = 1642;
        *(_QWORD *)(v13 + 8) = v12;
        *(_QWORD *)(v13 + 528) = v13 + 16;
        *(_QWORD *)(v13 + 536) = v13 + 16;
        *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v13 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
        v23 = (IPC::Encoder *)v13;
        IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v13, (uint64_t)v22);
        (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v11 + 2) + 32))((_QWORD *)v11 + 2, &v23, 0);
        v15 = v23;
        v23 = 0;
        if (v15)
        {
          IPC::Encoder::~Encoder(v15, v14);
          WTF::fastFree(v16, v17);
        }
        goto LABEL_18;
      }
    }
    else
    {
      if (!v8)
        goto LABEL_14;
      v10 = 0;
    }
    if (v10 != v8)
    {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v7, v8);
      v9 = *v7;
    }
    if (!v9)
      goto LABEL_14;
    goto LABEL_13;
  }
  v4 = a1[2];
  if (a2)
    v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E351F1B8;
  v19 = v5;
  WebKit::WebExtensionCallbackHandler::reportError(v4, &v5->isa);

}

void sub_1976C26AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;

  v12 = *(IPC::Encoder **)(v10 - 40);
  *(_QWORD *)(v10 - 40) = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusRemoveAll,WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5180;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[3];
  a1[3] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusRemoveAll,WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5180;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::MenusRemoveAll,WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  JSObjectRef **v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;
  char v7;

  v2 = (JSObjectRef **)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v5);
    if (v7)
    {
      WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(v2, v5, v6);
      if (v7)
      {
        if (v6)
        {
          v4 = v5;
          v5 = 0;
          if (v4)
          {
            if (*(_DWORD *)v4 == 2)
              WTF::StringImpl::destroy(v4, v3);
            else
              *(_DWORD *)v4 -= 2;
          }
        }
      }
    }
    else
    {
      WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(v2, 0, 0);
    }
  }
  else
  {
    WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()((JSObjectRef **)(a1 + 8), 0, 0);
  }
}

void sub_1976C2864(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIMenus::removeAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(JSObjectRef **a1, WTF::StringImpl *a2, char a3)
{
  WebKit::WebExtensionCallbackHandler *v4;
  __CFString *v5;
  JSObjectRef *v6;
  WTF::StringImpl **v7;
  WebKit::WebProcess *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  id v15;
  __CFString *v16;
  char v17;
  char v18;
  _QWORD v19[4];
  IPC::Encoder *v20;

  if (a3)
  {
    v4 = (WebKit::WebExtensionCallbackHandler *)a1[2];
    if (a2)
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    v16 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(v4, &v5->isa);

  }
  else
  {
    v6 = *a1;
    v7 = (WTF::StringImpl **)(*a1)[9];
    if (v7 && *((_DWORD *)v7 - 3))
    {
      v6[9] = 0;
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v7, a2);
      {
        v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v8);
      }
      v18 = 18;
      v17 = *((_BYTE *)v6 + 8);
      v19[0] = v6 + 7;
      v19[1] = &v18;
      v19[2] = &v17;
      v19[3] = 1;
      v9 = *((_QWORD *)v6[3] + 3);
      v10 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v10 = 1642;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(v10 + 528) = v10 + 16;
      *(_QWORD *)(v10 + 536) = v10 + 16;
      *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v10 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
      v20 = (IPC::Encoder *)v10;
      IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::WebExtensionEventListenerType const&,WebKit::WebExtensionContentWorldType const&,unsigned long>,0ul,1ul,2ul,3ul>(v10, (uint64_t)v19);
      (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v8 + 2) + 32))((_QWORD *)v8 + 2, &v20, 0);
      v12 = v20;
      v20 = 0;
      if (v12)
      {
        IPC::Encoder::~Encoder(v12, v11);
        WTF::fastFree(v13, v14);
      }
    }
    v15 = WebKit::WebExtensionCallbackHandler::call(a1[2]);
  }
}

void sub_1976C2A34(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;

  v12 = *(IPC::Encoder **)(v10 - 40);
  *(_QWORD *)(v10 - 40) = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WebKit::WebExtensionCallbackHandler *v6;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        v6 = v4[1];
        v4[1] = 0;
        if (v6)
        {
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v6);
          v5 = *v4;
        }
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchMenusClickedEvent(WebKit::WebExtensionMenuItemParameters const&,BOOL,WebKit::WebExtensionMenuItemContextParameters const&,std::optional<WebKit::WebExtensionTabParameters> const&)::$_0,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, uint64_t a2, WebKit::WebExtensionAPINamespace *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unsigned int v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int i;
  uint64_t v17;
  WTF *v18;
  WebKit::WebExtensionCallbackHandler *v19;
  id v20;
  WebKit::WebExtensionAPIMenus *v21;
  WebKit::WebExtensionAPIEvent *v22;
  unsigned int *result;
  _BYTE v24[48];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 24);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0 && !*(_BYTE *)(v6 + 144))
  {
    v8 = (unsigned int *)(v6 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v24[8] = 0;
  v24[24] = 0;
  WebCore::UserGestureIndicator::UserGestureIndicator();
  v11 = *(_QWORD *)(WebKit::WebExtensionAPINamespace::menus(a3) + 72);
  if (v11)
  {
    v12 = *(WTF::StringImpl ***)(a1 + 8);
    v13 = *(_DWORD *)(v11 - 8);
    v14 = *((_DWORD *)*v12 + 4);
    if (v14 >= 0x100)
      v15 = v14 >> 8;
    else
      v15 = WTF::StringImpl::hashSlowCase(*v12);
    for (i = 0; ; v15 = i + v17)
    {
      v17 = v15 & v13;
      v18 = *(WTF **)(v11 + 16 * v17);
      if (v18 != (WTF *)-1)
      {
        if (!v18)
          goto LABEL_19;
        if ((WTF::equal(v18, *v12, v10) & 1) != 0)
          break;
      }
      ++i;
    }
    v19 = *(WebKit::WebExtensionCallbackHandler **)(v11 + 16 * v17 + 8);
    if (v19)
    {
      ++*(_DWORD *)v19;
      v20 = WebKit::WebExtensionCallbackHandler::call(v19, **(objc_object ***)(a1 + 16), **(objc_object ***)(a1 + 24));
      WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v19);
    }
  }
LABEL_19:
  v21 = (WebKit::WebExtensionAPIMenus *)WebKit::WebExtensionAPINamespace::menus(a3);
  v22 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIMenus::onClicked(v21);
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v22, **(objc_object ***)(a1 + 16), **(objc_object ***)(a1 + 24));
  result = (unsigned int *)MEMORY[0x19AEB0CA8](v24);
  if ((v7 & 1) == 0)
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
  return result;
}

void sub_1976C2CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;
  char v4;
  va_list va;

  va_start(va, a2);
  WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  MEMORY[0x19AEB0CA8](va);
  if ((v4 & 1) == 0)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAPINamespace::isPropertyAllowed(WebKit::WebExtensionContextProxy **this, const WTF::ASCIILiteral *a2, WebKit::WebPage *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  WebKit::WebExtensionContextProxy *v10;
  void *v11;
  void *v12;
  WebKit::WebExtensionContextProxy *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebKit::WebExtensionContextProxy *v16;
  WebKit::WebExtensionContextProxy *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WebKit::WebExtensionContextProxy *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WebKit::WebExtensionContextProxy *v25;
  WebKit::WebExtensionContextProxy *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  if ((WebKit::WebExtensionContextProxy::isUnsupportedAPI(this[3], this + 4, a2) & 1) != 0)
    return 0;
  v5 = *(const char **)a2;
  v6 = *((_QWORD *)a2 + 1);
  if (!*(_QWORD *)a2)
  {
    if ("action")
    {
      if ("commands")
      {
        if ("declarativeNetRequest")
        {
          if ("browserAction")
          {
            if (!"devtools")
              return 0;
            if ("notifications")
            {
              if ("pageAction")
              {
                if ("storage")
                {
                  if (!"test")
                    goto LABEL_22;
                  goto LABEL_44;
                }
LABEL_57:
                v26 = this[3];
                if (v6)
                {
                  if (v6 == 1)
                  {
                    v27 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
                    *MEMORY[0x1E0CBEF70] += 2;
                  }
                  else
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v27 = v30;
                  }
                  v29 = v27;
                }
                else
                {
                  v29 = 0;
                }
                if ((WebKit::WebExtensionContextProxy::hasPermission(v26, &v29) & 1) == 0)
                  goto LABEL_38;
                goto LABEL_35;
              }
LABEL_55:
              v25 = this[3];
              if (*((double *)v25 + 14) >= 3.0)
                return 0;
              WTF::RetainPtr<NSMutableArray>::get((id *)v25 + 13);
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              WebKit::objectForKey<NSDictionary>(v11, (uint64_t)CFSTR("page_action"), 0, 0);
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              goto LABEL_29;
            }
            goto LABEL_41;
          }
LABEL_36:
          v16 = this[3];
          if (*((double *)v16 + 14) >= 3.0)
            return 0;
          WTF::RetainPtr<NSMutableArray>::get((id *)v16 + 13);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          WebKit::objectForKey<NSDictionary>(v11, (uint64_t)CFSTR("browser_action"), 0, 0);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_29;
        }
        goto LABEL_30;
      }
LABEL_27:
      WTF::RetainPtr<NSMutableArray>::get((id *)this[3] + 13);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      WebKit::objectForKey<NSDictionary>(v11, (uint64_t)CFSTR("commands"), 1, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_29;
    }
LABEL_25:
    v10 = this[3];
    if (*((double *)v10 + 14) < 3.0)
      return 0;
    WTF::RetainPtr<NSMutableArray>::get((id *)v10 + 13);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::objectForKey<NSDictionary>(v11, (uint64_t)CFSTR("action"), 0, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_29:
    v9 = v12 != 0;

    return v9;
  }
  if (!strcmp(*(const char **)a2, "action"))
    goto LABEL_25;
  if (!strcmp(v5, "commands"))
    goto LABEL_27;
  if (strcmp(v5, "declarativeNetRequest"))
  {
    if (strcmp(v5, "browserAction"))
    {
      if (!strcmp(v5, "devtools"))
        return 0;
      if (strcmp(v5, "notifications"))
      {
        if (strcmp(v5, "pageAction"))
        {
          if (strcmp(v5, "storage"))
          {
            if (!strcmp(v5, "test"))
            {
LABEL_22:
              v7 = *((_QWORD *)this[3] + 4);
              if (v7)
              {
                v8 = *(_QWORD *)(v7 + 8);
                if (v8)
                  return *(_BYTE *)(v8 + 32) != 0;
              }
              return 0;
            }
            goto LABEL_44;
          }
          goto LABEL_57;
        }
        goto LABEL_55;
      }
LABEL_41:
      v19 = *((_QWORD *)this[3] + 4);
      if (!v19)
        return 0;
      v20 = *(_QWORD *)(v19 + 8);
      if (!v20 || !*(_BYTE *)(v20 + 32))
        return 0;
LABEL_44:
      v21 = this[3];
      if (v6)
      {
        if (v6 == 1)
        {
          v22 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v22 = v30;
        }
        v29 = v22;
      }
      else
      {
        v29 = 0;
      }
      v9 = (unint64_t)WebKit::WebExtensionContextProxy::hasPermission(v21, &v29);
      goto LABEL_50;
    }
    goto LABEL_36;
  }
LABEL_30:
  v13 = this[3];
  if (v6)
  {
    if (v6 == 1)
    {
      v14 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v14 = v30;
    }
    v29 = v14;
  }
  else
  {
    v29 = 0;
  }
  if ((WebKit::WebExtensionContextProxy::hasPermission(v13, &v29) & 1) == 0)
  {
LABEL_38:
    v17 = this[3];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v28 = v30;
    v9 = (unint64_t)WebKit::WebExtensionContextProxy::hasPermission(v17, &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    goto LABEL_50;
  }
LABEL_35:
  v9 = 1;
LABEL_50:
  v23 = v29;
  v29 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v15);
    else
      *(_DWORD *)v23 -= 2;
  }
  return v9;
}

void sub_1976C3174(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionAPINamespace::action(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    WebKit::WebExtensionAPIAction::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 7);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIAction::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x40);
  result = WebKit::WebExtensionAPIAction::WebExtensionAPIAction(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C32D0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::alarms(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    WebKit::WebExtensionAPIAlarms::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 8);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 8);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIAlarms::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x40);
  result = WebKit::WebExtensionAPIAlarms::WebExtensionAPIAlarms(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C33B8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::commands(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 9);
  if (!result)
  {
    WebKit::WebExtensionAPICommands::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 9);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 9);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 9);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPICommands::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x48);
  result = WebKit::WebExtensionAPICommands::WebExtensionAPICommands(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C34A0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::cookies(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 10);
  if (!result)
  {
    WebKit::WebExtensionAPICookies::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 10);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 10);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 10);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPICookies::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x40);
  result = WebKit::WebExtensionAPICookies::WebExtensionAPICookies(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C3588(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::declarativeNetRequest(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 11);
  if (!result)
  {
    WebKit::WebExtensionAPIDeclarativeNetRequest::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 11);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 11);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 11);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIDeclarativeNetRequest::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x38);
  result = WebKit::WebExtensionAPIDeclarativeNetRequest::WebExtensionAPIDeclarativeNetRequest(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C3670(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::extension(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 12);
  if (!result)
  {
    WebKit::WebExtensionAPIExtension::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 12);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 12);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 12);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIExtension::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x38);
  result = WebKit::WebExtensionAPIExtension::WebExtensionAPIExtension(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C3758(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::i18n(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 13);
  if (!result)
  {
    WebKit::WebExtensionAPILocalization::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 13);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 13);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 13);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPILocalization::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x38);
  result = WebKit::WebExtensionAPILocalization::WebExtensionAPILocalization(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C3840(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::menus(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 14);
  if (!result)
  {
    WebKit::WebExtensionAPIMenus::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 14);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 14);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 14);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIMenus::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x50);
  result = WebKit::WebExtensionAPIMenus::WebExtensionAPIMenus(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C3928(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::notifications(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 15);
  if (!result)
  {
    WebKit::WebExtensionAPINotifications::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 15);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 15);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 15);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPINotifications::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x48);
  result = WebKit::WebExtensionAPINotifications::WebExtensionAPINotifications(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C3A10(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::permissions(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 16);
  if (!result)
  {
    WebKit::WebExtensionAPIPermissions::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 16);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 16);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 16);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIPermissions::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x48);
  result = WebKit::WebExtensionAPIPermissions::WebExtensionAPIPermissions(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C3AF8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::runtime(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;

  result = *((_QWORD *)this + 17);
  if (result)
    return result;
  v9 = *((_BYTE *)this + 8);
  WebKit::WebExtensionAPIRuntime::create<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContextProxy &>(&v9, *((_QWORD *)this + 3), (uint64_t *)&v10);
  v3 = v10;
  v10 = 0;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v3;
  if (v4)
  {
    v5 = *((_DWORD *)v4 + 12) - 1;
    if (*((_DWORD *)v4 + 12) == 1)
    {
      (*(void (**)(uint64_t))(*((_QWORD *)v4 + 5) + 8))((uint64_t)v4 + 40);
      v4 = v10;
      v10 = 0;
      if (!v4)
        goto LABEL_5;
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v4 + 5) + 8))((uint64_t)v4 + 40);
        goto LABEL_5;
      }
    }
    *((_DWORD *)v4 + 12) = v5;
  }
LABEL_5:
  v6 = (WTF::StringImpl **)*((_QWORD *)this + 17);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebExtensionAPIObject::setPropertyPath(v6, (const WTF::String *)&v10, this);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  return *((_QWORD *)this + 17);
}

void sub_1976C3BF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionAPIRuntime::create<WebKit::WebExtensionContentWorldType,WebKit::WebExtensionContextProxy &>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x70);
  result = WebKit::WebExtensionAPIRuntime::WebExtensionAPIRuntime(v6, *a1, a2);
  *a3 = v6;
  return result;
}

void sub_1976C3C70(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t `covariant return thunk to'WebKit::WebExtensionAPINamespace::runtime(WebKit::WebExtensionAPINamespace *this)
{
  return WebKit::WebExtensionAPINamespace::runtime(this) + 40;
}

uint64_t WebKit::WebExtensionAPINamespace::scripting(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 18);
  if (!result)
  {
    WebKit::WebExtensionAPIScripting::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 18);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 18);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 18);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIScripting::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x38);
  result = WebKit::WebExtensionAPIScripting::WebExtensionAPIScripting(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C3D70(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::storage(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 19);
  if (!result)
  {
    WebKit::WebExtensionAPIStorage::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 19);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 19);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 19);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIStorage::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIStorage::WebExtensionAPIStorage(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C3E58(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::tabs(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 20);
  if (!result)
  {
    WebKit::WebExtensionAPITabs::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 20);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 20);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 20);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPITabs::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x80);
  result = WebKit::WebExtensionAPITabs::WebExtensionAPITabs(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C3F40(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::test(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 21);
  if (!result)
  {
    WebKit::WebExtensionAPITest::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 21);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 21);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 21);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPITest::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x38);
  result = WebKit::WebExtensionAPITest::WebExtensionAPITest(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C4028(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::windows(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 22);
  if (!result)
  {
    WebKit::WebExtensionAPIWindows::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 22);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 22);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 22);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIWindows::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x50);
  result = WebKit::WebExtensionAPIWindows::WebExtensionAPIWindows(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C4110(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::webNavigation(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 23);
  if (!result)
  {
    WebKit::WebExtensionAPIWebNavigation::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 23);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 23);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 23);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIWebNavigation::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x60);
  result = WebKit::WebExtensionAPIWebNavigation::WebExtensionAPIWebNavigation(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C41F8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINamespace::webRequest(WebKit::WebExtensionAPINamespace *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  WTF::StringImpl **v6;

  result = *((_QWORD *)this + 24);
  if (!result)
  {
    WebKit::WebExtensionAPIWebRequest::create<WebKit::WebExtensionAPINamespace &>(this, &v6);
    v3 = v6;
    v6 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v6;
        v6 = 0;
        if (!v4)
          return *((_QWORD *)this + 24);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 24);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 24);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIWebRequest::create<WebKit::WebExtensionAPINamespace &>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, WTF::StringImpl ***a2@<X8>)
{
  WTF::StringImpl **v4;
  WTF::StringImpl **result;

  v4 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x80);
  result = WebKit::WebExtensionAPIWebRequest::WebExtensionAPIWebRequest(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1976C42E0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPINamespace::~WebExtensionAPINamespace(WebKit::WebExtensionAPINamespace *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPINamespace::~WebExtensionAPINamespace(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)this = off_1E34F51D0;
  *((_QWORD *)this + 5) = &unk_1E34F5208;
  v3 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  v6 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 8))(v6 + 40);
    else
      --*(_DWORD *)(v6 + 48);
  }
  v7 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
  v8 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 40) + 8))(v8 + 40);
    else
      --*(_DWORD *)(v8 + 48);
  }
  v9 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 40) + 8))(v9 + 40);
    else
      --*(_DWORD *)(v9 + 48);
  }
  v10 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  v11 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
    else
      --*(_DWORD *)(v11 + 48);
  }
  v12 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
    else
      --*(_DWORD *)(v12 + 48);
  }
  v13 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 40) + 8))(v13 + 40);
    else
      --*(_DWORD *)(v13 + 48);
  }
  v14 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 40) + 8))(v14 + 40);
    else
      --*(_DWORD *)(v14 + 48);
  }
  v15 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  v16 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v16 + 40) + 8))(v16 + 40);
    else
      --*(_DWORD *)(v16 + 48);
  }
  v17 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
    else
      --*(_DWORD *)(v17 + 48);
  }
  v18 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v18)
  {
    if (*(_DWORD *)(v18 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v18 + 40) + 8))(v18 + 40);
    else
      --*(_DWORD *)(v18 + 48);
  }
  v19 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v19)
  {
    if (*(_DWORD *)(v19 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v19 + 40) + 8))(v19 + 40);
    else
      --*(_DWORD *)(v19 + 48);
  }
  v20 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v20 + 40) + 8))(v20 + 40);
    else
      --*(_DWORD *)(v20 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

void `non-virtual thunk to'WebKit::WebExtensionAPINamespace::~WebExtensionAPINamespace(WebKit::WebExtensionAPINamespace *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPINamespace::~WebExtensionAPINamespace((WebKit::WebExtensionAPINamespace *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPINamespace::~WebExtensionAPINamespace((WebKit::WebExtensionAPINamespace *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl **WebKit::WebExtensionAPIAction::WebExtensionAPIAction(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F5230;
  *(_QWORD *)(v4 + 40) = &unk_1E34F5260;
  *(_QWORD *)(v4 + 56) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C4720(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  uint64_t v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v11 = *((_QWORD *)v9 + 7);
  *((_QWORD *)v9 + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
    else
      --*(_DWORD *)(v11 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAction::~WebExtensionAPIAction(WebKit::WebExtensionAPIAction *this, WTF::StringImpl *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E34F5230;
  *((_QWORD *)this + 5) = &unk_1E34F5260;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34F5230;
  *((_QWORD *)this + 5) = &unk_1E34F5260;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v4, v5);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIAction::~WebExtensionAPIAction(WebKit::WebExtensionAPIAction *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::WebExtensionAPIObject *v4;

  *(_QWORD *)this = &unk_1E34F5260;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this - 5) = off_1E34F5230;
  v4 = (WebKit::WebExtensionAPIAction *)((char *)this - 40);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v4, a2);
}

{
  uint64_t v3;
  WebKit::WebExtensionAPIObject *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &unk_1E34F5260;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this - 5) = off_1E34F5230;
  v4 = (WebKit::WebExtensionAPIAction *)((char *)this - 40);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v4, a2);
  WTF::fastFree(v5, v6);
}

WTF::StringImpl **WebKit::WebExtensionAPIAlarms::WebExtensionAPIAlarms(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F5288;
  *(_QWORD *)(v4 + 40) = &unk_1E34F52B8;
  *(_QWORD *)(v4 + 56) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C49BC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  uint64_t v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v11 = *((_QWORD *)v9 + 7);
  *((_QWORD *)v9 + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
    else
      --*(_DWORD *)(v11 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIAlarms::~WebExtensionAPIAlarms(WebKit::WebExtensionAPIAlarms *this, WTF::StringImpl *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E34F5288;
  *((_QWORD *)this + 5) = &unk_1E34F52B8;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34F5288;
  *((_QWORD *)this + 5) = &unk_1E34F52B8;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v4, v5);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIAlarms::~WebExtensionAPIAlarms(WebKit::WebExtensionAPIAlarms *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::WebExtensionAPIObject *v4;

  *(_QWORD *)this = &unk_1E34F52B8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this - 5) = off_1E34F5288;
  v4 = (WebKit::WebExtensionAPIAlarms *)((char *)this - 40);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v4, a2);
}

{
  uint64_t v3;
  WebKit::WebExtensionAPIObject *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &unk_1E34F52B8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this - 5) = off_1E34F5288;
  v4 = (WebKit::WebExtensionAPIAlarms *)((char *)this - 40);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v4, a2);
  WTF::fastFree(v5, v6);
}

WTF::StringImpl **WebKit::WebExtensionAPICommands::WebExtensionAPICommands(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F52E0;
  *(_QWORD *)(v4 + 40) = &unk_1E34F5310;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C4C68(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v12 = *((_QWORD *)v9 + 8);
  *((_QWORD *)v9 + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
    else
      --*(_DWORD *)(v12 + 48);
  }
  v13 = *v10;
  *v10 = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 40) + 8))(v13 + 40);
    else
      --*(_DWORD *)(v13 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPICommands::~WebExtensionAPICommands(WebKit::WebExtensionAPICommands *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E34F52E0;
  *((_QWORD *)this + 5) = &unk_1E34F5310;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E34F52E0;
  *((_QWORD *)this + 5) = &unk_1E34F5310;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v5, v6);
}

void `non-virtual thunk to'WebKit::WebExtensionAPICommands::~WebExtensionAPICommands(WebKit::WebExtensionAPICommands *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;

  *((_QWORD *)this - 5) = off_1E34F52E0;
  v3 = (WebKit::WebExtensionAPICommands *)((char *)this - 40);
  *(_QWORD *)this = &unk_1E34F5310;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  *((_QWORD *)this - 5) = off_1E34F52E0;
  v3 = (WebKit::WebExtensionAPICommands *)((char *)this - 40);
  *(_QWORD *)this = &unk_1E34F5310;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
  WTF::fastFree(v6, v7);
}

WTF::StringImpl **WebKit::WebExtensionAPICookies::WebExtensionAPICookies(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F5338;
  *(_QWORD *)(v4 + 40) = &unk_1E34F5368;
  *(_QWORD *)(v4 + 56) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C4FE8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  uint64_t v11;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v11 = *((_QWORD *)v9 + 7);
  *((_QWORD *)v9 + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
    else
      --*(_DWORD *)(v11 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPICookies::~WebExtensionAPICookies(WebKit::WebExtensionAPICookies *this, WTF::StringImpl *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E34F5338;
  *((_QWORD *)this + 5) = &unk_1E34F5368;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E34F5338;
  *((_QWORD *)this + 5) = &unk_1E34F5368;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v4, v5);
}

void `non-virtual thunk to'WebKit::WebExtensionAPICookies::~WebExtensionAPICookies(WebKit::WebExtensionAPICookies *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::WebExtensionAPIObject *v4;

  *(_QWORD *)this = &unk_1E34F5368;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this - 5) = off_1E34F5338;
  v4 = (WebKit::WebExtensionAPICookies *)((char *)this - 40);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v4, a2);
}

{
  uint64_t v3;
  WebKit::WebExtensionAPIObject *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &unk_1E34F5368;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this - 5) = off_1E34F5338;
  v4 = (WebKit::WebExtensionAPICookies *)((char *)this - 40);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v4, a2);
  WTF::fastFree(v5, v6);
}

WTF::StringImpl **WebKit::WebExtensionAPIDeclarativeNetRequest::WebExtensionAPIDeclarativeNetRequest(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F5390;
  *(_QWORD *)(v4 + 40) = &unk_1E34F53C0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C5280(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIDeclarativeNetRequest::~WebExtensionAPIDeclarativeNetRequest(WebKit::WebExtensionAPIDeclarativeNetRequest *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIDeclarativeNetRequest::~WebExtensionAPIDeclarativeNetRequest(WebKit::WebExtensionAPIDeclarativeNetRequest *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIDeclarativeNetRequest *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIDeclarativeNetRequest *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl **WebKit::WebExtensionAPIExtension::WebExtensionAPIExtension(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F53E8;
  *(_QWORD *)(v4 + 40) = &unk_1E34F5418;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C539C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIExtension::~WebExtensionAPIExtension(WebKit::WebExtensionAPIExtension *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIExtension::~WebExtensionAPIExtension(WebKit::WebExtensionAPIExtension *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIExtension *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIExtension *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl **WebKit::WebExtensionAPILocalization::WebExtensionAPILocalization(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F5440;
  *(_QWORD *)(v4 + 40) = &unk_1E34F5470;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C54B8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPILocalization::~WebExtensionAPILocalization(WebKit::WebExtensionAPILocalization *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::WebExtensionAPILocalization::~WebExtensionAPILocalization(WebKit::WebExtensionAPILocalization *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPILocalization *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPILocalization *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl **WebKit::WebExtensionAPIMenus::WebExtensionAPIMenus(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F5498;
  *(_QWORD *)(v4 + 40) = &unk_1E34F54C8;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C55DC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  WTF::StringImpl **v11;
  uint64_t v12;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v11 = (WTF::StringImpl **)*((_QWORD *)v9 + 9);
  if (v11)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v11, a2);
  v12 = *((_QWORD *)v9 + 8);
  *((_QWORD *)v9 + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
    else
      --*(_DWORD *)(v12 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIMenus::~WebExtensionAPIMenus(WebKit::WebExtensionAPIMenus *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E34F5498;
  *((_QWORD *)this + 5) = &unk_1E34F54C8;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 9);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E34F5498;
  *((_QWORD *)this + 5) = &unk_1E34F54C8;
  v3 = (WTF::StringImpl **)*((_QWORD *)this + 9);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v5, v6);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIMenus::~WebExtensionAPIMenus(WebKit::WebExtensionAPIMenus *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject *v3;
  WTF::StringImpl **v4;
  uint64_t v5;

  *((_QWORD *)this - 5) = off_1E34F5498;
  v3 = (WebKit::WebExtensionAPIMenus *)((char *)this - 40);
  *(_QWORD *)this = &unk_1E34F54C8;
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 4);
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  *((_QWORD *)this - 5) = off_1E34F5498;
  v3 = (WebKit::WebExtensionAPIMenus *)((char *)this - 40);
  *(_QWORD *)this = &unk_1E34F54C8;
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 4);
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
  WTF::fastFree(v6, v7);
}

WTF::StringImpl **WebKit::WebExtensionAPINotifications::WebExtensionAPINotifications(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F54F0;
  *(_QWORD *)(v4 + 40) = &unk_1E34F5520;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C58CC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v12 = *((_QWORD *)v9 + 8);
  *((_QWORD *)v9 + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
    else
      --*(_DWORD *)(v12 + 48);
  }
  v13 = *v10;
  *v10 = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 40) + 8))(v13 + 40);
    else
      --*(_DWORD *)(v13 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPINotifications::~WebExtensionAPINotifications(WebKit::WebExtensionAPINotifications *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E34F54F0;
  *((_QWORD *)this + 5) = &unk_1E34F5520;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E34F54F0;
  *((_QWORD *)this + 5) = &unk_1E34F5520;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v5, v6);
}

void `non-virtual thunk to'WebKit::WebExtensionAPINotifications::~WebExtensionAPINotifications(WebKit::WebExtensionAPINotifications *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;

  *((_QWORD *)this - 5) = off_1E34F54F0;
  v3 = (WebKit::WebExtensionAPINotifications *)((char *)this - 40);
  *(_QWORD *)this = &unk_1E34F5520;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  *((_QWORD *)this - 5) = off_1E34F54F0;
  v3 = (WebKit::WebExtensionAPINotifications *)((char *)this - 40);
  *(_QWORD *)this = &unk_1E34F5520;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
  WTF::fastFree(v6, v7);
}

WTF::StringImpl **WebKit::WebExtensionAPIPermissions::WebExtensionAPIPermissions(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F5548;
  *(_QWORD *)(v4 + 40) = &unk_1E34F5578;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C5C5C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v12 = *((_QWORD *)v9 + 8);
  *((_QWORD *)v9 + 8) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
    else
      --*(_DWORD *)(v12 + 48);
  }
  v13 = *v10;
  *v10 = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 40) + 8))(v13 + 40);
    else
      --*(_DWORD *)(v13 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIPermissions::~WebExtensionAPIPermissions(WebKit::WebExtensionAPIPermissions *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E34F5548;
  *((_QWORD *)this + 5) = &unk_1E34F5578;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E34F5548;
  *((_QWORD *)this + 5) = &unk_1E34F5578;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v5, v6);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIPermissions::~WebExtensionAPIPermissions(WebKit::WebExtensionAPIPermissions *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;

  *((_QWORD *)this - 5) = off_1E34F5548;
  v3 = (WebKit::WebExtensionAPIPermissions *)((char *)this - 40);
  *(_QWORD *)this = &unk_1E34F5578;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  *((_QWORD *)this - 5) = off_1E34F5548;
  v3 = (WebKit::WebExtensionAPIPermissions *)((char *)this - 40);
  *(_QWORD *)this = &unk_1E34F5578;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
  WTF::fastFree(v6, v7);
}

uint64_t WebKit::WebExtensionAPIRuntime::WebExtensionAPIRuntime(uint64_t a1, char a2, uint64_t a3)
{
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  *(_BYTE *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  ++*(_DWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (WTF::StringImpl **)(a1 + 32);
  *(_DWORD *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E34F55A0;
  *(_QWORD *)(a1 + 40) = &unk_1E34F55D8;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WTF::String::operator=(v4, (WTF::StringImpl *)v8);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

void sub_1976C600C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v12 = *((_QWORD *)v9 + 13);
  *((_QWORD *)v9 + 13) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
    else
      --*(_DWORD *)(v12 + 48);
  }
  v13 = *((_QWORD *)v9 + 12);
  *((_QWORD *)v9 + 12) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 40) + 8))(v13 + 40);
    else
      --*(_DWORD *)(v13 + 48);
  }
  v14 = *((_QWORD *)v9 + 11);
  *((_QWORD *)v9 + 11) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 40) + 8))(v14 + 40);
    else
      --*(_DWORD *)(v14 + 48);
  }
  v15 = *((_QWORD *)v9 + 10);
  *((_QWORD *)v9 + 10) = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  v16 = *((_QWORD *)v9 + 9);
  *((_QWORD *)v9 + 9) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v16 + 40) + 8))(v16 + 40);
    else
      --*(_DWORD *)(v16 + 48);
  }
  v17 = *v10;
  *v10 = 0;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
    else
      --*(_DWORD *)(v17 + 48);
  }
  *((_QWORD *)v9 + 5) = off_1E34F5600;
  v18 = (const void *)*((_QWORD *)v9 + 7);
  *((_QWORD *)v9 + 7) = 0;
  if (v18)
    CFRelease(v18);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIRuntime::~WebExtensionAPIRuntime(WebKit::WebExtensionAPIRuntime *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIRuntime::~WebExtensionAPIRuntime(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;

  *(_QWORD *)this = off_1E34F55A0;
  *((_QWORD *)this + 5) = &unk_1E34F55D8;
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 8))(v6 + 40);
    else
      --*(_DWORD *)(v6 + 48);
  }
  v7 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 40) + 8))(v8 + 40);
    else
      --*(_DWORD *)(v8 + 48);
  }
  *((_QWORD *)this + 5) = off_1E34F5600;
  v9 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
    CFRelease(v9);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

uint64_t `covariant return thunk to'WebKit::WebExtensionAPIRuntime::runtime(WebKit::WebExtensionAPIRuntime *this)
{
  return (uint64_t)this + 40;
}

void `non-virtual thunk to'WebKit::WebExtensionAPIRuntime::~WebExtensionAPIRuntime(WebKit::WebExtensionAPIRuntime *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIRuntime::~WebExtensionAPIRuntime((WebKit::WebExtensionAPIRuntime *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIRuntime::~WebExtensionAPIRuntime((WebKit::WebExtensionAPIRuntime *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl **WebKit::WebExtensionAPIScripting::WebExtensionAPIScripting(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F5628;
  *(_QWORD *)(v4 + 40) = &unk_1E34F5658;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C63B8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::~WebExtensionAPIScripting(WebKit::WebExtensionAPIScripting *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIScripting::~WebExtensionAPIScripting(WebKit::WebExtensionAPIScripting *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIScripting *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIScripting *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl **WebKit::WebExtensionAPIStorage::WebExtensionAPIStorage(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F5680;
  *(_QWORD *)(v4 + 40) = &unk_1E34F56B0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C64EC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v12 = *((_QWORD *)v9 + 10);
  *((_QWORD *)v9 + 10) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
    else
      --*(_DWORD *)(v12 + 48);
  }
  v13 = *((_QWORD *)v9 + 9);
  *((_QWORD *)v9 + 9) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 40) + 8))(v13 + 40);
    else
      --*(_DWORD *)(v13 + 48);
  }
  v14 = *((_QWORD *)v9 + 8);
  *((_QWORD *)v9 + 8) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 40) + 8))(v14 + 40);
    else
      --*(_DWORD *)(v14 + 48);
  }
  v15 = *v10;
  *v10 = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIStorage::~WebExtensionAPIStorage(WebKit::WebExtensionAPIStorage *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E34F5680;
  *((_QWORD *)this + 5) = &unk_1E34F56B0;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 8))(v6 + 40);
    else
      --*(_DWORD *)(v6 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  *(_QWORD *)this = off_1E34F5680;
  *((_QWORD *)this + 5) = &unk_1E34F56B0;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 8))(v6 + 40);
    else
      --*(_DWORD *)(v6 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v7, v8);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIStorage::~WebExtensionAPIStorage(WebKit::WebExtensionAPIStorage *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *((_QWORD *)this - 5) = off_1E34F5680;
  v3 = (WebKit::WebExtensionAPIStorage *)((char *)this - 40);
  *(_QWORD *)this = &unk_1E34F56B0;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 8))(v6 + 40);
    else
      --*(_DWORD *)(v6 + 48);
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;

  *((_QWORD *)this - 5) = off_1E34F5680;
  v3 = (WebKit::WebExtensionAPIStorage *)((char *)this - 40);
  *(_QWORD *)this = &unk_1E34F56B0;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 8))(v6 + 40);
    else
      --*(_DWORD *)(v6 + 48);
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
  WTF::fastFree(v8, v9);
}

WTF::StringImpl **WebKit::WebExtensionAPITabs::WebExtensionAPITabs(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F56D8;
  *(_QWORD *)(v4 + 40) = &unk_1E34F5708;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_QWORD *)(v4 + 120) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C6A44(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v12 = *((_QWORD *)v9 + 15);
  *((_QWORD *)v9 + 15) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
    else
      --*(_DWORD *)(v12 + 48);
  }
  v13 = *((_QWORD *)v9 + 14);
  *((_QWORD *)v9 + 14) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 40) + 8))(v13 + 40);
    else
      --*(_DWORD *)(v13 + 48);
  }
  v14 = *((_QWORD *)v9 + 13);
  *((_QWORD *)v9 + 13) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 40) + 8))(v14 + 40);
    else
      --*(_DWORD *)(v14 + 48);
  }
  v15 = *((_QWORD *)v9 + 12);
  *((_QWORD *)v9 + 12) = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  v16 = *((_QWORD *)v9 + 11);
  *((_QWORD *)v9 + 11) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v16 + 40) + 8))(v16 + 40);
    else
      --*(_DWORD *)(v16 + 48);
  }
  v17 = *((_QWORD *)v9 + 10);
  *((_QWORD *)v9 + 10) = 0;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
    else
      --*(_DWORD *)(v17 + 48);
  }
  v18 = *((_QWORD *)v9 + 9);
  *((_QWORD *)v9 + 9) = 0;
  if (v18)
  {
    if (*(_DWORD *)(v18 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v18 + 40) + 8))(v18 + 40);
    else
      --*(_DWORD *)(v18 + 48);
  }
  v19 = *((_QWORD *)v9 + 8);
  *((_QWORD *)v9 + 8) = 0;
  if (v19)
  {
    if (*(_DWORD *)(v19 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v19 + 40) + 8))(v19 + 40);
    else
      --*(_DWORD *)(v19 + 48);
  }
  v20 = *v10;
  *v10 = 0;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v20 + 40) + 8))(v20 + 40);
    else
      --*(_DWORD *)(v20 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITabs::~WebExtensionAPITabs(WebKit::WebExtensionAPITabs *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPITabs::~WebExtensionAPITabs(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = off_1E34F56D8;
  *((_QWORD *)this + 5) = &unk_1E34F5708;
  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  v6 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 8))(v6 + 40);
    else
      --*(_DWORD *)(v6 + 48);
  }
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 40) + 8))(v8 + 40);
    else
      --*(_DWORD *)(v8 + 48);
  }
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 40) + 8))(v9 + 40);
    else
      --*(_DWORD *)(v9 + 48);
  }
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
    else
      --*(_DWORD *)(v11 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

void `non-virtual thunk to'WebKit::WebExtensionAPITabs::~WebExtensionAPITabs(WebKit::WebExtensionAPITabs *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPITabs::~WebExtensionAPITabs((WebKit::WebExtensionAPITabs *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPITabs::~WebExtensionAPITabs((WebKit::WebExtensionAPITabs *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl **WebKit::WebExtensionAPITest::WebExtensionAPITest(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F5730;
  *(_QWORD *)(v4 + 40) = &unk_1E34F5760;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C6EAC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPITest::~WebExtensionAPITest(WebKit::WebExtensionAPITest *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::WebExtensionAPITest::~WebExtensionAPITest(WebKit::WebExtensionAPITest *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPITest *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPITest *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl **WebKit::WebExtensionAPIWindows::WebExtensionAPIWindows(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F5788;
  *(_QWORD *)(v4 + 40) = &unk_1E34F57B8;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C6FDC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v12 = *((_QWORD *)v9 + 9);
  *((_QWORD *)v9 + 9) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
    else
      --*(_DWORD *)(v12 + 48);
  }
  v13 = *((_QWORD *)v9 + 8);
  *((_QWORD *)v9 + 8) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 40) + 8))(v13 + 40);
    else
      --*(_DWORD *)(v13 + 48);
  }
  v14 = *v10;
  *v10 = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 40) + 8))(v14 + 40);
    else
      --*(_DWORD *)(v14 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWindows::~WebExtensionAPIWindows(WebKit::WebExtensionAPIWindows *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E34F5788;
  *((_QWORD *)this + 5) = &unk_1E34F57B8;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = off_1E34F5788;
  *((_QWORD *)this + 5) = &unk_1E34F57B8;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
  WTF::fastFree(v6, v7);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIWindows::~WebExtensionAPIWindows(WebKit::WebExtensionAPIWindows *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *((_QWORD *)this - 5) = off_1E34F5788;
  v3 = (WebKit::WebExtensionAPIWindows *)((char *)this - 40);
  *(_QWORD *)this = &unk_1E34F57B8;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 8))(v6 + 40);
    else
      --*(_DWORD *)(v6 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
}

{
  WebKit::WebExtensionAPIObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this - 5) = off_1E34F5788;
  v3 = (WebKit::WebExtensionAPIWindows *)((char *)this - 40);
  *(_QWORD *)this = &unk_1E34F57B8;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 8))(v6 + 40);
    else
      --*(_DWORD *)(v6 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v3, a2);
  WTF::fastFree(v7, v8);
}

WTF::StringImpl **WebKit::WebExtensionAPIWebNavigation::WebExtensionAPIWebNavigation(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F57E0;
  *(_QWORD *)(v4 + 40) = &unk_1E34F5810;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_QWORD *)(v4 + 88) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C7450(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v12 = *((_QWORD *)v9 + 11);
  *((_QWORD *)v9 + 11) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
    else
      --*(_DWORD *)(v12 + 48);
  }
  v13 = *((_QWORD *)v9 + 10);
  *((_QWORD *)v9 + 10) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 40) + 8))(v13 + 40);
    else
      --*(_DWORD *)(v13 + 48);
  }
  v14 = *((_QWORD *)v9 + 9);
  *((_QWORD *)v9 + 9) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 40) + 8))(v14 + 40);
    else
      --*(_DWORD *)(v14 + 48);
  }
  v15 = *((_QWORD *)v9 + 8);
  *((_QWORD *)v9 + 8) = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  v16 = *v10;
  *v10 = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v16 + 40) + 8))(v16 + 40);
    else
      --*(_DWORD *)(v16 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebNavigation::~WebExtensionAPIWebNavigation(WebKit::WebExtensionAPIWebNavigation *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIWebNavigation::~WebExtensionAPIWebNavigation(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E34F57E0;
  *((_QWORD *)this + 5) = &unk_1E34F5810;
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 8))(v6 + 40);
    else
      --*(_DWORD *)(v6 + 48);
  }
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIWebNavigation::~WebExtensionAPIWebNavigation(WebKit::WebExtensionAPIWebNavigation *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIWebNavigation::~WebExtensionAPIWebNavigation((WebKit::WebExtensionAPIWebNavigation *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIWebNavigation::~WebExtensionAPIWebNavigation((WebKit::WebExtensionAPIWebNavigation *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl **WebKit::WebExtensionAPIWebRequest::WebExtensionAPIWebRequest(WTF::StringImpl **this, const WebKit::WebExtensionAPIObject *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[2];

  v4 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v4 + 48) = 1;
  *(_QWORD *)v4 = off_1E34F5838;
  *(_QWORD *)(v4 + 40) = &unk_1E34F5868;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_QWORD *)(v4 + 120) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8[0] = v8[1];
  WebKit::WebExtensionAPIObject::setPropertyPath(this, (const WTF::String *)v8, a2);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

void sub_1976C777C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  WebKit::WebExtensionAPIObject *v9;
  uint64_t *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v12 = *((_QWORD *)v9 + 15);
  *((_QWORD *)v9 + 15) = 0;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40);
    else
      --*(_DWORD *)(v12 + 48);
  }
  v13 = *((_QWORD *)v9 + 14);
  *((_QWORD *)v9 + 14) = 0;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 40) + 8))(v13 + 40);
    else
      --*(_DWORD *)(v13 + 48);
  }
  v14 = *((_QWORD *)v9 + 13);
  *((_QWORD *)v9 + 13) = 0;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 40) + 8))(v14 + 40);
    else
      --*(_DWORD *)(v14 + 48);
  }
  v15 = *((_QWORD *)v9 + 12);
  *((_QWORD *)v9 + 12) = 0;
  if (v15)
  {
    if (*(_DWORD *)(v15 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
    else
      --*(_DWORD *)(v15 + 48);
  }
  v16 = *((_QWORD *)v9 + 11);
  *((_QWORD *)v9 + 11) = 0;
  if (v16)
  {
    if (*(_DWORD *)(v16 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v16 + 40) + 8))(v16 + 40);
    else
      --*(_DWORD *)(v16 + 48);
  }
  v17 = *((_QWORD *)v9 + 10);
  *((_QWORD *)v9 + 10) = 0;
  if (v17)
  {
    if (*(_DWORD *)(v17 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v17 + 40) + 8))(v17 + 40);
    else
      --*(_DWORD *)(v17 + 48);
  }
  v18 = *((_QWORD *)v9 + 9);
  *((_QWORD *)v9 + 9) = 0;
  if (v18)
  {
    if (*(_DWORD *)(v18 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v18 + 40) + 8))(v18 + 40);
    else
      --*(_DWORD *)(v18 + 48);
  }
  v19 = *((_QWORD *)v9 + 8);
  *((_QWORD *)v9 + 8) = 0;
  if (v19)
  {
    if (*(_DWORD *)(v19 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v19 + 40) + 8))(v19 + 40);
    else
      --*(_DWORD *)(v19 + 48);
  }
  v20 = *v10;
  *v10 = 0;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v20 + 40) + 8))(v20 + 40);
    else
      --*(_DWORD *)(v20 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v9, a2);
  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebRequest::~WebExtensionAPIWebRequest(WebKit::WebExtensionAPIWebRequest *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIWebRequest::~WebExtensionAPIWebRequest(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = off_1E34F5838;
  *((_QWORD *)this + 5) = &unk_1E34F5868;
  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  v6 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 40) + 8))(v6 + 40);
    else
      --*(_DWORD *)(v6 + 48);
  }
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 40) + 8))(v8 + 40);
    else
      --*(_DWORD *)(v8 + 48);
  }
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 40) + 8))(v9 + 40);
    else
      --*(_DWORD *)(v9 + 48);
  }
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 40) + 8))(v10 + 40);
    else
      --*(_DWORD *)(v10 + 48);
  }
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v11 + 40) + 8))(v11 + 40);
    else
      --*(_DWORD *)(v11 + 48);
  }
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, a2);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIWebRequest::~WebExtensionAPIWebRequest(WebKit::WebExtensionAPIWebRequest *this, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIWebRequest::~WebExtensionAPIWebRequest((WebKit::WebExtensionAPIWebRequest *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::WebExtensionAPIWebRequest::~WebExtensionAPIWebRequest((WebKit::WebExtensionAPIWebRequest *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebExtensionAPINotifications::onClicked(WebKit::WebExtensionAPINotifications *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    v6 = 20;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPINotifications &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 7);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPINotifications &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976C7C30(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPINotifications::onButtonClicked(WebKit::WebExtensionAPINotifications *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v6 = 19;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPINotifications &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 8);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 8);
  }
  return result;
}

IPC::Encoder *WebKit::WebExtensionAPIPermissions::getAll(uint64_t a1, _QWORD *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  WebKit::WebProcess *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = a2;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v3);
    a2 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  ++*(_DWORD *)(a1 + 48);
  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1637;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v16 = (IPC::Encoder *)v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34F5890;
  v7[1] = a1;
  v7[2] = v4;
  v15[0] = v7;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v3 + 2) + 40))((_QWORD *)v3 + 2, &v16, v15, 0);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_1976C7E24(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIPermissions::contains(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t *v19;
  WTF::StringImpl **v20;
  WTF::StringImpl **v21;
  _QWORD v22[2];
  IPC::Encoder *v23;

  v7 = a2;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  if (WebKit::WebExtensionAPIPermissions::parseDetailsDictionary(v7, (uint64_t *)&v21, (uint64_t *)&v20, CFSTR("permissions.contains()"), a4)&& WebKit::WebExtensionAPIPermissions::validatePermissionsDetails(&v21, &v20, (uint64_t *)&v19, CFSTR("permissions.contains()"), a4))
  {
    {
      v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v9);
    }
    ++*(_DWORD *)(a1 + 48);
    v10 = *a3;
    *a3 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 1636;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v23 = (IPC::Encoder *)v12;
    IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v12, &v21);
    IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v12, &v20);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = &off_1E34F58B8;
    v13[1] = a1;
    v13[2] = v10;
    v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v22[0] = v13;
    v22[1] = v14;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v9 + 2) + 40))((_QWORD *)v9 + 2, &v23, v22, 0);
    v15 = v22[0];
    v22[0] = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v23;
    v23 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v8);
      WTF::fastFree(v17, v18);
    }
  }
  if (v19)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v19, v8);
  if (v20)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v20, (WTF::StringImpl *)v8);
  if (v21)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v21, (WTF::StringImpl *)v8);

}

void sub_1976C80B0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, WTF::StringImpl **a10, WTF::StringImpl **a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  void *v14;
  WTF *v16;
  void *v17;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v16, v17);
  }
  if (a9)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a9, a2);
  if (a10)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, (WTF::StringImpl *)a2);
  if (a11)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a11, (WTF::StringImpl *)a2);

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAPIPermissions::parseDetailsDictionary(void *a1, uint64_t *a2, uint64_t *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  char *v11;
  _BOOL8 v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  const WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  void *v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[24];
  WTF::StringImpl *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  _BYTE v43[128];
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  _QWORD v47[4];

  v47[2] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a4;
  v11 = &_MergedGlobals_106;
  if ((_MergedGlobals_111 & 1) == 0)
  {
    v46[0] = CFSTR("permissions");
    v45 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v45, 1);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v46[1] = CFSTR("origins");
    v47[0] = v30;
    v44 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v44, 1);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v47[1] = v31;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v47, v46, 2);
    qword_1ECE730B0 = objc_claimAutoreleasedReturnValue();

    _MergedGlobals_111 = 1;
    v11 = &_MergedGlobals_106;
  }
  v12 = WebKit::validateDictionary(v9, CFSTR("permissions"), 0, *((void **)v11 + 22), a5);
  if (v12)
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v13 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v9, (uint64_t)CFSTR("permissions"), 1, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v39;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v39 != v16)
            objc_enumerationMutation(v14);
          MEMORY[0x19AEABCC8](&v37, *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * i));
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v37, v18, (uint64_t)v36);
          v20 = v37;
          v37 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v19);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
      }
      while (v15);
    }

    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v21 = objc_opt_class();
    WebKit::objectForKey<NSArray>(v9, (uint64_t)CFSTR("origins"), 1, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v32, v42, 16);
    if (v23)
    {
      v24 = *(_QWORD *)v33;
      do
      {
        for (j = 0; j != v23; ++j)
        {
          if (*(_QWORD *)v33 != v24)
            objc_enumerationMutation(v22);
          MEMORY[0x19AEABCC8](&v37, *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * j));
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a3, &v37, v26, (uint64_t)v36);
          v28 = v37;
          v37 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v27);
            else
              *(_DWORD *)v28 -= 2;
          }
        }
        v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v32, v42, 16);
      }
      while (v23);
    }

  }
  return v12;
}

void sub_1976C8500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIPermissions::validatePermissionsDetails(_QWORD **a1, _QWORD **a2, uint64_t *a3, void *a4, _QWORD *a5)
{
  id v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD **v15;
  WTF::StringImpl **v16;
  const WTF::StringImpl *v17;
  NSString *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int i;
  int v24;
  WTF *v25;
  __CFString *v26;
  WTF::StringImpl **v27;
  const WTF::StringImpl *v28;
  WTF::StringImpl **v29;
  WTF::StringImpl **v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  NSString *v33;
  WebKit::WebExtensionMatchPattern *v34;
  uint64_t v35;
  WebKit::WebExtensionMatchPattern *v36;
  uint64_t v37;
  __CFString *v38;
  WebKit::WebExtensionMatchPattern *v39;
  id v41;
  char v42[24];
  WebKit::WebExtensionMatchPattern *v43;
  WebKit::WebExtensionMatchPattern *v44;

  v9 = a4;
  v10 = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  v12 = (WTF::StringImpl **)v10;
  if (*a1)
    v13 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  else
    v13 = 0;
  if (v13 != v10)
  {
    v41 = v9;
    while (1)
    {
      v14 = a3;
      v15 = a2;
      v16 = v11;
      v19 = *WebKit::WebExtension::supportedPermissions((WebKit::WebExtension *)v10);
      if (!v19)
        break;
      v20 = *(_DWORD *)(v19 - 8);
      v21 = *((_DWORD *)*v12 + 4);
      if (v21 >= 0x100)
        v22 = v21 >> 8;
      else
        v22 = WTF::StringImpl::hashSlowCase(*v12);
      for (i = 0; ; v22 = i + v24)
      {
        v24 = v22 & v20;
        v25 = *(WTF **)(v19 + 8 * (v22 & v20));
        if (v25 != (WTF *)-1)
        {
          if (!v25)
            goto LABEL_22;
          v10 = WTF::equal(v25, *v12, v17);
          if ((v10 & 1) != 0)
            break;
        }
        ++i;
      }
      ++v12;
      v11 = v16;
      a2 = v15;
      if (v12 == v16)
      {
        v12 = v16;
        v9 = v41;
        a3 = v14;
      }
      else
      {
        v9 = v41;
        a3 = v14;
        while ((unint64_t)*v12 + 1 <= 1)
        {
          if (++v12 == v16)
          {
            v12 = v16;
            break;
          }
        }
      }
      if (v12 == (WTF::StringImpl **)v13)
        goto LABEL_25;
    }
LABEL_22:
    if (*v12)
    {
      v9 = v41;
      v26 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    }
    else
    {
      v26 = &stru_1E351F1B8;
      v9 = v41;
    }
    WebKit::toErrorString(0, CFSTR("permissions"), CFSTR("'%@' is not a valid permission"), v18, v26);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_44;
  }
LABEL_25:
  v27 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  v29 = v27;
  v31 = v30;
  if (*a2)
    v32 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  else
    v32 = 0;
  if ((WTF::StringImpl **)v32 != v27)
  {
    while (1)
    {
      WebKit::WebExtensionMatchPattern::getOrCreate(v29, v28, &v44);
      if (!v44 || (WebKit::WebExtensionMatchPattern::isSupported(v44) & 1) == 0)
        break;
      v34 = v44;
      CFRetain(*((CFTypeRef *)v44 + 1));
      v43 = v34;
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(a3, (uint64_t *)&v43, (uint64_t)v42);
      v35 = (uint64_t)v43;
      v43 = 0;
      if (v35)
        CFRelease(*(CFTypeRef *)(v35 + 8));
      v36 = v44;
      v44 = 0;
      if (v36)
        CFRelease(*((CFTypeRef *)v36 + 1));
      while (++v29 != v31)
      {
        if ((unint64_t)*v29 + 1 > 1)
          goto LABEL_38;
      }
      v29 = v31;
LABEL_38:
      if (v29 == (WTF::StringImpl **)v32)
        goto LABEL_39;
    }
    if (*v29)
      v38 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v38 = &stru_1E351F1B8;
    WebKit::toErrorString(0, CFSTR("origins"), CFSTR("'%@' is not a valid pattern"), v33, v38);
    *a5 = (id)objc_claimAutoreleasedReturnValue();

    v39 = v44;
    v44 = 0;
    if (v39)
      CFRelease(*((CFTypeRef *)v39 + 1));
LABEL_44:
    v37 = 0;
    goto LABEL_45;
  }
LABEL_39:
  v37 = 1;
LABEL_45:

  return v37;
}

void sub_1976C8898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;
  void *v17;

  if (a16)
    CFRelease(*(CFTypeRef *)(a16 + 8));

  _Unwind_Resume(a1);
}

WTF::StringImpl **WebKit::WebExtensionAPIPermissions::request(uint64_t a1, void *a2, WebKit::WebExtensionCallbackHandler **a3, _QWORD *a4)
{
  WTF::StringImpl *v6;
  char v7;
  const Document *v8;
  NSString *v9;
  id v10;
  NSString *v11;
  char v12;
  NSString *v13;
  NSString *v14;
  WebKit::WebProcess *v15;
  WebKit::WebExtensionCallbackHandler *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  WebKit::WebExtensionCallbackHandler *v26;
  NSString *v27;
  WebKit::WebExtensionCallbackHandler *v28;
  WTF::StringImpl **result;
  WebKit::WebExtensionCallbackHandler *v30;
  NSString *v31;
  id v32;
  id v33;
  uint64_t *v34;
  WTF::StringImpl **v35;
  WTF::StringImpl **v36;
  _QWORD v37[2];
  IPC::Encoder *v38;

  v35 = 0;
  v36 = 0;
  if (!WebKit::WebExtensionAPIPermissions::parseDetailsDictionary(a2, (uint64_t *)&v36, (uint64_t *)&v35, CFSTR("permissions.request()"), a4))goto LABEL_17;
  v33 = 0;
  v34 = 0;
  v7 = WebKit::WebExtensionAPIPermissions::validatePermissionsDetails(&v36, &v35, (uint64_t *)&v34, CFSTR("permissions.request()"), &v33);
  v10 = v33;
  if ((v7 & 1) != 0)
  {
    if ((WebCore::UserGestureIndicator::processingUserGesture(0, v8) & 1) != 0)
    {
      v32 = v10;
      v12 = WebKit::WebExtensionAPIPermissions::verifyRequestedPermissions(a1, &v36, &v34, CFSTR("permissions.request()"), &v32);
      v13 = (NSString *)v32;

      if ((v12 & 1) != 0)
      {
        {
          v15 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v15);
        }
        ++*(_DWORD *)(a1 + 48);
        v16 = *a3;
        *a3 = 0;
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
        v18 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v18 = 1639;
        *(_QWORD *)(v18 + 8) = v17;
        *(_QWORD *)(v18 + 528) = v18 + 16;
        *(_QWORD *)(v18 + 536) = v18 + 16;
        *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v18 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
        v38 = (IPC::Encoder *)v18;
        IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v18, &v36);
        IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v18, &v35);
        v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v19 = &off_1E34F58E0;
        v19[1] = a1;
        v19[2] = v16;
        v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v37[0] = v19;
        v37[1] = v20;
        (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v15 + 2) + 40))((_QWORD *)v15 + 2, &v38, v37, 0);
        v22 = v37[0];
        v37[0] = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        v23 = v38;
        v38 = 0;
        if (v23)
        {
          IPC::Encoder::~Encoder(v23, v21);
          WTF::fastFree(v24, v25);
        }
      }
      else
      {
        v30 = *a3;
        WebKit::toErrorString((WebKit *)CFSTR("permissions.request()"), 0, v13, v14);
        v31 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtensionCallbackHandler::reportError(v30, v31);

      }
      goto LABEL_14;
    }
    v28 = *a3;
    WebKit::toErrorString((WebKit *)CFSTR("permissions.request()"), 0, CFSTR("must be called during a user gesture"), v11);
    v27 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionCallbackHandler::reportError(v28, v27);
  }
  else
  {
    v26 = *a3;
    WebKit::toErrorString((WebKit *)CFSTR("permissions.request()"), 0, (NSString *)v10, v9);
    v27 = (NSString *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionCallbackHandler::reportError(v26, v27);
  }

  v13 = (NSString *)v10;
LABEL_14:
  if (v34)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v34, v21);

LABEL_17:
  if (v35)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v35, v6);
  result = v36;
  if (v36)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v36, v6);
  return result;
}

void sub_1976C8BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, WTF::StringImpl **a12, WTF::StringImpl **a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  void *v16;
  void *v17;
  void *v19;
  WTF::StringImpl *v20;

  if (a11)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a11, v19);

  if (a12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a12, v20);
  if (a13)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, v20);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIPermissions::verifyRequestedPermissions(uint64_t a1, _QWORD **a2, _QWORD **a3, void *a4, _QWORD *a5)
{
  id v8;
  NSDictionary *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  NSString *v13;
  void *v14;
  unsigned __int8 **v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;
  unsigned __int8 **v18;
  uint64_t v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  unsigned __int8 **v24;
  NSString *v25;
  WTF::StringImpl **v26;
  WTF::StringImpl **v27;
  WTF::StringImpl **v28;
  const WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  WTF::StringImpl *v37;
  int v38;
  int v39;
  unsigned __int8 **v40;
  unsigned __int8 **v41;
  unsigned __int8 **v42;
  unsigned __int8 **v43;
  uint64_t v44;
  NSString *v45;
  __CFString *v46;
  unsigned __int8 **v47;
  unsigned __int8 **v48;
  unsigned __int8 **v49;
  unsigned __int8 **v50;
  unsigned __int8 **v51;
  char v52;
  char v53;
  uint64_t v54;
  NSString *v55;
  __CFString *v56;
  _QWORD *v58;
  _QWORD *v59;
  WTF::StringImpl **v60;
  WTF::StringImpl **v61[3];

  v58 = a5;
  v8 = a4;
  WTF::RetainPtr<NSMutableArray>::get((id *)(*(_QWORD *)(a1 + 24) + 104));
  v9 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
  v10 = API::Object::newObject(0x160uLL, 110);
  WebKit::WebExtension::WebExtension((WebKit::WebExtension *)v10, v9, MEMORY[0x1E0C9AA70]);

  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((id *)v10);
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v60, (_QWORD **)(v10 + 104));
  WebKit::WebExtension::allRequestedMatchPatterns((id *)v10, (uint64_t *)&v59);
  if (objc_msgSend(v8, "isEqualToString:", CFSTR("permissions.remove()")))
  {
    if (*a2)
    {
      if (*((_DWORD *)*a2 - 3))
      {
        WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::intersectionWith<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((uint64_t *)v61, a2, (uint64_t *)&v60);
        if (v61[0])
        {
          v12 = *((_DWORD *)v61[0] - 3);
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v61[0], v11);
          if (v12)
          {
            WebKit::toErrorString(0, CFSTR("permissions"), CFSTR("required permissions cannot be removed"), v13);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            goto LABEL_91;
          }
        }
      }
    }
    v15 = (unsigned __int8 **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a3);
    v16 = v15;
    v18 = v17;
    if (*a3)
      v19 = (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)];
    else
      v19 = 0;
    if ((unsigned __int8 **)v19 != v15)
    {
      while (1)
      {
        v20 = (unsigned __int8 **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v59);
        v21 = v20;
        v23 = v22;
        v24 = v59 ? (unsigned __int8 **)&v59[*((unsigned int *)v59 - 1)] : 0;
        if (v24 != v20)
          break;
LABEL_21:
        while (++v16 != v18)
        {
          if ((unint64_t)(*v16 + 1) > 1)
            goto LABEL_25;
        }
        v16 = v18;
LABEL_25:
        if (v16 == (unsigned __int8 **)v19)
          goto LABEL_26;
      }
      while (!WebKit::WebExtensionMatchPattern::matchesPattern(*v21, *v16, 2))
      {
        while (++v21 != v23)
        {
          if ((unint64_t)(*v21 + 1) > 1)
            goto LABEL_20;
        }
        v21 = v23;
LABEL_20:
        if (v21 == v24)
          goto LABEL_21;
      }
      WebKit::toErrorString(0, CFSTR("origins"), CFSTR("required permissions cannot be removed"), v25);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_91;
    }
  }
LABEL_26:
  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((id *)v10);
  v26 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v10 + 112));
  v28 = v27;
  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((id *)v10);
  v30 = *(_QWORD *)(v10 + 112);
  if (v30)
    v31 = (WTF::StringImpl **)(v30 + 8 * *(unsigned int *)(v30 - 4));
  else
    v31 = 0;
  while (v26 != v31)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v60, v26, v29, (uint64_t)v61);
    while (++v26 != v28)
    {
      if ((unint64_t)*v26 + 1 > 1)
        goto LABEL_34;
    }
    v26 = v28;
LABEL_34:
    ;
  }
  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((id *)v10);
  v32 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)(v10 + 96));
  v34 = v33;
  WebKit::WebExtension::populatePermissionsPropertiesIfNeeded((id *)v10);
  v35 = *(_QWORD *)(v10 + 96);
  if (v35)
    v36 = (uint64_t *)(v35 + 8 * *(unsigned int *)(v35 - 4));
  else
    v36 = 0;
  while (v32 != v36)
  {
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add((uint64_t *)&v59, v32, (uint64_t)v61);
    while (++v32 != v34)
    {
      if ((unint64_t)(*v32 + 1) > 1)
        goto LABEL_45;
    }
    v32 = v34;
LABEL_45:
    ;
  }
  if (*a2 && *((_DWORD *)*a2 - 3))
  {
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::intersectionWith<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>((uint64_t *)v61, a2, (uint64_t *)&v60);
    if (v61[0])
      v38 = *((_DWORD *)v61[0] - 3);
    else
      v38 = 0;
    if (*a2)
      v39 = *((_DWORD *)*a2 - 3);
    else
      v39 = 0;
    if (v61[0])
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v61[0], v37);
    if (v38 != v39)
      goto LABEL_103;
  }
  if (*a3 && *((_DWORD *)*a3 - 3) && (!v59 || !*((_DWORD *)v59 - 3)))
  {
LABEL_103:
    if (objc_msgSend(v8, "isEqualToString:", CFSTR("permissions.remove()"), v58))
      v46 = CFSTR("only permissions specified in the manifest may be removed");
    else
      v46 = CFSTR("only permissions specified in the manifest may be requested");
    WebKit::toErrorString(0, CFSTR("permissions"), &v46->isa, v45);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v40 = (unsigned __int8 **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(a3);
    v42 = v40;
    v43 = v41;
    if (*a3)
      v44 = (uint64_t)&(*a3)[*((unsigned int *)*a3 - 1)];
    else
      v44 = 0;
    if ((unsigned __int8 **)v44 == v40)
    {
LABEL_86:
      v54 = 1;
      goto LABEL_92;
    }
    while (1)
    {
      v47 = (unsigned __int8 **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v59);
      v48 = v47;
      v50 = v49;
      v51 = v59 ? (unsigned __int8 **)&v59[*((unsigned int *)v59 - 1)] : 0;
      if (v51 == v47)
        break;
      v52 = 0;
      do
      {
        v53 = WebKit::WebExtensionMatchPattern::matchesPattern(*v48, *v42, 2);
        if ((v53 & 1) != 0)
          goto LABEL_81;
        while (++v48 != v50)
        {
          if ((unint64_t)(*v48 + 1) > 1)
            goto LABEL_79;
        }
        v48 = v50;
LABEL_79:
        v52 |= v53;
      }
      while (v48 != v51);
      if ((v52 & 1) == 0)
        break;
LABEL_81:
      while (++v42 != v43)
      {
        if ((unint64_t)(*v42 + 1) > 1)
          goto LABEL_85;
      }
      v42 = v43;
LABEL_85:
      if (v42 == (unsigned __int8 **)v44)
        goto LABEL_86;
    }
    if (objc_msgSend(v8, "isEqualToString:", CFSTR("permissions.remove()"), v58))
      v56 = CFSTR("only permissions specified in the manifest may be removed");
    else
      v56 = CFSTR("only permissions specified in the manifest may be requested");
    WebKit::toErrorString(0, CFSTR("origins"), &v56->isa, v55);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }
LABEL_91:
  v54 = 0;
  *v58 = v14;
LABEL_92:
  if (v59)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v59, v41);
  if (v60)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v60, (WTF::StringImpl *)v41);
    if (!v10)
      goto LABEL_97;
    goto LABEL_96;
  }
  if (v10)
LABEL_96:
    CFRelease(*(CFTypeRef *)(v10 + 8));
LABEL_97:

  return v54;
}

void sub_1976C9268(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, WTF::StringImpl **a11)
{
  void *v11;
  uint64_t v12;

  if (a10)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a10, a2);
  if (a11)
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a11, (WTF::StringImpl *)a2);
    if (!v12)
    {
LABEL_6:

      _Unwind_Resume(a1);
    }
  }
  else if (!v12)
  {
    goto LABEL_6;
  }
  CFRelease(*(CFTypeRef *)(v12 + 8));
  goto LABEL_6;
}

WTF::StringImpl **WebKit::WebExtensionAPIPermissions::remove(uint64_t a1, void *a2, WebKit::WebExtensionCallbackHandler **a3, _QWORD *a4)
{
  WTF::StringImpl *v6;
  char v7;
  id v8;
  NSString *v9;
  void *v10;
  char v11;
  NSString *v12;
  NSString *v13;
  WebKit::WebProcess *v14;
  WebKit::WebExtensionCallbackHandler *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  WebKit::WebExtensionCallbackHandler *v25;
  NSString *v26;
  WebKit::WebExtensionCallbackHandler *v27;
  NSString *v28;
  WTF::StringImpl **result;
  id v30;
  id v31;
  uint64_t *v32;
  WTF::StringImpl **v33;
  WTF::StringImpl **v34;
  _QWORD v35[2];
  IPC::Encoder *v36;

  v33 = 0;
  v34 = 0;
  if (WebKit::WebExtensionAPIPermissions::parseDetailsDictionary(a2, (uint64_t *)&v34, (uint64_t *)&v33, CFSTR("permissions.remove()"), a4))
  {
    v31 = 0;
    v32 = 0;
    v7 = WebKit::WebExtensionAPIPermissions::validatePermissionsDetails(&v34, &v33, (uint64_t *)&v32, CFSTR("permissions.remove()"), &v31);
    v8 = v31;
    v10 = v8;
    if ((v7 & 1) != 0)
    {
      v30 = v8;
      v11 = WebKit::WebExtensionAPIPermissions::verifyRequestedPermissions(a1, &v34, &v32, CFSTR("permissions.remove()"), &v30);
      v12 = (NSString *)v30;

      if ((v11 & 1) != 0)
      {
        {
          v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
        }
        else
        {
          v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v14);
        }
        ++*(_DWORD *)(a1 + 48);
        v15 = *a3;
        *a3 = 0;
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
        v17 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v17 = 1638;
        *(_QWORD *)(v17 + 8) = v16;
        *(_QWORD *)(v17 + 528) = v17 + 16;
        *(_QWORD *)(v17 + 536) = v17 + 16;
        *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v17 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
        v36 = (IPC::Encoder *)v17;
        IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v17, &v34);
        IPC::ArgumentCoder<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v17, &v33);
        v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v18 = &off_1E34F5908;
        v18[1] = a1;
        v18[2] = v15;
        v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v35[0] = v18;
        v35[1] = v19;
        (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v14 + 2) + 40))((_QWORD *)v14 + 2, &v36, v35, 0);
        v21 = v35[0];
        v35[0] = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        v22 = v36;
        v36 = 0;
        if (v22)
        {
          IPC::Encoder::~Encoder(v22, v20);
          WTF::fastFree(v23, v24);
        }
      }
      else
      {
        v27 = *a3;
        WebKit::toErrorString((WebKit *)CFSTR("permissions.remove()"), 0, v12, v13);
        v28 = (NSString *)objc_claimAutoreleasedReturnValue();
        WebKit::WebExtensionCallbackHandler::reportError(v27, v28);

      }
    }
    else
    {
      v25 = *a3;
      WebKit::toErrorString((WebKit *)CFSTR("permissions.remove()"), 0, (NSString *)v8, v9);
      v26 = (NSString *)objc_claimAutoreleasedReturnValue();
      WebKit::WebExtensionCallbackHandler::reportError(v25, v26);

      v12 = (NSString *)v10;
    }
    if (v32)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v32, v20);

  }
  if (v33)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v33, v6);
  result = v34;
  if (v34)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v34, v6);
  return result;
}

void sub_1976C95A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, WTF::StringImpl **a12, WTF::StringImpl **a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  void *v16;
  void *v17;
  void *v19;
  WTF::StringImpl *v20;

  if (a11)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(a11, v19);

  if (a12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a12, v20);
  if (a13)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a13, v20);
  _Unwind_Resume(a1);
}

WTF *WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::intersectionWith<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(uint64_t *a1, _QWORD **a2, uint64_t *a3)
{
  WTF *result;
  const WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int i;
  int v17;
  char v18[24];

  *a1 = 0;
  result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  v8 = (WTF::StringImpl **)result;
  v10 = v9;
  if (*a2)
    v11 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  else
    v11 = 0;
  if ((WTF *)v11 != result)
  {
    do
    {
      v12 = *a3;
      if (!*a3)
        goto LABEL_5;
      v13 = *(_DWORD *)(v12 - 8);
      v14 = *((_DWORD *)*v8 + 4);
      if (v14 >= 0x100)
        v15 = v14 >> 8;
      else
        v15 = WTF::StringImpl::hashSlowCase(*v8);
      for (i = 0; ; v15 = i + v17)
      {
        v17 = v15 & v13;
        result = *(WTF **)(v12 + 8 * (v15 & v13));
        if (result != (WTF *)-1)
        {
          if (!result)
            goto LABEL_5;
          if ((WTF::equal(result, *v8, v7) & 1) != 0)
            break;
        }
        ++i;
      }
      result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a1, v8, v7, (uint64_t)v18);
LABEL_5:
      while (++v8 != v10)
      {
        if ((unint64_t)*v8 + 1 > 1)
          goto LABEL_9;
      }
      v8 = v10;
LABEL_9:
      ;
    }
    while (v8 != (WTF::StringImpl **)v11);
  }
  return result;
}

void sub_1976C9808(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl ***v2;

  if (*v2)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebExtensionAPIPermissions::onAdded(WebKit::WebExtensionAPIPermissions *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    v6 = 21;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIPermissions &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 7);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 7);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 7);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIPermissions &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976C9914(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIPermissions::onRemoved(WebKit::WebExtensionAPIPermissions *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v6 = 22;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIPermissions &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 8);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 8);
  }
  return result;
}

void WebKit::WebExtensionContextProxy::dispatchPermissionsEvent(uint64_t a1, char a2, _QWORD **a3, _QWORD **a4)
{
  void *v6;
  void *v7;
  WebCore *v8;
  WebCore *v9;
  WebCore *v10;
  id v11;
  char v12;
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  WebKit::toAPIArray(a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::toAPIArray(a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = CFSTR("permissions");
  v13[1] = CFSTR("origins");
  v14[0] = v6;
  v14[1] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 2);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v8 = (WebCore *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v8 = off_1E34F5930;
  *((_QWORD *)v8 + 1) = &v12;
  *((_QWORD *)v8 + 2) = &v11;
  v10 = v8;
  WebCore::mainThreadNormalWorld(v8);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v10);
  v9 = v10;
  v10 = 0;
  if (v9)
    (*(void (**)(WebCore *))(*(_QWORD *)v9 + 8))(v9);

}

void sub_1976C9AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsGetAll,WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5890;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsGetAll,WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5890;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsGetAll,WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v17[2];
  _QWORD v18[2];

  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebExtensionContext::PermissionsGetAll,WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, &v12);
  if (v16)
  {
    v4 = v12;
    v12 = 0;
    v18[0] = v4;
    v5 = v13;
    v13 = 0;
    v18[1] = v5;
    v6 = v14;
    v14 = 0;
    v17[0] = v6;
    v7 = v15;
    v15 = 0;
    v17[1] = v7;
    WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v18, (uint64_t)v17);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v8);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v9);
    return std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v12, v10);
  }
  else
  {
    std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v12, v3);
    return IPC::Connection::cancelReply<Messages::WebExtensionContext::PermissionsGetAll,WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976C9CCC(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  void *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 - 32, v5);
  std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, v6);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebExtensionContext::PermissionsGetAll,WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  void *v1;
  void *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  v4[0] = 0;
  v4[1] = 0;
  WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, (uint64_t)v5, (uint64_t)v4);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v1);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v2);
}

void sub_1976C9D34(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v12;

  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, v12);
  _Unwind_Resume(a1);
}

void IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!a3[32])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (!v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
  }
}

void sub_1976C9DA4(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebCore::FontCachePrewarmInformation,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  void *v5;
  _BYTE v6[16];
  char v7;

  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v6, a3);
    if (v7)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v5);
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
}

void sub_1976C9E1C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a12)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  void *v5;
  uint64_t v6[2];
  char v7;

  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)a2, v6, (uint64_t)a3);
    if (v7)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v5);
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
}

void sub_1976C9EAC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a12)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);
  _Unwind_Resume(exception_object);
}

void IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_BYTE *)a1 + 16) && *((_BYTE *)a2 + 16))
  {
    v3 = *a1;
    *a1 = 0;
    *(_QWORD *)a3 = v3;
    v4 = a1[1];
    a1[1] = 0;
    *(_QWORD *)(a3 + 8) = v4;
    v5 = *a2;
    *a2 = 0;
    *(_QWORD *)(a3 + 16) = v5;
    v6 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(a3 + 24) = v6;
    *(_BYTE *)(a3 + 32) = 1;
  }
  else
  {
    __break(1u);
  }
}

void WebKit::WebExtensionAPIPermissions::getAll(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  objc_object *v7;
  id v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef cf;
  CFTypeRef v12;
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v13[0] = CFSTR("permissions");
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(a2, (uint64_t *)&v12);
  WTF::RetainPtr<NSMutableArray>::get((id *)&v12);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v13[1] = CFSTR("origins");
  v14[0] = v5;
  WTF::createNSArray<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>(a3, (uint64_t *)&cf);
  WTF::RetainPtr<NSMutableArray>::get((id *)&cf);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v14[1] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 2);
  v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
  v8 = WebKit::WebExtensionCallbackHandler::call(a1, v7);

  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);

  v10 = v12;
  v12 = 0;
  if (v10)
    CFRelease(v10);
}

void sub_1976CA02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, CFTypeRef a11)
{
  void *v11;
  void *v12;
  void *v13;

  if (cf)
    CFRelease(cf);

  if (a11)
    CFRelease(a11);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsContains,WebKit::WebExtensionAPIPermissions::contains(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::contains(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F58B8;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsContains,WebKit::WebExtensionAPIPermissions::contains(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::contains(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F58B8;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

id WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsContains,WebKit::WebExtensionAPIPermissions::contains(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::contains(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  WebKit::WebExtensionCallbackHandler *v4;
  objc_object *v5;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    if ((_BYTE)v3)
      v5 = (objc_object *)MEMORY[0x1E0C9AAB0];
    else
      v5 = (objc_object *)MEMORY[0x1E0C9AAA0];
    v4 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
  }
  else
  {
    v4 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    v5 = (objc_object *)MEMORY[0x1E0C9AAA0];
  }
  return WebKit::WebExtensionCallbackHandler::call(v4, v5);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsRequest,WebKit::WebExtensionAPIPermissions::request(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::request(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F58E0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsRequest,WebKit::WebExtensionAPIPermissions::request(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::request(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F58E0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

id WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsRequest,WebKit::WebExtensionAPIPermissions::request(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::request(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  WebKit::WebExtensionCallbackHandler *v4;
  objc_object *v5;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    if ((_BYTE)v3)
      v5 = (objc_object *)MEMORY[0x1E0C9AAB0];
    else
      v5 = (objc_object *)MEMORY[0x1E0C9AAA0];
    v4 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
  }
  else
  {
    v4 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    v5 = (objc_object *)MEMORY[0x1E0C9AAA0];
  }
  return WebKit::WebExtensionCallbackHandler::call(v4, v5);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsRemove,WebKit::WebExtensionAPIPermissions::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5908;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsRemove,WebKit::WebExtensionAPIPermissions::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5908;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

id WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::PermissionsRemove,WebKit::WebExtensionAPIPermissions::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIPermissions::remove(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  WebKit::WebExtensionCallbackHandler *v4;
  objc_object *v5;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    if ((_BYTE)v3)
      v5 = (objc_object *)MEMORY[0x1E0C9AAB0];
    else
      v5 = (objc_object *)MEMORY[0x1E0C9AAA0];
    v4 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
  }
  else
  {
    v4 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    v5 = (objc_object *)MEMORY[0x1E0C9AAA0];
  }
  return WebKit::WebExtensionCallbackHandler::call(v4, v5);
}

void WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::add(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = (v12 >> 31) ^ v12;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v8;
    v16 = (uint64_t *)(v6 + 8 * v15);
    v17 = *v16;
    if (*v16 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v15);
LABEL_10:
    v13 = i + v15;
  }
  if (!v17)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*a1 - 16);
      v16 = v9;
    }
    WTF::GenericHashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>::assignToEmpty<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>> const&>(v16, a2);
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v23 = *a1;
    if (*a1)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 <= 2 * v25)
      {
LABEL_25:
        v16 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(a1, v16);
        v23 = *a1;
        if (*a1)
          v26 = *(unsigned int *)(v23 - 4);
        else
          v26 = 0;
      }
    }
    else if (3 * v26 <= 4 * v25)
    {
      goto LABEL_25;
    }
    v22 = v23 + 8 * v26;
    v21 = 1;
    goto LABEL_30;
  }
  if (v17 != *a2)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v20 = 0;
  else
    v20 = *(unsigned int *)(v6 - 4);
  v21 = 0;
  v22 = v6 + 8 * v20;
LABEL_30:
  *(_QWORD *)a3 = v16;
  *(_QWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 16) = v21;
}

{
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = *v17;
    if (*v17 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*a1 - 16);
      v10 = *a2;
      v17 = v9;
    }
    *a2 = 0;
    v19 = *v17;
    *v17 = v10;
    if (v19)
      CFRelease(*(CFTypeRef *)(v19 + 8));
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v25 = *a1;
    if (*a1)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_27:
        v17 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(a1, v17);
        v25 = *a1;
        if (*a1)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_27;
    }
    v24 = v25 + 8 * v28;
    v23 = 1;
    goto LABEL_32;
  }
  if (v18 != v10)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v22 = 0;
  else
    v22 = *(unsigned int *)(v6 - 4);
  v23 = 0;
  v24 = v6 + 8 * v22;
LABEL_32:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = v23;
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (uint64_t *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          v14 = (_QWORD *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::lookupForReinsert(a1, v13);
          v15 = *v14;
          *v14 = 0;
          if (v15)
            CFRelease(*(CFTypeRef *)(v15 + 8));
          v16 = *v13;
          *v13 = 0;
          *v14 = v16;
          v17 = *v13;
          *v13 = 0;
          if (v17)
            CFRelease(*(CFTypeRef *)(v17 + 8));
          if (v13 == a3)
            v11 = v14;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

void WTF::GenericHashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>::assignToEmpty<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  CFRetain(*(CFTypeRef *)(*a2 + 8));
  v4 = *a1;
  *a1 = v3;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchPermissionsEvent(WebKit::WebExtensionEventListenerType,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIPermissions *v3;
  int v4;
  WebKit::WebExtensionAPIEvent *v5;

  v3 = (WebKit::WebExtensionAPIPermissions *)WebKit::WebExtensionAPINamespace::permissions(this);
  v4 = **(unsigned __int8 **)(a1 + 8);
  if (v4 == 22)
  {
    v5 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIPermissions::onRemoved(v3);
  }
  else
  {
    if (v4 != 21)
      return;
    v5 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIPermissions::onAdded(v3);
  }
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v5, **(objc_object ***)(a1 + 16));
}

uint64_t WebKit::WebExtensionAPIPort::get@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  *a2 = 0;
  if ((_MergedGlobals_112 & 1) != 0)
  {
    v3 = qword_1ECE730C0;
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
    if (v3)
    {
      v5 = v3 + 16 * *(unsigned int *)(v3 - 4);
      goto LABEL_6;
    }
  }
  else
  {
    qword_1ECE730C0 = 0;
    _MergedGlobals_112 = 1;
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a1);
  }
  v5 = 0;
LABEL_6:
  if (v5 == result)
    return result;
  v6 = *(_QWORD *)(result + 8);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = v6 + 8 * v7;
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = *(_QWORD *)(result + 8);
      if ((_DWORD)v7)
      {
        v10 = 8 * v7;
        v9 = *(_QWORD *)(result + 8);
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          v10 -= 8;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_14;
          }
        }
      }
      goto LABEL_14;
    }
    v9 = v6 + 8 * v7;
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = v6 + 8 * v7;
  if (v6)
  {
LABEL_14:
    v11 = v6 + 8 * *(unsigned int *)(v6 - 4);
    goto LABEL_19;
  }
  v11 = 0;
LABEL_19:
  if (v11 == v9)
    return result;
  do
  {
    v12 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    ++*(_DWORD *)(v12 + 48);
    v13 = *a2;
    if (*a2
      || (WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::expand(a2),
          (v13 = *a2) != 0))
    {
      v14 = *(_DWORD *)(v13 - 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = 0;
    v16 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = (v18 >> 31) ^ v18;
    for (i = 1; ; ++i)
    {
      v21 = v19 & v14;
      v22 = (uint64_t *)(v13 + 8 * v21);
      result = *v22;
      if (*v22 == -1)
      {
        v15 = (uint64_t *)(v13 + 8 * v21);
        goto LABEL_29;
      }
      if (!result)
      {
        if (v15)
        {
          *v15 = 0;
          --*(_DWORD *)(*a2 - 16);
          *v15 = v12;
        }
        else
        {
          *v22 = v12;
        }
        v23 = *a2;
        if (*a2)
          v24 = *(_DWORD *)(v23 - 12) + 1;
        else
          v24 = 1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = (*(_DWORD *)(v23 - 16) + v24);
        v26 = *(unsigned int *)(v23 - 4);
        if (v26 > 0x400)
        {
          if (v26 > 2 * v25)
            goto LABEL_44;
        }
        else if (3 * v26 > 4 * v25)
        {
          goto LABEL_44;
        }
        result = WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::expand(a2);
        goto LABEL_44;
      }
      if (result == v12)
        break;
LABEL_29:
      v19 = i + v21;
    }
    if (v12)
    {
      if (*(_DWORD *)(v12 + 48) == 1)
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(v12 + 40) + 8))(v12 + 40, v15);
      else
        --*(_DWORD *)(v12 + 48);
    }
LABEL_44:
    v27 = v9 + 8;
    v9 = v8;
    if (v27 != v8)
    {
      v9 = v27;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 8;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  while (v9 != v11);
  return result;
}

void sub_1976CAC74(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t **v2;

  if (*v2)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::deallocateTable(*v2, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIPort::add(WebKit::WebExtensionAPIPort *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int i;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  NSObject *v46;

  if ((_MergedGlobals_112 & 1) != 0)
  {
    v3 = qword_1ECE730C0;
    v4 = *((_QWORD *)this + 10);
    if (qword_1ECE730C0)
    {
LABEL_4:
      v5 = *(_DWORD *)(v3 - 8);
      goto LABEL_5;
    }
  }
  else
  {
    qword_1ECE730C0 = 0;
    _MergedGlobals_112 = 1;
    v4 = *((_QWORD *)this + 10);
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(0);
  v3 = qword_1ECE730C0;
  if (qword_1ECE730C0)
    goto LABEL_4;
  v5 = 0;
LABEL_5:
  v6 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = (uint64_t *)(v3 + 16 * v9);
  v11 = *v10;
  if (*v10)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != v4)
    {
      if (v11 == -1)
        v12 = v10;
      v9 = (v9 + v13) & v5;
      v10 = (uint64_t *)(v3 + 16 * v9);
      v11 = *v10;
      ++v13;
      if (!*v10)
      {
        if (v12)
        {
          *v12 = 0;
          v12[1] = 0;
          --*(_DWORD *)(v3 - 16);
          v10 = v12;
        }
        goto LABEL_13;
      }
    }
    goto LABEL_24;
  }
LABEL_13:
  v14 = v10[1];
  *v10 = v4;
  v10[1] = 0;
  if (v14)
    WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::deallocateTable(v14, a2);
  if (qword_1ECE730C0)
    v15 = *(_DWORD *)(qword_1ECE730C0 - 12) + 1;
  else
    v15 = 1;
  *(_DWORD *)(qword_1ECE730C0 - 12) = v15;
  if (qword_1ECE730C0)
    v16 = *(_DWORD *)(qword_1ECE730C0 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(qword_1ECE730C0 - 16) + v16);
  v18 = *(unsigned int *)(qword_1ECE730C0 - 4);
  if (v18 <= 0x400)
  {
    if (3 * v18 > 4 * v17)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v18 <= 2 * v17)
LABEL_23:
    v10 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v10);
LABEL_24:
  v19 = *((_QWORD *)this + 7);
  if (!v19)
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = this;
    v21 = (unsigned int *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v19;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, v20);
      }
      v19 = *((_QWORD *)this + 7);
    }
  }
  v24 = v10 + 1;
  do
    v25 = __ldaxr((unsigned int *)v19);
  while (__stlxr(v25 + 1, (unsigned int *)v19));
  v26 = *v24;
  if (*v24
    || (WTF::HashTable<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>>::expand(v24),
        (v26 = *v24) != 0))
  {
    v27 = *(_DWORD *)(v26 - 8);
  }
  else
  {
    v27 = 0;
  }
  v28 = 0;
  v29 = *(_QWORD *)(v19 + 8);
  v30 = (~(v29 << 32) + v29) ^ ((unint64_t)(~(v29 << 32) + v29) >> 22);
  v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
  v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
  v33 = (v32 >> 31) ^ v32;
  for (i = 1; ; ++i)
  {
    v35 = v33 & v27;
    v36 = (uint64_t *)(v26 + 8 * v35);
    v37 = *v36;
    if (*v36 == -1)
    {
      v28 = (uint64_t *)(v26 + 8 * v35);
      goto LABEL_41;
    }
    if (!v37)
    {
      if (v28)
      {
        *v28 = 0;
        --*(_DWORD *)(*v24 - 16);
        *v28 = v19;
      }
      else
      {
        *v36 = v19;
      }
      v40 = *v24;
      if (*v24)
        v41 = *(_DWORD *)(v40 - 12) + 1;
      else
        v41 = 1;
      *(_DWORD *)(v40 - 12) = v41;
      v42 = *v24;
      if (*v24)
        v43 = *(_DWORD *)(v42 - 12);
      else
        v43 = 0;
      v44 = (*(_DWORD *)(v42 - 16) + v43);
      v45 = *(unsigned int *)(v42 - 4);
      if (v45 > 0x400)
      {
        if (v45 > 2 * v44)
          goto LABEL_58;
      }
      else if (3 * v45 > 4 * v44)
      {
        goto LABEL_58;
      }
      WTF::HashTable<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>>::expand(v24);
      goto LABEL_58;
    }
    if (*(_QWORD *)(v37 + 8) == v29)
      break;
LABEL_41:
    v33 = i + v35;
  }
  if (v19)
  {
    do
    {
      v38 = __ldaxr((unsigned int *)v19);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, (unsigned int *)v19));
    if (!v39)
    {
      atomic_store(1u, (unsigned int *)v19);
      WTF::fastFree((WTF *)v19, v28);
    }
  }
LABEL_58:
  v46 = (id)qword_1ECE710C8;
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    __asm { BR              X10 }

}

void sub_1976CB178(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WebKit::WebExtensionAPIPort **WebKit::WebExtensionAPIPort::remove(WebKit::WebExtensionAPIPort *this)
{
  WebKit::WebExtensionAPIPort **result;
  uint64_t v3;
  uint64_t v4;
  WebKit::WebExtensionAPIPort **v5;
  WebKit::WebExtensionAPIPort **v6;
  WebKit::WebProcess *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  _BYTE *v25;
  void *v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int i;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v44;
  unint64_t v45;
  size_t v46;
  char *v47;
  void *v48;
  unint64_t v49;
  size_t v50;
  char *v51;
  void *v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  IPC::Encoder *v60;

  result = (WebKit::WebExtensionAPIPort **)WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded(this);
  v3 = *((_QWORD *)this + 10);
  if (!v3)
    return result;
  if ((_MergedGlobals_112 & 1) != 0)
  {
    v4 = qword_1ECE730C0;
    result = (WebKit::WebExtensionAPIPort **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(*((_QWORD *)this + 10));
    v5 = result;
    if (v4)
    {
      v6 = (WebKit::WebExtensionAPIPort **)(v4 + 16 * *(unsigned int *)(v4 - 4));
      goto LABEL_7;
    }
  }
  else
  {
    qword_1ECE730C0 = 0;
    _MergedGlobals_112 = 1;
    result = (WebKit::WebExtensionAPIPort **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v3);
    v5 = result;
  }
  v6 = 0;
LABEL_7:
  if (v6 == v5)
    return result;
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v7);
    v3 = *((_QWORD *)this + 10);
  }
  v8 = *((_BYTE *)this + 8);
  v9 = *((_BYTE *)this + 64);
  v10 = *((_QWORD *)this + 9);
  v58 = v3;
  v59 = v10;
  v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 24);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1641;
  *(_QWORD *)(v12 + 8) = v11;
  v13 = (void *)(v12 + 16);
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v60 = (IPC::Encoder *)v12;
  v14 = *(_QWORD *)(v12 + 544);
  v15 = v14 + 1;
  v16 = *(_QWORD *)(v12 + 552);
  if (v16 < v14 + 1)
  {
    v45 = (2 * v16 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v46 = v45;
      v45 *= 2;
    }
    while (v46 < v15);
    v57 = v46;
    v47 = (char *)mmap(0, v46, 3, 4098, -1, 0);
    if (v47 == (char *)-1)
      goto LABEL_72;
    v17 = v47;
    memcpy(v47, *(const void **)(v12 + 528), *(_QWORD *)(v12 + 544));
    v48 = *(void **)(v12 + 528);
    if (v48 != v13)
      munmap(v48, *(_QWORD *)(v12 + 552));
    *(_QWORD *)(v12 + 528) = v17;
    *(_QWORD *)(v12 + 552) = v57;
    v18 = *(_QWORD *)(v12 + 544);
  }
  else
  {
    v17 = *(char **)(v12 + 528);
    v18 = *(_QWORD *)(v12 + 544);
  }
  bzero(&v17[v18], v14 - v18);
  *(_QWORD *)(v12 + 544) = v15;
  v19 = (_BYTE *)(*(_QWORD *)(v12 + 528) + v14);
  *(_QWORD *)(v12 + 536) = v19 + 1;
  *v19 = v8;
  v20 = *(_QWORD *)(v12 + 544);
  v21 = v20 + 1;
  v22 = *(_QWORD *)(v12 + 552);
  if (v22 >= v20 + 1)
  {
    v23 = *(char **)(v12 + 528);
    v24 = *(_QWORD *)(v12 + 544);
    goto LABEL_14;
  }
  v49 = (2 * v22 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v50 = v49;
    v49 *= 2;
  }
  while (v50 < v21);
  v51 = (char *)mmap(0, v50, 3, 4098, -1, 0);
  if (v51 == (char *)-1)
  {
LABEL_72:
    __break(0xC471u);
    JUMPOUT(0x1976CB6C8);
  }
  v23 = v51;
  memcpy(v51, *(const void **)(v12 + 528), *(_QWORD *)(v12 + 544));
  v52 = *(void **)(v12 + 528);
  if (v52 != v13)
    munmap(v52, *(_QWORD *)(v12 + 552));
  *(_QWORD *)(v12 + 528) = v23;
  *(_QWORD *)(v12 + 552) = v50;
  v24 = *(_QWORD *)(v12 + 544);
LABEL_14:
  bzero(&v23[v24], v20 - v24);
  *(_QWORD *)(v12 + 544) = v21;
  v25 = (_BYTE *)(*(_QWORD *)(v12 + 528) + v20);
  *(_QWORD *)(v12 + 536) = v25 + 1;
  *v25 = v9;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, &v59);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, &v58);
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v7 + 2) + 32))((_QWORD *)v7 + 2, &v60, 0);
  result = (WebKit::WebExtensionAPIPort **)v60;
  v60 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v26);
    result = (WebKit::WebExtensionAPIPort **)WTF::fastFree(v27, v28);
  }
  v30 = (uint64_t *)(v5 + 1);
  v29 = (uint64_t)v5[1];
  if (v29)
  {
    v31 = *(_DWORD *)(v29 - 8);
    v32 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
    v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
    v35 = v31 & ((v34 >> 31) ^ v34);
    for (i = 1; ; ++i)
    {
      v37 = v35;
      result = *(WebKit::WebExtensionAPIPort ***)(v29 + 8 * v35);
      if (result != (WebKit::WebExtensionAPIPort **)-1)
      {
        if (!result)
          goto LABEL_37;
        if (result[1] == this)
          break;
      }
      v35 = (v35 + i) & v31;
    }
    if (v35 != *(_DWORD *)(v29 - 4))
    {
      *(_QWORD *)(v29 + 8 * v35) = 0;
      do
      {
        v40 = __ldaxr((unsigned int *)result);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, (unsigned int *)result));
      if (!v41)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (WebKit::WebExtensionAPIPort **)WTF::fastFree((WTF *)result, v26);
      }
      *(_QWORD *)(v29 + 8 * v37) = -1;
      ++*(_DWORD *)(*v30 - 16);
      v38 = *v30;
      v39 = *v30 ? *(_DWORD *)(v38 - 12) - 1 : -1;
      *(_DWORD *)(v38 - 12) = v39;
      v29 = *v30;
      if (!*v30)
        goto LABEL_38;
      v42 = *(_DWORD *)(v29 - 4);
      if (6 * *(_DWORD *)(v29 - 12) < v42 && v42 >= 9)
      {
        result = (WebKit::WebExtensionAPIPort **)WTF::HashTable<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>>::rehash((uint64_t *)v5 + 1, v42 >> 1);
        v29 = *v30;
        if (!*v30)
          goto LABEL_38;
      }
    }
LABEL_37:
    if (*(_DWORD *)(v29 - 12))
      return result;
  }
LABEL_38:
  if ((_MergedGlobals_112 & 1) == 0)
  {
    qword_1ECE730C0 = 0;
    _MergedGlobals_112 = 1;
    goto LABEL_56;
  }
  if (!qword_1ECE730C0)
  {
LABEL_56:
    if (!v5)
      return result;
    v44 = 0;
    goto LABEL_58;
  }
  v44 = qword_1ECE730C0 + 16 * *(unsigned int *)(qword_1ECE730C0 - 4);
  if ((WebKit::WebExtensionAPIPort **)v44 == v5)
    return result;
LABEL_58:
  if ((WebKit::WebExtensionAPIPort **)v44 != v5)
  {
    *v5 = (WebKit::WebExtensionAPIPort *)-1;
    if (v29)
      result = (WebKit::WebExtensionAPIPort **)WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::deallocateTable(v29, v26);
    v53 = qword_1ECE730C0;
    ++*(_DWORD *)(qword_1ECE730C0 - 16);
    if (v53)
      v54 = *(_DWORD *)(v53 - 12) - 1;
    else
      v54 = -1;
    *(_DWORD *)(v53 - 12) = v54;
    if (qword_1ECE730C0)
    {
      v55 = *(_DWORD *)(qword_1ECE730C0 - 4);
      if (6 * *(_DWORD *)(qword_1ECE730C0 - 12) < v55 && v55 >= 9)
        return (WebKit::WebExtensionAPIPort **)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v55 >> 1, 0);
    }
  }
  return result;
}

void sub_1976CB6D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

__CFString *WebKit::WebExtensionAPIPort::name(WebKit::WebExtensionAPIPort *this)
{
  __CFString *v1;

  if (*((_QWORD *)this + 12))
    v1 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v1 = &stru_1E351F1B8;
  return v1;
}

id WebKit::WebExtensionAPIPort::sender(WebKit::WebExtensionAPIPort *this)
{
  void *v1;

  if (*((_BYTE *)this + 384))
  {
    WebKit::toWebAPI((uint64_t)this + 112);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }
  return v1;
}

const void **WTF::RetainPtr<JSValue>::operator=(const void **a1, void *a2)
{
  id v3;
  void *v4;
  const void *v5;

  v3 = a2;
  v4 = v3;
  if (v3)
    CFRetain(v3);

  v5 = *a1;
  *a1 = v4;
  if (v5)
    CFRelease(v5);

  return a1;
}

void sub_1976CB7AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIPort::postMessage(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v6;
  NSString *v7;
  void *v8;
  id v9;
  NSString *v10;
  NSObject *v11;
  WebKit::WebProcess *v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  IPC::Encoder *v25;
  uint8_t buf[8];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v8 = v6;
  if (*(_BYTE *)(a1 + 88))
  {
    WebKit::toErrorString(0, 0, CFSTR("the port is disconnected"), v7);
    v9 = (id)objc_claimAutoreleasedReturnValue();
LABEL_5:
    *a4 = v9;
    goto LABEL_6;
  }
  if ((unint64_t)objc_msgSend(v6, "length") >= 0x4000001)
  {
    WebKit::toErrorString(0, CFSTR("message"), CFSTR("it exceeded the maximum allowed length"), v10);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_5;
  }
  if (*(_QWORD *)(a1 + 80))
  {
    v11 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    {
      v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v12);
    }
    v13 = *(_BYTE *)(a1 + 8);
    v14 = *(_BYTE *)(a1 + 64);
    v15 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)buf = *(_QWORD *)(a1 + 72);
    v27 = 1;
    v24 = v15;
    MEMORY[0x19AEABCC8](&v23, v8);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v17 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v17 = 1640;
    *(_QWORD *)(v17 + 8) = v16;
    *(_QWORD *)(v17 + 528) = v17 + 16;
    *(_QWORD *)(v17 + 536) = v17 + 16;
    *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v17 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
    v25 = (IPC::Encoder *)v17;
    *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = v13;
    *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = v14;
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((IPC::Encoder *)v17, (uint64_t *)buf);
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v17, &v24);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, (uint64_t *)&v23);
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v12 + 2) + 32))((_QWORD *)v12 + 2, &v25, 0);
    v19 = v25;
    v25 = 0;
    if (v19)
    {
      IPC::Encoder::~Encoder(v19, v18);
      WTF::fastFree(v20, v21);
    }
    v22 = v23;
    v23 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
LABEL_6:

}

void sub_1976CBB10(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, IPC::Encoder *a12)
{
  void *v12;
  void *v13;
  WTF::StringImpl *v14;

  if (*(_DWORD *)v14 == 2)
    WTF::StringImpl::destroy(v14, a2);
  else
    *(_DWORD *)v14 -= 2;

  _Unwind_Resume(a1);
}

unsigned int *WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded(unsigned int *this)
{
  uint64_t v1;
  NSObject *v2;
  unsigned int *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::WebExtensionCallbackHandler **v8;
  uint64_t v9;
  const OpaqueJSContext *v10;
  objc_object *v11;
  void *v12;
  void *v13;
  id v14;

  if (!*((_BYTE *)this + 88))
  {
    v1 = (uint64_t)this;
    v2 = (id)qword_1ECE710C8;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      __asm { BR              X10 }

    *(_BYTE *)(v1 + 88) = 1;
    v3 = *(unsigned int **)(v1 + 392);
    if (v3)
      WebKit::WebExtensionAPIEvent::removeAllListeners(v3);
    this = (unsigned int *)WebKit::WebExtensionAPIPort::remove((WebKit::WebExtensionAPIPort *)v1);
    v4 = *(_QWORD *)(v1 + 400);
    if (v4 && *(_DWORD *)(v4 + 84))
    {
      v5 = (id)qword_1ECE710C8;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        __asm { BR              X10 }

      v6 = *(_QWORD *)(v1 + 400);
      v7 = *(unsigned int *)(v6 + 84);
      if ((_DWORD)v7)
      {
        v8 = *(WebKit::WebExtensionCallbackHandler ***)(v6 + 72);
        v9 = 8 * v7;
        do
        {
          v10 = (const OpaqueJSContext *)*((_QWORD *)*v8 + 3);
          v11 = (objc_object *)WebKit::JSWebExtensionWrapper::wrap(v10, (void *)(v1 + 40));
          if (v11)
          {
            v12 = (void *)MEMORY[0x1E0CBE108];
            objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(v10));
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "valueWithJSValueRef:inContext:", v11, v13);
            v11 = (objc_object *)objc_claimAutoreleasedReturnValue();

          }
          v14 = WebKit::WebExtensionCallbackHandler::call(*v8, v11);

          ++v8;
          v9 -= 8;
        }
        while (v9);
        v6 = *(_QWORD *)(v1 + 400);
      }
      return WebKit::WebExtensionAPIEvent::removeAllListeners((unsigned int *)v6);
    }
  }
  return this;
}

void sub_1976CBF40(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  void *v2;
  WTF::StringImpl *v3;

  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, a2);
  else
    *(_DWORD *)v3 -= 2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIPort::onMessage(WebKit::WebExtensionAPIPort *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 49);
  if (!result)
  {
    v6 = 24;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIPort &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 49);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 49);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 49);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIPort &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976CC07C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIPort::onDisconnect(WebKit::WebExtensionAPIPort *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 50);
  if (!result)
  {
    v6 = 23;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIPort &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 50);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 50);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 50);
  }
  return result;
}

uint64_t *WebKit::WebExtensionContextProxy::dispatchPortMessageEvent(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, _QWORD *a5)
{
  void *v7;
  uint64_t *result;
  __CFString *v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  WebKit::WebExtensionCallbackHandler **v23;
  uint64_t v24;
  const OpaqueJSContext *v25;
  objc_object *v26;
  void *v27;
  void *v28;
  id v29;
  __int128 v30;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  objc_object *v35;
  uint64_t *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  WebKit::WebExtensionAPIPort::get(a4, (uint64_t *)&v36);
  result = v36;
  if (v36)
  {
    if (!*((_DWORD *)v36 - 3))
      return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::deallocateTable(result, v7);
    if (*a5)
      v9 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v9 = &stru_1E351F1B8;
    WebKit::parseJSON(v9, 1, 0);
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v36);
    v12 = v10;
    v14 = v13;
    v15 = v36;
    if (v36)
      v15 = &v36[*((unsigned int *)v36 - 1)];
    v34 = v15;
    if (v15 != v10)
    {
      v33 = a3;
      *(_QWORD *)&v11 = 134349314;
      v30 = v11;
      do
      {
        v16 = *v12;
        v17 = *(_DWORD *)(*v12 + 48) + 1;
        *(_DWORD *)(*v12 + 48) = v17;
        if (!v33 || a2 != *(_QWORD *)(v16 + 72))
        {
          v35 = v32;
          if (!*(_BYTE *)(v16 + 88))
          {
            if (*(_QWORD *)(v16 + 80))
            {
              v19 = *(_QWORD *)(v16 + 392);
              if (v19)
              {
                if (*(_DWORD *)(v19 + 84))
                {
                  v20 = (id)qword_1ECE710C8;
                  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
                    __asm { BR              X9 }

                  v21 = *(_QWORD *)(v16 + 392);
                  v22 = *(unsigned int *)(v21 + 84);
                  if ((_DWORD)v22)
                  {
                    v23 = *(WebKit::WebExtensionCallbackHandler ***)(v21 + 72);
                    v24 = 8 * v22;
                    do
                    {
                      v25 = (const OpaqueJSContext *)*((_QWORD *)*v23 + 3);
                      v26 = (objc_object *)WebKit::JSWebExtensionWrapper::wrap(v25, (void *)(v16 + 40));
                      if (v26)
                      {
                        v27 = (void *)MEMORY[0x1E0CBE108];
                        objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(v25), v30);
                        v28 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v27, "valueWithJSValueRef:inContext:", v26, v28);
                        v26 = (objc_object *)objc_claimAutoreleasedReturnValue();

                      }
                      v29 = WebKit::WebExtensionCallbackHandler::call(*v23, v35, v26);

                      ++v23;
                      v24 -= 8;
                    }
                    while (v24);
                  }
                }
              }
            }
          }

          v17 = *(_DWORD *)(v16 + 48);
        }
        v18 = v17 - 1;
        if (v18)
          *(_DWORD *)(v16 + 48) = v18;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)(v16 + 40) + 8))(v16 + 40);
        while (++v12 != v14)
        {
          if ((unint64_t)(*v12 + 1) > 1)
            goto LABEL_20;
        }
        v12 = v14;
LABEL_20:
        ;
      }
      while (v12 != v34);
    }

    result = v36;
    if (v36)
      return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::deallocateTable(result, v7);
  }
  return result;
}

void sub_1976CC4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
  void *v18;

  if (a17)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::deallocateTable(a17, v18);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::WebExtensionContextProxy::dispatchPortDisconnectEvent(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  WebKit::WebExtensionAPIPort::get(a2, (uint64_t *)&v8);
  result = v8;
  if (v8)
  {
    if (!*((_DWORD *)v8 - 3))
      return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::deallocateTable(result, v2);
    v4 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(&v8);
    v5 = (uint64_t *)v2;
    result = v8;
    if (v8)
      v6 = &v8[*((unsigned int *)v8 - 1)];
    else
      v6 = 0;
    if (v6 != v4)
    {
      do
      {
        v7 = *v4;
        *(_DWORD *)(v7 + 48) = *(_DWORD *)(*v4 + 48) + 1;
        WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded((unsigned int *)v7);
        if (*(_DWORD *)(v7 + 48) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
        else
          --*(_DWORD *)(v7 + 48);
        while (++v4 != v5)
        {
          if ((unint64_t)(*v4 + 1) > 1)
            goto LABEL_14;
        }
        v4 = v5;
LABEL_14:
        ;
      }
      while (v4 != v6);
      result = v8;
    }
    if (result)
      return (uint64_t *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::deallocateTable(result, v2);
  }
  return result;
}

void sub_1976CC674(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  if (a10)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::deallocateTable(a10, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)(v5 + 48) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
          else
            --*(_DWORD *)(v5 + 48);
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1)
{
  unsigned int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (!qword_1ECE730C0)
    return 0;
  v1 = *(_DWORD *)(qword_1ECE730C0 - 8);
  v2 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  v5 = v1 & ((v4 >> 31) ^ v4);
  v6 = *(_QWORD *)(qword_1ECE730C0 + 16 * v5);
  if (v6 == a1)
    return qword_1ECE730C0 + 16 * v5;
  v7 = 1;
  while (v6)
  {
    v5 = ((_DWORD)v5 + v7) & v1;
    v6 = *(_QWORD *)(qword_1ECE730C0 + 16 * v5);
    ++v7;
    if (v6 == a1)
      return qword_1ECE730C0 + 16 * v5;
  }
  return qword_1ECE730C0 + 16 * *(unsigned int *)(qword_1ECE730C0 - 4);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionAPIPort,WTF::RawPtrTraits<WebKit::WebExtensionAPIPort>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionAPIPort>>>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  void *v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(8 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v9 = (uint64_t *)(v2 + 8 * i);
      v10 = *v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          v11 = *a1;
          if (*a1)
            v12 = *(_DWORD *)(v11 - 8);
          else
            v12 = 0;
          v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          v17 = 1;
          do
          {
            v18 = v16;
            v19 = *(_QWORD *)(v11 + 8 * v16);
            v16 = (v16 + v17++) & v12;
          }
          while (v19);
          v20 = (_QWORD *)(v11 + 8 * v18);
          *v20 = 0;
          v21 = *v9;
          *v9 = 0;
          *v20 = v21;
          v22 = *v9;
          *v9 = 0;
          if (v22)
          {
            if (*(_DWORD *)(v22 + 48) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)(v22 + 40) + 8))(v22 + 40);
            else
              --*(_DWORD *)(v22 + 48);
          }
        }
        else
        {
          *v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  int v2;
  unsigned int v3;

  if (qword_1ECE730C0 && (v2 = *(_DWORD *)(qword_1ECE730C0 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(qword_1ECE730C0 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, a1);
}

_QWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::HashSet<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *result;

  v4 = qword_1ECE730C0;
  if (qword_1ECE730C0)
  {
    v5 = *(_DWORD *)(qword_1ECE730C0 - 4);
    v6 = *(_DWORD *)(qword_1ECE730C0 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v9 = (_DWORD *)v7;
  v10 = v7 + 16;
  if (a1)
    bzero((void *)(v7 + 16), 16 * a1);
  qword_1ECE730C0 = v10;
  v9[2] = a1 - 1;
  v9[3] = a1;
  *v9 = 0;
  *(_DWORD *)(qword_1ECE730C0 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (uint64_t *)(v4 + 16 * v11);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          if (qword_1ECE730C0)
            v17 = *(_DWORD *)(qword_1ECE730C0 - 8);
          else
            v17 = 0;
          v18 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(qword_1ECE730C0 + 16 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = (_QWORD *)(qword_1ECE730C0 + 16 * v23);
          v27 = v25 + 1;
          v26 = v25[1];
          if (v26)
          {
            WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::deallocateTable(v26, v8);
            v15 = *v14;
          }
          *v25 = v15;
          v28 = v4 + 16 * v11;
          *v27 = 0;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          *v27 = v29;
          v30 = *(_QWORD *)(v28 + 8);
          if (v30)
            WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::deallocateTable(v30, v8);
          if (v14 == a2)
            v12 = v25;
        }
        else
        {
          v16 = *(_QWORD *)(v4 + 16 * v11 + 8);
          if (v16)
            WTF::HashTable<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::GraphicsLayerCARemote,WTF::DefaultWeakPtrImpl>>>::deallocateTable(v16, v8);
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionAPIPort,WTF::DefaultWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  unsigned int **v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (unsigned int **)(v4 + 8 * i);
      v11 = *v10;
      if (*v10 != (unsigned int *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ~(*((_QWORD *)v11 + 1) << 32) + *((_QWORD *)v11 + 1);
          v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
          v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
          v17 = v13 & (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27)));
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (unsigned int **)(v12 + 8 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, v23);
              WTF::fastFree((WTF *)v23, v8);
            }
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

id WebKit::WebExtensionAPIRuntimeBase::reportError(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  const void *v19;
  void *v21;
  uint8_t buf[4];
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = qword_1ECE710C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v23 = v7;
    _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Runtime error reported: %{public}@", buf, 0xCu);
  }
  objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CBE108], "valueWithNewErrorFromMessage:inContext:", v7, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(a1 + 12) = 0;
  WTF::RetainPtr<JSValue>::operator=((const void **)(a1 + 16), v10);
  if (*a4)
  {
    objc_msgSend(CFSTR("Unchecked runtime.lastError: "), "stringByAppendingString:", v7);
    v11 = objc_claimAutoreleasedReturnValue();

    v7 = (id)v11;
    (*(void (**)(_QWORD))(*(_QWORD *)*a4 + 16))(*a4);
  }
  if (!*(_BYTE *)(a1 + 12))
  {
    objc_msgSend(v9, "globalObject");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("console"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("error"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CBE108], "valueWithNewErrorFromMessage:inContext:", v7, v9);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = v15;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v21, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (id)objc_msgSend(v14, "callWithArguments:", v16);

    if (*a4)
    {
      v18 = qword_1ECE710C8;
      if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEBUG, "Unchecked runtime.lastError", buf, 2u);
      }
    }

  }
  *(_BYTE *)(a1 + 12) = 0;
  v19 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v19)
    CFRelease(v19);

  return v10;
}

void sub_1976CD054(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id WebKit::WebExtensionAPIRuntimeBase::reportError(WebKit::WebExtensionAPIRuntimeBase *this, NSString *a2, WebKit::WebExtensionCallbackHandler *a3)
{
  NSString *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v10;

  v5 = a2;
  v6 = *((_QWORD *)a3 + 3);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E34F5958;
  v7[1] = a3;
  v10 = v7;
  WebKit::WebExtensionAPIRuntimeBase::reportError((uint64_t)this, v5, v6, &v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);

  return v8;
}

void sub_1976CD150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAPIRuntime::parseConnectOptions(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  __CFString *v6;
  void *v7;
  _BOOL8 v8;
  id v10;
  const __CFString *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = CFSTR("options");
  if (_MergedGlobals_113 == 1)
  {
    v7 = (void *)qword_1ECE730D0;
  }
  else
  {
    v11 = CFSTR("name");
    v12[0] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    qword_1ECE730D0 = (uint64_t)v7;
    _MergedGlobals_113 = 1;
  }
  v8 = WebKit::validateDictionary(v5, CFSTR("options"), 0, v7, a3);
  if (v8)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("name"));
    v10 = (id)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>(a2, &v10);

    }
  }

  return v8;
}

void sub_1976CD2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

WTF *WebKit::WebExtensionAPIRuntime::isPropertyAllowed(WebKit::WebExtensionContextProxy **this, const WTF::ASCIILiteral *a2, WebKit::WebPage *a3)
{
  const char *v5;
  BOOL v6;
  WTF *v7;
  WebKit::WebExtensionContextProxy *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;

  if ((WebKit::WebExtensionContextProxy::isUnsupportedAPI(this[3], this + 4, a2) & 1) != 0)
    return 0;
  v5 = *(const char **)a2;
  if (v5)
  {
    if (!strcmp(v5, "connectNative") || !strcmp(v5, "sendNativeMessage"))
      goto LABEL_12;
    return 0;
  }
  if ("connectNative")
    v6 = "sendNativeMessage" == 0;
  else
    v6 = 1;
  if (!v6)
    return 0;
LABEL_12:
  v8 = this[3];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = WebKit::WebExtensionContextProxy::hasPermission(v8, &v12);
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  return v7;
}

void sub_1976CD3D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id WebKit::WebExtensionAPIRuntime::getURL(uint64_t a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  id v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v1 = *(_QWORD *)(a1 + 24);
  MEMORY[0x19AEABCC8](&v7);
  MEMORY[0x19AEABB24](&v8, v1 + 40, &v7, 0);
  v3 = (id)WTF::URL::operator NSURL *();
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

void sub_1976CD4A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

__CFString *WebKit::WebExtensionAPIRuntime::runtimeIdentifier(WebKit::WebExtensionAPIRuntime *this)
{
  __CFString *v1;

  if (*(_QWORD *)(*((_QWORD *)this + 3) + 80))
    v1 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
  else
    v1 = &stru_1E351F1B8;
  return v1;
}

id WebKit::WebExtensionAPIRuntime::getPlatformInfo(uint64_t a1, WebKit::WebExtensionCallbackHandler **a2)
{
  objc_object *v2;
  uint64_t v4;
  WebKit::WebExtensionCallbackHandler **v5;
  _QWORD v6[2];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  if (byte_1ECE730C9 == 1)
  {
    v2 = (objc_object *)qword_1ECE730D8;
  }
  else
  {
    v6[0] = CFSTR("os");
    v6[1] = CFSTR("arch");
    v7[0] = CFSTR("ios");
    v7[1] = CFSTR("arm");
    v5 = a2;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
    v4 = objc_claimAutoreleasedReturnValue();
    a2 = v5;
    v2 = (objc_object *)v4;
    qword_1ECE730D8 = v4;
    byte_1ECE730C9 = 1;
  }
  return WebKit::WebExtensionCallbackHandler::call(*a2, v2);
}

void WebKit::WebExtensionAPIRuntime::getBackgroundPage(uint64_t a1, WebKit::WebExtensionCallbackHandler **a2)
{
  uint64_t v4;
  uint64_t v5;
  WebKit::WebExtensionCallbackHandler *v6;
  WebKit::WebFrame *v7;
  objc_object *v8;
  objc_object *v9;
  id v10;
  WebKit::WebProcess *v11;
  WebKit::WebExtensionCallbackHandler *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v21[2];
  IPC::Encoder *v22;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 168);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    v6 = *a2;
    WebKit::toWindowObject(*((WebKit **)*a2 + 3), *(const OpaqueJSContext **)(v5 + 72), v7);
    v8 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (!v8)
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v9 = (objc_object *)objc_claimAutoreleasedReturnValue();
    }
    v10 = WebKit::WebExtensionCallbackHandler::call(v6, v9);
    if (!v8)

    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  else
  {
    {
      v11 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v11);
    }
    ++*(_DWORD *)(a1 + 48);
    v12 = *a2;
    *a2 = 0;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v14 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v14 = 1645;
    *(_QWORD *)(v14 + 8) = v13;
    *(_QWORD *)(v14 + 528) = v14 + 16;
    *(_QWORD *)(v14 + 536) = v14 + 16;
    *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v14 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
    v22 = (IPC::Encoder *)v14;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v15 = &off_1E34F5980;
    v15[1] = a1;
    v15[2] = v12;
    v21[0] = v15;
    v21[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v11 + 2) + 40))((_QWORD *)v11 + 2, &v22, v21, 0);
    v17 = v21[0];
    v21[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v22;
    v22 = 0;
    if (v18)
    {
      IPC::Encoder::~Encoder(v18, v16);
      WTF::fastFree(v19, v20);
    }
  }
}

void sub_1976CD7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  void *v12;
  uint64_t v13;

  CFRelease(*(CFTypeRef *)(v13 - 8));
  _Unwind_Resume(a1);
}

double WebKit::WebExtensionAPIRuntime::getFrameId(WebKit::WebExtensionAPIRuntime *this, JSValue *a2)
{
  JSValue *v2;
  JSValue *v3;
  void *v4;
  WebKit::WebFrame *v5;
  const OpaqueJSContext *v6;
  const OpaqueJSValue *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v22;
  uint64_t v24;

  v2 = a2;
  v3 = v2;
  if (!v2
    || (-[JSValue context](v2, "context"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = (WebKit::WebFrame *)objc_msgSend(v4, "JSGlobalContextRef"),
        v6 = -[JSValue JSValueRef](v3, "JSValueRef"),
        WebKit::WebFrame::contentFrameForWindowOrFrameElement(v5, v6, v7, &v24),
        v4,
        (v8 = v24) == 0))
  {
    v22 = -1.0;
    goto LABEL_25;
  }
  v9 = *(_QWORD *)(v24 + 24);
  if (!v9)
    goto LABEL_15;
  v10 = *(_QWORD *)(v9 + 8);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = *(_QWORD *)(*(_QWORD *)(v10 + 128) + 8);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
    if (v13 == v10)
      goto LABEL_22;
    v9 = *(_QWORD *)(v8 + 24);
    if (!v9)
    {
LABEL_15:
      v20 = *(_QWORD *)(v8 + 80);
      if (v20 - 1 > 0xFFFFFFFFFFFFFFFDLL || v20 == -3)
      {
        v22 = -1.0;
      }
      else
      {
        v22 = 0.0;
        if (v20 != -2)
          v22 = (double)v20;
      }
      goto LABEL_23;
    }
  }
  v14 = *(_QWORD *)(v9 + 8);
  if (!v14)
    goto LABEL_15;
  v15 = *(_QWORD *)(v14 + 24);
  if (!v15)
    goto LABEL_15;
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
    goto LABEL_15;
  v17 = *(_QWORD **)(*(_QWORD *)(v16 + 48) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v17 + 1368))(v17) & 1) != 0)
    goto LABEL_15;
  v18 = *(_QWORD *)(v17[2] + 8);
  if (!v18)
    goto LABEL_15;
  CFRetain(*(CFTypeRef *)(v18 - 8));
  v19 = *(_QWORD *)(v18 + 72);
  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (v19 != v8)
    goto LABEL_15;
LABEL_22:
  v22 = 0.0;
LABEL_23:
  if (v24)
    CFRelease(*(CFTypeRef *)(v24 + 8));
LABEL_25:

  return v22;
}

void sub_1976CDA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));

  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::WebExtensionAPIRuntime::openOptionsPage(uint64_t a1, _QWORD *a2)
{
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  _QWORD *v13;
  WebKit::WebProcess *v14;
  _QWORD v15[2];
  IPC::Encoder *v16;

  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v13 = a2;
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v14 = WebKit::WebProcess::WebProcess(v3);
    a2 = v13;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v14;
  }
  ++*(_DWORD *)(a1 + 48);
  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1646;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v16 = (IPC::Encoder *)v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E34F59C8;
  v7[1] = a1;
  v7[2] = v4;
  v15[0] = v7;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v3 + 2) + 40))((_QWORD *)v3 + 2, &v16, v15, 0);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v16;
  v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_1976CDB98(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::WebExtensionAPIRuntime::reload(WebKit::WebExtensionAPIRuntime *this)
{
  WebKit::WebProcess *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  WebKit::WebExtensionAPIRuntime *v8;
  IPC::Encoder *v9;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v8 = this;
    v1 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v1);
    this = v8;
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 24);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1647;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v9 = (IPC::Encoder *)v3;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD))(*((_QWORD *)v1 + 2) + 32))((_QWORD *)v1 + 2, &v9, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void sub_1976CDD2C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIRuntime::sendMessage(uint64_t a1, WebKit::WebFrame *a2, void *a3, void *a4, uint64_t a5, uint64_t *a6, _QWORD *a7)
{
  id v12;
  id v13;
  NSString *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  WebKit::WebFrame *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  WebKit::WebProcess *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  _QWORD v49[3];
  WTF::StringImpl *v50;
  char v51;
  _BYTE v52[184];
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  WTF::StringImpl *v57;
  _QWORD v58[2];
  IPC::Encoder *v59;

  v12 = a3;
  v13 = a4;
  if ((unint64_t)objc_msgSend(v13, "length") >= 0x4000001)
  {
    WebKit::toErrorString(0, CFSTR("message"), CFSTR("it exceeded the maximum allowed length"), v14);
    *a7 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_47;
  }
  v15 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 24) + 80);
  if (v15)
    *(_DWORD *)v15 += 2;
  v50 = v15;
  v51 = 1;
  v52[0] = 0;
  v52[176] = 0;
  v16 = *((_QWORD *)a2 + 3);
  if (!v16)
    goto LABEL_17;
  v17 = *(_QWORD *)(v16 + 8);
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    v20 = *(_QWORD *)(*(_QWORD *)(v17 + 128) + 8);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v18);
    if (v20 == v17)
      goto LABEL_20;
    v16 = *((_QWORD *)a2 + 3);
    if (!v16)
      goto LABEL_17;
  }
  v21 = *(_QWORD *)(v16 + 8);
  if (!v21
    || (v22 = *(_QWORD *)(v21 + 24)) == 0
    || (v23 = *(_QWORD *)(v22 + 8)) == 0
    || (v24 = *(_QWORD **)(*(_QWORD *)(v23 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v24 + 1368))(v24) & 1) != 0)
    || (v25 = *(_QWORD *)(v24[2] + 8)) == 0
    || (CFRetain(*(CFTypeRef *)(v25 - 8)),
        v26 = *(WebKit::WebFrame **)(v25 + 72),
        CFRelease(*(CFTypeRef *)(v25 - 8)),
        v26 != a2))
  {
LABEL_17:
    v27 = *((_QWORD *)a2 + 10);
    if ((unint64_t)(v27 - 1) >= 0xFFFFFFFFFFFFFFFELL)
      v27 = -3;
    goto LABEL_21;
  }
LABEL_20:
  v27 = -2;
LABEL_21:
  v53 = v27;
  v54 = 1;
  v28 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(_QWORD *))(*v28 + 1368))(v28);
  v29 = *(_QWORD *)(v28[2] + 8);
  if (v29)
    v30 = v29 - 16;
  else
    v30 = 0;
  v55 = *(_QWORD *)(v30 + 2120);
  v56 = *(_BYTE *)(a1 + 8);
  WebKit::WebFrame::url(a2, (uint64_t)&v57);
  {
    v31 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v31);
  }
  MEMORY[0x19AEABCC8](&v48, v12);
  MEMORY[0x19AEABCC8](&v47, v13);
  v49[0] = &v48;
  v49[1] = &v47;
  v49[2] = &v50;
  ++*(_DWORD *)(a1 + 48);
  v32 = *a6;
  *a6 = 0;
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v34 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v34 = 1648;
  *(_QWORD *)(v34 + 8) = v33;
  *(_QWORD *)(v34 + 528) = v34 + 16;
  *(_QWORD *)(v34 + 536) = v34 + 16;
  *(_OWORD *)(v34 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v34 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v34);
  v59 = (IPC::Encoder *)v34;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul>((IPC::Encoder *)v34, (uint64_t)v49);
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v35 = &off_1E34F59F0;
  v35[1] = a1;
  v35[2] = v32;
  v36 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v58[0] = v35;
  v58[1] = v36;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v31 + 2) + 40))((_QWORD *)v31 + 2, &v59, v58, 0);
  v38 = v58[0];
  v58[0] = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = v59;
  v59 = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v37);
    WTF::fastFree(v40, v41);
  }
  v42 = v47;
  v47 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v37);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = v48;
  v48 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v37);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = v57;
  v57 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v37);
    else
      *(_DWORD *)v44 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v52, (WTF::StringImpl *)v37);
  if (v51)
  {
    v46 = v50;
    v50 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
  }
LABEL_47:

}

void sub_1976CE120(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,WTF::StringImpl *a43)
{
  void *v43;
  void *v44;
  uint64_t v45;
  WTF::StringImpl *v47;

  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v45, a2);
  if (a15 && a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, v47);
    else
      *(_DWORD *)a14 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIRuntime::connect(uint64_t a1@<X0>, WebKit::WebFrame *a2@<X1>, const OpaqueJSContext *a3@<X2>, void *a4@<X3>, void *a5@<X4>, _QWORD *a6@<X5>, uint64_t *a7@<X8>)
{
  id v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  WebKit::WebFrame *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WebKit::WebProcess *v40;
  OpaqueJSContext *GlobalContext;
  OpaqueJSContext *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  IPC::Encoder *v49;
  WTF *v50;
  void *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  _QWORD v59[4];
  WTF::StringImpl *v60;
  char v61;
  _BYTE v62[184];
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  char v70;
  _QWORD v71[2];
  IPC::Encoder *v72;

  v13 = a4;
  LOBYTE(v69) = 0;
  v70 = 0;
  if (!WebKit::WebExtensionAPIRuntime::parseConnectOptions(a5, (uint64_t)&v69, a6))
  {
    *a7 = 0;
    goto LABEL_63;
  }
  if (v70)
  {
    v15 = v69;
    if (!v69)
      goto LABEL_5;
    goto LABEL_4;
  }
  v15 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
LABEL_4:
    *(_DWORD *)v15 += 2;
LABEL_5:
  v68 = v15;
  v16 = *(WTF::StringImpl **)(*(_QWORD *)(a1 + 24) + 80);
  if (v16)
    *(_DWORD *)v16 += 2;
  v60 = v16;
  v61 = 1;
  v62[0] = 0;
  v62[176] = 0;
  v17 = *((_QWORD *)a2 + 3);
  if (!v17)
    goto LABEL_19;
  v18 = *(_QWORD *)(v17 + 8);
  if (v18)
  {
    v19 = (unsigned int *)(v18 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v21 = *(_QWORD *)(*(_QWORD *)(v18 + 128) + 8);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v19);
    if (v21 == v18)
      goto LABEL_23;
    v17 = *((_QWORD *)a2 + 3);
    if (!v17)
      goto LABEL_19;
  }
  v22 = *(_QWORD *)(v17 + 8);
  if (!v22
    || (v23 = *(_QWORD *)(v22 + 24)) == 0
    || (v24 = *(_QWORD *)(v23 + 8)) == 0
    || (v25 = *(_QWORD **)(*(_QWORD *)(v24 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v25 + 1368))(v25) & 1) != 0)
    || (v26 = *(_QWORD *)(v25[2] + 8)) == 0
    || (CFRetain(*(CFTypeRef *)(v26 - 8)),
        v27 = *(WebKit::WebFrame **)(v26 + 72),
        CFRelease(*(CFTypeRef *)(v26 - 8)),
        v27 != a2))
  {
LABEL_19:
    v28 = *((_QWORD *)a2 + 10);
    if ((unint64_t)(v28 - 1) >= 0xFFFFFFFFFFFFFFFELL)
      v28 = -3;
    goto LABEL_24;
  }
LABEL_23:
  v28 = -2;
LABEL_24:
  v63 = v28;
  v64 = 1;
  v29 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(_QWORD *))(*v29 + 1368))(v29);
  v30 = *(_QWORD *)(v29[2] + 8);
  if (v30)
    v31 = v30 - 16;
  else
    v31 = 0;
  v65 = *(_QWORD *)(v31 + 2120);
  v66 = *(_BYTE *)(a1 + 8);
  WebKit::WebFrame::url(a2, (uint64_t)&v67);
  v32 = *((_QWORD *)a2 + 3);
  if (v32
    && (v33 = *(_QWORD *)(v32 + 8)) != 0
    && (v34 = *(_QWORD *)(v33 + 24)) != 0
    && (v35 = *(_QWORD *)(v34 + 8)) != 0
    && (v36 = *(_QWORD **)(*(_QWORD *)(v35 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v36 + 1368))(v36) & 1) == 0))
  {
    v37 = *(_QWORD *)(v36[2] + 8);
    if (v37)
      v38 = v37 - 16;
    else
      v38 = 0;
  }
  else
  {
    v38 = 0;
  }
  v39 = WTF::fastMalloc((WTF *)0x198);
  WebKit::WebExtensionAPIPort::WebExtensionAPIPort(v39, a1, v38, 0, (_DWORD **)&v68);
  {
    v40 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v40 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v40);
  }
  MEMORY[0x19AEABCC8](&v58, v13);
  v57 = *(_QWORD *)(v39 + 80);
  v59[0] = &v58;
  v59[1] = &v57;
  v59[2] = &v68;
  v59[3] = &v60;
  ++*(_DWORD *)(a1 + 48);
  GlobalContext = JSContextGetGlobalContext(a3);
  v42 = GlobalContext;
  if (GlobalContext)
    JSGlobalContextRetain(GlobalContext);
  ++*(_DWORD *)(v39 + 48);
  v43 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v44 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v44 = 1643;
  *(_QWORD *)(v44 + 8) = v43;
  *(_QWORD *)(v44 + 528) = v44 + 16;
  *(_QWORD *)(v44 + 536) = v44 + 16;
  *(_OWORD *)(v44 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v44 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v44);
  v72 = (IPC::Encoder *)v44;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v44, (uint64_t)v59);
  v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v45 = &off_1E34F5A80;
  v45[1] = a1;
  v45[2] = a1;
  v45[3] = v42;
  v45[4] = v39;
  v46 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v71[0] = v45;
  v71[1] = v46;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v40 + 2) + 40))((_QWORD *)v40 + 2, &v72, v71, 0);
  v48 = v71[0];
  v71[0] = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = v72;
  v72 = 0;
  if (v49)
  {
    IPC::Encoder::~Encoder(v49, v47);
    WTF::fastFree(v50, v51);
  }
  v52 = v58;
  v58 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v47);
    else
      *(_DWORD *)v52 -= 2;
  }
  *a7 = v39;
  v53 = v67;
  v67 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v47);
    else
      *(_DWORD *)v53 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62, (WTF::StringImpl *)v47);
  if (v61)
  {
    v54 = v60;
    v60 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v14);
      else
        *(_DWORD *)v54 -= 2;
    }
  }
  v55 = v68;
  v68 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v14);
    else
      *(_DWORD *)v55 -= 2;
  }
LABEL_63:
  if (v70)
  {
    v56 = v69;
    v69 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v14);
      else
        *(_DWORD *)v56 -= 2;
    }
  }

}

void sub_1976CE784(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,WTF::StringImpl *a44)
{
  void *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;

  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v45, a2);
  if (a16 && a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, v48);
    else
      *(_DWORD *)a15 -= 2;
  }
  v49 = *(WTF::StringImpl **)(v46 - 128);
  *(_QWORD *)(v46 - 128) = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v48);
    else
      *(_DWORD *)v49 -= 2;
  }
  if (*(_BYTE *)(v46 - 112))
  {
    v50 = *(WTF::StringImpl **)(v46 - 120);
    *(_QWORD *)(v46 - 120) = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v48);
      else
        *(_DWORD *)v50 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIRuntime::sendNativeMessage(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5)
{
  id v8;
  id v9;
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _QWORD v25[2];
  IPC::Encoder *v26;

  v8 = a3;
  v9 = a4;
  {
    v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v10);
  }
  MEMORY[0x19AEABCC8](&v24, v8);
  MEMORY[0x19AEABCC8](&v23, v9);
  ++*(_DWORD *)(a1 + 48);
  v11 = *a5;
  *a5 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v13 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v13 = 1649;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 528) = v13 + 16;
  *(_QWORD *)(v13 + 536) = v13 + 16;
  *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v13 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
  v26 = (IPC::Encoder *)v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, (uint64_t *)&v24);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, (uint64_t *)&v23);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = &off_1E34F5AA8;
  v14[1] = a1;
  v14[2] = v11;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v25[0] = v14;
  v25[1] = v15;
  (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v10 + 2) + 40))((_QWORD *)v10 + 2, &v26, v25, 0);
  v17 = v25[0];
  v25[0] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v26;
  v26 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v16);
    WTF::fastFree(v19, v20);
  }
  v21 = v23;
  v23 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v24;
  v24 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v22 -= 2;
  }

}

void sub_1976CEBB8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  void *v14;
  void *v15;
  WTF *v17;
  void *v18;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v17, v18);
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebExtensionAPIRuntime *this@<X0>, WebKit::WebFrame *a2@<X1>, const OpaqueJSContext *a3@<X2>, NSString *a4@<X3>, uint64_t *a5@<X8>)
{
  NSString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WebKit::WebProcess *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  OpaqueJSContext *GlobalContext;
  OpaqueJSContext *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  void *v31;
  WTF::StringImpl *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39[2];
  IPC::Encoder *v40;

  v9 = a4;
  v10 = *((_QWORD *)a2 + 3);
  if (v10
    && (v11 = *(_QWORD *)(v10 + 8)) != 0
    && (v12 = *(_QWORD *)(v11 + 24)) != 0
    && (v13 = *(_QWORD *)(v12 + 8)) != 0
    && (v14 = *(_QWORD **)(*(_QWORD *)(v13 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v14 + 1368))(v14) & 1) == 0))
  {
    v15 = *(_QWORD *)(v14[2] + 8);
    if (v15)
      v16 = v15 - 16;
    else
      v16 = 0;
  }
  else
  {
    v16 = 0;
  }
  v17 = WTF::fastMalloc((WTF *)0x198);
  MEMORY[0x19AEABCC8](v39, v9);
  WebKit::WebExtensionAPIPort::WebExtensionAPIPort(v17, (uint64_t)this, v16, 2, (_DWORD **)v39);
  v19 = v39[0];
  v39[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  {
    v20 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v20);
  }
  MEMORY[0x19AEABCC8](&v38, v9);
  v21 = *(_QWORD *)(v17 + 80);
  v22 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(_QWORD *))(*v22 + 1368))(v22);
  v23 = *(_QWORD *)(v22[2] + 8);
  if (v23)
    v24 = v23 - 16;
  else
    v24 = 0;
  v37 = *(_QWORD *)(v24 + 2120);
  ++*((_DWORD *)this + 12);
  GlobalContext = JSContextGetGlobalContext(a3);
  v26 = GlobalContext;
  if (GlobalContext)
    JSGlobalContextRetain(GlobalContext);
  ++*(_DWORD *)(v17 + 48);
  v27 = *(_QWORD *)(*((_QWORD *)this + 3) + 24);
  v28 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v28 = 1644;
  *(_QWORD *)(v28 + 8) = v27;
  *(_QWORD *)(v28 + 528) = v28 + 16;
  *(_QWORD *)(v28 + 536) = v28 + 16;
  *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v28 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
  v40 = (IPC::Encoder *)v28;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v28, (uint64_t *)&v38);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v28, 8uLL, 8) = v21;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v28, &v37);
  v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v29 = &off_1E34F5AD0;
  *((_QWORD *)v29 + 1) = this;
  *((_QWORD *)v29 + 2) = this;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v17;
  v30 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v39[0] = v29;
  v39[1] = v30;
  (*(void (**)(_QWORD *, IPC::Encoder **, WTF::StringImpl **, _QWORD))(*((_QWORD *)v20 + 2) + 40))((_QWORD *)v20 + 2, &v40, v39, 0);
  v32 = v39[0];
  v39[0] = 0;
  if (v32)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v32 + 8))(v32);
  v33 = v40;
  v40 = 0;
  if (v33)
  {
    IPC::Encoder::~Encoder(v33, v31);
    WTF::fastFree(v34, v35);
  }
  v36 = v38;
  v38 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v31);
    else
      *(_DWORD *)v36 -= 2;
  }
  *a5 = v17;

}

void sub_1976CEFA4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, IPC::Encoder *a14)
{
  void *v14;
  uint64_t v15;
  WTF *v17;
  void *v18;

  if (a12)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a12 + 8))(a12);
  if (a14)
  {
    IPC::Encoder::~Encoder(a14, a2);
    WTF::fastFree(v17, v18);
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (*(_DWORD *)(v15 + 48) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(v15 + 40) + 8))(v15 + 40);
  else
    --*(_DWORD *)(v15 + 48);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebPageRuntime::sendMessage(uint64_t a1, WebKit::WebFrame *a2, void *a3, void *a4, uint64_t a5, uint64_t *a6, _QWORD *a7)
{
  id v12;
  id v13;
  NSString *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  WebKit::WebFrame *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  WebKit::WebExtensionControllerProxy *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WebKit::WebProcess *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  IPC::Encoder *v49;
  WTF *v50;
  void *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62[3];
  uint64_t v63;
  WTF::StringImpl *v64;
  char v65;
  _BYTE v66[184];
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  WTF::StringImpl *v71;
  _QWORD v72[2];
  IPC::Encoder *v73;

  v12 = a3;
  v13 = a4;
  if ((unint64_t)objc_msgSend(v13, "length") >= 0x4000001)
  {
    WebKit::toErrorString(0, CFSTR("message"), CFSTR("it exceeded the maximum allowed length"), v14);
    *a7 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_63;
  }
  LOBYTE(v64) = 0;
  v65 = 0;
  v66[0] = 0;
  v66[176] = 0;
  v15 = *((_QWORD *)a2 + 3);
  if (!v15)
    goto LABEL_15;
  v16 = *(_QWORD *)(v15 + 8);
  if (v16)
  {
    v17 = (unsigned int *)(v16 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = *(_QWORD *)(*(_QWORD *)(v16 + 128) + 8);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v17);
    if (v19 == v16)
      goto LABEL_18;
    v15 = *((_QWORD *)a2 + 3);
    if (!v15)
      goto LABEL_15;
  }
  v20 = *(_QWORD *)(v15 + 8);
  if (!v20
    || (v21 = *(_QWORD *)(v20 + 24)) == 0
    || (v22 = *(_QWORD *)(v21 + 8)) == 0
    || (v23 = *(_QWORD **)(*(_QWORD *)(v22 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v23 + 1368))(v23) & 1) != 0)
    || (v24 = *(_QWORD *)(v23[2] + 8)) == 0
    || (CFRetain(*(CFTypeRef *)(v24 - 8)),
        v25 = *(WebKit::WebFrame **)(v24 + 72),
        CFRelease(*(CFTypeRef *)(v24 - 8)),
        v25 != a2))
  {
LABEL_15:
    v26 = *((_QWORD *)a2 + 10);
    if ((unint64_t)(v26 - 1) >= 0xFFFFFFFFFFFFFFFELL)
      v26 = -3;
    goto LABEL_19;
  }
LABEL_18:
  v26 = -2;
LABEL_19:
  v67 = v26;
  v68 = 1;
  v27 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(_QWORD *))(*v27 + 1368))(v27);
  v28 = *(_QWORD *)(v27[2] + 8);
  if (v28)
    v29 = v28 - 16;
  else
    v29 = 0;
  v69 = *(_QWORD *)(v29 + 2120);
  v70 = 3;
  WebKit::WebFrame::url(a2, (uint64_t)&v71);
  v30 = *((_QWORD *)a2 + 3);
  if (v30
    && (v31 = *(_QWORD *)(v30 + 8)) != 0
    && (v32 = *(_QWORD *)(v31 + 24)) != 0
    && (v33 = *(_QWORD *)(v32 + 8)) != 0
    && (v34 = *(_QWORD **)(*(_QWORD *)(v33 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v34 + 1368))(v34) & 1) == 0))
  {
    v35 = *(_QWORD *)(v34[2] + 8);
    if (v35)
      v36 = v35 - 16;
    else
      v36 = 0;
  }
  else
  {
    v36 = 0;
  }
  CFRetain(*(CFTypeRef *)(v36 + 8));
  v37 = *(WebKit::WebExtensionControllerProxy **)(v36 + 632);
  MEMORY[0x19AEABCC8](v62, v12);
  WebKit::WebExtensionControllerProxy::extensionContext(v37, v62, &v63);
  v39 = v62[0];
  v62[0] = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = v63;
  if (v63)
  {
    {
      v41 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v41 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v41);
    }
    MEMORY[0x19AEABCC8](&v61, v12);
    MEMORY[0x19AEABCC8](&v60, v13);
    v62[0] = (WTF::StringImpl *)&v61;
    v62[1] = (WTF::StringImpl *)&v60;
    v62[2] = (WTF::StringImpl *)&v64;
    ++*(_DWORD *)(a1 + 48);
    v42 = *a6;
    *a6 = 0;
    v43 = *(_QWORD *)(v40 + 24);
    v44 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v44 = 1651;
    *(_QWORD *)(v44 + 8) = v43;
    *(_QWORD *)(v44 + 528) = v44 + 16;
    *(_QWORD *)(v44 + 536) = v44 + 16;
    *(_OWORD *)(v44 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v44 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v44);
    v73 = (IPC::Encoder *)v44;
    IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul>((IPC::Encoder *)v44, (uint64_t)v62);
    v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v45 = &off_1E34F5B20;
    v45[1] = a1;
    v45[2] = v42;
    v46 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v72[0] = v45;
    v72[1] = v46;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v41 + 2) + 40))((_QWORD *)v41 + 2, &v73, v72, 0);
    v48 = v72[0];
    v72[0] = 0;
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    v49 = v73;
    v73 = 0;
    if (v49)
    {
      IPC::Encoder::~Encoder(v49, v47);
      WTF::fastFree(v50, v51);
    }
    v52 = v60;
    v60 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v47);
      else
        *(_DWORD *)v52 -= 2;
    }
    v55 = v61;
    v61 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v47);
      else
        *(_DWORD *)v55 -= 2;
    }
    if (v63)
      WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v63 + 16));
  }
  else
  {
    v53 = *a6;
    *a6 = 0;
    v54 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v54 = &off_1E34F5AF8;
    *((_QWORD *)v54 + 1) = v53;
    v62[0] = v54;
    WebKit::callAfterRandomDelay((uint64_t *)v62);
    if (v62[0])
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v62[0] + 8))(v62[0]);
  }
  CFRelease(*(CFTypeRef *)(v36 + 8));
  v57 = v71;
  v71 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v56);
    else
      *(_DWORD *)v57 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v66, v56);
  if (v65)
  {
    v59 = v64;
    v64 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v58);
      else
        *(_DWORD *)v59 -= 2;
    }
  }
LABEL_63:

}

void sub_1976CF630(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,WTF::StringImpl *a45)
{
  void *v45;
  void *v46;
  uint64_t v47;
  WTF::StringImpl *v49;

  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v47, a2);
  if (a17 && a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, v49);
    else
      *(_DWORD *)a16 -= 2;
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIWebPageRuntime::connect(uint64_t a1@<X0>, WebKit::WebFrame *a2@<X1>, const OpaqueJSContext *a3@<X2>, void *a4@<X3>, void *a5@<X4>, _QWORD *a6@<X5>, uint64_t *a7@<X8>)
{
  id v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  WebKit::WebFrame *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  WebKit::WebExtensionControllerProxy *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  void *v44;
  WTF::StringImpl *v45;
  WebKit::WebProcess *v46;
  OpaqueJSContext *GlobalContext;
  OpaqueJSContext *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  IPC::Encoder *v55;
  WTF *v56;
  void *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70[4];
  uint64_t v71;
  WTF::StringImpl *v72;
  char v73;
  _BYTE v74[184];
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  char v82;
  _QWORD v83[2];
  IPC::Encoder *v84;

  v13 = a4;
  LOBYTE(v81) = 0;
  v82 = 0;
  if (!WebKit::WebExtensionAPIRuntime::parseConnectOptions(a5, (uint64_t)&v81, a6))
  {
    *a7 = 0;
    goto LABEL_75;
  }
  if (v82)
  {
    v15 = v81;
    if (!v81)
      goto LABEL_5;
    goto LABEL_4;
  }
  v15 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
  if (*MEMORY[0x1E0CBF6F0])
LABEL_4:
    *(_DWORD *)v15 += 2;
LABEL_5:
  v80 = v15;
  LOBYTE(v72) = 0;
  v73 = 0;
  v74[0] = 0;
  v74[176] = 0;
  v16 = *((_QWORD *)a2 + 3);
  if (!v16)
    goto LABEL_17;
  v17 = *(_QWORD *)(v16 + 8);
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    v20 = *(_QWORD *)(*(_QWORD *)(v17 + 128) + 8);
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v18);
    if (v20 == v17)
      goto LABEL_21;
    v16 = *((_QWORD *)a2 + 3);
    if (!v16)
      goto LABEL_17;
  }
  v21 = *(_QWORD *)(v16 + 8);
  if (!v21
    || (v22 = *(_QWORD *)(v21 + 24)) == 0
    || (v23 = *(_QWORD *)(v22 + 8)) == 0
    || (v24 = *(_QWORD **)(*(_QWORD *)(v23 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v24 + 1368))(v24) & 1) != 0)
    || (v25 = *(_QWORD *)(v24[2] + 8)) == 0
    || (CFRetain(*(CFTypeRef *)(v25 - 8)),
        v26 = *(WebKit::WebFrame **)(v25 + 72),
        CFRelease(*(CFTypeRef *)(v25 - 8)),
        v26 != a2))
  {
LABEL_17:
    v27 = *((_QWORD *)a2 + 10);
    if ((unint64_t)(v27 - 1) >= 0xFFFFFFFFFFFFFFFELL)
      v27 = -3;
    goto LABEL_22;
  }
LABEL_21:
  v27 = -2;
LABEL_22:
  v75 = v27;
  v76 = 1;
  v28 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(_QWORD *))(*v28 + 1368))(v28);
  v29 = *(_QWORD *)(v28[2] + 8);
  if (v29)
    v30 = v29 - 16;
  else
    v30 = 0;
  v77 = *(_QWORD *)(v30 + 2120);
  v78 = 3;
  WebKit::WebFrame::url(a2, (uint64_t)&v79);
  v31 = *((_QWORD *)a2 + 3);
  if (v31
    && (v32 = *(_QWORD *)(v31 + 8)) != 0
    && (v33 = *(_QWORD *)(v32 + 24)) != 0
    && (v34 = *(_QWORD *)(v33 + 8)) != 0
    && (v35 = *(_QWORD **)(*(_QWORD *)(v34 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v35 + 1368))(v35) & 1) == 0))
  {
    v36 = *(_QWORD *)(v35[2] + 8);
    if (v36)
      v37 = v36 - 16;
    else
      v37 = 0;
  }
  else
  {
    v37 = 0;
  }
  CFRetain(*(CFTypeRef *)(v37 + 8));
  v38 = *(WebKit::WebExtensionControllerProxy **)(v37 + 632);
  MEMORY[0x19AEABCC8](v70, v13);
  WebKit::WebExtensionControllerProxy::extensionContext(v38, v70, &v71);
  v40 = v70[0];
  v70[0] = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = v71;
  if (v71)
  {
    v42 = *(_BYTE *)(a1 + 8);
    v43 = WTF::fastMalloc((WTF *)0x198);
    *(_BYTE *)(v43 + 8) = v42;
    ++*(_DWORD *)(a1 + 48);
    *(_QWORD *)(v43 + 16) = a1 + 40;
    ++*(_DWORD *)(v41 + 16);
    *(_QWORD *)(v43 + 24) = v41;
    *(_QWORD *)(v43 + 32) = 0;
    *(_QWORD *)(v43 + 40) = &unk_1E34F5A58;
    *(_DWORD *)(v43 + 48) = 1;
    *(_QWORD *)(v43 + 56) = 0;
    *(_QWORD *)v43 = off_1E34F5A28;
    *(_BYTE *)(v43 + 64) = 0;
    *(_QWORD *)(v43 + 72) = *(_QWORD *)(v37 + 2120);
    *(_QWORD *)(v43 + 80) = WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
    *(_BYTE *)(v43 + 88) = 0;
    v45 = v80;
    if (v80)
      *(_DWORD *)v80 += 2;
    *(_QWORD *)(v43 + 96) = v45;
    *(_QWORD *)(v43 + 104) = 0;
    *(_BYTE *)(v43 + 112) = 0;
    *(_BYTE *)(v43 + 384) = 0;
    *(_QWORD *)(v43 + 392) = 0;
    *(_QWORD *)(v43 + 400) = 0;
    WebKit::WebExtensionAPIPort::add((WebKit::WebExtensionAPIPort *)v43, v44);
    {
      v46 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v46 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v46);
    }
    MEMORY[0x19AEABCC8](&v69, v13);
    v68 = *(_QWORD *)(v43 + 80);
    v70[0] = (WTF::StringImpl *)&v69;
    v70[1] = (WTF::StringImpl *)&v68;
    v70[2] = (WTF::StringImpl *)&v80;
    v70[3] = (WTF::StringImpl *)&v72;
    ++*(_DWORD *)(a1 + 48);
    GlobalContext = JSContextGetGlobalContext(a3);
    v48 = GlobalContext;
    if (GlobalContext)
      JSGlobalContextRetain(GlobalContext);
    ++*(_DWORD *)(v43 + 48);
    v49 = *(_QWORD *)(v41 + 24);
    v50 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v50 = 1650;
    *(_QWORD *)(v50 + 8) = v49;
    *(_QWORD *)(v50 + 528) = v50 + 16;
    *(_QWORD *)(v50 + 536) = v50 + 16;
    *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v50 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
    v84 = (IPC::Encoder *)v50;
    IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v50, (uint64_t)v70);
    v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v51 = &off_1E34F5B70;
    v51[1] = a1;
    v51[2] = a1;
    v51[3] = v48;
    v51[4] = v43;
    v52 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v83[0] = v51;
    v83[1] = v52;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v46 + 2) + 40))((_QWORD *)v46 + 2, &v84, v83, 0);
    v54 = v83[0];
    v83[0] = 0;
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    v55 = v84;
    v84 = 0;
    if (v55)
    {
      IPC::Encoder::~Encoder(v55, v53);
      WTF::fastFree(v56, v57);
    }
    v58 = v69;
    v69 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v53);
      else
        *(_DWORD *)v58 -= 2;
    }
    v62 = v71;
    *a7 = v43;
    if (v62)
      WTF::RefCounted<WebKit::WebExtensionContextProxy>::deref((unsigned int **)(v62 + 16));
  }
  else
  {
    v59 = WTF::fastMalloc((WTF *)0x198);
    WebKit::WebExtensionAPIObject::WebExtensionAPIObject(v59, a1);
    *(_QWORD *)(v59 + 40) = &unk_1E34F5A58;
    *(_DWORD *)(v59 + 48) = 1;
    *(_QWORD *)(v59 + 56) = 0;
    *(_QWORD *)v59 = off_1E34F5A28;
    *(_BYTE *)(v59 + 64) = 0;
    *(_QWORD *)(v59 + 72) = 0;
    *(_QWORD *)(v59 + 80) = 0;
    *(_BYTE *)(v59 + 88) = 0;
    v60 = v80;
    if (v80)
      *(_DWORD *)v80 += 2;
    *(_QWORD *)(v59 + 96) = v60;
    *(_QWORD *)(v59 + 104) = 0;
    *(_BYTE *)(v59 + 112) = 0;
    *(_BYTE *)(v59 + 384) = 0;
    *(_QWORD *)(v59 + 392) = 0;
    *(_QWORD *)(v59 + 400) = 0;
    *(_DWORD *)(v59 + 48) = 2;
    v61 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v61 = &off_1E34F5B48;
    *((_QWORD *)v61 + 1) = v59;
    v70[0] = v61;
    WebKit::callAfterRandomDelay((uint64_t *)v70);
    if (v70[0])
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v70[0] + 8))(v70[0]);
    *a7 = v59;
  }
  CFRelease(*(CFTypeRef *)(v37 + 8));
  v64 = v79;
  v79 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v63);
    else
      *(_DWORD *)v64 -= 2;
  }
  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v74, v63);
  if (v73)
  {
    v65 = v72;
    v72 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v14);
      else
        *(_DWORD *)v65 -= 2;
    }
  }
  v66 = v80;
  v80 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v14);
    else
      *(_DWORD *)v66 -= 2;
  }
LABEL_75:
  if (v82)
  {
    v67 = v81;
    v81 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v14);
      else
        *(_DWORD *)v67 -= 2;
    }
  }

}

void sub_1976CFE7C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,WTF::StringImpl *a49)
{
  void *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;

  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v50, a2);
  if (a21 && a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, v53);
    else
      *(_DWORD *)a20 -= 2;
  }
  v54 = *(WTF::StringImpl **)(v51 - 136);
  *(_QWORD *)(v51 - 136) = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v53);
    else
      *(_DWORD *)v54 -= 2;
  }
  if (*(_BYTE *)(v51 - 120))
  {
    v55 = *(WTF::StringImpl **)(v51 - 128);
    *(_QWORD *)(v51 - 128) = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v53);
      else
        *(_DWORD *)v55 -= 2;
    }
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIRuntime::onMessage(WebKit::WebExtensionAPIRuntime *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 10);
  if (!result)
  {
    v6 = 28;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIRuntime &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 10);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 10);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 10);
  }
  return result;
}

WTF::StringImpl **WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIRuntime &,WebKit::WebExtensionEventListenerType>@<X0>(const WebKit::WebExtensionAPIObject *a1@<X0>, unsigned __int8 *a2@<X1>, WTF::StringImpl ***a3@<X8>)
{
  WTF::StringImpl **v6;
  WTF::StringImpl **result;

  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x58);
  result = WebKit::WebExtensionAPIEvent::WebExtensionAPIEvent(v6, a1, *a2);
  *a3 = v6;
  return result;
}

void sub_1976D0340(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIRuntime::onConnect(WebKit::WebExtensionAPIRuntime *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 8);
  if (!result)
  {
    v6 = 25;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIRuntime &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 8);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 8);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 8);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIRuntime::onInstalled(WebKit::WebExtensionAPIRuntime *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 9);
  if (!result)
  {
    v6 = 27;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIRuntime &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 9);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 9);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 9);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIRuntime::onStartup(WebKit::WebExtensionAPIRuntime *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 11);
  if (!result)
  {
    v6 = 30;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIRuntime &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 11);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 11);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 11);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIRuntime::onConnectExternal(WebKit::WebExtensionAPIRuntime *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 12);
  if (!result)
  {
    v6 = 26;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIRuntime &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 12);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 12);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 12);
  }
  return result;
}

uint64_t WebKit::WebExtensionAPIRuntime::onMessageExternal(WebKit::WebExtensionAPIRuntime *this)
{
  uint64_t result;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  int v5;
  unsigned __int8 v6;
  WTF::StringImpl **v7;

  result = *((_QWORD *)this + 13);
  if (!result)
  {
    v6 = 29;
    WebKit::WebExtensionAPIEvent::create<WebKit::WebExtensionAPIRuntime &,WebKit::WebExtensionEventListenerType>(this, &v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v3;
    if (v4)
    {
      v5 = *((_DWORD *)v4 + 12) - 1;
      if (*((_DWORD *)v4 + 12) == 1)
      {
        (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
        v4 = v7;
        v7 = 0;
        if (!v4)
          return *((_QWORD *)this + 13);
        v5 = *((_DWORD *)v4 + 12) - 1;
        if (*((_DWORD *)v4 + 12) == 1)
        {
          (*((void (**)(WTF::StringImpl **))v4[5] + 1))(v4 + 5);
          return *((_QWORD *)this + 13);
        }
      }
      *((_DWORD *)v4 + 12) = v5;
    }
    return *((_QWORD *)this + 13);
  }
  return result;
}

void sub_1976D0860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(WebCore *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _WKReplyCallbackAggregator *v15;
  _WKReplyCallbackAggregator *v16;
  _QWORD *v17;
  _WKReplyCallbackAggregator *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _QWORD *v24;
  char v25;
  char v26;
  id v27;
  WTF::StringImpl *v28;
  _QWORD v29[2];

  v29[0] = a4;
  v29[1] = a5;
  if (a2 == 1 && !*((_QWORD *)a1 + 18))
  {
    v28 = 0;
    v21 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v21 + 16))(v21, &v28);
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v23 = v28;
    v28 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  else
  {
    if (a3)
      v11 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v11 = &stru_1E351F1B8;
    WebKit::parseJSON(v11, 1, 0);
    v28 = (WTF::StringImpl *)objc_claimAutoreleasedReturnValue();

    WebKit::toWebAPI(a6);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    v26 = *(_BYTE *)(a6 + 224);
    v12 = *a7;
    *a7 = 0;
    v13 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v13 = 1;
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = &off_1E34F5B98;
    v14[1] = v12;
    *(_QWORD *)(v13 + 8) = v14;
    *(_QWORD *)(v13 + 16) = 0;
    *(_BYTE *)(v13 + 24) = 1;
    v25 = 0;
    v15 = -[_WKReplyCallbackAggregator initWithAggregator:]([_WKReplyCallbackAggregator alloc], "initWithAggregator:", v13);
    v16 = v15;
    if (v15)
      CFRetain(v15);

    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x40);
    *v17 = &off_1E34F5BC0;
    v18 = v16;

    v17[1] = v18;
    v17[2] = v29;
    v17[3] = a6;
    v17[4] = &v26;
    v17[5] = &v28;
    v17[6] = &v27;
    v17[7] = &v25;
    v24 = v17;
    v19 = WebKit::WebExtensionContextProxy::toDOMWrapperWorld(a1, a2);
    WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects((uint64_t)a1, (uint64_t)&v24, v19);
    v20 = v24;
    v24 = 0;
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    if (!v25)
      WTF::EagerCallbackAggregator<void ()(objc_object *,WebKit::IsDefaultReply)>::operator()(v13, 0);

    WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(objc_object *,WebKit::IsDefaultReply)>>::deref(v13);
  }
}

void sub_1976D0B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, v14);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(a1);
}

void WTF::EagerCallbackAggregator<void ()(objc_object *,WebKit::IsDefaultReply)>::operator()(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v5 = v3;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v3 = v5;
  }

}

void sub_1976D0C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionContextProxy::dispatchRuntimeMessageEvent(WebCore *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;

  if (a2 == 1)
  {
    v7 = *a3;
  }
  else
  {
    if (a2)
      return;
    v7 = *a3;
    a4 = 0;
    a5 = 0;
  }
  WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(a1, a2, v7, a4, a5, a6, a7);
}

uint64_t WebKit::WebExtensionContextProxy::internalDispatchRuntimeConnectEvent(WebCore *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  char v22;
  _QWORD v23[2];
  uint64_t v24;

  v23[1] = a6;
  v24 = a3;
  v23[0] = a5;
  v22 = a2;
  if (a2 == 1 && !*((_QWORD *)a1 + 18))
  {
    v21 = 0;
    v16 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 16))(v16, &v21);
  }
  else
  {
    v21 = 0;
    v20 = *(_BYTE *)(a7 + 224);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x48);
    *v13 = off_1E34F5C48;
    v13[1] = v23;
    v13[2] = a7;
    v13[3] = &v20;
    v13[4] = &v21;
    v13[5] = a1;
    v13[6] = &v22;
    v13[7] = &v24;
    v13[8] = a4;
    v19 = v13;
    v14 = WebKit::WebExtensionContextProxy::toDOMWrapperWorld(a1, a2);
    WebKit::WebExtensionContextProxy::enumerateFramesAndNamespaceObjects((uint64_t)a1, (uint64_t)&v19, v14);
    v15 = v19;
    v19 = 0;
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    v16 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 16))(v16, &v21);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v21)
    return WTF::fastFree((WTF *)(v21 - 16), v18);
  return result;
}

void sub_1976D0DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), v14);
  _Unwind_Resume(a1);
}

WebCore *WebKit::WebExtensionContextProxy::dispatchRuntimeConnectEvent(WebCore *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  if (a2 != 1)
  {
    if (a2)
      return result;
    a5 = 0;
    a6 = 0;
  }
  return (WebCore *)WebKit::WebExtensionContextProxy::internalDispatchRuntimeConnectEvent(result, a2, a3, a4, a5, a6, a7, a8);
}

void WebKit::WebExtensionContextProxy::dispatchRuntimeInstalledEvent(uint64_t a1, int a2, _QWORD *a3)
{
  __CFString *v4;
  void *v5;
  __CFString *v6;
  WebCore *v7;
  WebCore *v8;
  WebCore *v9;
  id v10;
  const __CFString *v11;
  __CFString *v12;
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v10 = 0;
  if (a2 == 2)
  {
    v14[0] = CFSTR("update");
    v13[0] = CFSTR("reason");
    v13[1] = CFSTR("previousVersion");
    if (*a3)
      v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v4 = &stru_1E351F1B8;
    v14[1] = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v11 = CFSTR("reason");
    v6 = CFSTR("install");
    if (a2 != 1)
      v6 = 0;
    if (a2 == 3)
      v6 = CFSTR("browser_update");
    v4 = v6;
    v12 = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v10 = v5;

  v7 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E34F5C70;
  *((_QWORD *)v7 + 1) = &v10;
  v9 = v7;
  WebCore::mainThreadNormalWorld(v7);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects(a1, (uint64_t)&v9);
  v8 = v9;
  v9 = 0;
  if (v8)
    (*(void (**)(WebCore *))(*(_QWORD *)v8 + 8))(v8);

}

void sub_1976D0FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionContextProxy::dispatchRuntimeStartupEvent(WebKit::WebExtensionContextProxy *this)
{
  WebCore *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (WebCore *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E34F5C98;
  v4 = (uint64_t)v2;
  WebCore::mainThreadNormalWorld(v2);
  WebKit::WebExtensionContextProxy::enumerateNamespaceObjects((uint64_t)this, (uint64_t)&v4);
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1976D1078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::RefCounted<WTF::EagerCallbackAggregator<void ()(objc_object *,WebKit::IsDefaultReply)>>::deref(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = result;
  if (*(_DWORD *)result == 1)
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(result + 16);
      v4 = *(unsigned __int8 *)(result + 24);
      *(_QWORD *)(result + 8) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3, v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }

    v6 = *(_QWORD *)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return WTF::fastFree((WTF *)v1, v5);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void sub_1976D1138(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);

  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

id WTF::Detail::CallableWrapper<WebKit::WebExtensionAPIRuntimeBase::reportError(NSString *,WebKit::WebExtensionCallbackHandler &)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeGetBackgroundPage,WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5980;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeGetBackgroundPage,WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5980;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeGetBackgroundPage,WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unsigned __int8 v25;
  _BYTE v26[8];
  _BYTE v27[16];
  int v28;
  char v29;
  _BYTE v30[8];
  __int128 v31;
  int v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 8;
  if (!a2 || (v4 = *a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeGetBackgroundPage,WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(a1 + 8);
    return;
  }
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v11 = 0;
    v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    v13 = a2[3];
    if (v13)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v4, v5);
        v11 = 0;
        v21 = *a2;
        v22 = a2[1];
        v23 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v12 = 0;
        if (v23 && v22)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v22);
          v12 = *a2;
          v11 = a2[1];
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_24;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v11 = v5;
    v12 = v4;
LABEL_24:
    *a2 = 0;
    a2[1] = 0;
    v14 = a2[3];
    if (v14 && v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
    goto LABEL_25;
  }
  if (!v7)
  {
    IPC::Decoder::decode<WTF::String>(a2, &v24);
    v9 = BYTE8(v24);
    if (BYTE8(v24))
    {
      *(_QWORD *)&v31 = v24;
      v9 = 1;
      v32 = 1;
    }
    else
    {
      v30[0] = 0;
    }
    v33 = v9;
    v10 = 1;
    if (!v9)
      goto LABEL_25;
LABEL_16:
    v27[0] = 0;
    v28 = -1;
    ((void (*)(__int128 *, _BYTE *, __int128 *))off_1E34F59A8[v10])(&v24, v27, &v31);
    v28 = v10;
    v29 = 1;
    if (!v33)
      goto LABEL_19;
    if (v32 == -1)
      goto LABEL_19;
    ((void (*)(__int128 *, __int128 *))off_1E34F5998[v32])(&v24, &v31);
    if (v29)
      goto LABEL_19;
    goto LABEL_27;
  }
  IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a2, &v24);
  v8 = v25;
  if (v25)
  {
    v31 = v24;
    v32 = 0;
    v8 = 1;
  }
  else
  {
    v30[0] = 0;
  }
  v10 = 0;
  v33 = v8;
  if (v8)
    goto LABEL_16;
LABEL_25:
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v17 = a2[3];
  if (v17 && v16)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
  v26[0] = 0;
  v29 = 0;
LABEL_27:
  v18 = *a2;
  v19 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v20 = a2[3];
  if (!v20 || !v19 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18), !v29))
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeGetBackgroundPage,WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(v2);
    return;
  }
LABEL_19:
  WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(v2, (uint64_t)v26);
  if (v29)
  {
    if (v28 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E34F5998[v28])(v30, v27);
  }
}

void sub_1976D1564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,int a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,int a30,char a31)
{
  if (a22)
  {
    if (a20 != -1)
      ((void (*)(__int16 *, uint64_t *))off_1E34F5998[a20])(&a24, &a18);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeGetBackgroundPage,WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(uint64_t a1)
{
  char v1;
  _BYTE v2[8];
  _BYTE v3[16];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v3[8] = 0;
  v4 = 0;
  WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, (uint64_t)v2);
  if (v4 != -1)
    ((void (*)(char *, _BYTE *))off_1E34F5998[v4])(&v1, v3);
}

void sub_1976D1694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  uint64_t v16;

  if (a16 != -1)
    ((void (*)(char *, uint64_t))off_1E34F5998[a16])(&a12, v16);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore18PageIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void WebKit::WebExtensionAPIRuntime::getBackgroundPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  int v4;
  WebKit::WebExtensionCallbackHandler *v5;
  __CFString *v6;
  WebKit::WebProcess *v7;
  uint64_t v8;
  uint64_t v9;
  WebKit **v10;
  WebKit::WebFrame *v11;
  objc_object *v12;
  objc_object *v13;
  id v14;
  WebKit::WebExtensionCallbackHandler *v15;
  id v16;
  WebKit::WebExtensionCallbackHandler *v17;
  id v18;
  WebKit::WebProcess *v19;
  _Unwind_Exception *v20;
  id v21;
  objc_object *v22;
  uint64_t v23;

  v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == 1)
    {
      v5 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
      if (*(_QWORD *)(a2 + 8))
        v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v6 = &stru_1E351F1B8;
      v22 = (objc_object *)v6;
      WebKit::WebExtensionCallbackHandler::reportError(v5, &v6->isa);
      goto LABEL_6;
    }
    goto LABEL_21;
  }
  if (!*(_BYTE *)(a2 + 16))
  {
    v15 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v22 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v16 = WebKit::WebExtensionCallbackHandler::call(v15, v22);
LABEL_6:

    return;
  }
  {
    v7 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v7 = WebKit::WebProcess::WebProcess(v19);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v7;
    if (*(_DWORD *)(a2 + 24))
    {
LABEL_21:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_22:
      v20 = (_Unwind_Exception *)std::__throw_bad_optional_access[abi:sn180100]();

      _Unwind_Resume(v20);
    }
  }
  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_22;
  v23 = *(_QWORD *)(a2 + 8);
  v8 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)v7 + 14, &v23);
  if (!v8)
  {
    v17 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 8);
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v22 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v18 = WebKit::WebExtensionCallbackHandler::call(v17, v22);
    goto LABEL_6;
  }
  v9 = v8;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v10 = *(WebKit ***)(a1 + 8);
  WebKit::toWindowObject(v10[3], *(const OpaqueJSContext **)(v9 + 88), v11);
  v12 = (objc_object *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (!v12)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v13 = (objc_object *)objc_claimAutoreleasedReturnValue();
  }
  v14 = WebKit::WebExtensionCallbackHandler::call((WebKit::WebExtensionCallbackHandler *)v10, v13);
  if (!v12)

  CFRelease(*(CFTypeRef *)(v9 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeOpenOptionsPage,WebKit::WebExtensionAPIRuntime::openOptionsPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::openOptionsPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F59C8;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeOpenOptionsPage,WebKit::WebExtensionAPIRuntime::openOptionsPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::openOptionsPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F59C8;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeOpenOptionsPage,WebKit::WebExtensionAPIRuntime::openOptionsPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::openOptionsPage(WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  __CFString *v4;
  WTF::StringImpl *v5;
  id v6;
  id v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v9), v11))
  {
    v3 = *(WebKit::WebExtensionCallbackHandler **)(a1 + 16);
    if (v10)
    {
      if (v9)
        v4 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
      else
        v4 = &stru_1E351F1B8;
      WebKit::WebExtensionCallbackHandler::reportError(v3, &v4->isa);

    }
    else
    {
      v7 = WebKit::WebExtensionCallbackHandler::call((JSObjectRef *)v3);
    }
    if (v11)
    {
      if (v10)
      {
        v8 = v9;
        v9 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v5);
          else
            *(_DWORD *)v8 -= 2;
        }
      }
    }
  }
  else
  {
    v6 = WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976D1AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  WTF::StringImpl *v17;

  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v17);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 8));
  IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::encode(a1, *(_QWORD *)(a2 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeSendMessage,WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F59F0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeSendMessage,WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F59F0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeSendMessage,WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  char v6;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v3);
    if (v5)
    {
      WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v3, v4);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F5A08[v4])(&v6, &v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeSendMessage,WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeSendMessage,WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976D1CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  uint64_t v12;

  if (a12)
  {
    if (a10 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34F5A08[a10])(v12 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeSendMessage,WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = 0;
  v2 = 0;
  WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1E34F5A08[v2])(&v3, &v1);
}

void sub_1976D1D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F5A08[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  void *v3;
  __CFString *v5;
  __CFString *v6;
  objc_object *v7;
  id v8;
  _Unwind_Exception *v9;
  id v10;
  __CFString *v11;

  if (a3)
  {
    if (a3 != 1)
    {
      v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v9);
    }
    if (a2)
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    v11 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v5->isa);
  }
  else
  {
    if (a2)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    v11 = v6;
    WebKit::parseJSON(v6, 1, 0);
    v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v8 = WebKit::WebExtensionCallbackHandler::call(a1, v7);

  }
}

uint64_t WebKit::WebExtensionAPIPort::WebExtensionAPIPort(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _DWORD **a5)
{
  uint64_t v9;
  void *v10;
  _DWORD *v11;

  v9 = WebKit::WebExtensionAPIObject::WebExtensionAPIObject(a1, a2);
  *(_DWORD *)(v9 + 48) = 1;
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)v9 = off_1E34F5A28;
  *(_QWORD *)(v9 + 40) = &unk_1E34F5A58;
  *(_BYTE *)(v9 + 64) = a4;
  *(_QWORD *)(v9 + 72) = *(_QWORD *)(a3 + 2120);
  *(_QWORD *)(a1 + 80) = WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_BYTE *)(a1 + 88) = 0;
  v11 = *a5;
  if (*a5)
    *v11 += 2;
  *(_QWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  WebKit::WebExtensionAPIPort::add((WebKit::WebExtensionAPIPort *)a1, v10);
  return a1;
}

void sub_1976D1F00(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebKit::WebExtensionAPIObject *v2;
  unsigned int **v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = *((_QWORD *)v2 + 50);
  *((_QWORD *)v2 + 50) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v7 + 40) + 8))(v7 + 40);
    else
      --*(_DWORD *)(v7 + 48);
  }
  v8 = *v5;
  *v5 = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 40) + 8))(v8 + 40);
    else
      --*(_DWORD *)(v8 + 48);
  }
  std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100](v4, a2);
  v10 = (const void *)*((_QWORD *)v2 + 13);
  *((_QWORD *)v2 + 13) = 0;
  if (v10)
    CFRelease(v10);
  v11 = (WTF::StringImpl *)*((_QWORD *)v2 + 12);
  *((_QWORD *)v2 + 12) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, v9);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(v2, v12);
  _Unwind_Resume(a1);
}

uint64_t WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate()
{
  uint64_t result;

  if (!WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    return WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  result = 142;
  __break(0xC471u);
  return result;
}

void WebKit::WebExtensionAPIPort::~WebExtensionAPIPort(WebKit::WebExtensionAPIPort *this)
{
  WTF *v1;
  void *v2;

  WebKit::WebExtensionAPIPort::~WebExtensionAPIPort(this);
  WTF::fastFree(v1, v2);
}

{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  *(_QWORD *)this = off_1E34F5A28;
  *((_QWORD *)this + 5) = &unk_1E34F5A58;
  *((_BYTE *)this + 88) = 1;
  WebKit::WebExtensionAPIPort::remove(this);
  v3 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 112, v2);
  v6 = (const void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
    CFRelease(v6);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 7, v5);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject(this, v8);
}

void `non-virtual thunk to'WebKit::WebExtensionAPIPort::~WebExtensionAPIPort(WebKit::WebExtensionAPIPort *this)
{
  WebKit::WebExtensionAPIPort::~WebExtensionAPIPort((WebKit::WebExtensionAPIPort *)((char *)this - 40));
}

{
  WTF *v1;
  void *v2;

  WebKit::WebExtensionAPIPort::~WebExtensionAPIPort((WebKit::WebExtensionAPIPort *)((char *)this - 40));
  WTF::fastFree(v1, v2);
}

uint64_t std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 272))
  {
    v3 = *(WTF::StringImpl **)(a1 + 232);
    *(_QWORD *)(a1 + 232) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1, v4);
  }
  return a1;
}

void sub_1976D2160(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  const void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v4 = *(_QWORD *)(v2 + 400);
  *(_QWORD *)(v2 + 400) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  v5 = *(_QWORD *)(v2 + 392);
  *(_QWORD *)(v2 + 392) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  std::__optional_destruct_base<WebKit::WebExtensionMessageSenderParameters,false>::~__optional_destruct_base[abi:sn180100](v2 + 112, a2);
  v7 = *(const void **)(v2 + 104);
  *(_QWORD *)(v2 + 104) = 0;
  if (v7)
    CFRelease(v7);
  v8 = *(WTF::StringImpl **)(v2 + 96);
  *(_QWORD *)(v2 + 96) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 56), v6);
  WebKit::WebExtensionAPIObject::~WebExtensionAPIObject((WebKit::WebExtensionAPIObject *)v2, v9);
  _Unwind_Resume(a1);
}

void IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::String const&,WebKit::WebExtensionMessageSenderParameters const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)a2);
  v4 = **(_QWORD **)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 16));
  IPC::ArgumentCoder<WebKit::WebExtensionMessageSenderParameters,void>::encode(a1, *(_QWORD *)(a2 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeConnect,WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  OpaqueJSContext *v3;
  uint64_t v4;

  *a1 = &off_1E34F5A80;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 40) + 8))(v2 + 40);
    else
      --*(_DWORD *)(v2 + 48);
  }
  v3 = (OpaqueJSContext *)a1[3];
  if (v3)
    JSGlobalContextRelease(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeConnect,WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  OpaqueJSContext *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F5A80;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = (OpaqueJSContext *)*((_QWORD *)this + 3);
  if (v4)
    JSGlobalContextRelease(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeConnect,WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned int *v2;
  unsigned int *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;
  char v7;

  v2 = (unsigned int *)(a1 + 8);
  if (!a2 || !*a2)
    return WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0::operator()((unsigned int *)(a1 + 8), 0, 0);
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v5);
  if (!v7)
    return WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0::operator()(v2, 0, 0);
  result = WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0::operator()(v2, (uint64_t)v5, v6);
  if (v7)
  {
    if (v6)
    {
      result = (unsigned int *)v5;
      v5 = 0;
      if (result)
      {
        if (*result == 2)
          return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
        else
          *result -= 2;
      }
    }
  }
  return result;
}

void sub_1976D2448(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebExtensionAPIRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0::operator()(unsigned int *result, uint64_t a2, char a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  __CFString *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  if (a3)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v5 = *((_QWORD *)result + 3);
    if (a2)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    v7 = *((_QWORD *)v3 + 2);
    v9 = 0;
    WebKit::WebExtensionAPIRuntimeBase::reportError(v4 + 40, v6, v7, &v9);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<JSValue>::operator=((const void **)(v5 + 104), v8);

    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

    return WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded(*((unsigned int **)v3 + 3));
  }
  return result;
}

void sub_1976D2548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeSendNativeMessage,WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5AA8;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeSendNativeMessage,WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5AA8;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeSendNativeMessage,WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  char v6;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v3);
    if (v5)
    {
      WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), v3, v4);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F5A08[v4])(&v6, &v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeSendNativeMessage,WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeSendNativeMessage,WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976D26E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  uint64_t v12;

  if (a12)
  {
    if (a10 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34F5A08[a10])(v12 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeSendNativeMessage,WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = 0;
  v2 = 0;
  WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1E34F5A08[v2])(&v3, &v1);
}

void sub_1976D2778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F5A08[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIRuntime::sendNativeMessage(WebKit::WebFrame &,NSString *,NSString *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&)::$_0::operator()(WebKit::WebExtensionCallbackHandler *a1, uint64_t a2, int a3)
{
  void *v3;
  __CFString *v5;
  __CFString *v6;
  objc_object *v7;
  id v8;
  _Unwind_Exception *v9;
  id v10;
  __CFString *v11;

  if (a3)
  {
    if (a3 != 1)
    {
      v9 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();

      _Unwind_Resume(v9);
    }
    if (a2)
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    v11 = v5;
    WebKit::WebExtensionCallbackHandler::reportError(a1, &v5->isa);
  }
  else
  {
    if (a2)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    v11 = v6;
    WebKit::parseJSON(v6, 1, 0);
    v7 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v8 = WebKit::WebExtensionCallbackHandler::call(a1, v7);

  }
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeConnectNative,WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0>(WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  OpaqueJSContext *v3;
  uint64_t v4;

  *a1 = &off_1E34F5AD0;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 40) + 8))(v2 + 40);
    else
      --*(_DWORD *)(v2 + 48);
  }
  v3 = (OpaqueJSContext *)a1[3];
  if (v3)
    JSGlobalContextRelease(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeConnectNative,WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0>(WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  OpaqueJSContext *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F5AD0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = (OpaqueJSContext *)*((_QWORD *)this + 3);
  if (v4)
    JSGlobalContextRelease(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeConnectNative,WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0>(WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned int *v2;
  unsigned int *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;
  char v7;

  v2 = (unsigned int *)(a1 + 8);
  if (!a2 || !*a2)
    return WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0::operator()((unsigned int *)(a1 + 8), 0, 0);
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v5);
  if (!v7)
    return WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0::operator()(v2, 0, 0);
  result = WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0::operator()(v2, (uint64_t)v5, v6);
  if (v7)
  {
    if (v6)
    {
      result = (unsigned int *)v5;
      v5 = 0;
      if (result)
      {
        if (*result == 2)
          return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
        else
          *result -= 2;
      }
    }
  }
  return result;
}

void sub_1976D2A60(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebExtensionAPIRuntime::connectNative(WebKit::WebFrame &,OpaqueJSContext const*,NSString *)::$_0::operator()(unsigned int *result, uint64_t a2, char a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  __CFString *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  if (a3)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v5 = *((_QWORD *)result + 3);
    if (a2)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    v7 = *((_QWORD *)v3 + 2);
    v9 = 0;
    WebKit::WebExtensionAPIRuntimeBase::reportError(v4 + 40, v6, v7, &v9);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<JSValue>::operator=((const void **)(v5 + 104), v8);

    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

    return WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded(*((unsigned int **)v3 + 3));
  }
  return result;
}

void sub_1976D2B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;

  v2 = (WebKit::WebExtensionCallbackHandler *)a1[1];
  *a1 = &off_1E34F5AF8;
  a1[1] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;

  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F5AF8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  return WTF::fastFree(this, a2);
}

id WTF::Detail::CallableWrapper<WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebExtensionCallbackHandler::call(*(JSObjectRef **)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeWebPageSendMessage,WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5B20;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeWebPageSendMessage,WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5B20;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeWebPageSendMessage,WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  char v6;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::String,WTF::String>>>(a2, &v3);
    if (v5)
    {
      WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1::operator()(*(JSObjectRef **)(a1 + 16), v3, v4);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, uint64_t *))off_1E34F5A08[v4])(&v6, &v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeWebPageSendMessage,WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(*(JSObjectRef **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeWebPageSendMessage,WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(*(JSObjectRef **)(a1 + 16));
  }
}

void sub_1976D2D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  uint64_t v12;

  if (a12)
  {
    if (a10 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34F5A08[a10])(v12 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::RuntimeWebPageSendMessage,WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1>(JSObjectRef *a1)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = 0;
  v2 = 0;
  WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1::operator()(a1, 0, 0);
  ((void (*)(char *, uint64_t *))off_1E34F5A08[v2])(&v3, &v1);
}

void sub_1976D2E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_1E34F5A08[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void WebKit::WebExtensionAPIWebPageRuntime::sendMessage(WebKit::WebFrame &,NSString *,NSString *,NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_1::operator()(JSObjectRef *this, uint64_t a2, int a3)
{
  id v4;
  __CFString *v5;
  objc_object *v6;
  id v7;
  __CFString *v8;

  if (a3)
  {
    v4 = WebKit::WebExtensionCallbackHandler::call(this);
  }
  else
  {
    if (a2)
      v5 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    v8 = v5;
    WebKit::parseJSON(v5, 1, 0);
    v6 = (objc_object *)objc_claimAutoreleasedReturnValue();
    v7 = WebKit::WebExtensionCallbackHandler::call((WebKit::WebExtensionCallbackHandler *)this, v6);

  }
}

void sub_1976D2EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F5B48;
  a1[1] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 40) + 8))(v2 + 40);
    else
      --*(_DWORD *)(v2 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F5B48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded(*(unsigned int **)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeWebPageConnect,WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  OpaqueJSContext *v3;
  uint64_t v4;

  *a1 = &off_1E34F5B70;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 40) + 8))(v2 + 40);
    else
      --*(_DWORD *)(v2 + 48);
  }
  v3 = (OpaqueJSContext *)a1[3];
  if (v3)
    JSGlobalContextRelease(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeWebPageConnect,WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  OpaqueJSContext *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34F5B70;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  v4 = (OpaqueJSContext *)*((_QWORD *)this + 3);
  if (v4)
    JSGlobalContextRelease(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 40) + 8))(v5 + 40);
    else
      --*(_DWORD *)(v5 + 48);
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::RuntimeWebPageConnect,WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1>(WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned int *v2;
  unsigned int *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;
  char v7;

  v2 = (unsigned int *)(a1 + 8);
  if (!a2 || !*a2)
    return WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1::operator()((unsigned int *)(a1 + 8), 0, 0);
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<void,WTF::String>>>(a2, &v5);
  if (!v7)
    return WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1::operator()(v2, 0, 0);
  result = WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1::operator()(v2, (uint64_t)v5, v6);
  if (v7)
  {
    if (v6)
    {
      result = (unsigned int *)v5;
      v5 = 0;
      if (result)
      {
        if (*result == 2)
          return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
        else
          *result -= 2;
      }
    }
  }
  return result;
}

void sub_1976D3194(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if ((_BYTE)a13 && a11 && a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebExtensionAPIWebPageRuntime::connect(WebKit::WebFrame &,OpaqueJSContext const*,NSString *,NSDictionary *,NSString * {__autoreleasing}*)::$_1::operator()(unsigned int *result, uint64_t a2, char a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  __CFString *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  if (a3)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v5 = *((_QWORD *)result + 3);
    if (a2)
      v6 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    v7 = *((_QWORD *)v3 + 2);
    v9 = 0;
    WebKit::WebExtensionAPIRuntimeBase::reportError(v4 + 40, v6, v7, &v9);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::RetainPtr<JSValue>::operator=((const void **)(v5 + 104), v8);

    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

    return WebKit::WebExtensionAPIPort::fireDisconnectEventIfNeeded(*((unsigned int **)v3 + 3));
  }
  return result;
}

void sub_1976D3294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(WebKit::WebExtensionContentWorldType,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0,void,objc_object * {__strong},WebKit::IsDefaultReply>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34F5B98;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(WebKit::WebExtensionContentWorldType,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0,void,objc_object * {__strong},WebKit::IsDefaultReply>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F5B98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(WebKit::WebExtensionContentWorldType,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_0,void,objc_object * {__strong},WebKit::IsDefaultReply>::call(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __CFString *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v5 = a2;
  v6 = v5;
  if (a3)
  {
    v14 = 0;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v9 = v14;
    v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  else
  {
    WebKit::encodeJSONString(v5, 1, 0);
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)-[__CFString length](v10, "length") < 0x4000001)
    {
      if (!v10)
        v10 = &stru_1E351F1B8;
    }
    else
    {

      v10 = &stru_1E351F1B8;
    }
    MEMORY[0x19AEABCC8](&v14, v10);
    v11 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 16))(v11, &v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v13 = v14;
    v14 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }

  }
}

void sub_1976D3490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  void *v10;
  void *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v14);
    else
      *(_DWORD *)a10 -= 2;
  }

  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(WebKit::WebExtensionContentWorldType,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_1,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[1];
  *a1 = &off_1E34F5BC0;
  a1[1] = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(WebKit::WebExtensionContentWorldType,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_1,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34F5BC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::internalDispatchRuntimeMessageEvent(WebKit::WebExtensionContentWorldType,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(WTF::String&&)> &&)::$_1,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, uint64_t a2, WebKit::WebExtensionAPINamespace *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  WebKit::WebExtensionAPIRuntime *v26;
  uint64_t v27;
  WebKit::WebExtensionAPIRuntime *v28;
  void *v29;
  WebKit::WebExtensionCallbackHandler **v30;
  uint64_t v31;
  uint64_t v32;
  WebKit::WebExtensionCallbackHandler *v33;
  objc_object *v34;
  objc_object *v35;
  objc_object *v36;
  void *v37;
  void *v38;
  void *v39;
  CFTypeRef v40;
  CFTypeRef v41;
  _QWORD v42[4];
  CFTypeRef cf;
  _QWORD aBlock[4];
  CFTypeRef v45;
  WebKit::WebExtensionCallbackHandler **v46;
  uint64_t v47;

  v6 = *(uint64_t **)(a1 + 16);
  if (!*((_BYTE *)v6 + 8))
    goto LABEL_21;
  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
    goto LABEL_20;
  v8 = *(_QWORD *)(v7 + 8);
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8);
    v12 = *v6;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9);
    if (v11 == v8 && v12 == -2)
      goto LABEL_21;
    v7 = *(_QWORD *)(a2 + 24);
    if (!v7)
      goto LABEL_20;
  }
  v14 = *(_QWORD *)(v7 + 8);
  if (!v14)
    goto LABEL_20;
  v15 = *(_QWORD *)(v14 + 24);
  if (!v15)
    goto LABEL_20;
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
    goto LABEL_20;
  v17 = *(_QWORD **)(*(_QWORD *)(v16 + 48) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v17 + 1368))(v17) & 1) != 0)
    goto LABEL_20;
  v18 = *(_QWORD *)(v17[2] + 8);
  if (!v18)
    goto LABEL_20;
  CFRetain(*(CFTypeRef *)(v18 - 8));
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *v6;
  CFRelease(*(CFTypeRef *)(v18 - 8));
  if (v19 != a2 || v20 != -2)
  {
LABEL_20:
    if (*(_QWORD *)(a2 + 80) != *v6)
      return;
  }
LABEL_21:
  v22 = *(_QWORD *)(a1 + 24);
  v23 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(_QWORD *))(*v23 + 1368))(v23);
  v24 = *(_QWORD *)(v23[2] + 8);
  if (v24)
    v25 = v24 - 16;
  else
    v25 = 0;
  if (*(_QWORD *)(v22 + 216) != *(_QWORD *)(v25 + 2120))
  {
    v46 = 0;
    v47 = 0;
    if (**(_BYTE **)(a1 + 32) == 3)
    {
      v26 = (WebKit::WebExtensionAPIRuntime *)WebKit::WebExtensionAPINamespace::runtime(a3);
      v27 = WebKit::WebExtensionAPIRuntime::onMessageExternal(v26);
    }
    else
    {
      v28 = (WebKit::WebExtensionAPIRuntime *)WebKit::WebExtensionAPINamespace::runtime(a3);
      v27 = WebKit::WebExtensionAPIRuntime::onMessage(v28);
    }
    WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v46, (unsigned int *)(v27 + 72));
    if (HIDWORD(v47))
    {
      v30 = v46;
      v31 = 8 * HIDWORD(v47);
      v32 = MEMORY[0x1E0C809B0];
      do
      {
        v33 = *v30;
        v34 = **(objc_object ***)(a1 + 40);
        v35 = **(objc_object ***)(a1 + 48);
        aBlock[0] = v32;
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZZN6WebKit24WebExtensionContextProxy35internalDispatchRuntimeMessageEventENS_28WebExtensionContentWorldTypeERKN3WTF6StringENSt3__18optionalINS2_23ObjectIdentifierGenericINS_31WebExtensionFrameIdentifierTypeENS2_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_35WebExtensionMessageSenderParametersEONS2_17CompletionHandlerIFvOS3_EEEENK3__1clERNS_8WebFrameERNS_24WebExtensionAPINamespaceE_block_invoke;
        aBlock[3] = &__block_descriptor_40_ea8_32c50_ZTSN3WTF9RetainPtrI26_WKReplyCallbackAggregatorEE_e17_v16__0__JSValue_8l;
        WTF::RetainPtr<_WKReplyCallbackAggregator>::RetainPtr(&v45, *(id *)(a1 + 8));
        v36 = (objc_object *)_Block_copy(aBlock);
        WebKit::WebExtensionCallbackHandler::call(v33, v34, v35, v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();

        objc_opt_class();
        WTF::dynamic_objc_cast<NSNumber>(v37);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v34) = objc_msgSend(v38, "BOOLValue");

        if ((_DWORD)v34)
        {
          **(_BYTE **)(a1 + 56) = 1;
        }
        else
        {
          objc_opt_class();
          WTF::dynamic_objc_cast<JSValue>(v37);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v39, "_isThenable") & 1) != 0)
          {
            **(_BYTE **)(a1 + 56) = 1;
            v42[0] = v32;
            v42[1] = 3321888768;
            v42[2] = ___ZZN6WebKit24WebExtensionContextProxy35internalDispatchRuntimeMessageEventENS_28WebExtensionContentWorldTypeERKN3WTF6StringENSt3__18optionalINS2_23ObjectIdentifierGenericINS_31WebExtensionFrameIdentifierTypeENS2_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_35WebExtensionMessageSenderParametersEONS2_17CompletionHandlerIFvOS3_EEEENK3__1clERNS_8WebFrameERNS_24WebExtensionAPINamespaceE_block_invoke_115;
            v42[3] = &__block_descriptor_40_ea8_32c50_ZTSN3WTF9RetainPtrI26_WKReplyCallbackAggregatorEE_e20_v24__0__JSValue_8_16l;
            WTF::RetainPtr<_WKReplyCallbackAggregator>::RetainPtr(&cf, *(id *)(a1 + 8));
            objc_msgSend(v39, "_awaitThenableResolutionWithCompletionHandler:", v42);
            v40 = cf;
            cf = 0;
            if (v40)
              CFRelease(v40);
          }

        }
        v41 = v45;
        v45 = 0;
        if (v41)
          CFRelease(v41);
        ++v30;
        v31 -= 8;
      }
      while (v31);
    }
    WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v29);
  }
}

void sub_1976D38C0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef a20,char a21)
{
  WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a21, a2);
  _Unwind_Resume(a1);
}

unsigned int *WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  WebKit::WebExtensionCallbackHandler **v5;
  uint64_t v6;
  WebKit::WebExtensionCallbackHandler **v7;
  uint64_t v8;
  WebKit::WebExtensionCallbackHandler *v9;
  WebKit::WebExtensionCallbackHandler *v10;
  unsigned int v11;
  uint64_t v12;
  WebKit::WebExtensionCallbackHandler **v13;
  WebKit::WebExtensionCallbackHandler **v14;
  uint64_t v15;
  WebKit::WebExtensionCallbackHandler *v16;

  if (a2 != a1)
  {
    v4 = a2[3];
    if (a1[3] <= v4)
    {
      if (v4 > a1[2])
      {
        WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, a2[3]);
      }
    }
    else
    {
      WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v4);
    }
    v5 = *(WebKit::WebExtensionCallbackHandler ***)a2;
    v6 = a1[3];
    if ((_DWORD)v6)
    {
      v7 = *(WebKit::WebExtensionCallbackHandler ***)a1;
      v8 = 8 * v6;
      do
      {
        v9 = *v5;
        if (*v5)
          ++*(_DWORD *)v9;
        v10 = *v7;
        *v7 = v9;
        if (v10)
          WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v10);
        ++v5;
        ++v7;
        v8 -= 8;
      }
      while (v8);
      v5 = *(WebKit::WebExtensionCallbackHandler ***)a2;
      v11 = a1[3];
    }
    else
    {
      v11 = 0;
    }
    v12 = a2[3];
    if (v11 != (_DWORD)v12)
    {
      v13 = (WebKit::WebExtensionCallbackHandler **)(*(_QWORD *)a1 + 8 * v11);
      v14 = &v5[v11];
      v15 = 8 * v12 - 8 * v11;
      do
      {
        v16 = *v14;
        if (*v14)
          ++*(_DWORD *)v16;
        *v13++ = v16;
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
    a1[3] = v12;
  }
  return a1;
}

void ___ZZN6WebKit24WebExtensionContextProxy35internalDispatchRuntimeMessageEventENS_28WebExtensionContentWorldTypeERKN3WTF6StringENSt3__18optionalINS2_23ObjectIdentifierGenericINS_31WebExtensionFrameIdentifierTypeENS2_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_35WebExtensionMessageSenderParametersEONS2_17CompletionHandlerIFvOS3_EEEENK3__1clERNS_8WebFrameERNS_24WebExtensionAPINamespaceE_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v5 = a2;
  v3 = *(void **)(a1 + 32);
  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v3);
  v4 = objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "aggregator");
  WTF::EagerCallbackAggregator<void ()(objc_object *,WebKit::IsDefaultReply)>::operator()(v4, v5);

}

void sub_1976D3A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_32c50_ZTSN3WTF9RetainPtrI26_WKReplyCallbackAggregatorEE(uint64_t a1, uint64_t a2)
{
  return WTF::RetainPtr<_WKReplyCallbackAggregator>::RetainPtr((_QWORD *)(a1 + 32), *(id *)(a2 + 32));
}

_QWORD *WTF::RetainPtr<_WKReplyCallbackAggregator>::RetainPtr(_QWORD *a1, id a2)
{
  id v4;
  void *v5;

  WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(a2);
  objc_claimAutoreleasedReturnValue();
  v4 = a2;
  v5 = v4;
  *a1 = v4;
  if (v4)
    CFRetain(v4);

  return a1;
}

void sub_1976D3B18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c50_ZTSN3WTF9RetainPtrI26_WKReplyCallbackAggregatorEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void ___ZZN6WebKit24WebExtensionContextProxy35internalDispatchRuntimeMessageEventENS_28WebExtensionContentWorldTypeERKN3WTF6StringENSt3__18optionalINS2_23ObjectIdentifierGenericINS_31WebExtensionFrameIdentifierTypeENS2_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEERKNS_35WebExtensionMessageSenderParametersEONS2_17CompletionHandlerIFvOS3_EEEENK3__1clERNS_8WebFrameERNS_24WebExtensionAPINamespaceE_block_invoke_115(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (!v5)
  {
    v6 = *(void **)(a1 + 32);
    WTF::RetainPtr<_WKWebExtensionDeclarativeNetRequestSQLiteStore>::operator _WKWebExtensionDeclarativeNetRequestSQLiteStore*(v6);
    v7 = objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "aggregator");
    WTF::EagerCallbackAggregator<void ()(objc_object *,WebKit::IsDefaultReply)>::operator()(v7, v8);

  }
}

void sub_1976D3BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::internalDispatchRuntimeConnectEvent(WebKit::WebExtensionContentWorldType,WTF::ObjectIdentifierGeneric<WebKit::WebExtensionPortChannelIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::WebExtensionMessageSenderParameters const&,WTF::CompletionHandler<void ()(WTF::HashCountedSet<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> &&)> &&)::$_0,void,WebKit::WebFrame &,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebFrame *a2, WebKit::WebExtensionAPINamespace *a3)
{
  WebCore *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  WebKit::WebFrame *v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  WebKit::WebExtensionAPIRuntime *v24;
  uint64_t v25;
  WebKit::WebExtensionAPIRuntime *v26;
  void *v27;
  int v28;
  uint64_t *v29;
  WebCore::DOMWrapperWorld *v30;
  WebKit::WebExtensionCallbackHandler **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _DWORD **v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  void *v48;
  __int128 v49;
  _DWORD *v50;
  __int128 v51;
  WebKit::WebExtensionCallbackHandler *v52;
  objc_object *v53;
  void *v54;
  void *v55;
  id v56;
  const OpaqueJSContext *ctx;
  uint64_t v60[3];
  WebKit::WebExtensionCallbackHandler **v61;
  uint64_t v62;
  uint64_t v63;
  int v64;

  v4 = *(WebCore **)(a1 + 40);
  v5 = *(uint64_t **)(a1 + 8);
  if (!*((_BYTE *)v5 + 8))
    goto LABEL_21;
  v6 = *((_QWORD *)a2 + 3);
  if (!v6)
    goto LABEL_20;
  v7 = *(_QWORD *)(v6 + 8);
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8);
    v11 = *v5;
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
    if (v10 == v7 && v11 == -2)
      goto LABEL_21;
    v6 = *((_QWORD *)a2 + 3);
    if (!v6)
      goto LABEL_20;
  }
  v13 = *(_QWORD *)(v6 + 8);
  if (!v13)
    goto LABEL_20;
  v14 = *(_QWORD *)(v13 + 24);
  if (!v14)
    goto LABEL_20;
  v15 = *(_QWORD *)(v14 + 8);
  if (!v15)
    goto LABEL_20;
  v16 = *(_QWORD **)(*(_QWORD *)(v15 + 48) + 16);
  if (((*(uint64_t (**)(_QWORD *))(*v16 + 1368))(v16) & 1) != 0)
    goto LABEL_20;
  v17 = *(_QWORD *)(v16[2] + 8);
  if (!v17)
    goto LABEL_20;
  CFRetain(*(CFTypeRef *)(v17 - 8));
  v18 = *(WebKit::WebFrame **)(v17 + 72);
  v19 = *v5;
  CFRelease(*(CFTypeRef *)(v17 - 8));
  if (v18 != a2 || v19 != -2)
  {
LABEL_20:
    if (*((_QWORD *)a2 + 10) != *v5)
      return;
  }
LABEL_21:
  v21 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(_QWORD *))(*v21 + 1368))(v21);
  v22 = *(_QWORD *)(v21[2] + 8);
  if (v22)
    v23 = v22 - 16;
  else
    v23 = 0;
  v63 = *(_QWORD *)(v23 + 2120);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 216) != v63)
  {
    v61 = 0;
    v62 = 0;
    if (**(_BYTE **)(a1 + 24) == 3)
    {
      v24 = (WebKit::WebExtensionAPIRuntime *)WebKit::WebExtensionAPINamespace::runtime(a3);
      v25 = WebKit::WebExtensionAPIRuntime::onConnectExternal(v24);
    }
    else
    {
      v26 = (WebKit::WebExtensionAPIRuntime *)WebKit::WebExtensionAPINamespace::runtime(a3);
      v25 = WebKit::WebExtensionAPIRuntime::onConnect(v26);
    }
    WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v61, (unsigned int *)(v25 + 72));
    v28 = HIDWORD(v62);
    if (HIDWORD(v62))
    {
      v29 = *(uint64_t **)(a1 + 32);
      v64 = 0;
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(v29, &v63, &v64, (uint64_t)v60);
      *(_DWORD *)(v60[0] + 8) += v28;
      v30 = (WebCore::DOMWrapperWorld *)WebKit::WebExtensionContextProxy::toDOMWrapperWorld(v4, **(unsigned __int8 **)(a1 + 48));
      ctx = (const OpaqueJSContext *)WebKit::WebFrame::jsContextForWorld(a2, v30);
      if (HIDWORD(v62))
      {
        v31 = v61;
        v32 = 8 * HIDWORD(v62);
        do
        {
          v33 = *((_QWORD *)a2 + 3);
          if (v33
            && (v34 = *(_QWORD *)(v33 + 8)) != 0
            && (v35 = *(_QWORD *)(v34 + 24)) != 0
            && (v36 = *(_QWORD *)(v35 + 8)) != 0
            && (v37 = *(_QWORD **)(*(_QWORD *)(v36 + 48) + 16),
                ((*(uint64_t (**)(_QWORD *))(*v37 + 1368))(v37) & 1) == 0))
          {
            v38 = *(_QWORD *)(v37[2] + 8);
            if (v38)
              v39 = v38 - 16;
            else
              v39 = 0;
          }
          else
          {
            v39 = 0;
          }
          v40 = *(uint64_t **)(a1 + 56);
          v41 = *(_DWORD ***)(a1 + 64);
          v43 = *(_QWORD *)(a1 + 16);
          v42 = *(_BYTE **)(a1 + 24);
          v44 = WTF::fastMalloc((WTF *)0x198);
          LOBYTE(v42) = *v42;
          v45 = *v40;
          WebKit::WebExtensionAPIObject::WebExtensionAPIObject(v44, (uint64_t)a3);
          *(_QWORD *)(v44 + 40) = &unk_1E34F5A58;
          *(_DWORD *)(v44 + 48) = 1;
          *(_QWORD *)(v44 + 56) = 0;
          *(_QWORD *)v44 = off_1E34F5A28;
          *(_BYTE *)(v44 + 64) = (_BYTE)v42;
          *(_QWORD *)(v44 + 72) = *(_QWORD *)(v39 + 2120);
          *(_QWORD *)(v44 + 80) = v45;
          *(_BYTE *)(v44 + 88) = 0;
          v46 = *v41;
          if (*v41)
            *v46 += 2;
          *(_BYTE *)(v44 + 112) = 0;
          *(_QWORD *)(v44 + 96) = v46;
          *(_QWORD *)(v44 + 104) = 0;
          *(_BYTE *)(v44 + 120) = 0;
          if (*(_BYTE *)(v43 + 8))
          {
            v47 = *(_DWORD **)v43;
            if (*(_QWORD *)v43)
              *v47 += 2;
            *(_QWORD *)(v44 + 112) = v47;
            *(_BYTE *)(v44 + 120) = 1;
          }
          std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100]((_BYTE *)(v44 + 128), v43 + 16);
          v49 = *(_OWORD *)(v43 + 200);
          *(_OWORD *)(v44 + 321) = *(_OWORD *)(v43 + 209);
          *(_OWORD *)(v44 + 312) = v49;
          v50 = *(_DWORD **)(v43 + 232);
          if (v50)
            *v50 += 2;
          *(_QWORD *)(v44 + 344) = v50;
          v51 = *(_OWORD *)(v43 + 256);
          *(_OWORD *)(v44 + 352) = *(_OWORD *)(v43 + 240);
          *(_OWORD *)(v44 + 368) = v51;
          *(_BYTE *)(v44 + 384) = 1;
          *(_QWORD *)(v44 + 392) = 0;
          *(_QWORD *)(v44 + 400) = 0;
          WebKit::WebExtensionAPIPort::add((WebKit::WebExtensionAPIPort *)v44, v48);
          v52 = *v31;
          v53 = (objc_object *)WebKit::JSWebExtensionWrapper::wrap(ctx, (void *)(v44 + 40));
          if (v53)
          {
            v54 = (void *)MEMORY[0x1E0CBE108];
            objc_msgSend(MEMORY[0x1E0CBE0F0], "contextWithJSGlobalContextRef:", JSContextGetGlobalContext(ctx));
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v54, "valueWithJSValueRef:inContext:", v53, v55);
            v53 = (objc_object *)objc_claimAutoreleasedReturnValue();

          }
          v56 = WebKit::WebExtensionCallbackHandler::call(v52, v53);

          if (*(_DWORD *)(v44 + 48) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)(v44 + 40) + 8))(v44 + 40);
          else
            --*(_DWORD *)(v44 + 48);
          ++v31;
          v32 -= 8;
        }
        while (v32);
      }
    }
    WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v27);
  }
}

void sub_1976D3FF0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  WTF::Vector<WTF::RefPtr<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

_BYTE *std::__optional_copy_base<WebKit::WebExtensionTabParameters,false>::__optional_copy_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[176] = 0;
  if (*(_BYTE *)(a2 + 176))
  {
    std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters const&,WebKit::WebExtensionTabParameters*>((uint64_t)a1, a2);
    a1[176] = 1;
  }
  return a1;
}

void sub_1976D4168(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  std::__optional_destruct_base<WebKit::WebExtensionTabParameters,false>::~__optional_destruct_base[abi:sn180100](v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:sn180100]<WebKit::WebExtensionTabParameters,WebKit::WebExtensionTabParameters const&,WebKit::WebExtensionTabParameters*>(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  __int128 v3;
  _DWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (result)
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_BYTE *)(result + 16) = 0;
    *(_BYTE *)(result + 56) = 0;
    if (*(_BYTE *)(a2 + 56))
    {
      v2 = *(_DWORD **)(a2 + 16);
      if (v2)
        *v2 += 2;
      *(_QWORD *)(result + 16) = v2;
      v3 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(result + 24) = v3;
      *(_BYTE *)(result + 56) = 1;
    }
    *(_BYTE *)(result + 64) = 0;
    *(_BYTE *)(result + 72) = 0;
    if (*(_BYTE *)(a2 + 72))
    {
      v4 = *(_DWORD **)(a2 + 64);
      if (v4)
        *v4 += 2;
      *(_QWORD *)(result + 64) = v4;
      *(_BYTE *)(result + 72) = 1;
    }
    v5 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(result + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(result + 96) = v5;
    v6 = *(_OWORD *)(a2 + 112);
    v7 = *(_OWORD *)(a2 + 128);
    v8 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(result + 154) = *(_OWORD *)(a2 + 154);
    *(_OWORD *)(result + 128) = v7;
    *(_OWORD *)(result + 144) = v8;
    *(_OWORD *)(result + 112) = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchRuntimeInstalledEvent(WebKit::WebExtensionContextInstallReason,WTF::String)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(uint64_t a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIRuntime *v3;
  WebKit::WebExtensionAPIEvent *v4;

  v3 = (WebKit::WebExtensionAPIRuntime *)WebKit::WebExtensionAPINamespace::runtime(this);
  v4 = (WebKit::WebExtensionAPIEvent *)WebKit::WebExtensionAPIRuntime::onInstalled(v3);
  WebKit::WebExtensionAPIEvent::invokeListenersWithArgument(v4, **(objc_object ***)(a1 + 8));
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebExtensionContextProxy::dispatchRuntimeStartupEvent(void)::$_0,void,WebKit::WebExtensionAPINamespace &>::call(int a1, WebKit::WebExtensionAPINamespace *this)
{
  WebKit::WebExtensionAPIRuntime *v2;
  unsigned int *v3;

  v2 = (WebKit::WebExtensionAPIRuntime *)WebKit::WebExtensionAPINamespace::runtime(this);
  v3 = (unsigned int *)WebKit::WebExtensionAPIRuntime::onStartup(v2);
  return WebKit::WebExtensionAPIEvent::invokeListeners(v3);
}

id WebKit::toWebAPI(uint64_t *a1, void *a2)
{
  void *v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  __CFString *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  __CFString *v17;
  void *v18;
  int v19;
  void *v20;
  unint64_t v21;
  double v22;
  void *v23;
  __CFString *v24;
  void *v25;
  void *v26;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *((unsigned int *)a1 + 3));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *a1;
  v7 = *((unsigned int *)a1 + 3);
  if ((_DWORD)a2)
  {
    if ((_DWORD)v7)
    {
      v8 = 48 * v7;
      v9 = (_BYTE *)(v6 + 24);
      do
      {
        if (*v9
          && (!*((_QWORD *)v9 - 1)
            ? (v10 = &stru_1E351F1B8)
            : (v10 = (__CFString *)(id)WTF::StringImpl::operator NSString *()),
              WebKit::parseJSON(v10, 1, 0),
              v11 = (void *)objc_claimAutoreleasedReturnValue(),
              v10,
              v11))
        {
          v12 = 0;
          v13 = v11;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99E38], "null");
          a2 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = 0;
          v12 = 1;
          v13 = a2;
        }
        objc_msgSend(v5, "addObject:", v13);
        if (v12)

        v9 += 48;
        v8 -= 48;
      }
      while (v8);
    }
  }
  else if ((_DWORD)v7)
  {
    v14 = 48 * v7;
    v15 = v6 + 24;
    do
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 3);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (*(_BYTE *)v15
        && (!*(_QWORD *)(v15 - 8)
          ? (v17 = &stru_1E351F1B8)
          : (v17 = (__CFString *)(id)WTF::StringImpl::operator NSString *()),
            WebKit::parseJSON(v17, 1, 0),
            v18 = (void *)objc_claimAutoreleasedReturnValue(),
            v17,
            v18))
      {
        v19 = 0;
        v20 = v18;
      }
      else
      {
        v18 = 0;
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 1;
        v20 = v2;
      }
      objc_msgSend(v16, "setObject:forKeyedSubscript:", v20, CFSTR("result"));
      if (v19)

      if (*(_BYTE *)(v15 + 16))
      {
        v21 = *(_QWORD *)(v15 + 8);
        if (v21 == -3)
        {
          v22 = -1.0;
        }
        else
        {
          v22 = 0.0;
          if (v21 != -2)
            v22 = (double)v21;
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "setObject:forKeyedSubscript:", v23, CFSTR("frameId"));

      }
      if (*(_BYTE *)(v15 - 16))
      {
        if (*(_QWORD *)(v15 - 24))
          v24 = (__CFString *)(id)WTF::StringImpl::operator NSString *();
        else
          v24 = &stru_1E351F1B8;
        objc_msgSend(v16, "setObject:forKeyedSubscript:", v24, CFSTR("error"));

      }
      v25 = (void *)objc_msgSend(v16, "copy");
      objc_msgSend(v5, "addObject:", v25);

      v15 += 48;
      v14 -= 48;
    }
    while (v14);
  }
  v26 = (void *)objc_msgSend(v5, "copy");

  return v26;
}

void sub_1976D4528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1976D4888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  void *v10;
  void *v11;

  if (cf)
    CFRelease(cf);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::executeScript(uint64_t a1, void *a2, char **a3, _QWORD *a4)
{
  id v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  __CFString *v12;
  NSString *v13;
  NSString *v14;
  void *v15;
  void *v16;
  BOOL v17;
  NSString *v18;
  id v19;
  void *v20;
  void *v21;
  BOOL v22;
  NSString *v23;
  void *v24;
  _BOOL4 v25;
  void *v26;
  void *v27;
  _BOOL4 v28;
  NSString *v29;
  void *v30;
  _BOOL4 v31;
  NSString *v32;
  void *v33;
  NSString *v34;
  void *v35;
  void *v36;
  NSString *v37;
  int hasValidExecutionWorld;
  void *v39;
  void *v40;
  NSDictionary *v41;
  NSDictionary *v42;
  uint64_t v43;
  void *v44;
  id v45;
  void *v46;
  BOOL v47;
  void *v48;
  void *v49;
  __CFString *v50;
  __CFString *v51;
  NSString *v52;
  void *v53;
  id *v54;
  const __CFString *v55;
  const __CFString *v56;
  const __CFString *v57;
  void *v58;
  _BOOL4 v59;
  const void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  int v65;
  void *v66;
  WebKit::WebProcess *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __CFString *v71;
  uint64_t v72;
  const __CFString *v73;
  IPC::Encoder *v74;
  WTF *v75;
  void *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF *v80;
  const __CFString *v81;
  __CFString *v82;
  uint64_t v83;
  uint64_t v84;
  const __CFString *v85;
  uint64_t v86;
  _QWORD v87[2];
  uint64_t v88;
  WTF *v89;
  int v90;
  char v91;
  WTF::StringImpl *v92;
  char v93;
  WTF::StringImpl *v94;
  char v95;
  WTF::StringImpl *v96;
  char v97;
  __int16 v98;
  const __CFString *v99;
  void *v100;
  const __CFString *v101;
  const __CFString *v102;
  const __CFString *v103;
  const __CFString *v104;
  const __CFString *v105;
  const __CFString *v106;
  const __CFString *v107;
  uint64_t v108;
  id v109[3];

  v109[1] = *(id *)MEMORY[0x1E0C80C00];
  v7 = a2;
  if ((_MergedGlobals_114 & 1) == 0)
  {
    v109[0] = CFSTR("target");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v109, 1);
    qword_1ECE730F0 = objc_claimAutoreleasedReturnValue();
    _MergedGlobals_114 = 1;
  }
  if ((byte_1ECE730E1 & 1) == 0)
  {
    v101 = CFSTR("args");
    v83 = objc_opt_class();
    v102 = CFSTR("arguments");
    v84 = objc_opt_class();
    v103 = CFSTR("files");
    v108 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v108, 1, v83, v84);
    v82 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v85 = v82;
    v104 = CFSTR("func");
    v86 = objc_opt_class();
    v105 = CFSTR("function");
    v87[0] = objc_opt_class();
    v106 = CFSTR("target");
    v87[1] = objc_opt_class();
    v107 = CFSTR("world");
    v88 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v83, &v101, 7);
    qword_1ECE730F8 = objc_claimAutoreleasedReturnValue();

    byte_1ECE730E1 = 1;
  }
  if (!WebKit::validateDictionary(v7, CFSTR("details"), (void *)qword_1ECE730F0, (void *)qword_1ECE730F8, a4))
    goto LABEL_54;
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("target"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = WebKit::WebExtensionAPIScripting::validateTarget(v8, a4);

  if ((v9 & 1) == 0)
    goto LABEL_54;
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("args"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10
    || (objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("arguments")),
        (v10 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("args"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = CFSTR("arguments");
    if (v11)
      v12 = CFSTR("args");
    v13 = v12;

    if ((WebKit::isValidJSONObject(v10, 1) & 1) == 0)
    {
      WebKit::toErrorString(0, v13, CFSTR("it is not JSON-serializable"), v14);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

LABEL_54:
      goto LABEL_55;
    }

  }
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("function"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("func"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v16 == 0;

    if (!v17)
    {
      WebKit::toErrorString(0, CFSTR("details"), CFSTR("it cannot specify both 'func' and 'function'. Please use 'func'"), v18);
      v19 = (id)objc_claimAutoreleasedReturnValue();
LABEL_53:
      *a4 = v19;
      goto LABEL_54;
    }
  }
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("arguments"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("args"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v21 == 0;

    if (!v22)
    {
      WebKit::toErrorString(0, CFSTR("details"), CFSTR("it cannot specify both 'args' and 'arguments'. Please use 'args'"), v23);
      v19 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_53;
    }
  }
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("function"));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24)
  {
    v25 = 1;
  }
  else
  {
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("func"));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = v26 != 0;

  }
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("files"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (v27)
    v28 = v25;
  else
    v28 = 0;

  if (v28)
  {
    WebKit::toErrorString(0, CFSTR("details"), CFSTR("it cannot specify both 'files' and 'func'"), v29);
    v19 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_53;
  }
  if (!v25)
  {
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("files"));
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v30 == 0;

    if (v31)
    {
      WebKit::toErrorString(0, CFSTR("details"), CFSTR("it must specify either 'func' or 'files''"), v32);
      v19 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_53;
    }
  }
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("args"));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v33)
  {
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("arguments"));
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = v58 == 0;

    if (v59 || v25)
      goto LABEL_32;
LABEL_51:
    WebKit::toErrorString(0, CFSTR("details"), CFSTR("it must specify both 'func' and 'args'"), v34);
    v19 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_53;
  }

  if (!v25)
    goto LABEL_51;
LABEL_32:
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("files"));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = v35;
  if (v35 && !objc_msgSend(v35, "count"))
  {
    WebKit::toErrorString(0, CFSTR("files"), CFSTR("at least one file must be specified"), v37);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_54;
  }

  hasValidExecutionWorld = WebKit::WebExtensionAPIScripting::hasValidExecutionWorld(v7, a4);
  if (!hasValidExecutionWorld)
  {
LABEL_55:
    v45 = v7;
    goto LABEL_56;
  }
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("func"));
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  if (v39
    || (objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("function")),
        (v39 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v99 = CFSTR("function");
    objc_msgSend(v39, "toString");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v100 = v40;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v100, &v99, 1);
    v41 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
    WebKit::mergeDictionariesAndSetValues((WebKit *)v7, v41, v42);
    v43 = objc_claimAutoreleasedReturnValue();

    v7 = (id)v43;
  }
  LOBYTE(v83) = 0;
  LOBYTE(v84) = 0;
  LOBYTE(v85) = 0;
  LOBYTE(v86) = 0;
  LOBYTE(v87[0]) = 0;
  LOBYTE(v88) = 0;
  LOBYTE(v89) = 0;
  v91 = 0;
  LOBYTE(v92) = 0;
  v93 = 0;
  LOBYTE(v94) = 0;
  v95 = 0;
  LOBYTE(v96) = 0;
  v97 = 0;
  v98 = 257;
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("target"), v83, v84);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  WebKit::WebExtensionAPIScripting::parseTargetInjectionOptions(v44, (uint64_t)&v83, a4);

  v45 = v7;
  objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("function"));
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = v46 == 0;

  if (!v47)
  {
    objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("function"));
    v109[0] = (id)objc_claimAutoreleasedReturnValue();
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>((uint64_t)&v96, v109);

  }
  objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("args"));
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v48)
  {
    objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("arguments"));
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v48)
      goto LABEL_64;
  }
  objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("args"));
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  if (v49)
    v50 = CFSTR("args");
  else
    v50 = CFSTR("arguments");
  v51 = v50;

  WebKit::encodeJSONData(v48, 1, 0);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  if (v53)
  {
    v54 = (id *)WTF::RetainPtr<NSData>::RetainPtr(&v108, v53);
    API::Data::createWithoutCopying(v54, (WebKit **)&v101);
    v55 = v101;
    v101 = 0;
    if ((_BYTE)v86)
    {
      v56 = v85;
      v85 = v55;
      if (v56)
      {
        CFRelease((CFTypeRef)v56->info);
        v57 = v101;
        v101 = 0;
        if (v57)
          CFRelease((CFTypeRef)v57->info);
        goto LABEL_61;
      }
    }
    else
    {
      v85 = v55;
      LOBYTE(v86) = 1;
    }
    v101 = 0;
LABEL_61:
    v60 = (const void *)v108;
    v108 = 0;
    if (v60)
      CFRelease(v60);

LABEL_64:
    objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("files"));
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    v62 = v61;
    if (v61)
    {
      WTF::makeVector<WTF::String>(v61, (uint64_t)&v101);
      std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v87, &v101);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v101, v63);
    }

    objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("world"));
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend(v64, "isEqualToString:", CFSTR("MAIN"));

    if (v65)
      LOBYTE(v98) = 0;
    goto LABEL_68;
  }
  WebKit::toErrorString(0, &v51->isa, CFSTR("it is not JSON-serializable"), v52);
  *a4 = (id)objc_claimAutoreleasedReturnValue();

LABEL_68:
  if (!*a4)
  {
    {
      v67 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v67 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v67);
    }
    ++*(_DWORD *)(a1 + 48);
    v68 = *a3;
    *a3 = 0;
    v69 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v70 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v70 = 1652;
    *(_QWORD *)(v70 + 8) = v69;
    *(_QWORD *)(v70 + 528) = v70 + 16;
    *(_QWORD *)(v70 + 536) = v70 + 16;
    *(_OWORD *)(v70 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v70 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v70);
    v109[0] = (id)v70;
    IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionParameters,void>::encode((IPC::Encoder *)v70, &v83);
    v71 = (__CFString *)WTF::fastMalloc((WTF *)0x18);
    v71->isa = &off_1E34F5CC0;
    v71->info = a1;
    v71->data = v68;
    v72 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v101 = v71;
    v102 = (const __CFString *)v72;
    (*(void (**)(_QWORD *, id *, const __CFString **, _QWORD))(*((_QWORD *)v67 + 2) + 40))((_QWORD *)v67 + 2, v109, &v101, 0);
    v73 = v101;
    v101 = 0;
    if (v73)
      (*((void (**)(const __CFString *))v73->isa + 1))(v73);
    v74 = (IPC::Encoder *)v109[0];
    v109[0] = 0;
    if (v74)
    {
      IPC::Encoder::~Encoder(v74, v66);
      WTF::fastFree(v75, v76);
    }
  }
  if (v97)
  {
    v77 = v96;
    v96 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v66);
      else
        *(_DWORD *)v77 -= 2;
    }
  }
  if (v95)
  {
    v78 = v94;
    v94 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, (WTF::StringImpl *)v66);
      else
        *(_DWORD *)v78 -= 2;
    }
  }
  if (v93)
  {
    v79 = v92;
    v92 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v66);
      else
        *(_DWORD *)v79 -= 2;
    }
  }
  if (v91)
  {
    v80 = v89;
    if (v89)
    {
      v89 = 0;
      v90 = 0;
      WTF::fastFree(v80, v66);
    }
  }
  if ((_BYTE)v88)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v87, v66);
  if ((_BYTE)v86)
  {
    v81 = v85;
    v85 = 0;
    if (v81)
      CFRelease((CFTypeRef)v81->info);
  }
LABEL_56:

}

void sub_1976D5354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, WTF *a16, int a17, int a18, char a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22,char a23,WTF::StringImpl *a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::parseTargetInjectionOptions(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  void *v6;
  NSString *v7;
  long double v8;
  double v9;
  unint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  NSString *v17;
  long double v18;
  double v19;
  unint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  double v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  void **v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v35;
  void *v36;
  void *v37;
  char v38;
  void *v39;
  WTF *v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *__src;
  uint64_t v51;
  long double __y;
  uint64_t v53;
  _BOOL8 v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("tabId"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "doubleValue");
  v9 = v8;
  if (v8 == -1.0)
  {
    v10 = -2;
  }
  else
  {
    v35 = (v8 >= 0.0 && ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
        || (unint64_t)(*(_QWORD *)&v8 - 1) <= 0xFFFFFFFFFFFFELL)
       && v8 < 1.84467441e19;
    if (!v35 || modf(v8, (long double *)&__src) != 0.0)
    {
      WebKit::toErrorString(0, CFSTR("tabId"), CFSTR("'%@' is not a tab identifier"), v7, v6);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_74;
    }
    v10 = (unint64_t)v9;
    if ((unint64_t)v9 - 1 >= 0xFFFFFFFFFFFFFFFELL)
      v10 = -2;
  }
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = 1;
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("frameIds"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    __src = 0;
    v51 = 0;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v12 = v11;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v46, v55, 16);
    if (v13)
    {
      v14 = *(_QWORD *)v47;
      while (2)
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v47 != v14)
            objc_enumerationMutation(v12);
          v16 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
          objc_msgSend(v16, "doubleValue");
          v19 = v18;
          if (v18 == 0.0)
          {
            v20 = -256;
            v21 = 1;
            v22 = 254;
          }
          else if (v18 == -1.0)
          {
            v20 = -256;
            v21 = 1;
            v22 = 253;
          }
          else
          {
            if ((v18 < 0.0 || ((*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
              && (unint64_t)(*(_QWORD *)&v18 - 1) > 0xFFFFFFFFFFFFELL
              || v18 >= 1.84467441e19)
            {
              v53 = 0;
              v54 = 0;
LABEL_70:
              WebKit::toErrorString(0, CFSTR("frameIds"), CFSTR("'%@' is not a frame identifier"), v17, v16);
              *a3 = (id)objc_claimAutoreleasedReturnValue();

              goto LABEL_71;
            }
            v26 = modf(v18, &__y);
            v21 = v26 == 0.0;
            if (v26 == 0.0)
              v20 = (unint64_t)v19 & 0xFFFFFFFFFFFFFF00;
            else
              v20 = 0;
            if (v26 == 0.0)
              v22 = (unint64_t)v19;
            else
              v22 = 0;
          }
          v27 = v20 | v22;
          v53 = v27;
          v54 = v21;
          if (!v21 || v27 == -3)
            goto LABEL_70;
          if (HIDWORD(v51) == (_DWORD)v51)
          {
            v28 = (_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__src, HIDWORD(v51) + 1, (unint64_t)&v53);
            *((_QWORD *)__src + HIDWORD(v51)) = *v28;
          }
          else
          {
            *((_QWORD *)__src + HIDWORD(v51)) = v27;
          }
          ++HIDWORD(v51);
        }
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v46, v55, 16);
        if (v13)
          continue;
        break;
      }
    }

    v30 = (void **)(a2 + 56);
    if (*(_BYTE *)(a2 + 72))
    {
      if (&__src != v30)
      {
        v31 = *(_DWORD *)(a2 + 68);
        v32 = HIDWORD(v51);
        if (v31 <= HIDWORD(v51))
        {
          if (HIDWORD(v51) > *(_DWORD *)(a2 + 64))
          {
            WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a2 + 56, 0);
            WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2 + 56, HIDWORD(v51));
            v31 = *(_DWORD *)(a2 + 68);
          }
        }
        else
        {
          *(_DWORD *)(a2 + 68) = HIDWORD(v51);
          v31 = v32;
        }
        if (v31)
        {
          memmove(*(void **)(a2 + 56), __src, 8 * v31);
          v31 = *(_DWORD *)(a2 + 68);
        }
        if (v31 != HIDWORD(v51))
        {
          v41 = (char *)*v30 + 8 * v31;
          v42 = (uint64_t *)((char *)__src + 8 * v31);
          v43 = 8 * HIDWORD(v51) - 8 * v31;
          do
          {
            v44 = *v42++;
            *v41++ = v44;
            v43 -= 8;
          }
          while (v43);
          v31 = HIDWORD(v51);
        }
        *(_DWORD *)(a2 + 68) = v31;
      }
    }
    else
    {
      WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2 + 56, (uint64_t)&__src);
      *(_BYTE *)(a2 + 72) = 1;
    }
LABEL_71:
    v45 = (WTF *)__src;
    if (__src)
    {
      __src = 0;
      LODWORD(v51) = 0;
      WTF::fastFree(v45, v29);
    }

  }
  else
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("allFrames"));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    WTF::dynamic_objc_cast<NSNumber>(v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v37 || (v38 = objc_msgSend(v37, "BOOLValue"), v37, (v38 & 1) == 0))
    {
      v53 = -2;
      WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&__src, &v53, 1uLL);
      std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(a2 + 56, &__src);
      v40 = (WTF *)__src;
      if (__src)
      {
        __src = 0;
        LODWORD(v51) = 0;
        WTF::fastFree(v40, v39);
      }
    }
  }
LABEL_74:

}

void sub_1976D5AF4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21)
{
  void *v21;
  void *v22;
  void *v23;

  if (a20)
    WTF::fastFree(a20, a2);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::insertCSS(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  void *v9;
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  char v30;
  WTF *v31;
  int v32;
  char v33;
  WTF::StringImpl *v34;
  char v35;
  WTF::StringImpl *v36;
  char v37;
  WTF::StringImpl *v38;
  char v39;
  __int16 v40;
  _QWORD v41[2];
  IPC::Encoder *v42;

  v7 = a2;
  if ((WebKit::WebExtensionAPIScripting::validateCSS(v7, a4) & 1) != 0)
  {
    LOBYTE(v25) = 0;
    LOBYTE(v26) = 0;
    LOBYTE(v27) = 0;
    v28 = 0;
    v29[0] = 0;
    v30 = 0;
    LOBYTE(v31) = 0;
    v33 = 0;
    LOBYTE(v34) = 0;
    v35 = 0;
    LOBYTE(v36) = 0;
    v37 = 0;
    LOBYTE(v38) = 0;
    v39 = 0;
    v40 = 257;
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("target"), v25, v26);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionAPIScripting::parseTargetInjectionOptions(v8, (uint64_t)&v25, a4);

    WebKit::WebExtensionAPIScripting::parseCSSInjectionOptions(v7, (uint64_t)&v25);
    if (!*a4)
    {
      {
        v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v10);
      }
      ++*(_DWORD *)(a1 + 48);
      v11 = *a3;
      *a3 = 0;
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
      v13 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v13 = 1654;
      *(_QWORD *)(v13 + 8) = v12;
      *(_QWORD *)(v13 + 528) = v13 + 16;
      *(_QWORD *)(v13 + 536) = v13 + 16;
      *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v13 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
      v42 = (IPC::Encoder *)v13;
      IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionParameters,void>::encode((IPC::Encoder *)v13, &v25);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v14 = &off_1E34F5D08;
      v14[1] = a1;
      v14[2] = v11;
      v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v41[0] = v14;
      v41[1] = v15;
      (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v10 + 2) + 40))((_QWORD *)v10 + 2, &v42, v41, 0);
      v16 = v41[0];
      v41[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = v42;
      v42 = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v9);
        WTF::fastFree(v18, v19);
      }
    }
    if (v39)
    {
      v20 = v38;
      v38 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v9);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    if (v37)
    {
      v21 = v36;
      v36 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v9);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    if (v35)
    {
      v22 = v34;
      v34 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v9);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
    if (v33)
    {
      v23 = v31;
      if (v31)
      {
        v31 = 0;
        v32 = 0;
        WTF::fastFree(v23, v9);
      }
    }
    if (v30)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v9);
    if (v28)
    {
      v24 = v27;
      v27 = 0;
      if (v24)
        CFRelease(*(CFTypeRef *)(v24 + 8));
    }
  }

}

void sub_1976D5E50(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, WTF *a16, int a17, int a18, char a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22,char a23,WTF::StringImpl *a24,char a25)
{
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;

  v29 = *(_QWORD *)(v27 - 88);
  *(_QWORD *)(v27 - 88) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(IPC::Encoder **)(v27 - 72);
  *(_QWORD *)(v27 - 72) = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, a2);
    WTF::fastFree(v31, v32);
  }
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a24 -= 2;
  }
  if (a23 && a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  if (a21 && a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a19 && a16)
    WTF::fastFree(a16, a2);
  if (a15)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26, a2);
  if (a12)
  {
    if (a11)
      CFRelease(*(CFTypeRef *)(a11 + 8));
  }

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIScripting::validateCSS(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  BOOL v8;
  NSString *v9;
  id v10;
  uint64_t v11;
  void *v13;
  void *v14;
  _BOOL4 v15;
  NSString *v16;
  void *v17;
  void *v18;
  NSString *v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[4];
  _QWORD v23[4];
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if ((byte_1ECE730E4 & 1) == 0)
  {
    v24[0] = CFSTR("target");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v24, 1);
    qword_1ECE73110 = objc_claimAutoreleasedReturnValue();
    byte_1ECE730E4 = 1;
  }
  if ((byte_1ECE730E5 & 1) == 0)
  {
    v22[0] = CFSTR("css");
    v23[0] = objc_opt_class();
    v22[1] = CFSTR("files");
    v21 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v21, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v23[1] = v20;
    v22[2] = CFSTR("origin");
    v23[2] = objc_opt_class();
    v22[3] = CFSTR("target");
    v23[3] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 4);
    qword_1ECE73118 = objc_claimAutoreleasedReturnValue();

    byte_1ECE730E5 = 1;
  }
  if (!WebKit::validateDictionary(v3, CFSTR("details"), (void *)qword_1ECE73110, (void *)qword_1ECE73118, a2)
    || (objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("target")),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = WebKit::WebExtensionAPIScripting::validateTarget(v4, a2),
        v4,
        (v5 & 1) == 0))
  {
    v11 = 0;
    goto LABEL_12;
  }
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("css"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("files"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7 == 0;

    if (!v8)
    {
      WebKit::toErrorString(0, CFSTR("details"), CFSTR("it cannot specify both 'css' and 'files'"), v9);
      v10 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:
      v11 = 0;
      *a2 = v10;
      goto LABEL_12;
    }
  }
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("files"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {

  }
  else
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("css"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14 == 0;

    if (v15)
    {
      WebKit::toErrorString(0, CFSTR("details"), CFSTR("it must specify either 'css' or 'files'"), v16);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    }
  }
  WebKit::objectForKey<NSString>(v3, (uint64_t)CFSTR("origin"), 1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "lowercaseString");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v18
    || (objc_msgSend(v18, "isEqualToString:", CFSTR("user")) & 1) != 0
    || (objc_msgSend(v18, "isEqualToString:", CFSTR("author")) & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    WebKit::toErrorString(0, CFSTR("origin"), CFSTR("it must specify either 'AUTHOR' or 'USER'"), v19);
    v11 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }

LABEL_12:
  return v11;
}

void sub_1976D6360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::parseCSSInjectionOptions(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9[2];

  v3 = a1;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("css"));
  v9[0] = (id)objc_claimAutoreleasedReturnValue();
  if (v9[0])
  {
    std::optional<WTF::String>::operator=[abi:sn180100]<objc_object * {__strong},void>(a2 + 96, v9);

  }
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("files"), v9[0]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    WTF::makeVector<WTF::String>(v4, (uint64_t)v9);
    std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(a2 + 32, v9);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v6);
  }

  WebKit::objectForKey<NSString>(v3, (uint64_t)CFSTR("origin"), 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "lowercaseString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
    *(_BYTE *)(a2 + 129) = objc_msgSend(v8, "isEqualToString:", CFSTR("user")) ^ 1;

}

void sub_1976D64B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::removeCSS(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  void *v9;
  WebKit::WebProcess *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _BYTE v29[16];
  char v30;
  WTF *v31;
  int v32;
  char v33;
  WTF::StringImpl *v34;
  char v35;
  WTF::StringImpl *v36;
  char v37;
  WTF::StringImpl *v38;
  char v39;
  __int16 v40;
  _QWORD v41[2];
  IPC::Encoder *v42;

  v7 = a2;
  if ((WebKit::WebExtensionAPIScripting::validateCSS(v7, a4) & 1) != 0)
  {
    LOBYTE(v25) = 0;
    LOBYTE(v26) = 0;
    LOBYTE(v27) = 0;
    v28 = 0;
    v29[0] = 0;
    v30 = 0;
    LOBYTE(v31) = 0;
    v33 = 0;
    LOBYTE(v34) = 0;
    v35 = 0;
    LOBYTE(v36) = 0;
    v37 = 0;
    LOBYTE(v38) = 0;
    v39 = 0;
    v40 = 257;
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("target"), v25, v26);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    WebKit::WebExtensionAPIScripting::parseTargetInjectionOptions(v8, (uint64_t)&v25, a4);

    WebKit::WebExtensionAPIScripting::parseCSSInjectionOptions(v7, (uint64_t)&v25);
    if (!*a4)
    {
      {
        v10 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v10);
      }
      ++*(_DWORD *)(a1 + 48);
      v11 = *a3;
      *a3 = 0;
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
      v13 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v13 = 1656;
      *(_QWORD *)(v13 + 8) = v12;
      *(_QWORD *)(v13 + 528) = v13 + 16;
      *(_QWORD *)(v13 + 536) = v13 + 16;
      *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v13 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
      v42 = (IPC::Encoder *)v13;
      IPC::ArgumentCoder<WebKit::WebExtensionScriptInjectionParameters,void>::encode((IPC::Encoder *)v13, &v25);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v14 = &off_1E34F5D30;
      v14[1] = a1;
      v14[2] = v11;
      v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v41[0] = v14;
      v41[1] = v15;
      (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v10 + 2) + 40))((_QWORD *)v10 + 2, &v42, v41, 0);
      v16 = v41[0];
      v41[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = v42;
      v42 = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v9);
        WTF::fastFree(v18, v19);
      }
    }
    if (v39)
    {
      v20 = v38;
      v38 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v9);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    if (v37)
    {
      v21 = v36;
      v36 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v9);
        else
          *(_DWORD *)v21 -= 2;
      }
    }
    if (v35)
    {
      v22 = v34;
      v34 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v9);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
    if (v33)
    {
      v23 = v31;
      if (v31)
      {
        v31 = 0;
        v32 = 0;
        WTF::fastFree(v23, v9);
      }
    }
    if (v30)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v9);
    if (v28)
    {
      v24 = v27;
      v27 = 0;
      if (v24)
        CFRelease(*(CFTypeRef *)(v24 + 8));
    }
  }

}

void sub_1976D67C4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, WTF *a16, int a17, int a18, char a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22,char a23,WTF::StringImpl *a24,char a25)
{
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;

  v29 = *(_QWORD *)(v27 - 88);
  *(_QWORD *)(v27 - 88) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(IPC::Encoder **)(v27 - 72);
  *(_QWORD *)(v27 - 72) = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, a2);
    WTF::fastFree(v31, v32);
  }
  if (a25 && a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a24 -= 2;
  }
  if (a23 && a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  if (a21 && a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a19 && a16)
    WTF::fastFree(a16, a2);
  if (a15)
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v26, a2);
  if (a12)
  {
    if (a11)
      CFRelease(*(CFTypeRef *)(a11 + 8));
  }

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::registerContentScripts(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  _QWORD v20[2];
  _QWORD v21[2];
  IPC::Encoder *v22;

  v7 = a2;
  objc_opt_class();
  WTF::dynamic_objc_cast<NSArray>(v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((WebKit::WebExtensionAPIScripting::validateRegisteredScripts(v8, 1, a4) & 1) != 0)
  {
    v20[0] = 0;
    v20[1] = 0;
    WebKit::WebExtensionAPIScripting::parseRegisteredContentScripts(v8, 1, (uint64_t)v20);
    {
      v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v9);
    }
    ++*(_DWORD *)(a1 + 48);
    v10 = *a3;
    *a3 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 1655;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v22 = (IPC::Encoder *)v12;
    IPC::VectorArgumentCoder<false,WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v12, (uint64_t)v20);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = &off_1E34F5D58;
    v13[1] = a1;
    v13[2] = v10;
    v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v21[0] = v13;
    v21[1] = v14;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v9 + 2) + 40))((_QWORD *)v9 + 2, &v22, v21, 0);
    v16 = v21[0];
    v21[0] = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v18, v19);
    }
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v15);
  }

}

void sub_1976D6B48(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  void *v14;
  void *v15;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;

  v17 = a12;
  a12 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = a14;
  a14 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, a2);
    WTF::fastFree(v19, v20);
  }
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIScripting::validateRegisteredScripts(void *a1, int a2, _QWORD *a3)
{
  NSString *v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  NSString *v9;
  void *v10;
  void *v11;
  NSString *v12;
  void *v13;
  void *v14;
  NSString *v15;
  void *v16;
  void *v17;
  NSString *v18;
  void *v19;
  void *v20;
  NSString *v21;
  uint64_t hasValidExecutionWorld;
  __CFString *v23;
  void *v24;
  NSString *v25;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id obj;
  uint64_t v32;
  id v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[10];
  _QWORD v45[10];
  _QWORD v46[3];

  v46[1] = *MEMORY[0x1E0C80C00];
  v33 = a1;
  if ((byte_1ECE730E6 & 1) == 0)
  {
    v46[0] = CFSTR("id");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v46, 1);
    qword_1ECE73120 = objc_claimAutoreleasedReturnValue();
    byte_1ECE730E6 = 1;
  }
  if ((byte_1ECE730E7 & 1) == 0)
  {
    v44[0] = CFSTR("allFrames");
    v45[0] = objc_opt_class();
    v44[1] = CFSTR("css");
    v43 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v43, 1);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v45[1] = v27;
    v44[2] = CFSTR("excludeMatches");
    v42 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v42, 1);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v45[2] = v28;
    v44[3] = CFSTR("id");
    v45[3] = objc_opt_class();
    v44[4] = CFSTR("js");
    v41 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v41, 1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v45[4] = v29;
    v44[5] = CFSTR("matches");
    v40 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v40, 1);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v45[5] = v30;
    v44[6] = CFSTR("persistAcrossSessions");
    v45[6] = objc_opt_class();
    v44[7] = CFSTR("runAt");
    v45[7] = objc_opt_class();
    v44[8] = CFSTR("world");
    v45[8] = objc_opt_class();
    v44[9] = CFSTR("cssOrigin");
    v45[9] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v45, v44, 10);
    qword_1ECE73128 = objc_claimAutoreleasedReturnValue();

    byte_1ECE730E7 = 1;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    WebKit::toErrorString(0, CFSTR("details"), CFSTR("an array is expected"), v4);
    hasValidExecutionWorld = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_47;
  }
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = v33;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
  if (!v5)
  {
    hasValidExecutionWorld = 1;
    goto LABEL_46;
  }
  v32 = *(_QWORD *)v36;
  while (2)
  {
    for (i = 0; i != v5; ++i)
    {
      if (*(_QWORD *)v36 != v32)
        objc_enumerationMutation(obj);
      v7 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
      if (!WebKit::validateDictionary(v7, CFSTR("scripts"), (void *)qword_1ECE73120, (void *)qword_1ECE73128, a3))
        goto LABEL_45;
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("id"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v8, "length"))
      {
        v23 = CFSTR("it must not be empty");
LABEL_36:
        WebKit::toErrorString(0, CFSTR("id"), &v23->isa, v9);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
LABEL_44:

LABEL_45:
        hasValidExecutionWorld = 0;
        goto LABEL_46;
      }
      if (objc_msgSend(v8, "characterAtIndex:", 0) == 95)
      {
        v23 = CFSTR("it must not start with '_'");
        goto LABEL_36;
      }
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("matches"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10;
      if (a2 == 1 && !objc_msgSend(v10, "count"))
      {
        objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("id"));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        WebKit::toErrorString(0, CFSTR("matches"), CFSTR("it must specify at least one match pattern for script with ID '%@'"), v25, v24);
        *a3 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_39;
      }
      if (v11 && !objc_msgSend(v11, "count"))
      {
        WebKit::toErrorString(0, CFSTR("matches"), CFSTR("it must not be empty"), v12);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
LABEL_39:

        goto LABEL_44;
      }
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("js"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("css"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (a2 == 1 && !objc_msgSend(v13, "count") && !objc_msgSend(v14, "count"))
      {
        WebKit::toErrorString(0, CFSTR("details"), CFSTR("it must specify at least one 'css' or 'js' file"), v15);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_43;
      }
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("runAt"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v16;
      if (v16
        && (objc_msgSend(v16, "isEqualToString:", CFSTR("document_idle")) & 1) == 0
        && (objc_msgSend(v17, "isEqualToString:", CFSTR("document_start")) & 1) == 0
        && (objc_msgSend(v17, "isEqualToString:", CFSTR("document_end")) & 1) == 0)
      {
        WebKit::toErrorString(0, CFSTR("runAt"), CFSTR("it must specify either 'document_start', 'document_end', or 'document_idle'"), v18);
        *a3 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_43;
      }

      WebKit::objectForKey<NSString>(v7, (uint64_t)CFSTR("cssOrigin"), 1);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "lowercaseString");
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      if (v20
        && (objc_msgSend(v20, "isEqualToString:", CFSTR("user")) & 1) == 0
        && (objc_msgSend(v20, "isEqualToString:", CFSTR("author")) & 1) == 0)
      {
        WebKit::toErrorString(0, CFSTR("cssOrigin"), CFSTR("it must specify either 'author' or 'user'"), v21);
        *a3 = (id)objc_claimAutoreleasedReturnValue();

LABEL_43:
        goto LABEL_44;
      }

      hasValidExecutionWorld = WebKit::WebExtensionAPIScripting::hasValidExecutionWorld(v7, a3);
      if (!(_DWORD)hasValidExecutionWorld)
        goto LABEL_46;
    }
    v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    hasValidExecutionWorld = 1;
    if (v5)
      continue;
    break;
  }
LABEL_46:

LABEL_47:
  return hasValidExecutionWorld;
}

void sub_1976D72D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::parseRegisteredContentScripts(void *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  BOOL v28;
  void *v29;
  void *v30;
  __int16 v31;
  void *v32;
  BOOL v33;
  void *v34;
  void *v35;
  __int16 v36;
  void *v37;
  void *v38;
  __int16 v39;
  void *v40;
  void *v41;
  __int16 v42;
  unsigned int v43;
  void *v44;
  WTF::StringImpl *v45;
  id obj;
  WTF::StringImpl *v47[2];
  _BYTE v48[16];
  char v49;
  _BYTE v50[16];
  char v51;
  WTF::StringImpl *v52;
  __int16 v53;
  _BYTE v54[16];
  char v55;
  _BYTE v56[16];
  char v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  obj = a1;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v63, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v60;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v60 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * i);
        v48[0] = 0;
        v49 = 0;
        v50[0] = 0;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v54[0] = 0;
        v55 = 0;
        v56[0] = 0;
        v57 = 0;
        v58 = 0;
        objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("id"));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        MEMORY[0x19AEABCC8](v47, v9);
        v11 = v47[0];
        v47[0] = 0;
        v12 = v52;
        v52 = v11;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::destroy(v12, v10);
            v14 = v47[0];
            v47[0] = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v13);
              else
                *(_DWORD *)v14 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v12 -= 2;
            v47[0] = 0;
          }
        }

        objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("css"));
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v15;
        if (v15)
        {
          WTF::makeVector<WTF::String>(v15, (uint64_t)v47);
          std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v48, v47);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v17);
        }

        objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("js"));
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = v18;
        if (v18)
        {
          WTF::makeVector<WTF::String>(v18, (uint64_t)v47);
          std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v50, v47);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v20);
        }

        objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("matches"));
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = v21;
        if (v21)
        {
          WTF::makeVector<WTF::String>(v21, (uint64_t)v47);
          std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v56, v47);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v23);
        }

        objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("excludeMatches"));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = v24;
        if (v24)
        {
          WTF::makeVector<WTF::String>(v24, (uint64_t)v47);
          std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)v54, v47);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v26);
        }

        if (a2 == 1
          || (objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("allFrames")),
              v27 = (void *)objc_claimAutoreleasedReturnValue(),
              v28 = v27 == 0,
              v27,
              !v28))
        {
          objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("allFrames"));
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          WTF::dynamic_objc_cast<NSNumber>(v29);
          v30 = (void *)objc_claimAutoreleasedReturnValue();

          v31 = v30 ? objc_msgSend(v30, "BOOLValue") : 0;
          LOWORD(v58) = v31 | 0x100;
          if (a2 == 1)
            goto LABEL_28;
        }
        objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("persistAcrossSessions"));
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = v32 == 0;

        if (!v33)
        {
LABEL_28:
          objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("persistAcrossSessions"));
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          WTF::dynamic_objc_cast<NSNumber>(v34);
          v35 = (void *)objc_claimAutoreleasedReturnValue();

          if (v35)
            v36 = objc_msgSend(v35, "BOOLValue");
          else
            v36 = 1;

          WORD1(v58) = v36 | 0x100;
        }
        objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("world"));
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = v37;
        if (v37)
        {
          v39 = objc_msgSend(v37, "isEqualToString:", CFSTR("MAIN")) ^ 1 | 0x100;
        }
        else
        {
          if (a2 != 1)
            goto LABEL_37;
          v39 = 257;
        }
        WORD2(v58) = v39;
LABEL_37:

        objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("runAt"));
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = v40;
        if (v40)
        {
          if ((objc_msgSend(v40, "isEqualToString:", CFSTR("document_end")) & 1) != 0)
          {
            v42 = 258;
          }
          else if (objc_msgSend(v41, "isEqualToString:", CFSTR("document_idle")))
          {
            v42 = 256;
          }
          else
          {
            v42 = 257;
          }
        }
        else
        {
          if (a2 != 1)
            goto LABEL_46;
          v42 = 256;
        }
        v53 = v42;
LABEL_46:

        v43 = *(_DWORD *)(a3 + 12);
        if (v43 == *(_DWORD *)(a3 + 8))
        {
          WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionRegisteredScriptParameters&>(a3, (unint64_t)v48);
        }
        else
        {
          WebKit::WebExtensionRegisteredScriptParameters::WebExtensionRegisteredScriptParameters(*(_QWORD *)a3 + 120 * v43, (uint64_t)v48);
          ++*(_DWORD *)(a3 + 12);
        }
        if (v57)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v44);
        if (v55)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v54, v44);
        v45 = v52;
        v52 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v44);
          else
            *(_DWORD *)v45 -= 2;
        }
        if (v51)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v50, v44);
        if (v49)
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v44);
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v63, 16);
    }
    while (v5);
  }

}

void sub_1976D7904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27)
{

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::getRegisteredContentScripts(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  _BYTE v20[16];
  _QWORD v21[2];
  IPC::Encoder *v22;

  v7 = a2;
  if (WebKit::WebExtensionAPIScripting::validateFilter(v7, a4))
  {
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("ids"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::makeVector<WTF::String>(v8, (uint64_t)v20);

    {
      v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v9);
    }
    ++*(_DWORD *)(a1 + 48);
    v10 = *a3;
    *a3 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 1653;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v22 = (IPC::Encoder *)v12;
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v12, (uint64_t)v20);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = &off_1E34F5D80;
    v13[1] = a1;
    v13[2] = v10;
    v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v21[0] = v13;
    v21[1] = v14;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v9 + 2) + 40))((_QWORD *)v9 + 2, &v22, v21, 0);
    v16 = v21[0];
    v21[0] = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v18, v19);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v15);
  }

}

void sub_1976D7C14(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  void *v14;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;

  v16 = a12;
  a12 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = a14;
  a14 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, a2);
    WTF::fastFree(v18, v19);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);

  _Unwind_Resume(a1);
}

BOOL WebKit::WebExtensionAPIScripting::validateFilter(void *a1, _QWORD *a2)
{
  id v3;
  char *v4;
  _BOOL8 v5;
  void *v7;
  uint64_t v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = &_MergedGlobals_106;
  if ((byte_1ECE730E8 & 1) == 0)
  {
    v9 = CFSTR("ids");
    v8 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v8, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
    qword_1ECE73130 = objc_claimAutoreleasedReturnValue();

    byte_1ECE730E8 = 1;
    v4 = &_MergedGlobals_106;
  }
  v5 = WebKit::validateDictionary(v3, CFSTR("filter"), 0, *((void **)v4 + 38), a2);

  return v5;
}

void sub_1976D7E28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::updateContentScripts(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  _QWORD v20[2];
  _QWORD v21[2];
  IPC::Encoder *v22;

  v7 = a2;
  objc_opt_class();
  WTF::dynamic_objc_cast<NSArray>(v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((WebKit::WebExtensionAPIScripting::validateRegisteredScripts(v8, 0, a4) & 1) != 0)
  {
    v20[0] = 0;
    v20[1] = 0;
    WebKit::WebExtensionAPIScripting::parseRegisteredContentScripts(v8, 0, (uint64_t)v20);
    {
      v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v9);
    }
    ++*(_DWORD *)(a1 + 48);
    v10 = *a3;
    *a3 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 1658;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v22 = (IPC::Encoder *)v12;
    IPC::VectorArgumentCoder<false,WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v12, (uint64_t)v20);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = &off_1E34F5DC8;
    v13[1] = a1;
    v13[2] = v10;
    v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v21[0] = v13;
    v21[1] = v14;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v9 + 2) + 40))((_QWORD *)v9 + 2, &v22, v21, 0);
    v16 = v21[0];
    v21[0] = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v18, v19);
    }
    WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v15);
  }

}

void sub_1976D7FFC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  void *v14;
  void *v15;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;

  v17 = a12;
  a12 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = a14;
  a14 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, a2);
    WTF::fastFree(v19, v20);
  }
  WTF::Vector<WebKit::WebExtensionRegisteredScriptParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);

  _Unwind_Resume(a1);
}

void WebKit::WebExtensionAPIScripting::unregisterContentScripts(uint64_t a1, void *a2, uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  WebKit::WebProcess *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  _BYTE v20[16];
  _QWORD v21[2];
  IPC::Encoder *v22;

  v7 = a2;
  if (WebKit::WebExtensionAPIScripting::validateFilter(v7, a4))
  {
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("ids"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    WTF::makeVector<WTF::String>(v8, (uint64_t)v20);

    {
      v9 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)WebKit::WebProcess::WebProcess(v9);
    }
    ++*(_DWORD *)(a1 + 48);
    v10 = *a3;
    *a3 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    v12 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v12 = 1657;
    *(_QWORD *)(v12 + 8) = v11;
    *(_QWORD *)(v12 + 528) = v12 + 16;
    *(_QWORD *)(v12 + 536) = v12 + 16;
    *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v12 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
    v22 = (IPC::Encoder *)v12;
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v12, (uint64_t)v20);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = &off_1E34F5DF0;
    v13[1] = a1;
    v13[2] = v10;
    v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v21[0] = v13;
    v21[1] = v14;
    (*(void (**)(_QWORD *, IPC::Encoder **, _QWORD *, _QWORD))(*((_QWORD *)v9 + 2) + 40))((_QWORD *)v9 + 2, &v22, v21, 0);
    v16 = v21[0];
    v21[0] = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v15);
      WTF::fastFree(v18, v19);
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v15);
  }

}

void sub_1976D829C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  void *v14;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;

  v16 = a12;
  a12 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = a14;
  a14 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, a2);
    WTF::fastFree(v18, v19);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a10, a2);

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIScripting::validateTarget(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  BOOL v6;
  NSString *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  NSString *v14;
  long double v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v21;
  double v22;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  long double __y;
  _BYTE v30[128];
  uint64_t v31;
  _QWORD v32[3];
  _QWORD v33[3];
  _QWORD v34[3];

  v34[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if ((byte_1ECE730E2 & 1) == 0)
  {
    v34[0] = CFSTR("tabId");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v34, 1);
    qword_1ECE73100 = objc_claimAutoreleasedReturnValue();
    byte_1ECE730E2 = 1;
  }
  if ((byte_1ECE730E3 & 1) == 0)
  {
    v32[0] = CFSTR("frameIds");
    v31 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v31, 1);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v33[0] = v24;
    v32[1] = CFSTR("tabId");
    v33[1] = objc_opt_class();
    v32[2] = CFSTR("allFrames");
    v33[2] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v33, v32, 3);
    qword_1ECE73108 = objc_claimAutoreleasedReturnValue();

    byte_1ECE730E3 = 1;
  }
  if (!WebKit::validateDictionary(v3, CFSTR("target"), (void *)qword_1ECE73100, (void *)qword_1ECE73108, a2))
  {
    v8 = 0;
    goto LABEL_44;
  }
  WebKit::objectForKey<NSNumber>(v3, (uint64_t)CFSTR("allFrames"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "BOOLValue") & 1) != 0)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("frameIds"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5 == 0;

    if (!v6)
    {
      WebKit::toErrorString(0, CFSTR("target"), CFSTR("it cannot specify both 'allFrames' and 'frameIds'"), v7);
      v8 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_44;
    }
  }
  else
  {

  }
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("frameIds"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v26;
    while (2)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v26 != v11)
          objc_enumerationMutation(v9);
        v13 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        objc_msgSend(v13, "doubleValue");
        v16 = v15;
        if (v15 == 0.0)
        {
          v17 = -256;
          v18 = 254;
        }
        else if (v15 == -1.0)
        {
          v17 = -256;
          v18 = 253;
        }
        else
        {
          v21 = (v15 >= 0.0 && ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
              || (unint64_t)(*(_QWORD *)&v15 - 1) <= 0xFFFFFFFFFFFFELL)
             && v15 < 1.84467441e19;
          if (!v21
            || ((v22 = modf(v15, &__y), v22 != 0.0) ? (v17 = 0) : (v17 = (unint64_t)v16 & 0xFFFFFFFFFFFFFF00),
                v22 != 0.0 ? (v18 = 0) : (v18 = (unint64_t)v16),
                v22 != 0.0))
          {
LABEL_42:
            WebKit::toErrorString(0, CFSTR("frameIds"), CFSTR("'%@' is not a frame identifier"), v14, v13);
            v8 = 0;
            *a2 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_43;
          }
        }
        if ((v17 | v18) == 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_42;
      }
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
      if (v10)
        continue;
      break;
    }
  }
  v8 = 1;
LABEL_43:

LABEL_44:
  return v8;
}

void sub_1976D8750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t WebKit::WebExtensionAPIScripting::hasValidExecutionWorld(void *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  NSString *v5;
  uint64_t v6;

  objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("world"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (!v3
    || (objc_msgSend(v3, "isEqualToString:", CFSTR("ISOLATED")) & 1) != 0
    || (objc_msgSend(v4, "isEqualToString:", CFSTR("MAIN")) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    WebKit::toErrorString(0, CFSTR("world"), CFSTR("it must specify either 'ISOLATED' or 'MAIN'"), v5);
    v6 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

void sub_1976D883C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::optional<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionFrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 16))
  {
    WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v3;
    LODWORD(v3) = a2[2];
    a2[2] = 0;
    *(_DWORD *)(a1 + 8) = v3;
    LODWORD(v3) = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 12) = v3;
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingExecuteScript,WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  WebKit::WebExtensionCallbackHandler *v2;
  uint64_t v3;

  *a1 = &off_1E34F5CC0;
  v2 = (WebKit::WebExtensionCallbackHandler *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 40) + 8))(v3 + 40);
    else
      --*(_DWORD *)(v3 + 48);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingExecuteScript,WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  WebKit::WebExtensionCallbackHandler *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34F5CC0;
  v3 = (WebKit::WebExtensionCallbackHandler *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebKit::WebExtensionCallbackHandler>::deref(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 48) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 40) + 8))(v4 + 40);
    else
      --*(_DWORD *)(v4 + 48);
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebExtensionContext::ScriptingExecuteScript,WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  _BYTE v3[16];
  int v4;
  char v5;
  char v6;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>(a2, v3);
    if (v5)
    {
      WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16), (uint64_t)v3);
      if (v5)
      {
        if (v4 != -1)
          ((void (*)(char *, _BYTE *))off_1E34F5CD8[v4])(&v6, v3);
      }
    }
    else
    {
      IPC::Connection::cancelReply<Messages::WebExtensionContext::ScriptingExecuteScript,WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::WebExtensionContext::ScriptingExecuteScript,WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(*(WebKit::WebExtensionCallbackHandler **)(a1 + 16));
  }
}

void sub_1976D8A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;

  if (a14)
  {
    if (a12 != -1)
      ((void (*)(uint64_t, char *))off_1E34F5CD8[a12])(v14 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void IPC::Connection::cancelReply<Messages::WebExtensionContext::ScriptingExecuteScript,WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0>(WebKit::WebExtensionCallbackHandler *a1)
{
  _QWORD v1[2];
  int v2;
  char v3;

  v1[0] = 0;
  v1[1] = 0;
  v2 = 0;
  WebKit::WebExtensionAPIScripting::executeScript(NSDictionary *,WTF::Ref<WebKit::WebExtensionCallbackHandler,WTF::RawPtrTraits<WebKit::WebExtensionCallbackHandler>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionCallbackHandler>> &&,NSString * {__autoreleasing}*)::$_0::operator()(a1, (uint64_t)v1);
  if (v2 != -1)
    ((void (*)(char *, _QWORD *))off_1E34F5CD8[v2])(&v3, v1);
}

void sub_1976D8AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;

  if (a11 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34F5CD8[a11])(v11 - 17, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1976D8B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 24))
  {
    v15 = *(unsigned int *)(v13 + 16);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))off_1E34F5CD8[v15])(&a13, v13);
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  _BYTE v4[16];
  int v5;
  char v6;
  char v7;

  result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>(a1, (uint64_t)v4);
  if (v6)
  {
    result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a2, (uint64_t)v4);
    a2[24] = 1;
    if (v6)
    {
      if (v5 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E34F5CD8[v5])(&v7, v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return result;
}

void sub_1976D8BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, char a14)
{
  uint64_t v14;

  if (a14)
  {
    if (a12 != -1)
      ((void (*)(uint64_t, char *))off_1E34F5CD8[a12])(v14 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void sub_1976D8C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  if (*(_BYTE *)(v13 + 24))
  {
    v15 = *(unsigned int *)(v13 + 16);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, uint64_t))off_1E34F5CD8[v15])(&a13, v13);
    *(_DWORD *)(v13 + 16) = -1;
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  char *v4;
  unint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t result;
  void *v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v3 = a1[1];
  v4 = (char *)*a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      v17 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        a1 = v17;
        v13 = *v17;
        v12 = v17[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_13;
  }
  v6 = &v4[v5];
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v12 = v3;
    v13 = 0;
LABEL_13:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      v16 = a1;
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        a1 = v16;
        v4 = (char *)*v16;
        v3 = v16[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_14;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4, (uint64_t)&v18);
      v10 = v20;
      if (v20)
      {
        *(_QWORD *)a2 = v18;
        v11 = v19;
        v18 = 0;
        v19 = 0;
        *(_QWORD *)(a2 + 8) = v11;
        *(_DWORD *)(a2 + 16) = 0;
        result = WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v9);
        v10 = 1;
LABEL_10:
        *(_BYTE *)(a2 + 24) = v10;
        return result;
      }
    }
    else
    {
      result = (uint64_t)IPC::Decoder::decode<WTF::String>(a1, &v18);
      v10 = v19;
      if ((_BYTE)v19)
      {
        *(_QWORD *)a2 = v18;
        v10 = 1;
        *(_DWORD *)(a2 + 16) = 1;
        goto LABEL_10;
      }
    }
    *(_BYTE *)a2 = 0;
    goto LABEL_10;
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v3)
      result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 16))(result, v4);
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  result = IPC::VectorArgumentCoder<false,WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(_BYTE *)(a3 + 16))
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v6);
  }
  return result;
}

void sub_1976D8EA8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16))
    WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::VectorArgumentCoder<false,WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unsigned int v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  WTF *v40;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    v21 = 0;
    v22 = 0;
    *a1 = 0;
    a1[1] = 0;
    v23 = a1[3];
    if (v23)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v23 + 16))(v23, v6, v5);
        v22 = *a1;
        v21 = a1[1];
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
    }
    goto LABEL_24;
  }
  v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    v10 = *v9;
    v39 = 0;
    v40 = 0;
    if (v10 >= 0x5555)
    {
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebExtensionScriptInjectionResultParameters>(a1, (uint64_t)&v33);
        if (!v38)
          break;
        v25 = HIDWORD(v40);
        if (HIDWORD(v40) == (_DWORD)v40)
        {
          WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionScriptInjectionResultParameters>((uint64_t)&v39, (unint64_t)&v33);
        }
        else
        {
          v26 = v39;
          v27 = (_BYTE *)(v39 + 48 * HIDWORD(v40));
          *v27 = 0;
          v27[8] = 0;
          if (v34)
          {
            v28 = v33;
            v33 = 0;
            *(_QWORD *)v27 = v28;
            v27[8] = 1;
          }
          v29 = v26 + 48 * v25;
          *(_BYTE *)(v29 + 16) = 0;
          v30 = v29 + 16;
          *(_BYTE *)(v30 + 8) = 0;
          if (v36)
          {
            v31 = v35;
            v35 = 0;
            *(_QWORD *)v30 = v31;
            *(_BYTE *)(v30 + 8) = 1;
          }
          *(_OWORD *)(v26 + 48 * v25 + 32) = v37;
          ++HIDWORD(v40);
        }
        std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionResultParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v11);
        if (!--v10)
        {
          WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v39, HIDWORD(v40));
          *(_QWORD *)a3 = v39;
          v32 = v40;
          v39 = 0;
          v40 = 0;
          *(_QWORD *)(a3 + 8) = v32;
          goto LABEL_22;
        }
      }
    }
    else
    {
      if (!v10)
      {
        v19 = 0;
        v20 = 0;
LABEL_21:
        v39 = 0;
        v40 = 0;
        *(_QWORD *)a3 = v19;
        *(_QWORD *)(a3 + 8) = v20;
LABEL_22:
        *(_BYTE *)(a3 + 16) = 1;
        return WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, a2);
      }
      LODWORD(v40) = 48 * (int)v10 / 0x30u;
      v39 = WTF::fastMalloc((WTF *)(48 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebKit::WebExtensionScriptInjectionResultParameters>(a1, (uint64_t)&v33);
        if (!v38)
          break;
        v12 = HIDWORD(v40);
        if (HIDWORD(v40) == (_DWORD)v40)
        {
          WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::WebExtensionScriptInjectionResultParameters>((uint64_t)&v39, (unint64_t)&v33);
        }
        else
        {
          v13 = v39;
          v14 = (_BYTE *)(v39 + 48 * HIDWORD(v40));
          *v14 = 0;
          v14[8] = 0;
          if (v34)
          {
            v15 = v33;
            v33 = 0;
            *(_QWORD *)v14 = v15;
            v14[8] = 1;
          }
          v16 = v13 + 48 * v12;
          *(_BYTE *)(v16 + 16) = 0;
          v17 = v16 + 16;
          *(_BYTE *)(v17 + 8) = 0;
          if (v36)
          {
            v18 = v35;
            v35 = 0;
            *(_QWORD *)v17 = v18;
            *(_BYTE *)(v17 + 8) = 1;
          }
          *(_OWORD *)(v13 + 48 * v12 + 32) = v37;
          ++HIDWORD(v40);
        }
        std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionResultParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v11);
        if (!--v10)
        {
          v19 = v39;
          v20 = v40;
          goto LABEL_21;
        }
      }
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebKit::WebExtensionScriptInjectionResultParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v11);
    return WTF::Vector<WebKit::WebExtensionScriptInjectionResultParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, a2);
  }
  v21 = v5;
  v22 = 0;
LABEL_24:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v21)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v22);
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

