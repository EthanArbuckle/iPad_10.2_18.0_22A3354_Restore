@implementation WKContentView

- (void)_installVisibilityPropagationViews
{
  id v3;

  v3 = -[WKContentView _createVisibilityPropagationView](self, "_createVisibilityPropagationView");
  if (v3)
  {
    -[WKContentView addSubview:](self, "addSubview:", v3);
  }
  else
  {
    -[WKContentView _setupVisibilityPropagationForWebProcess](self, "_setupVisibilityPropagationForWebProcess");
    -[WKContentView _setupVisibilityPropagationForGPUProcess](self, "_setupVisibilityPropagationForGPUProcess");
  }
}

- (id)_createVisibilityPropagationView
{
  void *v3;
  void *v4;
  void *m_ptr;
  WKVisibilityPropagationView *v6;

  if (!self->_inspectorIndicationView.m_ptr)
  {
    v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
    v4 = v3;
    if (v3)
      CFRetain(v3);
    m_ptr = self->_inspectorIndicationView.m_ptr;
    self->_inspectorIndicationView.m_ptr = v4;
    if (m_ptr)
      CFRelease(m_ptr);
  }
  v6 = objc_alloc_init(WKVisibilityPropagationView);
  objc_msgSend(self->_inspectorIndicationView.m_ptr, "addObject:", v6);
  -[WKContentView _setupVisibilityPropagationForWebProcess](self, "_setupVisibilityPropagationForWebProcess");
  -[WKContentView _setupVisibilityPropagationForGPUProcess](self, "_setupVisibilityPropagationForGPUProcess");
  return (id)(id)CFMakeCollectable(v6);
}

- (void)_setupVisibilityPropagationForGPUProcess
{
  uint64_t v3;
  void *m_ptr;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*((_QWORD *)self->_page.m_ptr + 6) + 24))
       + 22);
  if (v3)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    m_ptr = self->_inspectorIndicationView.m_ptr;
    v5 = objc_msgSend(m_ptr, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v10;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v10 != v7)
            objc_enumerationMutation(m_ptr);
          objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v8++), "propagateVisibilityToProcess:", v3);
        }
        while (v6 != v8);
        v6 = objc_msgSend(m_ptr, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v6);
    }
  }
}

- (void)_setupVisibilityPropagationForWebProcess
{
  WebPageProxy *m_ptr;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  m_ptr = self->_page.m_ptr;
  if (!*((_BYTE *)m_ptr + 729))
  {
    if (*((_BYTE *)m_ptr + 728))
    {
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v4 = self->_inspectorIndicationView.m_ptr;
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v10;
        do
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v10 != v7)
              objc_enumerationMutation(v4);
            objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * i), "propagateVisibilityToProcess:", *((_QWORD *)self->_page.m_ptr + 26));
          }
          v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        }
        while (v6);
      }
    }
  }
}

- (void)_cancelInteraction
{
  BYTE2(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
  objc_msgSend(self->_tapHighlightView.m_ptr, "removeFromSuperview");
}

- (BOOL)isEditable
{
  return (BOOL)self->_dataListTextSuggestionsInputView.m_ptr;
}

- (void)_didScroll
{
  -[WKContentView _updateFrameOfContainerForContextMenuHintPreviewsIfNeeded](self, "_updateFrameOfContainerForContextMenuHintPreviewsIfNeeded");
  -[WKContentView _cancelLongPressGestureRecognizer](self, "_cancelLongPressGestureRecognizer");
  -[WKContentView _cancelInteraction](self, "_cancelInteraction");
}

- (void)_updateFrameOfContainerForContextMenuHintPreviewsIfNeeded
{
  double v3;
  double v4;
  double v5;
  double v6;

  if (self->_contextMenuHintContainerView.m_ptr)
  {
    objc_msgSend(objc_loadWeak(&self->_scrollViewForTargetedPreview.m_weakReference), "convertPoint:toView:", objc_msgSend(self->_contextMenuHintContainerView.m_ptr, "superview"), *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
    v4 = v3;
    v6 = v5;
    objc_msgSend(self->_contextMenuHintContainerView.m_ptr, "frame");
    objc_msgSend(self->_contextMenuHintContainerView.m_ptr, "setFrame:", v4 - self->_scrollViewForTargetedPreviewInitialOffset.x, v6 - self->_scrollViewForTargetedPreviewInitialOffset.y);
  }
}

- (void)_cancelLongPressGestureRecognizer
{
  objc_msgSend(self->_highlightLongPressGestureRecognizer.m_ptr, "cancel");
}

- (void)page
{
  return self->_page.m_ptr;
}

- (id).cxx_construct
{
  FrameInfoData *p_frameInfoForFileUploadPanel;
  _OWORD *v4;
  uint64_t i;
  _QWORD *v6;

  self->_page.m_ptr = 0;
  self->_webView.m_weakReference = 0;
  self->_touchStartDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr = 0;
  self->_touchStartDeferringGestureRecognizerForDelayedResettableGestures.m_ptr = 0;
  self->_touchStartDeferringGestureRecognizerForSyntheticTapGestures.m_ptr = 0;
  self->_touchEndDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr = 0;
  self->_touchEndDeferringGestureRecognizerForDelayedResettableGestures.m_ptr = 0;
  self->_touchEndDeferringGestureRecognizerForSyntheticTapGestures.m_ptr = 0;
  self->_touchMoveDeferringGestureRecognizer.m_ptr = 0;
  self->_failedTouchStartDeferringGestures.var0.__null_state_ = 0;
  self->_failedTouchStartDeferringGestures.__engaged_ = 0;
  self->_imageAnalysisDeferringGestureRecognizer.m_ptr = 0;
  self->_gestureRecognizerConsistencyEnforcer.__ptr_.__value_ = 0;
  self->_touchEventGestureRecognizer.m_ptr = 0;
  self->_singleTapGestureRecognizer.m_ptr = 0;
  self->_highlightLongPressGestureRecognizer.m_ptr = 0;
  self->_longPressGestureRecognizer.m_ptr = 0;
  self->_doubleTapGestureRecognizer.m_ptr = 0;
  self->_nonBlockingDoubleTapGestureRecognizer.m_ptr = 0;
  self->_doubleTapGestureRecognizerForDoubleClick.m_ptr = 0;
  self->_twoFingerDoubleTapGestureRecognizer.m_ptr = 0;
  self->_twoFingerSingleTapGestureRecognizer.m_ptr = 0;
  self->_inspectorNodeSearchGestureRecognizer.m_ptr = 0;
  self->_touchActionGestureRecognizer.m_ptr = 0;
  self->_touchActionLeftSwipeGestureRecognizer.m_ptr = 0;
  self->_touchActionRightSwipeGestureRecognizer.m_ptr = 0;
  self->_touchActionUpSwipeGestureRecognizer.m_ptr = 0;
  self->_touchActionDownSwipeGestureRecognizer.m_ptr = 0;
  self->_mouseInteraction.m_ptr = 0;
  self->_scribbleInteraction.m_ptr = 0;
  self->_pointerInteraction.m_ptr = 0;
  self->_lastPointerRegion.m_ptr = 0;
  self->_textInteractionWrapper.m_ptr = 0;
  self->_suppressSelectionAssistantReasons.m_storage = 0;
  self->_legacyTextInputTraits.m_ptr = 0;
  self->_extendedTextInputTraits.m_ptr = 0;
  self->_formAccessoryView.m_ptr = 0;
  self->_tapHighlightView.m_ptr = 0;
  self->_interactionViewsContainerView.m_ptr = 0;
  self->_contextMenuHintContainerView.m_ptr = 0;
  self->_scrollViewForTargetedPreview.m_weakReference = 0;
  self->_dragPreviewContainerView.m_ptr = 0;
  self->_dropPreviewContainerView.m_ptr = 0;
  self->_markedText.m_ptr = 0;
  self->_actionSheetAssistant.m_ptr = 0;
  self->_airPlayRoutePicker.m_ptr = 0;
  self->_formInputSession.m_ptr = 0;
  self->_fileUploadPanel.m_ptr = 0;
  p_frameInfoForFileUploadPanel = &self->_frameInfoForFileUploadPanel;
  *(_WORD *)&self->_frameInfoForFileUploadPanel.isMainFrame = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)&self->_frameInfoForFileUploadPanel.request);
  p_frameInfoForFileUploadPanel->securityOrigin.m_data.__impl_.__index = 0;
  p_frameInfoForFileUploadPanel->securityOrigin.m_data.__impl_.__data.__tail.__head.__value.m_processIdentifier.m_identifier = 0;
  *((_QWORD *)&p_frameInfoForFileUploadPanel->securityOrigin.m_data.__impl_.__data.__tail + 2) = 0;
  p_frameInfoForFileUploadPanel->securityOrigin.m_data.__impl_.__data.__tail.__head.__value.m_object.m_identifier = 0;
  p_frameInfoForFileUploadPanel->parentFrameID.__engaged_ = 0;
  *(_WORD *)&p_frameInfoForFileUploadPanel->isFocused = 0;
  p_frameInfoForFileUploadPanel->parentFrameID.var0.__null_state_ = 0;
  p_frameInfoForFileUploadPanel->frameID.m_object.m_identifier = 0;
  p_frameInfoForFileUploadPanel->frameID.m_processIdentifier.m_identifier = 0;
  p_frameInfoForFileUploadPanel->frameName.m_impl.m_ptr = 0;
  self->_shareSheet.m_ptr = 0;
  self->_contactPicker.m_ptr = 0;
  self->_previewGestureRecognizer.m_ptr = 0;
  self->_previewSecondaryGestureRecognizer.m_ptr = 0;
  self->_focusStateStack.m_buffer = 0;
  *(_QWORD *)&self->_focusStateStack.m_capacity = 0;
  self->_contextMenuElementInfo.m_ptr = 0;
  self->_contextMenuLegacyPreviewController.m_ptr = 0;
  self->_contextMenuLegacyMenu.m_ptr = 0;
  self->_previewItemController.m_ptr = 0;
  self->_textIndicator.m_ptr = 0;
  self->_textIndicatorLayer.m_ptr = 0;
  self->_contextMenuInteractionTargetedPreview.m_ptr = 0;
  self->_textAnimationManager.m_ptr = 0;
  self->_smartMagnificationController.__ptr_.__value_ = 0;
  self->_inputDelegate.m_weakReference = 0;
  self->_latestTapID.m_identifier = 0;
  self->_tapHighlightInformation.nodeHasBuiltInClickHandling = 0;
  *(_OWORD *)&self->_tapHighlightInformation.color.m_colorAndFlags = 0u;
  *(_OWORD *)&self->_tapHighlightInformation.quads.m_capacity = 0u;
  *(_OWORD *)&self->_tapHighlightInformation.topRightRadius.m_width = 0u;
  self->_tapHighlightInformation.bottomRightRadius = 0;
  *(_OWORD *)&self->_lastAutocorrectionContext.contextBefore.m_impl.m_ptr = 0u;
  *(_OWORD *)&self->_lastAutocorrectionContext.selectedText.m_impl.m_ptr = 0u;
  self->_lastAutocorrectionContext.selectedRangeInMarkedText = (EditingRange)xmmword_1978CEF10;
  self->_autocorrectionData.font.m_ptr = 0;
  *(int *)((char *)&self->_positionInformation.request.point.m_y + 3) = 0;
  self->_positionInformation.request.point = 0;
  *(_DWORD *)&self->_positionInformation.request.includeHasDoubleClickHandler = 1;
  self->_positionInformation.canBeValid = 1;
  *(_DWORD *)&self->_positionInformation.nodeAtPositionHasDoubleClickHandler.var0.__null_state_ = 0;
  *(_WORD *)&self->_positionInformation.prefersDraggingOverTextSelection = 0;
  self->_positionInformation.touchCalloutEnabled = 1;
  self->_positionInformation.adjustedPointForNodeRespondingToClickEvents = 0;
  *(_QWORD *)&self->_positionInformation.isLink = 0;
  self->_positionInformation.isContentEditable = 0;
  *(unint64_t *)((char *)&self->_positionInformation.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier
                      + 6) = 0;
  self->_positionInformation.containerScrollingNodeID.m_value.m_object.m_identifier = 0;
  self->_positionInformation.containerScrollingNodeID.m_value.m_processIdentifier.m_identifier = 0;
  WTF::URL::URL((WTF::URL *)&self->_positionInformation.url);
  WTF::URL::URL((WTF::URL *)&self->_positionInformation.imageURL);
  self->_positionInformation.cursor.var0.__null_state_ = 0;
  self->_positionInformation.cursor.__engaged_ = 0;
  self->_positionInformation.linkIndicator.selectionRectInRootViewCoordinates = 0u;
  self->_positionInformation.linkIndicator.textBoundingRectInRootViewCoordinates = 0u;
  self->_positionInformation.linkIndicator.contentImageWithoutSelectionRectInRootViewCoordinates = 0u;
  self->_positionInformation.linkIndicator.textRectsInBoundingRectCoordinates = 0u;
  *(_OWORD *)&self->_positionInformation.imageMIMEType.m_impl.m_ptr = 0u;
  *(_OWORD *)&self->_positionInformation.idAttribute.m_impl.m_ptr = 0u;
  *(_OWORD *)&self->_positionInformation.bounds.m_size.m_width = 0u;
  *(_OWORD *)&self->_positionInformation.textBefore.m_impl.m_ptr = 0u;
  *(_OWORD *)&self->_positionInformation.caretLength = 0u;
  self->_positionInformation.lineCaretExtent.m_size.m_height = 0.0;
  self->_positionInformation.linkIndicator.contentImageScaleFactor = 1.0;
  self->_positionInformation.linkIndicator.options.m_storage = 0;
  *(_OWORD *)&self->_positionInformation.linkIndicator.contentImageWithHighlight.m_ptr = 0u;
  *(_OWORD *)&self->_positionInformation.linkIndicator.contentImage.m_ptr = 0u;
  self->_positionInformation.linkIndicator.presentationTransition = 0;
  *((_BYTE *)&self->_positionInformation.elementContext.var0.var2 + 8) = 0;
  self->_anon_7d0[32] = 0;
  self->_anon_7d0[48] = 0;
  self->_anon_7d0[128] = 0;
  *(_OWORD *)&self->_anon_7d0[144] = 0u;
  *(_OWORD *)&self->_positionInformation.dataDetectorIdentifier.m_impl.m_ptr = 0u;
  self->_positionInformation.dataDetectorBounds = 0u;
  self->_positionInformationLinkIndicator.var0.__null_state_ = 0;
  self->_positionInformationLinkIndicator.__engaged_ = 0;
  WebKit::FocusedElementInformation::FocusedElementInformation((WebKit::FocusedElementInformation *)&self->_focusedElementInformation);
  self->_inputPeripheral.m_ptr = 0;
  self->_keyWebEventHandlers.m_buffer = (KeyEventAndCompletionBlock *)self->_keyWebEventHandlers.m_inlineBuffer;
  *(_QWORD *)&self->_keyWebEventHandlers.m_capacity = 1;
  *(_QWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[32] = 0;
  WebKit::WKSelectionDrawingInfo::WKSelectionDrawingInfo((WebKit::WKSelectionDrawingInfo *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[40]);
  self->_lastSelectionDrawingInfo.selectionGeometries.m_buffer = 0;
  LOBYTE(self->_lastSelectionDrawingInfo.selectionGeometries.m_capacity) = 0;
  LOBYTE(self->_lastSelectionDrawingInfo.selectionClipRect.m_size.m_width) = 0;
  *(_QWORD *)&self->_lastOutstandingPositionInformationRequest.var0.__null_state_ = 0;
  *(_QWORD *)&self->_lastOutstandingPositionInformationRequest.var0.__val_.includeSnapshot = 0;
  self->_lastOutstandingPositionInformationRequest.__engaged_ = 0;
  self->_positionInformationCallbackDepth = 0;
  self->_pendingPositionInformationHandlers.m_buffer = 0;
  *(_QWORD *)&self->_pendingPositionInformationHandlers.m_capacity = 0;
  *(_QWORD *)&self->_inputViewUpdateDeferralSources.m_storage = 0;
  self->_keyboardScrollingAnimator.m_ptr = 0;
  self->_actionsToPerformAfterEditorStateUpdate.m_buffer = 0;
  *(_QWORD *)&self->_actionsToPerformAfterEditorStateUpdate.m_capacity = 0;
  *(_WORD *)&self->_isWaitingOnPositionInformation = 0;
  *(_WORD *)&self->_resigningFirstResponder = 0;
  *(_QWORD *)&self->_hasSetUpInteractions = 0;
  LOWORD(self->_ignoreSelectionCommandFadeCount) = 0;
  self->_activeTextInteractionCount = 0;
  self->_suppressNonEditableSingleTapTextInteractionCount = 0;
  self->_domPasteRequestHandler.m_function.m_callableWrapper.__ptr_.__value_ = 0;
  self->_domPasteRequestCategory.var0.__null_state_ = 0;
  *((_BYTE *)&self->_domPasteRequestCategory + 4) = 0;
  v4 = (_OWORD *)MEMORY[0x1E0C9D538];
  *(_OWORD *)&self->_pendingRunModalJavaScriptDialogCallback.m_function.m_callableWrapper.__ptr_.__value_ = *MEMORY[0x1E0C9D538];
  *(_OWORD *)&self->_lastInsertedCharacterToOverrideCharacterBeforeSelection.var0.__null_state_ = *v4;
  LOWORD(self->_dragDropInteractionState.m_lastGlobalPosition.x) = 0;
  LOBYTE(self->_dragDropInteractionState.m_stagedDragSource.var0.__val_.linkURL.m_pathEnd) = 0;
  *(_OWORD *)&self->_dragDropInteractionState.m_lastGlobalPosition.y = 0u;
  *(_OWORD *)&self->_dragDropInteractionState.m_adjustedPositionForDragEnd.y = 0u;
  *(_OWORD *)&self->_dragDropInteractionState.m_isPerformingDrop = 0u;
  *(_OWORD *)&self->_dragDropInteractionState.m_stagedDragSource.var0.__val_.possiblyNeedsDragPreviewUpdate = 0u;
  *(_OWORD *)&self->_dragDropInteractionState.m_stagedDragSource.__engaged_ = 0u;
  *(_QWORD *)&self->_dragDropInteractionState.m_activeDragSources.m_capacity = 0;
  self->_dragDropInteractionState.m_defaultDropPreviews.m_impl.var0.m_table = 0;
  *(_QWORD *)self->_anon_dc8 = 0;
  self->_dragInteraction.m_ptr = 0;
  self->_dropInteraction.m_ptr = 0;
  *(_QWORD *)&self->_isAnimatingDragCancel = 0;
  self->_visibleContentViewSnapshot.m_ptr = 0;
  self->_unselectedContentSnapshot.m_ptr = 0;
  self->_editDropCaretView.m_ptr = 0;
  LOBYTE(self->_actionToPerformAfterReceivingEditDragSnapshot.m_block) = 0;
  LOBYTE(self->_editDropTextCursorView.m_ptr) = 0;
  LOBYTE(self->_editDropCaretAnimator.m_ptr) = 0;
  self->_anon_e60[0] = 0;
  *(_QWORD *)&self->_anon_e60[16] = 0;
  *(_QWORD *)&self->_anon_e60[24] = 0;
  *(_QWORD *)&self->_anon_e60[40] = 0;
  self->_actionsToPerformAfterPendingImageAnalysis.m_buffer = 0;
  *(_QWORD *)&self->_actionsToPerformAfterPendingImageAnalysis.m_capacity = 0;
  *(_QWORD *)&self->_isProceedingWithTextSelectionInImage = 0;
  self->_imageAnalyzer.m_ptr = 0;
  LOBYTE(self->_visualSearchPreviewImageBounds.origin.x) = 0;
  self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__null_state_ = 0;
  LOBYTE(self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.size.width) = 0;
  self->_dynamicImageAnalysisContextMenuState = 0;
  self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr = 0;
  self->_imageAnalysisContextMenuActionData.var0.__val_.machineReadableCodeMenu.m_ptr = 0;
  *(_QWORD *)&self->_imageAnalysisContextMenuActionData.__engaged_ = 0;
  *(_QWORD *)&self->_fullscreenVideoImageAnalysisRequestIdentifier = 0;
  LOBYTE(self->_imageAnalysisActionButtons.m_ptr) = 0;
  self->_anon_fa8[8] = 0;
  *(_QWORD *)&self->_anon_fa8[32] = 0;
  *(_QWORD *)&self->_anon_fa8[40] = 0;
  *(_QWORD *)&self->_anon_fa8[48] = 0;
  self->_asyncInputDelegate = 0;
  self->_pageClient.__ptr_.__value_ = 0;
  self->_browsingContextController.m_ptr = 0;
  self->_rootContentView.m_ptr = 0;
  self->_fixedClippingView.m_ptr = 0;
  self->_inspectorIndicationView.m_ptr = 0;
  self->_inspectorHighlightView.m_ptr = 0;
  self->_visibilityPropagationViewForWebProcess.m_ptr = 0;
  for (i = 16; i != 88; i += 24)
  {
    v6 = (void **)((char *)&self->_inspectorHighlightView.m_ptr + i);
    *v6 = 0;
    v6[1] = 0;
  }
  self->_historicalKinematicData.m_positionHistory[1].scale = 0.0;
  self->_historicalKinematicData.m_positionHistory[2].timestamp.m_value = 0.0;
  LOBYTE(self->_historicalKinematicData.m_positionHistory[2].position.m_x) = 0;
  self->_historicalKinematicData.m_positionHistory[2].scale = 0.0;
  self->_undoManager.m_ptr = 0;
  *(_QWORD *)&self->_pendingBackgroundPrintFormattersLock.m_byte.value.__a_.__a_value = 0;
  self->_pendingBackgroundPrintFormatters.m_ptr = 0;
  return self;
}

- (CGRect)_computeUnobscuredContentRectRespectingInputViewBounds:(CGRect)a3 inputViewBounds:(CGRect)a4
{
  double height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  float v15;
  double MinY;
  float v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGFloat rect;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect result;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  objc_msgSend((id)-[WKContentView window](self, "window"), "convertRect:toView:", self, a4.origin.x, a4.origin.y, a4.size.width, a4.size.height);
  v8 = v23.origin.x;
  v9 = v23.origin.y;
  v10 = v23.size.width;
  v11 = v23.size.height;
  if (CGRectGetHeight(v23) != 0.0)
  {
    v24.origin.x = x;
    v24.origin.y = y;
    v24.size.width = width;
    v24.size.height = height;
    rect = height;
    v12 = x;
    v13 = y;
    v14 = width;
    v15 = CGRectGetHeight(v24);
    v25.origin.x = v8;
    v25.origin.y = v9;
    v25.size.width = v10;
    v25.size.height = v11;
    MinY = CGRectGetMinY(v25);
    v26.origin.x = v12;
    v26.origin.y = v13;
    v26.size.width = v14;
    v26.size.height = rect;
    v17 = MinY - CGRectGetMinY(v26);
    if (v17 >= v15)
      v17 = v15;
    width = v14;
    y = v13;
    x = v12;
    height = v17;
  }
  v18 = x;
  v19 = y;
  v20 = width;
  v21 = height;
  result.size.height = v21;
  result.size.width = v20;
  result.origin.y = v19;
  result.origin.x = v18;
  return result;
}

- (BOOL)sizeChangedSinceLastVisibleContentRectUpdate
{
  return self->_printRenderingCallbackID.m_identifier;
}

- (void)setSizeChangedSinceLastVisibleContentRectUpdate:(BOOL)a3
{
  LOBYTE(self->_printRenderingCallbackID.m_identifier) = a3;
}

- (UIView)unscaledView
{
  return (UIView *)self->_interactionViewsContainerView.m_ptr;
}

- (UITextInputDelegate)inputDelegate
{
  return (UITextInputDelegate *)objc_loadWeak(&self->_inputDelegate.m_weakReference);
}

- (id)_commonInitializationWithProcessPool:(void *)a3 configuration:(void *)a4
{
  WebPageProxy *v5;
  WebPageProxy *m_ptr;
  WebPageProxy *v7;
  WebPageProxy *v8;
  WebCore *v9;
  UIScreen *v10;
  float v11;
  uint64_t v12;
  WebPageProxy *v13;
  id v14;
  WebPageProxy *v15;
  id v16;
  const void *v17;
  BETextInputDelegate *v18;
  BETextInputDelegate *asyncInputDelegate;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  objc_class *v25;
  objc_class *v26;
  objc_method *InstanceMethod;
  const char *TypeEncoding;
  WebPageProxy *v30;

  WebKit::WebProcessPool::createWebPage((uint64_t)a3, *(_QWORD *)&self->_anon_fa8[32], (API::PageConfiguration **)a4, (uint64_t *)&v30);
  v5 = v30;
  v30 = 0;
  m_ptr = self->_page.m_ptr;
  self->_page.m_ptr = v5;
  if (m_ptr)
  {
    CFRelease(*((CFTypeRef *)m_ptr + 1));
    v7 = v30;
    v30 = 0;
    if (v7)
      CFRelease(*((CFTypeRef *)v7 + 1));
  }
  WebKit::WebPageProxy::initializeWebPage((unsigned int *)self->_page.m_ptr);
  -[WKContentView _updateRuntimeProtocolConformanceIfNeeded](self, "_updateRuntimeProtocolConformanceIfNeeded");
  v8 = self->_page.m_ptr;
  v9 = (WebCore *)objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
  WebCore::screenScaleFactor(v9, v10);
  if (*((float *)v8 + 172) != v11)
  {
    *((float *)v8 + 172) = v11;
    v12 = *((_QWORD *)v8 + 23);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12);
  }
  WebKit::WebPageProxy::setUseFixedLayout((uint64_t)self->_page.m_ptr, 1);
  WebKit::WebPageProxy::setScreenIsBeingCaptured((uint64_t)self->_page.m_ptr, -[WKContentView screenIsBeingCaptured](self, "screenIsBeingCaptured"));
  WebKit::WebPageProxy::windowScreenDidChange((WebKit::WebPageProxy *)self->_page.m_ptr, ~*(_DWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 1896));
  v13 = self->_page.m_ptr;
  v14 = -[WKContentView webView](self, "webView");
  v15 = (WebPageProxy *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v15 = &off_1E34C72C8;
  *((_QWORD *)v15 + 1) = v14;
  *((_QWORD *)v15 + 2) = 0;
  v30 = v15;
  WebKit::WebPageProxy::setFullscreenClient((uint64_t)v13, (_QWORD **)&v30);
  if (v30)
    (*(void (**)(WebPageProxy *))(*(_QWORD *)v30 + 16))(v30);
  LODWORD(WebKit::WebProcessPool::statistics(void)::statistics) = WebKit::WebProcessPool::statistics(void)::statistics
                                                                + 1;
  v16 = objc_alloc_init(MEMORY[0x1E0CEABB0]);
  v17 = *(const void **)&self->_anon_fa8[48];
  *(_QWORD *)&self->_anon_fa8[48] = v16;
  if (v17)
  {
    CFRelease(v17);
    v16 = *(id *)&self->_anon_fa8[48];
  }
  objc_msgSend((id)objc_msgSend(v16, "layer"), "setName:", CFSTR("RootContent"));
  objc_msgSend((id)objc_msgSend(*(id *)&self->_anon_fa8[48], "layer"), "setMasksToBounds:", 0);
  objc_msgSend(*(id *)&self->_anon_fa8[48], "setAutoresizingMask:", 18);
  v18 = (BETextInputDelegate *)objc_alloc_init(MEMORY[0x1E0CEABB0]);
  asyncInputDelegate = self->_asyncInputDelegate;
  self->_asyncInputDelegate = v18;
  if (asyncInputDelegate)
  {
    CFRelease(asyncInputDelegate);
    v18 = self->_asyncInputDelegate;
  }
  objc_msgSend((id)-[BETextInputDelegate layer](v18, "layer"), "setName:", CFSTR("FixedClipping"));
  objc_msgSend((id)-[BETextInputDelegate layer](self->_asyncInputDelegate, "layer"), "setMasksToBounds:", 1);
  objc_msgSend((id)-[BETextInputDelegate layer](self->_asyncInputDelegate, "layer"), "setAnchorPoint:", *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
  -[WKContentView addSubview:](self, "addSubview:", self->_asyncInputDelegate);
  -[BETextInputDelegate addSubview:](self->_asyncInputDelegate, "addSubview:", *(_QWORD *)&self->_anon_fa8[48]);
  if ((WTF::linkedOnOrAfterSDKWithBehavior() & 1) == 0)
    -[WKContentView setUpInteraction](self, "setUpInteraction");
  -[WKContentView setUserInteractionEnabled:](self, "setUserInteractionEnabled:", 1);
  objc_msgSend((id)-[WKContentView layer](self, "layer"), "setHitTestsAsOpaque:", 1);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    -[WKContentView setFocusEffect:](self, "setFocusEffect:", 0);
  -[WKContentView _installVisibilityPropagationViews](self, "_installVisibilityPropagationViews");
  v20 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  objc_msgSend(v20, "addObserver:selector:name:object:", self, sel__applicationWillResignActive_, *MEMORY[0x1E0CEB358], objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"));
  v21 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  objc_msgSend(v21, "addObserver:selector:name:object:", self, sel__applicationDidBecomeActive_, *MEMORY[0x1E0CEB270], objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"));
  v22 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  objc_msgSend(v22, "addObserver:selector:name:object:", self, sel__applicationDidEnterBackground_, *MEMORY[0x1E0CEB288], objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"));
  v23 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  objc_msgSend(v23, "addObserver:selector:name:object:", self, sel__applicationWillEnterForeground_, *MEMORY[0x1E0CEB350], objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"));
  v24 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  if (WebCore::IOSApplication::isEvernote((WebCore::IOSApplication *)objc_msgSend(v24, "addObserver:selector:name:object:", self, sel__screenCapturedDidChange_, *MEMORY[0x1E0CEBB80], objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen")))&& (WTF::linkedOnOrAfterSDKWithBehavior() & 1) == 0)
  {
    v25 = (objc_class *)objc_opt_class();
    v26 = (objc_class *)objc_opt_class();
    InstanceMethod = class_getInstanceMethod(v26, sel_keyCommands);
    TypeEncoding = method_getTypeEncoding(InstanceMethod);
    class_addMethod(v25, sel_keyCommands, (IMP)keyCommandsPlaceholderHackForEvernote, TypeEncoding);
  }
  return self;
}

- (void)_layerTreeCommitComplete
{
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_layerTreeCommitComplete");
}

- (uint64_t)didUpdateVisibleRect:(CGFloat)a3 unobscuredRect:(CGFloat)a4 contentInsets:(CGFloat)a5 unobscuredRectInScrollViewCoordinates:(CGFloat)a6 obscuredInsets:(CGFloat)a7 unobscuredSafeAreaInsets:(CGFloat)a8 inputViewBounds:(CGFloat)a9 scale:(uint64_t)a10 minimumScale:(char)a11 viewStability:(char)a12 enclosedInScrollableAncestorView:(int)a13 sendEvenIfUnchanged:(uint64_t)a14
{
  float m_height;
  uint64_t v40;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  _QWORD *v52;
  float v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  char v60;
  char v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  float v77;
  float v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  double v84;
  double v85;
  double v86;
  float m_width;
  FloatPoint m_location;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  FloatRect v92;
  __int128 v93;
  float v94;
  float v95;
  float v96;
  float v97;
  __int128 v98;
  __int128 v99;
  float v100;
  int v101;
  int v102;
  int v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  FloatPoint v112;
  float v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  char v118;
  char v119;
  char v120;
  char v121;
  FloatRect v122;
  CGRect v123;
  int v124;
  CGRect v125;
  CGRect v126;
  CGRect v127;

  v127.origin.x = a2;
  v127.origin.y = a3;
  v127.size.width = a4;
  v127.size.height = a5;
  v126.origin.x = a6;
  v126.origin.y = a7;
  v126.size.width = a8;
  v126.size.height = a9;
  v125.origin = a21;
  v125.size.width = a22;
  v125.size.height = a23;
  v40 = *(_QWORD *)(*(_QWORD *)(result + 440) + 184);
  if (v40)
  {
    v45 = result;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    v47 = v46;
    if (a11)
    {
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v124, &v127.origin);
      WebCore::HistoricalVelocityData::velocityForNewData();
      m_location = v92.m_location;
      m_width = v92.m_size.m_width;
      m_height = v92.m_size.m_height;
      v47 = v93;
    }
    else
    {
      *(_DWORD *)(v45 + 4144) = 0;
      m_location = 0;
      m_width = 0.0;
    }
    objc_msgSend((id)v45, "_computeUnobscuredContentRectRespectingInputViewBounds:inputViewBounds:", a6, a7, a8, a9, a32, a33, a34, a35);
    v123.origin.x = v48;
    v123.origin.y = v49;
    v123.size.width = v50;
    v123.size.height = v51;
    v52 = *(_QWORD **)(v45 + 440);
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v92, &v126);
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v122, &v123);
    v53 = WebKit::WebPageProxy::computeLayoutViewportRect(v52, (__int128 *)&v92, &v122, (const FloatRect *)(*(_QWORD *)(*(_QWORD *)(v45 + 440) + 32) + 2336), 1, a36);
    v55 = v54;
    v57 = v56;
    v59 = v58;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v122, &v127);
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v91, &v126);
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v90, &v125);
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v89, &v123);
    v60 = *(_BYTE *)(v45 + 4296);
    v61 = objc_msgSend((id)objc_msgSend((id)v45, "webView"), "_allowsViewportShrinkToFit");
    if (*(_BYTE *)(v40 + 32))
    {
      result = 96;
      __break(0xC471u);
    }
    else
    {
      v62 = a29;
      v63 = a30;
      v64 = a31;
      v65 = a28;
      v66 = a25;
      v67 = a26;
      v68 = a27;
      v69 = a24;
      v70 = a18;
      v71 = a19;
      v72 = a20;
      v73 = a17;
      v74 = *(_QWORD *)(v40 + 112);
      v92 = v122;
      v93 = v91;
      v94 = v73;
      v95 = v72;
      v96 = v71;
      v97 = v70;
      v98 = v89;
      v99 = v90;
      v100 = v53;
      v101 = v55;
      v102 = v57;
      v103 = v59;
      v104 = v69;
      v105 = v68;
      v106 = v67;
      v107 = v66;
      v108 = v65;
      v109 = v64;
      v110 = v63;
      v111 = v62;
      v112 = m_location;
      v113 = m_width;
      v114 = m_height;
      v115 = v47;
      v116 = v74;
      v117 = a36;
      v118 = a11;
      v119 = v60;
      v120 = v61;
      v121 = a12;
      v75 = *(_QWORD *)(v45 + 440);
      v76 = *(unsigned __int8 *)(*(_QWORD *)(v75 + 32) + 2424);
      WebKit::WebPageProxy::updateVisibleContentRects(v75, (__int128 *)&v92, a13);
      v122.m_location.m_x = WebKit::WebPageProxy::computeLayoutViewportRect(*(_QWORD **)(v45 + 440), (__int128 *)(*(_QWORD *)(*(_QWORD *)(v45 + 440) + 32) + 2272), (FloatRect *)(*(_QWORD *)(*(_QWORD *)(v45 + 440) + 32) + 2304), (const FloatRect *)(*(_QWORD *)(*(_QWORD *)(v45 + 440) + 32) + 2336), 0, *(double *)(*(_QWORD *)(*(_QWORD *)(v45 + 440) + 32) + 2416));
      v122.m_location.m_y = v77;
      v122.m_size.m_width = v78;
      v122.m_size.m_height = v79;
      v80 = *(_QWORD *)(v45 + 440);
      v81 = *(_QWORD *)(v80 + 32);
      *(_QWORD *)&v91 = *(_QWORD *)(v81 + 2272);
      v82 = *(_QWORD *)(v80 + 200);
      if (v82)
        WebCore::ScrollingTree::mainFrameViewportChangedViaDelegatedScrolling(*(WebCore::ScrollingTree **)(v82 + 24), (const WebCore::FloatPoint *)&v91, &v122, *(double *)(v81 + 2416));
      *(_BYTE *)(v45 + 4296) = 0;
      v83 = ((__n128 (*)(uint64_t))*(_QWORD *)(*(_QWORD *)v40 + 152))(v40);
      v83.n128_u32[0] = LODWORD(v122.m_location.m_x);
      *(float *)&v84 = v122.m_location.m_y;
      *(float *)&v85 = v122.m_size.m_width;
      *(float *)&v86 = v122.m_size.m_height;
      result = objc_msgSend((id)v45, "updateFixedClippingView:", v83.n128_f64[0], v84, v85, v86);
      if (a11)
      {
        if (!v76)
          return objc_msgSend((id)v45, "_didExitStableState");
      }
    }
  }
  return result;
}

- (void)updateFixedClippingView:(FloatRect)a3
{
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  BETextInputDelegate *asyncInputDelegate;
  BETextInputDelegate *v9;
  CGRect v10;
  _QWORD v11[2];
  FloatRect v12;

  v12 = a3;
  -[WKContentView bounds](self, "bounds");
  v10.origin.x = v4;
  v10.origin.y = v5;
  v10.size.width = v6;
  v10.size.height = v7;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v11, &v10);
  WebCore::FloatRect::unite((WebCore::FloatRect *)v11, (const WebCore::FloatRect *)&v12);
  asyncInputDelegate = self->_asyncInputDelegate;
  *(_QWORD *)&v10.origin.x = v11[0];
  WebCore::FloatPoint::operator CGPoint();
  -[BETextInputDelegate setCenter:](asyncInputDelegate, "setCenter:");
  v9 = self->_asyncInputDelegate;
  WebCore::FloatRect::operator CGRect();
  -[BETextInputDelegate setBounds:](v9, "setBounds:");
}

- (void)_didCommitLayerTree:(const void *)a3
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  double v15;
  WebPageProxy *m_ptr;
  uint64_t v17;
  __int128 *v18;
  FloatRect *v19;
  const FloatRect *v20;
  double v21;
  double v22;
  uint64_t v23;
  IntPoint v24;
  unint64_t v25;
  CGRect v26;
  CGRect v27;

  v5 = *((_QWORD *)a3 + 4);
  v25 = *((_QWORD *)a3 + 15);
  WebCore::IntSize::operator CGSize();
  v7 = v6;
  v9 = v8;
  v25 = -*((_DWORD *)a3 + 32) - (*((_QWORD *)a3 + 16) & 0xFFFFFFFF00000000);
  WebCore::IntPoint::operator CGPoint();
  v12 = 0;
  if (!v5)
  {
    v13 = v10;
    v14 = v11;
    -[WKContentView bounds](self, "bounds");
    v27.origin.x = v13;
    v27.origin.y = v14;
    v27.size.width = v7;
    v27.size.height = v9;
    if (CGRectEqualToRect(v26, v27))
    {
      v12 = 0;
    }
    else
    {
      -[WKContentView setBounds:](self, "setBounds:", v13, v14, v7, v9);
      v12 = 1;
    }
  }
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_didCommitLayerTree:", a3);
  if (self->_interactionViewsContainerView.m_ptr)
  {
    v24 = (IntPoint)*((_QWORD *)a3 + 16);
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v25, &v24);
    objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "scrollView"), "zoomScale");
    *(float *)&v15 = v15;
    *(float *)&v25 = *(float *)&v25 * *(float *)&v15;
    *((float *)&v25 + 1) = *((float *)&v25 + 1) * *(float *)&v15;
    objc_msgSend(self->_interactionViewsContainerView.m_ptr, "setFrame:", *(float *)&v25, *((float *)&v25 + 1), 0.0, 0.0);
  }
  if (v12)
  {
    m_ptr = self->_page.m_ptr;
    v17 = *((_QWORD *)m_ptr + 4);
    v18 = (__int128 *)(v17 + 2272);
    v19 = (FloatRect *)(v17 + 2304);
    v20 = (const FloatRect *)(v17 + 2336);
    objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "scrollView"), "zoomScale");
    *(float *)&v22 = WebKit::WebPageProxy::computeLayoutViewportRect(m_ptr, v18, v19, v20, 0, v21);
    -[WKContentView updateFixedClippingView:](self, "updateFixedClippingView:", v22);
    objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_scheduleVisibleContentRectUpdate");
  }
  v23 = *((_QWORD *)self->_page.m_ptr + 4);
  if (*(_BYTE *)(v23 + 560))
  {
    if (*(_BYTE *)(v23 + 688))
      -[WKContentView _updateChangedSelection](self, "_updateChangedSelection");
  }
}

- (id)webView
{
  return objc_loadWeak(&self->_webView.m_weakReference);
}

- (void)didMoveToWindow
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)WKContentView;
  -[WKApplicationStateTrackingView didMoveToWindow](&v3, sel_didMoveToWindow);
  if (self->_needsDeferredEndScrollingSelectionUpdate)
    self->_needsDeferredEndScrollingSelectionUpdate = 0;
  if (-[WKContentView window](self, "window"))
  {
    -[WKContentView setUpInteraction](self, "setUpInteraction");
    WebKit::WebPageProxy::setScreenIsBeingCaptured((uint64_t)self->_page.m_ptr, -[WKContentView screenIsBeingCaptured](self, "screenIsBeingCaptured"));
  }
  else
  {
    -[WKContentView cleanUpInteractionPreviewContainers](self, "cleanUpInteractionPreviewContainers");
  }
}

- (void)_unregisterPreview
{
  void *m_ptr;
  void *v4;
  void *v5;

  if (!-[WKContentView _shouldUseContextMenus](self, "_shouldUseContextMenus"))
  {
    objc_msgSend(self->_previewItemController.m_ptr, "setDelegate:", 0);
    m_ptr = self->_previewGestureRecognizer.m_ptr;
    self->_previewGestureRecognizer.m_ptr = 0;
    if (m_ptr)
      CFRelease(m_ptr);
    v4 = self->_previewSecondaryGestureRecognizer.m_ptr;
    self->_previewSecondaryGestureRecognizer.m_ptr = 0;
    if (v4)
      CFRelease(v4);
    v5 = self->_previewItemController.m_ptr;
    self->_previewItemController.m_ptr = 0;
    if (v5)
      CFRelease(v5);
  }
}

- (void)_didStartProvisionalLoadForMainFrame
{
  objc_msgSend(self->_doubleTapGestureRecognizerForDoubleClick.m_ptr, "_wk_cancel");
  -[WKContentView _setDoubleTapGesturesEnabled:](self, "_setDoubleTapGesturesEnabled:", 0);
  objc_msgSend(self->_twoFingerDoubleTapGestureRecognizer.m_ptr, "_wk_cancel");
  -[WKContentView _cancelImageAnalysis](self, "_cancelImageAnalysis");
}

- (void)setUpInteraction
{
  WebPageProxy *m_ptr;
  id v4;
  void *v5;
  WKKeyboardScrollViewAnimator *v6;
  const void *positionInformationCallbackDepth;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  WKDeferringGestureRecognizer *v17;
  void *v18;
  WKDeferringGestureRecognizer *v19;
  void *v20;
  WKDeferringGestureRecognizer *v21;
  void *v22;
  WKDeferringGestureRecognizer *v23;
  void *v24;
  WKDeferringGestureRecognizer *v25;
  void *v26;
  WKDeferringGestureRecognizer *v27;
  void *v28;
  WKDeferringGestureRecognizer *v29;
  void *v30;
  WKDeferringGestureRecognizer *v31;
  void *v32;
  NSArray *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  void *v37;
  GestureRecognizerConsistencyEnforcer *value;
  WKTouchEventsGestureRecognizer *v39;
  void *v40;
  WKSyntheticTapGestureRecognizer *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  WKTouchActionGestureRecognizer *v51;
  void *v52;
  const WTF::StringImpl *v53;
  id v54;
  uint64_t v55;
  WebKit *BoolValueForKey;
  id v57;
  const void *v58;
  void *v59;
  WKActionSheetAssistant *v60;
  void *v61;
  WebKit::SmartMagnificationController *v62;
  SmartMagnificationController *v63;
  const void *v64;
  void *v65;
  WebCore::Pasteboard *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  m_ptr = self->_page.m_ptr;
  if (!*((_BYTE *)m_ptr + 729) && *((_BYTE *)m_ptr + 728) && !self->_becomingFirstResponder)
  {
    if (self->_needsDeferredEndScrollingSelectionUpdate)
      self->_needsDeferredEndScrollingSelectionUpdate = 0;
    if (!self->_interactionViewsContainerView.m_ptr)
    {
      v4 = objc_alloc_init(MEMORY[0x1E0CEABB0]);
      v5 = self->_interactionViewsContainerView.m_ptr;
      self->_interactionViewsContainerView.m_ptr = v4;
      if (v5)
      {
        CFRelease(v5);
        v4 = self->_interactionViewsContainerView.m_ptr;
      }
      objc_msgSend((id)objc_msgSend(v4, "layer"), "setName:", CFSTR("InteractionViewsContainer"));
      objc_msgSend(self->_interactionViewsContainerView.m_ptr, "setOpaque:", 0);
      objc_msgSend((id)objc_msgSend(self->_interactionViewsContainerView.m_ptr, "layer"), "setAnchorPoint:", *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
      objc_msgSend((id)-[WKContentView superview](self, "superview"), "addSubview:", self->_interactionViewsContainerView.m_ptr);
    }
    v6 = -[WKKeyboardScrollViewAnimator initWithScrollView:]([WKKeyboardScrollViewAnimator alloc], "initWithScrollView:", objc_msgSend(-[WKContentView webView](self, "webView"), "_scrollViewInternal"));
    positionInformationCallbackDepth = (const void *)self->_positionInformationCallbackDepth;
    self->_positionInformationCallbackDepth = (unint64_t)v6;
    if (positionInformationCallbackDepth)
    {
      CFRelease(positionInformationCallbackDepth);
      v6 = (WKKeyboardScrollViewAnimator *)self->_positionInformationCallbackDepth;
    }
    -[WKKeyboardScrollViewAnimator setDelegate:](v6, "setDelegate:", self);
    v8 = (void *)-[WKContentView layer](self, "layer");
    objc_msgSend(v8, "addObserver:forKeyPath:options:context:", self, CFSTR("transform"), 4, WKContentViewKVOTransformContext);
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA30]), "initWithTarget:action:", 0, 0);
    v10 = self->_touchActionLeftSwipeGestureRecognizer.m_ptr;
    self->_touchActionLeftSwipeGestureRecognizer.m_ptr = v9;
    if (v10)
    {
      CFRelease(v10);
      v9 = self->_touchActionLeftSwipeGestureRecognizer.m_ptr;
    }
    objc_msgSend(v9, "setDirection:", 2);
    objc_msgSend(self->_touchActionLeftSwipeGestureRecognizer.m_ptr, "setDelegate:", self);
    objc_msgSend(self->_touchActionLeftSwipeGestureRecognizer.m_ptr, "setName:", CFSTR("Touch action swipe left"));
    -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_touchActionLeftSwipeGestureRecognizer.m_ptr);
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA30]), "initWithTarget:action:", 0, 0);
    v12 = self->_touchActionRightSwipeGestureRecognizer.m_ptr;
    self->_touchActionRightSwipeGestureRecognizer.m_ptr = v11;
    if (v12)
    {
      CFRelease(v12);
      v11 = self->_touchActionRightSwipeGestureRecognizer.m_ptr;
    }
    objc_msgSend(v11, "setDirection:", 1);
    objc_msgSend(self->_touchActionRightSwipeGestureRecognizer.m_ptr, "setDelegate:", self);
    objc_msgSend(self->_touchActionRightSwipeGestureRecognizer.m_ptr, "setName:", CFSTR("Touch action swipe right"));
    -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_touchActionRightSwipeGestureRecognizer.m_ptr);
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA30]), "initWithTarget:action:", 0, 0);
    v14 = self->_touchActionUpSwipeGestureRecognizer.m_ptr;
    self->_touchActionUpSwipeGestureRecognizer.m_ptr = v13;
    if (v14)
    {
      CFRelease(v14);
      v13 = self->_touchActionUpSwipeGestureRecognizer.m_ptr;
    }
    objc_msgSend(v13, "setDirection:", 4);
    objc_msgSend(self->_touchActionUpSwipeGestureRecognizer.m_ptr, "setDelegate:", self);
    objc_msgSend(self->_touchActionUpSwipeGestureRecognizer.m_ptr, "setName:", CFSTR("Touch action swipe up"));
    -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_touchActionUpSwipeGestureRecognizer.m_ptr);
    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA30]), "initWithTarget:action:", 0, 0);
    v16 = self->_touchActionDownSwipeGestureRecognizer.m_ptr;
    self->_touchActionDownSwipeGestureRecognizer.m_ptr = v15;
    if (v16)
    {
      CFRelease(v16);
      v15 = self->_touchActionDownSwipeGestureRecognizer.m_ptr;
    }
    objc_msgSend(v15, "setDirection:", 8);
    objc_msgSend(self->_touchActionDownSwipeGestureRecognizer.m_ptr, "setDelegate:", self);
    objc_msgSend(self->_touchActionDownSwipeGestureRecognizer.m_ptr, "setName:", CFSTR("Touch action swipe down"));
    -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_touchActionDownSwipeGestureRecognizer.m_ptr);
    v17 = -[WKDeferringGestureRecognizer initWithDeferringGestureDelegate:]([WKDeferringGestureRecognizer alloc], "initWithDeferringGestureDelegate:", self);
    v18 = self->_touchStartDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr;
    self->_touchStartDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr = v17;
    if (v18)
    {
      CFRelease(v18);
      v17 = (WKDeferringGestureRecognizer *)self->_touchStartDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr;
    }
    -[WKDeferringGestureRecognizer setName:](v17, "setName:", CFSTR("Deferrer for touch start (immediate reset)"));
    v19 = -[WKDeferringGestureRecognizer initWithDeferringGestureDelegate:]([WKDeferringGestureRecognizer alloc], "initWithDeferringGestureDelegate:", self);
    v20 = self->_touchStartDeferringGestureRecognizerForDelayedResettableGestures.m_ptr;
    self->_touchStartDeferringGestureRecognizerForDelayedResettableGestures.m_ptr = v19;
    if (v20)
    {
      CFRelease(v20);
      v19 = (WKDeferringGestureRecognizer *)self->_touchStartDeferringGestureRecognizerForDelayedResettableGestures.m_ptr;
    }
    -[WKDeferringGestureRecognizer setName:](v19, "setName:", CFSTR("Deferrer for touch start (delayed reset)"));
    v21 = -[WKDeferringGestureRecognizer initWithDeferringGestureDelegate:]([WKDeferringGestureRecognizer alloc], "initWithDeferringGestureDelegate:", self);
    v22 = self->_touchStartDeferringGestureRecognizerForSyntheticTapGestures.m_ptr;
    self->_touchStartDeferringGestureRecognizerForSyntheticTapGestures.m_ptr = v21;
    if (v22)
    {
      CFRelease(v22);
      v21 = (WKDeferringGestureRecognizer *)self->_touchStartDeferringGestureRecognizerForSyntheticTapGestures.m_ptr;
    }
    -[WKDeferringGestureRecognizer setName:](v21, "setName:", CFSTR("Deferrer for touch start (synthetic tap)"));
    v23 = -[WKDeferringGestureRecognizer initWithDeferringGestureDelegate:]([WKDeferringGestureRecognizer alloc], "initWithDeferringGestureDelegate:", self);
    v24 = self->_touchEndDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr;
    self->_touchEndDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr = v23;
    if (v24)
    {
      CFRelease(v24);
      v23 = (WKDeferringGestureRecognizer *)self->_touchEndDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr;
    }
    -[WKDeferringGestureRecognizer setName:](v23, "setName:", CFSTR("Deferrer for touch end (immediate reset)"));
    v25 = -[WKDeferringGestureRecognizer initWithDeferringGestureDelegate:]([WKDeferringGestureRecognizer alloc], "initWithDeferringGestureDelegate:", self);
    v26 = self->_touchEndDeferringGestureRecognizerForDelayedResettableGestures.m_ptr;
    self->_touchEndDeferringGestureRecognizerForDelayedResettableGestures.m_ptr = v25;
    if (v26)
    {
      CFRelease(v26);
      v25 = (WKDeferringGestureRecognizer *)self->_touchEndDeferringGestureRecognizerForDelayedResettableGestures.m_ptr;
    }
    -[WKDeferringGestureRecognizer setName:](v25, "setName:", CFSTR("Deferrer for touch end (delayed reset)"));
    v27 = -[WKDeferringGestureRecognizer initWithDeferringGestureDelegate:]([WKDeferringGestureRecognizer alloc], "initWithDeferringGestureDelegate:", self);
    v28 = self->_touchEndDeferringGestureRecognizerForSyntheticTapGestures.m_ptr;
    self->_touchEndDeferringGestureRecognizerForSyntheticTapGestures.m_ptr = v27;
    if (v28)
    {
      CFRelease(v28);
      v27 = (WKDeferringGestureRecognizer *)self->_touchEndDeferringGestureRecognizerForSyntheticTapGestures.m_ptr;
    }
    -[WKDeferringGestureRecognizer setName:](v27, "setName:", CFSTR("Deferrer for touch end (synthetic tap)"));
    v29 = -[WKDeferringGestureRecognizer initWithDeferringGestureDelegate:]([WKDeferringGestureRecognizer alloc], "initWithDeferringGestureDelegate:", self);
    v30 = self->_touchMoveDeferringGestureRecognizer.m_ptr;
    self->_touchMoveDeferringGestureRecognizer.m_ptr = v29;
    if (v30)
    {
      CFRelease(v30);
      v29 = (WKDeferringGestureRecognizer *)self->_touchMoveDeferringGestureRecognizer.m_ptr;
    }
    -[WKDeferringGestureRecognizer setName:](v29, "setName:", CFSTR("Deferrer for touch move"));
    v31 = -[WKDeferringGestureRecognizer initWithDeferringGestureDelegate:]([WKDeferringGestureRecognizer alloc], "initWithDeferringGestureDelegate:", self);
    v32 = self->_imageAnalysisDeferringGestureRecognizer.m_ptr;
    self->_imageAnalysisDeferringGestureRecognizer.m_ptr = v31;
    if (v32)
    {
      CFRelease(v32);
      v31 = (WKDeferringGestureRecognizer *)self->_imageAnalysisDeferringGestureRecognizer.m_ptr;
    }
    -[WKDeferringGestureRecognizer setName:](v31, "setName:", CFSTR("Deferrer for image analysis"));
    objc_msgSend(self->_imageAnalysisDeferringGestureRecognizer.m_ptr, "setImmediatelyFailsAfterTouchEnd:", 1);
    objc_msgSend(self->_imageAnalysisDeferringGestureRecognizer.m_ptr, "setEnabled:", PAL::VisionKitCoreLibrary((PAL *)1) != 0);
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v33 = -[WKContentView deferringGestures](self, "deferringGestures", 0);
    v34 = -[NSArray countByEnumeratingWithState:objects:count:](v33, "countByEnumeratingWithState:objects:count:", &v67, v71, 16);
    if (v34)
    {
      v35 = *(_QWORD *)v68;
      do
      {
        for (i = 0; i != v34; ++i)
        {
          if (*(_QWORD *)v68 != v35)
            objc_enumerationMutation(v33);
          v37 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * i);
          objc_msgSend(v37, "setDelegate:", self);
          -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", v37);
        }
        v34 = -[NSArray countByEnumeratingWithState:objects:count:](v33, "countByEnumeratingWithState:objects:count:", &v67, v71, 16);
      }
      while (v34);
    }
    value = self->_gestureRecognizerConsistencyEnforcer.__ptr_.__value_;
    if (value)
      WebKit::GestureRecognizerConsistencyEnforcer::reset((WebKit::GestureRecognizerConsistencyEnforcer *)value);
    v39 = -[WKTouchEventsGestureRecognizer initWithTarget:action:touchDelegate:]([WKTouchEventsGestureRecognizer alloc], "initWithTarget:action:touchDelegate:", self, sel__touchEventsRecognized_, self);
    v40 = self->_touchEventGestureRecognizer.m_ptr;
    self->_touchEventGestureRecognizer.m_ptr = v39;
    if (v40)
    {
      CFRelease(v40);
      v39 = (WKTouchEventsGestureRecognizer *)self->_touchEventGestureRecognizer.m_ptr;
    }
    -[WKTouchEventsGestureRecognizer setDelegate:](v39, "setDelegate:", self);
    -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_touchEventGestureRecognizer.m_ptr);
    -[WKContentView setUpMouseGestureRecognizer](self, "setUpMouseGestureRecognizer");
    v41 = -[WKSyntheticTapGestureRecognizer initWithTarget:action:]([WKSyntheticTapGestureRecognizer alloc], "initWithTarget:action:", self, sel__singleTapRecognized_);
    v42 = self->_singleTapGestureRecognizer.m_ptr;
    self->_singleTapGestureRecognizer.m_ptr = v41;
    if (v42)
    {
      CFRelease(v42);
      v41 = (WKSyntheticTapGestureRecognizer *)self->_singleTapGestureRecognizer.m_ptr;
    }
    -[WKSyntheticTapGestureRecognizer setDelegate:](v41, "setDelegate:", self);
    objc_msgSend(self->_singleTapGestureRecognizer.m_ptr, "setGestureIdentifiedTarget:action:", self, sel__singleTapIdentified_);
    objc_msgSend(self->_singleTapGestureRecognizer.m_ptr, "setResetTarget:action:", self, sel__singleTapDidReset_);
    objc_msgSend(self->_singleTapGestureRecognizer.m_ptr, "setSupportingTouchEventsGestureRecognizer:", self->_touchEventGestureRecognizer.m_ptr);
    -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_singleTapGestureRecognizer.m_ptr);
    v43 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA88]), "initWithTarget:action:", self, sel__nonBlockingDoubleTapRecognized_);
    v44 = self->_nonBlockingDoubleTapGestureRecognizer.m_ptr;
    self->_nonBlockingDoubleTapGestureRecognizer.m_ptr = v43;
    if (v44)
    {
      CFRelease(v44);
      v43 = self->_nonBlockingDoubleTapGestureRecognizer.m_ptr;
    }
    objc_msgSend(v43, "setNumberOfTapsRequired:", 2);
    objc_msgSend(self->_nonBlockingDoubleTapGestureRecognizer.m_ptr, "setDelegate:", self);
    objc_msgSend(self->_nonBlockingDoubleTapGestureRecognizer.m_ptr, "setEnabled:", 0);
    -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_nonBlockingDoubleTapGestureRecognizer.m_ptr);
    v45 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA88]), "initWithTarget:action:", self, sel__doubleTapRecognizedForDoubleClick_);
    v46 = self->_doubleTapGestureRecognizerForDoubleClick.m_ptr;
    self->_doubleTapGestureRecognizerForDoubleClick.m_ptr = v45;
    if (v46)
    {
      CFRelease(v46);
      v45 = self->_doubleTapGestureRecognizerForDoubleClick.m_ptr;
    }
    objc_msgSend(v45, "setNumberOfTapsRequired:", 2);
    objc_msgSend(self->_doubleTapGestureRecognizerForDoubleClick.m_ptr, "setDelegate:", self);
    -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_doubleTapGestureRecognizerForDoubleClick.m_ptr);
    -[WKContentView _createAndConfigureDoubleTapGestureRecognizer](self, "_createAndConfigureDoubleTapGestureRecognizer");
    v47 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA88]), "initWithTarget:action:", self, sel__twoFingerDoubleTapRecognized_);
    v48 = self->_twoFingerDoubleTapGestureRecognizer.m_ptr;
    self->_twoFingerDoubleTapGestureRecognizer.m_ptr = v47;
    if (v48)
    {
      CFRelease(v48);
      v47 = self->_twoFingerDoubleTapGestureRecognizer.m_ptr;
    }
    objc_msgSend(v47, "setNumberOfTapsRequired:", 2);
    objc_msgSend(self->_twoFingerDoubleTapGestureRecognizer.m_ptr, "setNumberOfTouchesRequired:", 2);
    objc_msgSend(self->_twoFingerDoubleTapGestureRecognizer.m_ptr, "setDelegate:", self);
    -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_twoFingerDoubleTapGestureRecognizer.m_ptr);
    -[WKContentView _createAndConfigureHighlightLongPressGestureRecognizer](self, "_createAndConfigureHighlightLongPressGestureRecognizer");
    -[WKContentView _createAndConfigureLongPressGestureRecognizer](self, "_createAndConfigureLongPressGestureRecognizer");
    -[WKContentView _updateLongPressAndHighlightLongPressGestures](self, "_updateLongPressAndHighlightLongPressGestures");
    -[WKContentView setUpDragAndDropInteractions](self, "setUpDragAndDropInteractions");
    -[WKContentView setUpPointerInteraction](self, "setUpPointerInteraction");
    -[WKContentView setUpScribbleInteraction](self, "setUpScribbleInteraction");
    v49 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA88]), "initWithTarget:action:", self, sel__twoFingerSingleTapGestureRecognized_);
    v50 = self->_twoFingerSingleTapGestureRecognizer.m_ptr;
    self->_twoFingerSingleTapGestureRecognizer.m_ptr = v49;
    if (v50)
    {
      CFRelease(v50);
      v49 = self->_twoFingerSingleTapGestureRecognizer.m_ptr;
    }
    objc_msgSend(v49, "setAllowableMovement:", 60.0);
    objc_msgSend(self->_twoFingerSingleTapGestureRecognizer.m_ptr, "_setAllowableSeparation:", 150.0);
    objc_msgSend(self->_twoFingerSingleTapGestureRecognizer.m_ptr, "setNumberOfTapsRequired:", 1);
    objc_msgSend(self->_twoFingerSingleTapGestureRecognizer.m_ptr, "setNumberOfTouchesRequired:", 2);
    objc_msgSend(self->_twoFingerSingleTapGestureRecognizer.m_ptr, "setDelaysTouchesEnded:", 0);
    objc_msgSend(self->_twoFingerSingleTapGestureRecognizer.m_ptr, "setDelegate:", self);
    objc_msgSend(self->_twoFingerSingleTapGestureRecognizer.m_ptr, "setEnabled:", objc_msgSend(-[WKContentView webView](self, "webView"), "_isEditable") ^ 1);
    -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_twoFingerSingleTapGestureRecognizer.m_ptr);
    v51 = -[WKTouchActionGestureRecognizer initWithTouchActionDelegate:]([WKTouchActionGestureRecognizer alloc], "initWithTouchActionDelegate:", self);
    v52 = self->_touchActionGestureRecognizer.m_ptr;
    self->_touchActionGestureRecognizer.m_ptr = v51;
    if (v52)
    {
      CFRelease(v52);
      v51 = (WKTouchActionGestureRecognizer *)self->_touchActionGestureRecognizer.m_ptr;
    }
    -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", v51);
    -[WKContentView setUpTextSelectionAssistant](self, "setUpTextSelectionAssistant");
    v54 = objc_alloc(MEMORY[0x1E0CEA808]);
    v55 = *((_QWORD *)self->_page.m_ptr + 28);
    {
      WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    BoolValueForKey = (WebKit *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v55 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v53);
    if ((_DWORD)BoolValueForKey)
    {
      if (byte_1EE341A52 == 1)
      {
        v57 = (id)qword_1EE341A58;
      }
      else
      {
        v57 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v66 = (WebCore::Pasteboard *)objc_msgSend(v57, "addObjectsFromArray:", WebKit::supportedRichTextPasteboardTypesForPasteConfiguration((WebKit *)v57));
        objc_msgSend(v57, "addObjectsFromArray:", WebCore::Pasteboard::supportedFileUploadPasteboardTypes(v66));
        qword_1EE341A58 = (uint64_t)v57;
        byte_1EE341A52 = 1;
      }
    }
    else
    {
      v57 = WebKit::supportedRichTextPasteboardTypesForPasteConfiguration(BoolValueForKey);
    }
    v58 = (const void *)objc_msgSend(v54, "initWithAcceptableTypeIdentifiers:", v57);
    -[WKContentView setPasteConfiguration:](self, "setPasteConfiguration:", v58);
    if (v58)
      CFRelease(v58);
    -[WKContentView _registerPreview](self, "_registerPreview");
    v59 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    objc_msgSend(v59, "addObserver:selector:name:object:", self, sel__willHideMenu_, *MEMORY[0x1E0CEB998], 0);
    objc_msgSend(v59, "addObserver:selector:name:object:", self, sel__keyboardDidRequestDismissal_, *MEMORY[0x1E0CEB910], 0);
    v60 = -[WKActionSheetAssistant initWithView:]([WKActionSheetAssistant alloc], "initWithView:", self);
    v61 = self->_actionSheetAssistant.m_ptr;
    self->_actionSheetAssistant.m_ptr = v60;
    if (v61)
    {
      CFRelease(v61);
      v60 = (WKActionSheetAssistant *)self->_actionSheetAssistant.m_ptr;
    }
    -[WKActionSheetAssistant setDelegate:](v60, "setDelegate:", self);
    v62 = (WebKit::SmartMagnificationController *)WTF::fastMalloc((WTF *)0x20);
    WebKit::SmartMagnificationController::SmartMagnificationController(v62, self);
    v63 = self->_smartMagnificationController.__ptr_.__value_;
    self->_smartMagnificationController.__ptr_.__value_ = (SmartMagnificationController *)v62;
    if (v63)
      (*(void (**)(SmartMagnificationController *))(*(_QWORD *)v63 + 8))(v63);
    self->_touchEventsCanPreventNativeGestures = 1;
    HIBYTE(self->_dataListTextSuggestions.m_ptr) = 0;
    BYTE4(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
    BYTE5(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
    LOBYTE(self->_dataListSuggestionsControl.m_weakReference) = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "BOOLForKey:", CFSTR("WebKitShowFastClickDebugTapHighlights"));
    self->_isTapHighlightIDValid = 0;
    self->_isTapHighlightFading = 0;
    self->_isDoubleTapPending = 0;
    self->_isDisplayingContextMenuWithAnimation = 0;
    self->_showDebugTapHighlightsForFastClicking = 0;
    v64 = *(const void **)&self->_inputViewUpdateDeferralSources.m_storage;
    *(_QWORD *)&self->_inputViewUpdateDeferralSources.m_storage = 0;
    if (v64)
      CFRelease(v64);
    v65 = self->_keyboardScrollingAnimator.m_ptr;
    self->_keyboardScrollingAnimator.m_ptr = 0;
    if (v65)
      CFRelease(v65);
    BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
    WebKit::WebProcessProxy::updateTextCheckerState(*((WebKit **)self->_page.m_ptr + 26));
    WebKit::WebPageProxy::setScreenIsBeingCaptured((uint64_t)self->_page.m_ptr, -[WKContentView screenIsBeingCaptured](self, "screenIsBeingCaptured"));
    -[WKContentView _setUpImageAnalysis](self, "_setUpImageAnalysis");
    self->_becomingFirstResponder = 1;
  }
}

- (void)_setDoubleTapGesturesEnabled:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE v9[7];

  v3 = a3;
  if (a3)
  {
    if ((objc_msgSend(self->_doubleTapGestureRecognizer.m_ptr, "isEnabled") & 1) == 0)
      -[WKContentView _createAndConfigureDoubleTapGestureRecognizer](self, "_createAndConfigureDoubleTapGestureRecognizer");
  }
  else if (LOBYTE(self->_dataListSuggestionsControl.m_weakReference))
  {
    -[WKContentView _tapHighlightColorForFastClick:](self, "_tapHighlightColorForFastClick:", 1);
    WebCore::Color::operator=();
    if ((*(_QWORD *)v9 & 0x8000000000000) != 0)
    {
      v6 = (unsigned int *)(*(_QWORD *)v9 & 0xFFFFFFFFFFFFLL);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v5);
      }
    }
  }
  objc_msgSend(self->_doubleTapGestureRecognizer.m_ptr, "setEnabled:", v3);
  objc_msgSend(self->_nonBlockingDoubleTapGestureRecognizer.m_ptr, "setEnabled:", v3 ^ 1);
  -[WKContentView _resetIsDoubleTapPending](self, "_resetIsDoubleTapPending");
}

- (void)_resetIsDoubleTapPending
{
  BYTE5(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
}

- (void)_createAndConfigureDoubleTapGestureRecognizer
{
  WKSyntheticTapGestureRecognizer *v3;
  void *m_ptr;

  if (self->_doubleTapGestureRecognizer.m_ptr)
  {
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:");
    objc_msgSend(self->_doubleTapGestureRecognizer.m_ptr, "setDelegate:", 0);
    objc_msgSend(self->_doubleTapGestureRecognizer.m_ptr, "setGestureFailedTarget:action:", 0, 0);
  }
  v3 = -[WKSyntheticTapGestureRecognizer initWithTarget:action:]([WKSyntheticTapGestureRecognizer alloc], "initWithTarget:action:", self, sel__doubleTapRecognized_);
  m_ptr = self->_doubleTapGestureRecognizer.m_ptr;
  self->_doubleTapGestureRecognizer.m_ptr = v3;
  if (m_ptr)
  {
    CFRelease(m_ptr);
    v3 = (WKSyntheticTapGestureRecognizer *)self->_doubleTapGestureRecognizer.m_ptr;
  }
  -[WKSyntheticTapGestureRecognizer setGestureFailedTarget:action:](v3, "setGestureFailedTarget:action:", self, sel__doubleTapDidFail_);
  objc_msgSend(self->_doubleTapGestureRecognizer.m_ptr, "setNumberOfTapsRequired:", 2);
  objc_msgSend(self->_doubleTapGestureRecognizer.m_ptr, "setDelegate:", self);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_doubleTapGestureRecognizer.m_ptr);
  objc_msgSend(self->_singleTapGestureRecognizer.m_ptr, "requireGestureRecognizerToFail:", self->_doubleTapGestureRecognizer.m_ptr);
}

- (void)_registerPreview
{
  uint64_t v3;
  void *v4;
  void *m_ptr;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(-[WKContentView webView](self, "webView"), "allowsLinkPreview"))
  {
    if (-[WKContentView _shouldUseContextMenus](self, "_shouldUseContextMenus"))
    {
      self->_contextMenuHasRequestedLegacyData = 0;
      objc_msgSend(self->_textInteractionWrapper.m_ptr, "setExternalContextMenuInteractionDelegate:", self);
      v3 = objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "configuration"), "_clickInteractionDriverForTesting");
      if (v3)
      {
        v12[0] = v3;
        objc_msgSend((id)-[UIContextMenuInteraction presentationInteraction](-[WKContentView contextMenuInteraction](self, "contextMenuInteraction"), "presentationInteraction"), "setOverrideDrivers:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 1));
      }
    }
    else
    {
      v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA8B0]), "initWithView:", self);
      m_ptr = self->_previewItemController.m_ptr;
      self->_previewItemController.m_ptr = v4;
      if (m_ptr)
      {
        CFRelease(m_ptr);
        v4 = self->_previewItemController.m_ptr;
      }
      objc_msgSend(v4, "setDelegate:", self);
      v6 = (void *)objc_msgSend(self->_previewItemController.m_ptr, "presentationGestureRecognizer");
      v7 = v6;
      if (v6)
        CFRetain(v6);
      v8 = self->_previewGestureRecognizer.m_ptr;
      self->_previewGestureRecognizer.m_ptr = v7;
      if (v8)
        CFRelease(v8);
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v9 = (void *)objc_msgSend(self->_previewItemController.m_ptr, "presentationSecondaryGestureRecognizer");
        v10 = v9;
        if (v9)
          CFRetain(v9);
        v11 = self->_previewSecondaryGestureRecognizer.m_ptr;
        self->_previewSecondaryGestureRecognizer.m_ptr = v10;
        if (v11)
          CFRelease(v11);
      }
    }
  }
}

- (void)_updateLongPressAndHighlightLongPressGestures
{
  void *m_ptr;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  m_ptr = self->_highlightLongPressGestureRecognizer.m_ptr;
  if (-[WKContentView _shouldUseContextMenus](self, "_shouldUseContextMenus"))
    v4 = objc_msgSend(-[WKContentView webView](self, "webView"), "allowsLinkPreview") ^ 1;
  else
    v4 = 1;
  objc_msgSend(m_ptr, "setEnabled:", v4);
  v5 = self->_longPressGestureRecognizer.m_ptr;
  if (-[WKContentView _shouldUseContextMenus](self, "_shouldUseContextMenus"))
    v6 = 0;
  else
    v6 = objc_msgSend(-[WKContentView webView](self, "webView"), "allowsLinkPreview");
  objc_msgSend(v5, "setEnabled:", v6);
}

- (BOOL)_shouldUseContextMenus
{
  return WTF::linkedOnOrAfterSDKWithBehavior();
}

- (void)setUpTextSelectionAssistant
{
  void *m_ptr;
  WKTextInteractionWrapper *v4;
  void *v5;

  m_ptr = self->_textInteractionWrapper.m_ptr;
  if (m_ptr)
  {
    objc_msgSend(m_ptr, "setGestureRecognizers");
  }
  else
  {
    v4 = -[WKTextInteractionWrapper initWithView:]([WKTextInteractionWrapper alloc], "initWithView:", self);
    v5 = self->_textInteractionWrapper.m_ptr;
    self->_textInteractionWrapper.m_ptr = v4;
    if (v5)
      CFRelease(v5);
  }
  objc_storeWeak((id *)&self->_cachedTextInteractionLoupeGestureRecognizer, 0);
  objc_storeWeak((id *)&self->_cachedTextInteractionTapGestureRecognizer, 0);
}

- (void)setUpScribbleInteraction
{
  void *v3;
  void *m_ptr;

  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA668]), "initWithDelegate:", self);
  m_ptr = self->_scribbleInteraction.m_ptr;
  self->_scribbleInteraction.m_ptr = v3;
  if (m_ptr)
  {
    CFRelease(m_ptr);
    v3 = self->_scribbleInteraction.m_ptr;
  }
  -[WKContentView addInteraction:](self, "addInteraction:", v3);
}

- (void)setUpPointerInteraction
{
  void *v3;
  void *m_ptr;

  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA860]), "initWithDelegate:", self);
  m_ptr = self->_pointerInteraction.m_ptr;
  self->_pointerInteraction.m_ptr = v3;
  if (m_ptr)
  {
    CFRelease(m_ptr);
    v3 = self->_pointerInteraction.m_ptr;
  }
  -[WKContentView addInteraction:](self, "addInteraction:", v3);
}

- (void)setUpMouseGestureRecognizer
{
  WKMouseInteraction *v3;
  void *m_ptr;

  if (self->_mouseInteraction.m_ptr)
    -[WKContentView removeInteraction:](self, "removeInteraction:");
  v3 = -[WKMouseInteraction initWithDelegate:]([WKMouseInteraction alloc], "initWithDelegate:", self);
  m_ptr = self->_mouseInteraction.m_ptr;
  self->_mouseInteraction.m_ptr = v3;
  if (m_ptr)
  {
    CFRelease(m_ptr);
    v3 = (WKMouseInteraction *)self->_mouseInteraction.m_ptr;
  }
  -[WKContentView addInteraction:](self, "addInteraction:", v3);
  -[WKContentView _configureMouseGestureRecognizer](self, "_configureMouseGestureRecognizer");
}

- (void)setUpDragAndDropInteractions
{
  uint64_t v3;
  const void *v4;
  void *v5;
  void *m_table;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = objc_msgSend(objc_alloc(-[WKContentView _dragInteractionClass](self, "_dragInteractionClass")), "initWithDelegate:", self);
  v4 = *(const void **)&self->_dragDropInteractionState.m_activeDragSources.m_capacity;
  *(_QWORD *)&self->_dragDropInteractionState.m_activeDragSources.m_capacity = v3;
  if (v4)
    CFRelease(v4);
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA588]), "initWithDelegate:", self);
  m_table = self->_dragDropInteractionState.m_defaultDropPreviews.m_impl.var0.m_table;
  self->_dragDropInteractionState.m_defaultDropPreviews.m_impl.var0.m_table = v5;
  if (m_table)
    CFRelease(m_table);
  v7 = *(void **)&self->_dragDropInteractionState.m_activeDragSources.m_capacity;
  v8 = objc_msgSend(-[WKContentView webView](self, "webView"), "_dragInteractionPolicy");
  if (v8 == 1)
  {
    v9 = 1;
  }
  else if (v8 == 2)
  {
    v9 = 0;
  }
  else
  {
    v9 = objc_msgSend(MEMORY[0x1E0CEA550], "isEnabledByDefault");
  }
  objc_msgSend(v7, "setEnabled:", v9);
  if (!-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v10 = *(void **)&self->_dragDropInteractionState.m_activeDragSources.m_capacity;
    -[WKContentView dragLiftDelay](self, "dragLiftDelay");
    objc_msgSend(v10, "_setLiftDelay:");
    objc_msgSend(*(id *)&self->_dragDropInteractionState.m_activeDragSources.m_capacity, "_setAllowsPointerDragBeforeLiftDelay:", 0);
  }
  -[WKContentView addInteraction:](self, "addInteraction:", *(_QWORD *)&self->_dragDropInteractionState.m_activeDragSources.m_capacity);
  -[WKContentView addInteraction:](self, "addInteraction:", self->_dragDropInteractionState.m_defaultDropPreviews.m_impl.var0.m_table);
}

- (void)_updateRuntimeProtocolConformanceIfNeeded
{
  char v2;
  _BOOL4 v4;
  NSObject *v5;
  _BOOL4 v6;
  objc_class *v7;
  uint64_t v8;
  Protocol *v9;
  objc_class *v10;
  objc_class *v11;
  objc_method *InstanceMethod;
  void (*Implementation)(void);
  objc_class *v14;
  const char *TypeEncoding;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v2 = -[WKContentView(WKInteraction) _updateRuntimeProtocolConformanceIfNeeded]::hasUpdatedProtocolConformance;
  -[WKContentView(WKInteraction) _updateRuntimeProtocolConformanceIfNeeded]::hasUpdatedProtocolConformance = 1;
  if ((v2 & 1) == 0)
  {
    v4 = -[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions");
    v5 = qword_1ECE719B0;
    v6 = os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        LOWORD(v16) = 0;
        _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "Conforming to BrowserEngineKit text input protocol", (uint8_t *)&v16, 2u);
      }
      v7 = (objc_class *)objc_opt_class();
      class_addProtocol(v7, (Protocol *)&unk_1EE3C7F00);
    }
    else
    {
      if (v6)
      {
        LOWORD(v16) = 0;
        _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "Conforming to legacy UIKit interaction and text input protocols", (uint8_t *)&v16, 2u);
      }
      v8 = 0;
      v16 = &unk_1EE3C8548;
      v17 = &unk_1EE3B09D0;
      v18 = &unk_1EE3AB0B8;
      v19 = &unk_1EE3C8640;
      v20 = &unk_1EE3C8730;
      do
      {
        v9 = *(Protocol **)((char *)&v16 + v8);
        v10 = (objc_class *)objc_opt_class();
        class_addProtocol(v10, v9);
        v8 += 8;
      }
      while (v8 != 40);
    }
    if (!-[WKContentView _shouldUseUIContextMenuAsyncConfiguration](self, "_shouldUseUIContextMenuAsyncConfiguration", v16, v17, v18, v19, v20))
    {
      v11 = (objc_class *)objc_opt_class();
      InstanceMethod = class_getInstanceMethod(v11, sel__internalContextMenuInteraction_configurationForMenuAtLocation_completion_);
      Implementation = method_getImplementation(InstanceMethod);
      v14 = (objc_class *)objc_opt_class();
      TypeEncoding = method_getTypeEncoding(InstanceMethod);
      class_addMethod(v14, sel__contextMenuInteraction_configurationForMenuAtLocation_completion_, Implementation, TypeEncoding);
    }
  }
}

- (BOOL)shouldUseAsyncInteractions
{
  const WTF::StringImpl *v2;
  uint64_t v3;

  v3 = *((_QWORD *)self->_page.m_ptr + 28);
  {
    WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v3 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useAsyncUIKitInteractionsKey(void)::key, v2);
}

- (NSArray)deferringGestures
{
  NSArray *v3;

  v3 = (NSArray *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 7);
  -[NSArray addObjectsFromArray:](v3, "addObjectsFromArray:", -[WKContentView _touchStartDeferringGestures](self, "_touchStartDeferringGestures"));
  -[NSArray addObjectsFromArray:](v3, "addObjectsFromArray:", -[WKContentView _touchEndDeferringGestures](self, "_touchEndDeferringGestures"));
  if (self->_touchMoveDeferringGestureRecognizer.m_ptr)
    -[NSArray addObject:](v3, "addObject:");
  if (self->_imageAnalysisDeferringGestureRecognizer.m_ptr)
    -[NSArray addObject:](v3, "addObject:");
  return v3;
}

- (id)_touchStartDeferringGestures
{
  uint64_t v2;
  void *m_ptr;
  void *v4;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (self->_touchStartDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr)
  {
    v6[0] = self->_touchStartDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr;
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  m_ptr = self->_touchStartDeferringGestureRecognizerForDelayedResettableGestures.m_ptr;
  if (m_ptr)
    v6[v2++] = m_ptr;
  v4 = self->_touchStartDeferringGestureRecognizerForSyntheticTapGestures.m_ptr;
  if (v4)
    v6[v2++] = v4;
  return (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, v2);
}

- (id)_touchEndDeferringGestures
{
  uint64_t v2;
  void *m_ptr;
  void *v4;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (self->_touchEndDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr)
  {
    v6[0] = self->_touchEndDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr;
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  m_ptr = self->_touchEndDeferringGestureRecognizerForDelayedResettableGestures.m_ptr;
  if (m_ptr)
    v6[v2++] = m_ptr;
  v4 = self->_touchEndDeferringGestureRecognizerForSyntheticTapGestures.m_ptr;
  if (v4)
    v6[v2++] = v4;
  return (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, v2);
}

- (void)_setUpImageAnalysis
{
  WKImageAnalysisGestureRecognizer *v3;
  void *m_ptr;
  WTF::StringImpl *v5;

  if (PAL::VisionKitCoreLibrary((PAL *)1))
  {
    if (LOBYTE(self->_editDropTextCursorView.m_ptr))
      LOBYTE(self->_editDropTextCursorView.m_ptr) = 0;
    self->_anon_e60[32] = 0;
    if (self->_anon_e60[0])
      self->_anon_e60[0] = 0;
    v3 = -[WKImageAnalysisGestureRecognizer initWithImageAnalysisGestureDelegate:]([WKImageAnalysisGestureRecognizer alloc], "initWithImageAnalysisGestureDelegate:", self);
    m_ptr = self->_editDropCaretView.m_ptr;
    self->_editDropCaretView.m_ptr = v3;
    if (m_ptr)
    {
      CFRelease(m_ptr);
      v3 = (WKImageAnalysisGestureRecognizer *)self->_editDropCaretView.m_ptr;
    }
    -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", v3);
    std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::reset[abi:sn180100]((uint64_t)&self->_imageAnalysisActionButtons, v5);
    LOBYTE(self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.origin.y) = 0;
    std::__optional_destruct_base<WebKit::ImageAnalysisContextMenuActionData,false>::reset[abi:sn180100]((uint64_t)&self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.size);
  }
}

- (Class)_dragInteractionClass
{
  -[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions");
  return (Class)objc_opt_class();
}

- (void)_createAndConfigureLongPressGestureRecognizer
{
  void *v3;
  void *m_ptr;

  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA730]), "initWithTarget:action:", self, sel__longPressRecognized_);
  m_ptr = self->_longPressGestureRecognizer.m_ptr;
  self->_longPressGestureRecognizer.m_ptr = v3;
  if (m_ptr)
  {
    CFRelease(m_ptr);
    v3 = self->_longPressGestureRecognizer.m_ptr;
  }
  objc_msgSend(v3, "setDelay:", 0.75);
  objc_msgSend(self->_longPressGestureRecognizer.m_ptr, "setDelegate:", self);
  objc_msgSend(self->_longPressGestureRecognizer.m_ptr, "_setRequiresQuietImpulse:", 1);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_longPressGestureRecognizer.m_ptr);
}

- (void)_createAndConfigureHighlightLongPressGestureRecognizer
{
  WKHighlightLongPressGestureRecognizer *v3;
  void *m_ptr;

  v3 = -[_UIWebHighlightLongPressGestureRecognizer initWithTarget:action:]([WKHighlightLongPressGestureRecognizer alloc], "initWithTarget:action:", self, sel__highlightLongPressRecognized_);
  m_ptr = self->_highlightLongPressGestureRecognizer.m_ptr;
  self->_highlightLongPressGestureRecognizer.m_ptr = v3;
  if (m_ptr)
  {
    CFRelease(m_ptr);
    v3 = (WKHighlightLongPressGestureRecognizer *)self->_highlightLongPressGestureRecognizer.m_ptr;
  }
  -[WKHighlightLongPressGestureRecognizer setDelay:](v3, "setDelay:", 0.119999997);
  objc_msgSend(self->_highlightLongPressGestureRecognizer.m_ptr, "setDelegate:", self);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_highlightLongPressGestureRecognizer.m_ptr);
}

- (void)_configureMouseGestureRecognizer
{
  objc_msgSend(self->_mouseInteraction.m_ptr, "setEnabled:", -[WKContentView shouldUseMouseGestureRecognizer](self, "shouldUseMouseGestureRecognizer"));
}

- (BOOL)shouldUseMouseGestureRecognizer
{
  char v2;
  uint64_t isNews;
  uint64_t v5;
  uint64_t v6;
  uint64_t isFIFACompanion;
  uint64_t isNoggin;
  uint64_t isOKCupid;
  uint64_t isJWLibrary;
  uint64_t isPaperIO;
  const char *v12;
  uint64_t isPocketCity;
  uint64_t isEssentialSkeleton;
  uint64_t isESPNFantasySports;
  WKContentView *v16;
  uint8_t buf[4];
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (byte_1EE341A51 == 1)
  {
    v2 = _MergedGlobals_856 != 0;
    goto LABEL_3;
  }
  v16 = self;
  isNews = WebCore::IOSApplication::isNews((WebCore::IOSApplication *)self);
  if ((isNews & 1) != 0 || (WebCore::IOSApplication::isStocks((WebCore::IOSApplication *)isNews) & 1) != 0)
    goto LABEL_25;
  v5 = WTF::linkedOnOrAfterSDKWithBehavior();
  if ((v5 & 1) == 0)
  {
    isFIFACompanion = WebCore::IOSApplication::isFIFACompanion((WebCore::IOSApplication *)v5);
    if ((isFIFACompanion & 1) != 0
      || (isNoggin = WebCore::IOSApplication::isNoggin((WebCore::IOSApplication *)isFIFACompanion), (isNoggin & 1) != 0)
      || (isOKCupid = WebCore::IOSApplication::isOKCupid((WebCore::IOSApplication *)isNoggin), (isOKCupid & 1) != 0)
      || (isJWLibrary = WebCore::IOSApplication::isJWLibrary((WebCore::IOSApplication *)isOKCupid),
          (isJWLibrary & 1) != 0)
      || (isPaperIO = WebCore::IOSApplication::isPaperIO((WebCore::IOSApplication *)isJWLibrary), (isPaperIO & 1) != 0)
      || (WebCore::IOSApplication::isCrunchyroll((WebCore::IOSApplication *)isPaperIO) & 1) != 0)
    {
      v12 = "14.2";
      goto LABEL_23;
    }
  }
  v6 = WTF::linkedOnOrAfterSDKWithBehavior();
  if ((v6 & 1) == 0)
  {
    isPocketCity = WebCore::IOSApplication::isPocketCity((WebCore::IOSApplication *)v6);
    if ((isPocketCity & 1) != 0
      || (isEssentialSkeleton = WebCore::IOSApplication::isEssentialSkeleton((WebCore::IOSApplication *)isPocketCity),
          (isEssentialSkeleton & 1) != 0)
      || (isESPNFantasySports = WebCore::IOSApplication::isESPNFantasySports((WebCore::IOSApplication *)isEssentialSkeleton),
          (isESPNFantasySports & 1) != 0)
      || WebCore::IOSApplication::isDoubleDown((WebCore::IOSApplication *)isESPNFantasySports))
    {
      v12 = "13.4";
LABEL_23:
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v18 = v12;
        _os_log_error_impl(&dword_196BCC000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "WARNING: This application has been observed to ignore mouse events in web content; touch events will be sent u"
          "ntil it is built against the iOS %s SDK, but after that, the web content must respect mouse or pointer events "
          "in addition to touch events in order to behave correctly when a trackpad or mouse is used.",
          buf,
          0xCu);
      }
LABEL_25:
      v2 = 0;
      goto LABEL_26;
    }
  }
  v2 = 1;
LABEL_26:
  _MergedGlobals_856 = v2;
  byte_1EE341A51 = 1;
  self = v16;
LABEL_3:
  if (self->_mouseEventPolicy == 1)
    return 0;
  else
    return v2;
}

- (BOOL)_mayDisableDoubleTapGesturesDuringSingleTap
{
  return BYTE4(self->_dataListTextSuggestionsInputView.m_ptr);
}

- (void)_accessibilityRegisterUIProcessTokens
{
  void *v3;
  NSUUID *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v5 = WebKit::newAccessibilityRemoteToken(v3, v4);
  v6 = *((_QWORD *)self->_page.m_ptr + 26);
  v7 = *(_QWORD *)(v6 + 136);
  if ((!v7 || !*(_BYTE *)(v7 + 104)) && *(_QWORD *)(v6 + 144))
  {
    -[WKContentView _updateRemoteAccessibilityRegistration:](self, "_updateRemoteAccessibilityRegistration:", 1);
    v8 = *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 26) + 136);
    if (v8)
      v9 = *(unsigned int *)(v8 + 108);
    else
      v9 = 0;
    objc_setAssociatedObject(self, (const void *)objc_msgSend(CFSTR("ax-uuid"), "hash"), v3, (void *)1);
    v10 = (const void *)objc_msgSend(CFSTR("ax-pid"), "hash");
    objc_setAssociatedObject(self, v10, (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v9), (void *)1);
    if (v5)
    {
      v11 = objc_msgSend(v5, "bytes");
      v12 = objc_msgSend(v5, "length");
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    WebKit::WebPageProxy::registerUIProcessAccessibilityTokens((uint64_t)self->_page.m_ptr, v11, v12, v11, v12);
  }
}

- (void)_applicationDidBecomeActive:(id)a3
{
  WebKit::WebPageProxy::applicationDidBecomeActive((WebKit::WebPageProxy *)self->_page.m_ptr);
}

- (void)willMoveToWindow:(id)a3
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  objc_super v8;

  v8.receiver = self;
  v8.super_class = (Class)WKContentView;
  -[WKApplicationStateTrackingView willMoveToWindow:](&v8, sel_willMoveToWindow_);
  v5 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v6 = -[WKContentView window](self, "window");
  if (v6)
  {
    v7 = *MEMORY[0x1E0CEBE08];
    objc_msgSend(v5, "removeObserver:name:object:", self, *MEMORY[0x1E0CEBE08], v6);
    if (!a3)
    {
      -[WKContentView dismissPickersIfNeededWithReason:](self, "dismissPickersIfNeededWithReason:", 1);
      return;
    }
  }
  else
  {
    if (!a3)
      return;
    v7 = *MEMORY[0x1E0CEBE08];
  }
  objc_msgSend(v5, "addObserver:selector:name:object:", self, sel__windowDidMoveToScreenNotification_, v7, a3);
  -[WKContentView _updateForScreen:](self, "_updateForScreen:", objc_msgSend(a3, "screen"));
}

- (void)_updateForScreen:(id)a3
{
  WebPageProxy *m_ptr;
  float v5;
  uint64_t v6;

  m_ptr = self->_page.m_ptr;
  WebCore::screenScaleFactor((WebCore *)a3, (UIScreen *)a2);
  if (*((float *)m_ptr + 172) != v5)
  {
    *((float *)m_ptr + 172) = v5;
    v6 = *((_QWORD *)m_ptr + 23);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  }
  -[WKContentView _accessibilityRegisterUIProcessTokens](self, "_accessibilityRegisterUIProcessTokens");
}

- (unique_ptr<WebKit::DrawingAreaProxy,)_createDrawingAreaProxy:(void *)a3
{
  uint64_t *v3;
  uint64_t *v5;
  WebPageProxy *m_ptr;
  uint64_t v7;
  WebKit::RemoteLayerTreeDrawingAreaProxy *v8;

  v5 = v3;
  m_ptr = self->_page.m_ptr;
  v7 = WTF::fastMalloc((WTF *)0xF0);
  v8 = WebKit::RemoteLayerTreeDrawingAreaProxy::RemoteLayerTreeDrawingAreaProxy((WebKit::RemoteLayerTreeDrawingAreaProxy *)v7, (WebKit::WebPageProxy *)m_ptr, (WebKit::WebProcessProxy *)a3);
  *(_QWORD *)v7 = off_1E34CBA08;
  *(_QWORD *)(v7 + 16) = &unk_1E34CBBB0;
  *(_QWORD *)(v7 + 224) = 0;
  *(_WORD *)(v7 + 232) = 0;
  *v5 = v7;
  return (unique_ptr<WebKit::DrawingAreaProxy, std::default_delete<WebKit::DrawingAreaProxy>>)v8;
}

- (id)extendedTraitsDelegate
{
  void *v4;
  void *m_ptr;

  if (-[WKContentView _requiresLegacyTextInputTraits](self, "_requiresLegacyTextInputTraits"))
    return -[WKContentView textInputTraits](self, "textInputTraits");
  if (!self->_extendedTextInputTraits.m_ptr)
  {
    v4 = (void *)objc_opt_new();
    m_ptr = self->_extendedTextInputTraits.m_ptr;
    self->_extendedTextInputTraits.m_ptr = v4;
    if (m_ptr)
      CFRelease(m_ptr);
  }
  if (-[WKContentView _hasFocusedElement](self, "_hasFocusedElement") || self->_potentialTapInProgress)
  {
    if (!self->_isDoubleTapPending)
      -[WKContentView _updateTextInputTraits:](self, "_updateTextInputTraits:", self->_extendedTextInputTraits.m_ptr);
  }
  else
  {
    objc_msgSend(self->_extendedTextInputTraits.m_ptr, "restoreDefaultValues");
    objc_msgSend(self->_extendedTextInputTraits.m_ptr, "setSelectionColorsToMatchTintColor:", -[WKContentView _cascadeInteractionTintColor](self, "_cascadeInteractionTintColor"));
  }
  return self->_extendedTextInputTraits.m_ptr;
}

- (UITextInputTraits)textInputTraitsForWebView
{
  void *m_ptr;
  void *v4;

  m_ptr = self->_legacyTextInputTraits.m_ptr;
  if (!m_ptr)
  {
    m_ptr = (void *)objc_opt_new();
    v4 = self->_legacyTextInputTraits.m_ptr;
    self->_legacyTextInputTraits.m_ptr = m_ptr;
    if (v4)
    {
      CFRelease(v4);
      m_ptr = self->_legacyTextInputTraits.m_ptr;
    }
  }
  if (!self->_isDoubleTapPending)
  {
    -[WKContentView _updateTextInputTraits:](self, "_updateTextInputTraits:", m_ptr);
    return (UITextInputTraits *)self->_legacyTextInputTraits.m_ptr;
  }
  return (UITextInputTraits *)m_ptr;
}

- (void)tintColorDidChange
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)WKContentView;
  -[WKContentView tintColorDidChange](&v3, sel_tintColorDidChange);
  if (self->_needsDeferredEndScrollingSelectionUpdate)
    self->_needsDeferredEndScrollingSelectionUpdate = 0;
  if (-[WKContentView isFirstResponder](self, "isFirstResponder")
    && -[WKContentView canShowNonEmptySelectionView](self, "canShowNonEmptySelectionView"))
  {
    objc_msgSend(self->_textInteractionWrapper.m_ptr, "deactivateSelection");
    -[WKContentView _updateTextInputTraitsForInteractionTintColor](self, "_updateTextInputTraitsForInteractionTintColor");
    objc_msgSend(self->_textInteractionWrapper.m_ptr, "activateSelection");
  }
  else
  {
    -[WKContentView _updateTextInputTraitsForInteractionTintColor](self, "_updateTextInputTraitsForInteractionTintColor");
  }
  WebKit::WebPageProxy::insertionPointColorDidChange((WebKit::WebPageProxy *)self->_page.m_ptr);
}

- (void)_updateTextInputTraits:(id)a3
{
  FocusedElementInformation *p_focusedElementInformation;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  int v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  _BOOL8 v22;
  WebPageProxy *m_ptr;
  uint64_t v24;
  unsigned __int8 *v25;

  p_focusedElementInformation = &self->_focusedElementInformation;
  if (self->_anon_938[113] == 3)
    v6 = 1;
  else
    v6 = objc_msgSend(self->_formInputSession.m_ptr, "forceSecureTextEntry");
  objc_msgSend(a3, "setSecureTextEntry:", v6);
  v7 = p_focusedElementInformation[2].elementContext.documentIdentifier.m_object[3] - 1;
  if (v7 < 7 && ((0x6Fu >> v7) & 1) != 0)
  {
    v9 = qword_1978D2AB0[(char)v7];
  }
  else
  {
    v8 = *(_QWORD *)&p_focusedElementInformation[2].elementContext.documentIdentifier.m_object[8];
    if (!v8 || !*(_DWORD *)(v8 + 4))
      goto LABEL_13;
    if (p_focusedElementInformation[2].elementContext.documentIdentifier.m_object[1] == 5)
      v9 = 6;
    else
      v9 = 1;
  }
  objc_msgSend(a3, "setReturnKeyType:", v9);
LABEL_13:
  v10 = p_focusedElementInformation[2].elementContext.documentIdentifier.m_object[1];
  v11 = 1;
  v12 = v10 > 7;
  v13 = (1 << v10) & 0xC8;
  if (v12 || v13 == 0)
  {
    if (!*(_QWORD *)&p_focusedElementInformation[2].elementContext.documentIdentifier.m_object[8])
    {
      if ((objc_opt_respondsToSelector() & 1) == 0)
      {
        if ((objc_opt_respondsToSelector() & 1) == 0)
          goto LABEL_40;
        goto LABEL_36;
      }
LABEL_24:
      v16 = p_focusedElementInformation[2].elementContext.documentIdentifier.m_object[0];
      if (v16 == 4)
      {
        v11 = 0;
        v15 = 3;
      }
      else if (v16 == 2)
      {
        v11 = 0;
        v15 = 1;
      }
      else
      {
        v11 = 0;
        if (v16 == 1)
          v15 = 0;
        else
          v15 = 2;
      }
      goto LABEL_31;
    }
    v11 = WTF::StringImpl::find() != -1;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
    goto LABEL_32;
  if (!v11)
    goto LABEL_24;
  v15 = 0;
  v11 = 1;
LABEL_31:
  objc_msgSend(a3, "setAutocapitalizationType:", v15);
LABEL_32:
  if ((objc_opt_respondsToSelector() & 1) == 0)
    goto LABEL_40;
  if (!v11)
  {
LABEL_36:
    if (LOBYTE(p_focusedElementInformation[2].elementContext.webPageIdentifier.m_identifier))
      v17 = 2;
    else
      v17 = 1;
    goto LABEL_39;
  }
  v17 = 1;
LABEL_39:
  objc_msgSend(a3, "setAutocorrectionType:", v17);
LABEL_40:
  if (!BYTE2(p_focusedElementInformation[5].interactionRect.m_location.m_x))
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(a3, "setSmartQuotesType:", 1);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(a3, "setSmartDashesType:", 1);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(a3, "setSpellCheckingType:", 1);
  }
  v18 = 0;
  switch(p_focusedElementInformation[2].elementContext.documentIdentifier.m_object[2])
  {
    case 0u:
    case 1u:
      v19 = (char)p_focusedElementInformation[2].elementContext.documentIdentifier.m_object[1];
      if (v19 < 0x13)
      {
        v18 = qword_1978D2AE8[v19];
        goto LABEL_56;
      }
      break;
    case 2u:
      goto LABEL_56;
    case 3u:
      v18 = 5;
      goto LABEL_56;
    case 4u:
      v18 = 3;
      goto LABEL_56;
    case 5u:
      v18 = 7;
      goto LABEL_56;
    case 6u:
      v18 = 4;
      goto LABEL_56;
    case 7u:
      v18 = 8;
      goto LABEL_56;
    case 8u:
      v18 = 10;
LABEL_56:
      objc_msgSend(a3, "setKeyboardType:", v18);
      break;
    default:
      break;
  }
  objc_msgSend(a3, "setTextContentType:", -[WKContentView contentTypeFromFieldName:](self, "contentTypeFromFieldName:", LOBYTE(p_focusedElementInformation[4].interactionRect.m_size.m_width)));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v20 = a3;
  else
    v20 = 0;
  v21 = (p_focusedElementInformation[2].elementContext.documentIdentifier.m_object[1] < 0x13uLL) & (0x7FFECu >> p_focusedElementInformation[2].elementContext.documentIdentifier.m_object[1]);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v20, "setSingleLineDocument:", v21);
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(a3, "setIsSingleLineDocument:", v21);
  }
  if (LOBYTE(p_focusedElementInformation[5].interactionRect.m_location.m_x))
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(a3, "setLearnsCorrections:", 0);
    objc_msgSend(v20, "setTypingAdaptationEnabled:", 0);
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(a3, "setShortcutConversionType:", p_focusedElementInformation[2].elementContext.documentIdentifier.m_object[1] == 3);
  if ((objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "configuration"), "allowsInlinePredictions") & 1) != 0)
  {
    v22 = 0;
  }
  else
  {
    m_ptr = self->_page.m_ptr;
    v24 = *((_QWORD *)m_ptr + 4);
    if (!*(_BYTE *)(v24 + 560) || self->_potentialTapInProgress || *((_BYTE *)m_ptr + 1032))
      v25 = (unsigned __int8 *)&p_focusedElementInformation[5].interactionRect.m_location + 3;
    else
      v25 = (unsigned __int8 *)(v24 + 291);
    v22 = *v25 == 0;
  }
  objc_msgSend(a3, "setInlinePredictionType:", v22);
  -[WKContentView _updateTextInputTraitsForInteractionTintColor](self, "_updateTextInputTraitsForInteractionTintColor");
}

- (id)_cascadeInteractionTintColor
{
  const WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  Color *v6;
  const void *v7;
  void *v9;
  int v10;
  void *v11;
  CFTypeRef v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  const void *v19;
  uint64_t v20;

  if ((objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "configuration"), "_textInteractionGesturesEnabled") & 1) == 0)return (id)objc_msgSend(MEMORY[0x1E0CEA478], "clearColor");
  v4 = *((_QWORD *)self->_page.m_ptr + 28);
  {
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key, v3) & 1) == 0)return (id)objc_msgSend(MEMORY[0x1E0CEA478], "clearColor");
  v5 = *((_QWORD *)self->_page.m_ptr + 4);
  if (!*(_BYTE *)(v5 + 560))
    goto LABEL_8;
  WebCore::Color::Color((WebCore::Color *)&v20, (const Color *)(v5 + 352));
  if ((v20 & 0x4000000000000) == 0)
  {
    if ((v20 & 0x8000000000000) != 0)
    {
      v13 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v6);
      }
    }
LABEL_8:
    v7 = 0;
LABEL_12:
    v11 = (void *)-[WKContentView tintColor](self, "tintColor");
    if (-[WKContentView _hasCustomTintColor](self, "_hasCustomTintColor"))
    {
      if (v7)
        CFRelease(v7);
    }
    else
    {
      v12 = (id)CFMakeCollectable(v7);
      if (v12)
        return (id)v12;
    }
    return v11;
  }
  WebCore::cocoaColor((WebCore *)&v20, v6);
  v7 = v19;
  v10 = *(unsigned __int8 *)(v5 + 360);
  if ((v20 & 0x8000000000000) != 0)
  {
    v16 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v9);
    }
  }
  if (v10)
    goto LABEL_12;
  return (id)(id)CFMakeCollectable(v19);
}

- (BOOL)_hasCustomTintColor
{
  BOOL *p_resigningFirstResponder;
  void *v4;
  WebCore *v5;
  UIColor *v6;
  WebCore *v7;
  UIColor *v8;
  void *v9;
  __int16 v10;
  _BOOL8 v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  unint64_t v20;
  __int128 v21;
  __int16 v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;

  p_resigningFirstResponder = &self->_resigningFirstResponder;
  if (self->_needsDeferredEndScrollingSelectionUpdate)
    return *p_resigningFirstResponder;
  v4 = (void *)objc_opt_new();
  v5 = (WebCore *)objc_msgSend(v4, "tintColor");
  WebCore::colorFromCocoaColor(v5, v6);
  if (v4)
    CFRelease(v4);
  v7 = (WebCore *)-[WKContentView tintColor](self, "tintColor");
  WebCore::colorFromCocoaColor(v7, v8);
  if ((v24 & 0x8000000000000) == 0)
  {
    if (v24 == v23)
      v10 = (v23 >> 51) & 1;
    else
      v10 = 1;
    *(_WORD *)p_resigningFirstResponder = v10 | 0x100;
    if ((v23 & 0x8000000000000) == 0)
      goto LABEL_9;
    v16 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    do
    {
LABEL_18:
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v9);
    }
    goto LABEL_9;
  }
  if ((v23 & 0x8000000000000) != 0)
  {
    v19 = 0;
    v20 = 0;
    v21 = *(_OWORD *)((v24 & 0xFFFFFFFFFFFFLL) + 4);
    v16 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    v25 = *(_OWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 4);
    v26 = v21;
    do
    {
      if (*((float *)&v26 + v20) != *((float *)&v25 + v20))
        break;
      v19 = v20++ > 2;
    }
    while (v20 != 4);
    v22 = BYTE6(v24) != BYTE6(v23);
    if (HIBYTE(v24) != HIBYTE(v23))
      v22 = 1;
    if (!v19)
      v22 = 1;
    *(_WORD *)p_resigningFirstResponder = v22 | 0x100;
    goto LABEL_18;
  }
  *(_WORD *)p_resigningFirstResponder = 257;
LABEL_9:
  v11 = v24;
  if ((v24 & 0x8000000000000) != 0)
    goto LABEL_13;
  while (1)
  {
    v11 = p_resigningFirstResponder[1];
    if (p_resigningFirstResponder[1])
      break;
    __break(1u);
LABEL_13:
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v9);
    }
  }
  return *p_resigningFirstResponder;
}

- (void)_updateTextInputTraitsForInteractionTintColor
{
  id v3;

  v3 = -[WKContentView _cascadeInteractionTintColor](self, "_cascadeInteractionTintColor");
  objc_msgSend(self->_legacyTextInputTraits.m_ptr, "_setColorsToMatchTintColor:", v3);
  objc_msgSend(self->_extendedTextInputTraits.m_ptr, "setSelectionColorsToMatchTintColor:", v3);
}

- (id)contentTypeFromFieldName:(unsigned __int8)a3
{
  id result;
  id *v5;
  int shouldAllowAutoFillForCellularIdentifiers;
  void **v7;
  void *v8;

  result = 0;
  switch(a3)
  {
    case 1u:
      v5 = (id *)MEMORY[0x1E0CEBC90];
      return *v5;
    case 2u:
      v5 = (id *)MEMORY[0x1E0CEBC98];
      return *v5;
    case 3u:
      v5 = (id *)MEMORY[0x1E0CEBC78];
      return *v5;
    case 4u:
      v5 = (id *)MEMORY[0x1E0CEBC88];
      return *v5;
    case 5u:
      v5 = (id *)MEMORY[0x1E0CEBC60];
      return *v5;
    case 6u:
      v5 = (id *)MEMORY[0x1E0CEBCA0];
      return *v5;
    case 7u:
      v5 = (id *)MEMORY[0x1E0CEBCB0];
      return *v5;
    case 8u:
    case 0x36u:
      v5 = (id *)MEMORY[0x1E0CEBD10];
      return *v5;
    case 0xBu:
      v5 = (id *)MEMORY[0x1E0CEBC80];
      return *v5;
    case 0xCu:
      v5 = (id *)MEMORY[0x1E0CEBCC8];
      return *v5;
    case 0xDu:
      v5 = (id *)MEMORY[0x1E0CEBC70];
      return *v5;
    case 0xEu:
      v5 = (id *)MEMORY[0x1E0CEBCE8];
      return *v5;
    case 0xFu:
      v5 = (id *)MEMORY[0x1E0CEBCF0];
      return *v5;
    case 0x12u:
      v5 = (id *)MEMORY[0x1E0CEBCF8];
      return *v5;
    case 0x13u:
      v5 = (id *)MEMORY[0x1E0CEBC20];
      return *v5;
    case 0x14u:
      v5 = (id *)MEMORY[0x1E0CEBC28];
      return *v5;
    case 0x16u:
      v5 = (id *)MEMORY[0x1E0CEBC40];
      return *v5;
    case 0x17u:
      v5 = (id *)MEMORY[0x1E0CEBCD8];
      return *v5;
    case 0x2Au:
      v5 = (id *)MEMORY[0x1E0CEBD08];
      return *v5;
    case 0x2Cu:
      v5 = (id *)MEMORY[0x1E0CEBD00];
      return *v5;
    case 0x34u:
      v5 = (id *)MEMORY[0x1E0CEBC58];
      return *v5;
    case 0x37u:
      v5 = (id *)MEMORY[0x1E0CEBCC0];
      return *v5;
    case 0x38u:
      shouldAllowAutoFillForCellularIdentifiers = WebKit::WebPageProxy::shouldAllowAutoFillForCellularIdentifiers((WebKit::WebPageProxy *)self->_page.m_ptr);
      v7 = (void **)MEMORY[0x1E0CEBC30];
      goto LABEL_28;
    case 0x39u:
      shouldAllowAutoFillForCellularIdentifiers = WebKit::WebPageProxy::shouldAllowAutoFillForCellularIdentifiers((WebKit::WebPageProxy *)self->_page.m_ptr);
      v7 = (void **)MEMORY[0x1E0CEBC38];
LABEL_28:
      v8 = *v7;
      if (shouldAllowAutoFillForCellularIdentifiers)
        result = v8;
      else
        result = 0;
      break;
    default:
      return result;
  }
  return result;
}

- (BOOL)_requiresLegacyTextInputTraits
{
  BOOL *p_isWaitingOnPositionInformation;
  __int16 v3;
  WeakObjCPtr<WKWebView> *p_webView;
  uint64_t v6;
  IMP MethodImplementation;
  objc_class *v8;
  objc_class *v9;

  p_isWaitingOnPositionInformation = &self->_isWaitingOnPositionInformation;
  if (self->_autocorrectionContextNeedsUpdate)
  {
    LOBYTE(v3) = *p_isWaitingOnPositionInformation;
  }
  else
  {
    if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
    {
      p_webView = &self->_webView;
      objc_loadWeak(&p_webView->m_weakReference);
      v6 = objc_opt_class();
      if (v6 == objc_opt_class())
      {
        v3 = 0;
      }
      else
      {
        if (byte_1EE341A57 == 1)
        {
          MethodImplementation = (IMP)qword_1EE341AC8;
        }
        else
        {
          v9 = (objc_class *)objc_opt_class();
          MethodImplementation = class_getMethodImplementation(v9, sel__textInputTraits);
          qword_1EE341AC8 = (uint64_t)MethodImplementation;
          byte_1EE341A57 = 1;
        }
        objc_loadWeak(&p_webView->m_weakReference);
        v8 = (objc_class *)objc_opt_class();
        v3 = MethodImplementation != class_getMethodImplementation(v8, sel__textInputTraits);
      }
    }
    else
    {
      v3 = 1;
    }
    *(_WORD *)p_isWaitingOnPositionInformation = v3 | 0x100;
  }
  return v3;
}

- (void)observeValueForKeyPath:(id)a3 ofObject:(id)a4 change:(id)a5 context:(void *)a6
{
  _QWORD v7[5];
  objc_super v8;

  if ((void *)WKContentViewKVOTransformContext == a6)
  {
    if (objc_msgSend(MEMORY[0x1E0CEABB0], "_isInAnimationBlock", a3, a4, a5)
      && *(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 233))
    {
      -[WKContentView _cancelInteraction](self, "_cancelInteraction");
      objc_msgSend(self->_interactionViewsContainerView.m_ptr, "setHidden:", 1);
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __79__WKContentView_WKInteraction__observeValueForKeyPath_ofObject_change_context___block_invoke;
      v7[3] = &unk_1E34CF1C8;
      v7[4] = self;
      objc_msgSend(MEMORY[0x1E0CEABB0], "_addCompletion:", v7);
    }
    -[WKContentView _updateTapHighlight](self, "_updateTapHighlight");
    if (!*(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 233)
      || *(_DWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[40])
    {
      LOBYTE(self->_dataListTextSuggestions.m_ptr) = 1;
      -[WKContentView _updateChangedSelection:](self, "_updateChangedSelection:", 1);
    }
  }
  else
  {
    v8.receiver = self;
    v8.super_class = (Class)WKContentView;
    -[WKContentView observeValueForKeyPath:ofObject:change:context:](&v8, sel_observeValueForKeyPath_ofObject_change_context_, a3, a4, a5);
  }
}

- (void)_updateTapHighlight
{
  const Color *v3;
  void *m_ptr;
  const void *m_p1;
  uint64_t m_size;
  FloatQuad *m_buffer;
  uint64_t v8;
  int isRectilinear;
  uint64_t v10;
  void *v11;
  double v12;
  WebPageProxy *v13;
  uint64_t v14;
  float v15;
  void *v16;
  uint64_t v17;
  FloatQuad *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  float v24;
  float v25;
  void *v26;
  const FloatRect *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  float32x2_t *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  float v43;
  float v44;
  float32x2_t v45;
  uint64_t v46;
  FloatQuad *v47;
  float v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  WTF *v55;
  float v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  WTF *v60;
  void *v61;
  float v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float v66;
  WTF *v67;
  uint64_t v68;
  FloatQuad cf[4];
  FloatQuad v70;

  if (!objc_msgSend(self->_tapHighlightView.m_ptr, "superview"))
    return;
  m_ptr = self->_tapHighlightView.m_ptr;
  WebCore::cocoaColor((WebCore *)&self->_tapHighlightInformation.color, v3);
  objc_msgSend(m_ptr, "setColor:", *(_QWORD *)&cf[0].m_p1);
  m_p1 = (const void *)cf[0].m_p1;
  cf[0].m_p1 = 0;
  if (m_p1)
    CFRelease(m_p1);
  m_size = self->_tapHighlightInformation.quads.m_size;
  if ((_DWORD)m_size)
  {
    m_buffer = self->_tapHighlightInformation.quads.m_buffer;
    v8 = 32 * m_size - 32;
    do
    {
      isRectilinear = WebCore::FloatQuad::isRectilinear((WebCore::FloatQuad *)m_buffer);
      if (!isRectilinear)
        break;
      ++m_buffer;
      v10 = v8;
      v8 -= 32;
    }
    while (v10);
  }
  else
  {
    isRectilinear = 1;
  }
  v11 = (void *)-[WKContentView layer](self, "layer");
  if (v11)
  {
    objc_msgSend(v11, "transform");
    v12 = *(double *)&cf[0].m_p1;
    if (isRectilinear)
    {
LABEL_12:
      v13 = self->_page.m_ptr;
      v14 = 692;
      if (!*((_BYTE *)v13 + 696))
        v14 = 688;
      v15 = *(float *)((char *)v13 + v14);
      v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", self->_tapHighlightInformation.quads.m_size);
      v17 = self->_tapHighlightInformation.quads.m_size;
      if (!(_DWORD)v17)
      {
        v34 = self->_tapHighlightView.m_ptr;
        v70.m_p1 = 0;
        v70.m_p2 = 0;
        goto LABEL_36;
      }
      v18 = self->_tapHighlightInformation.quads.m_buffer;
      v19 = 32 * v17;
      do
      {
        WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)v18);
        cf[0].m_p1 = (FloatPoint)__PAIR64__(v21, v20);
        cf[0].m_p2 = (FloatPoint)__PAIR64__(v23, v22);
        v24 = v12;
        v25 = v12;
        WebCore::FloatRect::scale((WebCore::FloatRect *)cf, v24, v25);
        cf[0].m_p1 = (FloatPoint)vadd_f32((float32x2_t)cf[0].m_p1, (float32x2_t)0xC0000000C0000000);
        cf[0].m_p2 = (FloatPoint)vadd_f32(vadd_f32((float32x2_t)cf[0].m_p2, (float32x2_t)0x4000000040000000), (float32x2_t)0x4000000040000000);
        v26 = (void *)MEMORY[0x1E0CB3B18];
        WebCore::encloseRectToDevicePixels((WebCore *)cf, v27, v15);
        v70.m_p1.m_x = v28;
        v70.m_p1.m_y = v29;
        v70.m_p2.m_x = v30;
        v70.m_p2.m_y = v31;
        WebCore::FloatRect::operator CGRect();
        v32 = objc_msgSend(v26, "valueWithCGRect:");
        if (v32)
          objc_msgSend(v16, "addObject:", v32);
        ++v18;
        v19 -= 32;
      }
      while (v19);
      v33 = self->_tapHighlightInformation.quads.m_size;
      v34 = self->_tapHighlightView.m_ptr;
      v70.m_p1 = 0;
      v70.m_p2 = 0;
      if (!(_DWORD)v33)
      {
LABEL_36:
        objc_msgSend(v34, "setFrames:", &v70);
        v60 = (WTF *)v70.m_p1;
        if (v70.m_p1)
        {
          v70.m_p1 = 0;
          v70.m_p2.m_x = 0.0;
LABEL_41:
          WTF::fastFree(v60, v59);
          goto LABEL_42;
        }
        goto LABEL_42;
      }
      if (!(v33 >> 28))
      {
        v35 = WTF::fastMalloc((WTF *)(16 * v33));
        LODWORD(v70.m_p2.m_x) = v33;
        v70.m_p1 = (FloatPoint)v35;
        if (self->_tapHighlightInformation.quads.m_size)
        {
          v36 = 0;
          v37 = 0;
          v38 = (float32x2_t *)(v35 + 8);
          do
          {
            WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)&self->_tapHighlightInformation.quads.m_buffer[v36]);
            cf[0].m_p1 = (FloatPoint)__PAIR64__(v40, v39);
            cf[0].m_p2 = (FloatPoint)__PAIR64__(v42, v41);
            v43 = v12;
            v44 = v12;
            WebCore::FloatRect::scale((WebCore::FloatRect *)cf, v43, v44);
            v45 = vadd_f32(vadd_f32((float32x2_t)cf[0].m_p2, (float32x2_t)0x4000000040000000), (float32x2_t)0x4000000040000000);
            v38[-1] = vadd_f32((float32x2_t)cf[0].m_p1, (float32x2_t)0xC0000000C0000000);
            *v38 = v45;
            ++v37;
            v38 += 2;
            ++v36;
          }
          while (v37 < self->_tapHighlightInformation.quads.m_size);
          LODWORD(v70.m_p2.m_y) = v37;
        }
        goto LABEL_36;
      }
LABEL_46:
      __break(0xC471u);
      JUMPOUT(0x196CF1C34);
    }
  }
  else
  {
    v12 = 0.0;
    if (isRectilinear)
      goto LABEL_12;
  }
  v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 4 * self->_tapHighlightInformation.quads.m_size);
  v46 = self->_tapHighlightInformation.quads.m_size;
  if ((_DWORD)v46)
  {
    v47 = self->_tapHighlightInformation.quads.m_buffer;
    v48 = v12;
    v49 = 32 * v46;
    v66 = v48;
    do
    {
      cf[0] = *v47;
      *(float32x4_t *)&cf[0].m_p1.m_x = vmulq_n_f32(*(float32x4_t *)&cf[0].m_p1.m_x, v48);
      *(float32x4_t *)&cf[0].m_p3.m_x = vmulq_n_f32(*(float32x4_t *)&cf[0].m_p3.m_x, v48);
      inflateQuad(&v70, cf[0].m_p1.m_x, (float *)&cf[0].m_p1);
      v50 = (void *)MEMORY[0x1E0CB3B18];
      WebCore::FloatPoint::operator CGPoint();
      objc_msgSend(v16, "addObject:", objc_msgSend(v50, "valueWithCGPoint:"));
      v51 = (void *)MEMORY[0x1E0CB3B18];
      WebCore::FloatPoint::operator CGPoint();
      objc_msgSend(v16, "addObject:", objc_msgSend(v51, "valueWithCGPoint:"));
      v52 = (void *)MEMORY[0x1E0CB3B18];
      WebCore::FloatPoint::operator CGPoint();
      objc_msgSend(v16, "addObject:", objc_msgSend(v52, "valueWithCGPoint:"));
      v53 = (void *)MEMORY[0x1E0CB3B18];
      WebCore::FloatPoint::operator CGPoint();
      objc_msgSend(v16, "addObject:", objc_msgSend(v53, "valueWithCGPoint:"));
      ++v47;
      v49 -= 32;
      v48 = v66;
    }
    while (v49);
    v54 = self->_tapHighlightInformation.quads.m_size;
    v67 = 0;
    v68 = 0;
    if ((_DWORD)v54)
    {
      if (v54 >> 27)
        goto LABEL_46;
      v55 = (WTF *)WTF::fastMalloc((WTF *)(32 * v54));
      LODWORD(v68) = v54;
      v67 = v55;
      v56 = v66;
      if (self->_tapHighlightInformation.quads.m_size)
      {
        v57 = 0;
        v58 = 0;
        do
        {
          v70 = self->_tapHighlightInformation.quads.m_buffer[v57];
          *(float32x4_t *)&v70.m_p1.m_x = vmulq_n_f32(*(float32x4_t *)&v70.m_p1.m_x, v56);
          *(float32x4_t *)&v70.m_p3.m_x = vmulq_n_f32(*(float32x4_t *)&v70.m_p3.m_x, v56);
          inflateQuad(cf, v70.m_p1.m_x, (float *)&v70.m_p1);
          v56 = v66;
          *(FloatQuad *)((char *)v55 + v57 * 32) = cf[0];
          ++v58;
          ++v57;
        }
        while (v58 < self->_tapHighlightInformation.quads.m_size);
        HIDWORD(v68) = v58;
      }
    }
  }
  else
  {
    v67 = 0;
    v68 = 0;
  }
  objc_msgSend(self->_tapHighlightView.m_ptr, "setQuads:boundaryRect:", &v67, *((_QWORD *)self->_page.m_ptr + 4) + 2256);
  v60 = v67;
  if (v67)
  {
    v67 = 0;
    LODWORD(v68) = 0;
    goto LABEL_41;
  }
LABEL_42:
  if (v16)
    CFRelease(v16);
  v61 = self->_tapHighlightView.m_ptr;
  v62 = v12;
  v63.i64[0] = 0x4000000040000000;
  v63.i64[1] = 0x4000000040000000;
  v64 = vaddq_f32(vmulq_n_f32(vcvtq_f32_s32(*(int32x4_t *)&self->_tapHighlightInformation.topLeftRadius.m_width), v62), v63);
  v65 = vaddq_f32(vmulq_n_f32(vcvtq_f32_s32(*(int32x4_t *)&self->_tapHighlightInformation.bottomLeftRadius.m_width), v62), v63);
  *(float32x4_t *)&cf[0].m_p1.m_x = v64;
  *(float32x4_t *)&cf[0].m_p3.m_x = v65;
  objc_msgSend(v61, "setCornerRadii:", cf);
}

- (void)_updateChangedSelection:(BOOL)a3
{
  uint64_t v3;
  BOOL v5;
  int *v6;
  unsigned __int8 *v7;
  int v8;
  BOOL v9;
  unint64_t m_identifier;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::SelectionGeometry *v15;
  WebCore::SelectionGeometry *v16;
  float *v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  uint64_t v25;
  const char *v26;
  SEL v27;
  BOOL v28;
  SelectionGeometry *m_buffer;
  int *v30;
  char *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  const __CFString *v34;
  char v35;
  RetainPtr<NSString> *p_markedText;
  id m_ptr;
  WKContentView *v38;
  WTF *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE v46[20];
  WTF *v47[2];
  _BYTE v48[24];
  __int128 v49;
  __int128 v50;

  v3 = *((_QWORD *)self->_page.m_ptr + 4);
  if (!*(_BYTE *)(v3 + 560) || !*(_BYTE *)(v3 + 688))
    return;
  memset(v46, 0, sizeof(v46));
  *(_OWORD *)v47 = 0u;
  memset(v48, 0, sizeof(v48));
  if (!*(_BYTE *)(v3 + 233))
  {
    v5 = a3;
    if (*(_BYTE *)(v3 + 240))
    {
      *(_DWORD *)v46 = 1;
    }
    else
    {
      *(_DWORD *)v46 = 2;
      *(_OWORD *)&v46[4] = *(_OWORD *)(v3 + 608);
      WebCore::Color::operator=();
      WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&v47[1], v3 + 624);
      *(_OWORD *)&v48[8] = *(_OWORD *)(v3 + 592);
    }
    a3 = v5;
  }
  v6 = &OBJC_IVAR___WKContentView__dataListTextSuggestionsInputView;
  if (a3)
    goto LABEL_61;
  v7 = &self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[40];
  v8 = *(_DWORD *)v46;
  if (*(_DWORD *)v46 != *(_DWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[40])
    goto LABEL_61;
  if (*(_DWORD *)v46 != 2)
  {
LABEL_58:
    if (!v8)
      goto LABEL_81;
    goto LABEL_59;
  }
  v9 = *(_DWORD *)&v46[4] == *(_DWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[44]
    && *(_DWORD *)&v46[8] == LODWORD(self->_lastInteractionLocation.x);
  if (!v9
    || *(_DWORD *)&v46[12] != HIDWORD(self->_lastInteractionLocation.x)
    || *(_DWORD *)&v46[16] != LODWORD(self->_lastInteractionLocation.y))
  {
    goto LABEL_61;
  }
  v45 = v3;
  m_identifier = self->_layerTreeTransactionIdAtLastInteractionStart.m_identifier;
  if (((unint64_t)v47[0] & 0x8000000000000) == 0)
  {
    if (v47[0] == (WTF *)m_identifier && (m_identifier & 0x8000000000000) == 0)
      goto LABEL_22;
LABEL_61:
    m_buffer = self->_lastSelectionDrawingInfo.selectionGeometries.m_buffer;
    self->_lastSelectionDrawingInfo.selectionGeometries.m_buffer = 0;
    if (m_buffer)
    {
      v30 = v6;
      CFRelease(m_buffer);
      v6 = v30;
    }
    v31 = (char *)self + v6[37];
    *(_OWORD *)v31 = *(_OWORD *)v46;
    *((_DWORD *)v31 + 4) = *(_DWORD *)&v46[16];
    WebCore::Color::operator=();
    WTF::Vector<WebCore::SelectionGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)(v31 + 32), (uint64_t)&v47[1]);
    *((_OWORD *)v31 + 3) = *(_OWORD *)&v48[8];
    if (!self->_textInteractionWrapper.m_ptr)
      goto LABEL_79;
    if (*(_BYTE *)(v3 + 241) && (v32 = *(WTF::StringImpl **)(v3 + 296)) != 0)
    {
      *(_DWORD *)v32 += 2;
      v34 = (const __CFString *)WTF::StringImpl::operator NSString *();
      v35 = 0;
      p_markedText = &self->_markedText;
      if (!v34)
        goto LABEL_70;
    }
    else
    {
      v32 = 0;
      p_markedText = &self->_markedText;
      v35 = 1;
      v34 = &stru_1E351F1B8;
    }
    CFRetain(v34);
LABEL_70:
    m_ptr = p_markedText->m_ptr;
    p_markedText->m_ptr = (void *)v34;
    if (m_ptr)
      CFRelease(m_ptr);
    if ((v35 & 1) == 0)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v33);
      else
        *(_DWORD *)v32 -= 2;
    }
    if (!objc_msgSend(p_markedText->m_ptr, "length"))
      self->_isExpectingFastSingleTapCommit = 0;
    objc_msgSend(self->_textInteractionWrapper.m_ptr, "selectionChanged");
LABEL_79:
    LOBYTE(self->_dataListTextSuggestions.m_ptr) = 0;
    if (BYTE1(self->_dataListTextSuggestions.m_ptr))
    {
      objc_msgSend(self->_textInteractionWrapper.m_ptr, "didEndScrollingOverflow");
      BYTE1(self->_dataListTextSuggestions.m_ptr) = 0;
    }
    goto LABEL_81;
  }
  if ((m_identifier & 0x8000000000000) == 0)
    goto LABEL_61;
  v43 = 0;
  v44 = 0;
  v50 = *(_OWORD *)(((unint64_t)v47[0] & 0xFFFFFFFFFFFFLL) + 4);
  v49 = *(_OWORD *)((m_identifier & 0xFFFFFFFFFFFFLL) + 4);
  do
  {
    if (*((float *)&v50 + v44) != *((float *)&v49 + v44))
      break;
    v43 = v44++ > 2;
  }
  while (v44 != 4);
  if (!v43 || (unint64_t)v47[0] >> 56 != HIBYTE(m_identifier))
  {
    v6 = &OBJC_IVAR___WKContentView__dataListTextSuggestionsInputView;
    goto LABEL_61;
  }
  v6 = &OBJC_IVAR___WKContentView__dataListTextSuggestionsInputView;
  v7 = &self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[40];
  if (BYTE6(v47[0]) != BYTE6(m_identifier))
    goto LABEL_61;
LABEL_22:
  v11 = *(unsigned int *)&v48[4];
  if (*(unsigned int *)&v48[4] != (unint64_t)*((unsigned int *)v7 + 11))
    goto LABEL_61;
  if (!*(_DWORD *)&v48[4])
  {
LABEL_59:
    if (*(_QWORD *)&v48[8] != *((_QWORD *)v7 + 6) || *(_QWORD *)&v48[16] != *((_QWORD *)v7 + 7))
      goto LABEL_61;
LABEL_81:
    if (*(_BYTE *)(v3 + 346)
      && self->_isTapHighlightIDValid
      && !*(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 2424))
    {
      v38 = (WKContentView *)-[WKContentView firstResponder](self, "firstResponder");
      if ((!v38 || v38 == self) && !self->_suppressSelectionAssistantReasons.m_storage)
        objc_msgSend(self->_textInteractionWrapper.m_ptr, "activateSelection");
      objc_msgSend(self->_textInteractionWrapper.m_ptr, "didEndScrollingOverflow");
      self->_isTapHighlightIDValid = 0;
    }
    v39 = v47[1];
    if (v47[1])
    {
      v47[1] = 0;
      *(_DWORD *)v48 = 0;
      WTF::fastFree(v39, (void *)a2);
    }
    if (((unint64_t)v47[0] & 0x8000000000000) != 0)
    {
      v40 = (unsigned int *)((unint64_t)v47[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        WTF::fastFree((WTF *)v40, (void *)a2);
      }
    }
    return;
  }
  v12 = 0;
  v13 = 32;
  while (v12 < self->_lastSelectionDrawingInfo.caretRect.m_size.m_width)
  {
    v14 = *(_QWORD *)&self->_lastSelectionDrawingInfo.type;
    v15 = (WebCore::SelectionGeometry *)(v14 + v13 - 32);
    v3 = v45;
    v6 = &OBJC_IVAR___WKContentView__dataListTextSuggestionsInputView;
    if ((*((_BYTE *)v47[1] + v13) != 0) != (*(_BYTE *)(v14 + v13) != 0))
      goto LABEL_61;
    v16 = (WTF *)((char *)v47[1] + v13 - 32);
    if (*((_BYTE *)v47[1] + v13))
    {
      v17 = (float *)((char *)v47[1] + v13);
      v18 = v14 + v13;
      v19 = *(float *)v16 == *(float *)v15 && *(float *)((char *)v47[1] + v13 - 28) == *(float *)(v18 - 28);
      v3 = v45;
      v6 = &OBJC_IVAR___WKContentView__dataListTextSuggestionsInputView;
      if (!v19)
        goto LABEL_61;
      v20 = *(v17 - 6) == *(float *)(v18 - 24) && *(v17 - 5) == *(float *)(v18 - 20);
      v21 = v20 && *(v17 - 4) == *(float *)(v18 - 16);
      v22 = v21 && *(v17 - 3) == *(float *)(v18 - 12);
      v23 = v22 && *(v17 - 2) == *(float *)(v18 - 8);
      if (!v23 || *(v17 - 1) != *(float *)(v18 - 4))
        goto LABEL_61;
    }
    else
    {
      v25 = WebCore::SelectionGeometry::rect(v16);
      v27 = v26;
      v28 = v25 == WebCore::SelectionGeometry::rect(v15) && v27 == a2;
      v3 = v45;
      v6 = &OBJC_IVAR___WKContentView__dataListTextSuggestionsInputView;
      if (!v28)
        goto LABEL_61;
      v11 = *(unsigned int *)&v48[4];
    }
    ++v12;
    v13 += 84;
    if (v12 >= v11)
    {
      v8 = *(_DWORD *)v46;
      v3 = v45;
      v7 = &self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[40];
      goto LABEL_58;
    }
  }
  __break(0xC471u);
}

- (void)_endEditing
{
  objc_msgSend(self->_inputPeripheral.m_ptr, "endEditing");
  objc_msgSend(self->_formInputSession.m_ptr, "endEditing");
  objc_msgSend(*(id *)&self->_inputViewUpdateDeferralSources.m_storage, "controlEndEditing");
}

- (UITextRange)selectedTextRange
{
  uint64_t v2;
  BOOL v3;
  SelectionGeometry *m_buffer;
  UITextRange *result;
  int v6;
  int v7;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  double v28;
  UITextRange *v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  WKTextRange *v43;
  SelectionGeometry *v44;
  _DWORD v45[8];
  _DWORD v46[8];

  v2 = *((_QWORD *)self->_page.m_ptr + 4);
  if (*(_BYTE *)(v2 + 233))
    v3 = 1;
  else
    v3 = *(_BYTE *)(v2 + 560) == 0;
  if (v3)
    return 0;
  if (!*(_BYTE *)(v2 + 688))
    return 0;
  v6 = *(unsigned __int8 *)(v2 + 234);
  v7 = *(unsigned __int8 *)(v2 + 237);
  if (!(v7 | v6))
    return 0;
  m_buffer = self->_lastSelectionDrawingInfo.selectionGeometries.m_buffer;
  if (m_buffer)
    return (UITextRange *)m_buffer;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v46, (const WebCore::IntRect *)(v2 + 576));
  LODWORD(v9) = v46[0];
  LODWORD(v10) = v46[1];
  LODWORD(v11) = v46[2];
  LODWORD(v12) = v46[3];
  result = (UITextRange *)-[WKContentView _scaledCaretRectForSelectionStart:](self, "_scaledCaretRectForSelectionStart:", v9, v10, v11, v12);
  v46[4] = v13;
  v46[5] = v14;
  v46[6] = v15;
  v46[7] = v16;
  v17 = *((_QWORD *)self->_page.m_ptr + 4);
  if (*(_BYTE *)(v17 + 688))
  {
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v45, (const WebCore::IntRect *)(v17 + 608));
    LODWORD(v18) = v45[0];
    LODWORD(v19) = v45[1];
    LODWORD(v20) = v45[2];
    LODWORD(v21) = v45[3];
    result = (UITextRange *)-[WKContentView _scaledCaretRectForSelectionEnd:](self, "_scaledCaretRectForSelectionEnd:", v18, v19, v20, v21);
    v45[4] = v22;
    v45[5] = v23;
    v45[6] = v24;
    v45[7] = v25;
    v26 = *((_QWORD *)self->_page.m_ptr + 4);
    if (*(_BYTE *)(v26 + 688))
    {
      v27 = (uint64_t *)(v26 + 624);
      -[WKContentView _contentZoomScale](self, "_contentZoomScale");
      result = (UITextRange *)textSelectionRects(v27, v28);
      if (*(_BYTE *)(v2 + 560))
      {
        v29 = result;
        v30 = *(_QWORD *)(v2 + 264);
        WebCore::FloatRect::operator CGRect();
        v32 = v31;
        v34 = v33;
        v36 = v35;
        v38 = v37;
        WebCore::FloatRect::operator CGRect();
        v43 = +[WKTextRange textRangeWithState:isRange:isEditable:startRect:endRect:selectionRects:selectedTextLength:](WKTextRange, "textRangeWithState:isRange:isEditable:startRect:endRect:selectionRects:selectedTextLength:", 0, v6 != 0, v7 != 0, v29, v30, v32, v34, v36, v38, v39, v40, v41, v42);
        m_buffer = (SelectionGeometry *)v43;
        if (v43)
          CFRetain(v43);
        v44 = self->_lastSelectionDrawingInfo.selectionGeometries.m_buffer;
        self->_lastSelectionDrawingInfo.selectionGeometries.m_buffer = m_buffer;
        if (v44)
        {
          CFRelease(v44);
          return (UITextRange *)self->_lastSelectionDrawingInfo.selectionGeometries.m_buffer;
        }
        return (UITextRange *)m_buffer;
      }
    }
  }
  __break(1u);
  return result;
}

- (NSUndoManager)undoManagerForWebView
{
  Data *p_scale;
  NSUndoManager *result;
  __objc2_class *v5;
  NSUndoManager *v6;

  if (*(_BYTE *)(-[WKContentView focusedElementInformation](self, "focusedElementInformation") + 361)
    && -[WKContentView hasHiddenContentEditable](self, "hasHiddenContentEditable"))
  {
    p_scale = &self->_historicalKinematicData.m_positionHistory[2];
    result = *(NSUndoManager **)&self->_historicalKinematicData.m_positionHistory[2].timestamp.m_value;
    if (result)
      return result;
    v5 = WKNSKeyEventSimulatorUndoManager;
  }
  else
  {
    p_scale = (Data *)&self->_historicalKinematicData.m_positionHistory[1].scale;
    result = *(NSUndoManager **)&self->_historicalKinematicData.m_positionHistory[1].scale;
    if (result)
      return result;
    v5 = WKNSUndoManager;
  }
  result = (NSUndoManager *)objc_msgSend([v5 alloc], "initWithContentView:", self);
  v6 = *(NSUndoManager **)&p_scale->timestamp.m_value;
  *(_QWORD *)&p_scale->timestamp.m_value = result;
  if (v6)
  {
    CFRelease(v6);
    return *(NSUndoManager **)&p_scale->timestamp.m_value;
  }
  return result;
}

- (const)focusedElementInformation
{
  return &self->_focusedElementInformation;
}

- (CGRect)selectionClipRect
{
  WebPageProxy *m_ptr;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  CGRect result;

  m_ptr = self->_page.m_ptr;
  if (*((_BYTE *)m_ptr + 1032)
    || (v7 = *((_QWORD *)m_ptr + 4), *(_BYTE *)(v7 + 688))
    && ((v8 = *(_DWORD *)(v7 + 604), *(int *)(v7 + 600) >= 1)
      ? (v10 = __OFSUB__(v8, 1), v9 = v8 - 1 < 0)
      : (v10 = 0, v9 = 1),
        v9 == v10))
  {
    WebCore::IntRect::operator CGRect();
  }
  else
  {
    v3 = *MEMORY[0x1E0C9D628];
    v4 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v5 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v6 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

- (void)_setAcceleratedCompositingRootView:(id)a3
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = (void *)objc_msgSend(*(id *)&self->_anon_fa8[48], "subviews", 0);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9++), "removeFromSuperview");
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }
  objc_msgSend(*(id *)&self->_anon_fa8[48], "addSubview:", a3);
}

- (void).cxx_destruct
{
  double scale;
  double m_value;
  double v5;
  void *m_ptr;
  void *v7;
  void *v8;
  void *v9;
  PageClientImpl *value;
  BETextInputDelegate *asyncInputDelegate;
  const void *v12;
  const void *v13;
  WTF::StringImpl *v14;
  void *v15;
  void *v16;
  void *v17;
  const void *v18;
  CGFloat height;
  void *v20;
  const void *v21;
  const void *v22;
  void *m_buffer;
  const void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  const void *v31;
  void *m_table;
  const void *v33;
  void *v34;
  int64_t suppressNonEditableSingleTapTextInteractionCount;
  unint64_t activeTextInteractionCount;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  const void *v41;
  void *v42;
  const void *positionInformationCallbackDepth;
  optional<WebKit::InteractionInformationRequest> *p_lastOutstandingPositionInformationRequest;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  const void **v48;
  SelectionGeometry *v49;
  WTF *v50;
  unint64_t m_identifier;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  WTF::StringImpl *v56;
  void *v57;
  WebAutocorrectionContext *p_lastAutocorrectionContext;
  StringImpl *v59;
  StringImpl *v60;
  StringImpl *v61;
  WTF::StringImpl *v62;
  FloatQuad *v63;
  unint64_t m_colorAndFlags;
  SmartMagnificationController *v65;
  void *v66;
  void *v67;
  void *v68;
  TextIndicator *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  BOOL *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  StringImpl *v80;
  uint64_t index;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  const void ***p_failedTouchStartDeferringGestures;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  WebPageProxy *v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  char v133;

  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&self->_pendingBackgroundPrintFormattersLock, (void *)a2);
  scale = self->_historicalKinematicData.m_positionHistory[2].scale;
  self->_historicalKinematicData.m_positionHistory[2].scale = 0.0;
  if (scale != 0.0)
    CFRelease(*(CFTypeRef *)&scale);
  m_value = self->_historicalKinematicData.m_positionHistory[2].timestamp.m_value;
  self->_historicalKinematicData.m_positionHistory[2].timestamp.m_value = 0.0;
  if (m_value != 0.0)
    CFRelease(*(CFTypeRef *)&m_value);
  v5 = self->_historicalKinematicData.m_positionHistory[1].scale;
  self->_historicalKinematicData.m_positionHistory[1].scale = 0.0;
  if (v5 != 0.0)
    CFRelease(*(CFTypeRef *)&v5);
  m_ptr = self->_inspectorIndicationView.m_ptr;
  self->_inspectorIndicationView.m_ptr = 0;
  if (m_ptr)
    CFRelease(m_ptr);
  v7 = self->_fixedClippingView.m_ptr;
  self->_fixedClippingView.m_ptr = 0;
  if (v7)
    CFRelease(v7);
  v8 = self->_rootContentView.m_ptr;
  self->_rootContentView.m_ptr = 0;
  if (v8)
    CFRelease(v8);
  v9 = self->_browsingContextController.m_ptr;
  self->_browsingContextController.m_ptr = 0;
  if (v9)
    CFRelease(v9);
  value = self->_pageClient.__ptr_.__value_;
  self->_pageClient.__ptr_.__value_ = 0;
  if (value)
    CFRelease(value);
  asyncInputDelegate = self->_asyncInputDelegate;
  self->_asyncInputDelegate = 0;
  if (asyncInputDelegate)
    CFRelease(asyncInputDelegate);
  v12 = *(const void **)&self->_anon_fa8[48];
  *(_QWORD *)&self->_anon_fa8[48] = 0;
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)&self->_anon_fa8[40];
  *(_QWORD *)&self->_anon_fa8[40] = 0;
  if (v13)
    CFRelease(v13);
  std::unique_ptr<WebKit::PageClientImpl>::reset[abi:sn180100]((WebKit::PageClientImpl **)&self->_anon_fa8[32], 0);
  objc_destroyWeak((id *)&self->_anon_fa8[24]);
  std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&self->_imageAnalysisActionButtons, v14);
  v16 = self->_imageAnalysisContextMenuActionData.var0.__val_.machineReadableCodeMenu.m_ptr;
  self->_imageAnalysisContextMenuActionData.var0.__val_.machineReadableCodeMenu.m_ptr = 0;
  if (v16)
    CFRelease(v16);
  v17 = self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr;
  self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr = 0;
  if (v17)
    CFRelease(v17);
  if (self->_dynamicImageAnalysisContextMenuState)
  {
    v18 = *(const void **)&self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.__engaged_;
    *(_QWORD *)&self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.__engaged_ = 0;
    if (v18)
      CFRelease(v18);
    height = self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.size.height;
    self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.size.height = 0.0;
    if (height != 0.0)
      CFRelease(*(CFTypeRef *)&height);
  }
  v20 = self->_imageAnalyzer.m_ptr;
  self->_imageAnalyzer.m_ptr = 0;
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)&self->_isProceedingWithTextSelectionInImage;
  *(_QWORD *)&self->_isProceedingWithTextSelectionInImage = 0;
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)&self->_actionsToPerformAfterPendingImageAnalysis.m_capacity;
  *(_QWORD *)&self->_actionsToPerformAfterPendingImageAnalysis.m_capacity = 0;
  if (v22)
    CFRelease(v22);
  m_buffer = self->_actionsToPerformAfterPendingImageAnalysis.m_buffer;
  self->_actionsToPerformAfterPendingImageAnalysis.m_buffer = 0;
  if (m_buffer)
    CFRelease(m_buffer);
  v24 = *(const void **)&self->_anon_e60[40];
  *(_QWORD *)&self->_anon_e60[40] = 0;
  if (v24)
    CFRelease(v24);
  WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&self->_anon_e60[16], v15);
  v25 = self->_editDropCaretView.m_ptr;
  self->_editDropCaretView.m_ptr = 0;
  if (v25)
    CFRelease(v25);
  v26 = self->_unselectedContentSnapshot.m_ptr;
  self->_unselectedContentSnapshot.m_ptr = 0;
  if (v26)
    CFRelease(v26);
  v27 = self->_visibleContentViewSnapshot.m_ptr;
  self->_visibleContentViewSnapshot.m_ptr = 0;
  if (v27)
    CFRelease(v27);
  _Block_release(*(const void **)&self->_isAnimatingDragCancel);
  v29 = self->_dropInteraction.m_ptr;
  self->_dropInteraction.m_ptr = 0;
  if (v29)
    CFRelease(v29);
  v30 = self->_dragInteraction.m_ptr;
  self->_dragInteraction.m_ptr = 0;
  if (v30)
    CFRelease(v30);
  v31 = *(const void **)self->_anon_dc8;
  *(_QWORD *)self->_anon_dc8 = 0;
  if (v31)
    CFRelease(v31);
  m_table = self->_dragDropInteractionState.m_defaultDropPreviews.m_impl.var0.m_table;
  self->_dragDropInteractionState.m_defaultDropPreviews.m_impl.var0.m_table = 0;
  if (m_table)
    CFRelease(m_table);
  v33 = *(const void **)&self->_dragDropInteractionState.m_activeDragSources.m_capacity;
  *(_QWORD *)&self->_dragDropInteractionState.m_activeDragSources.m_capacity = 0;
  if (v33)
    CFRelease(v33);
  WebKit::DragDropInteractionState::~DragDropInteractionState((WebKit::DragDropInteractionState *)&self->_pendingRunModalJavaScriptDialogCallback, v28);
  v34 = self->_domPasteRequestHandler.m_function.m_callableWrapper.__ptr_.__value_;
  self->_domPasteRequestHandler.m_function.m_callableWrapper.__ptr_.__value_ = 0;
  if (v34)
    CFRelease(v34);
  suppressNonEditableSingleTapTextInteractionCount = self->_suppressNonEditableSingleTapTextInteractionCount;
  self->_suppressNonEditableSingleTapTextInteractionCount = 0;
  if (suppressNonEditableSingleTapTextInteractionCount)
    (*(void (**)(int64_t))(*(_QWORD *)suppressNonEditableSingleTapTextInteractionCount + 8))(suppressNonEditableSingleTapTextInteractionCount);
  activeTextInteractionCount = self->_activeTextInteractionCount;
  self->_activeTextInteractionCount = 0;
  if (activeTextInteractionCount)
    (*(void (**)(unint64_t))(*(_QWORD *)activeTextInteractionCount + 8))(activeTextInteractionCount);
  v37 = *(_QWORD *)&self->_hasSetUpInteractions;
  *(_QWORD *)&self->_hasSetUpInteractions = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *(_QWORD *)&self->_actionsToPerformAfterEditorStateUpdate.m_capacity;
  *(_QWORD *)&self->_actionsToPerformAfterEditorStateUpdate.m_capacity = 0;
  if (v38)
    WTF::RefCounted<WebKit::RevealFocusedElementDeferrer>::deref(v38);
  objc_destroyWeak(&self->_actionsToPerformAfterEditorStateUpdate.m_buffer);
  v40 = self->_keyboardScrollingAnimator.m_ptr;
  self->_keyboardScrollingAnimator.m_ptr = 0;
  if (v40)
    CFRelease(v40);
  v41 = *(const void **)&self->_inputViewUpdateDeferralSources.m_storage;
  *(_QWORD *)&self->_inputViewUpdateDeferralSources.m_storage = 0;
  if (v41)
    CFRelease(v41);
  WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&self->_pendingPositionInformationHandlers, v39);
  positionInformationCallbackDepth = (const void *)self->_positionInformationCallbackDepth;
  self->_positionInformationCallbackDepth = 0;
  if (positionInformationCallbackDepth)
    CFRelease(positionInformationCallbackDepth);
  p_lastOutstandingPositionInformationRequest = &self->_lastOutstandingPositionInformationRequest;
  v45 = *(unsigned int *)&self->_lastOutstandingPositionInformationRequest.var0.__val_.includeImageData;
  v46 = *(WTF **)&self->_lastOutstandingPositionInformationRequest.var0.__null_state_;
  if ((_DWORD)v45)
  {
    v47 = 32 * v45;
    v48 = (const void **)((char *)v46 + 24);
    do
    {
      if (*(_BYTE *)v48)
        _Block_release(*(v48 - 1));
      v48 += 4;
      v47 -= 32;
    }
    while (v47);
    v46 = *(WTF **)&p_lastOutstandingPositionInformationRequest->var0.__null_state_;
  }
  if (v46)
  {
    *(_QWORD *)&p_lastOutstandingPositionInformationRequest->var0.__null_state_ = 0;
    *(_DWORD *)&self->_lastOutstandingPositionInformationRequest.var0.__val_.includeSnapshot = 0;
    WTF::fastFree(v46, v42);
  }
  v49 = self->_lastSelectionDrawingInfo.selectionGeometries.m_buffer;
  self->_lastSelectionDrawingInfo.selectionGeometries.m_buffer = 0;
  if (v49)
    CFRelease(v49);
  v50 = *(WTF **)&self->_lastSelectionDrawingInfo.type;
  if (v50)
  {
    *(_QWORD *)&self->_lastSelectionDrawingInfo.type = 0;
    self->_lastSelectionDrawingInfo.caretRect.m_location.m_y = 0;
    WTF::fastFree(v50, v42);
  }
  m_identifier = self->_layerTreeTransactionIdAtLastInteractionStart.m_identifier;
  if ((m_identifier & 0x8000000000000) != 0)
  {
    v127 = (unsigned int *)(m_identifier & 0xFFFFFFFFFFFFLL);
    do
    {
      v128 = __ldaxr(v127);
      v129 = v128 - 1;
    }
    while (__stlxr(v129, v127));
    if (!v129)
    {
      atomic_store(1u, v127);
      WTF::fastFree((WTF *)v127, v42);
    }
  }
  WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&self->_keyWebEventHandlers, v42);
  v53 = self->_inputPeripheral.m_ptr;
  self->_inputPeripheral.m_ptr = 0;
  if (v53)
    CFRelease(v53);
  WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)&self->_focusedElementInformation, v52);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&self->_positionInformationLinkIndicator, v54);
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)&self->_positionInformation, v55);
  v57 = self->_autocorrectionData.font.m_ptr;
  self->_autocorrectionData.font.m_ptr = 0;
  if (v57)
    CFRelease(v57);
  p_lastAutocorrectionContext = &self->_lastAutocorrectionContext;
  v59 = self->_lastAutocorrectionContext.contextAfter.m_impl.m_ptr;
  self->_lastAutocorrectionContext.contextAfter.m_impl.m_ptr = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v59, v56);
    else
      *(_DWORD *)v59 -= 2;
  }
  v60 = self->_lastAutocorrectionContext.selectedText.m_impl.m_ptr;
  self->_lastAutocorrectionContext.selectedText.m_impl.m_ptr = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v60, v56);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = self->_lastAutocorrectionContext.markedText.m_impl.m_ptr;
  self->_lastAutocorrectionContext.markedText.m_impl.m_ptr = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v61, v56);
    else
      *(_DWORD *)v61 -= 2;
  }
  v62 = (WTF::StringImpl *)p_lastAutocorrectionContext->contextBefore.m_impl.m_ptr;
  p_lastAutocorrectionContext->contextBefore.m_impl.m_ptr = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v56);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = self->_tapHighlightInformation.quads.m_buffer;
  if (v63)
  {
    self->_tapHighlightInformation.quads.m_buffer = 0;
    self->_tapHighlightInformation.quads.m_capacity = 0;
    WTF::fastFree((WTF *)v63, v56);
  }
  m_colorAndFlags = self->_tapHighlightInformation.color.m_colorAndFlags;
  if ((m_colorAndFlags & 0x8000000000000) != 0)
  {
    v130 = (unsigned int *)(m_colorAndFlags & 0xFFFFFFFFFFFFLL);
    do
    {
      v131 = __ldaxr(v130);
      v132 = v131 - 1;
    }
    while (__stlxr(v132, v130));
    if (!v132)
    {
      atomic_store(1u, v130);
      WTF::fastFree((WTF *)v130, v56);
    }
  }
  objc_destroyWeak(&self->_inputDelegate.m_weakReference);
  v65 = self->_smartMagnificationController.__ptr_.__value_;
  self->_smartMagnificationController.__ptr_.__value_ = 0;
  if (v65)
    (*(void (**)(SmartMagnificationController *))(*(_QWORD *)v65 + 8))(v65);
  v66 = self->_textAnimationManager.m_ptr;
  self->_textAnimationManager.m_ptr = 0;
  if (v66)
    CFRelease(v66);
  v67 = self->_contextMenuInteractionTargetedPreview.m_ptr;
  self->_contextMenuInteractionTargetedPreview.m_ptr = 0;
  if (v67)
    CFRelease(v67);
  v68 = self->_textIndicatorLayer.m_ptr;
  self->_textIndicatorLayer.m_ptr = 0;
  if (v68)
    CFRelease(v68);
  v69 = self->_textIndicator.m_ptr;
  self->_textIndicator.m_ptr = 0;
  if (v69)
    WTF::RefCounted<WebCore::TextIndicator>::deref(v69);
  objc_destroyWeak((id *)&self->_cachedTextInteractionTapGestureRecognizer);
  objc_destroyWeak((id *)&self->_cachedTextInteractionLoupeGestureRecognizer);
  v71 = self->_previewItemController.m_ptr;
  self->_previewItemController.m_ptr = 0;
  if (v71)
    CFRelease(v71);
  v72 = self->_contextMenuLegacyMenu.m_ptr;
  self->_contextMenuLegacyMenu.m_ptr = 0;
  if (v72)
    CFRelease(v72);
  v73 = self->_contextMenuLegacyPreviewController.m_ptr;
  self->_contextMenuLegacyPreviewController.m_ptr = 0;
  if (v73)
    CFRelease(v73);
  v74 = self->_contextMenuElementInfo.m_ptr;
  self->_contextMenuElementInfo.m_ptr = 0;
  if (v74)
    CFRelease(v74);
  v75 = self->_focusStateStack.m_buffer;
  if (v75)
  {
    self->_focusStateStack.m_buffer = 0;
    self->_focusStateStack.m_capacity = 0;
    WTF::fastFree((WTF *)v75, v70);
  }
  v76 = self->_previewSecondaryGestureRecognizer.m_ptr;
  self->_previewSecondaryGestureRecognizer.m_ptr = 0;
  if (v76)
    CFRelease(v76);
  v77 = self->_previewGestureRecognizer.m_ptr;
  self->_previewGestureRecognizer.m_ptr = 0;
  if (v77)
    CFRelease(v77);
  v78 = self->_contactPicker.m_ptr;
  self->_contactPicker.m_ptr = 0;
  if (v78)
    CFRelease(v78);
  v79 = self->_shareSheet.m_ptr;
  self->_shareSheet.m_ptr = 0;
  if (v79)
    CFRelease(v79);
  v80 = self->_frameInfoForFileUploadPanel.frameName.m_impl.m_ptr;
  self->_frameInfoForFileUploadPanel.frameName.m_impl.m_ptr = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v80, (WTF::StringImpl *)v70);
    else
      *(_DWORD *)v80 -= 2;
  }
  index = self->_frameInfoForFileUploadPanel.securityOrigin.m_data.__impl_.__index;
  if ((_DWORD)index != -1)
    ((void (*)(char *, SecurityOriginData *))off_1E35067F8[index])(&v133, &self->_frameInfoForFileUploadPanel.securityOrigin);
  self->_frameInfoForFileUploadPanel.securityOrigin.m_data.__impl_.__index = -1;
  v82 = self->_frameInfoForFileUploadPanel.request.m_nsRequest.m_ptr;
  self->_frameInfoForFileUploadPanel.request.m_nsRequest.m_ptr = 0;
  if (v82)
    CFRelease(v82);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&self->_frameInfoForFileUploadPanel.request);
  v83 = self->_fileUploadPanel.m_ptr;
  self->_fileUploadPanel.m_ptr = 0;
  if (v83)
    CFRelease(v83);
  v84 = self->_formInputSession.m_ptr;
  self->_formInputSession.m_ptr = 0;
  if (v84)
    CFRelease(v84);
  v85 = self->_airPlayRoutePicker.m_ptr;
  self->_airPlayRoutePicker.m_ptr = 0;
  if (v85)
    CFRelease(v85);
  v86 = self->_actionSheetAssistant.m_ptr;
  self->_actionSheetAssistant.m_ptr = 0;
  if (v86)
    CFRelease(v86);
  v87 = self->_markedText.m_ptr;
  self->_markedText.m_ptr = 0;
  if (v87)
    CFRelease(v87);
  v88 = self->_dropPreviewContainerView.m_ptr;
  self->_dropPreviewContainerView.m_ptr = 0;
  if (v88)
    CFRelease(v88);
  v89 = self->_dragPreviewContainerView.m_ptr;
  self->_dragPreviewContainerView.m_ptr = 0;
  if (v89)
    CFRelease(v89);
  objc_destroyWeak(&self->_scrollViewForTargetedPreview.m_weakReference);
  v90 = self->_contextMenuHintContainerView.m_ptr;
  self->_contextMenuHintContainerView.m_ptr = 0;
  if (v90)
    CFRelease(v90);
  v91 = self->_interactionViewsContainerView.m_ptr;
  self->_interactionViewsContainerView.m_ptr = 0;
  if (v91)
    CFRelease(v91);
  v92 = self->_tapHighlightView.m_ptr;
  self->_tapHighlightView.m_ptr = 0;
  if (v92)
    CFRelease(v92);
  v93 = self->_formAccessoryView.m_ptr;
  self->_formAccessoryView.m_ptr = 0;
  if (v93)
    CFRelease(v93);
  v94 = self->_extendedTextInputTraits.m_ptr;
  self->_extendedTextInputTraits.m_ptr = 0;
  if (v94)
    CFRelease(v94);
  v95 = self->_legacyTextInputTraits.m_ptr;
  self->_legacyTextInputTraits.m_ptr = 0;
  if (v95)
    CFRelease(v95);
  v96 = self->_textInteractionWrapper.m_ptr;
  self->_textInteractionWrapper.m_ptr = 0;
  if (v96)
    CFRelease(v96);
  v97 = self->_lastPointerRegion.m_ptr;
  self->_lastPointerRegion.m_ptr = 0;
  if (v97)
    CFRelease(v97);
  v98 = self->_pointerInteraction.m_ptr;
  self->_pointerInteraction.m_ptr = 0;
  if (v98)
    CFRelease(v98);
  v99 = self->_scribbleInteraction.m_ptr;
  self->_scribbleInteraction.m_ptr = 0;
  if (v99)
    CFRelease(v99);
  v100 = self->_mouseInteraction.m_ptr;
  self->_mouseInteraction.m_ptr = 0;
  if (v100)
    CFRelease(v100);
  v101 = self->_touchActionDownSwipeGestureRecognizer.m_ptr;
  self->_touchActionDownSwipeGestureRecognizer.m_ptr = 0;
  if (v101)
    CFRelease(v101);
  v102 = self->_touchActionUpSwipeGestureRecognizer.m_ptr;
  self->_touchActionUpSwipeGestureRecognizer.m_ptr = 0;
  if (v102)
    CFRelease(v102);
  v103 = self->_touchActionRightSwipeGestureRecognizer.m_ptr;
  self->_touchActionRightSwipeGestureRecognizer.m_ptr = 0;
  if (v103)
    CFRelease(v103);
  v104 = self->_touchActionLeftSwipeGestureRecognizer.m_ptr;
  self->_touchActionLeftSwipeGestureRecognizer.m_ptr = 0;
  if (v104)
    CFRelease(v104);
  v105 = self->_touchActionGestureRecognizer.m_ptr;
  self->_touchActionGestureRecognizer.m_ptr = 0;
  if (v105)
    CFRelease(v105);
  v106 = self->_inspectorNodeSearchGestureRecognizer.m_ptr;
  self->_inspectorNodeSearchGestureRecognizer.m_ptr = 0;
  if (v106)
    CFRelease(v106);
  v107 = self->_twoFingerSingleTapGestureRecognizer.m_ptr;
  self->_twoFingerSingleTapGestureRecognizer.m_ptr = 0;
  if (v107)
    CFRelease(v107);
  v108 = self->_twoFingerDoubleTapGestureRecognizer.m_ptr;
  self->_twoFingerDoubleTapGestureRecognizer.m_ptr = 0;
  if (v108)
    CFRelease(v108);
  v109 = self->_doubleTapGestureRecognizerForDoubleClick.m_ptr;
  self->_doubleTapGestureRecognizerForDoubleClick.m_ptr = 0;
  if (v109)
    CFRelease(v109);
  v110 = self->_nonBlockingDoubleTapGestureRecognizer.m_ptr;
  self->_nonBlockingDoubleTapGestureRecognizer.m_ptr = 0;
  if (v110)
    CFRelease(v110);
  v111 = self->_doubleTapGestureRecognizer.m_ptr;
  self->_doubleTapGestureRecognizer.m_ptr = 0;
  if (v111)
    CFRelease(v111);
  v112 = self->_longPressGestureRecognizer.m_ptr;
  self->_longPressGestureRecognizer.m_ptr = 0;
  if (v112)
    CFRelease(v112);
  v113 = self->_highlightLongPressGestureRecognizer.m_ptr;
  self->_highlightLongPressGestureRecognizer.m_ptr = 0;
  if (v113)
    CFRelease(v113);
  v114 = self->_singleTapGestureRecognizer.m_ptr;
  self->_singleTapGestureRecognizer.m_ptr = 0;
  if (v114)
    CFRelease(v114);
  v115 = self->_touchEventGestureRecognizer.m_ptr;
  self->_touchEventGestureRecognizer.m_ptr = 0;
  if (v115)
    CFRelease(v115);
  std::unique_ptr<WebKit::GestureRecognizerConsistencyEnforcer>::reset[abi:sn180100]((WebKit::GestureRecognizerConsistencyEnforcer **)&self->_gestureRecognizerConsistencyEnforcer, 0);
  v117 = self->_imageAnalysisDeferringGestureRecognizer.m_ptr;
  self->_imageAnalysisDeferringGestureRecognizer.m_ptr = 0;
  if (v117)
    CFRelease(v117);
  p_failedTouchStartDeferringGestures = (const void ***)&self->_failedTouchStartDeferringGestures;
  if (self->_failedTouchStartDeferringGestures.__engaged_ && *p_failedTouchStartDeferringGestures)
    WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::deallocateTable(*p_failedTouchStartDeferringGestures, v116);
  v119 = self->_touchMoveDeferringGestureRecognizer.m_ptr;
  self->_touchMoveDeferringGestureRecognizer.m_ptr = 0;
  if (v119)
    CFRelease(v119);
  v120 = self->_touchEndDeferringGestureRecognizerForSyntheticTapGestures.m_ptr;
  self->_touchEndDeferringGestureRecognizerForSyntheticTapGestures.m_ptr = 0;
  if (v120)
    CFRelease(v120);
  v121 = self->_touchEndDeferringGestureRecognizerForDelayedResettableGestures.m_ptr;
  self->_touchEndDeferringGestureRecognizerForDelayedResettableGestures.m_ptr = 0;
  if (v121)
    CFRelease(v121);
  v122 = self->_touchEndDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr;
  self->_touchEndDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr = 0;
  if (v122)
    CFRelease(v122);
  v123 = self->_touchStartDeferringGestureRecognizerForSyntheticTapGestures.m_ptr;
  self->_touchStartDeferringGestureRecognizerForSyntheticTapGestures.m_ptr = 0;
  if (v123)
    CFRelease(v123);
  v124 = self->_touchStartDeferringGestureRecognizerForDelayedResettableGestures.m_ptr;
  self->_touchStartDeferringGestureRecognizerForDelayedResettableGestures.m_ptr = 0;
  if (v124)
    CFRelease(v124);
  v125 = self->_touchStartDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr;
  self->_touchStartDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr = 0;
  if (v125)
    CFRelease(v125);
  objc_destroyWeak(&self->_webView.m_weakReference);
  v126 = self->_page.m_ptr;
  self->_page.m_ptr = 0;
  if (v126)
    CFRelease(*((CFTypeRef *)v126 + 1));
}

- (WKContentView)initWithFrame:(CGRect)a3 processPool:(NakedRef<WebKit:(void *)a5 :(id)a6 WebProcessPool>)a4 configuration:webView:
{
  WKContentView *result;
  WKContentView *v10;
  WebKit::PageClientImpl *v11;
  objc_super v12;

  v12.receiver = self;
  v12.super_class = (Class)WKContentView;
  result = -[WKApplicationStateTrackingView initWithFrame:webView:](&v12, sel_initWithFrame_webView_, a6, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  if (result)
  {
    v10 = result;
    WebKit::InitializeWebKit2((WebKit *)result);
    v11 = (WebKit::PageClientImpl *)WTF::fastMalloc((WTF *)0x38);
    WebKit::PageClientImpl::PageClientImpl(v11, v10, (WKWebView *)a6);
    std::unique_ptr<WebKit::PageClientImpl>::reset[abi:sn180100]((WebKit::PageClientImpl **)&v10->_anon_fa8[32], v11);
    objc_storeWeak(&v10->_webView.m_weakReference, a6);
    return (WKContentView *)-[WKContentView _commonInitializationWithProcessPool:configuration:](v10, "_commonInitializationWithProcessPool:configuration:", a4.var0, a5);
  }
  return result;
}

- (void)_cancelImageAnalysis
{
  NSObject *v3;
  id m_block;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)&self->_anon_e60[40], "cancelAllRequests");
  if (-[WKContentView hasPendingImageAnalysisRequest](self, "hasPendingImageAnalysisRequest"))
  {
    v3 = qword_1ECE71C18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C18, OS_LOG_TYPE_DEFAULT))
    {
      if (!LOBYTE(self->_editDropTextCursorView.m_ptr))
        __break(1u);
      m_block = self->_actionToPerformAfterReceivingEditDragSnapshot.m_block;
      v5 = 134217984;
      v6 = m_block;
      _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "Image analysis request %llu cancelled.", (uint8_t *)&v5, 0xCu);
    }
  }
  if (LOBYTE(self->_editDropTextCursorView.m_ptr))
    LOBYTE(self->_editDropTextCursorView.m_ptr) = 0;
  self->_anon_e60[32] = 0;
  if (self->_anon_e60[0])
    self->_anon_e60[0] = 0;
}

- (BOOL)hasPendingImageAnalysisRequest
{
  return (BOOL)self->_editDropTextCursorView.m_ptr;
}

- (void)_didCommitLoadForMainFrame
{
  objc_msgSend((id)self->_positionInformationCallbackDepth, "stopScrollingImmediately");
  HIBYTE(self->_revealFocusedElementDeferrer.m_ptr) = 0;
  -[WKContentView _elementDidBlur](self, "_elementDidBlur");
  -[WKContentView _cancelLongPressGestureRecognizer](self, "_cancelLongPressGestureRecognizer");
  -[WKContentView _removeContainerForContextMenuHintPreviews](self, "_removeContainerForContextMenuHintPreviews");
  -[WKContentView _removeContainerForDragPreviews](self, "_removeContainerForDragPreviews");
  -[WKContentView _removeContainerForDropPreviews](self, "_removeContainerForDropPreviews");
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_didCommitLoadForMainFrame");
  BYTE1(self->_dataListSuggestionsControl.m_weakReference) = 0;
  *(_QWORD *)&self->_isUpdatingAccessoryView = 0;
  BYTE2(self->_dataListSuggestionsControl.m_weakReference) = 0;
  -[WKContentView _invalidateCurrentPositionInformation](self, "_invalidateCurrentPositionInformation");
  -[WKContentView uninstallImageAnalysisInteraction](self, "uninstallImageAnalysisInteraction");
}

- (void)dealloc
{
  objc_super v3;

  -[WKContentView cleanUpInteraction](self, "cleanUpInteraction");
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", self);
  WebKit::WebPageProxy::close((unsigned int *)self->_page.m_ptr);
  LODWORD(WebKit::WebProcessPool::statistics(void)::statistics) = WebKit::WebProcessPool::statistics(void)::statistics
                                                                - 1;
  -[WKContentView _removeTemporaryFilesIfNecessary](self, "_removeTemporaryFilesIfNecessary");
  v3.receiver = self;
  v3.super_class = (Class)WKContentView;
  -[WKContentView dealloc](&v3, sel_dealloc);
}

- (void)cleanUpInteraction
{
  void *m_ptr;
  void *v4;
  SmartMagnificationController *value;
  void *v6;
  WTF::StringImpl *v7;
  void *v8;
  StringImpl *v9;
  StringImpl *v10;
  StringImpl *v11;
  StringImpl *v12;
  void *v13;
  void *v14;
  NSArray *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  GestureRecognizerConsistencyEnforcer *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  const void *positionInformationCallbackDepth;
  const void *v27;
  void *v28;
  SelectionGeometry *m_buffer;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  _WORD v59[24];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  char v68;
  int v69;
  __int16 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _BYTE v74[128];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (self->_becomingFirstResponder)
  {
    m_ptr = self->_textInteractionWrapper.m_ptr;
    self->_textInteractionWrapper.m_ptr = 0;
    if (m_ptr)
      CFRelease(m_ptr);
    objc_msgSend(self->_actionSheetAssistant.m_ptr, "cleanupSheet");
    v4 = self->_actionSheetAssistant.m_ptr;
    self->_actionSheetAssistant.m_ptr = 0;
    if (v4)
      CFRelease(v4);
    value = self->_smartMagnificationController.__ptr_.__value_;
    self->_smartMagnificationController.__ptr_.__value_ = 0;
    if (value)
      (*(void (**)(SmartMagnificationController *))(*(_QWORD *)value + 8))(value);
    BYTE6(self->_dataListTextSuggestions.m_ptr) = 0;
    BYTE5(self->_dataListTextSuggestions.m_ptr) = 0;
    HIBYTE(self->_dataListTextSuggestions.m_ptr) = 0;
    self->_isTapHighlightIDValid = 0;
    objc_msgSend(self->_formInputSession.m_ptr, "invalidate");
    v6 = self->_formInputSession.m_ptr;
    self->_formInputSession.m_ptr = 0;
    if (v6)
      CFRelease(v6);
    objc_msgSend(self->_tapHighlightView.m_ptr, "removeFromSuperview");
    if (LOBYTE(self->_lastSelectionDrawingInfo.selectionClipRect.m_size.m_width))
      LOBYTE(self->_lastSelectionDrawingInfo.selectionClipRect.m_size.m_width) = 0;
    BYTE3(self->_dataListSuggestionsControl.m_weakReference) = 0;
    self->_textInteractionDidChangeFocusedElement = 0;
    v8 = self->_domPasteRequestHandler.m_function.m_callableWrapper.__ptr_.__value_;
    self->_domPasteRequestHandler.m_function.m_callableWrapper.__ptr_.__value_ = 0;
    if (v8)
      CFRelease(v8);
    self->_treatAsContentEditableUntilNextEditorStateUpdate = 0;
    BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
    v9 = self->_lastAutocorrectionContext.contextBefore.m_impl.m_ptr;
    self->_lastAutocorrectionContext.contextBefore.m_impl.m_ptr = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = self->_lastAutocorrectionContext.markedText.m_impl.m_ptr;
    self->_lastAutocorrectionContext.markedText.m_impl.m_ptr = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = self->_lastAutocorrectionContext.selectedText.m_impl.m_ptr;
    self->_lastAutocorrectionContext.selectedText.m_impl.m_ptr = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = self->_lastAutocorrectionContext.contextAfter.m_impl.m_ptr;
    self->_lastAutocorrectionContext.contextAfter.m_impl.m_ptr = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v12, v7);
      else
        *(_DWORD *)v12 -= 2;
    }
    self->_lastAutocorrectionContext.selectedRangeInMarkedText = (EditingRange)xmmword_1978CEF10;
    BYTE6(self->_revealFocusedElementDeferrer.m_ptr) = 0;
    HIBYTE(self->_revealFocusedElementDeferrer.m_ptr) = 0;
    BYTE1(self->_dataListSuggestionsControl.m_weakReference) = 0;
    *(_QWORD *)&self->_isUpdatingAccessoryView = 0;
    BYTE2(self->_dataListSuggestionsControl.m_weakReference) = 0;
    self->_isChangingFocusUsingAccessoryTab = 0;
    self->_didAccessoryTabInitiateFocus = 0;
    self->_isExpectingFastSingleTapCommit = 0;
    BYTE3(self->_dataListTextSuggestions.m_ptr) = 0;
    if (self->_interactionViewsContainerView.m_ptr)
    {
      v13 = (void *)-[WKContentView layer](self, "layer");
      objc_msgSend(v13, "removeObserver:forKeyPath:context:", self, CFSTR("transform"), WKContentViewKVOTransformContext);
      objc_msgSend(self->_interactionViewsContainerView.m_ptr, "removeFromSuperview");
      v14 = self->_interactionViewsContainerView.m_ptr;
      self->_interactionViewsContainerView.m_ptr = 0;
      if (v14)
        CFRelease(v14);
    }
    self->_shouldRestoreSelection = 0;
    if (*((_BYTE *)&self->_domPasteRequestCategory + 4))
      *((_BYTE *)&self->_domPasteRequestCategory + 4) = 0;
    objc_msgSend(self->_touchEventGestureRecognizer.m_ptr, "setDelegate:", 0);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_touchEventGestureRecognizer.m_ptr);
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v15 = -[WKContentView deferringGestures](self, "deferringGestures", 0);
    v16 = -[NSArray countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", &v30, v74, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v31;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v31 != v17)
            objc_enumerationMutation(v15);
          v19 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
          objc_msgSend(v19, "setDelegate:", 0);
          -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", v19);
        }
        v16 = -[NSArray countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", &v30, v74, 16);
      }
      while (v16);
    }
    v20 = self->_gestureRecognizerConsistencyEnforcer.__ptr_.__value_;
    if (v20)
      WebKit::GestureRecognizerConsistencyEnforcer::reset((WebKit::GestureRecognizerConsistencyEnforcer *)v20);
    -[WKContentView removeInteraction:](self, "removeInteraction:", self->_mouseInteraction.m_ptr);
    objc_msgSend(self->_singleTapGestureRecognizer.m_ptr, "setDelegate:", 0);
    objc_msgSend(self->_singleTapGestureRecognizer.m_ptr, "setGestureIdentifiedTarget:action:", 0, 0);
    objc_msgSend(self->_singleTapGestureRecognizer.m_ptr, "setResetTarget:action:", 0, 0);
    objc_msgSend(self->_singleTapGestureRecognizer.m_ptr, "setSupportingTouchEventsGestureRecognizer:", 0);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_singleTapGestureRecognizer.m_ptr);
    objc_msgSend(self->_highlightLongPressGestureRecognizer.m_ptr, "setDelegate:", 0);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_highlightLongPressGestureRecognizer.m_ptr);
    objc_msgSend(self->_longPressGestureRecognizer.m_ptr, "setDelegate:", 0);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_longPressGestureRecognizer.m_ptr);
    objc_msgSend(self->_doubleTapGestureRecognizer.m_ptr, "setDelegate:", 0);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_doubleTapGestureRecognizer.m_ptr);
    objc_msgSend(self->_nonBlockingDoubleTapGestureRecognizer.m_ptr, "setDelegate:", 0);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_nonBlockingDoubleTapGestureRecognizer.m_ptr);
    objc_msgSend(self->_doubleTapGestureRecognizerForDoubleClick.m_ptr, "setDelegate:", 0);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_doubleTapGestureRecognizerForDoubleClick.m_ptr);
    objc_msgSend(self->_twoFingerDoubleTapGestureRecognizer.m_ptr, "setDelegate:", 0);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_twoFingerDoubleTapGestureRecognizer.m_ptr);
    objc_msgSend(self->_twoFingerSingleTapGestureRecognizer.m_ptr, "setDelegate:", 0);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_twoFingerSingleTapGestureRecognizer.m_ptr);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_touchActionGestureRecognizer.m_ptr);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_touchActionLeftSwipeGestureRecognizer.m_ptr);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_touchActionRightSwipeGestureRecognizer.m_ptr);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_touchActionUpSwipeGestureRecognizer.m_ptr);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_touchActionDownSwipeGestureRecognizer.m_ptr);
    *(_QWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[32] = 0;
    -[WKContentView _removeContextMenuHintContainerIfPossible](self, "_removeContextMenuHintContainerIfPossible");
    objc_msgSend((id)existingLocalDragSessionContext(*(void **)&self->_dragDropInteractionState.m_lastGlobalPosition.y), "cleanUpTemporaryDirectories");
    -[WKContentView teardownDragAndDropInteractions](self, "teardownDragAndDropInteractions");
    -[WKContentView removeInteraction:](self, "removeInteraction:", self->_pointerInteraction.m_ptr);
    v21 = self->_pointerInteraction.m_ptr;
    self->_pointerInteraction.m_ptr = 0;
    if (v21)
      CFRelease(v21);
    self->_pointerInteractionRegionNeedsUpdate = 0;
    v22 = *(_QWORD *)&self->_actionsToPerformAfterEditorStateUpdate.m_capacity;
    *(_QWORD *)&self->_actionsToPerformAfterEditorStateUpdate.m_capacity = 0;
    if (v22)
      WTF::RefCounted<WebKit::RevealFocusedElementDeferrer>::deref(v22);
    -[WKContentView cleanUpScribbleInteraction](self, "cleanUpScribbleInteraction");
    BYTE4(self->_dataListTextSuggestions.m_ptr) = 0;
    v23 = self->_inspectorNodeSearchGestureRecognizer.m_ptr;
    if (v23)
    {
      objc_msgSend(v23, "setDelegate:", 0);
      -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_inspectorNodeSearchGestureRecognizer.m_ptr);
      v24 = self->_inspectorNodeSearchGestureRecognizer.m_ptr;
      self->_inspectorNodeSearchGestureRecognizer.m_ptr = 0;
      if (v24)
        CFRelease(v24);
    }
    -[WKContentView _unregisterPreview](self, "_unregisterPreview");
    -[WKContentView dismissPickersIfNeededWithReason:](self, "dismissPickersIfNeededWithReason:", 2);
    -[WKContentView stopDeferringInputViewUpdatesForAllSources](self, "stopDeferringInputViewUpdatesForAllSources");
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    memset(v34, 0, sizeof(v34));
    v36 = 0;
    v35 = 0;
    v41 = xmmword_1978D0900;
    v42 = xmmword_1978D0910;
    v43 = 0;
    v45 = 0;
    v44 = 0;
    v46 = 0;
    v48 = 0;
    v49 = 0;
    v47 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = -1;
    v56 = 0;
    v57 = 0;
    v55 = 0;
    v58 = 0;
    WTF::URL::URL((WTF::URL *)v59);
    v59[20] = 0;
    v61 = 0;
    v62 = 0;
    v60 = 0;
    v63 = 0;
    v65 = 0;
    v66 = 0;
    v64 = 0;
    v67 = 0;
    v68 = 1;
    v69 = 0;
    v70 = 0;
    v71 = 0u;
    v72 = 0u;
    v73 = 0;
    WebKit::FocusedElementInformation::operator=((uint64_t)&self->_focusedElementInformation, (uint64_t)v34);
    WebKit::FocusedElementInformation::~FocusedElementInformation((WebKit::FocusedElementInformation *)v34, v25);
    objc_msgSend((id)self->_positionInformationCallbackDepth, "invalidate");
    positionInformationCallbackDepth = (const void *)self->_positionInformationCallbackDepth;
    self->_positionInformationCallbackDepth = 0;
    if (positionInformationCallbackDepth)
      CFRelease(positionInformationCallbackDepth);
    v27 = *(const void **)&self->_inputViewUpdateDeferralSources.m_storage;
    *(_QWORD *)&self->_inputViewUpdateDeferralSources.m_storage = 0;
    if (v27)
      CFRelease(v27);
    v28 = self->_keyboardScrollingAnimator.m_ptr;
    self->_keyboardScrollingAnimator.m_ptr = 0;
    if (v28)
      CFRelease(v28);
    -[WKContentView _tearDownImageAnalysis](self, "_tearDownImageAnalysis");
    -[WKContentView _removeContainerForContextMenuHintPreviews](self, "_removeContainerForContextMenuHintPreviews");
    -[WKContentView _removeContainerForDragPreviews](self, "_removeContainerForDragPreviews");
    -[WKContentView _removeContainerForDropPreviews](self, "_removeContainerForDropPreviews");
    -[WKContentView unsuppressSoftwareKeyboardUsingLastAutocorrectionContextIfNeeded](self, "unsuppressSoftwareKeyboardUsingLastAutocorrectionContextIfNeeded");
    self->_becomingFirstResponder = 0;
    self->_suppressSelectionAssistantReasons.m_storage = 0;
    -[WKContentView _resetPanningPreventionFlags](self, "_resetPanningPreventionFlags");
    -[WKContentView _handleDOMPasteRequestWithResult:](self, "_handleDOMPasteRequestWithResult:", 0);
    -[WKContentView _cancelPendingKeyEventHandlers:](self, "_cancelPendingKeyEventHandlers:", 0);
    -[WKContentView setPasteConfiguration:](self, "setPasteConfiguration:", 0);
    if (self->_needsDeferredEndScrollingSelectionUpdate)
      self->_needsDeferredEndScrollingSelectionUpdate = 0;
    m_buffer = self->_lastSelectionDrawingInfo.selectionGeometries.m_buffer;
    self->_lastSelectionDrawingInfo.selectionGeometries.m_buffer = 0;
    if (m_buffer)
      CFRelease(m_buffer);
  }
}

- (void)_webViewDestroyed
{
  objc_storeWeak(&self->_webView.m_weakReference, 0);
}

- (void)_removeTemporaryFilesIfNecessary
{
  id v2;
  id v3;
  uint64_t v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void *v13;
  CFTypeRef cf;
  uint64_t v15;

  v2 = objc_alloc_init(MEMORY[0x1E0CB3620]);
  v3 = objc_alloc_init(MEMORY[0x1E0CB3600]);
  v4 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v4)
  {
    v5 = *(id **)(a1 + 32);
    v6 = 8 * v4;
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      if ((objc_msgSend(v2, "fileExistsAtPath:", objc_msgSend(*v5, "path", v10, v11, v12, v13, cf, v15)) & 1) != 0)
      {
        cf = v2;
        v15 = 0;
        v8 = *v5;
        v10 = v7;
        v11 = 3321888768;
        v12 = ___ZZ49__WKContentView__removeTemporaryFilesIfNecessary_ENK3__0clEv_block_invoke;
        v13 = &__block_descriptor_40_e8_32c37_ZTSN3WTF9RetainPtrI13NSFileManagerEE_e15_v16__0__NSURL_8l;
        if (v2)
          CFRetain(v2);
        objc_msgSend(v3, "coordinateWritingItemAtURL:options:error:byAccessor:", v8, 1, &v15, &v10);
        v9 = cf;
        cf = 0;
        if (v9)
          CFRelease(v9);
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
}

- (BOOL)setIsEditable:(BOOL)a3
{
  int m_ptr_low;

  m_ptr_low = LOBYTE(self->_dataListTextSuggestionsInputView.m_ptr);
  if (m_ptr_low != a3)
    LOBYTE(self->_dataListTextSuggestionsInputView.m_ptr) = a3;
  return m_ptr_low != a3;
}

- (void)setInputDelegate:(id)a3
{
  objc_storeWeak(&self->_inputDelegate.m_weakReference, a3);
}

- (void)keyboardScrollViewAnimatorDidFinishScrolling:(id)a3
{
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_didFinishScrolling:", objc_msgSend(-[WKContentView webView](self, "webView"), "scrollView"));
  BYTE5(self->_revealFocusedElementDeferrer.m_ptr) = 0;
}

- (void)_resetPanningPreventionFlags
{
  self->_preventsPanningInXAxis = 0;
  self->_preventsPanningInYAxis = 0;
}

- (void)_hideKeyboard
{
  BOOL usingGestureForSelection;

  usingGestureForSelection = self->_usingGestureForSelection;
  self->_usingGestureForSelection = 1;
  -[WKContentView setInputDelegate:](self, "setInputDelegate:", 0);
  -[WKContentView setUpTextSelectionAssistant](self, "setUpTextSelectionAssistant");
  objc_msgSend(self->_textInteractionWrapper.m_ptr, "deactivateSelection");
  objc_msgSend(self->_formAccessoryView.m_ptr, "hideAutoFillButton");
  -[WKContentView reloadInputViews](self, "reloadInputViews");
  if (self->_formAccessoryView.m_ptr)
    -[WKContentView _updateAccessory](self, "_updateAccessory");
  self->_usingGestureForSelection = usingGestureForSelection;
}

- (void)_elementDidBlur
{
  BOOL isDoubleTapPending;
  WeakObjCPtr<WKWebView> *p_webView;
  void *m_ptr;
  const void *v6;
  void *v7;
  _BOOL4 v8;
  void *v9;
  void *value;
  uint64_t v11;
  WebPageProxy *v12;
  uint64_t v13;
  char v14;

  isDoubleTapPending = self->_isDoubleTapPending;
  self->_isDoubleTapPending = 1;
  p_webView = &self->_webView;
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_resetFocusPreservationCount");
  -[WKContentView _endEditing](self, "_endEditing");
  objc_msgSend(self->_formInputSession.m_ptr, "invalidate");
  m_ptr = self->_formInputSession.m_ptr;
  self->_formInputSession.m_ptr = 0;
  if (m_ptr)
    CFRelease(m_ptr);
  v6 = *(const void **)&self->_inputViewUpdateDeferralSources.m_storage;
  *(_QWORD *)&self->_inputViewUpdateDeferralSources.m_storage = 0;
  if (v6)
    CFRelease(v6);
  v7 = self->_keyboardScrollingAnimator.m_ptr;
  self->_keyboardScrollingAnimator.m_ptr = 0;
  if (v7)
    CFRelease(v7);
  v8 = -[WKContentView setIsEditable:](self, "setIsEditable:", 0);
  self->_anon_938[113] = 0;
  self->_anon_938[289] = 0;
  *(_DWORD *)&self->_anon_938[292] = 0;
  self->_anon_938[296] = 0;
  v9 = self->_inputPeripheral.m_ptr;
  self->_inputPeripheral.m_ptr = 0;
  if (v9)
    CFRelease(v9);
  self->_textInteractionDidChangeFocusedElement = 0;
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  value = self->_domPasteRequestHandler.m_function.m_callableWrapper.__ptr_.__value_;
  self->_domPasteRequestHandler.m_function.m_callableWrapper.__ptr_.__value_ = 0;
  if (value)
    CFRelease(value);
  self->_shouldRestoreSelection = 0;
  v11 = *(_QWORD *)&self->_actionsToPerformAfterEditorStateUpdate.m_capacity;
  *(_QWORD *)&self->_actionsToPerformAfterEditorStateUpdate.m_capacity = 0;
  if (v11)
    WTF::RefCounted<WebKit::RevealFocusedElementDeferrer>::deref(v11);
  if (v8)
    HIBYTE(self->_revealFocusedElementDeferrer.m_ptr) = 0;
  -[WKContentView _hideKeyboard](self, "_hideKeyboard");
  if (v8)
  {
    objc_msgSend(objc_loadWeak(&p_webView->m_weakReference), "_scheduleVisibleContentRectUpdate");
    objc_msgSend(objc_loadWeak(&p_webView->m_weakReference), "didEndFormControlInteraction");
    v12 = self->_page.m_ptr;
    v13 = *((_QWORD *)v12 + 26);
    v14 = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsShowingInputViewForFocusedElement>(v13, &v14, *(_QWORD *)(*((_QWORD *)v12 + 4) + 1896), 0);
  }
  *((_BYTE *)self->_page.m_ptr + 1032) = 0;
  if (!self->_isTapHighlightFading)
    BYTE6(self->_dataListTextSuggestions.m_ptr) = 0;
  if (*((_BYTE *)&self->_domPasteRequestCategory + 4))
    *((_BYTE *)&self->_domPasteRequestCategory + 4) = 0;
  self->_isDoubleTapPending = isDoubleTapPending;
}

- (void)_didEndScrollingOrZooming
{
  WebPageProxy *m_ptr;
  WebCore::ValidationBubble *v4;

  if (!self->_isTapHighlightIDValid)
    objc_msgSend(self->_textInteractionWrapper.m_ptr, "didEndScrollingOrZooming");
  m_ptr = self->_page.m_ptr;
  *((_BYTE *)m_ptr + 402) = 0;
  v4 = (WebCore::ValidationBubble *)*((_QWORD *)m_ptr + 102);
  if (v4)
    WebCore::ValidationBubble::show(v4);
  -[WKContentView _resetPanningPreventionFlags](self, "_resetPanningPreventionFlags");
}

- (void)_removeVisibilityPropagationViewForWebProcess
{
  WebPageProxy *m_ptr;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  NSObject *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t buf[4];
  void *v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  m_ptr = self->_page.m_ptr;
  if (m_ptr)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v4 = self->_inspectorIndicationView.m_ptr;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "stopPropagatingVisibilityToProcess:", *((_QWORD *)m_ptr + 26));
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
      }
      while (v6);
    }
  }
  v9 = self->_rootContentView.m_ptr;
  if (v9)
  {
    v10 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v17 = v9;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "Removing visibility propagation view %p", buf, 0xCu);
      v9 = self->_rootContentView.m_ptr;
    }
    objc_msgSend(v9, "removeFromSuperview");
    v11 = self->_rootContentView.m_ptr;
    self->_rootContentView.m_ptr = 0;
    if (v11)
      CFRelease(v11);
  }
}

- (void)_removeVisibilityPropagationViewForGPUProcess
{
  WebPageProxy *m_ptr;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  NSObject *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t buf[4];
  void *v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  m_ptr = self->_page.m_ptr;
  if (m_ptr)
  {
    v4 = *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*((_QWORD *)m_ptr + 6) + 24))
         + 22);
    if (v4)
    {
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v5 = self->_inspectorIndicationView.m_ptr;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v19, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v14;
        do
        {
          for (i = 0; i != v7; ++i)
          {
            if (*(_QWORD *)v14 != v8)
              objc_enumerationMutation(v5);
            objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * i), "stopPropagatingVisibilityToProcess:", v4);
          }
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v19, 16);
        }
        while (v7);
      }
    }
  }
  v10 = self->_fixedClippingView.m_ptr;
  if (v10)
  {
    v11 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v18 = v10;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "Removing visibility propagation view %p", buf, 0xCu);
      v10 = self->_fixedClippingView.m_ptr;
    }
    objc_msgSend(v10, "removeFromSuperview");
    v12 = self->_fixedClippingView.m_ptr;
    self->_fixedClippingView.m_ptr = 0;
    if (v12)
      CFRelease(v12);
  }
}

- (void)_removeTemporaryDirectoriesWhenDeallocated:(void *)a3
{
  Lock *p_pendingBackgroundPrintFormattersLock;
  uint64_t v5;
  unint64_t m_ptr_low;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  p_pendingBackgroundPrintFormattersLock = &self->_pendingBackgroundPrintFormattersLock;
  v5 = *((unsigned int *)a3 + 3);
  m_ptr_low = LODWORD(self->_pendingBackgroundPrintFormatters.m_ptr);
  v7 = v5 + HIDWORD(self->_pendingBackgroundPrintFormatters.m_ptr);
  if (v7 > m_ptr_low)
  {
    v8 = m_ptr_low + (m_ptr_low >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= v7)
      v10 = v7;
    else
      v10 = v9;
    WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&self->_pendingBackgroundPrintFormattersLock, v10);
    v5 = *((unsigned int *)a3 + 3);
  }
  if ((_DWORD)v5)
  {
    v11 = *(uint64_t **)a3;
    v12 = *(_DWORD *)&p_pendingBackgroundPrintFormattersLock[12].m_byte.value.__a_.__a_value;
    v13 = 8 * v5;
    do
    {
      v14 = *(_QWORD *)&p_pendingBackgroundPrintFormattersLock->m_byte.value.__a_.__a_value;
      v15 = *v11;
      *v11++ = 0;
      *(_QWORD *)(v14 + 8 * v12++) = v15;
      v13 -= 8;
    }
    while (v13);
    *(_DWORD *)&p_pendingBackgroundPrintFormattersLock[12].m_byte.value.__a_.__a_value = v12;
  }
}

- (id)rootContentView
{
  return *(id *)&self->_anon_fa8[48];
}

- (WKBrowsingContextController)browsingContextController
{
  WKBrowsingContextController *result;
  WKBrowsingContextController *v4;
  WebPageProxy *m_ptr;
  uint64_t v6;
  const void *v7;

  result = *(WKBrowsingContextController **)&self->_anon_fa8[40];
  if (!result)
  {
    v4 = [WKBrowsingContextController alloc];
    m_ptr = self->_page.m_ptr;
    if (m_ptr)
      v6 = *((_QWORD *)m_ptr + 1);
    else
      v6 = 0;
    result = -[WKBrowsingContextController _initWithPageRef:](v4, "_initWithPageRef:", v6);
    v7 = *(const void **)&self->_anon_fa8[40];
    *(_QWORD *)&self->_anon_fa8[40] = result;
    if (v7)
    {
      CFRelease(v7);
      return *(WKBrowsingContextController **)&self->_anon_fa8[40];
    }
  }
  return result;
}

- (OpaqueWKPage)_pageRef
{
  WebPageProxy *m_ptr;

  m_ptr = self->_page.m_ptr;
  if (m_ptr)
    return (OpaqueWKPage *)*((_QWORD *)m_ptr + 1);
  else
    return 0;
}

- (void)_showInspectorHighlight:(const void *)a3
{
  void *m_ptr;
  WKInspectorHighlightView *v6;
  WKInspectorHighlightView *v7;
  void *v8;

  m_ptr = self->_browsingContextController.m_ptr;
  if (!m_ptr)
  {
    v6 = [WKInspectorHighlightView alloc];
    v7 = -[WKInspectorHighlightView initWithFrame:](v6, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
    v8 = self->_browsingContextController.m_ptr;
    self->_browsingContextController.m_ptr = v7;
    if (v8)
    {
      CFRelease(v8);
      v7 = (WKInspectorHighlightView *)self->_browsingContextController.m_ptr;
    }
    -[WKContentView insertSubview:aboveSubview:](self, "insertSubview:aboveSubview:", v7, *(_QWORD *)&self->_anon_fa8[48]);
    m_ptr = self->_browsingContextController.m_ptr;
  }
  -[WKContentView _contentZoomScale](self, "_contentZoomScale");
  objc_msgSend(m_ptr, "update:scale:frame:", a3, *((_QWORD *)self->_page.m_ptr + 4) + 2272);
}

- (void)_hideInspectorHighlight
{
  void *m_ptr;
  void *v4;

  m_ptr = self->_browsingContextController.m_ptr;
  if (m_ptr)
  {
    objc_msgSend(m_ptr, "removeFromSuperview");
    v4 = self->_browsingContextController.m_ptr;
    self->_browsingContextController.m_ptr = 0;
    if (v4)
      CFRelease(v4);
  }
}

- (BOOL)isShowingInspectorIndication
{
  return self->_pageClient.__ptr_.__value_ != 0;
}

- (void)setShowingInspectorIndication:(BOOL)a3
{
  PageClientImpl *value;
  WKInspectorIndicationView *v5;
  PageClientImpl *v6;
  PageClientImpl *v7;
  PageClientImpl *v8;

  value = self->_pageClient.__ptr_.__value_;
  if (a3)
  {
    if (!value)
    {
      v5 = [WKInspectorIndicationView alloc];
      -[WKContentView bounds](self, "bounds");
      v6 = -[WKInspectorIndicationView initWithFrame:](v5, "initWithFrame:");
      v7 = self->_pageClient.__ptr_.__value_;
      self->_pageClient.__ptr_.__value_ = v6;
      if (v7)
      {
        CFRelease(v7);
        v6 = self->_pageClient.__ptr_.__value_;
      }
      -[PageClientImpl setAutoresizingMask:](v6, "setAutoresizingMask:", 18);
      -[WKContentView insertSubview:aboveSubview:](self, "insertSubview:aboveSubview:", self->_pageClient.__ptr_.__value_, *(_QWORD *)&self->_anon_fa8[48]);
    }
  }
  else if (value)
  {
    -[PageClientImpl removeFromSuperview](value, "removeFromSuperview");
    v8 = self->_pageClient.__ptr_.__value_;
    self->_pageClient.__ptr_.__value_ = 0;
    if (v8)
      CFRelease(v8);
  }
}

- (void)_didExitStableState
{
  _BOOL4 v3;

  v3 = -[WKContentView shouldHideSelectionWhenScrolling](self, "shouldHideSelectionWhenScrolling");
  self->_isTapHighlightIDValid = v3;
  if (v3)
    objc_msgSend(self->_textInteractionWrapper.m_ptr, "deactivateSelection");
}

- (void)didInterruptScrolling
{
  LODWORD(self->_inspectorHighlightView.m_ptr) = 0;
}

- (BOOL)screenIsBeingCaptured
{
  return objc_msgSend((id)objc_msgSend((id)-[WKContentView window](self, "window"), "screen"), "isCaptured");
}

- (int64_t)interfaceOrientation
{
  return objc_msgSend((id)objc_msgSend((id)-[WKContentView window](self, "window"), "windowScene"), "interfaceOrientation");
}

- (BOOL)canBecomeFocused
{
  void *v3;

  v3 = (void *)objc_msgSend(-[WKContentView webView](self, "webView"), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v3, "_webViewCanBecomeFocused:", -[WKContentView webView](self, "webView"));
  else
    return objc_opt_respondsToSelector() & 1;
}

- (void)didUpdateFocusInContext:(id)a3 withAnimationCoordinator:(id)a4
{
  unint64_t v6;

  if ((WKContentView *)objc_msgSend(a3, "nextFocusedView") == self)
  {
    v6 = objc_msgSend(a3, "focusHeading");
    if ((v6 & 0x10) != 0 || (objc_msgSend(a3, "focusHeading") & 0x20) != 0)
      -[WKContentView _becomeFirstResponderWithSelectionMovingForward:completionHandler:](self, "_becomeFirstResponderWithSelectionMovingForward:completionHandler:", (v6 >> 4) & 1, 0);
  }
}

- (void)_windowDidMoveToScreenNotification:(id)a3
{
  void *v4;

  v4 = (void *)objc_msgSend(a3, "userInfo");
  -[WKContentView _updateForScreen:](self, "_updateForScreen:", objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0CEBE40]));
}

- (void)_resetPrintingState
{
  unsigned __int8 *p_position;
  double scale;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  self->_undoManager.m_ptr = 0;
  p_position = (unsigned __int8 *)&self->_historicalKinematicData.m_positionHistory[2].position;
  if (__ldaxr((unsigned __int8 *)&self->_historicalKinematicData.m_positionHistory[2].position))
  {
    __clrex();
  }
  else if (!__stxr(1u, p_position))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](&self->_historicalKinematicData.m_positionHistory[2].position, a2);
LABEL_5:
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  scale = self->_historicalKinematicData.m_positionHistory[2].scale;
  v6 = objc_msgSend(*(id *)&scale, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(*(id *)&scale);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "_invalidatePrintRenderingState");
      }
      v6 = objc_msgSend(*(id *)&scale, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }
  objc_msgSend(*(id *)&self->_historicalKinematicData.m_positionHistory[2].scale, "removeAllObjects");
  v9 = __ldxr(p_position);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, p_position))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)p_position);
}

- (void)_processDidExit
{
  -[WKContentView _updateRemoteAccessibilityRegistration:](self, "_updateRemoteAccessibilityRegistration:", 0);
  -[WKContentView cleanUpInteraction](self, "cleanUpInteraction");
  -[WKContentView setShowingInspectorIndication:](self, "setShowingInspectorIndication:", 0);
  -[WKContentView _hideInspectorHighlight](self, "_hideInspectorHighlight");
  -[WKContentView _removeVisibilityPropagationViewForWebProcess](self, "_removeVisibilityPropagationViewForWebProcess");
  -[WKContentView _resetPrintingState](self, "_resetPrintingState");
}

- (void)_didRelaunchProcess
{
  -[WKContentView _accessibilityRegisterUIProcessTokens](self, "_accessibilityRegisterUIProcessTokens");
  -[WKContentView setUpInteraction](self, "setUpInteraction");
  -[WKContentView _setupVisibilityPropagationForWebProcess](self, "_setupVisibilityPropagationForWebProcess");
  -[WKContentView _setupVisibilityPropagationForGPUProcess](self, "_setupVisibilityPropagationForGPUProcess");
}

- (BOOL)_scrollToRect:(CGRect)a3 withOrigin:(CGPoint)a4 minimumScrollDistance:(double)a5
{
  id Weak;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  _DWORD v15[2];
  _DWORD v16[4];
  CGPoint v17;
  CGRect v18;

  v18 = a3;
  v17 = a4;
  Weak = objc_loadWeak(&self->_webView.m_weakReference);
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v16, &v18);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v15, &v17);
  *(float *)&v7 = a5;
  LODWORD(v8) = v16[0];
  LODWORD(v9) = v16[1];
  LODWORD(v10) = v16[2];
  LODWORD(v11) = v16[3];
  LODWORD(v12) = v15[0];
  LODWORD(v13) = v15[1];
  return objc_msgSend(Weak, "_scrollToRect:origin:minimumScrollDistance:", v8, v9, v10, v11, v12, v13, v7);
}

- (void)_zoomToFocusRect:(CGRect)a3 selectionRect:(CGRect)a4 fontSize:(float)a5 minimumScale:(double)a6 maximumScale:(double)a7 allowScaling:(BOOL)a8 forceScroll:(BOOL)a9
{
  _BOOL8 v9;
  _BOOL8 v10;
  id Weak;
  double v12;
  _BYTE v13[16];
  _BYTE v14[16];
  CGRect v15;
  CGRect v16;

  v9 = a9;
  v10 = a8;
  v16 = a3;
  v15 = a4;
  Weak = objc_loadWeak(&self->_webView.m_weakReference);
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v14, &v16);
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v13, &v15);
  *(float *)&v12 = a5;
  objc_msgSend(Weak, "_zoomToFocusRect:selectionRect:fontSize:minimumScale:maximumScale:allowScaling:forceScroll:", v14, v13, v10, v9, v12, a6, a7);
}

- (BOOL)_zoomToRect:(CGRect)a3 withOrigin:(CGPoint)a4 fitEntireRect:(BOOL)a5 minimumScale:(double)a6 maximumScale:(double)a7 minimumScrollDistance:(double)a8
{
  _BOOL8 v10;
  id Weak;
  float v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v20;
  _DWORD v21[2];
  _DWORD v22[4];
  CGPoint v23;
  CGRect v24;

  v10 = a5;
  v24 = a3;
  v23 = a4;
  Weak = objc_loadWeak(&self->_webView.m_weakReference);
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v22, &v24);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v21, &v23);
  v12 = a8;
  LODWORD(v13) = v22[0];
  LODWORD(v14) = v22[1];
  LODWORD(v15) = v22[2];
  LODWORD(v16) = v22[3];
  LODWORD(v17) = v21[0];
  LODWORD(v18) = v21[1];
  *(float *)&v20 = v12;
  return objc_msgSend(Weak, "_zoomToRect:withOrigin:fitEntireRect:minimumScale:maximumScale:minimumScrollDistance:", v10, v13, v14, v15, v16, v17, v18, a6, a7, v20);
}

- (void)_zoomOutWithOrigin:(CGPoint)a3
{
  id Weak;
  double v4;
  double v5;
  _DWORD v6[2];
  CGPoint v7;

  v7 = a3;
  Weak = objc_loadWeak(&self->_webView.m_weakReference);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v6, &v7);
  LODWORD(v4) = v6[0];
  LODWORD(v5) = v6[1];
  objc_msgSend(Weak, "_zoomOutWithOrigin:animated:", 1, v4, v5);
}

- (void)_zoomToInitialScaleWithOrigin:(CGPoint)a3
{
  id Weak;
  double v4;
  double v5;
  _DWORD v6[2];
  CGPoint v7;

  v7 = a3;
  Weak = objc_loadWeak(&self->_webView.m_weakReference);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v6, &v7);
  LODWORD(v4) = v6[0];
  LODWORD(v5) = v6[1];
  objc_msgSend(Weak, "_zoomToInitialScaleWithOrigin:animated:", 1, v4, v5);
}

- (double)_initialScaleFactor
{
  double result;

  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_initialScaleFactor");
  return result;
}

- (double)_contentZoomScale
{
  double result;

  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_contentZoomScale");
  return result;
}

- (double)_targetContentZoomScaleForRect:(const FloatRect *)a3 currentScale:(double)a4 fitEntireRect:(BOOL)a5 minimumScale:(double)a6 maximumScale:(double)a7
{
  double result;

  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_targetContentZoomScaleForRect:currentScale:fitEntireRect:minimumScale:maximumScale:", a3, a5, a4, a6, a7);
  return result;
}

- (void)_applicationWillResignActive:(id)a3
{
  WebPageProxy *m_ptr;
  uint64_t v4;
  char v5;

  m_ptr = self->_page.m_ptr;
  v4 = *((_QWORD *)m_ptr + 26);
  v5 = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ApplicationWillResignActive>(v4, (uint64_t)&v5, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)_applicationDidEnterBackground:(id)a3
{
  if (!-[WKContentView window](self, "window", a3))
    WebKit::WebPageProxy::applicationDidEnterBackgroundForMedia((WebKit::WebPageProxy *)self->_page.m_ptr);
}

- (void)_applicationWillEnterForeground:(id)a3
{
  if (!-[WKContentView window](self, "window", a3))
    WebKit::WebPageProxy::applicationWillEnterForegroundForMedia((WebKit::WebPageProxy *)self->_page.m_ptr);
}

- (void)_screenCapturedDidChange:(id)a3
{
  WebKit::WebPageProxy::setScreenIsBeingCaptured((uint64_t)self->_page.m_ptr, -[WKContentView screenIsBeingCaptured](self, "screenIsBeingCaptured", a3));
}

- (BOOL)isResigningFirstResponder
{
  return self->_hasValidPositionInformation;
}

- (optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,)_frameIdentifierForPrintFormatter:(unsigned long long>>> *__return_ptr)retstr
{
  optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>> *result;
  $17C4A8953743AF6D7D0F0247BBB6324E var0;
  $17C4A8953743AF6D7D0F0247BBB6324E *v8;

  result = (optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>> *)objc_msgSend(a4, "frameToPrint");
  if (result)
  {
    var0 = result[1].var0;
  }
  else
  {
    v8 = ($17C4A8953743AF6D7D0F0247BBB6324E *)*((_QWORD *)self->_page.m_ptr + 35);
    if (!v8)
    {
      retstr->var0.__null_state_ = 0;
      goto LABEL_6;
    }
    var0 = v8[17];
  }
  retstr->var0 = var0;
  LOBYTE(v8) = 1;
LABEL_6:
  retstr->__engaged_ = (char)v8;
  return result;
}

- (BOOL)_wk_printFormatterRequiresMainThread
{
  return 0;
}

- (RetainPtr<_WKPrintFormattingAttributes>)_attributesForPrintFormatter:(id)a3
{
  _QWORD *v3;
  _QWORD *v6;
  char isMainRunLoop;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  double height;
  RetainPtr<_WKPrintFormattingAttributes> v24;
  unsigned int v25;
  double v26;
  double v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  _WKPrintFormattingAttributes *v32;
  NSObject *v33;
  _OWORD v34[2];
  uint64_t v35;
  __int16 v36;
  char v37;
  unint64_t var0;
  __int128 v39;
  _BYTE v40[32];
  _BYTE buf[29];
  uint64_t v42;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  v6 = v3;
  v42 = *MEMORY[0x1E0C80C00];
  isMainRunLoop = WTF::isMainRunLoop((WTF *)self);
  -[WKContentView _waitForDrawToImageCallbackForPrintFormatterIfNeeded:](self, "_waitForDrawToImageCallbackForPrintFormatterIfNeeded:", a3);
  -[WKContentView _waitForDrawToPDFCallbackForPrintFormatterIfNeeded:](self, "_waitForDrawToPDFCallbackForPrintFormatterIfNeeded:", a3);
  objc_msgSend(a3, "_pageContentRect:", 1);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  objc_msgSend(a3, "_pageContentRect:", 0);
  v48.origin.x = v16;
  v48.origin.y = v17;
  v48.size.width = v18;
  v48.size.height = v19;
  v44.origin.x = v9;
  v44.origin.y = v11;
  v44.size.width = v13;
  v44.size.height = v15;
  v45 = CGRectIntersection(v44, v48);
  x = v45.origin.x;
  y = v45.origin.y;
  width = v45.size.width;
  height = v45.size.height;
  v24.var0 = (void *)CGRectIsEmpty(v45);
  if (LODWORD(v24.var0))
    goto LABEL_18;
  *(_QWORD *)&v40[20] = 0;
  *(_QWORD *)&v40[12] = 0;
  *(_DWORD *)v40 = 1065353216;
  v25 = objc_msgSend(a3, "snapshotFirstPage");
  v40[28] = v25;
  if (v25)
  {
    -[WKContentView bounds](self, "bounds");
    width = v27;
    x = *MEMORY[0x1E0C9D538];
    y = *(double *)(MEMORY[0x1E0C9D538] + 8);
    if (v26 <= 14400.0)
      height = v26;
    else
      height = 14400.0;
    objc_msgSend(a3, "_setSnapshotPaperRect:", *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
  }
  v46.origin.x = x;
  v46.origin.y = y;
  v46.size.width = width;
  v46.size.height = height;
  v28 = CGRectGetWidth(v46);
  *(float *)&v40[4] = v28;
  v47.origin.x = x;
  v47.origin.y = y;
  v47.size.width = width;
  v47.size.height = height;
  v29 = CGRectGetHeight(v47);
  *(float *)&v40[8] = v29;
  v39 = 0uLL;
  var0 = v25;
  if ((isMainRunLoop & 1) != 0)
  {
    if (!self
      || (v24.var0 = -[WKContentView _frameIdentifierForPrintFormatter:](self, "_frameIdentifierForPrintFormatter:", a3),
          !buf[16])
      || (v39 = *(_OWORD *)buf, (v25 & 1) == 0)
      && (v24.var0 = (void *)WebKit::WebPageProxy::computePagesForPrintingiOS((uint64_t)self->_page.m_ptr, v39, *((uint64_t *)&v39 + 1), (uint64_t)v40), (var0 = (unint64_t)v24.var0) == 0))
    {
LABEL_18:
      *v6 = 0;
      return v24;
    }
  }
  else
  {
    v36 = 0;
    v37 = 0;
    *(_OWORD *)buf = *(_OWORD *)v40;
    *(_OWORD *)&buf[13] = *(_OWORD *)&v40[13];
    v30 = WTF::fastMalloc((WTF *)0x50);
    *(_QWORD *)v30 = off_1E3506818;
    *(_QWORD *)(v30 + 8) = self;
    *(_QWORD *)(v30 + 16) = a3;
    *(_OWORD *)(v30 + 24) = *(_OWORD *)buf;
    *(_OWORD *)(v30 + 37) = *(_OWORD *)&buf[13];
    *(_QWORD *)(v30 + 56) = &v39;
    *(_QWORD *)(v30 + 64) = &var0;
    *(_QWORD *)(v30 + 72) = &v36;
    v35 = v30;
    WTF::callOnMainRunLoop();
    v31 = v35;
    v35 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    *(_QWORD *)buf = 0x7FF0000000000000;
    *(_DWORD *)&buf[8] = 0;
    WTF::BinarySemaphore::waitUntil();
    v24.var0 = (void *)var0;
    if (!var0)
      goto LABEL_18;
  }
  v32 = [_WKPrintFormattingAttributes alloc];
  v34[0] = *(_OWORD *)v40;
  v34[1] = *(_OWORD *)&v40[16];
  *v6 = -[_WKPrintFormattingAttributes initWithPageCount:frameID:printInfo:](v32, "initWithPageCount:frameID:printInfo:", var0, v39, v34);
  v33 = qword_1ECE715C8;
  v24.var0 = (void *)os_log_type_enabled((os_log_t)qword_1ECE715C8, OS_LOG_TYPE_DEFAULT);
  if (LODWORD(v24.var0))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = var0;
    _os_log_impl(&dword_196BCC000, v33, OS_LOG_TYPE_DEFAULT, "Computed attributes for print formatter. Computed page count = %zu", buf, 0xCu);
  }
  return v24;
}

- (unint64_t)_wk_pageCountForPrintFormatter:(id)a3
{
  unint64_t v3;
  void *cf;

  if (!self)
    return 0;
  -[WKContentView _attributesForPrintFormatter:](self, "_attributesForPrintFormatter:", a3);
  if (!cf)
    return 0;
  v3 = objc_msgSend(cf, "pageCount");
  CFRelease(cf);
  return v3;
}

- (void)_createImage:(id)a3 printFormatter:(id)a4
{
  char isMainRunLoop;
  uint64_t v8;
  uint64_t v9;

  isMainRunLoop = WTF::isMainRunLoop((WTF *)self);
  if (a3)
    CFRetain(a3);
  if (a4)
    CFRetain(a4);
  if (self)
    CFRetain(self);
  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = &off_1E3506868;
  *(_QWORD *)(v8 + 8) = a3;
  *(_BYTE *)(v8 + 16) = isMainRunLoop ^ 1;
  *(_QWORD *)(v8 + 24) = a4;
  *(_QWORD *)(v8 + 32) = self;
  v9 = v8;
  WTF::ensureOnMainRunLoop();
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

- (void)_createPDF:(id)a3 printFormatter:(id)a4
{
  char isMainRunLoop;
  uint64_t v8;
  uint64_t v9;

  isMainRunLoop = WTF::isMainRunLoop((WTF *)self);
  if (a3)
    CFRetain(a3);
  if (a4)
    CFRetain(a4);
  if (self)
    CFRetain(self);
  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = &off_1E35068B8;
  *(_QWORD *)(v8 + 8) = a3;
  *(_BYTE *)(v8 + 16) = isMainRunLoop ^ 1;
  *(_QWORD *)(v8 + 24) = a4;
  *(_QWORD *)(v8 + 32) = self;
  v9 = v8;
  WTF::ensureOnMainRunLoop();
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

- (void)_waitForDrawToPDFCallbackForPrintFormatterIfNeeded:(id)a3
{
  void *m_ptr;
  unsigned __int8 ***v6;
  int v7;
  unsigned __int8 *p_position;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (!WTF::isMainRunLoop((WTF *)self))
  {
    p_position = (unsigned __int8 *)&self->_historicalKinematicData.m_positionHistory[2].position;
    if (__ldaxr((unsigned __int8 *)&self->_historicalKinematicData.m_positionHistory[2].position))
    {
      __clrex();
    }
    else if (!__stxr(1u, p_position))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEABB3C](&self->_historicalKinematicData.m_positionHistory[2].position);
LABEL_11:
    v10 = objc_msgSend(*(id *)&self->_historicalKinematicData.m_positionHistory[2].scale, "containsObject:", a3);
    v11 = v10;
    v12 = __ldxr(p_position);
    if (v12 == 1)
    {
      if (!__stlxr(0, p_position))
      {
        if (!v10)
          return;
        goto LABEL_17;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)p_position);
    if (!v11)
      return;
LABEL_17:
    objc_msgSend(a3, "_waitForPrintedDocumentOrImage");
    return;
  }
  if (self->_undoManagerForSimulatingKeyEvents.m_ptr == (void *)1)
  {
    m_ptr = self->_undoManager.m_ptr;
    self->_undoManager.m_ptr = 0;
    if (m_ptr)
    {
      v6 = *(unsigned __int8 ****)(*((_QWORD *)self->_page.m_ptr + 26) + 144);
      IPC::Connection::waitForMessage(v6, 0xD01u, (uint64_t)m_ptr, 0, (uint64_t)&v16, INFINITY);
      v7 = v17;
      if (v17)
      {
        if (v17 != 1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_26:
          __break(1u);
          return;
        }
LABEL_23:
        ((void (*)(uint64_t *, uint64_t *))off_1E35068F8[v7])(&v15, &v16);
        return;
      }
      IPC::Connection::takeAsyncReplyHandler((os_unfair_lock_s *)v6, *(_QWORD *)(v16 + 64), &v15);
      v13 = v15;
      if (v15)
      {
        if (v17)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_26;
        }
        v15 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v16);
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v14 = v15;
        v15 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      v7 = v17;
      if (v17 != -1)
        goto LABEL_23;
    }
  }
}

- (void)_wk_requestDocumentForPrintFormatter:(id)a3
{
  char isMainRunLoop;
  char v6;
  unsigned __int8 *p_position;
  double scale;
  double v10;
  int v11;
  CFTypeRef cf;

  isMainRunLoop = WTF::isMainRunLoop((WTF *)self);
  if (self)
  {
    v6 = isMainRunLoop;
    -[WKContentView _attributesForPrintFormatter:](self, "_attributesForPrintFormatter:", a3);
    if (cf)
    {
      if ((v6 & 1) != 0)
        goto LABEL_16;
      p_position = (unsigned __int8 *)&self->_historicalKinematicData.m_positionHistory[2].position;
      if (__ldaxr((unsigned __int8 *)&self->_historicalKinematicData.m_positionHistory[2].position))
      {
        __clrex();
      }
      else if (!__stxr(1u, p_position))
      {
LABEL_8:
        scale = self->_historicalKinematicData.m_positionHistory[2].scale;
        if (scale == 0.0)
        {
          *(_QWORD *)&scale = objc_alloc_init(MEMORY[0x1E0C99E20]);
          v10 = self->_historicalKinematicData.m_positionHistory[2].scale;
          self->_historicalKinematicData.m_positionHistory[2].scale = scale;
          if (v10 != 0.0)
          {
            CFRelease(*(CFTypeRef *)&v10);
            scale = self->_historicalKinematicData.m_positionHistory[2].scale;
          }
        }
        objc_msgSend(*(id *)&scale, "addObject:", a3);
        v11 = __ldxr(p_position);
        if (v11 == 1)
        {
          if (!__stlxr(0, p_position))
          {
LABEL_16:
            -[WKContentView _createPDF:printFormatter:](self, "_createPDF:printFormatter:", cf, a3);
            -[WKContentView _waitForDrawToPDFCallbackForPrintFormatterIfNeeded:](self, "_waitForDrawToPDFCallbackForPrintFormatterIfNeeded:", a3);
            CFRelease(cf);
            return;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)&self->_historicalKinematicData.m_positionHistory[2].position);
        goto LABEL_16;
      }
      MEMORY[0x19AEABB3C](&self->_historicalKinematicData.m_positionHistory[2].position);
      goto LABEL_8;
    }
  }
}

- (void)_waitForDrawToImageCallbackForPrintFormatterIfNeeded:(id)a3
{
  void *m_ptr;
  unsigned __int8 ***v6;
  int v7;
  unsigned __int8 *p_position;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (!WTF::isMainRunLoop((WTF *)self))
  {
    p_position = (unsigned __int8 *)&self->_historicalKinematicData.m_positionHistory[2].position;
    if (__ldaxr((unsigned __int8 *)&self->_historicalKinematicData.m_positionHistory[2].position))
    {
      __clrex();
    }
    else if (!__stxr(1u, p_position))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEABB3C](&self->_historicalKinematicData.m_positionHistory[2].position);
LABEL_11:
    v10 = objc_msgSend(*(id *)&self->_historicalKinematicData.m_positionHistory[2].scale, "containsObject:", a3);
    v11 = v10;
    v12 = __ldxr(p_position);
    if (v12 == 1)
    {
      if (!__stlxr(0, p_position))
      {
        if (!v10)
          return;
        goto LABEL_17;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)p_position);
    if (!v11)
      return;
LABEL_17:
    objc_msgSend(a3, "_waitForPrintedDocumentOrImage");
    return;
  }
  if (!self->_undoManagerForSimulatingKeyEvents.m_ptr)
  {
    m_ptr = self->_undoManager.m_ptr;
    self->_undoManager.m_ptr = 0;
    if (m_ptr)
    {
      v6 = *(unsigned __int8 ****)(*((_QWORD *)self->_page.m_ptr + 26) + 144);
      IPC::Connection::waitForMessage(v6, 0xCFEu, (uint64_t)m_ptr, 0, (uint64_t)&v16, INFINITY);
      v7 = v17;
      if (v17)
      {
        if (v17 != 1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_26:
          __break(1u);
          return;
        }
LABEL_23:
        ((void (*)(uint64_t *, uint64_t *))off_1E35068F8[v7])(&v15, &v16);
        return;
      }
      IPC::Connection::takeAsyncReplyHandler((os_unfair_lock_s *)v6, *(_QWORD *)(v16 + 64), &v15);
      v13 = v15;
      if (v15)
      {
        if (v17)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_26;
        }
        v15 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v16);
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v14 = v15;
        v15 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      v7 = v17;
      if (v17 != -1)
        goto LABEL_23;
    }
  }
}

- (void)_wk_requestImageForPrintFormatter:(id)a3
{
  char isMainRunLoop;
  char v6;
  unsigned __int8 *p_position;
  double scale;
  double v10;
  int v11;
  CFTypeRef cf;

  isMainRunLoop = WTF::isMainRunLoop((WTF *)self);
  if (self)
  {
    v6 = isMainRunLoop;
    -[WKContentView _attributesForPrintFormatter:](self, "_attributesForPrintFormatter:", a3);
    if (cf)
    {
      if ((v6 & 1) != 0)
        goto LABEL_16;
      p_position = (unsigned __int8 *)&self->_historicalKinematicData.m_positionHistory[2].position;
      if (__ldaxr((unsigned __int8 *)&self->_historicalKinematicData.m_positionHistory[2].position))
      {
        __clrex();
      }
      else if (!__stxr(1u, p_position))
      {
LABEL_8:
        scale = self->_historicalKinematicData.m_positionHistory[2].scale;
        if (scale == 0.0)
        {
          *(_QWORD *)&scale = objc_alloc_init(MEMORY[0x1E0C99E20]);
          v10 = self->_historicalKinematicData.m_positionHistory[2].scale;
          self->_historicalKinematicData.m_positionHistory[2].scale = scale;
          if (v10 != 0.0)
          {
            CFRelease(*(CFTypeRef *)&v10);
            scale = self->_historicalKinematicData.m_positionHistory[2].scale;
          }
        }
        objc_msgSend(*(id *)&scale, "addObject:", a3);
        v11 = __ldxr(p_position);
        if (v11 == 1)
        {
          if (!__stlxr(0, p_position))
          {
LABEL_16:
            -[WKContentView _createImage:printFormatter:](self, "_createImage:printFormatter:", cf, a3);
            -[WKContentView _waitForDrawToImageCallbackForPrintFormatterIfNeeded:](self, "_waitForDrawToImageCallbackForPrintFormatterIfNeeded:", a3);
            CFRelease(cf);
            return;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)&self->_historicalKinematicData.m_positionHistory[2].position);
        goto LABEL_16;
      }
      MEMORY[0x19AEABB3C](&self->_historicalKinematicData.m_positionHistory[2].position);
      goto LABEL_8;
    }
  }
}

- (uint64_t)_removeTemporaryFilesIfNecessary
{
  return WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 32, a2);
}

- (BOOL)preventsPanningInXAxis
{
  return self->_preventsPanningInXAxis;
}

- (BOOL)preventsPanningInYAxis
{
  return self->_preventsPanningInYAxis;
}

- (id)_formInputSession
{
  return self->_formInputSession.m_ptr;
}

- (BOOL)_shouldUseTextCursorDragAnimator
{
  return 1;
}

- (void)_cancelPendingKeyEventHandlers:(BOOL)a3
{
  _BOOL8 v3;
  Vector<WebKit::KeyEventAndCompletionBlock, 1UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> *p_keyWebEventHandlers;
  const void **m_buffer;
  type *m_inlineBuffer;
  uint64_t v7;
  WTF *v8;
  unsigned int m_size;
  const void **v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  CFTypeRef *v14;
  CFTypeRef *v15;
  CFTypeRef v16;
  void (**v17)(void *, CFTypeRef, _BOOL8);
  const void **v18;
  uint64_t v19;
  const void *v20[2];
  const void **v21;
  uint64_t v22;
  _QWORD v23[2];

  v3 = a3;
  p_keyWebEventHandlers = &self->_keyWebEventHandlers;
  v18 = v20;
  v19 = 1;
  v21 = (const void **)v23;
  v22 = 1;
  m_inlineBuffer = self->_keyWebEventHandlers.m_inlineBuffer;
  m_buffer = (const void **)self->_keyWebEventHandlers.m_buffer;
  if (m_buffer == (const void **)m_inlineBuffer)
  {
    WTF::VectorMover<false,WebKit::KeyEventAndCompletionBlock>::move(m_buffer, &m_buffer[2 * p_keyWebEventHandlers->m_size], v23);
    v8 = (WTF *)p_keyWebEventHandlers->m_buffer;
    m_size = p_keyWebEventHandlers->m_size;
    p_keyWebEventHandlers->m_size = 0;
    HIDWORD(v22) = m_size;
    if (v8 != (WTF *)m_inlineBuffer)
    {
      if (v8)
      {
        p_keyWebEventHandlers->m_buffer = 0;
        p_keyWebEventHandlers->m_capacity = 0;
        WTF::fastFree(v8, (void *)a2);
      }
      p_keyWebEventHandlers->m_buffer = (KeyEventAndCompletionBlock *)m_inlineBuffer;
    }
  }
  else
  {
    p_keyWebEventHandlers->m_buffer = (KeyEventAndCompletionBlock *)m_inlineBuffer;
    v21 = m_buffer;
    v7 = *(_QWORD *)&p_keyWebEventHandlers->m_capacity;
    *(_QWORD *)&p_keyWebEventHandlers->m_capacity = 1;
    v22 = v7;
  }
  v10 = v18;
  if (v18 == v20)
  {
    WTF::VectorMover<false,WebKit::KeyEventAndCompletionBlock>::move(v20, &v20[2 * HIDWORD(v19)], m_inlineBuffer);
    v11 = v19;
  }
  else
  {
    v18 = v20;
    p_keyWebEventHandlers->m_buffer = (KeyEventAndCompletionBlock *)v10;
    v11 = v19;
    LODWORD(v19) = 1;
  }
  v12 = HIDWORD(v19);
  HIDWORD(v19) = 0;
  p_keyWebEventHandlers->m_capacity = v11;
  p_keyWebEventHandlers->m_size = v12;
  WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, (void *)a2);
  if (HIDWORD(v22))
  {
    v14 = v21;
    v15 = &v21[2 * HIDWORD(v22)];
    do
    {
      v16 = *v14;
      if (*v14)
        CFRetain(*v14);
      v17 = (void (**)(void *, CFTypeRef, _BOOL8))_Block_copy(v14[1]);
      v17[2](v17, v16, v3);
      _Block_release(v17);
      if (v16)
        CFRelease(v16);
      v14 += 2;
    }
    while (v14 != v15);
  }
  WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v13);
}

- (void)_removeDefaultGestureRecognizers
{
  NSArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = -[WKContentView deferringGestures](self, "deferringGestures", 0);
  v4 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v7++));
      }
      while (v5 != v7);
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }
  -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_touchEventGestureRecognizer.m_ptr);
  -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_singleTapGestureRecognizer.m_ptr);
  -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_highlightLongPressGestureRecognizer.m_ptr);
  -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_doubleTapGestureRecognizer.m_ptr);
  -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_nonBlockingDoubleTapGestureRecognizer.m_ptr);
  -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_doubleTapGestureRecognizerForDoubleClick.m_ptr);
  -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_twoFingerDoubleTapGestureRecognizer.m_ptr);
  -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_twoFingerSingleTapGestureRecognizer.m_ptr);
  -[WKContentView removeInteraction:](self, "removeInteraction:", self->_mouseInteraction.m_ptr);
  -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_touchActionGestureRecognizer.m_ptr);
  -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_touchActionLeftSwipeGestureRecognizer.m_ptr);
  -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_touchActionRightSwipeGestureRecognizer.m_ptr);
  -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_touchActionUpSwipeGestureRecognizer.m_ptr);
  -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_touchActionDownSwipeGestureRecognizer.m_ptr);
}

- (void)_addDefaultGestureRecognizers
{
  NSArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = -[WKContentView deferringGestures](self, "deferringGestures", 0);
  v4 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v7++));
      }
      while (v5 != v7);
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_touchEventGestureRecognizer.m_ptr);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_singleTapGestureRecognizer.m_ptr);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_highlightLongPressGestureRecognizer.m_ptr);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_doubleTapGestureRecognizer.m_ptr);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_nonBlockingDoubleTapGestureRecognizer.m_ptr);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_doubleTapGestureRecognizerForDoubleClick.m_ptr);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_twoFingerDoubleTapGestureRecognizer.m_ptr);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_twoFingerSingleTapGestureRecognizer.m_ptr);
  -[WKContentView addInteraction:](self, "addInteraction:", self->_mouseInteraction.m_ptr);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_touchActionGestureRecognizer.m_ptr);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_touchActionLeftSwipeGestureRecognizer.m_ptr);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_touchActionRightSwipeGestureRecognizer.m_ptr);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_touchActionUpSwipeGestureRecognizer.m_ptr);
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", self->_touchActionDownSwipeGestureRecognizer.m_ptr);
}

- (double)inverseScale
{
  void *v2;
  double v3;
  double v5;

  v2 = (void *)-[WKContentView layer](self, "layer");
  if (v2)
  {
    objc_msgSend(v2, "transform");
    v3 = v5;
  }
  else
  {
    v3 = 0.0;
  }
  return 1.0 / v3;
}

- (id)_scroller
{
  return (id)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "scrollView");
}

- (CGRect)unobscuredContentRect
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  WebCore::FloatRect::operator CGRect();
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

- (void)startAutoscroll:(CGPoint)a3
{
  WebPageProxy *m_ptr;
  uint64_t v5;
  NSObject *v6;
  _BYTE v7[8];
  CGPoint v8;
  _BYTE buf[24];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v6 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[WKContentView(WKInteraction) startAutoscroll:]";
      _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", buf, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x1978379E4);
  }
  m_ptr = self->_page.m_ptr;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v7, &v8);
  v5 = *((_QWORD *)m_ptr + 26);
  *(_QWORD *)buf = v7;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartAutoscrollAtPosition>(v5, (int **)buf, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)cancelAutoscroll
{
  WebPageProxy *m_ptr;
  uint64_t v3;
  char v4;

  m_ptr = self->_page.m_ptr;
  v3 = *((_QWORD *)m_ptr + 26);
  v4 = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CancelAutoscroll>(v3, (uint64_t)&v4, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)scrollSelectionToVisible:(BOOL)a3
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3))
  {
    v3 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = "-[WKContentView(WKInteraction) scrollSelectionToVisible:]";
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v4, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x197837AECLL);
  }
}

uint64_t __79__WKContentView_WKInteraction__observeValueForKeyPath_ofObject_change_context___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 768), "setHidden:", 0);
}

- (void)_enableInspectorNodeSearch
{
  WKInspectorNodeSearchGestureRecognizer *v3;
  void *m_ptr;

  BYTE4(self->_dataListTextSuggestions.m_ptr) = 1;
  -[WKContentView _cancelInteraction](self, "_cancelInteraction");
  -[WKContentView _removeDefaultGestureRecognizers](self, "_removeDefaultGestureRecognizers");
  v3 = -[WKInspectorNodeSearchGestureRecognizer initWithTarget:action:]([WKInspectorNodeSearchGestureRecognizer alloc], "initWithTarget:action:", self, sel__inspectorNodeSearchRecognized_);
  m_ptr = self->_inspectorNodeSearchGestureRecognizer.m_ptr;
  self->_inspectorNodeSearchGestureRecognizer.m_ptr = v3;
  if (m_ptr)
  {
    CFRelease(m_ptr);
    v3 = (WKInspectorNodeSearchGestureRecognizer *)self->_inspectorNodeSearchGestureRecognizer.m_ptr;
  }
  -[WKContentView addGestureRecognizer:](self, "addGestureRecognizer:", v3);
}

- (void)_disableInspectorNodeSearch
{
  void *m_ptr;

  BYTE4(self->_dataListTextSuggestions.m_ptr) = 0;
  -[WKContentView _addDefaultGestureRecognizers](self, "_addDefaultGestureRecognizers");
  -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_inspectorNodeSearchGestureRecognizer.m_ptr);
  m_ptr = self->_inspectorNodeSearchGestureRecognizer.m_ptr;
  self->_inspectorNodeSearchGestureRecognizer.m_ptr = 0;
  if (m_ptr)
    CFRelease(m_ptr);
}

- (id)hitTest:(CGPoint)a3 withEvent:(id)a4
{
  double y;
  double x;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id result;
  objc_super v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  y = a3.y;
  x = a3.x;
  v21 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v8 = (void *)objc_msgSend(self->_interactionViewsContainerView.m_ptr, "subviews");
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
LABEL_3:
    v12 = 0;
    while (1)
    {
      if (*(_QWORD *)v17 != v11)
        objc_enumerationMutation(v8);
      v13 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v12);
      objc_msgSend(v13, "convertPoint:fromView:", self, x, y);
      result = (id)objc_msgSend(v13, "hitTest:withEvent:", a4);
      if (result)
        break;
      if (v10 == ++v12)
      {
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (v10)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v15.receiver = self;
    v15.super_class = (Class)WKContentView;
    return -[WKContentView hitTest:withEvent:](&v15, sel_hitTest_withEvent_, a4, x, y);
  }
  return result;
}

- (const)positionInformation
{
  return &self->_positionInformation;
}

- (CGPoint)lastInteractionLocation
{
  double v2;
  double v3;
  CGPoint result;

  v2 = *(double *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[16];
  v3 = *(double *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[24];
  result.y = v3;
  result.x = v2;
  return result;
}

- (BOOL)shouldHideSelectionWhenScrolling
{
  int v2;
  _BYTE *v3;
  BOOL v4;

  if (LOBYTE(self->_dataListTextSuggestionsInputView.m_ptr))
  {
    v2 = self->_anon_938[110];
  }
  else
  {
    v3 = (_BYTE *)*((_QWORD *)self->_page.m_ptr + 4);
    if (v3[560])
      v4 = v3[234] == 0;
    else
      v4 = 1;
    if (v4)
      return 0;
    v2 = v3[347];
  }
  return v2 != 0;
}

- (void)_cancelPreviousResetInputViewDeferralRequest
{
  objc_msgSend(MEMORY[0x1E0DE7910], "cancelPreviousPerformRequestsWithTarget:selector:object:", self, sel_stopDeferringInputViewUpdatesForAllSources, 0);
}

- (void)_scheduleResetInputViewDeferralAfterBecomingFirstResponder
{
  -[WKContentView _cancelPreviousResetInputViewDeferralRequest](self, "_cancelPreviousResetInputViewDeferralRequest");
  -[WKContentView performSelector:withObject:afterDelay:](self, "performSelector:withObject:afterDelay:", sel_stopDeferringInputViewUpdatesForAllSources, self, 0.5);
}

- (BOOL)canBecomeFirstResponder
{
  return self->_isEditable;
}

- (BOOL)canBecomeFirstResponderForWebView
{
  return !self->_hasValidPositionInformation;
}

- (BOOL)becomeFirstResponder
{
  return objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "becomeFirstResponder");
}

- (BOOL)becomeFirstResponderForWebView
{
  BOOL isEditable;
  unsigned int v4;
  WebPageProxy *m_ptr;
  uint64_t v6;
  uint64_t v7;
  id v9;
  uint64_t v10;
  objc_super v11;

  if (self->_hasValidPositionInformation)
    return 0;
  -[WKContentView startDeferringInputViewUpdates:](self, "startDeferringInputViewUpdates:", 1);
  isEditable = self->_isEditable;
  self->_isEditable = 1;
  v11.receiver = self;
  v11.super_class = (Class)WKContentView;
  v4 = -[WKContentView becomeFirstResponder](&v11, sel_becomeFirstResponder);
  self->_isEditable = isEditable;
  if (!v4)
  {
    -[WKContentView stopDeferringInputViewUpdates:](self, "stopDeferringInputViewUpdates:", 1);
    return 0;
  }
  m_ptr = self->_page.m_ptr;
  v9 = 0;
  objc_initWeak(&v9, self);
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E35074B8;
  *(_QWORD *)(v6 + 8) = 0;
  objc_moveWeak((id *)(v6 + 8), &v9);
  v10 = v6;
  WebKit::WebPageProxy::installActivityStateChangeCompletionHandler((unint64_t)m_ptr, &v10);
  v7 = v10;
  v10 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  objc_destroyWeak(&v9);
  {
    WebKit::UIGamepadProvider::UIGamepadProvider((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider);
  }
  WebKit::UIGamepadProvider::viewBecameActive((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider, (WebKit::WebPageProxy *)self->_page.m_ptr);
  WebKit::WebPageProxy::activityStateDidChange((uint64_t)self->_page.m_ptr, 2, 1, 0);
  if (-[WKContentView canShowNonEmptySelectionView](self, "canShowNonEmptySelectionView")
    || !self->_suppressSelectionAssistantReasons.m_storage && *(_QWORD *)&self->_isUpdatingAccessoryView)
  {
    objc_msgSend(self->_textInteractionWrapper.m_ptr, "activateSelection");
  }
  -[WKContentView _scheduleResetInputViewDeferralAfterBecomingFirstResponder](self, "_scheduleResetInputViewDeferralAfterBecomingFirstResponder");
  return 1;
}

- (BOOL)resignFirstResponder
{
  return objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "resignFirstResponder");
}

- (void)endEditingAndUpdateFocusAppearanceWithReason:(int64_t)a3
{
  PAL *v5;
  WebPageProxy *m_ptr;
  uint64_t v7;
  char v8;

  if ((objc_msgSend(-[WKContentView webView](self, "webView"), "_isRetainingActiveFocusedState") & 1) == 0)
  {
    -[WKContentView _endEditing](self, "_endEditing");
    if (BYTE4(self->_revealFocusedElementDeferrer.m_ptr)
      || (v5 = (PAL *)-[WKContentView _shouldUseLegacySelectPopoverDismissalBehavior](self, "_shouldUseLegacySelectPopoverDismissalBehavior"), (v5 & 1) != 0)|| !a3&& (self->_textInteractionDidChangeFocusedElement || PAL::currentUserInterfaceIdiomIsSmallScreen(v5)))
    {
      m_ptr = self->_page.m_ptr;
      v7 = *((_QWORD *)m_ptr + 26);
      v8 = 0;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::BlurFocusedElement>(v7, (uint64_t)&v8, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
      -[WKContentView _elementDidBlur](self, "_elementDidBlur");
    }
  }
  -[WKContentView _cancelInteraction](self, "_cancelInteraction");
  objc_msgSend(self->_textInteractionWrapper.m_ptr, "deactivateSelection");
  -[WKContentView stopDeferringInputViewUpdatesForAllSources](self, "stopDeferringInputViewUpdatesForAllSources");
}

- (BOOL)resignFirstResponderForWebView
{
  BOOL hasValidPositionInformation;
  _BOOL4 v4;
  WTF::RunLoop *v5;
  uint64_t v6;
  uint64_t v7;
  id v9;
  uint64_t v10;
  objc_super v11;

  hasValidPositionInformation = self->_hasValidPositionInformation;
  self->_hasValidPositionInformation = 1;
  -[WKContentView endEditingAndUpdateFocusAppearanceWithReason:](self, "endEditingAndUpdateFocusAppearanceWithReason:", 1);
  if (BYTE4(self->_revealFocusedElementDeferrer.m_ptr))
  {
    LOBYTE(v4) = 0;
    BYTE4(self->_revealFocusedElementDeferrer.m_ptr) = 0;
  }
  else
  {
    v11.receiver = self;
    v11.super_class = (Class)WKContentView;
    v4 = -[WKContentView resignFirstResponder](&v11, sel_resignFirstResponder);
    if (v4)
    {
      -[WKContentView _handleDOMPasteRequestWithResult:](self, "_handleDOMPasteRequestWithResult:", 0);
      WebKit::WebPageProxy::activityStateDidChange((uint64_t)self->_page.m_ptr, 2, 1, 0);
      {
        WebKit::UIGamepadProvider::UIGamepadProvider((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider);
      }
      WebKit::UIGamepadProvider::viewBecameInactive((WebKit::UIGamepadProvider *)&WebKit::UIGamepadProvider::singleton(void)::sharedProvider, (WebKit::WebPageProxy *)self->_page.m_ptr);
      self->_isChangingFocusUsingAccessoryTab = 0;
      self->_didAccessoryTabInitiateFocus = 0;
      if (self->_keyWebEventHandlers.m_size)
      {
        WTF::RunLoop::main(v5);
        v9 = 0;
        objc_initWeak(&v9, self);
        v6 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v6 = off_1E35074E0;
        *(_QWORD *)(v6 + 8) = 0;
        objc_moveWeak((id *)(v6 + 8), &v9);
        v10 = v6;
        WTF::RunLoop::dispatch();
        v7 = v10;
        v10 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        objc_destroyWeak(&v9);
      }
      LOBYTE(v4) = 1;
    }
  }
  self->_hasValidPositionInformation = hasValidPositionInformation;
  return v4;
}

- (void)cancelPointersForGestureRecognizer:(id)a3
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  WebPageProxy *m_ptr;
  int v13;
  CGFloat v14;
  CGFloat v15;
  float v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  CGPoint v20;
  float v21[2];
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _DWORD *v27[2];
  int v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend(self->_touchEventGestureRecognizer.m_ptr, "activeTouchesByIdentifier");
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v24 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        v11 = (void *)objc_msgSend(v5, "objectForKey:", v10);
        if (objc_msgSend((id)objc_msgSend(v11, "gestureRecognizers"), "containsObject:", a3))
        {
          m_ptr = self->_page.m_ptr;
          v13 = objc_msgSend(v10, "unsignedIntValue");
          objc_msgSend(v11, "locationInView:", self);
          v20.x = v14;
          v20.y = v15;
          WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v21, &v20);
          v16 = roundf(v21[0]);
          v17 = (int)v16;
          if (v16 <= -2147500000.0)
            v17 = 0x80000000;
          if (v16 >= 2147500000.0)
            v17 = 0x7FFFFFFFLL;
          v18 = roundf(v21[1]);
          v19 = (unint64_t)(int)v18 << 32;
          if (v18 <= -2147500000.0)
            v19 = 0x8000000000000000;
          if (v18 >= 2147500000.0)
            v19 = 0x7FFFFFFF00000000;
          v22 = v19 | v17;
          v28 = v13;
          v27[0] = &v28;
          v27[1] = &v22;
          WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CancelPointer>(*((_QWORD *)m_ptr + 26), v27, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
    }
    while (v7);
  }
}

- (optional<unsigned)activeTouchIdentifierForGestureRecognizer:(id)a3
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(self->_touchEventGestureRecognizer.m_ptr, "activeTouchesByIdentifier");
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "objectForKey:", v9), "gestureRecognizers"), "containsObject:", a3))
        {
          v13 = objc_msgSend(v9, "unsignedIntValue");
          v12 = v13 & 0xFFFFFF00;
          v10 = v13;
          v11 = 0x100000000;
          return (optional<unsigned int>)(v11 | v12 | v10);
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v6)
        continue;
      break;
    }
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  return (optional<unsigned int>)(v11 | v12 | v10);
}

- (BOOL)_touchEventsMustRequireGestureRecognizerToFail:(id)a3
{
  id v4;
  void *v6;

  v4 = -[WKContentView webView](self, "webView");
  if ((objc_msgSend(v4, "_isNavigationSwipeGestureRecognizer:", a3) & 1) != 0)
    return 1;
  v6 = (void *)objc_msgSend(v4, "UIDelegate");
  if ((id)objc_msgSend(a3, "view") == v4 && (objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v6, "_webView:touchEventsMustRequireGestureRecognizerToFail:", v4, a3);
  else
    return 0;
}

- (BOOL)_gestureRecognizerCanBePreventedByTouchEvents:(id)a3
{
  void *v5;

  v5 = (void *)objc_msgSend(-[WKContentView webView](self, "webView"), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v5, "_webView:gestureRecognizerCanBePreventedByTouchEvents:", -[WKContentView webView](self, "webView"), a3);
  else
    return 0;
}

- (void)_touchEventsRecognized:(id)a3
{
  WebPageProxy *m_ptr;
  uint64_t v6;
  WebPageProxy *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  WebPageProxy *v12;
  void *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  void *v27;
  optional<WTF::HashSet<WTF::RetainPtr<WKDeferringGestureRecognizer>>> *p_failedTouchStartDeferringGestures;
  WTF *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[4];
  id v39;
  uint64_t v40;
  _BYTE v41[128];
  _BYTE v42[128];
  id location[4];
  unsigned __int8 *v44;
  int v45;
  unsigned int v46;
  char v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  m_ptr = self->_page.m_ptr;
  if (!*((_BYTE *)m_ptr + 729) && *((_BYTE *)m_ptr + 728))
  {
    v6 = objc_msgSend(a3, "lastTouchEvent");
    *(_OWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[16] = *(_OWORD *)(v6 + 32);
    if (!*(_BYTE *)v6)
    {
      if (!self->_failedTouchStartDeferringGestures.__engaged_)
      {
        self->_failedTouchStartDeferringGestures.var0.__val_.m_impl.var0.m_table = 0;
        self->_failedTouchStartDeferringGestures.__engaged_ = 1;
      }
      -[WKContentView _handleDOMPasteRequestWithResult:](self, "_handleDOMPasteRequestWithResult:", 0);
      v7 = self->_page.m_ptr;
      v8 = *((_QWORD *)v7 + 23);
      if (*(_BYTE *)(v8 + 32))
      {
        __break(0xC471u);
        JUMPOUT(0x197838B48);
      }
      *(_QWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[32] = *(_QWORD *)(v8 + 112);
      WebKit::WebPageProxy::resetPotentialTapSecurityOrigin((uint64_t)v7);
      WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v40, (const CGPoint *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[16]);
      v9 = v40;
      v38[0] = MEMORY[0x1E0C809B0];
      v38[1] = 3321888768;
      v38[2] = __55__WKContentView_WKInteraction___touchEventsRecognized___block_invoke;
      v38[3] = &__block_descriptor_40_e8_32c69_ZTSKZ55__WKContentView_WKInteraction___touchEventsRecognized__E4__14_e4285_v648__0_InteractionInformationAtPosition__InteractionInformationRequest__IntPoint_ii_BBBBBBB_B_optional_BOOL_____cB_B_CBBBBBBBBBBBBB_Markable_WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long____WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__::MarkableTraits___ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long____ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___BBBBBB_FloatPoint_ff__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____IntRect__IntPoint_ii__IntSize_ii___RefPtr_WebCore::ShareableBitmap__WTF::RawPtrTraits_WebCore::ShareableBitmap___WTF::DefaultRefDerefTraits_WebCore::ShareableBitmap_____ShareableBitmap___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___f_FloatRect__FloatPoint_ff__FloatSize_ff___optional_WebCore::Cursor_____c_Cursor_C_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___IntPoint_ii__v__B__TextIndicatorData__FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___Vector_WebCore::FloatRect__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____FloatRect_II_f_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___Color_Q_C_OptionSet_WebCore::TextIndicatorOption__S___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____RetainPtr_NSArray___v__IntRect__IntPoint_ii__IntSize_ii___optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___B__optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___B__Vector_WebCore::ElementAnimationContext__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____ElementAnimationContext_II__8l;
      v10 = self->_actionSheetAssistant.m_ptr;
      location[0] = 0;
      objc_initWeak(location, v10);
      v39 = 0;
      objc_copyWeak(&v39, location);
      -[WKContentView doAfterPositionInformationUpdate:forRequest:](self, "doAfterPositionInformationUpdate:forRequest:", v38, v9, 0x1000000);
      objc_destroyWeak(location);
      objc_destroyWeak(&v39);
    }
    WebKit::NativeWebTouchEvent::NativeWebTouchEvent((WebKit::NativeWebTouchEvent *)location, (const WKTouchEvent *)v6, objc_msgSend(a3, "modifierFlags"));
    if (self->_touchEventsCanPreventNativeGestures)
      v11 = 1;
    else
      v11 = objc_msgSend(a3, "isDefaultPrevented");
    v47 = v11;
    -[WKContentView _handleTouchActionsForTouchEvent:](self, "_handleTouchActionsForTouchEvent:", location);
    v12 = self->_page.m_ptr;
    if (self->_touchEventsCanPreventNativeGestures)
      WebKit::WebPageProxy::handlePreventableTouchEvent((uint64_t)v12, (WebKit::NativeWebTouchEvent *)location);
    else
      WebKit::WebPageProxy::handleUnpreventableTouchEvent((WebKit::WebPageProxy *)v12, (const WebKit::NativeWebTouchEvent *)location);
    if (v46)
    {
      v14 = 72 * v46;
      v15 = v44 + 12;
      while (1)
      {
        v16 = *v15;
        v15 += 72;
        if ((v16 | 4) != 4)
          break;
        v14 -= 72;
        if (!v14)
          goto LABEL_19;
      }
    }
    else
    {
LABEL_19:
      self->_touchEventsCanPreventNativeGestures = 1;
      if (!*((_BYTE *)self->_page.m_ptr + 402))
        -[WKContentView _resetPanningPreventionFlags](self, "_resetPanningPreventionFlags");
      if (v48
        && -[WKContentView hasHiddenContentEditable](self, "hasHiddenContentEditable")
        && -[WKContentView _hasFocusedElement](self, "_hasFocusedElement")
        && (objc_msgSend((id)-[WKContentView window](self, "window"), "isKeyWindow") & 1) == 0)
      {
        objc_msgSend((id)-[WKContentView window](self, "window"), "makeKeyWindow");
      }
      if (!*((_QWORD *)self->_page.m_ptr + 98))
      {
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v17 = -[WKContentView _touchStartDeferringGestures](self, "_touchStartDeferringGestures");
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
        if (v18)
        {
          v19 = *(_QWORD *)v35;
          do
          {
            for (i = 0; i != v18; ++i)
            {
              if (*(_QWORD *)v35 != v19)
                objc_enumerationMutation(v17);
              v21 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
              if (!objc_msgSend(v21, "state"))
                objc_msgSend(v21, "setState:", 5);
            }
            v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
          }
          while (v18);
        }
      }
      if (*((_BYTE *)self->_page.m_ptr + 800) != 1)
      {
        v22 = self->_touchMoveDeferringGestureRecognizer.m_ptr;
        if (!objc_msgSend(v22, "state"))
          objc_msgSend(v22, "setState:", 5);
      }
      if (!*((_QWORD *)self->_page.m_ptr + 99))
      {
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v23 = -[WKContentView _touchEndDeferringGestures](self, "_touchEndDeferringGestures", 0);
        v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v30, v41, 16);
        if (v24)
        {
          v25 = *(_QWORD *)v31;
          do
          {
            for (j = 0; j != v24; ++j)
            {
              if (*(_QWORD *)v31 != v25)
                objc_enumerationMutation(v23);
              v27 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * j);
              if (!objc_msgSend(v27, "state"))
                objc_msgSend(v27, "setState:", 5);
            }
            v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v30, v41, 16);
          }
          while (v24);
        }
      }
      p_failedTouchStartDeferringGestures = &self->_failedTouchStartDeferringGestures;
      if (p_failedTouchStartDeferringGestures->__engaged_)
      {
        if (p_failedTouchStartDeferringGestures->var0.__val_.m_impl.var0.m_table)
          WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::deallocateTable((const void **)p_failedTouchStartDeferringGestures->var0.__val_.m_impl.var0.m_table, v13);
        p_failedTouchStartDeferringGestures->__engaged_ = 0;
      }
    }
    v29 = (WTF *)v44;
    if (v44)
    {
      v44 = 0;
      v45 = 0;
      WTF::fastFree(v29, v13);
    }
  }
}

uint64_t __55__WKContentView_WKInteraction___touchEventsRecognized___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(objc_loadWeak((id *)(a1 + 32)), "interactionDidStartWithPositionInformation:", a2);
}

- (void)_handleTouchActionsForTouchEvent:(const void *)a3
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  int *v7;
  int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  _QWORD v12[3];
  int v13;
  unsigned __int8 v14;

  v3 = (uint64_t *)*((_QWORD *)self->_page.m_ptr + 25);
  if (v3)
  {
    v4 = *((unsigned int *)a3 + 11);
    if ((_DWORD)v4)
    {
      v6 = 72 * v4;
      v7 = (int *)*((_QWORD *)a3 + 4);
      do
      {
        v8 = *((unsigned __int8 *)v7 + 12);
        if (v8 == 1)
        {
          v12[0] = *(_QWORD *)(v7 + 1);
          v9 = WebKit::touchActionsForPoint((WebKit *)self, (UIView *)v12, (const WebCore::IntPoint *)a3);
          if (v9)
          {
            v10 = v9;
            if ((v9 & 1) == 0)
            {
              objc_msgSend(self->_touchActionGestureRecognizer.m_ptr, "setTouchActions:forTouchIdentifier:", v9, *v7);
              v11 = *v7;
              v14 = v10;
              v13 = v11;
              WTF::HashMap<unsigned int,WTF::OptionSet<WebCore::TouchAction>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::OptionSet<WebCore::TouchAction>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::OptionSet<WebCore::TouchAction>&>(v3 + 18, &v13, &v14, (uint64_t)v12);
              self->_preventsPanningInXAxis = (v10 & 0xC) == 0;
              self->_preventsPanningInYAxis = (v10 & 0x14) == 0;
            }
          }
        }
        else if ((v8 & 0xFFFFFFFB) == 0)
        {
          objc_msgSend(self->_touchActionGestureRecognizer.m_ptr, "clearTouchActionsForTouchIdentifier:", *v7);
          WebKit::RemoteScrollingCoordinatorProxyIOS::clearTouchActionsForTouchIdentifier((WebKit::RemoteScrollingCoordinatorProxyIOS *)v3, *v7);
        }
        v7 += 18;
        v6 -= 72;
      }
      while (v6);
    }
  }
}

- (BOOL)gestureRecognizer:(id)a3 shouldReceiveTouch:(id)a4
{
  int v7;
  CGFloat v8;
  CGFloat v9;
  const WebCore::IntPoint *v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  int v18;
  float v20[2];
  uint64_t v21;
  CGPoint v22;

  if ((id)objc_msgSend(self->_mouseInteraction.m_ptr, "mouseTouchGestureRecognizer") == a3)
  {
    v7 = objc_msgSend(a4, "_isPointerTouch");
    if (!v7)
      return v7;
  }
  else if ((id)objc_msgSend(self->_mouseInteraction.m_ptr, "mouseTouch") == a4
         && (objc_msgSend(a4, "_isPointerTouch") & 1) != 0)
  {
    LOBYTE(v7) = 0;
    return v7;
  }
  if (self->_doubleTapGestureRecognizer.m_ptr == a3 || self->_nonBlockingDoubleTapGestureRecognizer.m_ptr == a3)
  {
    LOBYTE(v7) = objc_msgSend(a4, "type") != 3;
  }
  else if (self->_touchActionLeftSwipeGestureRecognizer.m_ptr == a3
         || self->_touchActionRightSwipeGestureRecognizer.m_ptr == a3
         || self->_touchActionUpSwipeGestureRecognizer.m_ptr == a3
         || self->_touchActionDownSwipeGestureRecognizer.m_ptr == a3)
  {
    objc_msgSend(a4, "locationInView:", self);
    v22.x = v8;
    v22.y = v9;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v20, &v22);
    v11 = roundf(v20[0]);
    v12 = 0x7FFFFFFFLL;
    v13 = (int)v11;
    if (v11 <= -2147500000.0)
      v13 = 0x80000000;
    if (v11 < 2147500000.0)
      v12 = v13;
    v14 = roundf(v20[1]);
    v15 = 0x7FFFFFFF00000000;
    v16 = 0x8000000000000000;
    if (v14 > -2147500000.0)
      v16 = (unint64_t)(int)v14 << 32;
    if (v14 < 2147500000.0)
      v15 = v16;
    v21 = v15 | v12;
    v17 = WebKit::touchActionsForPoint((WebKit *)self, (UIView *)&v21, v10);
    v18 = 16;
    if (self->_touchActionLeftSwipeGestureRecognizer.m_ptr != a3)
    {
      if (self->_touchActionRightSwipeGestureRecognizer.m_ptr == a3)
        v18 = 16;
      else
        v18 = 8;
    }
    LOBYTE(v7) = v18 == v17;
  }
  else
  {
    LOBYTE(v7) = 1;
  }
  return v7;
}

- (BOOL)gestureRecognizer:(id)a3 shouldReceivePress:(id)a4
{
  return 1;
}

- (BOOL)gestureRecognizerMayPanWebView:(id)a3
{
  BOOL result;

  result = 1;
  if ((id)objc_msgSend((id)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "scrollView"), "panGestureRecognizer") != a3)
  {
    if (!objc_msgSend(a3, "view"))
      return 0;
    objc_msgSend(a3, "view");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      return 0;
  }
  return result;
}

- (BOOL)gestureRecognizerMayPinchToZoomWebView:(id)a3
{
  uint64_t v5;
  void *v6;

  if ((id)objc_msgSend((id)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "scrollView"), "pinchGestureRecognizer") == a3)
  {
    LOBYTE(v5) = 1;
    return v5;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_6;
  v5 = objc_msgSend(-[WKContentView webView](self, "webView"), "UIDelegate");
  if (v5)
  {
    v6 = (void *)v5;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      LOBYTE(v5) = objc_msgSend(v6, "_webView:gestureRecognizerCouldPinch:", -[WKContentView webView](self, "webView"), a3);
      return v5;
    }
LABEL_6:
    LOBYTE(v5) = 0;
  }
  return v5;
}

- (BOOL)gestureRecognizerMayDoubleTapToZoomWebView:(id)a3
{
  return self->_doubleTapGestureRecognizer.m_ptr == a3 || self->_twoFingerDoubleTapGestureRecognizer.m_ptr == a3;
}

- (id)touchActionActiveTouches
{
  return (id)objc_msgSend(self->_touchEventGestureRecognizer.m_ptr, "activeTouchesByIdentifier");
}

- (void)_inspectorNodeSearchRecognized:(id)a3
{
  CGFloat v5;
  CGFloat v6;
  unint64_t v7;
  WebPageProxy *m_ptr;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CGPoint v12;
  uint64_t *v13;

  -[WKContentView _resetIsDoubleTapPending](self, "_resetIsDoubleTapPending");
  objc_msgSend(a3, "locationInView:", self);
  v12.x = v5;
  v12.y = v6;
  v7 = objc_msgSend(a3, "state") - 1;
  m_ptr = self->_page.m_ptr;
  if (v7 > 1)
  {
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v11, &v12);
    v10 = *((_QWORD *)m_ptr + 26);
    v13 = &v11;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::InspectorNodeSearchEndedAtPosition>(v10, (int **)&v13, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
  }
  else
  {
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v11, &v12);
    v9 = *((_QWORD *)m_ptr + 26);
    v13 = &v11;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::InspectorNodeSearchMovedToPosition>(v9, (int **)&v13, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
  }
}

- (void)_touchEvent:(const void *)a3 preventsNativeGestures:(BOOL)a4
{
  if (a4)
  {
    if (objc_msgSend(self->_touchEventGestureRecognizer.m_ptr, "isDispatchingTouchEvents", a3))
    {
      BYTE6(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
      self->_touchEventsCanPreventNativeGestures = 0;
      objc_msgSend(self->_touchEventGestureRecognizer.m_ptr, "setDefaultPrevented:", 1);
    }
  }
}

- (WKTouchEventsGestureRecognizer)touchEventGestureRecognizer
{
  return (WKTouchEventsGestureRecognizer *)self->_touchEventGestureRecognizer.m_ptr;
}

- (void)gestureRecognizerConsistencyEnforcer
{
  WebKit::GestureRecognizerConsistencyEnforcer **p_gestureRecognizerConsistencyEnforcer;
  void *result;
  id *v5;

  p_gestureRecognizerConsistencyEnforcer = (WebKit::GestureRecognizerConsistencyEnforcer **)&self->_gestureRecognizerConsistencyEnforcer;
  result = self->_gestureRecognizerConsistencyEnforcer.__ptr_.__value_;
  if (!result)
  {
    v5 = (id *)WTF::fastMalloc((WTF *)0x30);
    WebKit::GestureRecognizerConsistencyEnforcer::GestureRecognizerConsistencyEnforcer(v5, self);
    std::unique_ptr<WebKit::GestureRecognizerConsistencyEnforcer>::reset[abi:sn180100](p_gestureRecognizerConsistencyEnforcer, (WebKit::GestureRecognizerConsistencyEnforcer *)v5);
    return *p_gestureRecognizerConsistencyEnforcer;
  }
  return result;
}

- (void)_doneDeferringTouchStart:(BOOL)a3
{
  _BOOL8 v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  CFTypeRef v10;
  uint64_t v11;
  CFTypeRef cf;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v3 = a3;
  v18 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = -[WKContentView _touchStartDeferringGestures](self, "_touchStartDeferringGestures");
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(v9, "endDeferral:", v3);
        if (self->_failedTouchStartDeferringGestures.__engaged_ && !v3)
        {
          cf = v9;
          if (v9)
            CFRetain(v9);
          WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::add((uint64_t *)&self->_failedTouchStartDeferringGestures.var0.__val_.m_impl.var0.m_table, &cf, (uint64_t)&v11);
          v10 = cf;
          cf = 0;
          if (v10)
            CFRelease(v10);
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }
}

- (void)_doneDeferringTouchMove:(BOOL)a3
{
  objc_msgSend(self->_touchMoveDeferringGestureRecognizer.m_ptr, "endDeferral:", a3);
}

- (void)_doneDeferringTouchEnd:(BOOL)a3
{
  _BOOL8 v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v3 = a3;
  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = -[WKContentView _touchEndDeferringGestures](self, "_touchEndDeferringGestures", 0);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v8++), "endDeferral:", v3);
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }
}

- (BOOL)_isTouchStartDeferringGesture:(id)a3
{
  return self->_touchStartDeferringGestureRecognizerForSyntheticTapGestures.m_ptr == a3
      || self->_touchStartDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr == a3
      || self->_touchStartDeferringGestureRecognizerForDelayedResettableGestures.m_ptr == a3;
}

- (BOOL)_isTouchEndDeferringGesture:(id)a3
{
  return self->_touchEndDeferringGestureRecognizerForSyntheticTapGestures.m_ptr == a3
      || self->_touchEndDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr == a3
      || self->_touchEndDeferringGestureRecognizerForDelayedResettableGestures.m_ptr == a3;
}

- (CGRect)tapHighlightViewRect
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  objc_msgSend(self->_tapHighlightView.m_ptr, "frame");
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

- (UIGestureRecognizer)imageAnalysisGestureRecognizer
{
  return (UIGestureRecognizer *)self->_editDropCaretView.m_ptr;
}

- (void)_showTapHighlight
{
  uint64_t v3;
  uint64_t m_size;
  FloatQuad *m_buffer;
  uint64_t v6;
  float v7;
  __int128 v8;
  float v9;
  float v10;
  float v11;
  float v12;
  void *m_ptr;
  WKTapHighlightView *v14;
  WKTapHighlightView *v15;
  void *v16;
  double v17;
  _OWORD v18[2];

  if (!self->_tapHighlightInformation.nodeHasBuiltInClickHandling)
  {
    v3 = *((_QWORD *)self->_page.m_ptr + 4);
    m_size = self->_tapHighlightInformation.quads.m_size;
    if ((_DWORD)m_size)
    {
      m_buffer = self->_tapHighlightInformation.quads.m_buffer;
      v6 = 32 * m_size;
      v7 = 0.0;
      while (1)
      {
        v8 = *(_OWORD *)&m_buffer->m_p3.m_x;
        v18[0] = *(_OWORD *)&m_buffer->m_p1.m_x;
        v18[1] = v8;
        WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)v18);
        v11 = *(float *)(v3 + 2280);
        if (v9 > (float)(v11 * 0.3))
          goto LABEL_10;
        v12 = *(float *)(v3 + 2284);
        if (v10 > (float)(v12 * 0.3))
          goto LABEL_10;
        v7 = v7 + (float)(v9 * v10);
        ++m_buffer;
        v6 -= 32;
        if (!v6)
          goto LABEL_9;
      }
    }
    v11 = *(float *)(v3 + 2280);
    v12 = *(float *)(v3 + 2284);
    v7 = 0.0;
LABEL_9:
    if (v7 >= (float)((float)(v12 * v11) * 0.3))
    {
LABEL_10:
      if (!LOBYTE(self->_dataListSuggestionsControl.m_weakReference))
        return;
    }
  }
  m_ptr = self->_tapHighlightView.m_ptr;
  if (!m_ptr)
  {
    v14 = [WKTapHighlightView alloc];
    v15 = -[WKTapHighlightView initWithFrame:](v14, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
    v16 = self->_tapHighlightView.m_ptr;
    self->_tapHighlightView.m_ptr = v15;
    if (v16)
    {
      CFRelease(v16);
      v15 = (WKTapHighlightView *)self->_tapHighlightView.m_ptr;
    }
    -[WKTapHighlightView setUserInteractionEnabled:](v15, "setUserInteractionEnabled:", 0);
    objc_msgSend(self->_tapHighlightView.m_ptr, "setOpaque:", 0);
    LODWORD(v17) = 2.0;
    objc_msgSend(self->_tapHighlightView.m_ptr, "setMinimumCornerRadius:", v17);
    m_ptr = self->_tapHighlightView.m_ptr;
  }
  objc_msgSend(m_ptr, "setAlpha:", 1.0);
  objc_msgSend(self->_interactionViewsContainerView.m_ptr, "addSubview:", self->_tapHighlightView.m_ptr);
  -[WKContentView _updateTapHighlight](self, "_updateTapHighlight");
}

- (void)_didGetTapHighlightForRequest:()ObjectIdentifierGeneric<WebKit:()WTF:(unsigned long long>)a3 :(const Color *)a4 ObjectIdentifierMainThreadAccessTraits<uint64_t> :(const void *)a5 TapIdentifierType color:(const IntSize *)a6 quads:(const IntSize *)a7 topLeftRadius:(const IntSize *)a8 topRightRadius:(const IntSize *)a9 bottomLeftRadius:(BOOL)a10 bottomRightRadius:nodeHasBuiltInClickHandling:
{
  BOOL v15;
  BOOL v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE v21[7];

  if (BYTE2(self->_dataListTextSuggestionsInputView.m_ptr) && self->_latestTapID.m_identifier == a3.m_identifier)
  {
    if (!-[WKContentView _hasFocusedElement](self, "_hasFocusedElement")
      || !self->_anon_7d0[32]
      || *((_QWORD *)&self->_positionInformation.elementContext.var0.var2 + 3) != self->_focusedElementInformation.elementContext.webPageIdentifier.m_identifier
      || (*(_QWORD *)&self->_positionInformation.__engaged_ == self->_focusedElementInformation.elementContext.m_processIdentifier.m_identifier
        ? (v15 = self->_positionInformation.elementContext.var0.var1.m_processIdentifier.m_identifier == *(_QWORD *)&self->_focusedElementInformation.elementContext.documentIdentifier.m_object[8])
        : (v15 = 0),
          v15
        ? (v16 = *(_QWORD *)self->_anon_7d0 == self->_focusedElementInformation.elementIdentifier.m_identifier)
        : (v16 = 0),
          !v16 || *(_QWORD *)&self->_anon_7d0[16] != *(_QWORD *)&self->_anon_938[8]))
    {
      BYTE2(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
      WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&self->_tapHighlightInformation.quads, (uint64_t)a5);
      self->_tapHighlightInformation.topLeftRadius = *a6;
      self->_tapHighlightInformation.topRightRadius = *a7;
      self->_tapHighlightInformation.bottomLeftRadius = *a8;
      self->_tapHighlightInformation.bottomRightRadius = *a9;
      self->_tapHighlightInformation.nodeHasBuiltInClickHandling = a10;
      if (LOBYTE(self->_dataListSuggestionsControl.m_weakReference))
      {
        -[WKContentView _tapHighlightColorForFastClick:](self, "_tapHighlightColorForFastClick:", objc_msgSend(self->_doubleTapGestureRecognizer.m_ptr, "isEnabled") ^ 1);
        WebCore::Color::operator=();
        if ((*(_QWORD *)v21 & 0x8000000000000) != 0)
        {
          v18 = (unsigned int *)(*(_QWORD *)v21 & 0xFFFFFFFFFFFFLL);
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            atomic_store(1u, v18);
            WTF::fastFree((WTF *)v18, v17);
          }
        }
      }
      else
      {
        WebCore::Color::operator=();
      }
      if (BYTE4(self->_dataListTextSuggestionsInputView.m_ptr))
      {
        HIBYTE(self->_dataListTextSuggestionsInputView.m_ptr) = 1;
      }
      else
      {
        -[WKContentView _showTapHighlight](self, "_showTapHighlight");
        if (HIBYTE(self->_dataListTextSuggestions.m_ptr))
        {
          -[WKContentView _finishInteraction](self, "_finishInteraction");
          if (!BYTE4(self->_dataListTextSuggestionsInputView.m_ptr))
            HIBYTE(self->_dataListTextSuggestions.m_ptr) = 0;
        }
      }
    }
  }
}

- (void)_disableDoubleTapGesturesDuringTapIfNecessary:()ObjectIdentifierGeneric<WebKit:()WTF:(unsigned long long>)a3 :ObjectIdentifierMainThreadAccessTraits<uint64_t> :TapIdentifierType
{
  if (self->_latestTapID.m_identifier == a3.m_identifier)
    -[WKContentView _setDoubleTapGesturesEnabled:](self, "_setDoubleTapGesturesEnabled:", 0);
}

- (void)_handleSmartMagnificationInformationForPotentialTap:()ObjectIdentifierGeneric<WebKit:()WTF:(unsigned long long>)a3 :(const FloatRect *)a4 ObjectIdentifierMainThreadAccessTraits<uint64_t> :(BOOL)a5 TapIdentifierType renderRect:(double)a6 fitEntireRect:(double)a7 viewportMinimumScale:(BOOL)a8 viewportMaximumScale:nodeIsRootLevel:
{
  _BOOL4 v8;
  _BOOL8 v11;
  uint64_t v14;
  WebKit::WebPreferencesStore *v15;
  WebPageProxy *m_ptr;
  NSObject *v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  BOOL v21;
  int BoolValueForKey;
  _BOOL4 v23;
  uint64_t v24;
  const char *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  _BOOL4 v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!BYTE4(self->_dataListTextSuggestionsInputView.m_ptr))
    return;
  v8 = a8;
  v11 = a5;
  v14 = *((_QWORD *)self->_page.m_ptr + 28);
  {
    WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::$_0::operator() const(void)::impl;
  }
  v15 = (WebKit::WebPreferencesStore *)(v14 + 40);
  if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v14 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::preferFasterClickOverDoubleTapKey(void)::key, (const WTF::StringImpl *)a3.m_identifier)|| (m_ptr = self->_page.m_ptr, !*((_BYTE *)m_ptr + 1050)))
  {
    -[WKContentView _contentZoomScale](self, "_contentZoomScale");
    v27 = v26;
    WebKit::SmartMagnificationController::zoomFactorForTargetRect((uint64_t)self->_smartMagnificationController.__ptr_.__value_, v11, a4->m_location.m_x, a4->m_location.m_y, a4->m_size.m_width, a4->m_size.m_height, a6, a7);
    if (v27 >= v28)
      v29 = v28;
    else
      v29 = v27;
    if (v28 < v27)
      v28 = v27;
    v30 = v29 / v28;
    v35 = qword_1ECE71A00;
    v31 = os_log_type_enabled((os_log_t)qword_1ECE71A00, OS_LOG_TYPE_DEFAULT);
    if (v30 <= 0.8)
    {
      if (!v31)
        return;
      v34 = *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 744);
      *(_DWORD *)v39 = 134218240;
      *(_QWORD *)&v39[4] = self;
      *(_WORD *)&v39[12] = 2048;
      *(_QWORD *)&v39[14] = v34;
      v25 = "Potential tap may cause significant zoom. Wait. (%p, pageProxyID=%llu)";
      goto LABEL_34;
    }
    if (v31)
    {
      v32 = *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 744);
      *(_DWORD *)v39 = 134218240;
      *(_QWORD *)&v39[4] = self;
      *(_WORD *)&v39[12] = 2048;
      *(_QWORD *)&v39[14] = v32;
      v33 = "Potential tap would not cause a significant zoom. Trigger click. (%p, pageProxyID=%llu)";
LABEL_28:
      _os_log_impl(&dword_196BCC000, v35, OS_LOG_TYPE_DEFAULT, v33, v39, 0x16u);
    }
LABEL_29:
    -[WKContentView _setDoubleTapGesturesEnabled:](self, "_setDoubleTapGesturesEnabled:", 0, *(_OWORD *)v39, *(_QWORD *)&v39[16], v40);
    return;
  }
  v17 = qword_1ECE71A00;
  if (os_log_type_enabled((os_log_t)qword_1ECE71A00, OS_LOG_TYPE_DEFAULT))
  {
    v19 = *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 744);
    *(_DWORD *)v39 = 134218240;
    *(_QWORD *)&v39[4] = self;
    *(_WORD *)&v39[12] = 2048;
    *(_QWORD *)&v39[14] = v19;
    _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "Potential tap found an element and fast taps are preferred. Trigger click. (%p, pageProxyID=%llu)", v39, 0x16u);
  }
  {
    WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey(v15, (WTF::StringImpl **)&WebKit::WebPreferencesKey::zoomOnDoubleTapWhenRootKey(void)::key, v18))v21 = !v8;
  else
    v21 = 1;
  if (v21)
  {
    {
      WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::$_0::operator() const(void)::impl;
    }
    BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey(v15, (WTF::StringImpl **)&WebKit::WebPreferencesKey::alwaysZoomOnDoubleTapKey(void)::key, v20);
    v35 = qword_1ECE71A00;
    v23 = os_log_type_enabled((os_log_t)qword_1ECE71A00, OS_LOG_TYPE_DEFAULT);
    if (BoolValueForKey)
    {
      if (!v23)
        return;
      v24 = *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 744);
      *(_DWORD *)v39 = 134218240;
      *(_QWORD *)&v39[4] = self;
      *(_WORD *)&v39[12] = 2048;
      *(_QWORD *)&v39[14] = v24;
      v25 = "DTTZ is forced on, so don't disable double-tap. (%p, pageProxyID=%llu)";
      goto LABEL_34;
    }
    if (v23)
    {
      v38 = *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 744);
      *(_DWORD *)v39 = 134218240;
      *(_QWORD *)&v39[4] = self;
      *(_WORD *)&v39[12] = 2048;
      *(_QWORD *)&v39[14] = v38;
      v33 = "Give preference to click by disabling double-tap. (%p, pageProxyID=%llu)";
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  v35 = qword_1ECE71A00;
  if (os_log_type_enabled((os_log_t)qword_1ECE71A00, OS_LOG_TYPE_DEFAULT))
  {
    v37 = *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 744);
    *(_DWORD *)v39 = 134218240;
    *(_QWORD *)&v39[4] = self;
    *(_WORD *)&v39[12] = 2048;
    *(_QWORD *)&v39[14] = v37;
    v25 = "The click handler was on a root-level element, so don't disable double-tap. (%p, pageProxyID=%llu)";
LABEL_34:
    _os_log_impl(&dword_196BCC000, v35, OS_LOG_TYPE_DEFAULT, v25, v39, 0x16u);
  }
}

- (void)_cancelTouchEventGestureRecognizer
{
  objc_msgSend(self->_touchEventGestureRecognizer.m_ptr, "cancel");
}

- (void)_scrollingNodeScrollingWillBegin:()ProcessQualified<WTF:()WTF:(unsigned long long>>)a3 :ObjectIdentifierMainThreadAccessTraits<uint64_t> :ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType
{
  objc_msgSend(self->_textInteractionWrapper.m_ptr, "willStartScrollingOverflow", a3.m_object.m_identifier, a3.m_processIdentifier.m_identifier);
}

- (void)_scrollingNodeScrollingDidEnd:()ProcessQualified<WTF:()WTF:(unsigned long long>>)a3 :ObjectIdentifierMainThreadAccessTraits<uint64_t> :ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType
{
  WebKit::ScrollingTreeOverflowScrollingNodeIOS *v4;

  if (LOBYTE(self->_dataListTextSuggestions.m_ptr))
  {
    -[WKContentView _updateChangedSelection](self, "_updateChangedSelection");
    objc_msgSend(self->_textInteractionWrapper.m_ptr, "didEndScrollingOverflow");
    if (*((_QWORD *)self->_page.m_ptr + 25))
      v4 = WebKit::RemoteScrollingCoordinatorProxyIOS::scrollViewForScrollingNodeID();
    else
      v4 = 0;
    objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_didFinishScrolling:", v4);
  }
  else
  {
    BYTE1(self->_dataListTextSuggestions.m_ptr) = 1;
  }
}

- (BOOL)shouldShowAutomaticKeyboardUI
{
  return self->_anon_938[114] != 1
      && (!self->_anon_938[257] || objc_msgSend(MEMORY[0x1E0CEA6C8], "isInHardwareKeyboardMode"))
      && -[WKContentView _shouldShowAutomaticKeyboardUIIgnoringInputMode](self, "_shouldShowAutomaticKeyboardUIIgnoringInputMode");
}

- (BOOL)_shouldShowAutomaticKeyboardUIIgnoringInputMode
{
  unsigned int v2;
  PAL *v4;

  if (self->_anon_938[107])
    return 0;
  v2 = self->_anon_938[113];
  if (v2 > 0x12)
    return 1;
  if (((1 << v2) & 0x6B801) == 0)
  {
    if (v2 == 16)
    {
      v4 = (PAL *)-[WKContentView _shouldUseContextMenusForFormControls](self, "_shouldUseContextMenusForFormControls");
      if ((v4 & 1) == 0)
        return PAL::currentUserInterfaceIdiomIsSmallScreen(v4);
      return 0;
    }
    return 1;
  }
  return 0;
}

- (BOOL)_disableAutomaticKeyboardUI
{
  int v3;

  v3 = -[WKContentView isFirstResponder](self, "isFirstResponder");
  if (v3)
    LOBYTE(v3) = !-[WKContentView shouldShowAutomaticKeyboardUI](self, "shouldShowAutomaticKeyboardUI");
  return v3;
}

- (BOOL)_requiresKeyboardWhenFirstResponder
{
  objc_super v4;

  if ((objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_isEditable") & 1) != 0)
  {
    if (!-[WKContentView _disableAutomaticKeyboardUI](self, "_disableAutomaticKeyboardUI"))
      return 1;
  }
  else if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v4.receiver = self;
    v4.super_class = (Class)WKContentView;
    return -[WKContentView _requiresKeyboardWhenFirstResponder](&v4, sel__requiresKeyboardWhenFirstResponder);
  }
  if (-[WKContentView _shouldShowAutomaticKeyboardUIIgnoringInputMode](self, "_shouldShowAutomaticKeyboardUIIgnoringInputMode"))
  {
    return 1;
  }
  return HIBYTE(self->_revealFocusedElementDeferrer.m_ptr) != 0;
}

- (BOOL)_requiresKeyboardResetOnReload
{
  objc_super v4;

  if (!-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
    return 1;
  v4.receiver = self;
  v4.super_class = (Class)WKContentView;
  return -[WKContentView _requiresKeyboardResetOnReload](&v4, sel__requiresKeyboardResetOnReload);
}

- (FloatRect)rectToRevealWhenZoomingToFocusedElement
{
  FocusedElementInformation *p_focusedElementInformation;
  int v3;
  int m_x;
  int v5;
  int m_y;
  int v7;
  BOOL v8;
  WebPageProxy *m_ptr;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  FloatRect result;

  v19 = 0;
  v20 = 0;
  p_focusedElementInformation = &self->_focusedElementInformation;
  v3 = *(_DWORD *)&self->_anon_938[24];
  m_x = self->_focusedElementInformation.interactionRect.m_location.m_x;
  if (m_x <= v3 && self->_focusedElementInformation.interactionRect.m_size.m_width + m_x > v3)
  {
    v5 = *(_DWORD *)&self->_anon_938[28];
    m_y = self->_focusedElementInformation.interactionRect.m_location.m_y;
    if (m_y <= v5 && self->_focusedElementInformation.interactionRect.m_size.m_height + m_y > v5)
    {
      v19 = *(_QWORD *)&self->_anon_938[24];
      v20 = 0x100000001;
    }
  }
  v7 = self->_anon_938[113];
  v8 = (v7 - 1) < 0xA || v7 == 14;
  if (v8 && (m_ptr = self->_page.m_ptr, v10 = *((_QWORD *)m_ptr + 4), *(_BYTE *)(v10 + 560)) && *(_BYTE *)(v10 + 688))
  {
    v21 = WebKit::WebPageProxy::selectionBoundingRectInRootViewCoordinates((WebKit::WebPageProxy *)m_ptr);
    v22 = v15;
    v23 = v16;
    v24 = v17;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v18, (const WebCore::IntRect *)p_focusedElementInformation);
    WebCore::FloatRect::intersect((WebCore::FloatRect *)&v21, (const WebCore::FloatRect *)v18);
  }
  else
  {
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v21, (const WebCore::IntRect *)&v19);
  }
  v11 = v21;
  v12 = v22;
  v13 = v23;
  v14 = v24;
  result.m_size.m_height = v14;
  result.m_size.m_width = v13;
  result.m_location.m_y = v12;
  result.m_location.m_x = v11;
  return result;
}

- (void)_keyboardWillShow
{
  uint64_t v2;

  self->_shouldRestoreSelection = 0;
  v2 = *(_QWORD *)&self->_actionsToPerformAfterEditorStateUpdate.m_capacity;
  if (v2)
    WebKit::RevealFocusedElementDeferrer::fulfill(v2, 2);
}

- (void)_keyboardDidShow
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;

  WTF::RunLoop::main((WTF::RunLoop *)self);
  v5 = 0;
  objc_initWeak(&v5, self);
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E3507508;
  *(_QWORD *)(v3 + 8) = 0;
  objc_moveWeak((id *)(v3 + 8), &v5);
  v6 = v3;
  WTF::RunLoop::dispatch();
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  objc_destroyWeak(&v5);
  objc_msgSend(self->_fileUploadPanel.m_ptr, "repositionContextMenuIfNeeded");
}

- (void)_zoomToRevealFocusedElement
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  PAL *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t IsSmallScreen;
  uint64_t v22;
  double v23;
  double v24;
  double v25;

  v3 = *(_QWORD *)&self->_actionsToPerformAfterEditorStateUpdate.m_capacity;
  *(_QWORD *)&self->_actionsToPerformAfterEditorStateUpdate.m_capacity = 0;
  if (v3)
    WTF::RefCounted<WebKit::RevealFocusedElementDeferrer>::deref(v3);
  if (!self->_anon_938[296]
    && !self->_suppressSelectionAssistantReasons.m_storage
    && !*(_QWORD *)&self->_isUpdatingAccessoryView)
  {
    WebCore::IntRect::operator CGRect();
    v24 = v5;
    v25 = v4;
    v23 = v6;
    v8 = v7;
    if (!BYTE6(self->_dataListTextSuggestions.m_ptr))
      -[WKContentView rectToRevealWhenZoomingToFocusedElement](self, "rectToRevealWhenZoomingToFocusedElement");
    v9 = (PAL *)WebCore::FloatRect::operator CGRect();
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v18 = *(_QWORD *)&self->_anon_938[48];
    v19 = *(double *)&self->_anon_938[56];
    v20 = *(_QWORD *)&self->_anon_938[32];
    if (self->_anon_938[109])
      IsSmallScreen = PAL::currentUserInterfaceIdiomIsSmallScreen(v9);
    else
      IsSmallScreen = 0;
    *(float *)&v22 = v19;
    -[WKContentView _zoomToFocusRect:selectionRect:fontSize:minimumScale:maximumScale:allowScaling:forceScroll:](self, "_zoomToFocusRect:selectionRect:fontSize:minimumScale:maximumScale:allowScaling:forceScroll:", IsSmallScreen, -[WKContentView requiresAccessoryView](self, "requiresAccessoryView"), v25, v24, v23, v8, v11, v13, v15, v17, v22, v20, v18);
  }
}

- (id)inputView
{
  return (id)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "inputView");
}

- (UIView)inputViewForWebView
{
  UIView *result;

  if (!-[WKContentView _hasFocusedElement](self, "_hasFocusedElement"))
    return 0;
  if (self->_inputPeripheral.m_ptr)
  {
    -[WKContentView _zoomToRevealFocusedElement](self, "_zoomToRevealFocusedElement");
    -[WKContentView _updateAccessory](self, "_updateAccessory");
  }
  result = (UIView *)objc_msgSend(self->_formInputSession.m_ptr, "customInputView");
  if (!result)
  {
    result = *(UIView **)&self->_inputViewUpdateDeferralSources.m_storage;
    if (!result)
      return (UIView *)objc_msgSend(self->_inputPeripheral.m_ptr, "assistantView");
  }
  return result;
}

- (CGRect)_selectionClipRect
{
  double v3;
  double v4;
  double v5;
  double v6;
  NSObject *v7;
  int v8;
  const char *v9;
  uint64_t v10;
  CGRect result;

  v10 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v7 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315138;
      v9 = "-[WKContentView(WKInteraction) _selectionClipRect]";
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v8, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19783A5A8);
  }
  -[WKContentView selectionClipRect](self, "selectionClipRect");
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

- (BOOL)_isContextMenuGestureRecognizerForFailureRelationships:(id)a3
{
  int v5;

  v5 = objc_msgSend((id)objc_msgSend(a3, "name"), "isEqualToString:", CFSTR("com.apple.UIKit.clickPresentationFailure"));
  if (v5)
    LOBYTE(v5) = objc_msgSend(a3, "view") == (_QWORD)self;
  return v5;
}

- (BOOL)_isDragInitiationGestureRecognizer:(id)a3
{
  void *v4;
  BOOL result;

  result = *(_QWORD *)&self->_dragDropInteractionState.m_activeDragSources.m_capacity
        && (v4 = (void *)objc_msgSend(a3, "delegate"), (objc_opt_respondsToSelector() & 1) != 0)
        && *(_QWORD *)&self->_dragDropInteractionState.m_activeDragSources.m_capacity == objc_msgSend(v4, "delegate");
  return result;
}

- (BOOL)gestureRecognizer:(id)a3 canPreventGestureRecognizer:(id)a4
{
  char v5;

  if (self->_highlightLongPressGestureRecognizer.m_ptr == a3 || self->_longPressGestureRecognizer.m_ptr == a3)
  {
    if (qword_1EE341A78 != -1)
      dispatch_once(&qword_1EE341A78, &__block_literal_global_2770);
    if ((isBuiltInScrollViewPanGestureRecognizer((UIGestureRecognizer *)a4) & 1) != 0
      || (objc_opt_isKindOfClass() & 1) != 0)
    {
      v5 = 0;
    }
    else
    {
      v5 = objc_opt_isKindOfClass() ^ 1;
    }
  }
  else
  {
    v5 = 1;
  }
  return v5 & 1;
}

- (BOOL)gestureRecognizer:(id)a3 canBePreventedByGestureRecognizer:(id)a4
{
  return !objc_msgSend(a4, "_wk_isTextInteractionLoupeGesture")
      || self->_highlightLongPressGestureRecognizer.m_ptr != a3 && self->_longPressGestureRecognizer.m_ptr != a3;
}

- (id)textInteractionLoupeGestureRecognizer
{
  UIGestureRecognizer **p_cachedTextInteractionLoupeGestureRecognizer;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  p_cachedTextInteractionLoupeGestureRecognizer = &self->_cachedTextInteractionLoupeGestureRecognizer;
  if ((WKContentView *)objc_msgSend(objc_loadWeak((id *)&self->_cachedTextInteractionLoupeGestureRecognizer), "view") != self)
  {
    objc_storeWeak((id *)p_cachedTextInteractionLoupeGestureRecognizer, 0);
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v4 = (void *)-[WKContentView gestureRecognizers](self, "gestureRecognizers", 0);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v12;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
          if (objc_msgSend(v9, "_wk_isTextInteractionLoupeGesture"))
          {
            objc_storeWeak((id *)p_cachedTextInteractionLoupeGestureRecognizer, v9);
            return objc_loadWeak((id *)p_cachedTextInteractionLoupeGestureRecognizer);
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v6)
          continue;
        break;
      }
    }
  }
  return objc_loadWeak((id *)p_cachedTextInteractionLoupeGestureRecognizer);
}

- (id)textInteractionTapGestureRecognizer
{
  UIGestureRecognizer **p_cachedTextInteractionTapGestureRecognizer;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  p_cachedTextInteractionTapGestureRecognizer = &self->_cachedTextInteractionTapGestureRecognizer;
  if ((WKContentView *)objc_msgSend(objc_loadWeak((id *)&self->_cachedTextInteractionTapGestureRecognizer), "view") != self)
  {
    objc_storeWeak((id *)p_cachedTextInteractionTapGestureRecognizer, 0);
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v4 = (void *)-[WKContentView gestureRecognizers](self, "gestureRecognizers", 0);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v12;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
          if (objc_msgSend(v9, "_wk_isTextInteractionTapGesture"))
          {
            objc_storeWeak((id *)p_cachedTextInteractionTapGestureRecognizer, v9);
            return objc_loadWeak((id *)p_cachedTextInteractionTapGestureRecognizer);
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v6)
          continue;
        break;
      }
    }
  }
  return objc_loadWeak((id *)p_cachedTextInteractionTapGestureRecognizer);
}

- (BOOL)gestureRecognizer:(id)a3 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a4
{
  NSArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id m_ptr;
  id v16;
  id v17;
  id v18;
  BOOL v20;
  BOOL result;
  WKContentView *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  BOOL v30;
  BOOL v31;
  id v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  id v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  id v40;
  BOOL v42;
  BOOL v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v7 = -[WKContentView deferringGestures](self, "deferringGestures", 0);
  v8 = -[NSArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v45;
LABEL_3:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v45 != v10)
        objc_enumerationMutation(v7);
      v12 = *(id *)(*((_QWORD *)&v44 + 1) + 8 * v11);
      m_ptr = self->_touchEventGestureRecognizer.m_ptr;
      if (v12 == a4 && m_ptr == a3)
        return 1;
      if (v12 == a3 && m_ptr == a4)
        return 1;
      if (v9 == ++v11)
      {
        v9 = -[NSArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
        if (v9)
          goto LABEL_3;
        break;
      }
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return 1;
  }
  v16 = self->_imageAnalysisDeferringGestureRecognizer.m_ptr;
  if (v16 == a3)
  {
    v22 = self;
    v23 = a4;
    return !-[WKContentView shouldDeferGestureDueToImageAnalysis:](v22, "shouldDeferGestureDueToImageAnalysis:", v23);
  }
  if (v16 == a4)
  {
    v22 = self;
    v23 = a3;
    return !-[WKContentView shouldDeferGestureDueToImageAnalysis:](v22, "shouldDeferGestureDueToImageAnalysis:", v23);
  }
  if (self->_singleTapGestureRecognizer.m_ptr == a3)
  {
    if (isBuiltInScrollViewPanGestureRecognizer((UIGestureRecognizer *)a4))
    {
      objc_msgSend(a4, "view");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        && !-[WKContentView _isInterruptingDecelerationForScrollViewOrAncestor:](self, "_isInterruptingDecelerationForScrollViewOrAncestor:", objc_msgSend(self->_singleTapGestureRecognizer.m_ptr, "lastTouchedScrollView")))
      {
        return 1;
      }
    }
  }
  v17 = self->_highlightLongPressGestureRecognizer.m_ptr;
  v18 = self->_longPressGestureRecognizer.m_ptr;
  if (v17 == a3 && v18 == a4)
    return 1;
  v20 = v17 == a4 && v18 == a3;
  if (v20 || (objc_msgSend(self->_mouseInteraction.m_ptr, "hasGesture:", a4) & 1) != 0)
    return 1;
  v24 = self->_highlightLongPressGestureRecognizer.m_ptr;
  if ((v24 == a3 || v24 == a4)
    && ((objc_msgSend(a3, "_wk_isTextInteractionLoupeGesture") & 1) != 0
     || (objc_msgSend(a4, "_wk_isTextInteractionLoupeGesture") & 1) != 0
     || (objc_msgSend(a3, "_wk_isTapAndAHalf") & 1) != 0
     || (objc_msgSend(a4, "_wk_isTapAndAHalf") & 1) != 0))
  {
    return 1;
  }
  v25 = self->_singleTapGestureRecognizer.m_ptr;
  if (v25 == a3)
  {
    if ((objc_msgSend(a4, "_wk_isTextInteractionTapGesture") & 1) != 0)
      return 1;
    v25 = self->_singleTapGestureRecognizer.m_ptr;
  }
  if (v25 != a4)
    goto LABEL_46;
  if ((objc_msgSend(a3, "_wk_isTextInteractionTapGesture") & 1) != 0)
    return 1;
  v25 = self->_singleTapGestureRecognizer.m_ptr;
LABEL_46:
  v26 = self->_nonBlockingDoubleTapGestureRecognizer.m_ptr;
  if (v25 == a3 && v26 == a4)
    return 1;
  if (v25 == a4 && v26 == a3)
    return 1;
  v27 = self->_highlightLongPressGestureRecognizer.m_ptr;
  if (v26 == a4 && v27 == a3)
    return 1;
  if (v26 == a3 && v27 == a4)
    return 1;
  v28 = self->_previewSecondaryGestureRecognizer.m_ptr;
  v30 = v27 == a4 && v28 == a3;
  v31 = v28 == a4 && v27 == a3;
  result = 1;
  if (!v31 && !v30)
  {
    v32 = self->_previewGestureRecognizer.m_ptr;
    v33 = v27 == a4 && v32 == a3;
    v34 = v33;
    v35 = v32 == a4 && v27 == a3;
    if (!v35 && !v34)
    {
      v36 = self->_doubleTapGestureRecognizerForDoubleClick.m_ptr;
      v37 = v26 == a4 && v36 == a3;
      v38 = v37;
      v39 = v36 == a4 && v26 == a3;
      if (!v39 && !v38)
      {
        v40 = self->_doubleTapGestureRecognizer.m_ptr;
        v42 = v36 == a3 && v40 == a4;
        v43 = v40 == a3 && v36 == a4;
        if (!v43 && !v42)
          return self->_editDropCaretView.m_ptr == a3;
      }
    }
  }
  return result;
}

- (BOOL)gestureRecognizer:(id)a3 shouldRequireFailureOfGestureRecognizer:(id)a4
{
  if (self->_touchEventGestureRecognizer.m_ptr == a3
    && -[WKContentView _touchEventsMustRequireGestureRecognizerToFail:](self, "_touchEventsMustRequireGestureRecognizerToFail:", a4))
  {
    return 1;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return objc_msgSend(a4, "shouldDeferGestureRecognizer:", a3);
  else
    return 0;
}

- (BOOL)gestureRecognizer:(id)a3 shouldBeRequiredToFailByGestureRecognizer:(id)a4
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return objc_msgSend(a3, "shouldDeferGestureRecognizer:", a4);
  else
    return 0;
}

- (void)_showImageSheet
{
  objc_msgSend(self->_actionSheetAssistant.m_ptr, "showImageSheet");
}

- (void)_showAttachmentSheet
{
  void *v3;
  id v4;

  v3 = (void *)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v4 = -[_WKActivatedElementInfo _initWithType:image:information:]([_WKActivatedElementInfo alloc], "_initWithType:image:information:", 2, 0, &self->_positionInformation);
    objc_msgSend(v3, "_webView:showCustomSheetForElement:", -[WKContentView webView](self, "webView"), v4);
    if (v4)
      CFRelease(v4);
  }
}

- (void)_showLinkSheet
{
  objc_msgSend(self->_actionSheetAssistant.m_ptr, "showLinkSheet");
}

- (void)_showDataDetectorsUI
{
  -[WKContentView _showDataDetectorsUIForPositionInformation:](self, "_showDataDetectorsUIForPositionInformation:", &self->_positionInformation);
}

- (void)_showDataDetectorsUIForPositionInformation:(const void *)a3
{
  objc_msgSend(self->_actionSheetAssistant.m_ptr, "showDataDetectorsUIForPositionInformation:", a3);
}

- (SEL)_actionForLongPressFromPositionInformation:(const void *)a3
{
  const WTF::URL *v4;
  int v5;
  SEL result;

  v5 = objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "configuration"), "_longPressActionsEnabled");
  result = 0;
  if (v5 && *((_BYTE *)a3 + 23))
  {
    if (*((_BYTE *)a3 + 25))
    {
      return sel__showImageSheet;
    }
    else if (*((_BYTE *)a3 + 24))
    {
      if (WebCore::DataDetection::canBePresentedByDataDetectors((WebCore::DataDetection *)((char *)a3 + 72), v4))return sel__showDataDetectorsUI;
      else
        return sel__showLinkSheet;
    }
    else if (*((_BYTE *)a3 + 26))
    {
      return sel__showAttachmentSheet;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (SEL)_actionForLongPress
{
  return -[WKContentView _actionForLongPressFromPositionInformation:](self, "_actionForLongPressFromPositionInformation:", &self->_positionInformation);
}

- (void)doAfterPositionInformationUpdate:(id)a3 forRequest:(InteractionInformationRequest)a4
{
  void *v6;
  void *v7;
  optional<WebKit::InteractionInformationRequest> *p_lastOutstandingPositionInformationRequest;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  InteractionInformationRequest v17;
  InteractionInformationRequest v18;
  _BYTE v19[648];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v18 = a4;
  if (-[WKContentView _currentPositionInformationIsValidForRequest:](self, "_currentPositionInformationIsValidForRequest:", &v18))
  {
    WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v19, (const WebKit::InteractionInformationAtPosition *)&self->_positionInformation);
    (*((void (**)(id, _BYTE *))a3 + 2))(a3, v19);
    WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v19, v6);
    return;
  }
  v17 = v18;
  v7 = _Block_copy(a3);
  p_lastOutstandingPositionInformationRequest = &self->_lastOutstandingPositionInformationRequest;
  v9 = *(unsigned int *)&self->_lastOutstandingPositionInformationRequest.var0.__val_.includeImageData;
  if ((_DWORD)v9 == *(_DWORD *)&self->_lastOutstandingPositionInformationRequest.var0.__val_.includeSnapshot)
  {
    v10 = v9 + (v9 >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 <= v9 + 1)
      v12 = v9 + 1;
    else
      v12 = v11;
    if (v12 >> 27)
    {
      __break(0xC471u);
      return;
    }
    v13 = *(WTF **)&p_lastOutstandingPositionInformationRequest->var0.__null_state_;
    v14 = WTF::fastMalloc((WTF *)(32 * v12));
    *(_DWORD *)&self->_lastOutstandingPositionInformationRequest.var0.__val_.includeSnapshot = v12;
    *(_QWORD *)&p_lastOutstandingPositionInformationRequest->var0.__null_state_ = v14;
    WTF::VectorMover<false,std::optional<std::pair<WebKit::InteractionInformationRequest,WTF::BlockPtr<void ()(WebKit::InteractionInformationAtPosition)>>>>::move((uint64_t)v13, (uint64_t)v13 + 32 * v9, v14);
    if (v13)
    {
      if (*(WTF **)&p_lastOutstandingPositionInformationRequest->var0.__null_state_ == v13)
      {
        *(_QWORD *)&p_lastOutstandingPositionInformationRequest->var0.__null_state_ = 0;
        *(_DWORD *)&self->_lastOutstandingPositionInformationRequest.var0.__val_.includeSnapshot = 0;
      }
      WTF::fastFree(v13, v15);
    }
    v16 = *(_QWORD *)&self->_lastOutstandingPositionInformationRequest.var0.__null_state_
        + 32 * *(unsigned int *)&self->_lastOutstandingPositionInformationRequest.var0.__val_.includeImageData;
  }
  else
  {
    v16 = *(_QWORD *)&p_lastOutstandingPositionInformationRequest->var0.__null_state_ + 32 * v9;
  }
  *(InteractionInformationRequest *)v16 = v17;
  *(_QWORD *)(v16 + 16) = v7;
  *(_BYTE *)(v16 + 24) = 1;
  ++*(_DWORD *)&self->_lastOutstandingPositionInformationRequest.var0.__val_.includeImageData;
  _Block_release(0);
  if (!-[WKContentView _hasValidOutstandingPositionInformationRequest:](self, "_hasValidOutstandingPositionInformationRequest:", &v18))-[WKContentView requestAsynchronousPositionInformationUpdate:](self, "requestAsynchronousPositionInformationUpdate:", v18);
}

- (BOOL)ensurePositionInformationIsUpToDate:(InteractionInformationRequest)a3
{
  BOOL result;
  WebPageProxy *m_ptr;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  InteractionInformationRequest v13;
  uint64_t v14;
  int v15;
  char v16;

  v13 = a3;
  if (-[WKContentView _currentPositionInformationIsValidForRequest:](self, "_currentPositionInformationIsValidForRequest:", &v13))
  {
    return 1;
  }
  m_ptr = self->_page.m_ptr;
  if (*((_BYTE *)m_ptr + 729))
    return 0;
  if (!*((_BYTE *)m_ptr + 728))
    return 0;
  v6 = *(_QWORD *)(*((_QWORD *)m_ptr + 26) + 144);
  if (!v6 || BYTE3(self->_dataListSuggestionsControl.m_weakReference))
    return 0;
  BYTE3(self->_dataListSuggestionsControl.m_weakReference) = 1;
  v7 = -[WKContentView _hasValidOutstandingPositionInformationRequest:](self, "_hasValidOutstandingPositionInformationRequest:", &v13);
  if ((v7 & 1) == 0)
    v7 = -[WKContentView requestAsynchronousPositionInformationUpdate:](self, "requestAsynchronousPositionInformationUpdate:", *(_QWORD *)&v13.point, *(_QWORD *)&v13.includeSnapshot);
  v8 = *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 1896);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v7);
  IPC::Connection::waitForMessage((unsigned __int8 ***)v6, 0x774u, v8, 1, (uint64_t)&v14, v9 + 1.0);
  v10 = v15;
  if (v15)
  {
    if (v15 != 1)
    {
      result = std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v11 = v14;
  }
  else
  {
    v12 = atomic_load((unsigned __int8 *)(v6 + 33));
    v10 = v15;
    if ((v12 & 1) != 0)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 8) + 16))(*(_QWORD *)(v6 + 8), v6, v14);
      v11 = 0;
      v10 = v15;
    }
    else
    {
      v11 = 1;
    }
    if (v10 == -1)
      goto LABEL_18;
  }
  ((void (*)(char *, uint64_t *))off_1E3507520[v10])(&v16, &v14);
LABEL_18:
  if (v11)
    result = 0;
  else
    result = self->_positionInformation.canBeValid;
  BYTE1(self->_dataListTextSuggestionsInputView.m_ptr) = result;
  return result;
}

- (void)requestAsynchronousPositionInformationUpdate:(InteractionInformationRequest)a3
{
  IntPoint *p_m_capacity;
  WebPageProxy *m_ptr;
  uint64_t v6;
  InteractionInformationRequest v7;
  InteractionInformationRequest *v8;

  v7 = a3;
  if (!-[WKContentView _currentPositionInformationIsValidForRequest:](self, "_currentPositionInformationIsValidForRequest:", &v7))
  {
    p_m_capacity = (IntPoint *)&self->_lastSelectionDrawingInfo.selectionGeometries.m_capacity;
    if (LOBYTE(self->_lastSelectionDrawingInfo.selectionClipRect.m_size.m_width))
    {
      *p_m_capacity = v7.point;
      *(_QWORD *)((char *)&self->_lastSelectionDrawingInfo.selectionGeometries.m_size + 3) = *(_QWORD *)((char *)&v7.point.m_y + 3);
    }
    else
    {
      *(InteractionInformationRequest *)&p_m_capacity->m_x = v7;
      LOBYTE(self->_lastSelectionDrawingInfo.selectionClipRect.m_size.m_width) = 1;
    }
    m_ptr = self->_page.m_ptr;
    v6 = *((_QWORD *)m_ptr + 26);
    v8 = &v7;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::RequestPositionInformation>(v6, (_DWORD **)&v8, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
  }
}

- (BOOL)_currentPositionInformationIsValidForRequest:(const InteractionInformationRequest *)a3
{
  return BYTE1(self->_dataListTextSuggestionsInputView.m_ptr)
      && WebKit::InteractionInformationRequest::isValidForRequest((int32x2_t *)&self->_positionInformation, a3, 0);
}

- (BOOL)_hasValidOutstandingPositionInformationRequest:(const InteractionInformationRequest *)a3
{
  int32x2_t *p_m_capacity;

  p_m_capacity = (int32x2_t *)&self->_lastSelectionDrawingInfo.selectionGeometries.m_capacity;
  return p_m_capacity[2].i8[0] && WebKit::InteractionInformationRequest::isValidForRequest(p_m_capacity, a3, 0);
}

- (BOOL)_currentPositionInformationIsApproximatelyValidForRequest:(const InteractionInformationRequest *)a3 radiusForApproximation:(int)a4
{
  return BYTE1(self->_dataListTextSuggestionsInputView.m_ptr)
      && WebKit::InteractionInformationRequest::isValidForRequest((int32x2_t *)&self->_positionInformation, a3, a4);
}

- (void)_invokeAndRemovePendingHandlersValidForCurrentPositionInformation
{
  void *v3;
  optional<WebKit::InteractionInformationRequest> *p_lastOutstandingPositionInformationRequest;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const void **v8;
  uint64_t v9;
  void (**v10)(void *, _BYTE *);
  void *v11;
  void *v12;
  const void *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  void (**v20)(void *, _BYTE *);
  char v21;
  _BYTE v22[640];
  _BYTE v23[640];
  _BYTE v24[648];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  ++self->_cachedSelectedTextRange.m_ptr;
  WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v23, (const WebKit::InteractionInformationAtPosition *)&self->_positionInformation);
  p_lastOutstandingPositionInformationRequest = &self->_lastOutstandingPositionInformationRequest;
  LODWORD(v5) = *(_DWORD *)&self->_lastOutstandingPositionInformationRequest.var0.__val_.includeImageData;
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (const void **)(*(_QWORD *)&p_lastOutstandingPositionInformationRequest->var0.__null_state_ + v6);
      LOBYTE(v19) = 0;
      v21 = 0;
      if (*((_BYTE *)v8 + 24))
      {
        v19 = *(_OWORD *)v8;
        v20 = (void (**)(void *, _BYTE *))_Block_copy(v8[2]);
        v21 = 1;
        if (-[WKContentView _currentPositionInformationIsValidForRequest:](self, "_currentPositionInformationIsValidForRequest:", &v19))
        {
          if (v7 >= *(unsigned int *)&self->_lastOutstandingPositionInformationRequest.var0.__val_.includeImageData)
            goto LABEL_26;
          v9 = *(_QWORD *)&p_lastOutstandingPositionInformationRequest->var0.__null_state_ + v6;
          if (*(_BYTE *)(v9 + 24))
          {
            _Block_release(*(const void **)(v9 + 16));
            *(_BYTE *)(v9 + 24) = 0;
          }
          if (!v21)
            __break(1u);
          if (!v20)
          {
            v13 = 0;
            goto LABEL_14;
          }
          WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v22, (const WebKit::InteractionInformationAtPosition *)v23);
          v10 = v20;
          WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition((uint64_t)v24, (uint64_t)v22);
          v10[2](v10, v24);
          WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v24, v11);
          WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v22, v12);
        }
        if (v21)
        {
          v13 = v20;
LABEL_14:
          _Block_release(v13);
        }
      }
      ++v7;
      v5 = *(unsigned int *)&self->_lastOutstandingPositionInformationRequest.var0.__val_.includeImageData;
      v6 += 32;
    }
    while (v7 < v5);
  }
  v14 = (char *)self->_cachedSelectedTextRange.m_ptr - 1;
  self->_cachedSelectedTextRange.m_ptr = v14;
  v15 = (v5 - 1);
  if ((int)v5 - 1 >= 0 && !v14)
  {
    v16 = 32 * (v5 - 1);
    while (v15 < v5)
    {
      v17 = *(_QWORD *)&p_lastOutstandingPositionInformationRequest->var0.__null_state_ + v16;
      if (!*(_BYTE *)(v17 + 24))
      {
        WTF::VectorMover<false,std::optional<std::pair<WebKit::InteractionInformationRequest,WTF::BlockPtr<void ()(WebKit::InteractionInformationAtPosition)>>>>::move(v17 + 32, *(_QWORD *)&p_lastOutstandingPositionInformationRequest->var0.__null_state_ + 32 * v5, v17);
        LODWORD(v5) = *(_DWORD *)&p_lastOutstandingPositionInformationRequest->var0.__val_.includeImageData - 1;
        *(_DWORD *)&p_lastOutstandingPositionInformationRequest->var0.__val_.includeImageData = v5;
      }
      v16 -= 32;
      if ((uint64_t)v15-- <= 0)
        goto LABEL_24;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x19783B720);
  }
LABEL_24:
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v23, v3);
}

- (id)_dataDetectionResults
{
  return (id)*((_QWORD *)self->_page.m_ptr + 55);
}

- (BOOL)_pointIsInsideSelectionRect:(CGPoint)a3 outBoundingRect:(FloatRect *)a4
{
  unsigned int m_width;
  char v6;
  WebCore::SelectionGeometry *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  float v12;
  int v13;
  BOOL v14;
  float v16[4];
  uint64_t v17;
  uint64_t v18;
  CGPoint v19;

  v19 = a3;
  m_width = self->_lastSelectionDrawingInfo.caretRect.m_size.m_width;
  if (m_width)
  {
    v6 = 0;
    v7 = *(WebCore::SelectionGeometry **)&self->_lastSelectionDrawingInfo.type;
    v8 = 84 * m_width;
    do
    {
      v17 = WebCore::SelectionGeometry::rect(v7);
      v18 = v9;
      if ((int)v9 >= 1 && SHIDWORD(v9) >= 1)
      {
        WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v16, &v19);
        v10 = roundf(v16[0]);
        v11 = (int)v10;
        if (v10 <= -2147500000.0)
          v11 = 0x80000000;
        if (v10 >= 2147500000.0)
          v11 = 0x7FFFFFFF;
        v12 = roundf(v16[1]);
        if (v12 >= 2147500000.0)
        {
          v13 = 0x7FFFFFFF;
        }
        else if (v12 <= -2147500000.0)
        {
          v13 = 0x80000000;
        }
        else
        {
          v13 = (int)v12;
        }
        v14 = (int)v17 <= v11 && (int)v18 + (int)v17 > v11 && SHIDWORD(v17) <= v13 && HIDWORD(v18) + HIDWORD(v17) > v13;
        v6 |= v14;
        if (a4)
        {
          WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v16, (const WebCore::IntRect *)&v17);
          WebCore::FloatRect::unite((WebCore::FloatRect *)a4, (const WebCore::FloatRect *)v16);
        }
      }
      v7 = (WebCore::SelectionGeometry *)((char *)v7 + 84);
      v8 -= 84;
    }
    while (v8);
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

- (BOOL)_shouldToggleSelectionCommandsAfterTapAt:(CGPoint)a3
{
  BOOL v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGRect v10;
  _BYTE v11[8];
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;

  if (!self->_lastSelectionDrawingInfo.caretRect.m_size.m_width)
    return 0;
  v14 = 0;
  v15 = 0;
  v4 = -[WKContentView _pointIsInsideSelectionRect:outBoundingRect:](self, "_pointIsInsideSelectionRect:outBoundingRect:", &v14, a3.x, a3.y);
  -[WKContentView unobscuredContentRect](self, "unobscuredContentRect");
  v10.origin.x = v5;
  v10.origin.y = v6;
  v10.size.width = v7;
  v10.size.height = v8;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v11, &v10);
  WebCore::FloatRect::intersect((WebCore::FloatRect *)&v14, (const WebCore::FloatRect *)v11);
  if ((float)(v12 * v13) == 0.0 || (float)((float)(*(float *)&v15 * *((float *)&v15 + 1)) / (float)(v12 * v13)) > 0.75)
    return 0;
  return v4;
}

- (BOOL)_hasEnclosingScrollView:(id)a3 matchingCriteria:(void *)a4
{
  id v5;
  uint64_t v6;

  v5 = a3;
  if (a3 || (v6 = objc_msgSend(-[WKContentView webView](self, "webView"), "scrollView"), (v5 = (id)v6) != 0))
  {
    while (1)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        && ((*(uint64_t (**)(_QWORD, id))(**(_QWORD **)a4 + 16))(*(_QWORD *)a4, v5) & 1) != 0)
      {
        break;
      }
      v6 = objc_msgSend(v5, "superview");
      v5 = (id)v6;
      if (!v6)
        return v6;
    }
    LOBYTE(v6) = 1;
  }
  return v6;
}

- (BOOL)_isPanningScrollViewOrAncestor:(id)a3
{
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v9;

  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E3507540;
  v9 = v5;
  v6 = -[WKContentView _hasEnclosingScrollView:matchingCriteria:](self, "_hasEnclosingScrollView:matchingCriteria:", a3, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return v6;
}

- (BOOL)_isInterruptingDecelerationForScrollViewOrAncestor:(id)a3
{
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v9;

  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E3507568;
  v9 = v5;
  v6 = -[WKContentView _hasEnclosingScrollView:matchingCriteria:](self, "_hasEnclosingScrollView:matchingCriteria:", a3, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  return v6;
}

- (BOOL)gestureRecognizerShouldBegin:(id)a3
{
  CGFloat v5;
  CGFloat v6;
  float v7;
  uint64_t v8;
  float v9;
  unint64_t v10;
  _BOOL4 v11;
  BOOL v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  BOOL v21;
  float v22;
  uint64_t v23;
  float v24;
  unint64_t v25;
  BOOL v26;
  float v27;
  uint64_t v28;
  float v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  float v37[2];
  uint64_t v38;
  uint64_t v39;
  CGPoint v40;

  objc_msgSend(a3, "locationInView:", self);
  v40.x = v5;
  v40.y = v6;
  if (self->_singleTapGestureRecognizer.m_ptr == a3)
  {
    if (!-[WKContentView _shouldToggleSelectionCommandsAfterTapAt:](self, "_shouldToggleSelectionCommandsAfterTapAt:"))
    {
      v13 = objc_msgSend(self->_singleTapGestureRecognizer.m_ptr, "lastTouchedScrollView");
      if (!-[WKContentView _isPanningScrollViewOrAncestor:](self, "_isPanningScrollViewOrAncestor:", v13))
      {
        LOBYTE(v11) = !-[WKContentView _isInterruptingDecelerationForScrollViewOrAncestor:](self, "_isInterruptingDecelerationForScrollViewOrAncestor:", v13);
        return v11;
      }
    }
    goto LABEL_43;
  }
  if (self->_doubleTapGestureRecognizerForDoubleClick.m_ptr == a3)
  {
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v37, &v40);
    v14 = roundf(v37[0]);
    v15 = 0x7FFFFFFFLL;
    v16 = (int)v14;
    if (v14 <= -2147500000.0)
      v16 = 0x80000000;
    if (v14 < 2147500000.0)
      v15 = v16;
    v17 = roundf(v37[1]);
    v18 = 0x7FFFFFFF00000000;
    v19 = 0x8000000000000000;
    if (v17 > -2147500000.0)
      v19 = (unint64_t)(int)v17 << 32;
    if (v17 < 2147500000.0)
      v18 = v19;
    v38 = v18 | v15;
    LODWORD(v39) = 0x1000000;
    WORD2(v39) = 0;
    BYTE6(v39) = 0;
    objc_msgSend(self->_doubleTapGestureRecognizerForDoubleClick.m_ptr, "allowableMovement");
    if (!-[WKContentView _currentPositionInformationIsApproximatelyValidForRequest:radiusForApproximation:](self, "_currentPositionInformationIsApproximatelyValidForRequest:radiusForApproximation:", &v38, (int)v20))
    {
      v11 = -[WKContentView ensurePositionInformationIsUpToDate:](self, "ensurePositionInformationIsUpToDate:", v38, v39);
      if (!v11)
        return v11;
    }
    if (!self->_positionInformation.nodeAtPositionHasDoubleClickHandler.__engaged_)
      goto LABEL_43;
    v21 = self->_positionInformation.nodeAtPositionHasDoubleClickHandler.var0.__null_state_ == 0;
LABEL_65:
    LOBYTE(v11) = !v21;
    return v11;
  }
  if ((self->_highlightLongPressGestureRecognizer.m_ptr == a3
     || self->_doubleTapGestureRecognizer.m_ptr == a3
     || self->_nonBlockingDoubleTapGestureRecognizer.m_ptr == a3
     || self->_twoFingerDoubleTapGestureRecognizer.m_ptr == a3)
    && -[WKContentView _hasFocusedElement](self, "_hasFocusedElement"))
  {
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v38, &v40);
    v7 = roundf(*(float *)&v38);
    if (v7 >= 2147500000.0)
    {
      v8 = 0x7FFFFFFFLL;
    }
    else
    {
      v8 = 0x80000000;
      if (v7 > -2147500000.0)
        v8 = (int)v7;
    }
    v9 = roundf(*((float *)&v38 + 1));
    if (v9 >= 2147500000.0)
    {
      v10 = 0x7FFFFFFF00000000;
    }
    else if (v9 <= -2147500000.0)
    {
      v10 = 0x8000000000000000;
    }
    else
    {
      v10 = (unint64_t)(int)v9 << 32;
    }
    v11 = -[WKContentView ensurePositionInformationIsUpToDate:](self, "ensurePositionInformationIsUpToDate:", v10 | v8, 0x1000000);
    if (!v11)
      return v11;
    if (self->_anon_7d0[32]
      && *((_QWORD *)&self->_positionInformation.elementContext.var0.var2 + 3) == self->_focusedElementInformation.elementContext.webPageIdentifier.m_identifier)
    {
      v12 = *(_QWORD *)&self->_positionInformation.__engaged_ == self->_focusedElementInformation.elementContext.m_processIdentifier.m_identifier
         && self->_positionInformation.elementContext.var0.var1.m_processIdentifier.m_identifier == *(_QWORD *)&self->_focusedElementInformation.elementContext.documentIdentifier.m_object[8];
      if (v12
        && *(_QWORD *)self->_anon_7d0 == self->_focusedElementInformation.elementIdentifier.m_identifier
        && *(_QWORD *)&self->_anon_7d0[16] == *(_QWORD *)&self->_anon_938[8])
      {
        goto LABEL_43;
      }
    }
  }
  if (self->_highlightLongPressGestureRecognizer.m_ptr == a3)
  {
    if (-[WKContentView _isInterruptingDecelerationForScrollViewOrAncestor:](self, "_isInterruptingDecelerationForScrollViewOrAncestor:", objc_msgSend(a3, "lastTouchedScrollView")))
    {
      goto LABEL_43;
    }
    if (!-[WKContentView _hasFocusedElement](self, "_hasFocusedElement"))
    {
      BYTE1(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v38, &v40);
      v27 = roundf(*(float *)&v38);
      if (v27 >= 2147500000.0)
      {
        v28 = 0x7FFFFFFFLL;
      }
      else
      {
        v28 = 0x80000000;
        if (v27 > -2147500000.0)
          v28 = (int)v27;
      }
      v29 = roundf(*((float *)&v38 + 1));
      if (v29 >= 2147500000.0)
      {
        v30 = 0x7FFFFFFF00000000;
      }
      else if (v29 <= -2147500000.0)
      {
        v30 = 0x8000000000000000;
      }
      else
      {
        v30 = (unint64_t)(int)v29 << 32;
      }
      v31 = v30 | v28;
      if (objc_msgSend((id)-[WKContentView traitCollection](self, "traitCollection"), "forceTouchCapability") == 2)
      {
        if (-[WKContentView _shouldUseContextMenus](self, "_shouldUseContextMenus"))
          v32 = 16777473;
        else
          v32 = 0x1000001000101;
        v33 = objc_msgSend(-[WKContentView webView](self, "webView"), "_allowAnimationControls");
        v34 = 0x10000000000;
        if (!v33)
          v34 = 0;
        v35 = v34 | v32;
      }
      else
      {
        v35 = 0x1000000;
      }
      -[WKContentView requestAsynchronousPositionInformationUpdate:](self, "requestAsynchronousPositionInformationUpdate:", v31, v35);
      goto LABEL_26;
    }
    if (!self->_positionInformation.isElement)
      goto LABEL_43;
LABEL_64:
    v21 = -[WKContentView _actionForLongPress](self, "_actionForLongPress") == 0;
    goto LABEL_65;
  }
  if (self->_longPressGestureRecognizer.m_ptr != a3)
  {
LABEL_26:
    LOBYTE(v11) = 1;
    return v11;
  }
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v38, &v40);
  v22 = roundf(*(float *)&v38);
  if (v22 >= 2147500000.0)
  {
    v23 = 0x7FFFFFFFLL;
  }
  else
  {
    v23 = 0x80000000;
    if (v22 > -2147500000.0)
      v23 = (int)v22;
  }
  v24 = roundf(*((float *)&v38 + 1));
  if (v24 >= 2147500000.0)
  {
    v25 = 0x7FFFFFFF00000000;
  }
  else if (v24 <= -2147500000.0)
  {
    v25 = 0x8000000000000000;
  }
  else
  {
    v25 = (unint64_t)(int)v24 << 32;
  }
  v11 = -[WKContentView ensurePositionInformationIsUpToDate:](self, "ensurePositionInformationIsUpToDate:", v25 | v23, 0x1000000);
  if (v11)
  {
    if (-[WKContentView _hasFocusedElement](self, "_hasFocusedElement"))
    {
      if (!self->_anon_7d0[32]
        || *((_QWORD *)&self->_positionInformation.elementContext.var0.var2 + 3) != self->_focusedElementInformation.elementContext.webPageIdentifier.m_identifier)
      {
        goto LABEL_26;
      }
      v26 = *(_QWORD *)&self->_positionInformation.__engaged_ == self->_focusedElementInformation.elementContext.m_processIdentifier.m_identifier
         && self->_positionInformation.elementContext.var0.var1.m_processIdentifier.m_identifier == *(_QWORD *)&self->_focusedElementInformation.elementContext.documentIdentifier.m_object[8];
      LOBYTE(v11) = 1;
      if (!v26
        || *(_QWORD *)self->_anon_7d0 != self->_focusedElementInformation.elementIdentifier.m_identifier
        || *(_QWORD *)&self->_anon_7d0[16] != *(_QWORD *)&self->_anon_938[8])
      {
        return v11;
      }
LABEL_43:
      LOBYTE(v11) = 0;
      return v11;
    }
    goto LABEL_64;
  }
  return v11;
}

- (void)_finishInteraction
{
  BYTE2(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
  -[WKContentView _fadeTapHighlightViewIfNeeded](self, "_fadeTapHighlightViewIfNeeded");
}

- (void)_fadeTapHighlightViewIfNeeded
{
  double v3;
  _QWORD v4[5];
  _QWORD v5[5];

  if (objc_msgSend(self->_tapHighlightView.m_ptr, "superview") && !BYTE3(self->_dataListTextSuggestionsInputView.m_ptr))
  {
    BYTE3(self->_dataListTextSuggestionsInputView.m_ptr) = 1;
    v3 = 0.1;
    if (LOBYTE(self->_dataListSuggestionsControl.m_weakReference))
      v3 = 0.25;
    v4[4] = self;
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __61__WKContentView_WKInteraction___fadeTapHighlightViewIfNeeded__block_invoke;
    v5[3] = &unk_1E34BAF80;
    v5[4] = self;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __61__WKContentView_WKInteraction___fadeTapHighlightViewIfNeeded__block_invoke_2;
    v4[3] = &unk_1E34CF1C8;
    objc_msgSend(MEMORY[0x1E0CEABB0], "animateWithDuration:animations:completion:", v5, v4, v3);
  }
}

uint64_t __61__WKContentView_WKInteraction___fadeTapHighlightViewIfNeeded__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 760), "setAlpha:", 0.0);
}

uint64_t __61__WKContentView_WKInteraction___fadeTapHighlightViewIfNeeded__block_invoke_2(uint64_t result, int a2)
{
  uint64_t v2;

  v2 = result;
  if (a2)
    result = objc_msgSend(*(id *)(*(_QWORD *)(result + 32) + 760), "removeFromSuperview");
  *(_BYTE *)(*(_QWORD *)(v2 + 32) + 2955) = 0;
  return result;
}

- (BOOL)canShowNonEmptySelectionView
{
  uint64_t v3;
  int v4;
  int v5;

  if (self->_suppressSelectionAssistantReasons.m_storage)
    return 0;
  v3 = *((_QWORD *)self->_page.m_ptr + 4);
  v4 = *(unsigned __int8 *)(v3 + 560);
  v5 = *(unsigned __int8 *)(v3 + 233);
  return v4 && v5 == 0;
}

- (BOOL)hasSelectablePositionAtPoint:(CGPoint)a3
{
  int BoolValueForKey;
  const WTF::StringImpl *v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  unint64_t v10;
  float v12[2];
  CGPoint v13;

  v13 = a3;
  if ((objc_msgSend(self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr, "interactableItemExistsAtPoint:") & 1) != 0)goto LABEL_2;
  BoolValueForKey = objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "configuration"), "_textInteractionGesturesEnabled");
  if (BoolValueForKey)
  {
    v6 = *((_QWORD *)self->_page.m_ptr + 28);
    {
      WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key, v5);
    if (BoolValueForKey)
    {
      if (self->_suppressSelectionAssistantReasons.m_storage || BYTE4(self->_dataListTextSuggestions.m_ptr))
      {
LABEL_2:
        LOBYTE(BoolValueForKey) = 0;
        return BoolValueForKey;
      }
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v12, &v13);
      v7 = roundf(v12[0]);
      if (v7 >= 2147500000.0)
      {
        v8 = 0x7FFFFFFFLL;
      }
      else
      {
        v8 = 0x80000000;
        if (v7 > -2147500000.0)
          v8 = (int)v7;
      }
      v9 = roundf(v12[1]);
      if (v9 >= 2147500000.0)
      {
        v10 = 0x7FFFFFFF00000000;
      }
      else if (v9 <= -2147500000.0)
      {
        v10 = 0x8000000000000000;
      }
      else
      {
        v10 = (unint64_t)(int)v9 << 32;
      }
      BoolValueForKey = -[WKContentView ensurePositionInformationIsUpToDate:](self, "ensurePositionInformationIsUpToDate:", v10 | v8, 0x1000000);
      if (BoolValueForKey)
        LOBYTE(BoolValueForKey) = self->_anon_e60[0]
                               && std::operator==[abi:sn180100]<WebCore::ElementContext,WebCore::ElementContext>((uint64_t)&self->_anon_7d0[48], (uint64_t)&self->_editDropCaretAnimator)|| self->_positionInformation.selectability == 0;
    }
  }
  return BoolValueForKey;
}

- (BOOL)pointIsNearMarkedText:(CGPoint)a3
{
  int BoolValueForKey;
  const WTF::StringImpl *v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  unint64_t v10;
  float v12[2];
  CGPoint v13;

  v13 = a3;
  if ((objc_msgSend(self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr, "interactableItemExistsAtPoint:") & 1) != 0)goto LABEL_2;
  BoolValueForKey = objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "configuration"), "_textInteractionGesturesEnabled");
  if (BoolValueForKey)
  {
    v6 = *((_QWORD *)self->_page.m_ptr + 28);
    {
      WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key, v5);
    if (BoolValueForKey)
    {
      if (self->_suppressSelectionAssistantReasons.m_storage)
      {
LABEL_2:
        LOBYTE(BoolValueForKey) = 0;
        return BoolValueForKey;
      }
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v12, &v13);
      v7 = roundf(v12[0]);
      if (v7 >= 2147500000.0)
      {
        v8 = 0x7FFFFFFFLL;
      }
      else
      {
        v8 = 0x80000000;
        if (v7 > -2147500000.0)
          v8 = (int)v7;
      }
      v9 = roundf(v12[1]);
      if (v9 >= 2147500000.0)
      {
        v10 = 0x7FFFFFFF00000000;
      }
      else if (v9 <= -2147500000.0)
      {
        v10 = 0x8000000000000000;
      }
      else
      {
        v10 = (unint64_t)(int)v9 << 32;
      }
      BoolValueForKey = -[WKContentView ensurePositionInformationIsUpToDate:](self, "ensurePositionInformationIsUpToDate:", v10 | v8, 0x1000000);
      if (BoolValueForKey)
        LOBYTE(BoolValueForKey) = self->_positionInformation.isNearMarkedText;
    }
  }
  return BoolValueForKey;
}

- (BOOL)textInteractionGesture:(int64_t)a3 shouldBeginAtPoint:(CGPoint)a4
{
  int BoolValueForKey;
  const WTF::StringImpl *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  BOOL v13;
  float v15[2];
  CGPoint v16;

  v16 = a4;
  if (a3 == 15)
  {
    LOBYTE(BoolValueForKey) = -[WKContentView hasSelectablePositionAtPoint:](self, "hasSelectablePositionAtPoint:");
    return BoolValueForKey;
  }
  if ((objc_msgSend(self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr, "interactableItemExistsAtPoint:") & 1) != 0)
  {
LABEL_4:
    LOBYTE(BoolValueForKey) = 0;
    return BoolValueForKey;
  }
  BoolValueForKey = objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "configuration"), "_textInteractionGesturesEnabled");
  if (BoolValueForKey)
  {
    v8 = *((_QWORD *)self->_page.m_ptr + 28);
    {
      WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v8 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key, v7);
    if (BoolValueForKey)
    {
      if (*(_QWORD *)&self->_hasSetUpInteractions || self->_suppressSelectionAssistantReasons.m_storage)
        goto LABEL_4;
      if (!-[WKContentView isFocusingElement](self, "isFocusingElement"))
      {
        if (a3 == 3)
          goto LABEL_4;
        if (a3 == 1)
        {
          if (self->_dropAnimationCount <= 0
            && (objc_msgSend(-[WKContentView textInteractionLoupeGestureRecognizer](self, "textInteractionLoupeGestureRecognizer"), "_wk_hasRecognizedOrEnded") & 1) == 0)
          {
            LOBYTE(BoolValueForKey) = *(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 234) != 0;
            return BoolValueForKey;
          }
          goto LABEL_4;
        }
      }
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v15, &v16);
      v9 = roundf(v15[0]);
      if (v9 >= 2147500000.0)
      {
        v10 = 0x7FFFFFFFLL;
      }
      else
      {
        v10 = 0x80000000;
        if (v9 > -2147500000.0)
          v10 = (int)v9;
      }
      v11 = roundf(v15[1]);
      if (v11 >= 2147500000.0)
        v12 = 0x7FFFFFFF00000000;
      else
        v12 = v11 <= -2147500000.0 ? 0x8000000000000000 : (unint64_t)(int)v11 << 32;
      BoolValueForKey = -[WKContentView ensurePositionInformationIsUpToDate:](self, "ensurePositionInformationIsUpToDate:", v12 | v10, 0x1000000);
      if (BoolValueForKey)
      {
        if (!a3 && self->_positionInformation.selectability == 3 || self->_positionInformation.preventTextInteraction)
          goto LABEL_4;
        if (!self->_anon_e60[0]
          || !std::operator==[abi:sn180100]<WebCore::ElementContext,WebCore::ElementContext>((uint64_t)&self->_anon_7d0[48], (uint64_t)&self->_editDropCaretAnimator))
        {
          if (-[WKContentView isFocusingElement](self, "isFocusingElement"))
          {
            if (!self->_anon_7d0[32]
              || *((_QWORD *)&self->_positionInformation.elementContext.var0.var2 + 3) != self->_focusedElementInformation.elementContext.webPageIdentifier.m_identifier)
            {
              goto LABEL_4;
            }
            LOBYTE(BoolValueForKey) = 0;
            v13 = *(_QWORD *)&self->_positionInformation.__engaged_ == self->_focusedElementInformation.elementContext.m_processIdentifier.m_identifier
               && self->_positionInformation.elementContext.var0.var1.m_processIdentifier.m_identifier == *(_QWORD *)&self->_focusedElementInformation.elementContext.documentIdentifier.m_object[8];
            if (v13 && *(_QWORD *)self->_anon_7d0 == self->_focusedElementInformation.elementIdentifier.m_identifier)
              LOBYTE(BoolValueForKey) = *(_QWORD *)&self->_anon_7d0[16] == *(_QWORD *)&self->_anon_938[8];
            return BoolValueForKey;
          }
          LOBYTE(BoolValueForKey) = !self->_positionInformation.prefersDraggingOverTextSelection;
          if (a3 || self->_positionInformation.prefersDraggingOverTextSelection)
            return BoolValueForKey;
          if (-[WKContentView hasSelectablePositionAtPoint:](self, "hasSelectablePositionAtPoint:", v16.x, v16.y))
            -[WKContentView _cancelLongPressGestureRecognizer](self, "_cancelLongPressGestureRecognizer");
        }
        LOBYTE(BoolValueForKey) = 1;
      }
    }
  }
  return BoolValueForKey;
}

- (id)webSelectionRectsForSelectionGeometries:(const void *)a3
{
  void *v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (!*((_DWORD *)a3 + 3))
    return 0;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)a3 + 3));
  v5 = *((_DWORD *)a3 + 3);
  if (v5)
  {
    v6 = *(unsigned __int8 **)a3;
    v7 = &v6[84 * v5];
    do
    {
      v8 = (void *)objc_msgSend(MEMORY[0x1E0DD9798], "selectionRect");
      v11 = WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)v6);
      v12 = v9;
      WebCore::IntRect::operator CGRect();
      objc_msgSend(v8, "setRect:", v11, v12);
      objc_msgSend(v8, "setWritingDirection:", v6[33]);
      objc_msgSend(v8, "setIsLineBreak:", v6[52]);
      objc_msgSend(v8, "setIsFirstOnLine:", v6[53]);
      objc_msgSend(v8, "setIsLastOnLine:", v6[54]);
      objc_msgSend(v8, "setContainsStart:", v6[55]);
      objc_msgSend(v8, "setContainsEnd:", v6[56]);
      objc_msgSend(v8, "setIsInFixedPosition:", v6[58]);
      objc_msgSend(v8, "setIsHorizontal:", v6[57]);
      if (v8)
        objc_msgSend(v4, "addObject:", v8);
      v6 += 84;
    }
    while (v6 != v7);
  }
  return (id)(id)CFMakeCollectable(v4);
}

- (id)webSelectionRects
{
  _BYTE *v3;
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v5 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "-[WKContentView(WKInteraction) webSelectionRects]";
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v6, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19783CA68);
  }
  v3 = (_BYTE *)*((_QWORD *)self->_page.m_ptr + 4);
  if (v3[560] && v3[688] && !v3[233])
    return -[WKContentView webSelectionRectsForSelectionGeometries:](self, "webSelectionRectsForSelectionGeometries:", v3 + 624);
  else
    return 0;
}

- (ObjectIdentifierGeneric<WebKit::TapIdentifierType,)nextTapIdentifier
{
  unint64_t IdentifierInternal;

  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  self->_latestTapID.m_identifier = IdentifierInternal;
  return (ObjectIdentifierGeneric<WebKit::TapIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>)IdentifierInternal;
}

- (void)_highlightLongPressRecognized:(id)a3
{
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  uint64_t v9;
  WebPageProxy *m_ptr;
  ObjectIdentifierGeneric<WebKit::TapIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long> v11;
  uint64_t v12;
  uint64_t v13;
  CGPoint v14;
  uint64_t *v15[2];
  unint64_t m_identifier;

  -[WKContentView _resetIsDoubleTapPending](self, "_resetIsDoubleTapPending");
  objc_msgSend(a3, "startPoint");
  v6 = v5;
  v8 = v7;
  v14.x = v5;
  v14.y = v7;
  *(CGPoint *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[16] = v14;
  v9 = objc_msgSend(a3, "state");
  switch(v9)
  {
    case 4:
      -[WKContentView _cancelInteraction](self, "_cancelInteraction");
      BYTE6(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
      break;
    case 3:
      if (BYTE6(self->_dataListTextSuggestionsInputView.m_ptr) && self->_positionInformation.isElement)
      {
        -[WKContentView _attemptSyntheticClickAtLocation:modifierFlags:](self, "_attemptSyntheticClickAtLocation:modifierFlags:", objc_msgSend(a3, "modifierFlags"), v6, v8);
        -[WKContentView _finishInteraction](self, "_finishInteraction");
      }
      else
      {
        -[WKContentView _cancelInteraction](self, "_cancelInteraction");
      }
      BYTE6(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
      break;
    case 1:
      BYTE6(self->_dataListTextSuggestionsInputView.m_ptr) = 1;
      cancelPotentialTapIfNecessary(self);
      m_ptr = self->_page.m_ptr;
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v13, &v14);
      v11.m_identifier = (unint64_t)-[WKContentView nextTapIdentifier](self, "nextTapIdentifier");
      v15[1] = &v13;
      m_identifier = v11.m_identifier;
      v12 = *((_QWORD *)m_ptr + 26);
      v15[0] = (uint64_t *)&m_identifier;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::TapHighlightAtPosition>(v12, v15, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
      BYTE2(self->_dataListTextSuggestionsInputView.m_ptr) = 1;
      break;
  }
}

- (void)_doubleTapRecognizedForDoubleClick:(id)a3
{
  WebPageProxy *m_ptr;
  CGFloat v6;
  CGFloat v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  CGPoint v11;
  _BYTE v12[8];
  _QWORD v13[3];
  uint64_t v14;
  char v15;

  m_ptr = self->_page.m_ptr;
  objc_msgSend(a3, "locationInView:", self);
  v11.x = v6;
  v11.y = v7;
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)v12, &v11);
  v8 = objc_msgSend(a3, "modifierFlags");
  v9 = *(_QWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[32];
  v15 = (v8 >> 12) & 0x10 | (v8 >> 17) & 0xF;
  v10 = *((_QWORD *)m_ptr + 26);
  v13[0] = v12;
  v13[1] = &v15;
  v13[2] = &v14;
  v14 = v9;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HandleDoubleTapForDoubleClickAtPoint>(v10, (uint64_t)v13, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)_twoFingerSingleTapGestureRecognized:(id)a3
{
  WebPageProxy *m_ptr;
  CGFloat v6;
  CGFloat v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  char v15;
  ObjectIdentifierGeneric<WebKit::TapIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long> v16;
  uint64_t v17;
  CGPoint v18;
  float v19[2];
  uint64_t v20;
  _QWORD v21[3];
  unint64_t m_identifier;
  char v23;

  BYTE2(self->_dataListTextSuggestionsInputView.m_ptr) = 1;
  HIBYTE(self->_dataListTextSuggestions.m_ptr) = 1;
  m_ptr = self->_page.m_ptr;
  objc_msgSend(a3, "locationInView:", self);
  v18.x = v6;
  v18.y = v7;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v19, &v18);
  v8 = roundf(v19[0]);
  v9 = 0x7FFFFFFFLL;
  v10 = (int)v8;
  if (v8 <= -2147500000.0)
    v10 = 0x80000000;
  if (v8 < 2147500000.0)
    v9 = v10;
  v11 = roundf(v19[1]);
  v12 = 0x7FFFFFFF00000000;
  v13 = 0x8000000000000000;
  if (v11 > -2147500000.0)
    v13 = (unint64_t)(int)v11 << 32;
  if (v11 < 2147500000.0)
    v12 = v13;
  v20 = v12 | v9;
  v14 = objc_msgSend(a3, "modifierFlags");
  v15 = (v14 >> 12) & 0x10 | (v14 >> 17) & 7 | 8;
  v16.m_identifier = (unint64_t)-[WKContentView nextTapIdentifier](self, "nextTapIdentifier");
  v23 = v15;
  m_identifier = v16.m_identifier;
  v17 = *((_QWORD *)m_ptr + 26);
  v21[0] = &v20;
  v21[1] = &v23;
  v21[2] = &m_identifier;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HandleTwoFingerTapAtPoint>(v17, (uint64_t)v21, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)_longPressRecognized:(id)a3
{
  WebPageProxy *m_ptr;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char v10;

  -[WKContentView _resetIsDoubleTapPending](self, "_resetIsDoubleTapPending");
  -[WKContentView _cancelTouchEventGestureRecognizer](self, "_cancelTouchEventGestureRecognizer");
  m_ptr = self->_page.m_ptr;
  v6 = *((_QWORD *)m_ptr + 26);
  v10 = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidRecognizeLongPress>(v6, (uint64_t)&v10, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
  objc_msgSend(a3, "startPoint");
  *(_QWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[16] = v7;
  *(_QWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[24] = v8;
  if (objc_msgSend(a3, "state") == 1)
  {
    v9 = -[WKContentView _actionForLongPress](self, "_actionForLongPress");
    if (v9)
    {
      -[WKContentView performSelector:](self, "performSelector:", v9);
      -[WKContentView _cancelLongPressGestureRecognizer](self, "_cancelLongPressGestureRecognizer");
    }
  }
}

- (void)_endPotentialTapAndEnableDoubleTapGesturesIfNecessary
{
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  WKContentView *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(-[WKContentView webView](self, "webView"), "_allowsDoubleTapGestures"))
  {
    v3 = qword_1ECE71A00;
    if (os_log_type_enabled((os_log_t)qword_1ECE71A00, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 744);
      v7 = 134218240;
      v8 = self;
      v9 = 2048;
      v10 = v4;
      _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "ending potential tap - double taps are back. (%p, pageProxyID=%llu)", (uint8_t *)&v7, 0x16u);
    }
    -[WKContentView _setDoubleTapGesturesEnabled:](self, "_setDoubleTapGesturesEnabled:", 1);
  }
  v5 = qword_1ECE71A00;
  if (os_log_type_enabled((os_log_t)qword_1ECE71A00, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 744);
    v7 = 134218240;
    v8 = self;
    v9 = 2048;
    v10 = v6;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "Ending potential tap. (%p, pageProxyID=%llu)", (uint8_t *)&v7, 0x16u);
  }
  BYTE4(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
}

- (void)_singleTapIdentified:(id)a3
{
  uint64_t v4;
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  int BoolValueForKey;
  char v9;
  NSObject *v10;
  uint64_t v11;
  WebPageProxy *m_ptr;
  CGPoint v13;
  uint8_t buf[4];
  WKContentView *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a3, "locationInView:", self);
  if (!-[WKContentView _handleTapOverInteractiveControl:](self, "_handleTapOverInteractiveControl:", v4, v5))
  {
    -[WKContentView _resetIsDoubleTapPending](self, "_resetIsDoubleTapPending");
    objc_msgSend(self->_inputPeripheral.m_ptr, "setSingleTapShouldEndEditing:", objc_msgSend(self->_inputPeripheral.m_ptr, "isEditing"));
    v7 = *((_QWORD *)self->_page.m_ptr + 28);
    {
      WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fasterClicksEnabledKey(void)::key, v6);
    v9 = BoolValueForKey;
    if (BoolValueForKey)
    {
      v10 = qword_1ECE71A00;
      if (os_log_type_enabled((os_log_t)qword_1ECE71A00, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 744);
        *(_DWORD *)buf = 134218240;
        v15 = self;
        v16 = 2048;
        v17 = v11;
        _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "Single tap identified. Request details on potential zoom. (%p, pageProxyID=%llu)", buf, 0x16u);
      }
    }
    m_ptr = self->_page.m_ptr;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)buf, &v13);
    WebKit::WebPageProxy::potentialTapAtPosition(m_ptr, (uint64_t *)buf, v9, -[WKContentView nextTapIdentifier](self, "nextTapIdentifier"));
    BYTE4(self->_dataListTextSuggestionsInputView.m_ptr) = 1;
    BYTE2(self->_dataListTextSuggestionsInputView.m_ptr) = 1;
    HIBYTE(self->_dataListTextSuggestions.m_ptr) = objc_msgSend(self->_doubleTapGestureRecognizer.m_ptr, "isEnabled") ^ 1;
  }
}

- (void)_singleTapDidReset:(id)a3
{
  void *v4;
  int v5;
  WebPageProxy *m_ptr;
  int *v7;
  int v8;

  cancelPotentialTapIfNecessary(self);
  v4 = (void *)objc_msgSend(self->_singleTapGestureRecognizer.m_ptr, "lastActiveTouchIdentifier");
  if (v4)
  {
    v5 = objc_msgSend(v4, "unsignedIntValue");
    if (LODWORD(self->_revealFocusedElementDeferrer.m_ptr) != v5)
    {
      m_ptr = self->_page.m_ptr;
      v8 = v5;
      v7 = &v8;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::TouchWithIdentifierWasRemoved>(*((_QWORD *)m_ptr + 26), &v7, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
    }
  }
  if (!BYTE2(self->_dataListTextSuggestionsInputView.m_ptr))
    -[WKContentView _fadeTapHighlightViewIfNeeded](self, "_fadeTapHighlightViewIfNeeded");
}

- (void)_doubleTapDidFail:(id)a3
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  WKContentView *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71A00;
  if (os_log_type_enabled((os_log_t)qword_1ECE71A00, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 744);
    v6 = 134218240;
    v7 = self;
    v8 = 2048;
    v9 = v5;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "Double tap was not recognized. (%p, pageProxyID=%llu)", (uint8_t *)&v6, 0x16u);
  }
}

- (void)_commitPotentialTapFailed
{
  WebPageProxy *m_ptr;
  int *v4;
  int v5;

  m_ptr = self->_page.m_ptr;
  v5 = (int)self->_revealFocusedElementDeferrer.m_ptr;
  v4 = &v5;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::TouchWithIdentifierWasRemoved>(*((_QWORD *)m_ptr + 26), &v4, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
  LODWORD(self->_revealFocusedElementDeferrer.m_ptr) = 0;
  -[WKContentView _cancelInteraction](self, "_cancelInteraction");
  -[WKContentView stopDeferringInputViewUpdates:](self, "stopDeferringInputViewUpdates:", 2);
}

- (void)_didNotHandleTapAsClick:(const IntPoint *)a3
{
  SmartMagnificationController *value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  -[WKContentView stopDeferringInputViewUpdates:](self, "stopDeferringInputViewUpdates:", 2);
  if (BYTE5(self->_dataListTextSuggestionsInputView.m_ptr))
  {
    value = self->_smartMagnificationController.__ptr_.__value_;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v7, (const CGPoint *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[16]);
    v9 = v7;
    v5 = *((_QWORD *)value + 2);
    v6 = *(_QWORD *)(v5 + 208);
    v8 = &v9;
    WebKit::AuxiliaryProcessProxy::send<Messages::ViewGestureGeometryCollector::CollectGeometryForSmartMagnificationGesture>(v6, (int **)&v8, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 1896), 0);
    BYTE5(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
  }
}

- (void)_didHandleTapAsHover
{
  -[WKContentView stopDeferringInputViewUpdates:](self, "stopDeferringInputViewUpdates:", 2);
}

- (void)_didCompleteSyntheticClick
{
  WebPageProxy *m_ptr;
  NSObject *v4;
  uint64_t v5;
  int v6;
  _BYTE buf[12];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  m_ptr = self->_page.m_ptr;
  v6 = (int)self->_revealFocusedElementDeferrer.m_ptr;
  *(_QWORD *)buf = &v6;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::TouchWithIdentifierWasRemoved>(*((_QWORD *)m_ptr + 26), (_DWORD **)buf, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
  LODWORD(self->_revealFocusedElementDeferrer.m_ptr) = 0;
  v4 = qword_1ECE71A00;
  if (os_log_type_enabled((os_log_t)qword_1ECE71A00, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 744);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = self;
    v8 = 2048;
    v9 = v5;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "Synthetic click completed. (%p, pageProxyID=%llu)", buf, 0x16u);
  }
  -[WKContentView stopDeferringInputViewUpdates:](self, "stopDeferringInputViewUpdates:", 2);
}

- (void)_singleTapRecognized:(id)a3
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  int v10;
  WebPageProxy *m_ptr;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  _BYTE buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (BYTE4(self->_dataListTextSuggestionsInputView.m_ptr))
  {
    if ((-[WKContentView isFirstResponder](self, "isFirstResponder") & 1) == 0)
    {
      -[WKContentView startDeferringInputViewUpdates:](self, "startDeferringInputViewUpdates:", 2);
      -[WKContentView becomeFirstResponder](self, "becomeFirstResponder");
    }
    objc_msgSend(a3, "locationInView:", self);
    *(_QWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[16] = v5;
    *(_QWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[24] = v6;
    -[WKContentView _endPotentialTapAndEnableDoubleTapGesturesIfNecessary](self, "_endPotentialTapAndEnableDoubleTapGesturesIfNecessary");
    if (HIBYTE(self->_dataListTextSuggestionsInputView.m_ptr))
    {
      -[WKContentView _showTapHighlight](self, "_showTapHighlight");
      HIBYTE(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
    }
    if (objc_msgSend(self->_inputPeripheral.m_ptr, "singleTapShouldEndEditing"))
      objc_msgSend(self->_inputPeripheral.m_ptr, "endEditing");
    v7 = qword_1ECE71A00;
    if (os_log_type_enabled((os_log_t)qword_1ECE71A00, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 744);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = self;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v8;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "Single tap recognized - commit potential tap (%p, pageProxyID=%llu)", buf, 0x16u);
    }
    v9 = (void *)objc_msgSend(self->_singleTapGestureRecognizer.m_ptr, "lastActiveTouchIdentifier");
    if (v9)
    {
      v10 = objc_msgSend(v9, "unsignedIntValue");
      LODWORD(self->_revealFocusedElementDeferrer.m_ptr) = v10;
    }
    else
    {
      v10 = 1;
    }
    m_ptr = self->_page.m_ptr;
    v12 = objc_msgSend(a3, "modifierFlags");
    v13 = *(_QWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[32];
    v17 = (v12 >> 12) & 0x10 | (v12 >> 17) & 0xF;
    v16 = v13;
    v15 = v10;
    v14 = *((_QWORD *)m_ptr + 26);
    *(_QWORD *)buf = &v17;
    *(_QWORD *)&buf[8] = &v16;
    *(_QWORD *)&buf[16] = &v15;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CommitPotentialTap>(v14, (char **)buf, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
    if (!HIBYTE(self->_dataListTextSuggestions.m_ptr))
      -[WKContentView _finishInteraction](self, "_finishInteraction");
    if ((objc_msgSend(self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr, "interactableItemExistsAtPoint:", *(double *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[16], *(double *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[24]) & 1) == 0)objc_msgSend(self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr, "resetSelection");
  }
}

- (void)_doubleTapRecognized:(id)a3
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SmartMagnificationController *value;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _BYTE buf[22];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = qword_1ECE71A00;
  if (os_log_type_enabled((os_log_t)qword_1ECE71A00, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 744);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = self;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v6;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "Identified a double tap (%p, pageProxyID=%llu)", buf, 0x16u);
  }
  -[WKContentView _resetIsDoubleTapPending](self, "_resetIsDoubleTapPending");
  objc_msgSend(a3, "locationInView:", self);
  *(_QWORD *)buf = v7;
  *(_QWORD *)&buf[8] = v8;
  *(_OWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[16] = *(_OWORD *)buf;
  value = self->_smartMagnificationController.__ptr_.__value_;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v12, (const CGPoint *)buf);
  v14 = v12;
  v10 = *((_QWORD *)value + 2);
  v11 = *(_QWORD *)(v10 + 208);
  v13 = &v14;
  WebKit::AuxiliaryProcessProxy::send<Messages::ViewGestureGeometryCollector::CollectGeometryForSmartMagnificationGesture>(v11, (int **)&v13, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 1896), 0);
}

- (void)_nonBlockingDoubleTapRecognized:(id)a3
{
  uint64_t v4;
  uint64_t v5;

  objc_msgSend(a3, "locationInView:", self);
  *(_QWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[16] = v4;
  *(_QWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[24] = v5;
  BYTE5(self->_dataListTextSuggestionsInputView.m_ptr) = 1;
}

- (void)_twoFingerDoubleTapRecognized:(id)a3
{
  CGFloat v5;
  CGFloat v6;
  SmartMagnificationController *value;
  void *v8;
  uint64_t v9;
  CGPoint v10;
  uint64_t v11;

  -[WKContentView _resetIsDoubleTapPending](self, "_resetIsDoubleTapPending");
  objc_msgSend(a3, "locationInView:", self);
  v10.x = v5;
  v10.y = v6;
  *(CGPoint *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[16] = v10;
  value = self->_smartMagnificationController.__ptr_.__value_;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v9, &v10);
  v11 = v9;
  v8 = (void *)*((_QWORD *)value + 3);
  WebCore::FloatPoint::operator CGPoint();
  objc_msgSend(v8, "_zoomOutWithOrigin:");
}

- (void)_attemptSyntheticClickAtLocation:(CGPoint)a3 modifierFlags:(int64_t)a4
{
  WebPageProxy *m_ptr;
  float v7;
  CGPoint v8;

  v8 = a3;
  if ((-[WKContentView isFirstResponder](self, "isFirstResponder") & 1) == 0)
    -[WKContentView becomeFirstResponder](self, "becomeFirstResponder");
  objc_msgSend(self->_inputPeripheral.m_ptr, "endEditing");
  m_ptr = self->_page.m_ptr;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v7, &v8);
  WebKit::WebPageProxy::attemptSyntheticClick((uint64_t)m_ptr, &v7, ((unint64_t)a4 >> 12) & 0x10 | ((unint64_t)a4 >> 17) & 0xF, *(_QWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[32]);
}

- (void)pasteWithCompletionHandler:(id)a3
{
  WebPageProxy *m_ptr;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = 0;
  v5 = _Block_copy(a3);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E3507590;
  v6[1] = v5;
  v11 = v6;
  WebKit::WebPageProxy::executeEditCommand((uint64_t)m_ptr, &v13, (uint64_t *)&v12, (uint64_t *)&v11);
  v7 = (uint64_t)v11;
  v11 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  _Block_release(0);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
}

- (void)clearSelection
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v3 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = "-[WKContentView(WKInteraction) clearSelection]";
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v4, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19783DC9CLL);
  }
  -[WKContentView _internalClearSelection](self, "_internalClearSelection");
}

- (void)_internalClearSelection
{
  WebPageProxy *m_ptr;
  __int128 v4;
  char v5;

  -[WKContentView _elementDidBlur](self, "_elementDidBlur");
  m_ptr = self->_page.m_ptr;
  LOBYTE(v4) = 0;
  v5 = 0;
  WebKit::WebPageProxy::clearSelection((uint64_t)m_ptr, &v4);
}

- (void)_invalidateCurrentPositionInformation
{
  void *v3;
  _BYTE v4[11];
  int v5;
  char v6;
  int v7;
  __int16 v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  _BYTE v15[56];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;
  char v30;
  __int16 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  char v35;
  char v36;
  char v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  BYTE1(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
  memset(v4, 0, sizeof(v4));
  v5 = 1;
  v6 = 1;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13[0] = 0;
  *(_QWORD *)((char *)v13 + 6) = 0;
  v13[2] = 0;
  WTF::URL::URL((WTF::URL *)&v14);
  WTF::URL::URL((WTF::URL *)v15);
  v21 = 0;
  v22 = 0;
  *(_OWORD *)&v15[40] = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 1065353216;
  v31 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0u;
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v32 = 0u;
  v33 = 0u;
  WebKit::InteractionInformationAtPosition::operator=((uint64_t)&self->_positionInformation, (uint64_t)v4);
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v4, v3);
}

- (void)_positionInformationDidChange:(const void *)a3
{
  unsigned int *p_m_capacity;
  void *m_ptr;
  void *v7;
  _QWORD v8[82];

  v8[81] = *MEMORY[0x1E0C80C00];
  p_m_capacity = &self->_lastSelectionDrawingInfo.selectionGeometries.m_capacity;
  if (LOBYTE(self->_lastSelectionDrawingInfo.selectionClipRect.m_size.m_width)
    && WebKit::InteractionInformationRequest::isValidForRequest((int32x2_t *)a3, (const InteractionInformationRequest *)p_m_capacity, 0))
  {
    *((_BYTE *)p_m_capacity + 16) = 0;
  }
  BYTE3(self->_dataListSuggestionsControl.m_weakReference) = 0;
  WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v8, (const WebKit::InteractionInformationAtPosition *)a3);
  WebKit::InteractionInformationAtPosition::mergeCompatibleOptionalInformation((uint64_t)v8, (const WebKit::InteractionInformationAtPosition *)&self->_positionInformation);
  WebKit::InteractionInformationAtPosition::operator=((uint64_t)&self->_positionInformation, (uint64_t)v8);
  BYTE1(self->_dataListTextSuggestionsInputView.m_ptr) = self->_positionInformation.canBeValid;
  m_ptr = self->_actionSheetAssistant.m_ptr;
  if (m_ptr)
    objc_msgSend(m_ptr, "updateSheetPosition");
  -[WKContentView _invokeAndRemovePendingHandlersValidForCurrentPositionInformation](self, "_invokeAndRemovePendingHandlersValidForCurrentPositionInformation");
  WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v8, v7);
}

- (void)_willStartScrollingOrZooming
{
  objc_msgSend(self->_textInteractionWrapper.m_ptr, "willStartScrollingOrZooming");
  *((_BYTE *)self->_page.m_ptr + 402) = 1;
}

- (void)scrollViewWillStartPanOrPinchGesture
{
  WebPageProxy *m_ptr;
  _DWORD *v4;

  m_ptr = self->_page.m_ptr;
  v4 = (_DWORD *)*((_QWORD *)m_ptr + 102);
  *((_QWORD *)m_ptr + 102) = 0;
  if (v4)
    WTF::RefCounted<WebCore::ValidationBubble>::deref(v4);
  objc_msgSend((id)self->_positionInformationCallbackDepth, "willStartInteractiveScroll");
  self->_touchEventsCanPreventNativeGestures = 0;
}

- (BOOL)_elementTypeRequiresAccessoryView:(unsigned __int8)a3
{
  uint64_t v3;
  uint64_t v4;

  if ((a3 - 1) < 0xA || a3 == 14)
    return PAL::currentUserInterfaceIdiomIsSmallScreen((PAL *)self);
  if (a3 == 16
    && (self = (WKContentView *)-[WKContentView _shouldUseContextMenusForFormControls](self, "_shouldUseContextMenusForFormControls", v3, v4), (self & 1) == 0))
  {
    return PAL::currentUserInterfaceIdiomIsSmallScreen((PAL *)self);
  }
  else
  {
    return 0;
  }
}

- (BOOL)requiresAccessoryView
{
  if ((objc_msgSend(self->_formInputSession.m_ptr, "accessoryViewShouldNotShow") & 1) != 0)
    return 0;
  if (objc_msgSend(self->_formInputSession.m_ptr, "customInputAccessoryView"))
    return 1;
  return -[WKContentView _elementTypeRequiresAccessoryView:](self, "_elementTypeRequiresAccessoryView:", self->_anon_938[113]);
}

- (id)inputAssistantItem
{
  return (id)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "inputAssistantItem");
}

- (UITextInputAssistantItem)inputAssistantItemForWebView
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)WKContentView;
  return (UITextInputAssistantItem *)-[WKContentView inputAssistantItem](&v3, sel_inputAssistantItem);
}

- (id)inputAccessoryView
{
  return (id)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "inputAccessoryView");
}

- (UIView)inputAccessoryViewForWebView
{
  UIView *result;

  if (!-[WKContentView requiresAccessoryView](self, "requiresAccessoryView"))
    return 0;
  result = (UIView *)objc_msgSend(self->_formInputSession.m_ptr, "customInputAccessoryView");
  if (!result)
    return (UIView *)-[WKContentView formAccessoryView](self, "formAccessoryView");
  return result;
}

- (id)supportedPasteboardTypesForCurrentSelection
{
  uint64_t v2;
  id result;
  id v4;

  v2 = *((_QWORD *)self->_page.m_ptr + 4);
  if (*(_BYTE *)(v2 + 233))
    return 0;
  if (!*(_BYTE *)(v2 + 238))
    return WebKit::supportedPlainTextPasteboardTypes((WebKit *)self);
  if (byte_1EE341A54 == 1)
    return (id)qword_1EE341A90;
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(v4, "addObjectsFromArray:", WebKit::supportedRichTextPasteboardTypesForPasteConfiguration((WebKit *)objc_msgSend(v4, "addObject:", *MEMORY[0x1E0DD21E8])));
  result = v4;
  qword_1EE341A90 = (uint64_t)v4;
  byte_1EE341A54 = 1;
  return result;
}

- (void)captureTextFromCamera:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_captureTextFromCamera_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "captureTextFromCamera:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_captureTextFromCamera_, a3);
}

- (void)useSelectionForFind:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_useSelectionForFind_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "useSelectionForFind:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_useSelectionForFind_, a3);
}

- (void)findSelected:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_findSelected_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "findSelected:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_findSelected_, a3);
}

- (void)_findSelected:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__findSelected_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_findSelected:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__findSelected_, a3);
}

- (void)addShortcut:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_addShortcut_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "addShortcut:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_addShortcut_, a3);
}

- (void)_addShortcut:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__addShortcut_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_addShortcut:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__addShortcut_, a3);
}

- (void)define:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_define_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "define:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_define_, a3);
}

- (void)_define:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__define_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_define:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__define_, a3);
}

- (void)lookup:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_lookup_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "lookup:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_lookup_, a3);
}

- (void)_lookup:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__lookup_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_lookup:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__lookup_, a3);
}

- (void)translate:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_translate_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "translate:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_translate_, a3);
}

- (void)_translate:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__translate_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_translate:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__translate_, a3);
}

- (void)promptForReplace:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_promptForReplace_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "promptForReplace:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_promptForReplace_, a3);
}

- (void)_promptForReplace:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__promptForReplace_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_promptForReplace:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__promptForReplace_, a3);
}

- (void)share:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_share_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "share:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_share_, a3);
}

- (void)_share:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__share_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_share:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__share_, a3);
}

- (void)transliterateChinese:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_transliterateChinese_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "transliterateChinese:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_transliterateChinese_, a3);
}

- (void)_transliterateChinese:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__transliterateChinese_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_transliterateChinese:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__transliterateChinese_, a3);
}

- (void)_nextAccessoryTab:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__nextAccessoryTab_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_nextAccessoryTab:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__nextAccessoryTab_, a3);
}

- (void)_previousAccessoryTab:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__previousAccessoryTab_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_previousAccessoryTab:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__previousAccessoryTab_, a3);
}

- (void)copy:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_copy_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "copy:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_copy_, a3);
}

- (void)cut:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_cut_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "cut:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_cut_, a3);
}

- (void)paste:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_paste_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "paste:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_paste_, a3);
}

- (void)replace:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_replace_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "replace:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_replace_, a3);
}

- (void)select:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_select_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "select:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_select_, a3);
}

- (void)selectAll:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_selectAll_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "selectAll:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_selectAll_, a3);
}

- (void)toggleBoldface:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_toggleBoldface_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "toggleBoldface:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_toggleBoldface_, a3);
}

- (void)toggleItalics:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_toggleItalics_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "toggleItalics:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_toggleItalics_, a3);
}

- (void)toggleUnderline:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_toggleUnderline_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "toggleUnderline:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_toggleUnderline_, a3);
}

- (void)increaseSize:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_increaseSize_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "increaseSize:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_increaseSize_, a3);
}

- (void)decreaseSize:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_decreaseSize_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "decreaseSize:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_decreaseSize_, a3);
}

- (void)pasteAndMatchStyle:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_pasteAndMatchStyle_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "pasteAndMatchStyle:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_pasteAndMatchStyle_, a3);
}

- (void)makeTextWritingDirectionNatural:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_makeTextWritingDirectionNatural_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "makeTextWritingDirectionNatural:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_makeTextWritingDirectionNatural_, a3);
}

- (void)makeTextWritingDirectionLeftToRight:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_makeTextWritingDirectionLeftToRight_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "makeTextWritingDirectionLeftToRight:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_makeTextWritingDirectionLeftToRight_, a3);
}

- (void)makeTextWritingDirectionRightToLeft:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel_makeTextWritingDirectionRightToLeft_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "makeTextWritingDirectionRightToLeft:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel_makeTextWritingDirectionRightToLeft_, a3);
}

- (void)_alignCenter:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__alignCenter_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_alignCenter:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__alignCenter_, a3);
}

- (void)_alignJustified:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__alignJustified_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_alignJustified:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__alignJustified_, a3);
}

- (void)_alignLeft:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__alignLeft_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_alignLeft:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__alignLeft_, a3);
}

- (void)_alignRight:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__alignRight_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_alignRight:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__alignRight_, a3);
}

- (void)_indent:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__indent_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_indent:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__indent_, a3);
}

- (void)_outdent:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__outdent_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_outdent:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__outdent_, a3);
}

- (void)_toggleStrikeThrough:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__toggleStrikeThrough_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_toggleStrikeThrough:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__toggleStrikeThrough_, a3);
}

- (void)_insertOrderedList:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__insertOrderedList_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_insertOrderedList:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__insertOrderedList_, a3);
}

- (void)_insertUnorderedList:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__insertUnorderedList_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_insertUnorderedList:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__insertUnorderedList_, a3);
}

- (void)_insertNestedOrderedList:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__insertNestedOrderedList_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_insertNestedOrderedList:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__insertNestedOrderedList_, a3);
}

- (void)_insertNestedUnorderedList:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__insertNestedUnorderedList_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_insertNestedUnorderedList:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__insertNestedUnorderedList_, a3);
}

- (void)_increaseListLevel:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__increaseListLevel_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_increaseListLevel:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__increaseListLevel_, a3);
}

- (void)_decreaseListLevel:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__decreaseListLevel_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_decreaseListLevel:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__decreaseListLevel_, a3);
}

- (void)_changeListType:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__changeListType_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_changeListType:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__changeListType_, a3);
}

- (void)_pasteAsQuotation:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__pasteAsQuotation_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_pasteAsQuotation:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__pasteAsQuotation_, a3);
}

- (void)_pasteAndMatchStyle:(id)a3
{
  -[WKContentView _willPerformAction:sender:](self, "_willPerformAction:sender:", sel__pasteAndMatchStyle_, a3);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_pasteAndMatchStyle:", a3);
  -[WKContentView _didPerformAction:sender:](self, "_didPerformAction:sender:", sel__pasteAndMatchStyle_, a3);
}

- (void)_lookupForWebView:(id)a3
{
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v5 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "-[WKContentView(WKInteraction) _lookupForWebView:]";
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v6, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19783F630);
  }
  -[WKContentView lookupForWebView:](self, "lookupForWebView:", a3);
}

- (void)lookupForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  m_ptr = self->_page.m_ptr;
  CFRetain(self);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E35075B8;
  v5[1] = self;
  v7 = v5;
  WebKit::WebPageProxy::getSelectionContext((uint64_t)m_ptr, (uint64_t *)&v7);
  v6 = (uint64_t)v7;
  v7 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

- (void)_shareForWebView:(id)a3
{
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v5 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "-[WKContentView(WKInteraction) _shareForWebView:]";
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v6, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19783F7B0);
  }
  -[WKContentView shareForWebView:](self, "shareForWebView:", a3);
}

- (void)shareForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (self)
    CFRetain(self);
  m_ptr = self->_page.m_ptr;
  CFRetain(self);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E35075E0;
  v5[1] = self;
  v7 = v5;
  v8 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSelectionOrContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(*((_QWORD *)m_ptr + 26), (uint64_t)&v8, (uint64_t *)&v7, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0, 1);
  v6 = (uint64_t)v7;
  v7 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  CFRelease(self);
}

- (void)_translateForWebView:(id)a3
{
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v5 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "-[WKContentView(WKInteraction) _translateForWebView:]";
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v6, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19783F94CLL);
  }
  -[WKContentView translateForWebView:](self, "translateForWebView:", a3);
}

- (void)translateForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  uint64_t v4;
  uint64_t v5;
  id location;
  uint64_t v7;
  char v8;

  m_ptr = self->_page.m_ptr;
  location = 0;
  objc_initWeak(&location, self);
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E3507608;
  *(_QWORD *)(v4 + 8) = 0;
  objc_moveWeak((id *)(v4 + 8), &location);
  v7 = v4;
  v8 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSelectionOrContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(*((_QWORD *)m_ptr + 26), (uint64_t)&v8, &v7, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0, 1);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  objc_destroyWeak(&location);
}

- (void)_addShortcutForWebView:(id)a3
{
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v5 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "-[WKContentView(WKInteraction) _addShortcutForWebView:]";
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v6, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19783FAF0);
  }
  -[WKContentView addShortcutForWebView:](self, "addShortcutForWebView:", a3);
}

- (void)addShortcutForWebView:(id)a3
{
  void *m_ptr;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 688))
  {
    m_ptr = self->_textInteractionWrapper.m_ptr;
    v5 = -[WKContentView selectedText](self, "selectedText", a3);
    v6 = *((_QWORD *)self->_page.m_ptr + 4);
    if (*(_BYTE *)(v6 + 688))
    {
      if (*(_DWORD *)(v6 + 636))
      {
        v7 = v5;
        v9 = WebCore::SelectionGeometry::rect(*(WebCore::SelectionGeometry **)(v6 + 624));
        v10 = v8;
        WebCore::IntRect::operator CGRect();
        objc_msgSend(m_ptr, "showTextServiceFor:fromRect:", v7, v9, v10);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(0xC471u);
  }
}

- (id)selectedText
{
  uint64_t v2;

  v2 = *((_QWORD *)self->_page.m_ptr + 4);
  if (!*(_BYTE *)(v2 + 560))
    return 0;
  if (*(_QWORD *)(v2 + 304))
    return (id)WTF::StringImpl::operator NSString *();
  return &stru_1E351F1B8;
}

- (id)alternativesForSelectedText
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v2 = *((_QWORD *)self->_page.m_ptr + 4);
  if (!*(_BYTE *)(v2 + 560))
    return 0;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(v2 + 340));
  v5 = *(unsigned int *)(v2 + 340);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)(v2 + 328);
    v7 = 8 * v5;
    do
    {
      v8 = (void *)WebKit::WebPageProxy::platformDictationAlternatives((uint64_t)self->_page.m_ptr, *v6);
      v9 = v8;
      if (v8)
        CFRetain(v8);
      if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
      {
        v10 = (id)CFMakeCollectable(v9);
      }
      else
      {
        v10 = (id)objc_msgSend(v9, "_nsTextAlternative");
        if (v9)
          CFRelease(v9);
      }
      if (v10)
        objc_msgSend(v4, "addObject:", v10);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return (id)(id)CFMakeCollectable(v4);
}

- (void)makeTextWritingDirectionNaturalForWebView:(id)a3
{
  WebKit::WebPageProxy::setBaseWritingDirection((uint64_t)self->_page.m_ptr, 0);
}

- (void)makeTextWritingDirectionLeftToRightForWebView:(id)a3
{
  WebKit::WebPageProxy::setBaseWritingDirection((uint64_t)self->_page.m_ptr, 1);
}

- (void)makeTextWritingDirectionRightToLeftForWebView:(id)a3
{
  WebKit::WebPageProxy::setBaseWritingDirection((uint64_t)self->_page.m_ptr, 2);
}

- (BOOL)isReplaceAllowed
{
  uint64_t v2;

  v2 = *((_QWORD *)self->_page.m_ptr + 4);
  return *(_BYTE *)(v2 + 560) && *(_BYTE *)(v2 + 344) != 0;
}

- (void)replaceText:(id)a3 withText:(id)a4
{
  WebPageProxy *m_ptr;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t *v12[2];

  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  m_ptr = self->_page.m_ptr;
  MEMORY[0x19AEABCC8](&v11, a3);
  MEMORY[0x19AEABCC8](&v10, a4);
  v6 = *((_QWORD *)m_ptr + 26);
  v12[0] = (uint64_t *)&v11;
  v12[1] = (uint64_t *)&v10;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReplaceSelectedText>(v6, v12, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
}

- (void)_promptForReplaceForWebView:(id)a3
{
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v5 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "-[WKContentView(WKInteraction) _promptForReplaceForWebView:]";
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v6, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19783FF68);
  }
  -[WKContentView promptForReplaceForWebView:](self, "promptForReplaceForWebView:", a3);
}

- (void)promptForReplaceForWebView:(id)a3
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)self->_page.m_ptr + 4);
  if (*(_BYTE *)(v3 + 560))
  {
    v4 = *(_QWORD *)(v3 + 304);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 4))
        objc_msgSend(self->_textInteractionWrapper.m_ptr, "scheduleReplacementsForText:", WTF::StringImpl::operator NSString *());
    }
  }
}

- (void)_transliterateChineseForWebView:(id)a3
{
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v5 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "-[WKContentView(WKInteraction) _transliterateChineseForWebView:]";
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v6, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x1978400A8);
  }
  -[WKContentView transliterateChineseForWebView:](self, "transliterateChineseForWebView:", a3);
}

- (void)transliterateChineseForWebView:(id)a3
{
  uint64_t v3;
  void *m_ptr;
  const __CFString *v5;

  v3 = *((_QWORD *)self->_page.m_ptr + 4);
  if (*(_BYTE *)(v3 + 560))
  {
    m_ptr = self->_textInteractionWrapper.m_ptr;
    if (*(_QWORD *)(v3 + 304))
      v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E351F1B8;
    objc_msgSend(m_ptr, "scheduleChineseTransliterationForText:", v5);
  }
}

- (void)replaceForWebView:(id)a3
{
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
    objc_msgSend(objc_loadWeak((id *)&self->_anon_fa8[24]), "textInput:deferReplaceTextActionToSystem:", -[WKContentView asBETextInput](self, "asBETextInput"), a3);
  else
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA6E8], "sharedInstance"), "replaceText:", a3);
}

- (void)_insertOrderedListForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)_insertUnorderedListForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)_insertNestedOrderedListForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)_insertNestedUnorderedListForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)_indentForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)_outdentForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)_alignLeftForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)_alignRightForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)_alignCenterForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)_alignJustifiedForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)_pasteAndMatchStyleForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)_increaseListLevelForWebView:(id)a3
{
  WebKit::WebPageProxy::increaseListLevel((uint64_t)self->_page.m_ptr);
}

- (void)_decreaseListLevelForWebView:(id)a3
{
  WebKit::WebPageProxy::decreaseListLevel((uint64_t)self->_page.m_ptr);
}

- (void)_changeListTypeForWebView:(id)a3
{
  WebKit::WebPageProxy::changeListType((uint64_t)self->_page.m_ptr);
}

- (void)_toggleStrikeThroughForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)increaseSizeForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8[2];

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v8[1];
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)decreaseSizeForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8[2];

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v8[1];
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)_setFontForWebView:(id)a3 sender:(id)a4
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  int v24;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  v18 = 0;
  v19 = 0;
  LOBYTE(v20) = 0;
  v24 = 0;
  MEMORY[0x19AEABCC8](&v17, objc_msgSend(a3, "familyName"));
  WTF::String::operator=(&v19, (WTF::StringImpl *)&v17);
  v7 = v17;
  v17 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  MEMORY[0x19AEABCC8](&v17, objc_msgSend(a3, "fontName", v17));
  WTF::String::operator=(&v18, (WTF::StringImpl *)&v17);
  v9 = v17;
  v17 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  objc_msgSend(a3, "pointSize", v17);
  v20 = v10;
  v21 = 1;
  LOWORD(v24) = (objc_msgSend(a3, "traits") >> 1) & 1 | 0x100;
  HIWORD(v24) = objc_msgSend(a3, "traits") & 1 | 0x100;
  v11 = (void *)objc_msgSend((id)objc_msgSend(a3, "fontDescriptor"), "fontAttributes");
  if (objc_msgSend(v11, "objectForKey:", *MEMORY[0x1E0CEB508]))
  {
    MEMORY[0x19AEABCC8](&v17);
    WTF::String::operator=(&v19, (WTF::StringImpl *)&v17);
    v13 = v17;
    v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  WebKit::WebPageProxy::changeFont((uint64_t)self->_page.m_ptr, (uint64_t)&v18);
  v15 = v19;
  v19 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v18;
  v18 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
}

- (void)_setFontSizeForWebView:(double)a3 sender:(id)a4
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  double v9;
  char v10;
  char v11;
  char v12;
  int v13;

  v11 = 0;
  v12 = 0;
  v7 = 0;
  v8 = 0;
  v13 = 0;
  v9 = a3;
  v10 = 1;
  WebKit::WebPageProxy::changeFont((uint64_t)self->_page.m_ptr, (uint64_t)&v7);
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v7;
  v7 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)_setTextColorForWebView:(id)a3 sender:(id)a4
{
  WebCore *v5;
  CGColor *v6;
  uint64_t v7;
  uint64_t v8;
  WebPageProxy *m_ptr;
  const Color *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  v5 = (WebCore *)objc_msgSend(a3, "CGColor");
  v7 = WebCore::roundAndClampToSRGBALossy(v5, v6);
  v8 = bswap32(v7) | 0x1104000000000000;
  if (!BYTE4(v7))
    v8 = 0;
  v18 = v8;
  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = v19;
  WebCore::serializationForHTML((WebCore *)&v18, v10);
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v17, (const WTF::String *)&v19);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  if ((v18 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v11);
    }
  }
}

- (id)textStylingAtPosition:(id)a3 inDirection:(int64_t)a4
{
  void *v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  void *m_ptr;
  double v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  void *v23;
  void *v24;
  void *v25;

  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", a3, a4);
  v7 = objc_msgSend(MEMORY[0x1E0CEA478], "blackColor");
  objc_msgSend(v6, "setObject:forKey:", v7, _MergedGlobals_855());
  if (!a3)
    return v6;
  v8 = (_BYTE *)*((_QWORD *)self->_page.m_ptr + 4);
  if (!v8[238] || !v8[560])
    return v6;
  v9 = v8[256];
  m_ptr = self->_autocorrectionData.font.m_ptr;
  if (m_ptr)
    CFRetain(self->_autocorrectionData.font.m_ptr);
  -[WKContentView _contentZoomScale](self, "_contentZoomScale");
  v12 = v11;
  if (fabs(v11 + -1.0) <= 0.00000011920929)
  {
    v15 = m_ptr;
    if (m_ptr)
      goto LABEL_12;
  }
  else
  {
    objc_msgSend(m_ptr, "pointSize");
    v14 = (void *)objc_msgSend(m_ptr, "fontWithSize:", v12 * v13);
    v15 = v14;
    if (v14)
      CFRetain(v14);
    if (m_ptr)
      CFRelease(m_ptr);
    if (v15)
    {
LABEL_12:
      v16 = objc_msgSend((id)objc_msgSend(v15, "fontDescriptor"), "symbolicTraits");
      v17 = v16 | (__rbit32(v9) >> 30);
      if (v16 == (_DWORD)v17)
        goto LABEL_27;
      v18 = (void *)objc_msgSend(v15, "fontDescriptor");
      v19 = v18;
      if (v18)
        CFRetain(v18);
      else
        v19 = (void *)objc_opt_new();
      v21 = (const void *)objc_msgSend(v19, "fontDescriptorWithSymbolicTraits:", v17);
      v22 = v21;
      if (v21)
        CFRetain(v21);
      if (v19)
        CFRelease(v19);
      v23 = (void *)MEMORY[0x1E0CEA5E8];
      objc_msgSend(v15, "pointSize");
      v24 = (void *)objc_msgSend(v23, "fontWithDescriptor:size:", v22);
      v25 = v24;
      if (v24)
      {
        CFRetain(v24);
        CFRelease(v15);
        if (!v22)
        {
LABEL_26:
          v15 = v25;
LABEL_27:
          objc_msgSend(v6, "setObject:forKey:", v15, off_1ECE70DD8());
          v20 = v15;
          if ((v9 & 4) == 0)
            goto LABEL_29;
          goto LABEL_28;
        }
      }
      else
      {
        v25 = v15;
        if (!v22)
          goto LABEL_26;
      }
      CFRelease(v22);
      goto LABEL_26;
    }
  }
  v20 = 0;
  if ((v9 & 4) != 0)
LABEL_28:
    objc_msgSend(v6, "setObject:forKey:", &unk_1E356FE68, off_1ECE70DE0());
LABEL_29:
  if (v20)
    CFRelease(v20);
  return v6;
}

- (id)insertionPointColor
{
  id v3;

  if (-[WKContentView _requiresLegacyTextInputTraits](self, "_requiresLegacyTextInputTraits"))
    v3 = -[WKContentView textInputTraits](self, "textInputTraits");
  else
    v3 = -[WKContentView extendedTraitsDelegate](self, "extendedTraitsDelegate");
  return (id)objc_msgSend(v3, "insertionPointColor");
}

- (id)selectionBarColor
{
  if (-[WKContentView _requiresLegacyTextInputTraits](self, "_requiresLegacyTextInputTraits"))
    return (id)objc_msgSend(-[WKContentView textInputTraits](self, "textInputTraits"), "selectionBarColor");
  else
    return (id)objc_msgSend(-[WKContentView extendedTextInputTraits](self, "extendedTextInputTraits"), "selectionHandleColor");
}

- (id)selectionHighlightColor
{
  id v3;

  if (-[WKContentView _requiresLegacyTextInputTraits](self, "_requiresLegacyTextInputTraits"))
    v3 = -[WKContentView textInputTraits](self, "textInputTraits");
  else
    v3 = -[WKContentView extendedTraitsDelegate](self, "extendedTraitsDelegate");
  return (id)objc_msgSend(v3, "selectionHighlightColor");
}

- (BOOL)shouldAllowHighlightLinkCreation
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  BOOL v5;
  void *v6;
  __int128 v8;
  _BYTE v9[320];
  _QWORD v10[18];

  v10[17] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)self->_page.m_ptr + 4);
  v8 = *(_OWORD *)(v2 + 224);
  std::__optional_copy_base<WebKit::EditorState::PostLayoutData,false>::__optional_copy_base[abi:sn180100]((uint64_t)v9, (__int128 *)(v2 + 256));
  v3 = std::__optional_copy_base<WebKit::EditorState::VisualData,false>::__optional_copy_base[abi:sn180100]((uint64_t)v10, v2 + 576);
  v5 = 0;
  if (BYTE10(v8) && !BYTE13(v8))
    v5 = BYTE11(v8) == 0;
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100](v3, v4);
  if (v9[304])
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)v9, v6);
  return v5;
}

- (BOOL)canPerformAction:(SEL)a3 withSender:(id)a4
{
  uint64_t v8;
  const char *v12;

  if (*(_QWORD *)&self->_hasSetUpInteractions)
    return sel_paste_ == a3;
  v8 = *((_QWORD *)self->_page.m_ptr + 4);
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    if (sel_moveInLayoutDirection_ != a3
      && sel_extendInLayoutDirection_ != a3
      && sel_moveInStorageDirection_byGranularity_ != a3
      && sel_extendInStorageDirection_byGranularity_ != a3)
    {
      if (sel_deleteInDirection_toGranularity_ != a3)
      {
        v12 = sel_transposeCharactersAroundSelection;
        goto LABEL_34;
      }
      return *(_BYTE *)(v8 + 237) != 0;
    }
  }
  else if (sel__moveDown_withHistory_ != a3
         && sel__moveLeft_withHistory_ != a3
         && sel__moveRight_withHistory_ != a3
         && sel__moveToEndOfDocument_withHistory_ != a3
         && sel__moveToEndOfLine_withHistory_ != a3
         && sel__moveToEndOfParagraph_withHistory_ != a3
         && sel__moveToEndOfWord_withHistory_ != a3
         && sel__moveToStartOfDocument_withHistory_ != a3
         && sel__moveToStartOfLine_withHistory_ != a3
         && sel__moveToStartOfParagraph_withHistory_ != a3
         && sel__moveToStartOfWord_withHistory_ != a3
         && sel__moveUp_withHistory_ != a3)
  {
    if (sel__deleteByWord != a3
      && sel__deleteForwardByWord != a3
      && sel__deleteForwardAndNotify_ != a3
      && sel__deleteToEndOfParagraph != a3
      && sel__deleteToStartOfLine != a3)
    {
      v12 = sel__transpose;
LABEL_34:
      if (v12 != a3)
        return objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "canPerformAction:withSender:", a3, a4);
    }
    return *(_BYTE *)(v8 + 237) != 0;
  }
  return *(_BYTE *)(v8 + 233) == 0;
}

- (BOOL)canPerformActionForWebView:(SEL)a3 withSender:(id)a4
{
  int v5;
  uint64_t v9;
  void *v10;
  unsigned __int8 v11;
  int v12;
  int v13;
  BOOL v14;
  void *v15;
  void *v16;
  id v17;
  const WTF::StringImpl *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int v33;
  objc_super v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _OWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  char v44;
  char v45;
  _QWORD v46[18];

  v46[16] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)&self->_hasSetUpInteractions)
  {
    LOBYTE(v5) = sel_paste_ == a3;
    return v5;
  }
  if (sel__nextAccessoryTab_ == a3)
  {
    if (-[WKContentView _hasFocusedElement](self, "_hasFocusedElement"))
    {
      v12 = self->_anon_938[64];
LABEL_63:
      LOBYTE(v5) = v12 != 0;
      return v5;
    }
LABEL_64:
    LOBYTE(v5) = 0;
    return v5;
  }
  if (sel__previousAccessoryTab_ == a3)
  {
    if (-[WKContentView _hasFocusedElement](self, "_hasFocusedElement"))
    {
      v12 = self->_anon_938[84];
      goto LABEL_63;
    }
    goto LABEL_64;
  }
  v9 = *((_QWORD *)self->_page.m_ptr + 4);
  v40[0] = *(_OWORD *)(v9 + 224);
  *(_DWORD *)((char *)v40 + 15) = *(_DWORD *)(v9 + 239);
  std::__optional_copy_base<WebKit::EditorState::PostLayoutData,false>::__optional_copy_base[abi:sn180100]((uint64_t)&v41, (__int128 *)(v9 + 256));
  std::__optional_copy_base<WebKit::EditorState::VisualData,false>::__optional_copy_base[abi:sn180100]((uint64_t)v46, v9 + 576);
  if (sel_toggleBoldface_ == a3
    || sel_toggleItalics_ == a3
    || sel_toggleUnderline_ == a3
    || sel__toggleStrikeThrough_ == a3
    || sel__alignLeft_ == a3
    || sel__alignRight_ == a3
    || sel__alignCenter_ == a3
    || sel__alignJustified_ == a3
    || sel__setTextColor_sender_ == a3
    || sel__setFont_sender_ == a3
    || sel__setFontSize_sender_ == a3
    || sel__insertOrderedList_ == a3
    || sel__insertUnorderedList_ == a3
    || sel__insertNestedOrderedList_ == a3
    || sel__insertNestedUnorderedList_ == a3
    || sel__increaseListLevel_ == a3
    || sel__decreaseListLevel_ == a3
    || sel__changeListType_ == a3
    || sel__indent_ == a3
    || sel__outdent_ == a3
    || sel_increaseSize_ == a3
    || sel_decreaseSize_ == a3
    || sel_makeTextWritingDirectionNatural_ == a3)
  {
    v13 = BYTE14(v40[0]);
LABEL_69:
    v14 = v13 == 0;
    goto LABEL_70;
  }
  if (sel_cut_ == a3)
  {
    LOBYTE(v5) = 0;
    if (HIBYTE(v40[0]) || !BYTE13(v40[0]))
      goto LABEL_73;
    goto LABEL_68;
  }
  if (sel_paste_ == a3
    || sel__pasteAsQuotation_ == a3
    || sel__pasteAndMatchStyle_ == a3
    || sel_pasteAndMatchStyle_ == a3)
  {
    LOBYTE(v5) = 0;
    if (BYTE9(v40[0]) || !BYTE13(v40[0]))
      goto LABEL_73;
    v16 = (void *)objc_msgSend(MEMORY[0x1E0CEA810], "generalPasteboard");
    v17 = -[WKContentView supportedPasteboardTypesForCurrentSelection](self, "supportedPasteboardTypesForCurrentSelection");
    if ((objc_msgSend(v16, "containsPasteboardTypes:inItemSet:", v17, objc_msgSend(MEMORY[0x1E0CB36B8], "indexSetWithIndexesInRange:", 0, objc_msgSend(v16, "numberOfItems"))) & 1) != 0)goto LABEL_78;
    if (BYTE14(v40[0]))
    {
      v20 = *((_QWORD *)self->_page.m_ptr + 28);
      {
        WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v20 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v18))
      {
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v21 = (void *)objc_msgSend(v16, "itemProviders");
        v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
        if (v22)
        {
          v23 = *(_QWORD *)v36;
          do
          {
            for (i = 0; i != v22; ++i)
            {
              if (*(_QWORD *)v36 != v23)
                objc_enumerationMutation(v21);
              v25 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
              v26 = objc_msgSend(v25, "preferredPresentationStyle");
              if (v26)
              {
                if (v26 == 1)
                  continue;
              }
              else if (!objc_msgSend((id)objc_msgSend(v25, "suggestedName"), "length"))
              {
                continue;
              }
              if (objc_msgSend((id)objc_msgSend(v25, "web_fileUploadContentTypes"), "count"))
                goto LABEL_78;
            }
            v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
          }
          while (v22);
        }
      }
    }
  }
  if (sel_copy_ == a3)
  {
    if (HIBYTE(v40[0]) && !BYTE12(v40[0]))
      goto LABEL_163;
LABEL_68:
    v13 = BYTE10(v40[0]);
    goto LABEL_69;
  }
  if (sel__define_ != a3 && sel_define_ != a3 && sel_lookup_ != a3)
  {
    if (sel__lookup_ != a3)
    {
      if (sel__share_ == a3 || sel_share_ == a3)
      {
        LOBYTE(v5) = 0;
        if (!HIBYTE(v40[0]) && BYTE10(v40[0]) && v45)
        {
          v14 = v42 == 0;
          goto LABEL_70;
        }
        goto LABEL_73;
      }
      if (sel__addShortcut_ == a3 || sel_addShortcut_ == a3)
      {
        LOBYTE(v5) = 0;
        if (!HIBYTE(v40[0]) && BYTE10(v40[0]))
        {
          v28 = -[WKContentView selectedText](self, "selectedText");
          if (objc_msgSend(v28, "length") && MEMORY[0x19AEAA6CC]())
          {
            v11 = objc_msgSend(v28, "_containsCJScripts");
            goto LABEL_133;
          }
          goto LABEL_163;
        }
        goto LABEL_73;
      }
      if (sel__promptForReplace_ == a3 || sel_promptForReplace_ == a3)
      {
        LOBYTE(v5) = 0;
        if (BYTE10(v40[0]) && v45 && v44)
        {
          if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA6E8], "activeInstance"), "autocorrectSpellingEnabled"))
          {
            v5 = objc_msgSend(-[WKContentView selectedText](self, "selectedText"), "_containsCJScriptsOnly") ^ 1;
            goto LABEL_73;
          }
          goto LABEL_163;
        }
        goto LABEL_73;
      }
      if (sel__transliterateChinese_ == a3 || sel_transliterateChinese_ == a3)
      {
        LOBYTE(v5) = 0;
        if (BYTE10(v40[0]) && v45 && v44)
        {
          if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA6E8], "activeInstance"), "autocorrectSpellingEnabled"))
          {
            -[WKContentView selectedText](self, "selectedText");
            v11 = UIKeyboardEnabledInputModesAllowChineseTransliterationForText();
            goto LABEL_133;
          }
          goto LABEL_163;
        }
        goto LABEL_73;
      }
      if (sel__translate_ == a3 || sel_translate_ == a3)
      {
        if (PAL::TranslationUIServicesLibrary((PAL *)1)
          && objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCE1F0])(), "isAvailable"))
        {
          if (HIBYTE(v40[0]))
            v14 = 1;
          else
            v14 = BYTE10(v40[0]) == 0;
          goto LABEL_70;
        }
        goto LABEL_163;
      }
      if (sel_select_ == a3)
      {
        if (HIBYTE(v40[0]) | BYTE10(v40[0]))
          goto LABEL_163;
LABEL_132:
        v11 = -[WKContentView _hasContent](self, "_hasContent");
        goto LABEL_133;
      }
      if (sel_selectAll_ != a3)
      {
        if (sel_replace_ == a3)
        {
          if (BYTE13(v40[0]))
            v29 = HIBYTE(v40[0]) == 0;
          else
            v29 = 0;
          LOBYTE(v5) = v29;
          goto LABEL_73;
        }
        if (sel_makeTextWritingDirectionLeftToRight_ != a3 && sel_makeTextWritingDirectionRightToLeft_ != a3)
        {
          if (sel_captureTextFromCamera_ != a3
            || ((v31 = self->_anon_938[113], (v31 - 1) < 0xA) || v31 == 14)
            && !self->_anon_938[107]
            && ((objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
             || self->_usingMouseDragForSelection
             || !BYTE10(v40[0])))
          {
            if (sel_useSelectionForFind_ != a3 && sel_findSelected_ != a3 && sel__findSelected_ != a3)
            {
              v34.receiver = self;
              v34.super_class = (Class)WKContentView;
              v11 = -[WKContentView canPerformAction:withSender:](&v34, sel_canPerformAction_withSender_, a3, a4);
LABEL_133:
              LOBYTE(v5) = v11;
              goto LABEL_73;
            }
            v32 = objc_msgSend(-[WKContentView webView](self, "webView"), "_findInteractionEnabled");
            v33 = BYTE10(v40[0]) ? v32 : 0;
            if (v33 == 1)
            {
              v14 = objc_msgSend(-[WKContentView selectedText](self, "selectedText"), "length") == 0;
LABEL_70:
              LOBYTE(v5) = !v14;
              goto LABEL_73;
            }
          }
LABEL_163:
          LOBYTE(v5) = 0;
          goto LABEL_73;
        }
        LOBYTE(v5) = 0;
        if (BYTE13(v40[0]) && v45)
        {
          v30 = v43;
          if (v43 != 1 || (UIKeyboardIsRightToLeftInputModeActive() & 1) != 0)
          {
            if (sel_makeTextWritingDirectionLeftToRight_ == a3)
              v14 = v30 == 1;
            else
              v14 = v30 == 2;
            goto LABEL_70;
          }
          goto LABEL_163;
        }
        goto LABEL_73;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && !self->_usingMouseDragForSelection)
      {
        if (BYTE10(v40[0]))
          goto LABEL_163;
        goto LABEL_132;
      }
LABEL_78:
      LOBYTE(v5) = 1;
      goto LABEL_73;
    }
    if (HIBYTE(v40[0]))
      goto LABEL_163;
    v27 = (void *)objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCE080])(), "sharedConnection");
    if (objc_msgSend(v27, "effectiveBoolValueForSetting:", PAL::get_ManagedConfiguration_MCFeatureDefinitionLookupAllowed((PAL *)v27)) == 2)goto LABEL_163;
    goto LABEL_68;
  }
  LOBYTE(v5) = 0;
  if (!HIBYTE(v40[0]) && BYTE10(v40[0]) && v45)
  {
    if ((unint64_t)(v42 - 201) >= 0xFFFFFFFFFFFFFF38)
    {
      v19 = (void *)objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCE080])(), "sharedConnection");
      v14 = objc_msgSend(v19, "effectiveBoolValueForSetting:", PAL::get_ManagedConfiguration_MCFeatureDefinitionLookupAllowed((PAL *)v19)) == 2;
      goto LABEL_70;
    }
    goto LABEL_163;
  }
LABEL_73:
  std::__optional_destruct_base<WebKit::EditorState::VisualData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v46, v10);
  if (v45)
    WebKit::EditorState::PostLayoutData::~PostLayoutData((WebKit::EditorState::PostLayoutData *)&v41, v15);
  return v5;
}

- (id)targetForAction:(SEL)a3 withSender:(id)a4
{
  return (id)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "targetForAction:withSender:", a3, a4);
}

- (id)targetForActionForWebView:(SEL)a3 withSender:(id)a4
{
  _BOOL4 v8;
  objc_super v10;

  v8 = sel__define_ != a3 && sel__translate_ != a3 && sel__lookup_ != a3;
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions") && !v8)
    return 0;
  v10.receiver = self;
  v10.super_class = (Class)WKContentView;
  return -[WKContentView targetForAction:withSender:](&v10, sel_targetForAction_withSender_, a3, a4);
}

- (void)_willHideMenu:(id)a3
{
  -[WKContentView _handleDOMPasteRequestWithResult:](self, "_handleDOMPasteRequestWithResult:", 0);
}

- (void)_keyboardDidRequestDismissal:(id)a3
{
  if (LOBYTE(self->_dataListTextSuggestionsInputView.m_ptr))
  {
    if (-[WKContentView isFirstResponder](self, "isFirstResponder", a3))
      BYTE4(self->_revealFocusedElementDeferrer.m_ptr) = 1;
  }
}

- (void)copyForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)cutForWebView:(id)a3
{
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", CFSTR("cut"));
}

- (void)pasteForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  if ((id)objc_msgSend(MEMORY[0x1E0CEA748], "sharedMenuController") != a3
    || !-[WKContentView _handleDOMPasteRequestWithResult:](self, "_handleDOMPasteRequestWithResult:", 2))
  {
    BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
    m_ptr = self->_page.m_ptr;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = 0;
    WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v9, (const WTF::String *)&v8);
    v6 = v8;
    v8 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v9;
    v9 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
}

- (void)_pasteAsQuotationForWebView:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

- (void)selectForWebView:(id)a3
{
  uint64_t v4;
  WebPageProxy *m_ptr;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *((_QWORD *)self->_page.m_ptr + 28);
  {
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key, (const WTF::StringImpl *)a3))
  {
    BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
    objc_msgSend(self->_textInteractionWrapper.m_ptr, "selectWord");
    m_ptr = self->_page.m_ptr;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E3507630;
    v8 = v6;
    WebKit::WebPageProxy::extendSelection((uint64_t)m_ptr, 1, (uint64_t *)&v8);
    v7 = (uint64_t)v8;
    v8 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

- (void)selectAllForWebView:(id)a3
{
  uint64_t v5;

  v5 = *((_QWORD *)self->_page.m_ptr + 28);
  {
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textInteractionEnabledKey(void)::key, (const WTF::StringImpl *)a3))
  {
    BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
    objc_msgSend(self->_textInteractionWrapper.m_ptr, "selectAll:", a3);
    WebKit::WebPageProxy::selectAll((uint64_t)self->_page.m_ptr);
  }
}

- (BOOL)shouldSynthesizeKeyEvents
{
  return self->_anon_938[289] && -[WKContentView hasHiddenContentEditable](self, "hasHiddenContentEditable");
}

- (void)toggleBoldfaceForWebView:(id)a3
{
  if (*(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 238))
  {
    -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", CFSTR("toggleBold"));
    if (-[WKContentView shouldSynthesizeKeyEvents](self, "shouldSynthesizeKeyEvents"))
      WebKit::WebPageProxy::generateSyntheticEditingCommand((uint64_t)self->_page.m_ptr, 2);
  }
}

- (void)toggleItalicsForWebView:(id)a3
{
  if (*(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 238))
  {
    -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", CFSTR("toggleItalic"));
    if (-[WKContentView shouldSynthesizeKeyEvents](self, "shouldSynthesizeKeyEvents"))
      WebKit::WebPageProxy::generateSyntheticEditingCommand((uint64_t)self->_page.m_ptr, 3);
  }
}

- (void)toggleUnderlineForWebView:(id)a3
{
  if (*(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 238))
  {
    -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", CFSTR("toggleUnderline"));
    if (-[WKContentView shouldSynthesizeKeyEvents](self, "shouldSynthesizeKeyEvents"))
      WebKit::WebPageProxy::generateSyntheticEditingCommand((uint64_t)self->_page.m_ptr, 4);
  }
}

- (void)_defineForWebView:(id)a3
{
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v5 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "-[WKContentView(WKInteraction) _defineForWebView:]";
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v6, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x1978426F0);
  }
  -[WKContentView lookupForWebView:](self, "lookupForWebView:", a3);
}

- (void)accessibilityRetrieveSpeakSelectionContent
{
  id WeakRetained;
  WebPageProxy *m_ptr;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (self)
    CFRetain(self);
  WeakRetained = objc_loadWeakRetained(&self->_webView.m_weakReference);
  m_ptr = self->_page.m_ptr;
  CFRetain(self);
  if (WeakRetained)
    CFRetain(WeakRetained);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E3507658;
  v5[1] = self;
  v5[2] = WeakRetained;
  v7 = v5;
  v8 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSelectionOrContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(*((_QWORD *)m_ptr + 26), (uint64_t)&v8, (uint64_t *)&v7, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0, 1);
  v6 = (uint64_t)v7;
  v7 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (WeakRetained)
    CFRelease(WeakRetained);
  CFRelease(self);
}

- (void)_accessibilityRetrieveRectsEnclosingSelectionOffset:(int64_t)a3 withGranularity:(int64_t)a4
{
  WebPageProxy *m_ptr;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  m_ptr = self->_page.m_ptr;
  CFRetain(self);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v9 = 0x50304020100uLL >> (8 * a4);
  *v8 = &off_1E3507680;
  v8[1] = self;
  if ((unint64_t)a4 >= 6)
    LOBYTE(v9) = 0;
  v8[2] = a3;
  v8[3] = a4;
  v11 = v8;
  WebKit::WebPageProxy::requestRectsForGranularityWithSelectionOffset((uint64_t)m_ptr, v9 & 7, a3, (uint64_t *)&v11);
  v10 = (uint64_t)v11;
  v11 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

- (void)_accessibilityRetrieveRectsAtSelectionOffset:(int64_t)a3 withText:(id)a4
{
  -[WKContentView _accessibilityRetrieveRectsAtSelectionOffset:withText:completionHandler:](self, "_accessibilityRetrieveRectsAtSelectionOffset:withText:completionHandler:", a3, a4, 0);
}

- (void)_accessibilityRetrieveRectsAtSelectionOffset:(int64_t)a3 withText:(id)a4 completionHandler:(id)a5
{
  WebPageProxy *m_ptr;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _QWORD *v15;
  WTF::StringImpl *v16;

  if (self)
    CFRetain(self);
  m_ptr = self->_page.m_ptr;
  MEMORY[0x19AEABCC8](&v16, a4);
  CFRetain(self);
  v10 = _Block_copy(a5);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E35076A8;
  v11[1] = self;
  v11[2] = a3;
  v11[3] = v10;
  v15 = v11;
  WebKit::WebPageProxy::requestRectsAtSelectionOffsetWithText((uint64_t)m_ptr, a3, (uint64_t)&v16, (uint64_t *)&v15);
  v12 = (uint64_t)v15;
  v15 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Block_release(0);
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  CFRelease(self);
}

- (void)_accessibilityStoreSelection
{
  WebPageProxy *m_ptr;
  uint64_t v3;
  char v4;

  m_ptr = self->_page.m_ptr;
  v3 = *((_QWORD *)m_ptr + 26);
  v4 = 1;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StoreSelectionForAccessibility>(v3, &v4, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)_accessibilityClearSelection
{
  WebPageProxy *m_ptr;
  uint64_t v3;
  char v4;

  m_ptr = self->_page.m_ptr;
  v3 = *((_QWORD *)m_ptr + 26);
  v4 = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StoreSelectionForAccessibility>(v3, &v4, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (BOOL)_handleDOMPasteRequestWithResult:(unsigned __int8)a3
{
  uint64_t v3;
  WebPageProxy *m_ptr;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _BYTE v10[24];
  WTF::StringImpl *v11;

  v3 = a3;
  if (LOWORD(self->_ignoreSelectionCommandFadeCount) >= 0x100u)
  {
    BYTE1(self->_ignoreSelectionCommandFadeCount) = 0;
    if ((a3 - 1) <= 1u)
    {
      m_ptr = self->_page.m_ptr;
      MEMORY[0x19AEABCC8](&v11, *MEMORY[0x1E0CEB9F8]);
      v10[0] = 0;
      v10[16] = 0;
      WebKit::WebPageProxy::grantAccessToCurrentPasteboardData((WebKit::WebPasteboardProxy *)m_ptr, &v11, (uint64_t)v10);
      v7 = v11;
      v11 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
  }
  v8 = *(_QWORD *)&self->_hasSetUpInteractions;
  *(_QWORD *)&self->_hasSetUpInteractions = 0;
  if (v8)
  {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA748], "sharedMenuController"), "hideMenuFromView:", self);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return v8 != 0;
}

- (void)_willPerformAction:(SEL)a3 sender:(id)a4
{
  if (sel_paste_ != a3)
    -[WKContentView _handleDOMPasteRequestWithResult:](self, "_handleDOMPasteRequestWithResult:", 0, a4);
}

- (void)_didPerformAction:(SEL)a3 sender:(id)a4
{
  if (sel_paste_ == a3)
    -[WKContentView _handleDOMPasteRequestWithResult:](self, "_handleDOMPasteRequestWithResult:", 0, a4);
}

- (BOOL)_hasFocusedElement
{
  return self->_anon_938[113] != 0;
}

- (void)changeSelectionWithGestureAt:(CGPoint)a3 withGesture:(int64_t)a4 withState:(int64_t)a5
{
  -[WKContentView changeSelectionWithGestureAt:withGesture:withState:withFlags:](self, "changeSelectionWithGestureAt:withGesture:withState:withFlags:", a4, a5, 0, a3.x, a3.y);
}

- (void)changeSelectionWithGestureAt:(CGPoint)a3 withGesture:(int64_t)a4 withState:(int64_t)a5 withFlags:(unint64_t)a6
{
  id v10;
  uint64_t v11;
  WebPageProxy *m_ptr;
  char v13;
  char v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  CGPoint v20;
  char v21;
  CGPoint v22;

  v22 = a3;
  v10 = -[WKContentView textInteractionLoupeGestureRecognizer](self, "textInteractionLoupeGestureRecognizer");
  v20 = v22;
  v21 = 1;
  logTextInteraction((uint64_t)"-[WKContentView(WKInteraction) changeSelectionWithGestureAt:withGesture:withState:withFlags:]", v10, (uint64_t)&v20, a5, 1, a4, 1, v11, 0, 0, 0, a6, SHIDWORD(a6), 1);
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  BYTE2(self->_dataListTextSuggestions.m_ptr) = 1;
  m_ptr = self->_page.m_ptr;
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v19, &v22);
  if ((unint64_t)(a4 - 1) > 0xD)
    v13 = 0;
  else
    v13 = byte_1978D2AA0[a4 - 1];
  v14 = -[WKContentView _hasFocusedElement](self, "_hasFocusedElement");
  CFRetain(self);
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  if ((unint64_t)a5 >= 6)
    v16 = 0;
  else
    v16 = a5;
  *v15 = &off_1E35076D0;
  v15[1] = self;
  v15[2] = self;
  v15[3] = a5;
  v15[4] = a6;
  v18 = v15;
  WebKit::WebPageProxy::selectWithGesture((uint64_t)m_ptr, v19, v13, v16, v14, (uint64_t *)&v18);
  v17 = (uint64_t)v18;
  v18 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
}

- (void)changeSelectionWithTouchAt:(CGPoint)a3 withSelectionTouch:(int64_t)a4 baseIsStart:(BOOL)a5 withFlags:(unint64_t)a6
{
  id v10;
  uint64_t v11;
  WebPageProxy *m_ptr;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  CGPoint v18;
  char v19;
  CGPoint v20;

  v20 = a3;
  v10 = -[WKContentView textInteractionLoupeGestureRecognizer](self, "textInteractionLoupeGestureRecognizer");
  v18 = v20;
  v19 = 1;
  logTextInteraction((uint64_t)"-[WKContentView(WKInteraction) changeSelectionWithTouchAt:withSelectionTouch:baseIsStart:withFlags:]", v10, (uint64_t)&v18, 0, 0, 0, 0, v11, a4, 1, 0, a6, SHIDWORD(a6), 1);
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  BYTE2(self->_dataListTextSuggestions.m_ptr) = 1;
  m_ptr = self->_page.m_ptr;
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v17, &v20);
  CFRetain(self);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  if ((unint64_t)a4 >= 6)
    v14 = 2;
  else
    v14 = a4;
  *v13 = &off_1E35076F8;
  v13[1] = self;
  v13[2] = self;
  v13[3] = a6;
  v16 = v13;
  WebKit::WebPageProxy::updateSelectionWithTouches((uint64_t)m_ptr, v17, v14, a5, (uint64_t *)&v16);
  v15 = (uint64_t)v16;
  v16 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
}

- (void)changeSelectionWithTouchesFrom:(CGPoint)a3 to:(CGPoint)a4 withGesture:(int64_t)a5 withState:(int64_t)a6
{
  id v9;
  uint64_t v10;
  WebPageProxy *m_ptr;
  char v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  CGPoint v19;
  char v20;
  CGPoint v21;
  CGPoint v22;

  v22 = a3;
  v21 = a4;
  v9 = -[WKContentView textInteractionLoupeGestureRecognizer](self, "textInteractionLoupeGestureRecognizer");
  v19 = v22;
  v20 = 1;
  logTextInteraction((uint64_t)"-[WKContentView(WKInteraction) changeSelectionWithTouchesFrom:to:withGesture:withState:]", v9, (uint64_t)&v19, a6, 1, a5, 1, v10, 0, 0, 0, 0, 0, 0);
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  BYTE2(self->_dataListTextSuggestions.m_ptr) = 1;
  m_ptr = self->_page.m_ptr;
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v18, &v22);
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v17, &v21);
  if ((unint64_t)(a5 - 1) > 0xD)
    v12 = 0;
  else
    v12 = byte_1978D2AA0[a5 - 1];
  CFRetain(self);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  if ((unint64_t)a6 >= 6)
    v14 = 0;
  else
    v14 = a6;
  *v13 = &off_1E3507720;
  v13[1] = self;
  v13[2] = self;
  v16 = v13;
  WebKit::WebPageProxy::selectWithTwoTouches((uint64_t)m_ptr, v18, v17, v12, v14, (uint64_t *)&v16);
  v15 = (uint64_t)v16;
  v16 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
}

- (void)moveByOffset:(int64_t)a3
{
  int v3;
  WebPageProxy *m_ptr;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  if (a3)
  {
    v3 = a3;
    -[WKContentView _internalBeginSelectionChange](self, "_internalBeginSelectionChange");
    if (self)
      CFRetain(self);
    m_ptr = self->_page.m_ptr;
    CFRetain(self);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = &off_1E3507748;
    v6[1] = self;
    v8 = v6;
    WebKit::WebPageProxy::moveSelectionByOffset((uint64_t)m_ptr, v3, (uint64_t *)&v8);
    v7 = (uint64_t)v8;
    v8 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    CFRelease(self);
  }
}

- (const)autocorrectionData
{
  return &self->_autocorrectionData;
}

- (void)requestAutocorrectionRectsForString:(id)a3 withCompletionHandler:(id)a4
{
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  uint8_t buf[24];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v10 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[WKContentView(WKInteraction) requestAutocorrectionRectsForString:withCompletionHandler:]";
      _os_log_error_impl(&dword_196BCC000, v10, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", buf, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x197843780);
  }
  if (a4)
  {
    if (self)
      CFRetain(self);
    v7 = _Block_copy(a4);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = off_1E3507770;
    v8[1] = self;
    v8[2] = v7;
    *(_QWORD *)buf = v8;
    -[WKContentView _internalRequestTextRectsForString:completion:](self, "_internalRequestTextRectsForString:completion:", a3, buf);
    v9 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    _Block_release(0);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Expected a nonnull completion handler in %s."), "-[WKContentView(WKInteraction) requestAutocorrectionRectsForString:withCompletionHandler:]");
  }
}

- (void)_internalRequestTextRectsForString:(id)a3 completion:(void *)a4
{
  WebPageProxy *m_ptr;
  uint64_t v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  void *v13;
  WTF::StringImpl *v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  if (objc_msgSend(a3, "length"))
  {
    m_ptr = self->_page.m_ptr;
    MEMORY[0x19AEABCC8](&v16, a3);
    CFRetain(self);
    v8 = *(_QWORD *)a4;
    *(_QWORD *)a4 = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = &off_1E3507798;
    v9[1] = self;
    v9[2] = v8;
    v15 = v9;
    WebKit::WebPageProxy::requestAutocorrectionData((uint64_t)m_ptr, (uint64_t *)&v16, (uint64_t *)&v15);
    v11 = (uint64_t)v15;
    v15 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v16;
    v16 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    v16 = 0;
    v17 = 0;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)a4 + 16))(*(_QWORD *)a4, &v16);
    v14 = v16;
    if (v16)
    {
      v16 = 0;
      LODWORD(v17) = 0;
      WTF::fastFree(v14, v13);
    }
  }
}

- (void)requestPreferredArrowDirectionForEditMenuWithCompletionHandler:(id)a3
{
  WTF::ApproximateTime *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *aBlock;

  v5 = (WTF::ApproximateTime *)-[WKContentView shouldSuppressEditMenu](self, "shouldSuppressEditMenu");
  if ((_DWORD)v5)
  {
    (*((void (**)(id, _QWORD))a3 + 2))(a3, 0);
  }
  else
  {
    WTF::ApproximateTime::now(v5);
    v11 = v6;
    v12 = 0;
    objc_initWeak(&v12, self);
    aBlock = _Block_copy(a3);
    v7 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v7 = off_1E35077C0;
    *(_QWORD *)(v7 + 8) = v11;
    *(_QWORD *)(v7 + 16) = 0;
    objc_moveWeak((id *)(v7 + 16), &v12);
    v8 = aBlock;
    aBlock = 0;
    *(_QWORD *)(v7 + 24) = v8;
    v10 = v7;
    -[WKContentView doAfterComputingImageAnalysisResultsForBackgroundRemoval:](self, "doAfterComputingImageAnalysisResultsForBackgroundRemoval:", &v10);
    v9 = v10;
    v10 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    _Block_release(aBlock);
    objc_destroyWeak(&v12);
  }
}

- (id)removeBackgroundMenu
{
  const WTF::StringImpl *v2;
  WebPageProxy *m_ptr;
  uint64_t v5;
  WebCore *BoolValueForKey;
  uint64_t v7;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  const __CFString *v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  id v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  _QWORD *v20;
  WTF::StringImpl *v21;

  m_ptr = self->_page.m_ptr;
  if (!m_ptr)
    return 0;
  v5 = *((_QWORD *)m_ptr + 28);
  {
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = (WebCore *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key, v2);
  if (!(_DWORD)BoolValueForKey)
    return 0;
  v7 = *((_QWORD *)self->_page.m_ptr + 4);
  if (!*(_BYTE *)(v7 + 560) || !self->_anon_fa8[8] || !*(_BYTE *)(v7 + 448))
    return 0;
  if (*(float *)&self->_imageAnalysisActionButtons.m_ptr != *(float *)(v7 + 368)
    || *((float *)&self->_imageAnalysisActionButtons.m_ptr + 1) != *(float *)(v7 + 372))
  {
    return 0;
  }
  v9 = self->_imageAnalysisInteractionBounds.m_location.m_x == *(float *)(v7 + 376)
    && self->_imageAnalysisInteractionBounds.m_location.m_y == *(float *)(v7 + 380);
  if (!v9 || *(_QWORD *)&self->_imageAnalysisInteractionBounds.m_size != *(_QWORD *)(v7 + 384))
    return 0;
  v10 = *((_QWORD *)&self->_removeBackgroundData.var0.preferredMIMEType + 1) == *(_QWORD *)(v7 + 408)
     && self->_removeBackgroundData.var0.image.m_ptr == *(void **)(v7 + 400);
  v11 = v10 && self->_removeBackgroundData.var0.__val_.element.webPageIdentifier.m_identifier == *(_QWORD *)(v7 + 416);
  if (!v11 || *((_QWORD *)&self->_removeBackgroundData.var0.preferredMIMEType + 4) != *(_QWORD *)(v7 + 432))
    return 0;
  WebCore::contextMenuItemTitleRemoveBackground(BoolValueForKey);
  if (v21)
    v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v12 = &stru_1E351F1B8;
  v13 = objc_msgSend(MEMORY[0x1E0CEA638], "_systemImageNamed:", CFSTR("circle.rectangle.filled.pattern.diagonalline"));
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = off_1E3507838;
  v20 = v14;
  v16 = -[WKContentView menuWithInlineAction:image:identifier:handler:](self, "menuWithInlineAction:image:identifier:handler:", v12, v13, CFSTR("WKActionRemoveBackground"), &v20);
  v17 = v20;
  v20 = 0;
  if (v17)
    (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  v18 = v21;
  v21 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  return v16;
}

- (void)doAfterComputingImageAnalysisResultsForBackgroundRemoval:(void *)a3
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  RetainPtr<NSMutableSet<UIButton *>> *p_imageAnalysisActionButtons;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  WebPageProxy *m_ptr;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)self->_page.m_ptr + 4);
  if (!*(_BYTE *)(v4 + 560))
  {
LABEL_9:
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(uint64_t, SEL))(*(_QWORD *)v11 + 16))(v11, a2);
    goto LABEL_10;
  }
  v6 = *(_OWORD *)(v4 + 416);
  v35 = *(_OWORD *)(v4 + 400);
  v36 = v6;
  v7 = *(_OWORD *)(v4 + 448);
  v37 = *(_OWORD *)(v4 + 432);
  v38 = v7;
  v8 = *(_OWORD *)(v4 + 384);
  v33 = *(_OWORD *)(v4 + 368);
  v34 = v8;
  p_imageAnalysisActionButtons = &self->_imageAnalysisActionButtons;
  if (LOBYTE(p_imageAnalysisActionButtons[12].m_ptr))
    v10 = v38 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v12 = *(float *)&p_imageAnalysisActionButtons->m_ptr == *(float *)&v33
       && *((float *)&p_imageAnalysisActionButtons->m_ptr + 1) == *((float *)&v33 + 1);
    if (!v12
      || (*(float *)&p_imageAnalysisActionButtons[1].m_ptr == *((float *)&v33 + 2)
        ? (v13 = *((float *)&p_imageAnalysisActionButtons[1].m_ptr + 1) == *((float *)&v33 + 3))
        : (v13 = 0),
          !v13
       || p_imageAnalysisActionButtons[2].m_ptr != (void *)v34
       || (p_imageAnalysisActionButtons[5].m_ptr == (void *)*((_QWORD *)&v35 + 1)
         ? (v14 = p_imageAnalysisActionButtons[4].m_ptr == (void *)v35)
         : (v14 = 0),
           !v14
        || p_imageAnalysisActionButtons[6].m_ptr != (void *)v36
        || p_imageAnalysisActionButtons[8].m_ptr != (void *)v37)))
    {
      std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::reset[abi:sn180100]((uint64_t)p_imageAnalysisActionButtons, (WTF::StringImpl *)a2);
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::reset[abi:sn180100]((uint64_t)p_imageAnalysisActionButtons, (WTF::StringImpl *)a2);
  if (!(_BYTE)v38)
  {
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
LABEL_10:
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return;
  }
LABEL_30:
  m_ptr = self->_page.m_ptr;
  v28 = v35;
  v29 = v36;
  v16 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v26 = v33;
  v27 = v34;
  *(_QWORD *)&v30 = v37;
  v31 = v16;
  v32 = 0;
  objc_initWeak(&v32, self);
  v17 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)v17 = off_1E3507860;
  v19 = v29;
  v18 = v30;
  *(_OWORD *)(v17 + 48) = v28;
  *(_OWORD *)(v17 + 64) = v19;
  *(_OWORD *)(v17 + 80) = v18;
  v20 = v27;
  *(_OWORD *)(v17 + 16) = v26;
  *(_OWORD *)(v17 + 32) = v20;
  v21 = v31;
  v31 = 0;
  *(_QWORD *)(v17 + 96) = v21;
  *(_QWORD *)(v17 + 104) = 0;
  objc_moveWeak((id *)(v17 + 104), &v32);
  v24 = v17;
  v25 = &v33;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ShouldAllowRemoveBackground,WTF::CompletionHandler<void ()(BOOL)>>(*((_QWORD *)m_ptr + 26), (uint64_t *)&v25, &v24, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0, 1);
  v22 = v24;
  v24 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  objc_destroyWeak(&v32);
  v23 = v31;
  v31 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
}

- (BOOL)_handleTapOverInteractiveControl:(CGPoint)a3
{
  id v4;
  uint64_t v5;

  v4 = -[WKContentView hitTest:withEvent:](self, "hitTest:withEvent:", 0, a3.x, a3.y);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    v4 = 0;
  if (v4)
  {
    if (objc_msgSend(self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr, "analysisButton"))
    {
      v5 = objc_opt_class();
      if (v5 == objc_opt_class())
        objc_msgSend(self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr, "setHighlightSelectableItems:", objc_msgSend(self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr, "highlightSelectableItems") ^ 1);
    }
    objc_msgSend(v4, "sendActionsForControlEvents:", 64);
  }
  return v4 != 0;
}

- (void)selectPositionAtPoint:(CGPoint)a3 completionHandler:(id)a4
{
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  -[WKContentView _selectPositionAtPoint:stayingWithinFocusedElement:completionHandler:](self, "_selectPositionAtPoint:stayingWithinFocusedElement:completionHandler:", -[WKContentView _hasFocusedElement](self, "_hasFocusedElement"), a4, a3.x, a3.y);
}

- (void)_selectPositionAtPoint:(CGPoint)a3 stayingWithinFocusedElement:(BOOL)a4 completionHandler:(id)a5
{
  id v8;
  uint64_t v9;
  WebPageProxy *m_ptr;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  CGPoint v16;
  char v17;
  CGPoint v18;

  v18 = a3;
  v8 = -[WKContentView textInteractionLoupeGestureRecognizer](self, "textInteractionLoupeGestureRecognizer");
  v16 = v18;
  v17 = 1;
  logTextInteraction((uint64_t)"-[WKContentView(WKInteraction) _selectPositionAtPoint:stayingWithinFocusedElement:completionHandler:]", v8, (uint64_t)&v16, 0, 0, 0, 0, v9, 0, 0, 0, 0, 0, 0);
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  BYTE2(self->_dataListTextSuggestions.m_ptr) = 1;
  m_ptr = self->_page.m_ptr;
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v15, &v18);
  CFRetain(self);
  v11 = _Block_copy(a5);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E35078D8;
  v12[1] = self;
  v12[2] = v11;
  v14 = v12;
  WebKit::WebPageProxy::selectPositionAtPoint((uint64_t)m_ptr, v15, a4, (uint64_t *)&v14);
  v13 = (uint64_t)v14;
  v14 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Block_release(0);
}

- (void)selectPositionAtBoundary:(int64_t)a3 inDirection:(int64_t)a4 fromPoint:(CGPoint)a5 completionHandler:(id)a6
{
  id v10;
  uint64_t v11;
  WebPageProxy *m_ptr;
  char v13;
  char v14;
  char v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  CGPoint v21;
  char v22;
  CGPoint v23;

  v23 = a5;
  v10 = -[WKContentView textInteractionLoupeGestureRecognizer](self, "textInteractionLoupeGestureRecognizer");
  v21 = v23;
  v22 = 1;
  logTextInteraction((uint64_t)"-[WKContentView(WKInteraction) selectPositionAtBoundary:inDirection:fromPoint:completionHandler:]", v10, (uint64_t)&v21, 0, 0, 0, 0, v11, 0, 0, 0, 0, 0, 0);
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  BYTE2(self->_dataListTextSuggestions.m_ptr) = 1;
  m_ptr = self->_page.m_ptr;
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v20, &v23);
  if ((unint64_t)a3 >= 6)
    v13 = 0;
  else
    v13 = 0x50304020100uLL >> (8 * a3);
  if ((unint64_t)(a4 - 3) >= 2)
    v14 = 2;
  else
    v14 = 3;
  v15 = -[WKContentView _hasFocusedElement](self, "_hasFocusedElement");
  CFRetain(self);
  v16 = _Block_copy(a6);
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v17 = off_1E3507900;
  v17[1] = self;
  v17[2] = v16;
  v19 = v17;
  WebKit::WebPageProxy::selectPositionAtBoundaryWithDirection((uint64_t)m_ptr, v20, v13, v14, v15, (uint64_t *)&v19);
  v18 = (uint64_t)v19;
  v19 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Block_release(0);
}

- (void)moveSelectionAtBoundary:(int64_t)a3 inDirection:(int64_t)a4 completionHandler:(id)a5
{
  id v9;
  uint64_t v10;
  WebPageProxy *m_ptr;
  char v12;
  char v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE v18[24];

  v9 = -[WKContentView textInteractionLoupeGestureRecognizer](self, "textInteractionLoupeGestureRecognizer");
  v18[0] = 0;
  v18[16] = 0;
  logTextInteraction((uint64_t)"-[WKContentView(WKInteraction) moveSelectionAtBoundary:inDirection:completionHandler:]", v9, (uint64_t)v18, 0, 0, 0, 0, v10, 0, 0, 0, 0, 0, 0);
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  BYTE2(self->_dataListTextSuggestions.m_ptr) = 1;
  m_ptr = self->_page.m_ptr;
  if ((unint64_t)a3 >= 6)
    v12 = 0;
  else
    v12 = 0x50304020100uLL >> (8 * a3);
  if ((unint64_t)(a4 - 3) >= 2)
    v13 = 2;
  else
    v13 = 3;
  CFRetain(self);
  v14 = _Block_copy(a5);
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v15 = off_1E3507928;
  v15[1] = self;
  v15[2] = v14;
  v17 = v15;
  WebKit::WebPageProxy::moveSelectionAtBoundaryWithDirection((uint64_t)m_ptr, v12, v13, (uint64_t *)&v17);
  v16 = (uint64_t)v17;
  v17 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Block_release(0);
}

- (void)selectTextWithGranularity:(int64_t)a3 atPoint:(CGPoint)a4 completionHandler:(id)a5
{
  id v8;
  uint64_t v9;
  WebPageProxy *m_ptr;
  char v11;
  char v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  CGPoint v18;
  char v19;
  CGPoint v20;

  v20 = a4;
  v8 = -[WKContentView textInteractionLoupeGestureRecognizer](self, "textInteractionLoupeGestureRecognizer");
  v18 = v20;
  v19 = 1;
  logTextInteraction((uint64_t)"-[WKContentView(WKInteraction) selectTextWithGranularity:atPoint:completionHandler:]", v8, (uint64_t)&v18, 0, 0, 0, 0, v9, 0, 0, 0, 0, 0, 0);
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  BYTE2(self->_dataListTextSuggestions.m_ptr) = 1;
  BYTE3(self->_dataListTextSuggestions.m_ptr) = objc_msgSend((id)objc_msgSend(self->_mouseInteraction.m_ptr, "mouseTouchGestureRecognizer"), "_wk_hasRecognizedOrEnded");
  ++self->_dropAnimationCount;
  m_ptr = self->_page.m_ptr;
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v17, &v20);
  if ((unint64_t)a3 >= 6)
    v11 = 0;
  else
    v11 = 0x50304020100uLL >> (8 * a3);
  v12 = -[WKContentView _hasFocusedElement](self, "_hasFocusedElement");
  CFRetain(self);
  v13 = _Block_copy(a5);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = off_1E3507950;
  v14[1] = self;
  v14[2] = v13;
  v16 = v14;
  WebKit::WebPageProxy::selectTextWithGranularityAtPoint((uint64_t)m_ptr, v17, v11, v12, (uint64_t *)&v16);
  v15 = (uint64_t)v16;
  v16 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Block_release(0);
}

- (void)beginSelectionInDirection:(int64_t)a3 completionHandler:(id)a4
{
  id v7;
  uint64_t v8;
  WebPageProxy *m_ptr;
  void *v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE v16[31];
  char v17;

  v7 = -[WKContentView textInteractionLoupeGestureRecognizer](self, "textInteractionLoupeGestureRecognizer");
  v16[0] = 0;
  v16[16] = 0;
  logTextInteraction((uint64_t)"-[WKContentView(WKInteraction) beginSelectionInDirection:completionHandler:]", v7, (uint64_t)v16, 0, 0, 0, 0, v8, 0, 0, 0, 0, 0, 0);
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  m_ptr = self->_page.m_ptr;
  v10 = _Block_copy(a4);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  if ((unint64_t)(a3 - 3) >= 2)
    v12 = 2;
  else
    v12 = 3;
  *v11 = off_1E3507978;
  v11[1] = v10;
  v15 = v11;
  v13 = *((_QWORD *)m_ptr + 26);
  v17 = v12;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::BeginSelectionInDirection,WTF::CompletionHandler<void ()(BOOL)>>(v13, &v17, (uint64_t *)&v15, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0, 1);
  v14 = (uint64_t)v15;
  v15 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Block_release(0);
}

- (void)updateSelectionWithExtentPoint:(CGPoint)a3 completionHandler:(id)a4
{
  -[WKContentView updateSelectionWithExtentPoint:withBoundary:completionHandler:](self, "updateSelectionWithExtentPoint:withBoundary:completionHandler:", 0, a4, a3.x, a3.y);
}

- (void)updateSelectionWithExtentPoint:(CGPoint)a3 withBoundary:(int64_t)a4 completionHandler:(id)a5
{
  id v8;
  uint64_t v9;
  WebPageProxy *m_ptr;
  char v11;
  char v12;
  BOOL v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WebPageProxy *v18;
  BOOL v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  CGPoint v26;
  char v27;
  CGPoint v28;
  uint64_t *v29;
  char v30;
  BOOL v31;
  uint64_t v32;

  v28 = a3;
  v8 = -[WKContentView textInteractionLoupeGestureRecognizer](self, "textInteractionLoupeGestureRecognizer");
  v26 = v28;
  v27 = 1;
  logTextInteraction((uint64_t)"-[WKContentView(WKInteraction) updateSelectionWithExtentPoint:withBoundary:completionHandler:]", v8, (uint64_t)&v26, 0, 0, 0, 0, v9, 0, 0, 0, 0, 0, 0);
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  if (a4)
  {
    ++self->_dropAnimationCount;
    m_ptr = self->_page.m_ptr;
    WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v23, &v28);
    switch(a4)
    {
      case 1:
        v11 = 1;
        break;
      case 2:
        v11 = 2;
        break;
      case 3:
        v11 = 4;
        break;
      case 4:
        v11 = 3;
        break;
      case 5:
        v11 = 5;
        break;
      default:
        goto LABEL_6;
    }
    goto LABEL_14;
  }
  if (BYTE3(self->_dataListTextSuggestions.m_ptr))
  {
    ++self->_dropAnimationCount;
    m_ptr = self->_page.m_ptr;
    WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v23, &v28);
LABEL_6:
    v11 = 0;
LABEL_14:
    v13 = -[WKContentView _hasFocusedElement](self, "_hasFocusedElement");
    v14 = _Block_copy(a5);
    CFRetain(self);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v15 = off_1E35079C8;
    v15[1] = v14;
    v15[2] = self;
    v24 = v15;
    v32 = v23;
    v16 = *((_QWORD *)m_ptr + 26);
    v29 = &v32;
    v30 = v11;
    v31 = v13;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateSelectionWithExtentPointAndBoundary,WTF::CompletionHandler<void ()(BOOL)>>(v16, (_DWORD **)&v29, (uint64_t *)&v24, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0, 1);
    goto LABEL_15;
  }
  if ((objc_msgSend(-[WKContentView textInteractionLoupeGestureRecognizer](self, "textInteractionLoupeGestureRecognizer"), "_wk_hasRecognizedOrEnded") & 1) != 0|| (objc_msgSend((id)objc_msgSend(self->_mouseInteraction.m_ptr, "mouseTouchGestureRecognizer"), "_wk_hasRecognizedOrEnded") & 1) != 0)
  {
    v12 = 0;
  }
  else
  {
    v12 = objc_msgSend(-[WKContentView textInteractionTapGestureRecognizer](self, "textInteractionTapGestureRecognizer"), "_wk_hasRecognizedOrEnded") ^ 1;
  }
  v18 = self->_page.m_ptr;
  WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v25, &v28);
  v19 = -[WKContentView _hasFocusedElement](self, "_hasFocusedElement");
  v20 = _Block_copy(a5);
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v21 = off_1E35079A0;
  v21[1] = v20;
  v24 = v21;
  v32 = v25;
  v22 = *((_QWORD *)v18 + 26);
  v29 = &v32;
  v30 = v19;
  v31 = v12;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::UpdateSelectionWithExtentPoint,WTF::CompletionHandler<void ()(BOOL)>>(v22, (uint64_t)&v29, (uint64_t *)&v24, *(_QWORD *)(*((_QWORD *)v18 + 4) + 1896), 0, 1);
LABEL_15:
  v17 = (uint64_t)v24;
  v24 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Block_release(0);
}

- (unsigned)_characterInRelationToCaretSelection:(int)a3
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  objc_super v10;

  v3 = *(_QWORD *)&a3;
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v10.receiver = self;
    v10.super_class = (Class)WKContentView;
    return -[WKContentView _characterInRelationToCaretSelection:](&v10, sel__characterInRelationToCaretSelection_, v3);
  }
  if ((_DWORD)v3 == -1 && *((_BYTE *)&self->_domPasteRequestCategory + 4))
    return *(_DWORD *)&self->_domPasteRequestCategory.var0.__null_state_;
  v6 = *((_QWORD *)self->_page.m_ptr + 4);
  if (*(_BYTE *)(v6 + 237))
    v7 = *(_BYTE *)(v6 + 233) == 0;
  else
    v7 = 0;
  if (!v7 || *(_BYTE *)(v6 + 234) != 0 || *(_BYTE *)(v6 + 560) == 0)
    return 0;
  if ((_DWORD)v3 == -2)
    return *(_DWORD *)(v6 + 320);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
      return *(_DWORD *)(v6 + 312);
    return 0;
  }
  return *(_DWORD *)(v6 + 316);
}

- (BOOL)_selectionAtDocumentStart
{
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v4 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315138;
      v6 = "-[WKContentView(WKInteraction) _selectionAtDocumentStart]";
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v5, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x197844D64);
  }
  return -[WKContentView selectionAtDocumentStart](self, "selectionAtDocumentStart");
}

- (CGRect)textFirstRect
{
  uint64_t v2;
  double x;
  double y;
  double width;
  double height;
  CGRect result;

  v2 = *((_QWORD *)self->_page.m_ptr + 4);
  if (*(_BYTE *)(v2 + 241))
  {
    if (*(_BYTE *)(v2 + 688) && *(_DWORD *)(v2 + 652))
    {
      WebCore::SelectionGeometry::rect(*(WebCore::SelectionGeometry **)(v2 + 640));
      WebCore::IntRect::operator CGRect();
    }
    else
    {
      x = *MEMORY[0x1E0C9D648];
      y = *(double *)(MEMORY[0x1E0C9D648] + 8);
      width = *(double *)(MEMORY[0x1E0C9D648] + 16);
      height = *(double *)(MEMORY[0x1E0C9D648] + 24);
    }
  }
  else
  {
    x = self->_autocorrectionData.textFirstRect.origin.x;
    y = self->_autocorrectionData.textFirstRect.origin.y;
    width = self->_autocorrectionData.textFirstRect.size.width;
    height = self->_autocorrectionData.textFirstRect.size.height;
  }
  result.size.height = height;
  result.size.width = width;
  result.origin.y = y;
  result.origin.x = x;
  return result;
}

- (CGRect)textLastRect
{
  uint64_t v2;
  unsigned int v3;
  double x;
  double y;
  double width;
  double height;
  CGRect result;

  v2 = *((_QWORD *)self->_page.m_ptr + 4);
  if (*(_BYTE *)(v2 + 241))
  {
    if (*(_BYTE *)(v2 + 688) && (v3 = *(_DWORD *)(v2 + 652)) != 0)
    {
      WebCore::SelectionGeometry::rect((WebCore::SelectionGeometry *)(*(_QWORD *)(v2 + 640) + 84 * v3 - 84));
      WebCore::IntRect::operator CGRect();
    }
    else
    {
      x = *MEMORY[0x1E0C9D648];
      y = *(double *)(MEMORY[0x1E0C9D648] + 8);
      width = *(double *)(MEMORY[0x1E0C9D648] + 16);
      height = *(double *)(MEMORY[0x1E0C9D648] + 24);
    }
  }
  else
  {
    x = self->_autocorrectionData.textLastRect.origin.x;
    y = self->_autocorrectionData.textLastRect.origin.y;
    width = self->_autocorrectionData.textLastRect.size.width;
    height = self->_autocorrectionData.textLastRect.size.height;
  }
  result.size.height = height;
  result.size.width = width;
  result.origin.y = y;
  result.origin.x = x;
  return result;
}

- (void)willInsertFinalDictationResult
{
  WebPageProxy *m_ptr;
  uint64_t v3;
  char v4;

  m_ptr = self->_page.m_ptr;
  v3 = *((_QWORD *)m_ptr + 26);
  v4 = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::WillInsertFinalDictationResult>(v3, (uint64_t)&v4, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)didInsertFinalDictationResult
{
  WebPageProxy *m_ptr;
  uint64_t v3;
  char v4;

  m_ptr = self->_page.m_ptr;
  v3 = *((_QWORD *)m_ptr + 26);
  v4 = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidInsertFinalDictationResult>(v3, (uint64_t)&v4, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)replaceDictatedText:(id)a3 withText:(id)a4
{
  WebPageProxy *m_ptr;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t *v12[2];

  if (!self->_usingGestureForSelection || !self->_isTapHighlightFading)
  {
    BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
    m_ptr = self->_page.m_ptr;
    MEMORY[0x19AEABCC8](&v11, a3);
    MEMORY[0x19AEABCC8](&v10, a4);
    v6 = *((_QWORD *)m_ptr + 26);
    v12[0] = (uint64_t *)&v11;
    v12[1] = (uint64_t *)&v10;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReplaceDictatedText>(v6, v12, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
    v8 = v10;
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v11;
    v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
}

- (void)applyAutocorrection:(id)a3 toString:(id)a4 isCandidate:(BOOL)a5 withCompletionHandler:(id)a6
{
  _BOOL8 v7;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t v15[24];
  uint64_t v16;

  v7 = a5;
  v16 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v14 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v15 = 136315138;
      *(_QWORD *)&v15[4] = "-[WKContentView(WKInteraction) applyAutocorrection:toString:isCandidate:withCompletionHandler:]";
      _os_log_error_impl(&dword_196BCC000, v14, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", v15, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x197845190);
  }
  v11 = _Block_copy(a6);
  if (self)
    CFRetain(self);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E35079F0;
  v12[1] = v11;
  v12[2] = self;
  *(_QWORD *)v15 = v12;
  -[WKContentView _internalReplaceText:withText:isCandidate:completion:](self, "_internalReplaceText:withText:isCandidate:completion:", a4, a3, v7, v15);
  v13 = *(_QWORD *)v15;
  *(_QWORD *)v15 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Block_release(0);
}

- (void)_internalReplaceText:(id)a3 withText:(id)a4 isCandidate:(BOOL)a5 completion:(void *)a6
{
  _BOOL4 v11;
  uint64_t v12;
  WebPageProxy *m_ptr;
  _BOOL8 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;

  v11 = -[WKContentView _disableAutomaticKeyboardUI](self, "_disableAutomaticKeyboardUI");
  v12 = *(_QWORD *)a6;
  if (v11)
  {
    if (v12)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
  }
  else if (v12)
  {
    m_ptr = self->_page.m_ptr;
    MEMORY[0x19AEABCC8](&v19, a4);
    MEMORY[0x19AEABCC8](&v18, a3);
    v14 = WebKit::WebPageProxy::applyAutocorrection((WebKit::WebPageProxy *)m_ptr, (const WTF::String *)&v19, (const WTF::String *)&v18, a5);
    (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)a6 + 16))(*(_QWORD *)a6, v14);
    v16 = v18;
    v18 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v19;
    v19 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
}

- (void)applyAutocorrection:(id)a3 toString:(id)a4 withCompletionHandler:(id)a5
{
  -[WKContentView applyAutocorrection:toString:isCandidate:withCompletionHandler:](self, "applyAutocorrection:toString:isCandidate:withCompletionHandler:", a3, a4, 0, a5);
}

- (void)_cancelPendingAutocorrectionContextHandler
{
  unint64_t activeTextInteractionCount;

  activeTextInteractionCount = self->_activeTextInteractionCount;
  self->_activeTextInteractionCount = 0;
  if (activeTextInteractionCount)
  {
    (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)activeTextInteractionCount + 16))(activeTextInteractionCount, 0);
    (*(void (**)(unint64_t))(*(_QWORD *)activeTextInteractionCount + 8))(activeTextInteractionCount);
  }
}

- (void)requestAutocorrectionContextWithCompletionHandler:(id)a3
{
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t buf[24];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v8 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[WKContentView(WKInteraction) requestAutocorrectionContextWithCompletionHandler:]";
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", buf, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784553CLL);
  }
  if (a3)
  {
    v5 = _Block_copy(a3);
    if (self)
      CFRetain(self);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = off_1E3507A18;
    v6[1] = v5;
    v6[2] = self;
    *(_QWORD *)buf = v6;
    -[WKContentView _internalRequestAutocorrectionContextWithCompletionHandler:](self, "_internalRequestAutocorrectionContextWithCompletionHandler:", buf);
    v7 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    _Block_release(0);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Expected a nonnull completion handler in %s."), "-[WKContentView(WKInteraction) requestAutocorrectionContextWithCompletionHandler:]");
  }
}

- (void)_internalRequestAutocorrectionContextWithCompletionHandler:(void *)a3
{
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  char v9;
  unint64_t v10;
  WebPageProxy *m_ptr;
  unint64_t activeTextInteractionCount;
  unint64_t v13;
  WebPageProxy *v14;
  uint64_t v15;
  WTF::ApproximateTime *v16;
  WebPageProxy *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  int v21;
  int v22;
  unsigned __int8 v23;
  NSObject *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  char v28;

  v5 = *((_QWORD *)self->_page.m_ptr + 4);
  v6 = *(unsigned __int8 *)(v5 + 560);
  v7 = *(unsigned __int8 *)(v5 + 364);
  if (v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  v9 = !v8;
  if (objc_msgSend(MEMORY[0x1E0CEA6C8], "usesInputSystemUI") && (v9 & 1) == 0
    || -[WKContentView _disableAutomaticKeyboardUI](self, "_disableAutomaticKeyboardUI")
    || (m_ptr = self->_page.m_ptr, *((_BYTE *)m_ptr + 729))
    || !*((_BYTE *)m_ptr + 728))
  {
    v10 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
LABEL_18:
    (*(void (**)(unint64_t))(*(_QWORD *)v10 + 8))(v10);
    return;
  }
  if ((WebKit::WebPageProxy::shouldAvoidSynchronouslyWaitingToPreventDeadlock((WebKit::WebPageProxy *)m_ptr) & 1) != 0
    || *(_QWORD *)&self->_hasSetUpInteractions
    || self->_selectionNeedsUpdate
    || !BYTE4(self->_dataListSuggestionsControl.m_weakReference))
  {
    v10 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 1);
    goto LABEL_18;
  }
  activeTextInteractionCount = self->_activeTextInteractionCount;
  v10 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  if (activeTextInteractionCount)
  {
    (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
    goto LABEL_18;
  }
  v13 = self->_activeTextInteractionCount;
  self->_activeTextInteractionCount = v10;
  if (v13)
    (*(void (**)(unint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = self->_page.m_ptr;
  v15 = *((_QWORD *)v14 + 26);
  LOBYTE(v26) = 0;
  v16 = (WTF::ApproximateTime *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HandleAutocorrectionContextRequest>(v15, (uint64_t)&v26, *(_QWORD *)(*((_QWORD *)v14 + 4) + 1896), 0);
  v17 = self->_page.m_ptr;
  v18 = *(_QWORD *)(*((_QWORD *)v17 + 26) + 144);
  v19 = *(_QWORD *)(*((_QWORD *)v17 + 4) + 1896);
  WTF::ApproximateTime::now(v16);
  IPC::Connection::waitForMessage((unsigned __int8 ***)v18, 0x799u, v19, 2, (uint64_t)&v26, v20 + 1.0);
  v21 = v27;
  if (v27)
  {
    if (v27 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return;
    }
    v22 = v26;
    goto LABEL_31;
  }
  v23 = atomic_load((unsigned __int8 *)(v18 + 33));
  v21 = v27;
  if ((v23 & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v18 + 8) + 16))(*(_QWORD *)(v18 + 8), v18, v26);
    v22 = 0;
    v21 = v27;
  }
  else
  {
    v22 = 1;
  }
  if (v21 != -1)
LABEL_31:
    ((void (*)(char *, uint64_t *))off_1E3507520[v21])(&v28, &v26);
  if (v22)
  {
    v24 = qword_1ECE71988;
    if (os_log_type_enabled((os_log_t)qword_1ECE71988, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v26) = 0;
      _os_log_impl(&dword_196BCC000, v24, OS_LOG_TYPE_DEFAULT, "Timed out while waiting for autocorrection context.", (uint8_t *)&v26, 2u);
    }
  }
  if (BYTE4(self->_dataListSuggestionsControl.m_weakReference))
  {
    -[WKContentView _cancelPendingAutocorrectionContextHandler](self, "_cancelPendingAutocorrectionContextHandler");
  }
  else
  {
    v25 = self->_activeTextInteractionCount;
    self->_activeTextInteractionCount = 0;
    if (v25)
    {
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, 1);
      (*(void (**)(unint64_t))(*(_QWORD *)v25 + 8))(v25);
    }
  }
}

- (void)_handleAutocorrectionContext:(const void *)a3
{
  WebAutocorrectionContext *p_lastAutocorrectionContext;

  p_lastAutocorrectionContext = &self->_lastAutocorrectionContext;
  WTF::String::operator=((WTF::StringImpl **)&self->_lastAutocorrectionContext, (WTF::StringImpl *)a3);
  WTF::String::operator=((WTF::StringImpl **)&p_lastAutocorrectionContext->markedText, (WTF::StringImpl *)((char *)a3 + 8));
  WTF::String::operator=((WTF::StringImpl **)&p_lastAutocorrectionContext->selectedText, (WTF::StringImpl *)((char *)a3 + 16));
  WTF::String::operator=((WTF::StringImpl **)&p_lastAutocorrectionContext->contextAfter, (WTF::StringImpl *)((char *)a3 + 24));
  p_lastAutocorrectionContext->selectedRangeInMarkedText = (EditingRange)*((_OWORD *)a3 + 2);
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 0;
  -[WKContentView unsuppressSoftwareKeyboardUsingLastAutocorrectionContextIfNeeded](self, "unsuppressSoftwareKeyboardUsingLastAutocorrectionContextIfNeeded");
}

- (void)updateSoftwareKeyboardSuppressionStateFromWebView
{
  _BOOL4 hasTapHighlightForPotentialTap;
  WebPageProxy *m_ptr;
  uint64_t v5;
  char v6;

  if (objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_suppressSoftwareKeyboard"))
  {
    self->_hasTapHighlightForPotentialTap = 0;
    -[WKContentView _setSuppressSoftwareKeyboard:](self, "_setSuppressSoftwareKeyboard:", 1);
  }
  else if (-[WKContentView _suppressSoftwareKeyboard](self, "_suppressSoftwareKeyboard"))
  {
    hasTapHighlightForPotentialTap = self->_hasTapHighlightForPotentialTap;
    self->_hasTapHighlightForPotentialTap = 1;
    if (!hasTapHighlightForPotentialTap)
    {
      m_ptr = self->_page.m_ptr;
      v5 = *((_QWORD *)m_ptr + 26);
      v6 = 0;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HandleAutocorrectionContextRequest>(v5, (uint64_t)&v6, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
    }
  }
}

- (void)unsuppressSoftwareKeyboardUsingLastAutocorrectionContextIfNeeded
{
  _BOOL4 hasTapHighlightForPotentialTap;
  BOOL selectionNeedsUpdate;

  hasTapHighlightForPotentialTap = self->_hasTapHighlightForPotentialTap;
  self->_hasTapHighlightForPotentialTap = 0;
  if (hasTapHighlightForPotentialTap)
  {
    selectionNeedsUpdate = self->_selectionNeedsUpdate;
    self->_selectionNeedsUpdate = 1;
    -[WKContentView _setSuppressSoftwareKeyboard:](self, "_setSuppressSoftwareKeyboard:", 0);
    self->_selectionNeedsUpdate = selectionNeedsUpdate;
  }
}

- (void)runModalJavaScriptDialog:(void *)a3
{
  int64_t v3;
  int64_t suppressNonEditableSingleTapTextInteractionCount;

  if (!self->_potentialTapInProgress)
  {
    suppressNonEditableSingleTapTextInteractionCount = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    (*(void (**)(int64_t, SEL))(*(_QWORD *)suppressNonEditableSingleTapTextInteractionCount + 16))(suppressNonEditableSingleTapTextInteractionCount, a2);
    goto LABEL_5;
  }
  v3 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  suppressNonEditableSingleTapTextInteractionCount = self->_suppressNonEditableSingleTapTextInteractionCount;
  self->_suppressNonEditableSingleTapTextInteractionCount = v3;
  if (suppressNonEditableSingleTapTextInteractionCount)
LABEL_5:
    (*(void (**)(int64_t))(*(_QWORD *)suppressNonEditableSingleTapTextInteractionCount + 8))(suppressNonEditableSingleTapTextInteractionCount);
}

- (void)_nextAccessoryTabForWebView:(id)a3
{
  -[WKContentView accessoryTab:](self, "accessoryTab:", 1);
}

- (void)_previousAccessoryTabForWebView:(id)a3
{
  -[WKContentView accessoryTab:](self, "accessoryTab:", 0);
}

- (void)_becomeFirstResponderWithSelectionMovingForward:(BOOL)a3 completionHandler:(id)a4
{
  WebPageProxy *m_ptr;
  void *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  _BYTE v12[96];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  m_ptr = self->_page.m_ptr;
  v12[0] = 0;
  v13 = 0;
  CFRetain(self);
  v8 = _Block_copy(a4);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = off_1E3507A40;
  v9[1] = self;
  v9[2] = v8;
  v11 = v9;
  WebKit::WebPageProxy::setInitialFocus((uint64_t)m_ptr, a3, 0, (uint64_t)v12, (uint64_t *)&v11);
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  _Block_release(0);
  if (v13)
    WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)v12, v10);
}

- (Color)_tapHighlightColorForFastClick:(BOOL)a3
{
  uint64_t *v3;
  unsigned int v4;

  if (a3)
    v4 = 2130764032;
  else
    v4 = 2130706657;
  *v3 = bswap32(v4) | 0x1104000000000000;
  return (Color)self;
}

- (void)accessoryDone
{
  -[WKContentView accessoryViewDone:](self, "accessoryViewDone:", self->_formAccessoryView.m_ptr);
}

- (void)accessoryViewDone:(id)a3
{
  NSObject *v4;
  WebPageProxy *m_ptr;
  uint64_t v6;
  uint8_t v7[15];
  char v8;

  if (objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_resetFocusPreservationCount"))
  {
    v4 = qword_1ECE71A28;
    if (os_log_type_enabled((os_log_t)qword_1ECE71A28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Keyboard dismissed with nonzero focus preservation count; check for unbalanced calls to -_incrementFocusPreservationCount",
        v7,
        2u);
    }
  }
  -[WKContentView stopRelinquishingFirstResponderToFocusedElement](self, "stopRelinquishingFirstResponderToFocusedElement");
  -[WKContentView endEditingAndUpdateFocusAppearanceWithReason:](self, "endEditingAndUpdateFocusAppearanceWithReason:", 0);
  m_ptr = self->_page.m_ptr;
  v6 = *((_QWORD *)m_ptr + 26);
  v8 = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsShowingInputViewForFocusedElement>(v6, &v8, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)updateFocusedElementValue:(id)a3
{
  WebPageProxy *m_ptr;
  FocusedElementInformation *p_focusedElementInformation;
  ElementContext *p_elementContext;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *m_size;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16[2];

  m_ptr = self->_page.m_ptr;
  p_focusedElementInformation = &self->_focusedElementInformation;
  p_elementContext = &self->_focusedElementInformation.elementContext;
  MEMORY[0x19AEABCC8](&v15, a3);
  v7 = *((_QWORD *)m_ptr + 26);
  v16[0] = (WTF::StringImpl *)p_elementContext;
  v16[1] = (WTF::StringImpl *)&v15;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetFocusedElementValue>(v7, (uint64_t)v16, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
  v9 = v15;
  v15 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  MEMORY[0x19AEABCC8](v16, a3);
  v11 = v16[0];
  v16[0] = 0;
  m_size = (WTF::StringImpl *)p_focusedElementInformation[3].interactionRect.m_size;
  p_focusedElementInformation[3].interactionRect.m_size = (IntSize)v11;
  if (m_size)
  {
    v13 = *(_DWORD *)m_size - 2;
    if (*(_DWORD *)m_size == 2)
    {
      WTF::StringImpl::destroy(m_size, v10);
      m_size = v16[0];
      v16[0] = 0;
      if (!m_size)
        return;
      v13 = *(_DWORD *)m_size - 2;
      if (*(_DWORD *)m_size == 2)
      {
        WTF::StringImpl::destroy(m_size, v14);
        return;
      }
    }
    *(_DWORD *)m_size = v13;
  }
}

- (void)updateFocusedElementValueAsColor:(id)a3
{
  WebCore *v4;
  CGColor *v5;
  uint64_t v6;
  const Color *v7;
  uint64_t v8;
  WebPageProxy *m_ptr;
  FocusedElementInformation *p_focusedElementInformation;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _QWORD v19[2];

  v4 = (WebCore *)objc_msgSend(a3, "CGColor");
  v6 = WebCore::roundAndClampToSRGBALossy(v4, v5);
  v8 = bswap32(v6) | 0x1104000000000000;
  if (!BYTE4(v6))
    v8 = 0;
  v18 = v8;
  WebCore::serializationForHTML((WebCore *)&v18, v7);
  m_ptr = self->_page.m_ptr;
  p_focusedElementInformation = &self->_focusedElementInformation;
  v11 = *((_QWORD *)m_ptr + 26);
  v19[0] = &p_focusedElementInformation->elementContext;
  v19[1] = &v17;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetFocusedElementValue>(v11, (uint64_t)v19, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
  WTF::String::operator=((WTF::StringImpl **)&p_focusedElementInformation[3].interactionRect.m_size, (WTF::StringImpl *)&v17);
  WebCore::Color::operator=();
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if ((v18 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v12);
    }
  }
}

- (void)updateFocusedElementSelectedIndex:(unsigned int)a3 allowsMultipleSelection:(BOOL)a4
{
  WebPageProxy *m_ptr;
  ElementContext *p_elementContext;
  uint64_t v6;
  ElementContext *v7;
  unsigned int v8;
  BOOL v9;

  m_ptr = self->_page.m_ptr;
  p_elementContext = &self->_focusedElementInformation.elementContext;
  v6 = *((_QWORD *)m_ptr + 26);
  v7 = p_elementContext;
  v8 = a3;
  v9 = a4;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetFocusedElementSelectedIndex>(v6, (uint64_t *)&v7, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)updateFocusedElementFocusedWithDataListDropdown:(BOOL)a3
{
  self->_anon_938[257] = a3;
  -[WKContentView reloadInputViews](self, "reloadInputViews");
}

- (void)accessoryTab:(BOOL)a3
{
  -[WKContentView accessoryView:tabInDirection:](self, "accessoryView:tabInDirection:", self->_formAccessoryView.m_ptr, !a3);
}

- (void)accessoryView:(id)a3 tabInDirection:(BOOL)a4
{
  void *m_ptr;
  WebPageProxy *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  -[WKContentView _endEditing](self, "_endEditing", a3);
  m_ptr = self->_inputPeripheral.m_ptr;
  self->_inputPeripheral.m_ptr = 0;
  if (m_ptr)
    CFRelease(m_ptr);
  BYTE5(self->_dataListTextSuggestions.m_ptr) = 1;
  -[WKContentView _internalBeginSelectionChange](self, "_internalBeginSelectionChange");
  v7 = self->_page.m_ptr;
  CFRetain(self);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E3507A68;
  v8[1] = self;
  v10 = v8;
  WebKit::WebPageProxy::focusNextFocusedElement((uint64_t)v7, !a4, (uint64_t *)&v10);
  v9 = (uint64_t)v10;
  v10 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

- (void)accessoryViewAutoFill:(id)a3
{
  void *v4;

  v4 = (void *)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_inputDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v4, "_webView:accessoryViewCustomButtonTappedInFormInputSession:", -[WKContentView webView](self, "webView"), self->_formInputSession.m_ptr);
}

- (WKFormAccessoryView)formAccessoryView
{
  WKFormAccessoryView *result;
  void *m_ptr;

  if ((PAL::currentUserInterfaceIdiomIsVision((PAL *)self) & 1) != 0)
    return 0;
  result = (WKFormAccessoryView *)self->_formAccessoryView.m_ptr;
  if (!result)
  {
    result = -[WKFormAccessoryView initWithInputAssistantItem:delegate:]([WKFormAccessoryView alloc], "initWithInputAssistantItem:delegate:", -[WKContentView inputAssistantItem](self, "inputAssistantItem"), self);
    m_ptr = self->_formAccessoryView.m_ptr;
    self->_formAccessoryView.m_ptr = result;
    if (m_ptr)
    {
      CFRelease(m_ptr);
      return (WKFormAccessoryView *)self->_formAccessoryView.m_ptr;
    }
  }
  return result;
}

- (void)accessoryOpen
{
  if (self->_inputPeripheral.m_ptr)
  {
    -[WKContentView _zoomToRevealFocusedElement](self, "_zoomToRevealFocusedElement");
    -[WKContentView _updateAccessory](self, "_updateAccessory");
    objc_msgSend(self->_inputPeripheral.m_ptr, "beginEditing");
  }
}

- (void)_updateAccessory
{
  WKFormAccessoryView *v3;

  if (!self->_showDebugTapHighlightsForFastClicking)
  {
    self->_showDebugTapHighlightsForFastClicking = 1;
    v3 = -[WKContentView formAccessoryView](self, "formAccessoryView");
    if ((objc_opt_respondsToSelector() & 1) != 0)
      -[WKFormAccessoryView setNextPreviousItemsVisible:](v3, "setNextPreviousItemsVisible:", objc_msgSend(-[WKContentView webView](self, "webView"), "_isEditable") ^ 1);
    -[WKFormAccessoryView setNextEnabled:](v3, "setNextEnabled:", self->_anon_938[64]);
    -[WKFormAccessoryView setPreviousEnabled:](v3, "setPreviousEnabled:", self->_anon_938[84]);
    self->_showDebugTapHighlightsForFastClicking = 0;
  }
}

- (BOOL)_allowAnimatedUpdateSelectionRectViews
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v3 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = "-[WKContentView(WKInteraction) _allowAnimatedUpdateSelectionRectViews]";
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v4, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x1978463D8);
  }
  return 0;
}

- (void)beginSelectionChange
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v3 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = "-[WKContentView(WKInteraction) beginSelectionChange]";
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v4, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x1978464A8);
  }
  -[WKContentView _internalBeginSelectionChange](self, "_internalBeginSelectionChange");
}

- (void)_internalBeginSelectionChange
{
  -[WKContentView _updateInternalStateBeforeSelectionChange](self, "_updateInternalStateBeforeSelectionChange");
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
    objc_msgSend(objc_loadWeak((id *)&self->_anon_fa8[24]), "selectionWillChangeForTextInput:", -[WKContentView asBETextInput](self, "asBETextInput"));
  else
    -[UITextInputDelegate selectionWillChange:](-[WKContentView inputDelegate](self, "inputDelegate"), "selectionWillChange:", self);
}

- (void)_updateInternalStateBeforeSelectionChange
{
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  ++LODWORD(self->_pendingAutocorrectionContextHandler.m_function.m_callableWrapper.__ptr_.__value_);
}

- (void)endSelectionChange
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v3 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = "-[WKContentView(WKInteraction) endSelectionChange]";
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v4, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x197846608);
  }
  -[WKContentView _internalEndSelectionChange](self, "_internalEndSelectionChange");
}

- (void)_internalEndSelectionChange
{
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
    objc_msgSend(objc_loadWeak((id *)&self->_anon_fa8[24]), "selectionDidChangeForTextInput:", -[WKContentView asBETextInput](self, "asBETextInput"));
  else
    -[UITextInputDelegate selectionDidChange:](-[WKContentView inputDelegate](self, "inputDelegate"), "selectionDidChange:", self);
  -[WKContentView _updateInternalStateAfterSelectionChange](self, "_updateInternalStateAfterSelectionChange");
}

- (void)_updateInternalStateAfterSelectionChange
{
  int value;

  value = (int)self->_pendingAutocorrectionContextHandler.m_function.m_callableWrapper.__ptr_.__value_;
  if (value)
    LODWORD(self->_pendingAutocorrectionContextHandler.m_function.m_callableWrapper.__ptr_.__value_) = value - 1;
}

- (void)willFinishIgnoringCalloutBarFadeAfterPerformingAction
{
  WebPageProxy *m_ptr;
  uint64_t v4;
  id v5;
  uint64_t v6;

  ++*(_QWORD *)&self->_isUnsuppressingSoftwareKeyboardUsingLastAutocorrectionContext;
  WebKit::WebPageProxy::scheduleFullEditorStateUpdate((uint64_t)self->_page.m_ptr);
  m_ptr = self->_page.m_ptr;
  v5 = 0;
  objc_initWeak(&v5, self);
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E3507A90;
  *(_QWORD *)(v4 + 8) = 0;
  objc_moveWeak((id *)(v4 + 8), &v5);
  v6 = v4;
  WebKit::WebPageProxy::callAfterNextPresentationUpdate((uint64_t)m_ptr, &v6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  objc_destroyWeak(&v5);
}

- (void)_didChangeWebViewEditability
{
  int v3;
  _QWORD block[5];

  v3 = objc_msgSend(-[WKContentView webView](self, "webView"), "_isEditable");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(self->_formAccessoryView.m_ptr, "setNextPreviousItemsVisible:", v3 ^ 1u);
  objc_msgSend(self->_twoFingerSingleTapGestureRecognizer.m_ptr, "setEnabled:", v3 ^ 1u);
  if (v3)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __60__WKContentView_WKInteraction___didChangeWebViewEditability__block_invoke;
    block[3] = &unk_1E34BAF80;
    block[4] = self;
    if (-[WKContentView(WKInteraction) _didChangeWebViewEditability]::onceToken != -1)
      dispatch_once(&-[WKContentView(WKInteraction) _didChangeWebViewEditability]::onceToken, block);
  }
}

BOOL __60__WKContentView_WKInteraction___didChangeWebViewEditability__block_invoke()
{
  objc_class *v0;

  v0 = (objc_class *)objc_opt_class();
  return class_addProtocol(v0, (Protocol *)&unk_1EE3C8640);
}

- (void)insertTextSuggestion:(id)a3
{
  char isKindOfClass;
  WebPageProxy *m_ptr;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  void *v11;
  void *v12;
  WebPageProxy *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebPageProxy *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  void *v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t *p_elementContext;
  WTF::StringImpl **v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (a3 && (isKindOfClass & 1) != 0)
  {
    CFRetain(a3);
    m_ptr = self->_page.m_ptr;
    MEMORY[0x19AEABCC8](&v37, objc_msgSend(a3, "username"));
    MEMORY[0x19AEABCC8](&v36, objc_msgSend(a3, "password"));
    v7 = *((_QWORD *)m_ptr + 26);
    p_elementContext = (uint64_t *)&v37;
    v39 = &v36;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AutofillLoginCredentials>(v7, &p_elementContext, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
    v9 = v36;
    v36 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v24 = v37;
    v37 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v8);
      else
        *(_DWORD *)v24 -= 2;
    }
    goto LABEL_54;
  }
  objc_opt_class();
  v10 = objc_opt_isKindOfClass();
  if (a3 && (v10 & 1) != 0)
  {
    CFRetain(a3);
    v11 = (void *)objc_msgSend(a3, "contents");
    v12 = v11;
    if (v11)
      CFRetain(v11);
    v13 = self->_page.m_ptr;
    MEMORY[0x19AEABCC8](&v37, objc_msgSend(v12, "objectForKey:", *MEMORY[0x1E0CEBD10]));
    MEMORY[0x19AEABCC8](&v36, objc_msgSend(v12, "objectForKey:", *MEMORY[0x1E0CEBCD0]));
    v14 = *((_QWORD *)v13 + 26);
    p_elementContext = (uint64_t *)&v37;
    v39 = &v36;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::AutofillLoginCredentials>(v14, &p_elementContext, *(_QWORD *)(*((_QWORD *)v13 + 4) + 1896), 0);
    v16 = v36;
    v36 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v25 = v37;
    v37 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v15);
        if (!v12)
        {
LABEL_54:
          CFRelease(a3);
          return;
        }
LABEL_38:
        CFRelease(v12);
        goto LABEL_54;
      }
      *(_DWORD *)v25 -= 2;
    }
    if (!v12)
      goto LABEL_54;
    goto LABEL_38;
  }
  if (!objc_msgSend(self->_keyboardScrollingAnimator.m_ptr, "count")
    || objc_msgSend((id)objc_msgSend(self->_formInputSession.m_ptr, "suggestions"), "count"))
  {
    goto LABEL_57;
  }
  v17 = (void *)objc_msgSend(a3, "inputText");
  v18 = v17;
  if (v17)
    CFRetain(v17);
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v19 = self->_keyboardScrollingAnimator.m_ptr;
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
  if (v20)
  {
    v21 = *(_QWORD *)v33;
    while (2)
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v33 != v21)
          objc_enumerationMutation(v19);
        if (objc_msgSend(v18, "isEqualToString:", objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * i), "inputText")))
        {
          v26 = self->_page.m_ptr;
          MEMORY[0x19AEABCC8](&v37, v18);
          v27 = *((_QWORD *)v26 + 26);
          p_elementContext = (uint64_t *)&self->_focusedElementInformation.elementContext;
          v39 = &v37;
          WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetFocusedElementValue>(v27, (uint64_t)&p_elementContext, *(_QWORD *)(*((_QWORD *)v26 + 4) + 1896), 0);
          v29 = v37;
          v37 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v28);
            else
              *(_DWORD *)v29 -= 2;
          }
          v23 = 0;
          goto LABEL_44;
        }
      }
      v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
      if (v20)
        continue;
      break;
    }
  }
  v23 = 1;
LABEL_44:
  if (v18)
    CFRelease(v18);
  if ((v23 & 1) != 0)
  {
LABEL_57:
    v30 = (void *)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_inputDelegate");
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_opt_class();
      if (((a3 != 0) & objc_opt_isKindOfClass()) == 1)
      {
        a3 = (id)objc_msgSend(a3, "_uikitTextSuggestion");
        if (!a3)
        {
LABEL_50:
          v31 = 0;
          goto LABEL_53;
        }
      }
      else if (!a3)
      {
        goto LABEL_50;
      }
      CFRetain(a3);
      v31 = a3;
LABEL_53:
      objc_msgSend(v30, "_webView:insertTextSuggestion:inInputSession:", -[WKContentView webView](self, "webView"), v31, self->_formInputSession.m_ptr);
      a3 = v31;
      if (!v31)
        return;
      goto LABEL_54;
    }
  }
}

- (id)textInRange:(id)a3
{
  WebPageProxy *m_ptr;
  uint64_t v4;
  char isKindOfClass;
  const __CFString *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  char v25;
  unsigned int v26;

  m_ptr = self->_page.m_ptr;
  if (m_ptr)
  {
    v4 = *((_QWORD *)m_ptr + 4);
    if (*(_BYTE *)(v4 + 560))
    {
      if (-[WKContentView selectedTextRange](self, "selectedTextRange") == a3 && *(_BYTE *)(v4 + 234))
      {
        if (*(_BYTE *)(v4 + 560))
        {
          if (*(_QWORD *)(v4 + 304))
            return (id)WTF::StringImpl::operator NSString *();
          return &stru_1E351F1B8;
        }
LABEL_46:
        __break(1u);
        return &stru_1E351F1B8;
      }
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      v9 = 0;
      if (!a3 || (isKindOfClass & 1) == 0)
        return (id)v9;
      if (!*(_BYTE *)(v4 + 560))
        goto LABEL_46;
      v10 = *(_QWORD *)&self->_domPasteRequestCategory.var0.__null_state_;
      v11 = (void *)objc_msgSend(a3, "start");
      v12 = objc_msgSend(a3, "end");
      v9 = 0;
      if (!v11)
        return (id)v9;
      v13 = (void *)v12;
      if (!v12)
        return (id)v9;
      if (objc_msgSend(v11, "isRelativeToStart") && objc_msgSend(v13, "isRelativeToStart"))
      {
        v14 = objc_msgSend(v11, "offset");
        v15 = objc_msgSend(v13, "offset");
        v9 = 0;
        if (v14 >= -2)
        {
          v16 = v15;
          if (v15 <= 1 && v15 > v14)
          {
            v22 = 0;
            v23 = 0;
            v24 = 0;
            v25 = 1;
            WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v22);
            do
            {
              if (v14)
              {
                if (v14 == -1)
                {
                  v17 = *(_DWORD *)(v4 + 316);
                  if ((v10 & 0xFF00000000) != 0)
                    v17 = v10;
                  if (v17)
                  {
                    v26 = v17;
                    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char32_t,void>>((WTF::StringBuilder *)&v22, &v26);
                  }
                }
                else if (v14 == -2 && *(_DWORD *)(v4 + 320))
                {
                  v26 = *(_DWORD *)(v4 + 320);
                  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char32_t,void>>((WTF::StringBuilder *)&v22, &v26);
                }
              }
              else if (*(_DWORD *)(v4 + 312))
              {
                v26 = *(_DWORD *)(v4 + 312);
                WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char32_t,void>>((WTF::StringBuilder *)&v22, &v26);
              }
              ++v14;
            }
            while (v16 != v14);
            v18 = v22;
            if (v22
              || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v22),
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v22),
                  (v18 = v22) != 0))
            {
              *(_DWORD *)v18 += 2;
              v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, v19);
              else
                *(_DWORD *)v18 -= 2;
            }
            else
            {
              v9 = &stru_1E351F1B8;
            }
            v20 = v23;
            v23 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v19);
              else
                *(_DWORD *)v20 -= 2;
            }
            v21 = v22;
            v22 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v19);
              else
                *(_DWORD *)v21 -= 2;
            }
          }
        }
        return (id)v9;
      }
    }
  }
  return 0;
}

- (FloatRect)_scaledCaretRectForSelectionStart:(FloatRect)a3
{
  float m_height;
  float m_width;
  float m_y;
  float m_x;
  double v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  FloatRect result;

  m_height = a3.m_size.m_height;
  m_width = a3.m_size.m_width;
  m_y = a3.m_location.m_y;
  m_x = a3.m_location.m_x;
  -[WKContentView inverseScale](self, "inverseScale");
  v8 = v7 * m_height;
  v9 = v7 * m_width;
  if (m_width < m_height)
    v10 = v9;
  else
    v10 = m_width;
  if (m_width < m_height)
    v11 = m_height;
  else
    v11 = v8;
  v12 = m_x;
  v13 = m_y;
  result.m_size.m_height = v11;
  result.m_size.m_width = v10;
  result.m_location.m_y = v13;
  result.m_location.m_x = v12;
  return result;
}

- (FloatRect)_scaledCaretRectForSelectionEnd:(FloatRect)a3
{
  float m_height;
  float m_width;
  float m_y;
  float m_x;
  double v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  FloatRect result;

  m_height = a3.m_size.m_height;
  m_width = a3.m_size.m_width;
  m_y = a3.m_location.m_y;
  m_x = a3.m_location.m_x;
  -[WKContentView inverseScale](self, "inverseScale");
  v8 = v7 * m_height;
  v9 = v7 * m_width;
  if (m_width < m_height)
    v10 = 0.0;
  else
    v10 = v8 - m_height;
  if (m_width < m_height)
    v11 = m_height;
  else
    v11 = v8;
  if (m_width < m_height)
    v12 = v9;
  else
    v12 = m_width;
  if (m_width < m_height)
    v13 = v9 - m_width;
  else
    v13 = 0.0;
  v14 = m_y + v10;
  v15 = m_x + v13;
  result.m_size.m_height = v11;
  result.m_size.m_width = v12;
  result.m_location.m_y = v14;
  result.m_location.m_x = v15;
  return result;
}

- (CGRect)caretRectForPosition:(id)a3
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  CGRect result;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = a3;
  else
    v4 = 0;
  objc_msgSend(v4, "positionRect");
  result.size.height = v8;
  result.size.width = v7;
  result.origin.y = v6;
  result.origin.x = v5;
  return result;
}

- (id)selectionRectsForRange:(id)a3
{
  id v4;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = a3;
  else
    v4 = 0;
  return (id)objc_msgSend(v4, "selectionRects");
}

- (void)setSelectedTextRange:(id)a3
{
  if (!a3)
  {
    if (-[WKContentView _hasFocusedElement](self, "_hasFocusedElement"))
      -[WKContentView _internalClearSelection](self, "_internalClearSelection");
  }
}

- (BOOL)hasMarkedText
{
  return objc_msgSend(self->_markedText.m_ptr, "length") != 0;
}

- (id)markedText
{
  return self->_markedText.m_ptr;
}

- (UITextRange)markedTextRange
{
  uint64_t v2;
  BOOL v3;
  __int128 v5;
  _BOOL4 v6;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  int v15;
  int v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  int v23;
  int v24;
  int v25;
  double v26;
  CFTypeRef v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  CFTypeRef v42;
  _BOOL4 v43;
  _DWORD v44[8];
  _DWORD v45[8];
  __int128 v46;
  __int128 v47;

  v2 = *((_QWORD *)self->_page.m_ptr + 4);
  if (*(_BYTE *)(v2 + 241))
    v3 = *(_BYTE *)(v2 + 560) == 0;
  else
    v3 = 1;
  if (v3 || !*(_BYTE *)(v2 + 688))
    return 0;
  v5 = *(_OWORD *)(v2 + 672);
  v47 = *(_OWORD *)(v2 + 656);
  v46 = v5;
  v6 = 1;
  if ((_QWORD)v47 == (_QWORD)v5)
    v6 = DWORD2(v47) != DWORD2(v46) || HIDWORD(v47) != HIDWORD(v46);
  v43 = v6;
  v9 = *(unsigned __int8 *)(v2 + 237);
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v45, (const WebCore::IntRect *)&v47);
  LODWORD(v10) = v45[0];
  LODWORD(v11) = v45[1];
  LODWORD(v12) = v45[2];
  LODWORD(v13) = v45[3];
  -[WKContentView _scaledCaretRectForSelectionStart:](self, "_scaledCaretRectForSelectionStart:", v10, v11, v12, v13);
  v45[4] = v14;
  v45[5] = v15;
  v45[6] = v16;
  v45[7] = v17;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v44, (const WebCore::IntRect *)&v46);
  LODWORD(v18) = v44[0];
  LODWORD(v19) = v44[1];
  LODWORD(v20) = v44[2];
  LODWORD(v21) = v44[3];
  -[WKContentView _scaledCaretRectForSelectionEnd:](self, "_scaledCaretRectForSelectionEnd:", v18, v19, v20, v21);
  v44[4] = v22;
  v44[5] = v23;
  v44[6] = v24;
  v44[7] = v25;
  -[WKContentView _contentZoomScale](self, "_contentZoomScale");
  v27 = textSelectionRects((uint64_t *)(v2 + 640), v26);
  v28 = *(_QWORD *)(v2 + 296);
  v42 = v27;
  if (v28)
    v29 = *(unsigned int *)(v28 + 4);
  else
    v29 = 0;
  WebCore::FloatRect::operator CGRect();
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;
  WebCore::FloatRect::operator CGRect();
  return (UITextRange *)+[WKTextRange textRangeWithState:isRange:isEditable:startRect:endRect:selectionRects:selectedTextLength:](WKTextRange, "textRangeWithState:isRange:isEditable:startRect:endRect:selectionRects:selectedTextLength:", 0, v43, v9 != 0, v42, v29, v31, v33, v35, v37, v38, v39, v40, v41);
}

- (NSDictionary)markedTextStyle
{
  return 0;
}

- (void)setAttributedMarkedText:(id)a3 selectedRange:(_NSRange)a4
{
  NSUInteger length;
  NSUInteger location;
  unint64_t v8;
  WebPageProxy *m_ptr;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  unsigned int *v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  unsigned int v26;
  _QWORD *v27;
  unsigned int v28;
  WTF *v29;
  unsigned int *v30;
  WTF *v31;
  unsigned int *v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  uint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  char *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  NSUInteger v61;
  WTF *v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  _QWORD v68[5];
  Color v69;
  WTF::StringImpl *v70;
  WTF::StringImpl **v71;
  uint64_t v72;
  char v73;
  WTF *v74;
  uint64_t v75;
  EditingRange v76;
  void *v77;
  void *v78;
  WTF::StringImpl **v79;

  length = a4.length;
  location = a4.location;
  v8 = MEMORY[0x1E0C809B0];
  v68[0] = MEMORY[0x1E0C809B0];
  v68[1] = 3221225472;
  v68[2] = __70__WKContentView_WKInteraction__setAttributedMarkedText_selectedRange___block_invoke;
  v68[3] = &unk_1E34CDA18;
  v68[4] = a3;
  if (__70__WKContentView_WKInteraction__setAttributedMarkedText_selectedRange___block_invoke((uint64_t)v68))
  {
    m_ptr = self->_page.m_ptr;
    MEMORY[0x19AEABCC8](&v70, objc_msgSend(a3, "string"));
    v76.location = 0;
    v76.length = 0;
    WebKit::WebPageProxy::setWritingSuggestion((uint64_t)m_ptr, (const WTF::String *)&v70, &v76);
    v11 = v70;
    v70 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  else
  {
    v66 = 0;
    v67 = 0;
    v64 = 0;
    v65 = 0;
    v70 = 0;
    v71 = &v70;
    v72 = 0x2020000000;
    v73 = 0;
    v12 = objc_msgSend(a3, "length");
    v76.location = v8;
    v76.length = 3221225472;
    v77 = ___ZL32shouldUseHighlightsForMarkedTextP18NSAttributedString_block_invoke;
    v78 = &unk_1E3507020;
    v79 = &v70;
    objc_msgSend(a3, "enumerateAttributesInRange:options:usingBlock:", 0, v12, 0, &v76);
    v13 = *((unsigned __int8 *)v71 + 24);
    _Block_object_dispose(&v70, 8);
    if (v13)
    {
      if (objc_msgSend(a3, "length"))
      {
        v70 = 0;
        v71 = 0;
        v15 = objc_msgSend(a3, "length");
        v76.location = v8;
        v76.length = 3321888768;
        v77 = ___ZL21compositionHighlightsP18NSAttributedString_block_invoke;
        v78 = &__block_descriptor_40_e8_32c56_ZTSKZL21compositionHighlightsP18NSAttributedStringE3__1_e41_v40__0__NSDictionary_8__NSRange_QQ_16_B32l;
        v79 = &v70;
        objc_msgSend(a3, "enumerateAttributesInRange:options:usingBlock:", 0, v15, 0, &v76);
        v16 = 126 - 2 * __clz(HIDWORD(v71));
        if (HIDWORD(v71))
          v17 = v16;
        else
          v17 = 0;
        std::__introsort<std::_ClassicAlgPolicy,compositionHighlights(NSAttributedString *)::$_0 &,WebCore::CompositionHighlight *,false>((uint64_t)v70, (_DWORD *)v70 + 10 * HIDWORD(v71), v17, 1);
        v61 = length;
        v74 = 0;
        v75 = 0;
        if (HIDWORD(v71))
        {
          if (HIDWORD(v71) >= 0x6666667)
          {
            __break(0xC471u);
            return;
          }
          v19 = 40 * HIDWORD(v71);
          v20 = (unsigned int *)WTF::fastMalloc((WTF *)(40 * HIDWORD(v71)));
          LODWORD(v75) = v19 / 0x28;
          v74 = (WTF *)v20;
          if (HIDWORD(v71))
          {
            v21 = v70;
            v22 = HIDWORD(v75);
            v23 = 40 * HIDWORD(v71);
            do
            {
              if (!v22
                || (v24 = v22 - 1,
                    v25 = v74,
                    std::operator!=[abi:sn180100]<WebCore::Color,WebCore::Color>(*((_QWORD *)v74 + 5 * v24 + 1), *((_BYTE *)v74 + 40 * v24 + 16), *((_QWORD *)v21 + 1), *((_BYTE *)v21 + 16)))|| std::operator!=[abi:sn180100]<WebCore::Color,WebCore::Color>(*((_QWORD *)v25 + 5 * v24 + 3), *((_BYTE *)v25 + 40 * v24 + 32), *((_QWORD *)v21 + 3), *((_BYTE *)v21 + 32)))
              {
                v26 = v22;
                if (v22 == (_DWORD)v75)
                {
                  v27 = (_QWORD *)WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v74, v22 + 1, (unint64_t)v21);
                  v28 = HIDWORD(v75);
                  v29 = v74;
                  v30 = (unsigned int *)((char *)v74 + 40 * HIDWORD(v75));
                  *(_QWORD *)v30 = *v27;
                  std::__optional_copy_base<WebCore::Color,false>::__optional_copy_base[abi:sn180100]((WebCore::Color *)(v30 + 2), (uint64_t)(v27 + 1));
                  std::__optional_copy_base<WebCore::Color,false>::__optional_copy_base[abi:sn180100]((WTF *)((char *)v29 + 40 * v28 + 24), (uint64_t)(v27 + 3));
                }
                else
                {
                  v31 = v74;
                  v32 = (unsigned int *)((char *)v74 + 40 * v22);
                  *(_QWORD *)v32 = *(_QWORD *)v21;
                  std::__optional_copy_base<WebCore::Color,false>::__optional_copy_base[abi:sn180100]((WebCore::Color *)(v32 + 2), (uint64_t)v21 + 8);
                  std::__optional_copy_base<WebCore::Color,false>::__optional_copy_base[abi:sn180100]((WTF *)((char *)v31 + 40 * v26 + 24), (uint64_t)v21 + 24);
                }
                v22 = ++HIDWORD(v75);
              }
              else
              {
                *((_DWORD *)v25 + 10 * v24 + 1) = *((_DWORD *)v21 + 1);
              }
              v21 = (WTF::StringImpl *)((char *)v21 + 40);
              v23 -= 40;
            }
            while (v23);
          }
        }
        WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v70, v18);
        length = v61;
      }
      else
      {
        v74 = 0;
        v75 = 0;
      }
      if (HIDWORD(v65))
        WTF::VectorDestructor<true,WebCore::CompositionHighlight>::destruct((uint64_t)v64, (char *)v64 + 40 * HIDWORD(v65));
      v49 = v64;
      if (v64)
      {
        v64 = 0;
        LODWORD(v65) = 0;
        WTF::fastFree(v49, v14);
      }
      v64 = v74;
      v50 = v75;
      v74 = 0;
      v75 = 0;
      v65 = v50;
      WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v14);
    }
    else
    {
      if (objc_msgSend(a3, "length"))
      {
        v74 = 0;
        v75 = 0;
        v34 = objc_msgSend(a3, "length");
        v76.location = v8;
        v76.length = 3321888768;
        v77 = ___ZL17extractUnderlinesP18NSAttributedString_block_invoke;
        v78 = &__block_descriptor_40_e8_32c52_ZTSKZL17extractUnderlinesP18NSAttributedStringE3__1_e41_v40__0__NSDictionary_8__NSRange_QQ_16_B32l;
        v79 = &v74;
        objc_msgSend(a3, "enumerateAttributesInRange:options:usingBlock:", 0, v34, 0, &v76);
        v35 = 126 - 2 * __clz(HIDWORD(v75));
        if (HIDWORD(v75))
          v36 = v35;
        else
          v36 = 0;
        std::__introsort<std::_ClassicAlgPolicy,extractUnderlines(NSAttributedString *)::$_0 &,WebCore::CompositionUnderline *,false>((unsigned int *)v74, (uint64_t *)v74 + 4 * HIDWORD(v75), v36, 1);
        v62 = 0;
        v63 = 0;
        if (HIDWORD(v75))
        {
          v38 = *(_DWORD *)v74;
          v39 = *((_DWORD *)v74 + 8 * HIDWORD(v75) - 7);
          v69.m_colorAndFlags = 0x11040000000000FFLL;
          v70 = (WTF::StringImpl *)__PAIR64__(v39, v38);
          LOBYTE(v71) = 0;
          WebCore::Color::Color((WebCore::Color *)&v72, &v69);
          v73 = 0;
          WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionUnderline>((uint64_t)&v62, (unint64_t)&v70);
          if ((v72 & 0x8000000000000) != 0)
          {
            v55 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFLL);
            do
            {
              v56 = __ldaxr(v55);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, v55));
            if (!v57)
            {
              atomic_store(1u, v55);
              WTF::fastFree((WTF *)v55, v37);
            }
          }
          if ((v69.m_colorAndFlags & 0x8000000000000) != 0)
          {
            v58 = (unsigned int *)(v69.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
            do
            {
              v59 = __ldaxr(v58);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, v58));
            if (!v60)
            {
              atomic_store(1u, v58);
              WTF::fastFree((WTF *)v58, v37);
            }
          }
          if (HIDWORD(v75))
          {
            v40 = (unsigned int *)v74;
            v41 = 32 * HIDWORD(v75);
            do
            {
              v42 = v40 + 6;
              if (*((_BYTE *)v40 + 24))
              {
                if (HIDWORD(v63) == (_DWORD)v63)
                {
                  v43 = WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v62, HIDWORD(v63) + 1, (unint64_t)v40);
                  v44 = (char *)v62 + 32 * HIDWORD(v63);
                  v45 = *(_QWORD *)v43;
                  v44[8] = *(_BYTE *)(v43 + 8);
                  *(_QWORD *)v44 = v45;
                  WebCore::Color::Color((WebCore::Color *)(v44 + 16), (const Color *)(v43 + 16));
                  v46 = v44 + 24;
                  v42 = (_BYTE *)(v43 + 24);
                }
                else
                {
                  v47 = (char *)v62 + 32 * HIDWORD(v63);
                  v48 = *(_QWORD *)v40;
                  v47[8] = *((_BYTE *)v40 + 8);
                  *(_QWORD *)v47 = v48;
                  WebCore::Color::Color((WebCore::Color *)(v47 + 16), (const Color *)v40 + 2);
                  v46 = v47 + 24;
                }
                *v46 = *v42;
                ++HIDWORD(v63);
              }
              v40 += 8;
              v41 -= 32;
            }
            while (v41);
          }
        }
        WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v37);
      }
      else
      {
        v62 = 0;
        v63 = 0;
      }
      if (HIDWORD(v67))
        WTF::VectorDestructor<true,WebCore::CompositionUnderline>::destruct(v66, (_QWORD *)v66 + 4 * HIDWORD(v67));
      v51 = v66;
      if (v66)
      {
        v66 = 0;
        LODWORD(v67) = 0;
        WTF::fastFree(v51, v33);
      }
      v66 = v62;
      v52 = v63;
      v62 = 0;
      v63 = 0;
      v67 = v52;
      WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v33);
    }
    -[WKContentView _setMarkedText:underlines:highlights:selectedRange:](self, "_setMarkedText:underlines:highlights:selectedRange:", objc_msgSend(a3, "string"), &v66, &v64, location, length);
    WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v53);
    WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v54);
  }
}

uint64_t __70__WKContentView_WKInteraction__setAttributedMarkedText_selectedRange___block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend(*(id *)(a1 + 32), "length"))
    return 0;
  v12[0] = _MergedGlobals_855();
  v13[0] = objc_msgSend(MEMORY[0x1E0CEA478], "systemGrayColor");
  v12[1] = off_1ECE70DE8();
  v13[1] = objc_msgSend(MEMORY[0x1E0CEA478], "clearColor");
  v2 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 2);
  v3 = v2;
  if (v2)
    CFRetain(v2);
  v4 = (void *)objc_msgSend(*(id *)(a1 + 32), "attributesAtIndex:effectiveRange:", 0, 0);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  v6 = (void *)objc_msgSend(v5, "objectForKey:", _MergedGlobals_855());
  v7 = v6;
  if (v6)
    CFRetain(v6);
  if ((objc_msgSend(v7, "isEqual:", objc_msgSend(MEMORY[0x1E0CEA478], "systemGrayColor")) & 1) != 0)
  {
    v8 = (void *)objc_msgSend(v5, "objectForKey:", off_1ECE70DE8());
    v9 = v8;
    if (v8)
      CFRetain(v8);
    v10 = objc_msgSend(v9, "isEqual:", objc_msgSend(MEMORY[0x1E0CEA478], "clearColor"));
    if (v9)
      CFRelease(v9);
  }
  else
  {
    v10 = 0;
  }
  if (v7)
    CFRelease(v7);
  if (v5)
    CFRelease(v5);
  if (v3)
    CFRelease(v3);
  return v10;
}

- (void)setMarkedText:(id)a3 selectedRange:(_NSRange)a4
{
  NSUInteger length;
  NSUInteger location;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  Color v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  length = a4.length;
  location = a4.location;
  v25 = 0;
  v26 = 0;
  v8 = objc_msgSend(self->_markedText.m_ptr, "length");
  v20.m_colorAndFlags = 0x11040000000000FFLL;
  LODWORD(v21) = 0;
  HIDWORD(v21) = v8;
  LOBYTE(v22) = 0;
  WebCore::Color::Color((WebCore::Color *)&v23, &v20);
  v24 = 0;
  if (HIDWORD(v26) == (_DWORD)v26)
  {
    WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CompositionUnderline>((uint64_t)&v25, (unint64_t)&v21);
  }
  else
  {
    v10 = v25 + 32 * HIDWORD(v26);
    v11 = v21;
    *(_BYTE *)(v10 + 8) = v22;
    *(_QWORD *)v10 = v11;
    WebCore::Color::Color();
    *(_BYTE *)(v10 + 24) = v24;
    ++HIDWORD(v26);
  }
  if ((v23 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v9);
    }
  }
  if ((v20.m_colorAndFlags & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v20.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v9);
    }
  }
  v21 = 0;
  v22 = 0;
  -[WKContentView _setMarkedText:underlines:highlights:selectedRange:](self, "_setMarkedText:underlines:highlights:selectedRange:", a3, &v25, &v21, location, length);
  WTF::Vector<WebCore::CompositionHighlight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v12);
  WTF::Vector<WebCore::CompositionUnderline,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v13);
}

- (void)_setMarkedText:(id)a3 underlines:(const void *)a4 highlights:(const void *)a5 selectedRange:(_NSRange)a6
{
  NSUInteger length;
  NSUInteger location;
  BOOL v12;
  void *m_ptr;
  WebPageProxy *v14;
  uint64_t v15;
  NSUInteger v16;
  void *v17;
  WTF::StringImpl *v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  WTF::StringImpl *v22;

  length = a6.length;
  location = a6.location;
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  v12 = !-[WKContentView hasMarkedText](self, "hasMarkedText") && self->_isExpectingFastSingleTapCommit;
  BYTE6(self->_revealFocusedElementDeferrer.m_ptr) = v12;
  if (a3)
    CFRetain(a3);
  m_ptr = self->_markedText.m_ptr;
  self->_markedText.m_ptr = a3;
  if (m_ptr)
    CFRelease(m_ptr);
  v14 = self->_page.m_ptr;
  MEMORY[0x19AEABCC8](&v22, a3);
  if (location == 0x7FFFFFFFFFFFFFFFLL)
    v15 = -1;
  else
    v15 = location;
  if (location == 0x7FFFFFFFFFFFFFFFLL)
    v16 = 0;
  else
    v16 = length;
  v20[0] = v15;
  v20[1] = v16;
  v21 = 0;
  v19 = xmmword_1978CEF10;
  WebKit::WebPageProxy::setCompositionAsync((uint64_t)v14, (uint64_t)&v22, (uint64_t)a4, (uint64_t)a5, (uint64_t)&v21, (uint64_t)v20, (uint64_t)&v19);
  if (v21)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v21, v17);
  v18 = v22;
  v22 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v18 -= 2;
  }
}

- (void)unmarkText
{
  void *m_ptr;

  self->_isExpectingFastSingleTapCommit = 0;
  m_ptr = self->_markedText.m_ptr;
  self->_markedText.m_ptr = 0;
  if (m_ptr)
    CFRelease(m_ptr);
  WebKit::WebPageProxy::confirmCompositionAsync((uint64_t)self->_page.m_ptr);
}

- (UITextPosition)beginningOfDocument
{
  return 0;
}

- (UITextPosition)endOfDocument
{
  return 0;
}

- (BOOL)_isAnchoredToCurrentSelection:(id)a3
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (objc_msgSend(a3, "isEqual:", -[UITextRange start](-[WKContentView selectedTextRange](self, "selectedTextRange"), "start")) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return objc_msgSend(a3, "isEqual:", -[UITextRange end](-[WKContentView selectedTextRange](self, "selectedTextRange"), "end"));
  }
}

- (id)textRangeFromPosition:(id)a3 toPosition:(id)a4
{
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions")
    && -[WKContentView _isAnchoredToCurrentSelection:](self, "_isAnchoredToCurrentSelection:", a3)
    && -[WKContentView _isAnchoredToCurrentSelection:](self, "_isAnchoredToCurrentSelection:", a4))
  {
    return (id)(id)CFMakeCollectable(-[WKRelativeTextRange initWithStart:end:]([WKRelativeTextRange alloc], "initWithStart:end:", a3, a4));
  }
  else
  {
    return 0;
  }
}

- (id)positionFromPosition:(id)a3 offset:(int64_t)a4
{
  id v7;
  WKRelativeTextPosition *v8;
  uint64_t v9;
  WKRelativeTextPosition *v10;
  int64_t v11;
  id result;
  char isKindOfClass;
  WKRelativeTextPosition *v14;
  unsigned __int8 v15;

  if (!-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions")
    || !-[WKContentView _isAnchoredToCurrentSelection:](self, "_isAnchoredToCurrentSelection:", a3))
  {
    return 0;
  }
  if (!a4)
    return a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = a3;
  else
    v7 = 0;
  if (objc_msgSend(v7, "anchors"))
  {
    v8 = [WKRelativeTextPosition alloc];
    v9 = objc_msgSend(v7, "anchors");
    v10 = v8;
    v11 = a4;
    return (id)(id)CFMakeCollectable(-[WKRelativeTextPosition initWithAnchors:offset:](v10, "initWithAnchors:offset:", v9, v11));
  }
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  result = 0;
  if (a3 && (isKindOfClass & 1) != 0)
  {
    v14 = [WKRelativeTextPosition alloc];
    v15 = objc_msgSend(a3, "anchors");
    v11 = objc_msgSend(a3, "offset") + a4;
    v9 = v15;
    v10 = v14;
    return (id)(id)CFMakeCollectable(-[WKRelativeTextPosition initWithAnchors:offset:](v10, "initWithAnchors:offset:", v9, v11));
  }
  return result;
}

- (id)positionFromPosition:(id)a3 inDirection:(int64_t)a4 offset:(int64_t)a5
{
  return 0;
}

- (int64_t)comparePosition:(id)a3 toPosition:(id)a4
{
  return 0;
}

- (int64_t)offsetFromPosition:(id)a3 toPosition:(id)a4
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  v6 = objc_msgSend(a3, "order");
  if (v6 == objc_msgSend(a4, "order"))
  {
    v7 = objc_msgSend(a3, "offset");
    v8 = objc_msgSend(a4, "offset");
  }
  else
  {
    v7 = objc_msgSend(a3, "order");
    v8 = objc_msgSend(a4, "order");
  }
  return v7 - v8;
}

- (UITextInputTokenizer)tokenizer
{
  return 0;
}

- (id)positionWithinRange:(id)a3 farthestInDirection:(int64_t)a4
{
  return 0;
}

- (id)characterRangeByExtendingPosition:(id)a3 inDirection:(int64_t)a4
{
  return 0;
}

- (int64_t)baseWritingDirectionForPosition:(id)a3 inDirection:(int64_t)a4
{
  return 0;
}

- (void)setBaseWritingDirection:(int64_t)a3 forRange:(id)a4
{
  WebPageProxy *m_ptr;
  char v7;

  m_ptr = self->_page.m_ptr;
  if (*((_BYTE *)m_ptr + 616))
  {
    if (a4)
    {
      if (!objc_msgSend(a4, "isEqual:", -[WKContentView selectedTextRange](self, "selectedTextRange")))
        return;
      m_ptr = self->_page.m_ptr;
    }
    if (a3 == 1)
      v7 = 2;
    else
      v7 = a3 == 0;
    WebKit::WebPageProxy::setBaseWritingDirection((uint64_t)m_ptr, v7);
  }
}

- (CGRect)firstRectForRange:(id)a3
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  v3 = *MEMORY[0x1E0C9D648];
  v4 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  v5 = *(double *)(MEMORY[0x1E0C9D648] + 16);
  v6 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

- (id)closestPositionToPoint:(CGPoint)a3
{
  return 0;
}

- (id)closestPositionToPoint:(CGPoint)a3 withinRange:(id)a4
{
  return 0;
}

- (id)characterRangeAtPoint:(CGPoint)a3
{
  return 0;
}

- (void)deleteBackward
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  m_ptr = self->_page.m_ptr;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)m_ptr, &v7, (const WTF::String *)&v6);
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
}

- (BOOL)_shouldSimulateKeyboardInputOnTextInsertion
{
  return objc_msgSend(self->_scribbleInteraction.m_ptr, "isHandlingWriting");
}

- (void)insertText:(id)a3
{
  BOOL v5;
  WebPageProxy *m_ptr;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  __int128 v10;
  WTF::StringImpl *v11;
  int v12;
  char v13;

  if (!self->_usingGestureForSelection || !self->_isTapHighlightFading)
  {
    v13 = 0;
    v12 = 0;
    v5 = self->_isChangingFocusUsingAccessoryTab || self->_didAccessoryTabInitiateFocus;
    BYTE2(v12) = v5;
    HIBYTE(v12) = -[WKContentView _shouldSimulateKeyboardInputOnTextInsertion](self, "_shouldSimulateKeyboardInputOnTextInsertion");
    m_ptr = self->_page.m_ptr;
    MEMORY[0x19AEABCC8](&v11, a3);
    v10 = xmmword_1978CEF10;
    WebKit::WebPageProxy::insertTextAsync((uint64_t)m_ptr, (uint64_t)&v11, (uint64_t)&v10, (uint64_t)&v12);
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (self->_anon_938[112] == 2 && objc_msgSend(a3, "length"))
    {
      v9 = objc_msgSend(a3, "characterAtIndex:", objc_msgSend(a3, "length") - 1);
      if (!*((_BYTE *)&self->_domPasteRequestCategory + 4))
        *((_BYTE *)&self->_domPasteRequestCategory + 4) = 1;
      *(_DWORD *)&self->_domPasteRequestCategory.var0.__null_state_ = v9;
      WebKit::WebPageProxy::scheduleFullEditorStateUpdate((uint64_t)self->_page.m_ptr);
    }
    BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  }
}

- (void)insertText:(id)a3 alternatives:(id)a4 style:(int64_t)a5
{
  const void *v9;
  const void *v10;
  WebPageProxy *m_ptr;
  void *v12;
  WTF::StringImpl *v13;
  CFTypeRef v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  uint64_t v17[2];
  __int128 v18;
  WTF::StringImpl *v19;
  int v20;
  char v21;
  __int128 v22;
  CFTypeRef cf;
  __int128 v24;
  CFTypeRef v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a4, "count"))
  {
    v9 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA250]), "initWithPrimaryString:alternativeStrings:isLowConfidence:", a3, a4, a5 == 1);
    v10 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92708]), "_initWithNSTextAlternatives:", v9);
    objc_msgSend(a3, "length");
    WebCore::TextAlternativeWithRange::TextAlternativeWithRange();
    v21 = 0;
    v20 = 0;
    HIBYTE(v20) = -[WKContentView _shouldSimulateKeyboardInputOnTextInsertion](self, "_shouldSimulateKeyboardInputOnTextInsertion");
    m_ptr = self->_page.m_ptr;
    MEMORY[0x19AEABCC8](&v19, a3);
    v18 = xmmword_1978CEF10;
    v24 = v22;
    v25 = cf;
    if (cf)
      CFRetain(cf);
    WTF::Vector<WebCore::TextAlternativeWithRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v17, (uint64_t)&v24, 1uLL);
    WebKit::WebPageProxy::insertDictatedTextAsync(m_ptr, (uint64_t *)&v19, (uint64_t *)&v18, (unsigned int *)v17, (char *)&v20);
    WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v17, v12);
    v14 = v25;
    v25 = 0;
    if (v14)
      CFRelease(v14);
    v15 = v19;
    v19 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
    v16 = cf;
    cf = 0;
    if (v16)
      CFRelease(v16);
    if (v10)
      CFRelease(v10);
    if (v9)
      CFRelease(v9);
  }
  else
  {
    -[WKContentView insertText:](self, "insertText:", a3);
  }
}

- (BOOL)hasText
{
  WebPageProxy *m_ptr;
  int v3;
  uint64_t v5;

  if (self->_potentialTapInProgress || (m_ptr = self->_page.m_ptr, *((_BYTE *)m_ptr + 1032)))
  {
    v3 = self->_anon_938[111];
    return v3 != 0;
  }
  v5 = *((_QWORD *)m_ptr + 4);
  if (*(_BYTE *)(v5 + 560))
  {
    v3 = *(unsigned __int8 *)(v5 + 348);
    return v3 != 0;
  }
  return 0;
}

- (void)addTextAlternatives:(id)a3
{
  char isKindOfClass;
  char v6;
  void *v7;
  WebPageProxy *m_ptr;
  CFTypeRef v9;
  _BYTE v10[16];
  CFTypeRef cf;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (a3 && (isKindOfClass & 1) != 0)
  {
    CFRetain(a3);
  }
  else
  {
    objc_opt_class();
    v6 = objc_opt_isKindOfClass();
    if (!a3)
      return;
    if ((v6 & 1) == 0)
      return;
    CFRetain(a3);
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92708]), "_initWithNSTextAlternatives:", a3);
    CFRelease(a3);
    a3 = v7;
    if (!v7)
      return;
  }
  m_ptr = self->_page.m_ptr;
  objc_msgSend((id)objc_msgSend(a3, "primaryString"), "length");
  WebCore::TextAlternativeWithRange::TextAlternativeWithRange();
  WebKit::WebPageProxy::addDictationAlternative((WTF::StringImpl *)m_ptr, (uint64_t)v10);
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  CFRelease(a3);
}

- (void)removeEmojiAlternatives
{
  WebPageProxy *m_ptr;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;

  m_ptr = self->_page.m_ptr;
  v5 = 0;
  objc_initWeak(&v5, self);
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E3507AB8;
  *(_QWORD *)(v3 + 8) = 0;
  objc_moveWeak((id *)(v3 + 8), &v5);
  v6 = v3;
  WebKit::WebPageProxy::dictationAlternativesAtSelection((uint64_t)m_ptr, &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  objc_destroyWeak(&v5);
}

- (id)textInputTraits
{
  void *v3;
  void *v4;
  void *m_ptr;
  NSObject *v7;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!-[WKContentView _requiresLegacyTextInputTraits](self, "_requiresLegacyTextInputTraits")
    && -[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v7 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315138;
      v9 = "-[WKContentView(WKInteraction) textInputTraits]";
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v8, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x197848E10);
  }
  v3 = (void *)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_textInputTraits");
  v4 = v3;
  if (v3)
    CFRetain(v3);
  m_ptr = self->_legacyTextInputTraits.m_ptr;
  self->_legacyTextInputTraits.m_ptr = v4;
  if (m_ptr)
  {
    CFRelease(m_ptr);
    return self->_legacyTextInputTraits.m_ptr;
  }
  return v4;
}

- (id)interactionAssistant
{
  objc_super v4;

  if (!-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
    return (id)objc_msgSend(self->_textInteractionWrapper.m_ptr, "textInteractionAssistant");
  v4.receiver = self;
  v4.super_class = (Class)WKContentView;
  return -[WKContentView interactionAssistant](&v4, sel_interactionAssistant);
}

- (_NSRange)selectionRange
{
  NSUInteger v2;
  NSUInteger v3;
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t v7;
  _NSRange result;

  v7 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v4 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315138;
      v6 = "-[WKContentView(WKInteraction) selectionRange]";
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v5, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x197848F44);
  }
  v2 = 0x7FFFFFFFFFFFFFFFLL;
  v3 = 0;
  result.length = v3;
  result.location = v2;
  return result;
}

- (CGRect)rectForNSRange:(_NSRange)a3
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  v3 = *MEMORY[0x1E0C9D648];
  v4 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  v5 = *(double *)(MEMORY[0x1E0C9D648] + 16);
  v6 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

- (_NSRange)_markedTextNSRange
{
  NSUInteger v2;
  NSUInteger v3;
  _NSRange result;

  v2 = 0x7FFFFFFFFFFFFFFFLL;
  v3 = 0;
  result.length = v3;
  result.location = v2;
  return result;
}

- (id)selectedDOMRange
{
  return 0;
}

- (void)replaceRangeWithTextWithoutClosingTyping:(id)a3 replacementText:(id)a4
{
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3, a4))
  {
    v4 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315138;
      v6 = "-[WKContentView(WKInteraction) replaceRangeWithTextWithoutClosingTyping:replacementText:]";
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v5, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x197849038);
  }
}

- (CGRect)rectContainingCaretSelection
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  v2 = *MEMORY[0x1E0C9D648];
  v3 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  v4 = *(double *)(MEMORY[0x1E0C9D648] + 16);
  v5 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

- (BOOL)_isTextInputContextFocused:(id)a3
{
  _QWORD *v5;
  BOOL v6;
  BOOL v7;

  LODWORD(v5) = -[WKContentView _hasFocusedElement](self, "_hasFocusedElement");
  if ((_DWORD)v5)
  {
    v5 = (_QWORD *)objc_msgSend(a3, "_textInputContext");
    LOBYTE(v5) = v5[2] == self->_focusedElementInformation.elementContext.webPageIdentifier.m_identifier
              && (v5[5] == self->_focusedElementInformation.elementContext.m_processIdentifier.m_identifier
                ? (v6 = v5[4] == *(_QWORD *)&self->_focusedElementInformation.elementContext.documentIdentifier.m_object[8])
                : (v6 = 0),
                  v6 ? (v7 = v5[6] == self->_focusedElementInformation.elementIdentifier.m_identifier) : (v7 = 0),
                  v7)
              && v5[8] == *(_QWORD *)&self->_anon_938[8];
  }
  return (char)v5;
}

- (void)_focusTextInputContext:(id)a3 placeCaretAt:(CGPoint)a4 completionHandler:(id)a5
{
  WKContentView *v8;
  WebPageProxy *m_ptr;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t v15;
  _BYTE v16[8];
  id location;
  CFTypeRef cf;
  void *aBlock;
  CGPoint v20;

  v20 = a4;
  if (-[WKContentView becomeFirstResponder](self, "becomeFirstResponder"))
  {
    if (-[WKContentView _isTextInputContextFocused:](self, "_isTextInputContextFocused:", a3))
    {
      if (self->_anon_938[107])
        v8 = 0;
      else
        v8 = self;
      (*((void (**)(id, WKContentView *))a5 + 2))(a5, v8);
    }
    else
    {
      BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
      BYTE2(self->_dataListTextSuggestions.m_ptr) = 1;
      location = 0;
      objc_initWeak(&location, self);
      cf = (CFTypeRef)objc_msgSend(a3, "copy");
      aBlock = _Block_copy(a5);
      m_ptr = self->_page.m_ptr;
      v10 = objc_msgSend(a3, "_textInputContext");
      WebCore::IntPoint::IntPoint((WebCore::IntPoint *)v16, &v20);
      v11 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v11 = off_1E3507AE0;
      *(_QWORD *)(v11 + 8) = 0;
      objc_moveWeak((id *)(v11 + 8), &location);
      *(_QWORD *)(v11 + 16) = cf;
      v12 = aBlock;
      cf = 0;
      aBlock = 0;
      *(_QWORD *)(v11 + 24) = v12;
      v15 = v11;
      WebKit::WebPageProxy::focusTextInputContextAndPlaceCaret((uint64_t)m_ptr, v10, (uint64_t)v16, &v15);
      v13 = v15;
      v15 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      _Block_release(aBlock);
      v14 = cf;
      cf = 0;
      if (v14)
        CFRelease(v14);
      objc_destroyWeak(&location);
    }
  }
  else
  {
    (*((void (**)(id, _QWORD))a5 + 2))(a5, 0);
  }
}

- (void)_requestTextInputContextsInRect:(CGRect)a3 completionHandler:(id)a4
{
  char v6;
  const WebCore::FloatRect *v7;
  WebPageProxy *m_ptr;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id location;
  void *aBlock;
  _DWORD v19[4];
  CGRect v20;

  v20 = a3;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v19, &v20);
  if (-[WKContentView _hasFocusedElement](self, "_hasFocusedElement"))
  {
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&location, (const WebCore::IntRect *)&self->_focusedElementInformation);
    v6 = WebCore::FloatRect::inclusivelyIntersects((WebCore::FloatRect *)v19, (const WebCore::FloatRect *)&location);
  }
  else
  {
    v6 = 0;
  }
  if ((objc_msgSend(-[WKContentView webView](self, "webView"), "_isEditable") & 1) != 0
    || (v6 & 1) != 0
    || (WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&location, &v20),
        (WebKit::mayContainEditableElementsInRect((WebKit *)self, (UIView *)&location, v7) & 1) != 0))
  {
    m_ptr = self->_page.m_ptr;
    v9 = *(float *)v19;
    v10 = *(float *)&v19[1];
    v11 = *(float *)&v19[2];
    v12 = *(float *)&v19[3];
    location = 0;
    objc_initWeak(&location, self);
    aBlock = _Block_copy(a4);
    v13 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v13 = off_1E3507B08;
    *(_QWORD *)(v13 + 8) = 0;
    objc_moveWeak((id *)(v13 + 8), &location);
    v14 = aBlock;
    aBlock = 0;
    *(_QWORD *)(v13 + 16) = v14;
    v16 = v13;
    WebKit::WebPageProxy::textInputContextsInRect((uint64_t)m_ptr, &v16, v9, v10, v11, v12);
    v15 = v16;
    v16 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    _Block_release(aBlock);
    objc_destroyWeak(&location);
  }
  else
  {
    (*((void (**)(id, _QWORD))a4 + 2))(a4, MEMORY[0x1E0C9AA60]);
  }
}

- (void)_willBeginTextInteractionInTextInputContext:(id)a3
{
  unint64_t v4;

  WebKit::WebPageProxy::setCanShowPlaceholder((uint64_t)self->_page.m_ptr, (const ElementContext *)objc_msgSend(a3, "_textInputContext"), 0);
  v4 = *(_QWORD *)&self->_isUpdatingAccessoryView + 1;
  *(_QWORD *)&self->_isUpdatingAccessoryView = v4;
  if (v4 <= 1)
  {
    BYTE1(self->_dataListSuggestionsControl.m_weakReference) = 0;
    WebKit::WebPageProxy::setShouldRevealCurrentSelectionAfterInsertion((uint64_t)self->_page.m_ptr, 0);
    BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
    BYTE2(self->_dataListTextSuggestions.m_ptr) = 1;
  }
}

- (void)_didFinishTextInteractionInTextInputContext:(id)a3
{
  uint64_t v4;
  uint64_t v5;
  WebPageProxy *m_ptr;
  uint64_t v7;

  WebKit::WebPageProxy::setCanShowPlaceholder((uint64_t)self->_page.m_ptr, (const ElementContext *)objc_msgSend(a3, "_textInputContext"), 1);
  v4 = *(_QWORD *)&self->_isUpdatingAccessoryView - 1;
  *(_QWORD *)&self->_isUpdatingAccessoryView = v4;
  if (!v4)
  {
    BYTE2(self->_dataListTextSuggestions.m_ptr) = 0;
    if (BYTE1(self->_dataListSuggestionsControl.m_weakReference))
    {
      WebKit::RevealFocusedElementDeferrer::create(self, 1, &v7);
      v5 = *(_QWORD *)&self->_actionsToPerformAfterEditorStateUpdate.m_capacity;
      *(_QWORD *)&self->_actionsToPerformAfterEditorStateUpdate.m_capacity = v7;
      if (v5)
        WTF::RefCounted<WebKit::RevealFocusedElementDeferrer>::deref(v5);
      m_ptr = self->_page.m_ptr;
      *((_BYTE *)m_ptr + 1032) = 1;
      BYTE1(self->_dataListSuggestionsControl.m_weakReference) = 0;
    }
    else
    {
      m_ptr = self->_page.m_ptr;
    }
    WebKit::WebPageProxy::setShouldRevealCurrentSelectionAfterInsertion((uint64_t)m_ptr, 1);
  }
}

- (void)modifierFlagsDidChangeFrom:(int64_t)a3 to:(int64_t)a4
{
  int v7;
  WKSyntheticFlagsChangedWebEvent *v8;
  WKSyntheticFlagsChangedWebEvent *v9;
  int64_t v10;
  WKSyntheticFlagsChangedWebEvent *v11;
  WKSyntheticFlagsChangedWebEvent *v12;
  NSObject *v13;
  int v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v13 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v14 = 136315138;
      v15 = "-[WKContentView(WKInteraction) modifierFlagsDidChangeFrom:to:]";
      _os_log_error_impl(&dword_196BCC000, v13, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v14, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x197849800);
  }
  v7 = a3 & ~(_DWORD)a4;
  if ((a3 & ~a4) != 0)
  {
    if ((v7 & 0x20000) != 0)
    {
      v8 = -[WKSyntheticFlagsChangedWebEvent initWithShiftState:]([WKSyntheticFlagsChangedWebEvent alloc], "initWithShiftState:", 0);
      -[WKContentView handleKeyWebEvent:](self, "handleKeyWebEvent:", v8);
      if (v8)
        CFRelease(v8);
    }
    if ((v7 & 0x10000) != 0)
    {
      v9 = -[WKSyntheticFlagsChangedWebEvent initWithCapsLockState:]([WKSyntheticFlagsChangedWebEvent alloc], "initWithCapsLockState:", 0);
      -[WKContentView handleKeyWebEvent:](self, "handleKeyWebEvent:", v9);
      if (v9)
        CFRelease(v9);
    }
  }
  v10 = a4 & ~a3;
  if (v10)
  {
    if ((v10 & 0x20000) != 0)
    {
      v11 = -[WKSyntheticFlagsChangedWebEvent initWithShiftState:]([WKSyntheticFlagsChangedWebEvent alloc], "initWithShiftState:", 1);
      -[WKContentView handleKeyWebEvent:](self, "handleKeyWebEvent:", v11);
      if (v11)
        CFRelease(v11);
    }
    if ((v10 & 0x10000) != 0)
    {
      v12 = -[WKSyntheticFlagsChangedWebEvent initWithCapsLockState:]([WKSyntheticFlagsChangedWebEvent alloc], "initWithCapsLockState:", 1);
      -[WKContentView handleKeyWebEvent:](self, "handleKeyWebEvent:", v12);
      if (v12)
        CFRelease(v12);
    }
  }
}

- (BOOL)shouldSuppressUpdateCandidateView
{
  return BYTE6(self->_revealFocusedElementDeferrer.m_ptr);
}

- (BOOL)requiresKeyEvents
{
  return 1;
}

- (BOOL)_tryToHandlePressesEvent:(id)a3
{
  uint64_t v5;
  int v6;
  BOOL result;

  v5 = objc_msgSend(a3, "_hidEvent");
  v6 = -[WKContentView isFirstResponder](self, "isFirstResponder");
  result = 0;
  if (v6 && v5)
  {
    if (self->_inputPeripheral.m_ptr || !*(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 237))
    {
      if ((objc_opt_respondsToSelector() & 1) != 0
        && (objc_msgSend(self->_inputPeripheral.m_ptr, "handleKeyEvent:", a3) & 1) != 0)
      {
        return 1;
      }
      if (!HIBYTE(self->_revealFocusedElementDeferrer.m_ptr))
      {
        HIBYTE(self->_revealFocusedElementDeferrer.m_ptr) = 1;
        -[WKContentView reloadInputViews](self, "reloadInputViews");
      }
    }
    return 0;
  }
  return result;
}

- (void)pressesBegan:(id)a3 withEvent:(id)a4
{
  objc_super v7;

  if (!-[WKContentView _tryToHandlePressesEvent:](self, "_tryToHandlePressesEvent:", a4))
  {
    self->_didAccessoryTabInitiateFocus = 1;
    v7.receiver = self;
    v7.super_class = (Class)WKContentView;
    -[WKContentView pressesBegan:withEvent:](&v7, sel_pressesBegan_withEvent_, a3, a4);
  }
}

- (void)pressesEnded:(id)a3 withEvent:(id)a4
{
  objc_super v7;

  if (!-[WKContentView _tryToHandlePressesEvent:](self, "_tryToHandlePressesEvent:", a4))
  {
    self->_didAccessoryTabInitiateFocus = 0;
    v7.receiver = self;
    v7.super_class = (Class)WKContentView;
    -[WKContentView pressesEnded:withEvent:](&v7, sel_pressesEnded_withEvent_, a3, a4);
  }
}

- (void)pressesChanged:(id)a3 withEvent:(id)a4
{
  objc_super v7;

  if (!-[WKContentView _tryToHandlePressesEvent:](self, "_tryToHandlePressesEvent:", a4))
  {
    v7.receiver = self;
    v7.super_class = (Class)WKContentView;
    -[WKContentView pressesChanged:withEvent:](&v7, sel_pressesChanged_withEvent_, a3, a4);
  }
}

- (void)pressesCancelled:(id)a3 withEvent:(id)a4
{
  objc_super v7;

  if (!-[WKContentView _tryToHandlePressesEvent:](self, "_tryToHandlePressesEvent:", a4))
  {
    self->_didAccessoryTabInitiateFocus = 0;
    v7.receiver = self;
    v7.super_class = (Class)WKContentView;
    -[WKContentView pressesCancelled:withEvent:](&v7, sel_pressesCancelled_withEvent_, a3, a4);
  }
}

- (void)generateSyntheticEditingCommand:(unsigned __int8)a3
{
  WebKit::WebPageProxy::generateSyntheticEditingCommand((uint64_t)self->_page.m_ptr, a3);
}

- (void)handleKeyWebEvent:(id)a3
{
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v5 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "-[WKContentView(WKInteraction) handleKeyWebEvent:]";
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v6, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x197849BA4);
  }
  -[WKContentView _internalHandleKeyWebEvent:](self, "_internalHandleKeyWebEvent:", a3);
}

- (void)_internalHandleKeyWebEvent:(id)a3
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v4;
  CFTypeRef v5;
  unsigned __int8 v6[88];
  CFTypeRef cf;

  m_ptr = self->_page.m_ptr;
  WebKit::NativeWebKeyboardEvent::NativeWebKeyboardEvent((uint64_t)v6, (WebKit::WebIOSEventFactory *)a3, 0);
  WebKit::WebPageProxy::handleKeyboardEvent((uint64_t)m_ptr, v6);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)v6, v4);
}

- (void)handleKeyWebEvent:(id)a3 withCompletionHandler:(id)a4
{
  NSObject *v7;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v7 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v8 = 136315138;
      v9 = "-[WKContentView(WKInteraction) handleKeyWebEvent:withCompletionHandler:]";
      _os_log_error_impl(&dword_196BCC000, v7, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v8, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x197849CECLL);
  }
  -[WKContentView _internalHandleKeyWebEvent:withCompletionHandler:](self, "_internalHandleKeyWebEvent:withCompletionHandler:", a3, a4);
}

- (BOOL)_deferKeyEventToInputMethodEditing:(id)a3
{
  id Weak;
  void *v6;
  void *v7;
  char v8;

  if (!*(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 237)
    && !BYTE2(self->_dataListSuggestionsControl.m_weakReference))
  {
    return 0;
  }
  if (!-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
    return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA6E8], "sharedInstance"), "handleKeyInputMethodCommandForCurrentEvent");
  Weak = objc_loadWeak((id *)&self->_anon_fa8[24]);
  v6 = Weak;
  if (Weak)
    CFRetain(Weak);
  -[WKContentView _logMissingSystemInputDelegateIfNeeded:](self, "_logMissingSystemInputDelegateIfNeeded:", "-[WKContentView(WKInteraction) _deferKeyEventToInputMethodEditing:]");
  if (!v6)
    return 0;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C926C8]), "initWithKeyEntry:", objc_msgSend(a3, "originalKeyEntry"));
  objc_msgSend(v7, "setDocumentEditable:", 1);
  objc_msgSend(v7, "setShouldEvaluateForInputSystemHandling:", 1);
  v8 = objc_msgSend(v6, "shouldDeferEventHandlingToSystemForTextInput:context:", -[WKContentView asBETextInput](self, "asBETextInput"), v7);
  if (v7)
    CFRelease(v7);
  CFRelease(v6);
  return v8;
}

- (void)_internalHandleKeyWebEvent:(id)a3 withCompletionHandler:(id)a4
{
  WebPageProxy *m_ptr;
  WTF::StringImpl *v8;
  CFTypeRef v9;
  NSObject *v10;
  WebPageProxy *v11;
  WTF::StringImpl *v12;
  int v13;
  CFTypeRef v14;
  void *v15;
  uint64_t m_size;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  unsigned int v22;
  KeyEventAndCompletionBlock *m_buffer;
  id *v24;
  const void *v25;
  _OWORD v26[5];
  CFTypeRef cf;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((WTF::isUIThread((WTF *)self) & 1) != 0)
  {
    if (objc_msgSend(a3, "type") == 4)
      self->_isChangingFocusUsingAccessoryTab = 1;
    -[WKContentView _handleDOMPasteRequestWithResult:](self, "_handleDOMPasteRequestWithResult:", 0);
    if (-[WKContentView _deferKeyEventToInputMethodEditing:](self, "_deferKeyEventToInputMethodEditing:", a3))
    {
      (*((void (**)(id, id, uint64_t))a4 + 2))(a4, a3, 1);
      self->_isExpectingFastSingleTapCommit = 1;
      m_ptr = self->_page.m_ptr;
      WebKit::NativeWebKeyboardEvent::NativeWebKeyboardEvent((uint64_t)v26, (WebKit::WebIOSEventFactory *)a3, (WebEvent *)1);
      WebKit::WebPageProxy::handleKeyboardEvent((uint64_t)m_ptr, (unsigned __int8 *)v26);
      v9 = cf;
      cf = 0;
      if (v9)
        CFRelease(v9);
      WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)v26, v8);
    }
    else
    {
      v11 = self->_page.m_ptr;
      WebKit::NativeWebKeyboardEvent::NativeWebKeyboardEvent((uint64_t)v26, (WebKit::WebIOSEventFactory *)a3, 0);
      v13 = WebKit::WebPageProxy::handleKeyboardEvent((uint64_t)v11, (unsigned __int8 *)v26);
      v14 = cf;
      cf = 0;
      if (v14)
        CFRelease(v14);
      WebKit::WebKeyboardEvent::~WebKeyboardEvent((WebKit::WebKeyboardEvent *)v26, v12);
      if (v13)
      {
        *(_QWORD *)&v26[0] = a3;
        if (a3)
          CFRetain(a3);
        v15 = _Block_copy(a4);
        *((_QWORD *)&v26[0] + 1) = v15;
        m_size = self->_keyWebEventHandlers.m_size;
        if ((_DWORD)m_size == self->_keyWebEventHandlers.m_capacity)
        {
          v17 = (uint64_t *)WTF::Vector<WebKit::KeyEventAndCompletionBlock,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&self->_keyWebEventHandlers, m_size + 1, (unint64_t)v26);
          v18 = (_QWORD *)((char *)self->_keyWebEventHandlers.m_buffer + 16 * self->_keyWebEventHandlers.m_size);
          v19 = *v17;
          *v17 = 0;
          *v18 = v19;
          v20 = v17[1];
          v17[1] = 0;
          v18[1] = v20;
          ++self->_keyWebEventHandlers.m_size;
          v21 = (const void *)*((_QWORD *)&v26[0] + 1);
        }
        else
        {
          v21 = 0;
          v22 = m_size + 1;
          m_buffer = self->_keyWebEventHandlers.m_buffer;
          *(_QWORD *)&v26[0] = 0;
          v24 = (id *)((char *)m_buffer + 16 * m_size);
          *v24 = a3;
          *((_QWORD *)&v26[0] + 1) = 0;
          v24[1] = v15;
          self->_keyWebEventHandlers.m_size = v22;
        }
        _Block_release(v21);
        v25 = *(const void **)&v26[0];
        *(_QWORD *)&v26[0] = 0;
        if (v25)
          CFRelease(v25);
      }
      else
      {
        (*((void (**)(id, id, _QWORD))a4 + 2))(a4, a3, 0);
      }
    }
  }
  else
  {
    v10 = qword_1ECE71258;
    if (os_log_type_enabled((os_log_t)qword_1ECE71258, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v26[0]) = 136315138;
      *(_QWORD *)((char *)v26 + 4) = "-[WKContentView(WKInteraction) _internalHandleKeyWebEvent:withCompletionHandler:]";
      _os_log_fault_impl(&dword_196BCC000, v10, OS_LOG_TYPE_FAULT, "%s was invoked on a background thread.", (uint8_t *)v26, 0xCu);
    }
    (*((void (**)(id, id, _QWORD))a4 + 2))(a4, a3, 0);
  }
}

- (void)_didHandleKeyEvent:(id)a3 eventWasHandled:(BOOL)a4
{
  Vector<WebKit::KeyEventAndCompletionBlock, 1UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> *p_keyWebEventHandlers;
  uint64_t m_size;
  uint64_t v8;
  KeyEventAndCompletionBlock *m_buffer;
  uint64_t v10;
  const void **v11;
  const void *v12;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if ((objc_msgSend(a3, "keyboardFlags") & 0x20) == 0)
      objc_msgSend((id)self->_positionInformationCallbackDepth, "handleKeyEvent:", a3);
    if (objc_msgSend(a3, "type") == 5)
      self->_isChangingFocusUsingAccessoryTab = 0;
    p_keyWebEventHandlers = &self->_keyWebEventHandlers;
    m_size = p_keyWebEventHandlers->m_size;
    if ((_DWORD)m_size)
    {
      v8 = 0;
      m_buffer = p_keyWebEventHandlers->m_buffer;
      v10 = 16 * m_size;
      while (*(id *)((char *)m_buffer + v8) != a3)
      {
        v8 += 16;
        if (v10 == v8)
          return;
      }
      (*(void (**)(void))(*(_QWORD *)((char *)m_buffer + v8 + 8) + 16))();
      v11 = (const void **)((char *)p_keyWebEventHandlers->m_buffer + v8);
      _Block_release(v11[1]);
      v12 = *v11;
      *v11 = 0;
      if (v12)
        CFRelease(v12);
      WTF::VectorMover<false,WebKit::KeyEventAndCompletionBlock>::move(v11 + 2, (const void **)p_keyWebEventHandlers->m_buffer + 2 * p_keyWebEventHandlers->m_size, v11);
      --p_keyWebEventHandlers->m_size;
    }
  }
}

- (BOOL)_interpretKeyEvent:(id)a3 isCharEvent:(BOOL)a4
{
  _BOOL8 v4;
  BOOL usingMouseDragForSelection;
  char v8;
  id Weak;
  void *v11;
  void *v12;
  uint64_t v13;
  int v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  int v19;

  v4 = a4;
  usingMouseDragForSelection = self->_usingMouseDragForSelection;
  self->_usingMouseDragForSelection = 1;
  if ((objc_msgSend((id)self->_positionInformationCallbackDepth, "beginWithEvent:") & 1) != 0
    || (objc_msgSend((id)self->_positionInformationCallbackDepth, "scrollTriggeringKeyIsPressed") & 1) != 0)
  {
    goto LABEL_3;
  }
  if (!-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    if ((objc_msgSend(a3, "keyboardFlags") & 0x20) != 0)
      goto LABEL_20;
    v13 = *((_QWORD *)self->_page.m_ptr + 4);
    v14 = *(unsigned __int8 *)(v13 + 237);
    if (!*(_BYTE *)(v13 + 237) && (objc_msgSend(a3, "isTabKey") & 1) != 0)
      goto LABEL_20;
    v15 = (void *)objc_msgSend(MEMORY[0x1E0CEA6E8], "sharedInstance");
    v16 = v15;
    if (v4)
      v17 = objc_msgSend(v15, "handleKeyAppCommandForCurrentEvent");
    else
      v17 = objc_msgSend(v15, "handleKeyTextCommandForCurrentEvent");
    if ((v17 & 1) != 0)
      goto LABEL_3;
    if ((objc_msgSend(a3, "modifierFlags") & 0x1010000) != 0)
      goto LABEL_20;
    v18 = (void *)objc_msgSend(a3, "characters");
    if (!objc_msgSend(v18, "length"))
      goto LABEL_20;
    v19 = objc_msgSend(v18, "characterAtIndex:", 0);
    if (v19 > 12)
    {
      if (v19 != 13)
      {
        if (v19 != 127)
        {
LABEL_25:
          v8 = 0;
          if (!v14 || !v4)
            goto LABEL_4;
          objc_msgSend(v16, "addInputString:withFlags:withInputManagerHint:", objc_msgSend(a3, "characters"), objc_msgSend(a3, "keyboardFlags"), objc_msgSend(a3, "inputManagerHint"));
          goto LABEL_3;
        }
        goto LABEL_30;
      }
    }
    else if (v19 != 3)
    {
      if (v19 != 8)
        goto LABEL_25;
LABEL_30:
      if (v14)
      {
        objc_msgSend(v16, "deleteFromInputWithFlags:", objc_msgSend(a3, "keyboardFlags"));
        goto LABEL_3;
      }
LABEL_20:
      v8 = 0;
      goto LABEL_4;
    }
    v8 = 0;
    if (!v14 || !v4)
      goto LABEL_4;
    objc_msgSend(v16, "addInputString:withFlags:withInputManagerHint:", CFSTR("\n"), 0, 0);
LABEL_3:
    v8 = 1;
    goto LABEL_4;
  }
  Weak = objc_loadWeak((id *)&self->_anon_fa8[24]);
  v11 = Weak;
  if (Weak)
    CFRetain(Weak);
  -[WKContentView _logMissingSystemInputDelegateIfNeeded:](self, "_logMissingSystemInputDelegateIfNeeded:", "-[WKContentView(WKInteraction) _interpretKeyEvent:isCharEvent:]");
  if (!v11)
    goto LABEL_20;
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C926C8]), "initWithKeyEntry:", objc_msgSend(a3, "originalKeyEntry"));
  objc_msgSend(v12, "setDocumentEditable:", *(unsigned __int8 *)(*((_QWORD *)self->_page.m_ptr + 4) + 237));
  objc_msgSend(v12, "setShouldInsertCharacter:", v4);
  v8 = objc_msgSend(v11, "shouldDeferEventHandlingToSystemForTextInput:context:", -[WKContentView asBETextInput](self, "asBETextInput"), v12);
  if (v12)
    CFRelease(v12);
  CFRelease(v11);
LABEL_4:
  self->_usingMouseDragForSelection = usingMouseDragForSelection;
  return v8;
}

- (id)filePickerAcceptedTypeIdentifiers
{
  void *m_ptr;

  m_ptr = self->_fileUploadPanel.m_ptr;
  if (m_ptr)
    return (id)objc_msgSend(m_ptr, "acceptedTypeIdentifiers");
  else
    return (id)MEMORY[0x1E0C9AA60];
}

- (void)dismissFilePicker
{
  objc_msgSend(self->_fileUploadPanel.m_ptr, "dismissIfNeededWithReason:", 3);
}

- (BOOL)isScrollableForKeyboardScrollViewAnimator:(id)a3
{
  if (*(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 237)
    || self->_anon_938[113] == 16
    || !objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView", a3), "scrollView"), "isScrollEnabled"))
  {
    return 0;
  }
  else
  {
    return objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "scrollView"), "allowsKeyboardScrolling");
  }
}

- (double)keyboardScrollViewAnimator:(id)a3 distanceForIncrement:(unsigned __int8)a4 inDirection:(unsigned __int8)a5
{
  int v6;
  double result;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float v15;
  WebCore::Scrollbar *v16;
  double v17;
  int v18;
  int v19;
  double v20;

  if (a4)
  {
    v6 = a5 & 0xFE;
    if (a4 == 1)
    {
      v15 = *(float *)(*((_QWORD *)self->_page.m_ptr + 4) + 2284);
      v16 = (WebCore::Scrollbar *)-[WKContentView bounds](self, "bounds", a3);
      v18 = llroundf((float)(int)v15 * 0.8);
      v19 = llroundf((float)(int)((int)v17 - WebCore::Scrollbar::maxOverlapBetweenPages(v16)));
      if (v18 > v19)
        v19 = v18;
      if (v19 <= 1)
        v19 = 1;
      -[WKContentView convertSize:toView:](self, "convertSize:toView:", -[WKContentView webView](self, "webView"), 0.0, (double)v19);
      if (v6 != 2)
        return v20;
    }
    else
    {
      result = 0.0;
      if (a4 == 2)
      {
        -[WKContentView bounds](self, "bounds", a3, 0.0);
        -[WKContentView convertRect:toView:](self, "convertRect:toView:", -[WKContentView webView](self, "webView"), v8, v9, v10, v11);
        if (v6 == 2)
          return v12;
        else
          return v13;
      }
    }
  }
  else
  {
    -[WKContentView convertSize:toView:](self, "convertSize:toView:", -[WKContentView webView](self, "webView", a3, a4, a5), 0.0, 40.0);
    return v14;
  }
  return result;
}

- (void)keyboardScrollViewAnimatorWillScroll:(id)a3
{
  BYTE5(self->_revealFocusedElementDeferrer.m_ptr) = 1;
  -[WKContentView willStartZoomOrScroll](self, "willStartZoomOrScroll", a3);
}

- (BOOL)isKeyboardScrollingAnimationRunning
{
  return BYTE5(self->_revealFocusedElementDeferrer.m_ptr);
}

- (void)_executeEditCommand:(id)a3
{
  -[WKContentView _executeEditCommand:notifyDelegate:](self, "_executeEditCommand:notifyDelegate:", a3, 1);
}

- (void)_executeEditCommand:(id)a3 notifyDelegate:(BOOL)a4
{
  WebPageProxy *m_ptr;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  if (a4)
    -[WKContentView _internalBeginSelectionChange](self, "_internalBeginSelectionChange");
  m_ptr = self->_page.m_ptr;
  MEMORY[0x19AEABCC8](&v15, a3);
  v14 = 0;
  CFRetain(self);
  v8 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v8 = &off_1E3507B30;
  *(_QWORD *)(v8 + 8) = self;
  *(_BYTE *)(v8 + 16) = a4;
  v13 = v8;
  WebKit::WebPageProxy::executeEditCommand((uint64_t)m_ptr, &v15, (uint64_t *)&v14, &v13);
  v10 = v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
}

- (void)_deleteByWord
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v3 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = "-[WKContentView(WKInteraction) _deleteByWord]";
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v4, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784A980);
  }
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", CFSTR("deleteWordBackward"));
}

- (void)_deleteForwardByWord
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v3 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = "-[WKContentView(WKInteraction) _deleteForwardByWord]";
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v4, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784AA58);
  }
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", CFSTR("deleteWordForward"));
}

- (void)_deleteToStartOfLine
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v3 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = "-[WKContentView(WKInteraction) _deleteToStartOfLine]";
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v4, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784AB30);
  }
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", CFSTR("deleteToBeginningOfLine"));
}

- (void)_deleteToEndOfLine
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v3 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = "-[WKContentView(WKInteraction) _deleteToEndOfLine]";
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v4, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784AC08);
  }
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", CFSTR("deleteToEndOfLine"));
}

- (void)_deleteForwardAndNotify:(BOOL)a3
{
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3))
  {
    v4 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315138;
      v6 = "-[WKContentView(WKInteraction) _deleteForwardAndNotify:]";
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v5, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784ACE0);
  }
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", CFSTR("deleteForward"));
}

- (void)_deleteToEndOfParagraph
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v3 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = "-[WKContentView(WKInteraction) _deleteToEndOfParagraph]";
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v4, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784ADB8);
  }
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", CFSTR("deleteToEndOfParagraph"));
}

- (void)_transpose
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v3 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = "-[WKContentView(WKInteraction) _transpose]";
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v4, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784AE88);
  }
  -[WKContentView transposeCharactersAroundSelection](self, "transposeCharactersAroundSelection");
}

- (id)_moveUp:(BOOL)a3 withHistory:(id)a4
{
  _BOOL4 v4;
  const __CFString *v6;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v4 = a3;
  v11 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3, a4))
  {
    v8 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "-[WKContentView(WKInteraction) _moveUp:withHistory:]";
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v9, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784AF7CLL);
  }
  if (v4)
    v6 = CFSTR("moveUpAndModifySelection");
  else
    v6 = CFSTR("moveUp");
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v6);
  return 0;
}

- (id)_moveDown:(BOOL)a3 withHistory:(id)a4
{
  _BOOL4 v4;
  const __CFString *v6;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v4 = a3;
  v11 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3, a4))
  {
    v8 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "-[WKContentView(WKInteraction) _moveDown:withHistory:]";
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v9, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784B070);
  }
  if (v4)
    v6 = CFSTR("moveDownAndModifySelection");
  else
    v6 = CFSTR("moveDown");
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v6);
  return 0;
}

- (id)_moveLeft:(BOOL)a3 withHistory:(id)a4
{
  _BOOL4 v4;
  const __CFString *v6;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v4 = a3;
  v11 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3, a4))
  {
    v8 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "-[WKContentView(WKInteraction) _moveLeft:withHistory:]";
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v9, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784B164);
  }
  if (v4)
    v6 = CFSTR("moveLeftAndModifySelection");
  else
    v6 = CFSTR("moveLeft");
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v6);
  return 0;
}

- (id)_moveRight:(BOOL)a3 withHistory:(id)a4
{
  _BOOL4 v4;
  const __CFString *v6;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v4 = a3;
  v11 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3, a4))
  {
    v8 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "-[WKContentView(WKInteraction) _moveRight:withHistory:]";
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v9, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784B258);
  }
  if (v4)
    v6 = CFSTR("moveRightAndModifySelection");
  else
    v6 = CFSTR("moveRight");
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v6);
  return 0;
}

- (id)_moveToStartOfWord:(BOOL)a3 withHistory:(id)a4
{
  _BOOL4 v4;
  const __CFString *v6;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v4 = a3;
  v11 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3, a4))
  {
    v8 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "-[WKContentView(WKInteraction) _moveToStartOfWord:withHistory:]";
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v9, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784B34CLL);
  }
  if (v4)
    v6 = CFSTR("moveWordBackwardAndModifySelection");
  else
    v6 = CFSTR("moveWordBackward");
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v6);
  return 0;
}

- (id)_moveToStartOfParagraph:(BOOL)a3 withHistory:(id)a4
{
  _BOOL4 v4;
  const __CFString *v6;
  const __CFString *v7;
  NSObject *v9;
  int v10;
  const char *v11;
  uint64_t v12;

  v4 = a3;
  v12 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3, a4))
  {
    v9 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315138;
      v11 = "-[WKContentView(WKInteraction) _moveToStartOfParagraph:withHistory:]";
      _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v10, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784B460);
  }
  if (v4)
    v6 = CFSTR("moveBackwardAndModifySelection");
  else
    v6 = CFSTR("moveBackward");
  if (v4)
    v7 = CFSTR("moveToBeginningOfParagraphAndModifySelection");
  else
    v7 = CFSTR("moveToBeginningOfParagraph");
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v6);
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v7);
  return 0;
}

- (id)_moveToStartOfLine:(BOOL)a3 withHistory:(id)a4
{
  _BOOL4 v4;
  const __CFString *v6;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v4 = a3;
  v11 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3, a4))
  {
    v8 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "-[WKContentView(WKInteraction) _moveToStartOfLine:withHistory:]";
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v9, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784B554);
  }
  if (v4)
    v6 = CFSTR("moveToBeginningOfLineAndModifySelection");
  else
    v6 = CFSTR("moveToBeginningOfLine");
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v6);
  return 0;
}

- (id)_moveToStartOfDocument:(BOOL)a3 withHistory:(id)a4
{
  _BOOL4 v4;
  const __CFString *v6;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v4 = a3;
  v11 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3, a4))
  {
    v8 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "-[WKContentView(WKInteraction) _moveToStartOfDocument:withHistory:]";
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v9, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784B648);
  }
  if (v4)
    v6 = CFSTR("moveToBeginningOfDocumentAndModifySelection");
  else
    v6 = CFSTR("moveToBeginningOfDocument");
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v6);
  return 0;
}

- (id)_moveToEndOfWord:(BOOL)a3 withHistory:(id)a4
{
  _BOOL4 v4;
  const __CFString *v6;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v4 = a3;
  v11 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3, a4))
  {
    v8 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "-[WKContentView(WKInteraction) _moveToEndOfWord:withHistory:]";
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v9, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784B73CLL);
  }
  if (v4)
    v6 = CFSTR("moveWordForwardAndModifySelection");
  else
    v6 = CFSTR("moveWordForward");
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v6);
  return 0;
}

- (id)_moveToEndOfParagraph:(BOOL)a3 withHistory:(id)a4
{
  _BOOL4 v4;
  const __CFString *v6;
  const __CFString *v7;
  NSObject *v9;
  int v10;
  const char *v11;
  uint64_t v12;

  v4 = a3;
  v12 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3, a4))
  {
    v9 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315138;
      v11 = "-[WKContentView(WKInteraction) _moveToEndOfParagraph:withHistory:]";
      _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v10, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784B850);
  }
  if (v4)
    v6 = CFSTR("moveForwardAndModifySelection");
  else
    v6 = CFSTR("moveForward");
  if (v4)
    v7 = CFSTR("moveToEndOfParagraphAndModifySelection");
  else
    v7 = CFSTR("moveToEndOfParagraph");
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v6);
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v7);
  return 0;
}

- (id)_moveToEndOfLine:(BOOL)a3 withHistory:(id)a4
{
  _BOOL4 v4;
  const __CFString *v6;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v4 = a3;
  v11 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3, a4))
  {
    v8 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "-[WKContentView(WKInteraction) _moveToEndOfLine:withHistory:]";
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v9, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784B944);
  }
  if (v4)
    v6 = CFSTR("moveToEndOfLineAndModifySelection");
  else
    v6 = CFSTR("moveToEndOfLine");
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v6);
  return 0;
}

- (id)_moveToEndOfDocument:(BOOL)a3 withHistory:(id)a4
{
  _BOOL4 v4;
  const __CFString *v6;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v4 = a3;
  v11 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3, a4))
  {
    v8 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "-[WKContentView(WKInteraction) _moveToEndOfDocument:withHistory:]";
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v9, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784BA38);
  }
  if (v4)
    v6 = CFSTR("moveToEndOfDocumentAndModifySelection");
  else
    v6 = CFSTR("moveToEndOfDocument");
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v6);
  return 0;
}

- (void)setBottomBufferHeight:(double)a3
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions", a3))
  {
    v3 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = "-[WKContentView(WKInteraction) setBottomBufferHeight:]";
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v4, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784BB00);
  }
}

- (id)automaticallySelectedOverlay
{
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v4 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315138;
      v6 = "-[WKContentView(WKInteraction) automaticallySelectedOverlay]";
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v5, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784BBD0);
  }
  return -[WKContentView unscaledView](self, "unscaledView");
}

- (int64_t)selectionGranularity
{
  return 0;
}

- (unsigned)characterBeforeCaretSelection
{
  return 0;
}

- (id)wordContainingCaretSelection
{
  return 0;
}

- (id)wordRangeContainingCaretSelection
{
  return 0;
}

- (BOOL)hasContent
{
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v4 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315138;
      v6 = "-[WKContentView(WKInteraction) hasContent]";
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v5, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784BCCCLL);
  }
  return -[WKContentView _hasContent](self, "_hasContent");
}

- (BOOL)_hasContent
{
  _BYTE *v2;
  BOOL v3;

  v2 = (_BYTE *)*((_QWORD *)self->_page.m_ptr + 4);
  if (v2[233])
    v3 = 1;
  else
    v3 = v2[560] == 0;
  return !v3 && v2[345] != 0;
}

- (void)selectAll
{
  NSObject *v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v2 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v3 = 136315138;
      v4 = "-[WKContentView(WKInteraction) selectAll]";
      _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v3, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784BDD0);
  }
}

- (BOOL)hasSelection
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v3 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v4 = 136315138;
      v5 = "-[WKContentView(WKInteraction) hasSelection]";
      _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v4, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784BE9CLL);
  }
  return 0;
}

- (BOOL)isPosition:(id)a3 atBoundary:(int64_t)a4 inDirection:(int64_t)a5
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if (a4 != 3 || !*(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 560))
    goto LABEL_8;
  if (!a5)
  {
    v6 = objc_msgSend(a3, "isEqual:", -[UITextRange end](-[WKContentView selectedTextRange](self, "selectedTextRange"), "end"));
    if (!v6)
      return v6;
    v9 = *((_QWORD *)self->_page.m_ptr + 4);
    if (*(_BYTE *)(v9 + 560))
    {
      v8 = *(unsigned __int8 *)(v9 + 363);
      goto LABEL_13;
    }
LABEL_14:
    __break(1u);
    return v6;
  }
  if (a5 != 1)
  {
LABEL_8:
    LOBYTE(v6) = 0;
    return v6;
  }
  v6 = objc_msgSend(a3, "isEqual:", -[UITextRange start](-[WKContentView selectedTextRange](self, "selectedTextRange"), "start"));
  if (!v6)
    return v6;
  v7 = *((_QWORD *)self->_page.m_ptr + 4);
  if (!*(_BYTE *)(v7 + 560))
    goto LABEL_14;
  v8 = *(unsigned __int8 *)(v7 + 362);
LABEL_13:
  LOBYTE(v6) = v8 != 0;
  return v6;
}

- (id)positionFromPosition:(id)a3 toBoundary:(int64_t)a4 inDirection:(int64_t)a5
{
  return 0;
}

- (BOOL)isPosition:(id)a3 withinTextUnit:(int64_t)a4 inDirection:(int64_t)a5
{
  return 0;
}

- (id)rangeEnclosingPosition:(id)a3 withGranularity:(int64_t)a4 inDirection:(int64_t)a5
{
  return 0;
}

- (void)takeTraitsFrom:(id)a3
{
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v5 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "-[WKContentView(WKInteraction) takeTraitsFrom:]";
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v6, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784C05CLL);
  }
  objc_msgSend(-[WKContentView textInputTraits](self, "textInputTraits"), "takeTraitsFrom:", a3);
}

- (void)_showKeyboard
{
  -[WKContentView setUpTextSelectionAssistant](self, "setUpTextSelectionAssistant");
  if (-[WKContentView isFirstResponder](self, "isFirstResponder")
    && !self->_suppressSelectionAssistantReasons.m_storage)
  {
    objc_msgSend(self->_textInteractionWrapper.m_ptr, "activateSelection");
  }
  -[WKContentView reloadInputViews](self, "reloadInputViews");
}

- (BOOL)_formControlRefreshEnabled
{
  return self->_page.m_ptr != 0;
}

- (void)focusedSelectElementOptions
{
  return &self->_anon_938[128];
}

- (BOOL)_shouldShowKeyboardForElement:(const void *)a3
{
  return *((_BYTE *)a3 + 186) != 1
      && -[WKContentView _shouldShowKeyboardForElementIgnoringInputMode:](self, "_shouldShowKeyboardForElementIgnoringInputMode:");
}

- (BOOL)_shouldShowKeyboardForElementIgnoringInputMode:(const void *)a3
{
  unsigned int v3;

  v3 = *((unsigned __int8 *)a3 + 185) - 1;
  return v3 < 0xE && ((0x23FFu >> v3) & 1) != 0
      || -[WKContentView _elementTypeRequiresAccessoryView:](self, "_elementTypeRequiresAccessoryView:");
}

- (void)startDeferringInputViewUpdates:(OptionSet<WebKit::InputViewUpdateDeferralSource>)a3
{
  BOOL engaged;
  NSObject *v6;
  _DWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  engaged = self->_lastOutstandingPositionInformationRequest.__engaged_;
  if (!engaged)
  {
    v6 = qword_1ECE71988;
    if (os_log_type_enabled((os_log_t)qword_1ECE71988, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 67109120;
      v7[1] = a3.m_storage;
      _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "Started deferring input view updates (%02x)", (uint8_t *)v7, 8u);
    }
    -[WKContentView _beginPinningInputViews](self, "_beginPinningInputViews");
    engaged = self->_lastOutstandingPositionInformationRequest.__engaged_;
  }
  self->_lastOutstandingPositionInformationRequest.__engaged_ = engaged | a3.m_storage;
}

- (void)stopDeferringInputViewUpdates:(OptionSet<WebKit::InputViewUpdateDeferralSource>)a3
{
  _BOOL4 engaged;
  int v6;
  NSObject *v7;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  engaged = self->_lastOutstandingPositionInformationRequest.__engaged_;
  if ((engaged & a3.m_storage) != 0)
  {
    v6 = engaged & (a3.m_storage ^ 0xFF);
    self->_lastOutstandingPositionInformationRequest.__engaged_ = v6;
    if (!v6)
    {
      -[WKContentView _cancelPreviousResetInputViewDeferralRequest](self, "_cancelPreviousResetInputViewDeferralRequest");
      v7 = qword_1ECE71988;
      if (os_log_type_enabled((os_log_t)qword_1ECE71988, OS_LOG_TYPE_DEFAULT))
      {
        v8[0] = 67109120;
        v8[1] = a3.m_storage;
        _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "Stopped deferring input view updates (%02x)", (uint8_t *)v8, 8u);
      }
      -[WKContentView _endPinningInputViews](self, "_endPinningInputViews");
    }
  }
}

- (void)stopDeferringInputViewUpdatesForAllSources
{
  _BOOL4 engaged;
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  engaged = self->_lastOutstandingPositionInformationRequest.__engaged_;
  if (self->_lastOutstandingPositionInformationRequest.__engaged_)
  {
    v4 = qword_1ECE71988;
    if (os_log_type_enabled((os_log_t)qword_1ECE71988, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 67109120;
      v5[1] = engaged;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "Stopped deferring all input view updates (%02x)", (uint8_t *)v5, 8u);
    }
    -[WKContentView _cancelPreviousResetInputViewDeferralRequest](self, "_cancelPreviousResetInputViewDeferralRequest");
    self->_lastOutstandingPositionInformationRequest.__engaged_ = 0;
    -[WKContentView _endPinningInputViews](self, "_endPinningInputViews");
  }
}

- (void)_elementDidFocus:(const void *)a3 userIsInteracting:(BOOL)a4 blurPreviousNode:(BOOL)a5 activityStateChanges:(OptionSet<WebCore:(id)a7 :ActivityState>)a6 userObject:
{
  _BOOL4 v9;
  _BOOL8 v10;
  BOOL v13;
  BOOL v14;
  void *v15;
  WKFocusedElementInfo *v16;
  uint64_t v17;
  BOOL v18;
  WKContentView *v19;
  WebPageProxy *v20;
  uint64_t v21;
  BOOL v22;
  WebPageProxy *m_ptr;
  uint64_t v24;
  void *value;
  char v26;
  char v27;
  WKContentView *v28;
  void *v29;
  void *v30;
  WKContentView *v31;
  void *v32;
  void *v33;
  int v34;
  WKFormInputSession *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unsigned int v39;
  FocusedElementInformation *p_focusedElementInformation;
  ProcessQualified<WTF::UUID> v41;
  FloatRect v42;
  IntRect v43;
  ProcessQualified<WTF::UUID> v44;
  __int128 v45;
  __int128 v46;
  FloatRect v47;
  IntRect v48;
  __int128 v49;
  ProcessQualified<WTF::UUID> v50;
  IntRect v51;
  FloatRect v52;
  __int128 v53;
  void *v54;
  void *v55;
  WKContentView *v56;
  char v57;
  unsigned __int8 v58;
  uint64_t v59;
  void *v60;
  void *v61;
  char v62;
  WKContentView *v63;
  WKContentView *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL4 v68;
  int v69;
  char var0;
  BOOL potentialTapInProgress;
  BOOL isTapHighlightFading;
  uint64_t v73;
  WKContentView **v74;
  char v75;
  WKContentView *v76;

  v9 = a5;
  v10 = a4;
  v76 = self;
  v13 = -[WKContentView _hasFocusedElement](self, "_hasFocusedElement");
  isTapHighlightFading = self->_isTapHighlightFading;
  self->_isTapHighlightFading = v13;
  v14 = -[WKContentView _shouldShowKeyboardForElement:](self, "_shouldShowKeyboardForElement:", a3);
  potentialTapInProgress = self->_potentialTapInProgress;
  self->_potentialTapInProgress = v14;
  v74 = &v76;
  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  v75 = 1;
  BYTE6(self->_dataListTextSuggestions.m_ptr) = BYTE5(self->_dataListTextSuggestions.m_ptr);
  v15 = (void *)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_inputDelegate");
  v16 = -[WKFocusedElementInfo initWithFocusedElementInformation:isUserInitiated:userObject:]([WKFocusedElementInfo alloc], "initWithFocusedElementInformation:isUserInitiated:userObject:", a3, v10, a7);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if (objc_msgSend(v15, "_webView:focusShouldStartInputSession:", -[WKContentView webView](v76, "webView"), v16))v17 = 1;
    else
      v17 = 2;
  }
  else
  {
    v17 = 0;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v17 = objc_msgSend(v15, "_webView:decidePolicyForFocusedElement:", -[WKContentView webView](v76, "webView"), v16);
  var0 = a6.var0;
  v18 = v17 != 2
     && (v17 == 1
      || !v17
      && (v10
       || ((-[WKContentView isFirstResponder](v76, "isFirstResponder") & 1) != 0 || v76->_isEditable)
       && ((a6.var0 | 2) != 2
        || v76->_isTapHighlightFading
        || -[WKContentView _shouldShowKeyboardForElementIgnoringInputMode:](v76, "_shouldShowKeyboardForElementIgnoringInputMode:", a3)&& (objc_msgSend(MEMORY[0x1E0CEA6C8], "isInHardwareKeyboardMode") & 1) != 0)));
  if (*((_BYTE *)a3 + 367) && !v76->_potentialTapInProgress)
    v18 = 0;
  if (v9)
  {
    -[WKContentView startDeferringInputViewUpdates:](v76, "startDeferringInputViewUpdates:", 4);
    -[WKContentView _elementDidBlur](v76, "_elementDidBlur");
  }
  if (!v18)
  {
    v19 = v76;
    goto LABEL_41;
  }
  v19 = v76;
  if (!*((_BYTE *)a3 + 185))
  {
LABEL_41:
    m_ptr = v19->_page.m_ptr;
    v24 = *((_QWORD *)m_ptr + 26);
    LOBYTE(v73) = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsShowingInputViewForFocusedElement>(v24, &v73, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
    goto LABEL_100;
  }
  v20 = v76->_page.m_ptr;
  v21 = *((_QWORD *)v20 + 26);
  LOBYTE(v73) = 1;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsShowingInputViewForFocusedElement>(v21, &v73, *(_QWORD *)(*((_QWORD *)v20 + 4) + 1896), 0);
  if (-[WKContentView _hasFocusedElement](v76, "_hasFocusedElement")
    && v76->_focusedElementInformation.elementContext.webPageIdentifier.m_identifier == *((_QWORD *)a3 + 4))
  {
    v22 = v76->_focusedElementInformation.elementContext.m_processIdentifier.m_identifier == *((_QWORD *)a3 + 7)
       && *(_QWORD *)&v76->_focusedElementInformation.elementContext.documentIdentifier.m_object[8] == *((_QWORD *)a3 + 6);
    if (v22
      && v76->_focusedElementInformation.elementIdentifier.m_identifier == *((_QWORD *)a3 + 8)
      && *(_QWORD *)&v76->_anon_938[8] == *((_QWORD *)a3 + 10))
    {
      if (v76->_inputPeripheral.m_ptr)
      {
        if ((-[WKContentView isFirstResponder](v76, "isFirstResponder") & 1) == 0)
          -[WKContentView becomeFirstResponder](v76, "becomeFirstResponder");
        -[WKContentView accessoryOpen](v76, "accessoryOpen");
      }
      goto LABEL_100;
    }
  }
  objc_msgSend(objc_loadWeak(&v76->_webView.m_weakReference), "_resetFocusPreservationCount");
  v76->_textInteractionDidChangeFocusedElement = 0;
  value = v76->_domPasteRequestHandler.m_function.m_callableWrapper.__ptr_.__value_;
  v76->_domPasteRequestHandler.m_function.m_callableWrapper.__ptr_.__value_ = 0;
  if (value)
    CFRelease(value);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v26 = objc_msgSend(v15, "_webView:focusRequiresStrongPasswordAssistance:", -[WKContentView webView](v76, "webView"), v16);
    v76->_textInteractionDidChangeFocusedElement = v26;
  }
  v27 = objc_opt_respondsToSelector();
  v28 = v76;
  if ((v27 & 1) != 0)
  {
    v29 = (void *)objc_msgSend(v15, "_webViewAdditionalContextForStrongPasswordAssistance:", -[WKContentView webView](v76, "webView"));
    v30 = v29;
    v31 = v76;
    if (v29)
      CFRetain(v29);
    v32 = v31->_domPasteRequestHandler.m_function.m_callableWrapper.__ptr_.__value_;
    v31->_domPasteRequestHandler.m_function.m_callableWrapper.__ptr_.__value_ = v30;
    if (!v32)
      goto LABEL_53;
  }
  else
  {
    v33 = (void *)MEMORY[0x1E0C9AA70];
    CFRetain(MEMORY[0x1E0C9AA70]);
    v32 = v28->_domPasteRequestHandler.m_function.m_callableWrapper.__ptr_.__value_;
    v28->_domPasteRequestHandler.m_function.m_callableWrapper.__ptr_.__value_ = v33;
    if (!v32)
      goto LABEL_53;
  }
  CFRelease(v32);
LABEL_53:
  v34 = objc_opt_respondsToSelector();
  v69 = objc_opt_respondsToSelector();
  if (((v34 | v69) & 1) != 0)
  {
    objc_msgSend(v76->_formInputSession.m_ptr, "invalidate");
    v35 = [WKFormInputSession alloc];
    v36 = -[WKFormInputSession initWithContentView:focusedElementInfo:requiresStrongPasswordAssistance:](v35, "initWithContentView:focusedElementInfo:requiresStrongPasswordAssistance:", v76, v16, v76->_textInteractionDidChangeFocusedElement);
    v37 = v76->_formInputSession.m_ptr;
    v76->_formInputSession.m_ptr = (void *)v36;
    if (v37)
      CFRelease(v37);
  }
  if ((v34 & 1) != 0)
  {
    v38 = -[WKContentView webView](v76, "webView");
    objc_msgSend(v15, "_webView:willStartInputSession:", v38, v76->_formInputSession.m_ptr);
  }
  v39 = (*((unsigned __int8 *)a3 + 185) < 0xFuLL) & (0x47FEu >> *((_BYTE *)a3 + 185));
  v68 = -[WKContentView setIsEditable:](v76, "setIsEditable:", v39);
  p_focusedElementInformation = &v76->_focusedElementInformation;
  v41 = (ProcessQualified<WTF::UUID>)*((_OWORD *)a3 + 3);
  v43 = *(IntRect *)a3;
  v42 = (FloatRect)*((_OWORD *)a3 + 1);
  *(_OWORD *)&v76->_focusedElementInformation.elementContext.webPageIdentifier.m_identifier = *((_OWORD *)a3 + 2);
  *(ProcessQualified<WTF::UUID> *)((char *)&p_focusedElementInformation->elementContext.documentIdentifier + 8) = v41;
  p_focusedElementInformation->interactionRect = v43;
  p_focusedElementInformation->elementContext.boundingRect = v42;
  v44 = (ProcessQualified<WTF::UUID>)*((_OWORD *)a3 + 7);
  v46 = *((_OWORD *)a3 + 4);
  v45 = *((_OWORD *)a3 + 5);
  *(_OWORD *)&p_focusedElementInformation[1].elementContext.boundingRect.m_size.m_width = *((_OWORD *)a3 + 6);
  p_focusedElementInformation[1].elementContext.documentIdentifier = v44;
  *(_OWORD *)&p_focusedElementInformation->elementIdentifier.m_identifier = v46;
  *(_OWORD *)&p_focusedElementInformation[1].interactionRect.m_size.m_width = v45;
  v48 = (IntRect)*((_OWORD *)a3 + 9);
  v47 = (FloatRect)*((_OWORD *)a3 + 10);
  v49 = *((_OWORD *)a3 + 8);
  *(_OWORD *)&p_focusedElementInformation[2].elementContext.boundingRect.m_size.m_height = *(_OWORD *)((char *)a3 + 172);
  p_focusedElementInformation[2].interactionRect = v48;
  p_focusedElementInformation[2].elementContext.boundingRect = v47;
  *(_OWORD *)&p_focusedElementInformation[1].elementContext.m_processIdentifier.m_identifier = v49;
  WTF::String::operator=((WTF::StringImpl **)&p_focusedElementInformation[2].elementContext.documentIdentifier.m_object[8], (WTF::StringImpl *)((char *)a3 + 192));
  WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&p_focusedElementInformation[2].elementContext.m_processIdentifier, (uint64_t)a3 + 200);
  p_focusedElementInformation[3].interactionRect.m_location.m_x = *((_DWORD *)a3 + 54);
  WTF::String::operator=((WTF::StringImpl **)&p_focusedElementInformation[3].interactionRect.m_size, (WTF::StringImpl *)((char *)a3 + 224));
  p_focusedElementInformation[3].elementContext.boundingRect.m_location = (FloatPoint)*((_QWORD *)a3 + 29);
  WTF::String::operator=((WTF::StringImpl **)&p_focusedElementInformation[3].elementContext.boundingRect.m_size, (WTF::StringImpl *)((char *)a3 + 240));
  LOWORD(p_focusedElementInformation[3].elementContext.webPageIdentifier.m_identifier) = *((_WORD *)a3 + 124);
  WTF::String::operator=((WTF::StringImpl **)&p_focusedElementInformation[3].elementContext.documentIdentifier, (WTF::StringImpl *)((char *)a3 + 256));
  v50 = *(ProcessQualified<WTF::UUID> *)((char *)a3 + 264);
  *(_OWORD *)&p_focusedElementInformation[3].elementIdentifier.m_identifier = *(_OWORD *)((char *)a3 + 280);
  *(ProcessQualified<WTF::UUID> *)((char *)&p_focusedElementInformation[3].elementContext.documentIdentifier + 8) = v50;
  LOWORD(p_focusedElementInformation[4].interactionRect.m_size.m_width) = *((_WORD *)a3 + 148);
  WTF::String::operator=((WTF::StringImpl **)&p_focusedElementInformation[4].elementContext, (WTF::StringImpl *)((char *)a3 + 304));
  WTF::String::operator=((WTF::StringImpl **)&p_focusedElementInformation[4].elementContext.boundingRect.m_size, (WTF::StringImpl *)((char *)a3 + 312));
  WTF::String::operator=((WTF::StringImpl **)&p_focusedElementInformation[4].elementContext.webPageIdentifier, (WTF::StringImpl *)((char *)a3 + 320));
  *(_WORD *)p_focusedElementInformation[4].elementContext.documentIdentifier.m_object = *((_WORD *)a3 + 164);
  WebCore::Color::operator=();
  WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&p_focusedElementInformation[4].elementContext.m_processIdentifier, (uint64_t *)a3 + 43);
  v51 = *(IntRect *)((char *)a3 + 360);
  v52 = *(FloatRect *)((char *)a3 + 376);
  v53 = *(_OWORD *)((char *)a3 + 392);
  *(_QWORD *)&p_focusedElementInformation[5].elementContext.documentIdentifier.m_object[8] = *((_QWORD *)a3 + 51);
  p_focusedElementInformation[5].elementContext.boundingRect = v52;
  *(_OWORD *)&p_focusedElementInformation[5].elementContext.webPageIdentifier.m_identifier = v53;
  p_focusedElementInformation[5].interactionRect = v51;
  v54 = v76->_legacyTextInputTraits.m_ptr;
  v76->_legacyTextInputTraits.m_ptr = 0;
  if (v54)
    CFRelease(v54);
  v55 = v76->_extendedTextInputTraits.m_ptr;
  v76->_extendedTextInputTraits.m_ptr = 0;
  if (v55)
    CFRelease(v55);
  if ((-[WKContentView isFirstResponder](v76, "isFirstResponder") & 1) == 0)
    -[WKContentView becomeFirstResponder](v76, "becomeFirstResponder");
  v56 = v76;
  v57 = v39 ^ 1;
  if (v76->_suppressSelectionAssistantReasons.m_storage)
    v57 = 1;
  if ((v57 & 1) == 0 && (var0 & 2) != 0)
  {
    BYTE2(v76->_dataListSuggestionsControl.m_weakReference) = 1;
    objc_msgSend(v76->_textInteractionWrapper.m_ptr, "activateSelection");
    WebKit::WebPageProxy::restoreSelectionInFocusedEditableElement((uint64_t)v76->_page.m_ptr);
    WebKit::WebPageProxy::scheduleFullEditorStateUpdate((uint64_t)v76->_page.m_ptr);
    v56 = v76;
  }
  v58 = v56->_anon_938[113] - 11;
  if (v58 <= 7u && ((0xB7u >> v58) & 1) != 0)
  {
    v59 = objc_msgSend(objc_alloc(*off_1E3507F08[(char)v58]), "initWithView:", v56);
    v56 = v76;
  }
  else
  {
    v59 = 0;
  }
  v60 = v56->_inputPeripheral.m_ptr;
  v56->_inputPeripheral.m_ptr = (void *)v59;
  if (v60)
    CFRelease(v60);
  if (v39)
  {
    v76->_shouldRestoreSelection = !v76->_isTapHighlightFading;
    -[WKContentView _showKeyboard](v76, "_showKeyboard");
    if ((objc_msgSend((id)-[WKContentView window](v76, "window"), "isKeyWindow") & 1) == 0)
      objc_msgSend((id)-[WKContentView window](v76, "window"), "makeKeyWindow");
  }
  else
  {
    v76->_shouldRestoreSelection = 0;
    -[WKContentView reloadInputViews](v76, "reloadInputViews");
  }
  if (!objc_msgSend(MEMORY[0x1E0CEA6C8], "activeKeyboard"))
    v76->_shouldRestoreSelection = 0;
  if (v68)
    objc_msgSend(objc_loadWeak(&v76->_webView.m_weakReference), "_scheduleVisibleContentRectUpdate");
  if (v39)
  {
    if (objc_msgSend(MEMORY[0x1E0CEA6C8], "usesInputSystemUI")
      && (v61 = (void *)objc_msgSend(MEMORY[0x1E0CEA6C8], "activeKeyboard")) != 0)
    {
      v62 = objc_msgSend(v61, "isMinimized");
    }
    else
    {
      v62 = 1;
    }
    v64 = v76;
    if (objc_msgSend(-[WKContentView _scroller](v76, "_scroller"), "_isFirstResponderKeyboardAvoidanceEnabled"))
    {
      if ((!v76->_shouldRestoreSelection & v62) != 0)
        v65 = 1;
      else
        v65 = 3;
    }
    else
    {
      v65 = 5;
    }
    WebKit::RevealFocusedElementDeferrer::create(v64, v65, &v73);
    v66 = *(_QWORD *)&v76->_actionsToPerformAfterEditorStateUpdate.m_capacity;
    *(_QWORD *)&v76->_actionsToPerformAfterEditorStateUpdate.m_capacity = v73;
    if (v66)
      WTF::RefCounted<WebKit::RevealFocusedElementDeferrer>::deref(v66);
    v63 = v76;
    *((_BYTE *)v76->_page.m_ptr + 1032) = 1;
  }
  else
  {
    -[WKContentView _zoomToRevealFocusedElement](v76, "_zoomToRevealFocusedElement");
    v63 = v76;
  }
  -[WKContentView _updateAccessory](v63, "_updateAccessory");
  objc_msgSend(v76->_inputPeripheral.m_ptr, "beginEditing");
  if ((v69 & 1) != 0)
  {
    v67 = -[WKContentView webView](v76, "webView");
    objc_msgSend(v15, "_webView:didStartInputSession:", v67, v76->_formInputSession.m_ptr);
  }
  objc_msgSend(objc_loadWeak(&v76->_webView.m_weakReference), "didStartFormControlInteraction");
LABEL_100:
  if (v16)
    CFRelease(v16);
  -[WKContentView stopDeferringInputViewUpdates:](v76, "stopDeferringInputViewUpdates:", 5);
  WTF::ScopeExit<-[WKContentView(WKInteraction) _elementDidFocus:userIsInteracting:blurPreviousNode:activityStateChanges:userObject:]::$_66>::~ScopeExit((uint64_t **)&v74);
  self->_potentialTapInProgress = potentialTapInProgress;
  self->_isTapHighlightFading = isTapHighlightFading;
}

- (void)_updateInputContextAfterBlurringAndRefocusingElement
{
  if (-[WKContentView _hasFocusedElement](self, "_hasFocusedElement")
    && self->_suppressSelectionAssistantReasons.m_storage)
  {
    if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
      objc_msgSend(objc_loadWeak((id *)&self->_anon_fa8[24]), "invalidateTextEntryContextForTextInput:", -[WKContentView asBETextInput](self, "asBETextInput"));
    else
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA6E8], "activeInstance"), "updateForChangedSelection");
  }
}

- (void)_updateFocusedElementInformation:(const void *)a3
{
  IntRect v7;
  FloatRect v8;
  ProcessQualified<WTF::UUID> v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (-[WKContentView _hasFocusedElement](self, "_hasFocusedElement")
    && self->_focusedElementInformation.elementContext.webPageIdentifier.m_identifier == *((_QWORD *)a3 + 4)
    && self->_focusedElementInformation.elementContext.m_processIdentifier.m_identifier == *((_QWORD *)a3 + 7)
    && *(_QWORD *)&self->_focusedElementInformation.elementContext.documentIdentifier.m_object[8] == *((_QWORD *)a3 + 6)
    && self->_focusedElementInformation.elementIdentifier.m_identifier == *((_QWORD *)a3 + 8)
    && *(_QWORD *)&self->_anon_938[8] == *((_QWORD *)a3 + 10))
  {
    v7 = *(IntRect *)a3;
    v8 = (FloatRect)*((_OWORD *)a3 + 1);
    v9 = (ProcessQualified<WTF::UUID>)*((_OWORD *)a3 + 3);
    *(_OWORD *)&self->_focusedElementInformation.elementContext.webPageIdentifier.m_identifier = *((_OWORD *)a3 + 2);
    *(ProcessQualified<WTF::UUID> *)((char *)&self->_focusedElementInformation.elementContext.documentIdentifier + 8) = v9;
    self->_focusedElementInformation.interactionRect = v7;
    self->_focusedElementInformation.elementContext.boundingRect = v8;
    v10 = *((_OWORD *)a3 + 4);
    v11 = *((_OWORD *)a3 + 5);
    v12 = *((_OWORD *)a3 + 7);
    *(_OWORD *)&self->_anon_938[24] = *((_OWORD *)a3 + 6);
    *(_OWORD *)&self->_anon_938[40] = v12;
    *(_OWORD *)&self->_focusedElementInformation.elementIdentifier.m_identifier = v10;
    *(_OWORD *)&self->_anon_938[8] = v11;
    v13 = *((_OWORD *)a3 + 8);
    v14 = *((_OWORD *)a3 + 9);
    v15 = *((_OWORD *)a3 + 10);
    *(_OWORD *)&self->_anon_938[100] = *(_OWORD *)((char *)a3 + 172);
    *(_OWORD *)&self->_anon_938[72] = v14;
    *(_OWORD *)&self->_anon_938[88] = v15;
    *(_OWORD *)&self->_anon_938[56] = v13;
    WTF::String::operator=((WTF::StringImpl **)&self->_anon_938[120], (WTF::StringImpl *)((char *)a3 + 192));
    WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&self->_anon_938[128], (uint64_t)a3 + 200);
    *(_DWORD *)&self->_anon_938[144] = *((_DWORD *)a3 + 54);
    WTF::String::operator=((WTF::StringImpl **)&self->_anon_938[152], (WTF::StringImpl *)((char *)a3 + 224));
    *(_QWORD *)&self->_anon_938[160] = *((_QWORD *)a3 + 29);
    WTF::String::operator=((WTF::StringImpl **)&self->_anon_938[168], (WTF::StringImpl *)((char *)a3 + 240));
    *(_WORD *)&self->_anon_938[176] = *((_WORD *)a3 + 124);
    WTF::String::operator=((WTF::StringImpl **)&self->_anon_938[184], (WTF::StringImpl *)((char *)a3 + 256));
    v16 = *(_OWORD *)((char *)a3 + 264);
    *(_OWORD *)&self->_anon_938[208] = *(_OWORD *)((char *)a3 + 280);
    *(_OWORD *)&self->_anon_938[192] = v16;
    *(_WORD *)&self->_anon_938[224] = *((_WORD *)a3 + 148);
    WTF::String::operator=((WTF::StringImpl **)&self->_anon_938[232], (WTF::StringImpl *)((char *)a3 + 304));
    WTF::String::operator=((WTF::StringImpl **)&self->_anon_938[240], (WTF::StringImpl *)((char *)a3 + 312));
    WTF::String::operator=((WTF::StringImpl **)&self->_anon_938[248], (WTF::StringImpl *)((char *)a3 + 320));
    *(_WORD *)&self->_anon_938[256] = *((_WORD *)a3 + 164);
    WebCore::Color::operator=();
    WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&self->_anon_938[272], (uint64_t *)a3 + 43);
    v17 = *(_OWORD *)((char *)a3 + 360);
    v18 = *(_OWORD *)((char *)a3 + 376);
    v19 = *(_OWORD *)((char *)a3 + 392);
    *(_QWORD *)&self->_anon_938[336] = *((_QWORD *)a3 + 51);
    *(_OWORD *)&self->_anon_938[304] = v18;
    *(_OWORD *)&self->_anon_938[320] = v19;
    *(_OWORD *)&self->_anon_938[288] = v17;
    objc_msgSend(self->_inputPeripheral.m_ptr, "updateEditing");
  }
}

- (BOOL)shouldIgnoreKeyboardWillHideNotification
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA828], "sharedInstance"), "rotationState")
      || self->_isTapHighlightFading && self->_potentialTapInProgress;
}

- (void)_hardwareKeyboardAvailabilityChanged
{
  HIBYTE(self->_revealFocusedElementDeferrer.m_ptr) = 0;
  -[WKContentView reloadInputViews](self, "reloadInputViews");
}

- (void)_didUpdateInputMode:(unsigned __int8)a3
{
  if (-[WKContentView inputDelegate](self, "inputDelegate"))
  {
    if (-[WKContentView _hasFocusedElement](self, "_hasFocusedElement"))
    {
      self->_anon_938[114] = a3;
      -[WKContentView reloadInputViews](self, "reloadInputViews");
    }
  }
}

- (void)_requestDOMPasteAccessForCategory:(unsigned __int8)a3 requiresInteraction:(BOOL)a4 elementRect:(const IntRect *)a5 originIdentifier:(const void *)a6 completionHandler:(void *)a7
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::PasteboardCustomData *v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t i;
  NSData *v21;
  const WebCore::SharedBuffer *v22;
  const WTF::StringImpl *v23;
  char v24;
  void *v25;
  unsigned int *v26;
  int m_height;
  void *v28;
  WTF *v29;
  WebCore::PasteboardCustomData *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  WebCore::FragmentedSharedBuffer *v35;
  IntRect v36;
  uint64_t v37;

  v9 = a4;
  v10 = a3;
  v37 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)&self->_hasSetUpInteractions;
  *(_QWORD *)&self->_hasSetUpInteractions = 0;
  v13 = *(_QWORD *)a7;
  *(_QWORD *)a7 = 0;
  v14 = *(_QWORD *)&self->_hasSetUpInteractions;
  *(_QWORD *)&self->_hasSetUpInteractions = v13;
  if (v14)
    (*(void (**)(uint64_t, SEL))(*(_QWORD *)v14 + 8))(v14, a2);
  if (v12)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  LOWORD(self->_ignoreSelectionCommandFadeCount) = v10 | 0x100;
  if ((v9 & 1) != 0)
    goto LABEL_26;
  if (v10 <= 1)
    v9 = objc_msgSend(MEMORY[0x1E0CEA810], "generalPasteboard");
  if (!*(_QWORD *)a6)
    goto LABEL_26;
  if (!*(_DWORD *)(*(_QWORD *)a6 + 4))
    goto LABEL_26;
  v15 = (WebCore::PasteboardCustomData *)objc_msgSend(MEMORY[0x1E0CB36B8], "indexSetWithIndexesInRange:", 0, objc_msgSend((id)v9, "numberOfItems"));
  v16 = (void *)objc_msgSend((id)v9, "dataForPasteboardType:inItemSet:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", WebCore::PasteboardCustomData::cocoaType(v15)), v15);
  if (!objc_msgSend(v16, "count"))
    goto LABEL_26;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v31, &v36, 16);
  if (!v17)
    goto LABEL_26;
  v18 = 0;
  v19 = *(_QWORD *)v32;
  do
  {
    for (i = 0; i != v17; ++i)
    {
      if (*(_QWORD *)v32 != v19)
        objc_enumerationMutation(v16);
      v35 = 0;
      v35 = *(WebCore::FragmentedSharedBuffer **)(*((_QWORD *)&v31 + 1) + 8 * i);
      if (-[WebCore::FragmentedSharedBuffer length](v35, "length"))
      {
        WebCore::SharedBuffer::create<NSData *&>(&v35, v21, (uint64_t *)&v30);
        WebCore::PasteboardCustomData::fromSharedBuffer(v30, v22);
        v24 = WTF::equal(v29, *(const WTF::StringImpl **)a6, v23);
        WebCore::PasteboardCustomData::~PasteboardCustomData((WebCore::PasteboardCustomData *)&v29);
        v26 = (unsigned int *)v30;
        v30 = 0;
        if (v26)
        {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v26, v25);
          if ((v24 & 1) == 0)
            goto LABEL_26;
        }
        else if ((v24 & 1) == 0)
        {
          goto LABEL_26;
        }
        v18 = 1;
      }
    }
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v31, &v36, 16);
  }
  while (v17);
  if ((v18 & 1) != 0)
  {
    -[WKContentView _handleDOMPasteRequestWithResult:](self, "_handleDOMPasteRequestWithResult:", 1);
  }
  else
  {
LABEL_26:
    v36 = *a5;
    if ((a5->m_size.m_width - 301) < 0xFFFFFED4
      || (m_height = a5->m_size.m_height, m_height < 1)
      || m_height >= 121)
    {
      WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v31, (const CGPoint *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[16]);
      v36.m_size = (IntSize)0x1400000014;
      v36.m_location.m_x = v31 - 10;
      v36.m_location.m_y = DWORD1(v31) - 10;
    }
    v28 = (void *)objc_msgSend(MEMORY[0x1E0CEA748], "sharedMenuController");
    WebCore::IntRect::operator CGRect();
    objc_msgSend(v28, "showMenuFromView:rect:", self);
  }
}

- (void)doAfterEditorStateUpdateAfterFocusingElement:(id)a3
{
  Vector<std::optional<std::pair<WebKit::InteractionInformationRequest, WTF::BlockPtr<void (WebKit::InteractionInformationAtPosition)>>>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> *p_pendingPositionInformationHandlers;
  void *v4;
  unint64_t m_size;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  _QWORD *m_buffer;
  const void *v12;

  if (*((_BYTE *)self->_page.m_ptr + 1032))
  {
    p_pendingPositionInformationHandlers = &self->_pendingPositionInformationHandlers;
    v4 = _Block_copy(a3);
    v12 = v4;
    m_size = p_pendingPositionInformationHandlers->m_size;
    if ((_DWORD)m_size == p_pendingPositionInformationHandlers->m_capacity)
    {
      v6 = (uint64_t *)WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)p_pendingPositionInformationHandlers, m_size + 1, (unint64_t)&v12);
      v7 = p_pendingPositionInformationHandlers->m_size;
      m_size = (unint64_t)p_pendingPositionInformationHandlers->m_buffer;
      v8 = *v6;
      *v6 = 0;
      *(_QWORD *)(m_size + 8 * v7) = v8;
      LODWORD(m_size) = p_pendingPositionInformationHandlers->m_size;
      v9 = v12;
    }
    else
    {
      v10 = v4;
      v9 = 0;
      m_buffer = p_pendingPositionInformationHandlers->m_buffer;
      v12 = 0;
      m_buffer[m_size] = v10;
    }
    p_pendingPositionInformationHandlers->m_size = m_size + 1;
    _Block_release(v9);
  }
  else
  {
    (*((void (**)(id))a3 + 2))(a3);
  }
}

- (void)_didUpdateEditorState
{
  void *v3;
  uint64_t v4;
  Vector<std::optional<std::pair<WebKit::InteractionInformationRequest, WTF::BlockPtr<void (WebKit::InteractionInformationAtPosition)>>>, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> *p_pendingPositionInformationHandlers;
  const void **m_buffer;
  unsigned int m_capacity;
  uint64_t m_size;
  void *v9;
  uint64_t v10;
  void (**v11)(void);
  _QWORD v12[2];
  const void **v13;
  unsigned int v14;
  int v15;

  -[WKContentView _updateInitialWritingDirectionIfNecessary](self, "_updateInitialWritingDirectionIfNecessary");
  v4 = *(_QWORD *)&self->_actionsToPerformAfterEditorStateUpdate.m_capacity;
  if (v4)
    WebKit::RevealFocusedElementDeferrer::fulfill(v4, 1);
  BYTE2(self->_dataListSuggestionsControl.m_weakReference) = 0;
  p_pendingPositionInformationHandlers = &self->_pendingPositionInformationHandlers;
  m_buffer = (const void **)self->_pendingPositionInformationHandlers.m_buffer;
  v13 = m_buffer;
  m_capacity = self->_pendingPositionInformationHandlers.m_capacity;
  m_size = self->_pendingPositionInformationHandlers.m_size;
  v14 = m_capacity;
  v15 = m_size;
  v12[0] = 0;
  p_pendingPositionInformationHandlers->m_buffer = 0;
  v12[1] = 0;
  *(_QWORD *)&p_pendingPositionInformationHandlers->m_capacity = 0;
  WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v3);
  if ((_DWORD)m_size)
  {
    v10 = 8 * m_size;
    do
    {
      v11 = (void (**)(void))_Block_copy(*m_buffer);
      v11[2]();
      _Block_release(v11);
      ++m_buffer;
      v10 -= 8;
    }
    while (v10);
  }
  WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v9);
}

- (void)_updateInitialWritingDirectionIfNecessary
{
  WebPageProxy *m_ptr;
  void *v4;

  m_ptr = self->_page.m_ptr;
  if (*((_BYTE *)m_ptr + 616)
    && !(*(unsigned __int8 *)(*((_QWORD *)m_ptr + 4) + 233) | *(unsigned __int8 *)(*((_QWORD *)m_ptr + 4) + 234)))
  {
    v4 = (void *)objc_msgSend(MEMORY[0x1E0CEA6E8], "activeInstance");
    if ((WKContentView *)objc_msgSend(v4, "delegate") == self)
      objc_msgSend(v4, "setInitialDirection");
  }
}

- (void)updateCurrentFocusedElementInformation:(void *)a3
{
  uint64_t v5;
  WebPageProxy *m_ptr;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id location;

  location = 0;
  objc_initWeak(&location, self);
  v5 = *(_QWORD *)&self->_anon_938[304];
  m_ptr = self->_page.m_ptr;
  v7 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v10 = v7;
  v11 = v5;
  v12 = 0;
  objc_copyWeak(&v12, &location);
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E3507B58;
  *(_QWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v8 + 16) = v11;
  *(_QWORD *)(v8 + 24) = 0;
  objc_moveWeak((id *)(v8 + 24), &v12);
  v13 = v8;
  WebKit::WebPageProxy::requestFocusedElementInformation((uint64_t)m_ptr, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);
}

- (void)_wheelChangedWithEvent:(id)a3
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)WKContentView;
  -[WKContentView _wheelChangedWithEvent:](&v3, sel__wheelChangedWithEvent_, a3);
}

- (void)_updateSelectionAssistantSuppressionState
{
  _BYTE *v2;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;

  v2 = (_BYTE *)*((_QWORD *)self->_page.m_ptr + 4);
  if (v2[560] && v2[688])
  {
    if (v2[233])
      goto LABEL_5;
    v4 = *((_QWORD *)self->_page.m_ptr + 4);
    v5 = v2[290];
    if (!-[WKContentView _hasFocusedElement](self, "_hasFocusedElement"))
      goto LABEL_13;
    v6 = *(_DWORD *)(v4 + 600);
    if (v6 < 0)
      v6 = -v6;
    v7 = *(_DWORD *)(v4 + 604);
    if (v7 < 0)
      v7 = -v7;
    v8 = v6 * (unint64_t)v7;
    if ((v8 & 0xFFFFFFFF00000000) != 0)
    {
LABEL_13:
      if (v5)
      {
        -[WKContentView _startSuppressingSelectionAssistantForReason:](self, "_startSuppressingSelectionAssistantForReason:", 1);
        goto LABEL_6;
      }
LABEL_5:
      -[WKContentView _stopSuppressingSelectionAssistantForReason:](self, "_stopSuppressingSelectionAssistantForReason:", 1);
LABEL_6:
      -[WKContentView _stopSuppressingSelectionAssistantForReason:](self, "_stopSuppressingSelectionAssistantForReason:", 2);
      return;
    }
    if (v5)
    {
      -[WKContentView _startSuppressingSelectionAssistantForReason:](self, "_startSuppressingSelectionAssistantForReason:", 1);
      if (v8 > 3)
        goto LABEL_6;
    }
    else
    {
      -[WKContentView _stopSuppressingSelectionAssistantForReason:](self, "_stopSuppressingSelectionAssistantForReason:", 1);
      if (v8 >= 4)
        goto LABEL_6;
    }
    -[WKContentView _startSuppressingSelectionAssistantForReason:](self, "_startSuppressingSelectionAssistantForReason:", 2);
  }
}

- (void)_selectionChanged
{
  SelectionGeometry *m_buffer;
  UITextInputDelegate *v4;
  _BYTE *v5;

  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  -[WKContentView _updateSelectionAssistantSuppressionState](self, "_updateSelectionAssistantSuppressionState");
  m_buffer = self->_lastSelectionDrawingInfo.selectionGeometries.m_buffer;
  self->_lastSelectionDrawingInfo.selectionGeometries.m_buffer = 0;
  if (m_buffer)
    CFRelease(m_buffer);
  LOBYTE(self->_dataListTextSuggestions.m_ptr) = 1;
  if (BYTE2(self->_dataListTextSuggestions.m_ptr))
    -[WKContentView _updateChangedSelection](self, "_updateChangedSelection");
  if (BYTE6(self->_revealFocusedElementDeferrer.m_ptr))
  {
    BYTE6(self->_revealFocusedElementDeferrer.m_ptr) = 0;
    if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
    {
      objc_msgSend(objc_loadWeak((id *)&self->_anon_fa8[24]), "invalidateTextEntryContextForTextInput:", -[WKContentView asBETextInput](self, "asBETextInput"));
    }
    else
    {
      v4 = -[WKContentView inputDelegate](self, "inputDelegate");
      if ((objc_opt_respondsToSelector() & 1) != 0)
        -[UITextInputDelegate layoutHasChanged](v4, "layoutHasChanged");
    }
  }
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_didChangeEditorState");
  v5 = (_BYTE *)*((_QWORD *)self->_page.m_ptr + 4);
  if (v5[560] && v5[688])
  {
    if (*((_BYTE *)&self->_domPasteRequestCategory + 4))
      *((_BYTE *)&self->_domPasteRequestCategory + 4) = 0;
    if (!BYTE2(self->_dataListTextSuggestions.m_ptr)
      && !LODWORD(self->_pendingAutocorrectionContextHandler.m_function.m_callableWrapper.__ptr_.__value_))
    {
      if (v5[242])
      {
        -[WKContentView _internalBeginSelectionChange](self, "_internalBeginSelectionChange");
        -[WKContentView _internalEndSelectionChange](self, "_internalEndSelectionChange");
      }
    }
  }
}

- (void)selectWordForReplacement
{
  WebPageProxy *m_ptr;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id location;
  uint64_t v8;
  char v9;

  -[WKContentView _internalBeginSelectionChange](self, "_internalBeginSelectionChange");
  m_ptr = self->_page.m_ptr;
  location = 0;
  objc_initWeak(&location, self);
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E3507B80;
  *(_QWORD *)(v4 + 8) = 0;
  objc_moveWeak((id *)(v4 + 8), &location);
  v8 = v4;
  v5 = *((_QWORD *)m_ptr + 26);
  v9 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::ExtendSelectionForReplacement,WTF::CompletionHandler<void ()(void)>>(v5, (uint64_t)&v9, &v8, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0, 1);
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  objc_destroyWeak(&location);
}

- (void)_updateChangedSelection
{
  -[WKContentView _updateChangedSelection:](self, "_updateChangedSelection:", 0);
}

- (BOOL)shouldAllowHidingSelectionCommands
{
  return *(_QWORD *)&self->_isUnsuppressingSoftwareKeyboardUsingLastAutocorrectionContext == 0;
}

- (BOOL)supportsTextSelectionWithCharacterGranularity
{
  return 1;
}

- (void)requestRVItemInSelectedRangeWithCompletionHandler:(id)a3
{
  WebPageProxy *m_ptr;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *aBlock[4];

  aBlock[3] = *(void **)MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v9 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      LODWORD(aBlock[0]) = 136315138;
      *(void **)((char *)aBlock + 4) = "-[WKContentView(WKInteraction) requestRVItemInSelectedRangeWithCompletionHandler:]";
      _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)aBlock, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784DC7CLL);
  }
  m_ptr = self->_page.m_ptr;
  *(_OWORD *)aBlock = (unint64_t)_Block_copy(a3);
  objc_initWeak(&aBlock[1], self);
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = off_1E3507BA8;
  v7 = aBlock[0];
  aBlock[0] = 0;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 16) = 0;
  objc_moveWeak((id *)(v6 + 16), &aBlock[1]);
  v10 = v6;
  WebKit::WebPageProxy::requestRVItemInCurrentSelectedRange((uint64_t)m_ptr, &v10);
  v8 = v10;
  v10 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  objc_destroyWeak(&aBlock[1]);
  _Block_release(aBlock[0]);
}

- (void)prepareSelectionForContextMenuWithLocationInView:(CGPoint)a3 completionHandler:(id)a4
{
  double y;
  double x;
  void *v8;
  NSObject *v9;
  _QWORD v10[4];
  void *aBlock;
  uint8_t buf[4];
  const char *v13;
  uint64_t v14;

  y = a3.y;
  x = a3.x;
  v14 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v9 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v13 = "-[WKContentView(WKInteraction) prepareSelectionForContextMenuWithLocationInView:completionHandler:]";
      _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", buf, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784DE1CLL);
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = __99__WKContentView_WKInteraction__prepareSelectionForContextMenuWithLocationInView_completionHandler___block_invoke;
  v10[3] = &__block_descriptor_40_e8_32c113_ZTSKZ99__WKContentView_WKInteraction__prepareSelectionForContextMenuWithLocationInView_completionHandler__E4__74_e13_v20__0B8r_v12l;
  v8 = _Block_copy(a4);
  aBlock = _Block_copy(v8);
  -[WKContentView _internalSelectTextForContextMenuWithLocationInView:completionHandler:](self, "_internalSelectTextForContextMenuWithLocationInView:completionHandler:", v10, x, y);
  _Block_release(v8);
  _Block_release(aBlock);
}

uint64_t __99__WKContentView_WKInteraction__prepareSelectionForContextMenuWithLocationInView_completionHandler___block_invoke(uint64_t a1, int a2, WebKit::RevealItem *this)
{
  WebKit::RevealItem::item(this);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (void)_internalSelectTextForContextMenuWithLocationInView:(CGPoint)a3 completionHandler:(id)a4
{
  WebPageProxy *m_ptr;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *aBlock;
  uint64_t v18;
  float v19[2];
  CGPoint v20;

  v20 = a3;
  std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::reset[abi:sn180100]((uint64_t)&self->_imageAnalysisActionButtons, (WTF::StringImpl *)a2);
  m_ptr = self->_page.m_ptr;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v19, &v20);
  v7 = roundf(v19[0]);
  v8 = 0x80000000;
  if (v7 > -2147500000.0)
    v8 = (int)v7;
  if (v7 < 2147500000.0)
    v9 = v8;
  else
    v9 = 0x7FFFFFFFLL;
  v10 = roundf(v19[1]);
  v11 = 0x8000000000000000;
  if (v10 > -2147500000.0)
    v11 = (unint64_t)(int)v10 << 32;
  if (v10 < 2147500000.0)
    v12 = v11;
  else
    v12 = 0x7FFFFFFF00000000;
  v16 = 0;
  objc_initWeak(&v16, self);
  aBlock = _Block_copy(a4);
  v13 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v13 = off_1E3507BD0;
  *(_QWORD *)(v13 + 8) = 0;
  objc_moveWeak((id *)(v13 + 8), &v16);
  v14 = aBlock;
  aBlock = 0;
  v18 = v13;
  *(_QWORD *)(v13 + 16) = v14;
  WebKit::WebPageProxy::prepareSelectionForContextMenuWithLocationInView((uint64_t)m_ptr, v12 | v9, &v18);
  v15 = v18;
  v18 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Block_release(aBlock);
  objc_destroyWeak(&v16);
}

- (BOOL)hasHiddenContentEditable
{
  return (self->_suppressSelectionAssistantReasons.m_storage & 3) != 0;
}

- (BOOL)_shouldSuppressSelectionCommands
{
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v4 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315138;
      v6 = "-[WKContentView(WKInteraction) _shouldSuppressSelectionCommands]";
      _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v5, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19784E124);
  }
  return -[WKContentView shouldSuppressEditMenu](self, "shouldSuppressEditMenu");
}

- (void)_startSuppressingSelectionAssistantForReason:(unsigned __int8)a3
{
  int m_storage;

  m_storage = self->_suppressSelectionAssistantReasons.m_storage;
  self->_suppressSelectionAssistantReasons.m_storage = m_storage | a3;
  if (!m_storage)
    objc_msgSend(self->_textInteractionWrapper.m_ptr, "deactivateSelection");
}

- (void)_stopSuppressingSelectionAssistantForReason:(unsigned __int8)a3
{
  int m_storage;
  BOOL v4;

  m_storage = self->_suppressSelectionAssistantReasons.m_storage;
  self->_suppressSelectionAssistantReasons.m_storage = m_storage & ~a3;
  if (m_storage)
    v4 = (m_storage & (a3 ^ 0xFF)) == 0;
  else
    v4 = 0;
  if (v4)
    objc_msgSend(self->_textInteractionWrapper.m_ptr, "activateSelection");
}

- (WKFormControl)dataListTextSuggestionsInputView
{
  return *(WKFormControl **)&self->_inputViewUpdateDeferralSources.m_storage;
}

- (NSArray)dataListTextSuggestions
{
  return (NSArray *)self->_keyboardScrollingAnimator.m_ptr;
}

- (void)setDataListTextSuggestionsInputView:(id)a3
{
  id v4;

  v4 = *(id *)&self->_inputViewUpdateDeferralSources.m_storage;
  if (v4 != a3)
  {
    if (a3)
    {
      CFRetain(a3);
      v4 = *(id *)&self->_inputViewUpdateDeferralSources.m_storage;
    }
    *(_QWORD *)&self->_inputViewUpdateDeferralSources.m_storage = a3;
    if (v4)
      CFRelease(v4);
    if (!objc_msgSend(self->_formInputSession.m_ptr, "customInputView"))
      -[WKContentView reloadInputViews](self, "reloadInputViews");
  }
}

- (void)setDataListTextSuggestions:(id)a3
{
  void *m_ptr;

  if (self->_keyboardScrollingAnimator.m_ptr != a3 && (objc_msgSend(a3, "isEqualToArray:") & 1) == 0)
  {
    if (a3)
      CFRetain(a3);
    m_ptr = self->_keyboardScrollingAnimator.m_ptr;
    self->_keyboardScrollingAnimator.m_ptr = a3;
    if (m_ptr)
      CFRelease(m_ptr);
    if (!objc_msgSend((id)objc_msgSend(self->_formInputSession.m_ptr, "suggestions"), "count"))
      -[WKContentView updateTextSuggestionsForInputDelegate](self, "updateTextSuggestionsForInputDelegate");
  }
}

- (void)updateTextSuggestionsForInputDelegate
{
  void *v3;
  void *m_ptr;
  WKContentView *v5;

  v3 = (void *)objc_msgSend(self->_formInputSession.m_ptr, "suggestions");
  if (objc_msgSend(v3, "count"))
  {
    -[WKContentView _provideUITextSuggestionsToInputDelegate:](self, "_provideUITextSuggestionsToInputDelegate:", v3);
  }
  else
  {
    if (objc_msgSend(self->_keyboardScrollingAnimator.m_ptr, "count"))
    {
      m_ptr = self->_keyboardScrollingAnimator.m_ptr;
      v5 = self;
    }
    else
    {
      v5 = self;
      m_ptr = 0;
    }
    -[WKContentView _provideSuggestionsToInputDelegate:](v5, "_provideSuggestionsToInputDelegate:", m_ptr);
  }
}

- (void)_provideSuggestionsToInputDelegate:(id)a3
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    objc_msgSend(objc_loadWeak((id *)&self->_anon_fa8[24]), "textInput:setCandidateSuggestions:", -[WKContentView asBETextInput](self, "asBETextInput"), a3);
  }
  else
  {
    v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(a3, "count"));
    v6 = v5;
    if (v5)
      CFRetain(v5);
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v7 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v11;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v11 != v8)
            objc_enumerationMutation(a3);
          objc_msgSend(v6, "addObject:", objc_msgSend(MEMORY[0x1E0CEAB10], "textSuggestionWithInputText:", objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9++), "inputText")));
        }
        while (v7 != v9);
        v7 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v7);
    }
    -[UITextInputDelegate setSuggestions:](-[WKContentView inputDelegate](self, "inputDelegate"), "setSuggestions:", v6);
    if (v6)
      CFRelease(v6);
  }
}

- (void)_provideUITextSuggestionsToInputDelegate:(id)a3
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(a3, "count"));
    v6 = v5;
    if (v5)
      CFRetain(v5);
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v7 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v12;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v12 != v8)
            objc_enumerationMutation(a3);
          v10 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C92728]), "_initWithUIKitTextSuggestion:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v9));
          objc_msgSend(v6, "addObject:", v10);
          if (v10)
            CFRelease(v10);
          ++v9;
        }
        while (v7 != v9);
        v7 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v7);
    }
    objc_msgSend(objc_loadWeak((id *)&self->_anon_fa8[24]), "textInput:setCandidateSuggestions:", -[WKContentView asBETextInput](self, "asBETextInput"), v6);
    if (v6)
      CFRelease(v6);
  }
  else
  {
    -[UITextInputDelegate setSuggestions:](-[WKContentView inputDelegate](self, "inputDelegate"), "setSuggestions:", a3);
  }
}

- (void)_showPlaybackTargetPicker:(BOOL)a3 fromRect:(const IntRect *)a4 routeSharingPolicy:(unsigned __int8)a5 routingContextUID:(id)a6
{
  uint64_t v7;
  _BOOL8 v8;
  WKAirPlayRoutePicker *m_ptr;
  void *v11;

  v7 = a5;
  v8 = a3;
  m_ptr = (WKAirPlayRoutePicker *)self->_airPlayRoutePicker.m_ptr;
  if (!m_ptr)
  {
    m_ptr = objc_alloc_init(WKAirPlayRoutePicker);
    v11 = self->_airPlayRoutePicker.m_ptr;
    self->_airPlayRoutePicker.m_ptr = m_ptr;
    if (v11)
    {
      CFRelease(v11);
      m_ptr = (WKAirPlayRoutePicker *)self->_airPlayRoutePicker.m_ptr;
    }
  }
  -[WKAirPlayRoutePicker showFromView:routeSharingPolicy:routingContextUID:hasVideo:](m_ptr, "showFromView:routeSharingPolicy:routingContextUID:hasVideo:", self, v7, a6, v8);
}

- (void)_showRunOpenPanel:(OpenPanelParameters *)a3 frameInfo:(const void *)a4 resultListener:(WebOpenPanelResultListenerProxy *)a5
{
  FrameInfoData *p_frameInfoForFileUploadPanel;
  FrameInfoData *v10;
  void *v11;
  void *m_ptr;
  __int128 v13;
  $17C4A8953743AF6D7D0F0247BBB6324E v14;
  WKFileUploadPanel *v15;
  void *v16;

  if (!self->_fileUploadPanel.m_ptr)
  {
    p_frameInfoForFileUploadPanel = &self->_frameInfoForFileUploadPanel;
    v10 = &self->_frameInfoForFileUploadPanel;
    *(_WORD *)&v10->isMainFrame = *(_WORD *)a4;
    WebCore::ResourceRequestBase::operator=((uint64_t)&v10->request, (uint64_t)a4 + 8);
    v11 = (void *)*((_QWORD *)a4 + 25);
    if (v11)
      CFRetain(*((CFTypeRef *)a4 + 25));
    m_ptr = p_frameInfoForFileUploadPanel->request.m_nsRequest.m_ptr;
    p_frameInfoForFileUploadPanel->request.m_nsRequest.m_ptr = v11;
    if (m_ptr)
      CFRelease(m_ptr);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&p_frameInfoForFileUploadPanel->securityOrigin, (uint64_t)a4 + 208);
    WTF::String::operator=((WTF::StringImpl **)&p_frameInfoForFileUploadPanel->frameName, (WTF::StringImpl *)((char *)a4 + 240));
    v13 = *(_OWORD *)((char *)a4 + 278);
    v14 = *($17C4A8953743AF6D7D0F0247BBB6324E *)((char *)a4 + 264);
    p_frameInfoForFileUploadPanel->frameID = *(ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>> *)((char *)a4 + 248);
    p_frameInfoForFileUploadPanel->parentFrameID.var0 = v14;
    *(_OWORD *)((char *)&p_frameInfoForFileUploadPanel->parentFrameID.var0.__val_.m_processIdentifier.m_identifier + 6) = v13;
    v15 = -[WKFileUploadPanel initWithView:]([WKFileUploadPanel alloc], "initWithView:", self);
    v16 = self->_fileUploadPanel.m_ptr;
    self->_fileUploadPanel.m_ptr = v15;
    if (v16)
    {
      CFRelease(v16);
      v15 = (WKFileUploadPanel *)self->_fileUploadPanel.m_ptr;
    }
    -[WKFileUploadPanel setDelegate:](v15, "setDelegate:", self);
    objc_msgSend(self->_fileUploadPanel.m_ptr, "presentWithParameters:resultListener:", a3, a5);
  }
}

- (void)fileUploadPanelDidDismiss:(id)a3
{
  void *m_ptr;

  objc_msgSend(self->_fileUploadPanel.m_ptr, "setDelegate:", 0);
  m_ptr = self->_fileUploadPanel.m_ptr;
  self->_fileUploadPanel.m_ptr = 0;
  if (m_ptr)
    CFRelease(m_ptr);
}

- (BOOL)fileUploadPanelDestinationIsManaged:(id)a3
{
  id WeakRetained;
  void *v5;
  WebPageProxy *m_ptr;
  FrameInfoData *p_frameInfoForFileUploadPanel;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  char v11;
  WebPageProxy *v13;

  WeakRetained = objc_loadWeakRetained(&self->_webView.m_weakReference);
  v5 = (void *)objc_msgSend(WeakRetained, "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    v11 = 0;
    if (!WeakRetained)
      return v11;
    goto LABEL_11;
  }
  m_ptr = self->_page.m_ptr;
  if (m_ptr)
    CFRetain(*((CFTypeRef *)m_ptr + 1));
  p_frameInfoForFileUploadPanel = &self->_frameInfoForFileUploadPanel;
  v13 = m_ptr;
  v8 = API::Object::newObject(0x140uLL, 60);
  v9 = API::FrameInfo::FrameInfo(v8, (uint64_t)p_frameInfoForFileUploadPanel, (uint64_t *)&v13);
  v10 = *(const void **)(v9 + 8);
  if (v10)
    CFRetain(*(CFTypeRef *)(v9 + 8));
  v11 = objc_msgSend(v5, "_webView:fileUploadPanelContentIsManagedWithInitiatingFrame:", WeakRetained, v10);
  if (v10)
    CFRelease(v10);
  CFRelease(*(CFTypeRef *)(v8 + 8));
  if (v13)
    CFRelease(*((CFTypeRef *)v13 + 1));
  if (WeakRetained)
LABEL_11:
    CFRelease(WeakRetained);
  return v11;
}

- (BOOL)fileUploadPanelPhotoPickerPrefersOriginalImageFormat:(id)a3
{
  uint64_t v3;

  v3 = *((_QWORD *)self->_page.m_ptr + 28);
  {
    WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v3 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::photoPickerPrefersOriginalImageFormatKey(void)::key, (const WTF::StringImpl *)a3);
}

- (void)_showShareSheet:(const void *)a3 inRect:(optional<WebCore:(void *)a5 :FloatRect> *)a4 completionHandler:
{
  void *m_ptr;
  WKShareSheet *v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  _BOOL4 var1;
  $12DD2257486BCFCE6114A021383766B1 var0;
  int v23;
  double v24;
  double v25;
  char v26;

  m_ptr = self->_shareSheet.m_ptr;
  if (m_ptr)
    objc_msgSend(m_ptr, "dismissIfNeededWithReason:", 0);
  v10 = -[WKShareSheet initWithView:]([WKShareSheet alloc], "initWithView:", -[WKContentView webView](self, "webView"));
  v11 = self->_shareSheet.m_ptr;
  self->_shareSheet.m_ptr = v10;
  if (v11)
  {
    CFRelease(v11);
    v10 = (WKShareSheet *)self->_shareSheet.m_ptr;
  }
  -[WKShareSheet setDelegate:](v10, "setDelegate:", self);
  if (!a4->var1)
  {
    v13 = self->_mouseInteraction.m_ptr;
    if (v13)
    {
      objc_msgSend(v13, "lastLocation");
      if (v26)
      {
        -[WKContentView convertPoint:toView:](self, "convertPoint:toView:", -[WKContentView webView](self, "webView"), v24, v25);
        *(float *)&v14 = v14;
        *(float *)&v15 = v15;
        var1 = a4->var1;
        a4->var0.var1.m_location.m_x = *(float *)&v14;
        a4->var0.var1.m_location.m_y = *(float *)&v15;
        __asm { FMOV            V0.2S, #1.0 }
        a4->var0.var1.m_size = _D0;
        if (!var1)
          a4->var1 = 1;
      }
    }
  }
  v12 = self->_shareSheet.m_ptr;
  var0 = a4->var0;
  v23 = *(_DWORD *)&a4->var1;
  objc_msgSend(v12, "presentWithParameters:inRect:completionHandler:", a3, &var0, a5);
}

- (void)shareSheetDidDismiss:(id)a3
{
  void *m_ptr;

  objc_msgSend(self->_shareSheet.m_ptr, "setDelegate:", 0);
  m_ptr = self->_shareSheet.m_ptr;
  self->_shareSheet.m_ptr = 0;
  if (m_ptr)
    CFRelease(m_ptr);
}

- (void)shareSheet:(id)a3 willShowActivityItems:(id)a4
{
  void *v6;

  v6 = (void *)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v6, "_webView:willShareActivityItems:", -[WKContentView webView](self, "webView"), a4);
}

- (void)_showContactPicker:(const void *)a3 completionHandler:(void *)a4
{
  WKContactPicker *v7;
  void *m_ptr;

  v7 = -[WKContactPicker initWithView:]([WKContactPicker alloc], "initWithView:", -[WKContentView webView](self, "webView"));
  m_ptr = self->_contactPicker.m_ptr;
  self->_contactPicker.m_ptr = v7;
  if (m_ptr)
  {
    CFRelease(m_ptr);
    v7 = (WKContactPicker *)self->_contactPicker.m_ptr;
  }
  -[WKContactPicker setDelegate:](v7, "setDelegate:", self);
  objc_msgSend(self->_contactPicker.m_ptr, "presentWithRequestData:completionHandler:", a3, a4);
}

- (void)contactPickerDidPresent:(id)a3
{
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_didPresentContactPicker");
}

- (void)contactPickerDidDismiss:(id)a3
{
  void *m_ptr;

  objc_msgSend(self->_contactPicker.m_ptr, "setDelegate:", 0);
  m_ptr = self->_contactPicker.m_ptr;
  self->_contactPicker.m_ptr = 0;
  if (m_ptr)
    CFRelease(m_ptr);
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_didDismissContactPicker");
}

- (void)dismissPickersIfNeededWithReason:(unsigned __int8)a3
{
  uint64_t v3;
  void *m_ptr;
  void *v6;
  void *v7;

  v3 = a3;
  if (objc_msgSend(self->_fileUploadPanel.m_ptr, "dismissIfNeededWithReason:"))
  {
    m_ptr = self->_fileUploadPanel.m_ptr;
    self->_fileUploadPanel.m_ptr = 0;
    if (m_ptr)
      CFRelease(m_ptr);
  }
  if (objc_msgSend(self->_shareSheet.m_ptr, "dismissIfNeededWithReason:", v3))
  {
    v6 = self->_shareSheet.m_ptr;
    self->_shareSheet.m_ptr = 0;
    if (v6)
      CFRelease(v6);
  }
  if (objc_msgSend(self->_contactPicker.m_ptr, "dismissIfNeededWithReason:", v3))
  {
    v7 = self->_contactPicker.m_ptr;
    self->_contactPicker.m_ptr = 0;
    if (v7)
      CFRelease(v7);
  }
}

- (id)inputLabelText
{
  FocusedElementInformation *p_focusedElementInformation;
  uint64_t v3;
  unint64_t m_identifier;
  FloatSize m_size;

  p_focusedElementInformation = &self->_focusedElementInformation;
  v3 = *(_QWORD *)&self->_anon_938[240];
  if (v3 && *(_DWORD *)(v3 + 4))
    return (id)WTF::StringImpl::operator NSString *();
  m_identifier = p_focusedElementInformation[4].elementContext.webPageIdentifier.m_identifier;
  if (m_identifier)
  {
    if (*(_DWORD *)(m_identifier + 4))
      return (id)WTF::StringImpl::operator NSString *();
  }
  m_size = p_focusedElementInformation[3].elementContext.boundingRect.m_size;
  if (m_size)
  {
    if (*(_DWORD *)(*(_QWORD *)&m_size + 4))
      return (id)WTF::StringImpl::operator NSString *();
  }
  if (p_focusedElementInformation[4].elementContext.boundingRect.m_location)
    return (id)WTF::StringImpl::operator NSString *();
  else
    return &stru_1E351F1B8;
}

- (BOOL)_restoreFocusWithToken:(id)a3
{
  uint64_t m_size;
  _BOOL4 v4;

  m_size = self->_focusStateStack.m_size;
  if ((_DWORD)m_size)
  {
    v4 = self->_focusStateStack.m_buffer[m_size - 1];
    self->_focusStateStack.m_size = m_size - 1;
    if (v4)
      objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_decrementFocusPreservationCount");
  }
  return 0;
}

- (void)startRelinquishingFirstResponderToFocusedElement
{
  if (!self->_longPressCanClick)
  {
    self->_longPressCanClick = 1;
    objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_incrementFocusPreservationCount");
  }
}

- (void)stopRelinquishingFirstResponderToFocusedElement
{
  if (self->_longPressCanClick)
  {
    self->_longPressCanClick = 0;
    objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_decrementFocusPreservationCount");
  }
}

- (void)_preserveFocusWithToken:(id)a3 destructively:(BOOL)a4
{
  Vector<BOOL, 0UL, WTF::CrashOnOverflow, 16UL, WTF::FastMalloc> *p_focusStateStack;
  uint64_t m_size;
  WTF *v7;
  char *v8;
  BOOL *v9;
  char v10;
  char v11;

  if (self->_inputPeripheral.m_ptr)
  {
    p_focusStateStack = &self->_focusStateStack;
    v10 = 0;
    m_size = self->_focusStateStack.m_size;
    if ((_DWORD)m_size != self->_focusStateStack.m_capacity)
    {
      p_focusStateStack->m_buffer[m_size] = 0;
      goto LABEL_9;
    }
    v7 = (WTF *)(m_size + 1);
    v8 = &v10;
  }
  else
  {
    objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_incrementFocusPreservationCount");
    p_focusStateStack = &self->_focusStateStack;
    v11 = 1;
    m_size = p_focusStateStack->m_size;
    if ((_DWORD)m_size != p_focusStateStack->m_capacity)
    {
      p_focusStateStack->m_buffer[m_size] = 1;
      goto LABEL_9;
    }
    v7 = (WTF *)(m_size + 1);
    v8 = &v11;
  }
  v9 = (BOOL *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)p_focusStateStack, v7, (unint64_t)v8);
  m_size = p_focusStateStack->m_size;
  p_focusStateStack->m_buffer[m_size] = *v9;
LABEL_9:
  p_focusStateStack->m_size = m_size + 1;
}

- (BOOL)gestureRecognizer:(id)a3 shouldIgnoreTouchEvent:(id)a4
{
  void *m_ptr;

  self->_touchEventsCanPreventNativeGestures = 1;
  m_ptr = self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr;
  objc_msgSend(a3, "locationInView:", self);
  return (objc_msgSend(m_ptr, "interactableItemExistsAtPoint:") & 1) != 0
      || -[WKContentView gestureRecognizer:isInterruptingMomentumScrollingWithEvent:](self, "gestureRecognizer:isInterruptingMomentumScrollingWithEvent:", a3, a4);
}

- (BOOL)gestureRecognizer:(id)a3 isInterruptingMomentumScrollingWithEvent:(id)a4
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend(a4, "touchesForGestureRecognizer:", a3);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        v10 = objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v9), "view");
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v11 = (void *)v10;
        else
          v11 = 0;
        if ((objc_msgSend(v11, "_wk_isInterruptingDeceleration") & 1) != 0)
          return 1;
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v7)
        continue;
      break;
    }
  }
  return objc_msgSend(-[WKContentView _scroller](self, "_scroller"), "_wk_isInterruptingDeceleration");
}

- (BOOL)isAnyTouchOverActiveArea:(id)a3
{
  return 1;
}

- (optional<WebKit::InteractionInformationAtPosition>)positionInformationForActionSheetAssistant:(optional<WebKit::InteractionInformationAtPosition> *__return_ptr)retstr
{
  uint64_t v1;
  void *v2;
  void *v3;
  const WebKit::InteractionInformationAtPosition *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  optional<WebKit::InteractionInformationAtPosition> *result;
  BOOL v14;

  v3 = (void *)v1;
  v5 = (const WebKit::InteractionInformationAtPosition *)(v1 + 1520);
  v6 = *(_QWORD *)(v1 + 1520);
  if (objc_msgSend(v2, "needsLinkIndicator"))
    v7 = 16777473;
  else
    v7 = 16777217;
  v8 = objc_msgSend(v3, "_shouldUseContextMenus");
  v9 = 0x1000000000000;
  if (v8)
    v9 = 0;
  v10 = v9 | v7;
  v11 = objc_msgSend((id)objc_msgSend(v3, "webView"), "_allowAnimationControls");
  v12 = 0x10000000000;
  if (!v11)
    v12 = 0;
  result = (optional<WebKit::InteractionInformationAtPosition> *)objc_msgSend(v3, "ensurePositionInformationIsUpToDate:", v6, v10 | v12);
  if ((result & 1) != 0)
  {
    result = (optional<WebKit::InteractionInformationAtPosition> *)WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)retstr, v5);
    v14 = 1;
  }
  else
  {
    v14 = 0;
    retstr->var0.__null_state_ = 0;
  }
  *(&retstr[1].var0.__engaged_ + 144) = v14;
  return result;
}

- (void)updatePositionInformationForActionSheetAssistant:(id)a3
{
  IntPoint point;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  BYTE1(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
  point = self->_positionInformation.request.point;
  if (objc_msgSend(a3, "needsLinkIndicator"))
    v5 = 16777473;
  else
    v5 = 16777217;
  v6 = -[WKContentView _shouldUseContextMenus](self, "_shouldUseContextMenus");
  v7 = 0x1000000000000;
  if (v6)
    v7 = 0;
  v8 = v7 | v5;
  v9 = objc_msgSend(-[WKContentView webView](self, "webView"), "_allowAnimationControls");
  v10 = 0x10000000000;
  if (!v9)
    v10 = 0;
  -[WKContentView requestAsynchronousPositionInformationUpdate:](self, "requestAsynchronousPositionInformationUpdate:", point, v8 | v10);
}

- (void)actionSheetAssistant:(id)a3 performAction:(unsigned __int8)a4
{
  WebKit::WebPageProxy::performActionOnElement((WebKit::WebPageProxy *)self->_page.m_ptr, a4);
}

- (void)_actionSheetAssistant:(id)a3 performAction:(unsigned __int8)a4 onElements:(void *)a5
{
  WebPageProxy *m_ptr;
  uint64_t v6;
  int v7;
  void *v8;

  m_ptr = self->_page.m_ptr;
  v6 = *((_QWORD *)m_ptr + 26);
  v7 = a4;
  v8 = a5;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::PerformActionOnElements>(v6, (uint64_t)&v7, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)actionSheetAssistant:(id)a3 openElementAtLocation:(CGPoint)a4
{
  -[WKContentView _attemptSyntheticClickAtLocation:modifierFlags:](self, "_attemptSyntheticClickAtLocation:modifierFlags:", 0, a4.x, a4.y);
}

- (void)actionSheetAssistant:(id)a3 shareElementWithURL:(id)a4 rect:(CGRect)a5
{
  double height;
  double width;
  double y;
  double x;
  WTF::StringImpl *v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  void *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  _BYTE v25[20];
  CGRect v26;
  char v27;
  WTF::StringImpl *v28[2];
  WTF::StringImpl *v29[8];
  char v30;
  _QWORD v31[2];
  char v32;

  height = a5.size.height;
  width = a5.size.width;
  y = a5.origin.y;
  x = a5.origin.x;
  v30 = 0;
  v31[0] = 0;
  v31[1] = 0;
  *(_OWORD *)v28 = 0u;
  memset(v29, 0, 25);
  MEMORY[0x19AEABB18](&v26, a4, a3);
  v27 = 1;
  std::__optional_storage_base<WTF::URL,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::URL,false>>((WTF::StringImpl *)&v29[3], (unsigned __int8 *)&v26);
  if (v27)
  {
    v11 = v26.origin.x;
    v26.origin.x = 0.0;
    if (v11 != 0.0)
    {
      if (**(_DWORD **)&v11 == 2)
        WTF::StringImpl::destroy(*(WTF::StringImpl **)&v11, v10);
      else
        **(_DWORD **)&v11 -= 2;
    }
  }
  v32 = 1;
  -[WKContentView convertRect:toView:](self, "convertRect:toView:", -[WKContentView webView](self, "webView"), x, y, width, height);
  v26.origin.x = v12;
  v26.origin.y = v13;
  v26.size.width = v14;
  v26.size.height = v15;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v25, &v26);
  v25[16] = 1;
  v24 = 0;
  -[WKContentView _showShareSheet:inRect:completionHandler:](self, "_showShareSheet:inRect:completionHandler:", v28, v25, &v24);
  v17 = v24;
  v24 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v31, v16);
  if (v30)
  {
    v19 = v29[3];
    v29[3] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29[1], v18);
  v21 = v29[0];
  v29[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v28[1];
  v28[1] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v28[0];
  v28[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
  }
}

- (void)actionSheetAssistant:(id)a3 shareElementWithImage:(id)a4 rect:(CGRect)a5
{
  double height;
  double width;
  double y;
  double x;
  void *v11;
  const __CFString *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  CGFloat v15;
  NSData *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  WTF::StringImpl *v20;
  unsigned int *v21;
  unsigned int v22;
  int y_high;
  WTF *v24;
  CGFloat v25;
  void *v26;
  unsigned int *v27;
  WTF::StringImpl *v28;
  unsigned int *v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  void *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  CGRect v42;
  _BYTE v43[20];
  NSData *v44;
  unsigned int *v45;
  WTF::StringImpl *v46[2];
  WTF::StringImpl *v47[8];
  char v48;
  WTF *v49;
  CGFloat v50;
  char v51;
  WTF::StringImpl *v52;
  unsigned int *v53;
  uint64_t v54;

  height = a5.size.height;
  width = a5.size.width;
  y = a5.origin.y;
  x = a5.origin.x;
  v54 = *MEMORY[0x1E0C80C00];
  v48 = 0;
  v49 = 0;
  v50 = 0.0;
  *(_OWORD *)v46 = 0u;
  memset(v47, 0, 25);
  v11 = (void *)MEMORY[0x1E0CB3940];
  WebCore::localizedString((WebCore *)CFSTR("Shared Image"), (const __CFString *)a2);
  if (*(_QWORD *)&v42.origin.x)
    v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v12 = &stru_1E351F1B8;
  v14 = objc_msgSend(v11, "stringWithFormat:", CFSTR("%@.png"), v12);
  v15 = v42.origin.x;
  v42.origin.x = 0.0;
  if (v15 != 0.0)
  {
    if (**(_DWORD **)&v15 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)&v15, v13);
    else
      **(_DWORD **)&v15 -= 2;
  }
  MEMORY[0x19AEABCC8](&v52, v14);
  v44 = UIImagePNGRepresentation((UIImage *)a4);
  WebCore::SharedBuffer::create<NSData *>((WebCore::FragmentedSharedBuffer **)&v44, v16, (uint64_t *)&v45);
  v17 = (uint64_t)v45;
  v45 = 0;
  v53 = (unsigned int *)v17;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)&v42.origin.y = 1;
  *(_QWORD *)&v42.origin.x = v18;
  v20 = v52;
  if (v52)
    *(_DWORD *)v52 += 2;
  *v18 = v20;
  v21 = v53;
  if (v53)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    y_high = HIDWORD(v42.origin.y);
  }
  else
  {
    y_high = 0;
  }
  v18[1] = v21;
  HIDWORD(v42.origin.y) = y_high + 1;
  if (HIDWORD(v50))
    WTF::VectorDestructor<true,WebCore::RawFile>::destruct(v49, (WTF *)((char *)v49 + 16 * HIDWORD(v50)));
  v24 = v49;
  if (v49)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    WTF::fastFree(v24, v19);
  }
  v49 = *(WTF **)&v42.origin.x;
  v25 = v42.origin.y;
  v42.origin.x = 0.0;
  v42.origin.y = 0.0;
  v50 = v25;
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v19);
  v27 = v53;
  v53 = 0;
  if (v27)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v27, v26);
  v28 = v52;
  v52 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = v45;
  v45 = 0;
  if (v29)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v29, v26);
  v51 = 1;
  -[WKContentView convertRect:toView:](self, "convertRect:toView:", -[WKContentView webView](self, "webView"), x, y, width, height);
  v42.origin.x = v30;
  v42.origin.y = v31;
  v42.size.width = v32;
  v42.size.height = v33;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v43, &v42);
  v43[16] = 1;
  v52 = 0;
  -[WKContentView _showShareSheet:inRect:completionHandler:](self, "_showShareSheet:inRect:completionHandler:", v46, v43, &v52);
  v35 = v52;
  v52 = 0;
  if (v35)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v35 + 8))(v35);
  WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v34);
  if (v48)
  {
    v37 = v47[3];
    v47[3] = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  WTF::Vector<WTF::Ref<WebCore::File,WTF::RawPtrTraits<WebCore::File>,WTF::DefaultRefDerefTraits<WebCore::File>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47[1], v36);
  v39 = v47[0];
  v47[0] = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = v46[1];
  v46[1] = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v38);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = v46[0];
  v46[0] = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v38);
    else
      *(_DWORD *)v41 -= 2;
  }
}

- (BOOL)actionSheetAssistant:(id)a3 shouldIncludeAppLinkActionsForElement:(id)a4
{
  return (*(uint64_t (**)(_QWORD, id))(**((_QWORD **)self->_page.m_ptr + 13) + 448))(*((_QWORD *)self->_page.m_ptr + 13), a4);
}

- (BOOL)actionSheetAssistant:(id)a3 showCustomSheetForElement:(id)a4
{
  void *v6;
  int v7;

  v6 = (void *)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v7 = objc_msgSend(v6, "_webView:showCustomSheetForElement:", -[WKContentView webView](self, "webView"), a4);
    if (v7)
    {
      if (!*(_QWORD *)&self->_dragDropInteractionState.m_lastGlobalPosition.y)
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"), "_cancelAllTouches");
      LOBYTE(v7) = 1;
    }
  }
  else
  {
    LOBYTE(v7) = 0;
  }
  return v7;
}

- (CGRect)unoccludedWindowBoundsForActionSheetAssistant:(id)a3
{
  WeakObjCPtr<WKWebView> *p_webView;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGRect result;

  p_webView = &self->_webView;
  objc_msgSend((id)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "scrollView"), "adjustedContentInset");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  objc_msgSend(objc_loadWeak(&p_webView->m_weakReference), "bounds");
  objc_msgSend(objc_loadWeak(&p_webView->m_weakReference), "convertRect:toView:", -[WKContentView window](self, "window"), v8 + v13, v6 + v14, v15 - (v8 + v12), v16 - (v6 + v10));
  result.size.height = v20;
  result.size.width = v19;
  result.origin.y = v18;
  result.origin.x = v17;
  return result;
}

- (RetainPtr<NSArray>)actionSheetAssistant:(id)a3 decideActionsForElement:(id)a4 defaultActions:(RetainPtr<NSArray>)a5
{
  uint64_t v5;
  const void *v6;
  CFTypeRef v7;
  CFTypeRef cf;

  v5 = *((_QWORD *)self->_page.m_ptr + 13);
  v6 = *(const void **)a5.m_ptr;
  *(_QWORD *)a5.m_ptr = 0;
  cf = v6;
  (*(void (**)(uint64_t, id, CFTypeRef *))(*(_QWORD *)v5 + 456))(v5, a4, &cf);
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
  return (RetainPtr<NSArray>)v7;
}

- (void)actionSheetAssistant:(id)a3 willStartInteractionWithElement:(id)a4
{
  WebPageProxy *m_ptr;
  InteractionInformationAtPosition *p_positionInformation;
  uint64_t v6;
  _QWORD v7[2];

  m_ptr = self->_page.m_ptr;
  p_positionInformation = &self->_positionInformation;
  v6 = *((_QWORD *)m_ptr + 26);
  v7[0] = &p_positionInformation->elementContext.var0.var2 + 1;
  v7[1] = p_positionInformation;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartInteractionWithElementContextOrPosition>(v6, (uint64_t)v7, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)actionSheetAssistantDidStopInteraction:(id)a3
{
  WebPageProxy *m_ptr;
  uint64_t v4;
  char v5;

  m_ptr = self->_page.m_ptr;
  v4 = *((_QWORD *)m_ptr + 26);
  v5 = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StopInteraction>(v4, (uint64_t)&v5, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (id)dataDetectionContextForPositionInformation:(const void *)a3
{
  void *v5;
  id v6;
  uint64_t v7;
  PAL *v8;
  uint64_t v9;
  PAL *v10;
  _BOOL8 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;
  void *v26;
  _QWORD v28[6];

  v5 = (void *)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (v6 = (id)objc_msgSend((id)objc_msgSend(v5, "_dataDetectionContextForWebView:", -[WKContentView webView](self, "webView")), "mutableCopy")) == 0)
  {
    v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  v7 = *((_QWORD *)a3 + 25);
  if (v7 && *(_DWORD *)(v7 + 4))
  {
    v8 = (PAL *)WTF::StringImpl::operator NSString *();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, PAL::get_DataDetectorsUI_kDataDetectorsLeadingText(v8));
  }
  v9 = *((_QWORD *)a3 + 26);
  if (v9 && *(_DWORD *)(v9 + 4))
  {
    v10 = (PAL *)WTF::StringImpl::operator NSString *();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v10, PAL::get_DataDetectorsUI_kDataDetectorsTrailingText(v10));
  }
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = __75__WKContentView_WKInteraction__dataDetectionContextForPositionInformation___block_invoke;
  v28[3] = &unk_1E3506970;
  v28[4] = self;
  v28[5] = a3;
  v11 = __75__WKContentView_WKInteraction__dataDetectionContextForPositionInformation___block_invoke((uint64_t)v28);
  if (!v11)
    objc_msgSend(v6, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], PAL::get_DataDetectorsUI_kDDContextMenuWantsPreviewKey((PAL *)v11));
  if (*((_BYTE *)a3 + 24))
    WebCore::FloatRect::operator CGRect();
  else
    WebCore::IntRect::operator CGRect();
  v16 = -[WKContentView convertRect:toView:](self, "convertRect:toView:", -[WKContentView containerForContextMenuHintPreviews](self, "containerForContextMenuHintPreviews"), v12, v13, v14, v15);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  ((void (*)(uint64_t))*MEMORY[0x1E0DCE078])(v16);
  v26 = (void *)objc_msgSend(v25, "updateContext:withSourceRect:", v6, v18, v20, v22, v24);
  if (v6)
    CFRelease(v6);
  return v26;
}

BOOL __75__WKContentView_WKInteraction__dataDetectionContextForPositionInformation___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!objc_msgSend((id)WTF::URL::operator NSURL *(), "iTunesStoreURL"))
    return 1;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 440);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 264) + 24);
  return ((v3 & 0x8000000000000000) == 0 || v3 == -1) && (*(_WORD *)(v2 + 1306) & 1) == 0;
}

- (id)dataDetectionContextForActionSheetAssistant:(id)a3 positionInformation:(const void *)a4
{
  return -[WKContentView dataDetectionContextForPositionInformation:](self, "dataDetectionContextForPositionInformation:", a4);
}

- (void)actionSheetAssistant:(id)a3 getAlternateURLForImage:(id)a4 completion:(id)a5
{
  void *v8;
  id v9;
  _QWORD v10[5];

  v8 = (void *)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v9 = -[WKContentView webView](self, "webView");
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __88__WKContentView_WKInteraction__actionSheetAssistant_getAlternateURLForImage_completion___block_invoke;
    v10[3] = &unk_1E3506998;
    v10[4] = a5;
    objc_msgSend(v8, "_webView:getAlternateURLFromImage:completionHandler:", v9, a4, v10);
  }
  else
  {
    (*((void (**)(id, _QWORD, _QWORD))a5 + 2))(a5, 0, 0);
  }
}

uint64_t __88__WKContentView_WKInteraction__actionSheetAssistant_getAlternateURLForImage_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (id)additionalMediaControlsContextMenuItemsForActionSheetAssistant:(id)a3
{
  return (id)MEMORY[0x1E0C9AA60];
}

- (void)actionSheetAssistantDidShowContextMenu:(id)a3
{
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_didShowContextMenu");
}

- (void)actionSheetAssistantDidDismissContextMenu:(id)a3
{
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_didDismissContextMenu");
}

- (void)_targetedPreviewContainerDidRemoveLastSubview:(id)a3
{
  if (self->_contextMenuHintContainerView.m_ptr == a3)
    -[WKContentView _removeContextMenuHintContainerIfPossible](self, "_removeContextMenuHintContainerIfPossible");
}

- (BOOL)_shouldUseContextMenusForFormControls
{
  _BOOL4 v3;

  v3 = -[WKContentView _formControlRefreshEnabled](self, "_formControlRefreshEnabled");
  if (v3)
    LOBYTE(v3) = -[WKContentView _shouldUseContextMenus](self, "_shouldUseContextMenus");
  return v3;
}

- (BOOL)_shouldAvoidResizingWhenInputViewBoundsChange
{
  return self->_anon_938[292];
}

- (BOOL)_shouldAvoidScrollingWhenFocusedContentIsVisible
{
  return self->_anon_938[293];
}

- (BOOL)_shouldUseLegacySelectPopoverDismissalBehavior
{
  uint64_t IsSmallScreen;

  IsSmallScreen = PAL::currentUserInterfaceIdiomIsSmallScreen((PAL *)self);
  if ((IsSmallScreen & 1) == 0 && self->_anon_938[113] == 16 && self->_anon_938[294])
    return WebCore::IOSApplication::isDataActivation((WebCore::IOSApplication *)IsSmallScreen);
  else
    return 0;
}

- (BOOL)shouldDeferGestureDueToImageAnalysis:(id)a3
{
  if ((objc_msgSend(a3, "_wk_isTextInteractionLoupeGesture") & 1) != 0)
    return 1;
  else
    return objc_msgSend(a3, "_wk_isTapAndAHalf");
}

- (unsigned)_dataOwnerForPasteboard:(BOOL)a3
{
  uint64_t v4;
  unint64_t v5;

  if (a3)
    v4 = -[WKContentView _dataOwnerForCopy](self, "_dataOwnerForCopy");
  else
    v4 = -[WKContentView _dataOwnerForPaste](self, "_dataOwnerForPaste");
  v5 = objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_effectiveDataOwner:", v4);
  if (v5 >= 4)
    return 0;
  else
    return v5;
}

- (RetainPtr<WKTargetedPreviewContainer>)_createPreviewContainerWithLayerName:(id)a3
{
  WKTargetedPreviewContainer **v3;
  WKTargetedPreviewContainer **v5;
  WKTargetedPreviewContainer *v6;

  v5 = v3;
  v6 = -[WKTargetedPreviewContainer initWithContentView:]([WKTargetedPreviewContainer alloc], "initWithContentView:", self);
  *v5 = v6;
  objc_msgSend((id)-[WKTargetedPreviewContainer layer](v6, "layer"), "setAnchorPoint:", *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
  return (RetainPtr<WKTargetedPreviewContainer>)objc_msgSend((id)-[WKTargetedPreviewContainer layer](v6, "layer"), "setName:", a3);
}

- (id)containerForDropPreviews
{
  id result;
  void *v4;
  void *m_ptr;
  CFTypeRef v6;
  CFTypeRef cf;

  result = self->_dropPreviewContainerView.m_ptr;
  if (!result)
  {
    -[WKContentView _createPreviewContainerWithLayerName:](self, "_createPreviewContainerWithLayerName:", CFSTR("Drop Preview Container"));
    v4 = (void *)cf;
    cf = 0;
    m_ptr = self->_dropPreviewContainerView.m_ptr;
    self->_dropPreviewContainerView.m_ptr = v4;
    if (m_ptr)
    {
      CFRelease(m_ptr);
      v6 = cf;
      cf = 0;
      if (v6)
        CFRelease(v6);
    }
    objc_msgSend(self->_interactionViewsContainerView.m_ptr, "addSubview:", self->_dropPreviewContainerView.m_ptr);
    return self->_dropPreviewContainerView.m_ptr;
  }
  return result;
}

- (void)_removeContainerForDropPreviews
{
  void *m_ptr;

  m_ptr = self->_dropPreviewContainerView.m_ptr;
  if (m_ptr)
  {
    self->_dropPreviewContainerView.m_ptr = 0;
    objc_msgSend(m_ptr, "removeFromSuperview");
    CFRelease(m_ptr);
  }
}

- (id)containerForDragPreviews
{
  id result;
  void *v4;
  void *m_ptr;
  CFTypeRef v6;
  CFTypeRef cf;

  result = self->_dragPreviewContainerView.m_ptr;
  if (!result)
  {
    -[WKContentView _createPreviewContainerWithLayerName:](self, "_createPreviewContainerWithLayerName:", CFSTR("Drag Preview Container"));
    v4 = (void *)cf;
    cf = 0;
    m_ptr = self->_dragPreviewContainerView.m_ptr;
    self->_dragPreviewContainerView.m_ptr = v4;
    if (m_ptr)
    {
      CFRelease(m_ptr);
      v6 = cf;
      cf = 0;
      if (v6)
        CFRelease(v6);
    }
    objc_msgSend(self->_interactionViewsContainerView.m_ptr, "addSubview:", self->_dragPreviewContainerView.m_ptr);
    return self->_dragPreviewContainerView.m_ptr;
  }
  return result;
}

- (void)_removeContainerForDragPreviews
{
  void *m_ptr;

  m_ptr = self->_dragPreviewContainerView.m_ptr;
  if (m_ptr)
  {
    self->_dragPreviewContainerView.m_ptr = 0;
    objc_msgSend(m_ptr, "removeFromSuperview");
    CFRelease(m_ptr);
  }
}

- (id)containerForContextMenuHintPreviews
{
  void *m_ptr;
  uint64_t v4;
  void *v5;
  void *v6;
  void *cf;

  if (!self->_contextMenuHintContainerView.m_ptr)
  {
    -[WKContentView _createPreviewContainerWithLayerName:](self, "_createPreviewContainerWithLayerName:", CFSTR("Context Menu Hint Preview Container"));
    m_ptr = self->_contextMenuHintContainerView.m_ptr;
    self->_contextMenuHintContainerView.m_ptr = cf;
    if (m_ptr)
      CFRelease(m_ptr);
    v4 = objc_msgSend(-[WKContentView webView](self, "webView"), "UIDelegate");
    if (v4
      && (v5 = (void *)v4, (objc_opt_respondsToSelector() & 1) != 0)
      && (v6 = (void *)objc_msgSend(v5, "_contextMenuHintPreviewContainerViewForWebView:", -[WKContentView webView](self, "webView"))) != 0|| (v6 = self->_interactionViewsContainerView.m_ptr) != 0)
    {
      CFRetain(v6);
    }
    objc_msgSend(v6, "addSubview:", self->_contextMenuHintContainerView.m_ptr);
    if (v6)
      CFRelease(v6);
  }
  return self->_contextMenuHintContainerView.m_ptr;
}

- (void)_removeContainerForContextMenuHintPreviews
{
  void *m_ptr;

  m_ptr = self->_contextMenuHintContainerView.m_ptr;
  if (m_ptr)
  {
    self->_contextMenuHintContainerView.m_ptr = 0;
    objc_msgSend(m_ptr, "removeFromSuperview");
    CFRelease(m_ptr);
    objc_storeWeak(&self->_scrollViewForTargetedPreview.m_weakReference, 0);
    self->_scrollViewForTargetedPreviewInitialOffset = (CGPoint)*MEMORY[0x1E0C9D538];
  }
}

- (void)_updateTargetedPreviewScrollViewUsingContainerScrollingNodeID:()optional<WebCore:()WTF:(unsigned long long>>> *)a3 :ObjectIdentifierMainThreadAccessTraits<uint64_t> :ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType
{
  WebKit::ScrollingTreeOverflowScrollingNodeIOS *v4;
  WeakObjCPtr<UIScrollView> *p_scrollViewForTargetedPreview;
  CGFloat v6;
  CGFloat v7;

  if (a3->var1)
  {
    if (*((_QWORD *)self->_page.m_ptr + 25))
    {
      v4 = WebKit::RemoteScrollingCoordinatorProxyIOS::scrollViewForScrollingNodeID();
      if (v4)
        objc_storeWeak(&self->_scrollViewForTargetedPreview.m_weakReference, v4);
    }
  }
  p_scrollViewForTargetedPreview = &self->_scrollViewForTargetedPreview;
  if (!objc_loadWeak(&self->_scrollViewForTargetedPreview.m_weakReference))
    objc_storeWeak(&p_scrollViewForTargetedPreview->m_weakReference, (id)objc_msgSend(-[WKContentView webView](self, "webView"), "scrollView"));
  objc_msgSend(objc_loadWeak(&p_scrollViewForTargetedPreview->m_weakReference), "convertPoint:toView:", objc_msgSend(self->_contextMenuHintContainerView.m_ptr, "superview"), *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
  self->_scrollViewForTargetedPreviewInitialOffset.x = v6;
  self->_scrollViewForTargetedPreviewInitialOffset.y = v7;
}

- (BOOL)deferringGestureRecognizer:(id)a3 willBeginTouchesWithEvent:(id)a4
{
  void *m_ptr;

  WebKit::GestureRecognizerConsistencyEnforcer::beginTracking((WebKit::GestureRecognizerConsistencyEnforcer *)-[WKContentView gestureRecognizerConsistencyEnforcer](self, "gestureRecognizerConsistencyEnforcer"), (WKDeferringGestureRecognizer *)a3);
  m_ptr = self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr;
  objc_msgSend(a3, "locationInView:", self);
  if ((objc_msgSend(m_ptr, "interactableItemExistsAtPoint:") & 1) != 0)
    return 0;
  else
    return !-[WKContentView gestureRecognizer:isInterruptingMomentumScrollingWithEvent:](self, "gestureRecognizer:isInterruptingMomentumScrollingWithEvent:", a3, a4);
}

- (void)deferringGestureRecognizer:(id)a3 didTransitionToState:(int64_t)a4
{
  if ((unint64_t)(a4 - 3) <= 2)
    WebKit::GestureRecognizerConsistencyEnforcer::endTracking((WebKit::GestureRecognizerConsistencyEnforcer *)-[WKContentView gestureRecognizerConsistencyEnforcer](self, "gestureRecognizerConsistencyEnforcer"), (WKDeferringGestureRecognizer *)a3);
}

- (void)deferringGestureRecognizer:(id)a3 didEndTouchesWithEvent:(id)a4
{
  WebPageProxy *m_ptr;

  WebKit::GestureRecognizerConsistencyEnforcer::endTracking((WebKit::GestureRecognizerConsistencyEnforcer *)-[WKContentView gestureRecognizerConsistencyEnforcer](self, "gestureRecognizerConsistencyEnforcer", a3, a4), (WKDeferringGestureRecognizer *)a3);
  if (!objc_msgSend(a3, "state"))
  {
    m_ptr = self->_page.m_ptr;
    if (*((_QWORD *)m_ptr + 98))
    {
      if (-[WKContentView _isTouchStartDeferringGesture:](self, "_isTouchStartDeferringGesture:", a3))
        return;
      m_ptr = self->_page.m_ptr;
    }
    if ((*((_BYTE *)m_ptr + 800) != 1 || self->_touchMoveDeferringGestureRecognizer.m_ptr != a3)
      && (!*((_QWORD *)m_ptr + 99)
       || !-[WKContentView _isTouchEndDeferringGesture:](self, "_isTouchEndDeferringGesture:", a3)))
    {
      if (objc_msgSend(self->_touchEventGestureRecognizer.m_ptr, "state"))
        objc_msgSend(a3, "setState:", 5);
    }
  }
}

- (BOOL)deferringGestureRecognizer:(id)a3 shouldDeferOtherGestureRecognizer:(id)a4
{
  unsigned int *m_tableForLLDB;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  id v13;
  int v14;
  id Weak;
  id v16;
  char isKindOfClass;
  char v19;
  _BOOL4 v20;
  uint64_t v21;

  if (-[WKContentView _touchEventsMustRequireGestureRecognizerToFail:](self, "_touchEventsMustRequireGestureRecognizerToFail:", a4))
  {
    goto LABEL_16;
  }
  if (self->_failedTouchStartDeferringGestures.__engaged_)
  {
    m_tableForLLDB = self->_failedTouchStartDeferringGestures.var0.__val_.m_impl.var0.m_tableForLLDB;
    if (m_tableForLLDB)
    {
      v8 = *(m_tableForLLDB - 2);
      v9 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(id *)&m_tableForLLDB[2 * v12];
      if (v13 == a3)
      {
LABEL_8:
        if (!objc_msgSend(a3, "state"))
          goto LABEL_16;
      }
      else
      {
        v14 = 1;
        while (v13)
        {
          v12 = (v12 + v14) & v8;
          v13 = *(id *)&m_tableForLLDB[2 * v12];
          ++v14;
          if (v13 == a3)
            goto LABEL_8;
        }
      }
    }
  }
  Weak = objc_loadWeak(&self->_webView.m_weakReference);
  v16 = (id)objc_msgSend(a4, "view");
  if (!v16)
  {
LABEL_12:
    if (-[WKContentView _gestureRecognizerCanBePreventedByTouchEvents:](self, "_gestureRecognizerCanBePreventedByTouchEvents:", a4))
    {
      goto LABEL_13;
    }
LABEL_16:
    isKindOfClass = 0;
    return isKindOfClass & 1;
  }
  while (v16 != Weak)
  {
    v16 = (id)objc_msgSend(v16, "superview");
    if (!v16)
      goto LABEL_12;
  }
LABEL_13:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || self->_touchEventGestureRecognizer.m_ptr == a4
    || (objc_msgSend(self->_mouseInteraction.m_ptr, "hasGesture:", a4) & 1) != 0)
  {
    goto LABEL_16;
  }
  if (self->_imageAnalysisDeferringGestureRecognizer.m_ptr != a3)
  {
    if (self->_touchMoveDeferringGestureRecognizer.m_ptr == a3)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        isKindOfClass = 1;
      }
      else
      {
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();
      }
      return isKindOfClass & 1;
    }
    if (-[WKContentView _isContextMenuGestureRecognizerForFailureRelationships:](self, "_isContextMenuGestureRecognizerForFailureRelationships:", a4)|| -[WKContentView _isDragInitiationGestureRecognizer:](self, "_isDragInitiationGestureRecognizer:", a4)|| self->_editDropCaretView.m_ptr == a4|| (objc_msgSend(a4, "_wk_isTapAndAHalf") & 1) != 0|| (objc_msgSend(a4, "_wk_isTextInteractionLoupeGesture") & 1) != 0|| self->_highlightLongPressGestureRecognizer.m_ptr == a4)
    {
      v20 = 1;
    }
    else
    {
      objc_opt_class();
      v19 = objc_opt_isKindOfClass();
      v20 = 0;
      if (a4 && (v19 & 1) != 0)
        v20 = (unint64_t)objc_msgSend(a4, "numberOfTapsRequired") >= 2
           && (unint64_t)objc_msgSend(a4, "numberOfTouchesRequired") < 2;
    }
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (self->_touchEndDeferringGestureRecognizerForSyntheticTapGestures.m_ptr == a3)
        return isKindOfClass & 1;
      if (self->_touchEndDeferringGestureRecognizerForDelayedResettableGestures.m_ptr == a3)
      {
        isKindOfClass = v20 & ~isKindOfClass;
        return isKindOfClass & 1;
      }
      if (self->_touchEndDeferringGestureRecognizerForImmediatelyResettableGestures.m_ptr == a3)
      {
        isKindOfClass = (isKindOfClass | v20) ^ 1;
        return isKindOfClass & 1;
      }
    }
    if ((isKindOfClass & 1) != 0)
    {
      v21 = 472;
    }
    else if (v20)
    {
      v21 = 464;
    }
    else
    {
      v21 = 456;
    }
    isKindOfClass = *(Class *)((char *)&self->super.super.super.super.isa + v21) == a3;
    return isKindOfClass & 1;
  }
  return -[WKContentView shouldDeferGestureDueToImageAnalysis:](self, "shouldDeferGestureDueToImageAnalysis:", a4);
}

- (void)_didChangeDragInteractionPolicy
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)&self->_dragDropInteractionState.m_activeDragSources.m_capacity;
  v3 = objc_msgSend(-[WKContentView webView](self, "webView"), "_dragInteractionPolicy");
  if (v3 == 1)
  {
    v4 = 1;
  }
  else if (v3 == 2)
  {
    v4 = 0;
  }
  else
  {
    v4 = objc_msgSend(MEMORY[0x1E0CEA550], "isEnabledByDefault");
  }
  objc_msgSend(v2, "setEnabled:", v4);
}

- (double)dragLiftDelay
{
  uint64_t v2;
  double result;

  v2 = objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "configuration"), "_dragLiftDelay");
  if (v2 == 1)
    return 0.5;
  if (v2 == 2)
    return 0.65;
  _UIDragInteractionDefaultLiftDelay();
  return result;
}

- (id)webViewUIDelegate
{
  return (id)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "UIDelegate");
}

- (void)teardownDragAndDropInteractions
{
  const void *v3;
  void *m_table;

  if (*(_QWORD *)&self->_dragDropInteractionState.m_activeDragSources.m_capacity)
    -[WKContentView removeInteraction:](self, "removeInteraction:");
  if (self->_dragDropInteractionState.m_defaultDropPreviews.m_impl.var0.m_table)
    -[WKContentView removeInteraction:](self, "removeInteraction:");
  v3 = *(const void **)&self->_dragDropInteractionState.m_activeDragSources.m_capacity;
  *(_QWORD *)&self->_dragDropInteractionState.m_activeDragSources.m_capacity = 0;
  if (v3)
    CFRelease(v3);
  m_table = self->_dragDropInteractionState.m_defaultDropPreviews.m_impl.var0.m_table;
  self->_dragDropInteractionState.m_defaultDropPreviews.m_impl.var0.m_table = 0;
  if (m_table)
    CFRelease(m_table);
  -[WKContentView cleanUpDragSourceSessionState](self, "cleanUpDragSourceSessionState");
}

- (void)_startDrag:(RetainPtr<CGImage *>)a3 item:(const void *)a4
{
  uint64_t v7;
  id v8;
  WebPageProxy *m_ptr;
  uint64_t v10;
  const void *v11;

  v7 = *((_QWORD *)a4 + 40);
  if (v7 && *(_DWORD *)(v7 + 4))
    -[WKContentView _prepareToDragPromisedAttachment:](self, "_prepareToDragPromisedAttachment:", (char *)a4 + 320);
  v8 = objc_alloc(MEMORY[0x1E0CEA638]);
  m_ptr = self->_page.m_ptr;
  v10 = 692;
  if (!*((_BYTE *)m_ptr + 696))
    v10 = 688;
  v11 = (const void *)objc_msgSend(v8, "initWithCGImage:scale:orientation:", *(_QWORD *)a3.m_ptr, 0, *(float *)((char *)m_ptr + v10));
  WebKit::DragDropInteractionState::stageDragItem((uint64_t)&self->_pendingRunModalJavaScriptDialogCallback, (uint64_t)a4, v11);
  if (v11)
    CFRelease(v11);
}

- (void)_didHandleAdditionalDragItemsRequest:(BOOL)a3
{
  CompletionHandler<void ()> *p_pendingRunModalJavaScriptDialogCallback;
  void (**v4)(_QWORD, _QWORD);
  _BOOL4 v5;
  void *v7;
  void *v8;
  __int128 v9;
  void *value;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  id v13;
  NSObject *v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  CFTypeRef v19;
  int v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  _OWORD v24[2];
  void *v25;
  CFTypeRef cf;
  _BYTE v27[120];
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  p_pendingRunModalJavaScriptDialogCallback = &self->_pendingRunModalJavaScriptDialogCallback;
  v4 = *(void (***)(_QWORD, _QWORD))&self->_dragDropInteractionState.m_didBeginDragging;
  *(_QWORD *)&self->_dragDropInteractionState.m_didBeginDragging = 0;
  if (v4)
  {
    v5 = a3;
    v7 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance"), "takeRegistrationLists");
    if (v5
      && (v8 = v7, objc_msgSend(v7, "count"))
      && LOBYTE(p_pendingRunModalJavaScriptDialogCallback[49].m_function.m_callableWrapper.__ptr_.__value_)
      && LOBYTE(p_pendingRunModalJavaScriptDialogCallback[10].m_function.m_callableWrapper.__ptr_.__value_))
    {
      v9 = *(_OWORD *)&p_pendingRunModalJavaScriptDialogCallback[12].m_function.m_callableWrapper.__ptr_.__value_;
      v24[0] = *(_OWORD *)&p_pendingRunModalJavaScriptDialogCallback[10].m_function.m_callableWrapper.__ptr_.__value_;
      v24[1] = v9;
      value = p_pendingRunModalJavaScriptDialogCallback[15].m_function.m_callableWrapper.__ptr_.__value_;
      v25 = p_pendingRunModalJavaScriptDialogCallback[14].m_function.m_callableWrapper.__ptr_.__value_;
      cf = value;
      if (value)
        CFRetain(value);
      std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)v27, (uint64_t)&p_pendingRunModalJavaScriptDialogCallback[16]);
      std::__optional_copy_base<WebCore::Path,false>::__optional_copy_base[abi:sn180100]((WebCore::Path *)&v28, (const WebCore::Path *)&p_pendingRunModalJavaScriptDialogCallback[31]);
      v11 = (WTF::StringImpl *)p_pendingRunModalJavaScriptDialogCallback[41].m_function.m_callableWrapper.__ptr_.__value_;
      if (v11)
        *(_DWORD *)v11 += 2;
      v32 = v11;
      v12 = (WTF::StringImpl *)p_pendingRunModalJavaScriptDialogCallback[42].m_function.m_callableWrapper.__ptr_.__value_;
      if (v12)
        *(_DWORD *)v12 += 2;
      v33 = v12;
      v34 = *(_OWORD *)&p_pendingRunModalJavaScriptDialogCallback[43].m_function.m_callableWrapper.__ptr_.__value_;
      v35 = *(_OWORD *)&p_pendingRunModalJavaScriptDialogCallback[45].m_function.m_callableWrapper.__ptr_.__value_;
      v36 = *(_OWORD *)&p_pendingRunModalJavaScriptDialogCallback[47].m_function.m_callableWrapper.__ptr_.__value_;
      v13 = -[WKContentView _itemsForBeginningOrAddingToSessionWithRegistrationLists:stagedDragSource:](self, "_itemsForBeginningOrAddingToSessionWithRegistrationLists:stagedDragSource:", v8, v24);
      v14 = qword_1ECE71078;
      if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
      {
        v15 = p_pendingRunModalJavaScriptDialogCallback[5].m_function.m_callableWrapper.__ptr_.__value_;
        v20 = 134218240;
        v21 = v15;
        v22 = 2048;
        v23 = objc_msgSend(v13, "count");
        _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "Drag session: %p adding %tu items", (uint8_t *)&v20, 0x16u);
      }
      WebKit::DragDropInteractionState::clearStagedDragSource((uint64_t)p_pendingRunModalJavaScriptDialogCallback, (WTF::StringImpl *)(objc_msgSend(v13, "count") != 0));
      ((void (**)(_QWORD, id))v4)[2](v4, v13);
      if (objc_msgSend(v13, "count"))
        WebKit::WebPageProxy::didStartDrag((uint64_t)self->_page.m_ptr);
      v17 = v33;
      v33 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = v32;
      v32 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v16);
        else
          *(_DWORD *)v18 -= 2;
      }
      if (v31)
      {
        if (v30 != -1)
          ((void (*)(int *, uint64_t *))off_1E35070A0[v30])(&v20, &v29);
        v30 = -1;
      }
      std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27, v16);
      v19 = cf;
      cf = 0;
      if (v19)
        CFRelease(v19);
    }
    else
    {
      WebKit::DragDropInteractionState::clearStagedDragSource((uint64_t)p_pendingRunModalJavaScriptDialogCallback, 0);
      v4[2](v4, MEMORY[0x1E0C9AA60]);
    }
  }
  _Block_release(v4);
}

- (void)_didHandleDragStartRequest:(BOOL)a3
{
  _BOOL4 v3;
  CompletionHandler<void ()> *p_pendingRunModalJavaScriptDialogCallback;
  CGFloat y;
  NSObject *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  WebPageProxy *m_ptr;
  IntSize v15;
  IntPoint v16;
  float v17[2];
  uint64_t v18;
  _BYTE buf[18];
  uint64_t v20;

  v3 = a3;
  v20 = *MEMORY[0x1E0C80C00];
  p_pendingRunModalJavaScriptDialogCallback = &self->_pendingRunModalJavaScriptDialogCallback;
  y = self->_dragDropInteractionState.m_adjustedPositionForDragEnd.y;
  self->_dragDropInteractionState.m_adjustedPositionForDragEnd.y = 0.0;
  v7 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v3;
    *(_WORD *)&buf[8] = 2048;
    *(CGFloat *)&buf[10] = y;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "Handling drag start request (started: %d, completion block: %p)", buf, 0x12u);
  }
  if (y != 0.0)
    (*(void (**)(CGFloat))(*(_QWORD *)&y + 16))(COERCE_CGFLOAT(*(_QWORD *)&y));
  if (!objc_msgSend((id)objc_msgSend(p_pendingRunModalJavaScriptDialogCallback[5].m_function.m_callableWrapper.__ptr_.__value_, "items"), "count"))
  {
    *(_OWORD *)buf = *(_OWORD *)&p_pendingRunModalJavaScriptDialogCallback[2].m_function.m_callableWrapper.__ptr_.__value_;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v17, (const CGPoint *)buf);
    v8 = roundf(v17[0]);
    v9 = 0x7FFFFFFFLL;
    v10 = (int)v8;
    if (v8 <= -2147500000.0)
      v10 = 0x80000000;
    if (v8 < 2147500000.0)
      v9 = v10;
    v11 = roundf(v17[1]);
    v12 = 0x7FFFFFFF00000000;
    v13 = 0x8000000000000000;
    if (v11 > -2147500000.0)
      v13 = (unint64_t)(int)v11 << 32;
    if (v11 < 2147500000.0)
      v12 = v13;
    v18 = v12 | v9;
    -[WKContentView cleanUpDragSourceSessionState](self, "cleanUpDragSourceSessionState");
    if (v3)
    {
      m_ptr = self->_page.m_ptr;
      buf[0] = 0;
      buf[16] = 0;
      v15 = (IntSize)&v18;
      v16 = (IntPoint)buf;
      WebKit::WebPageProxy::dragEnded((uint64_t)m_ptr, v15, &v18, 0, v16);
    }
  }
  _Block_release(*(const void **)&y);
}

- (void)computeClientAndGlobalPointsForDropSession:(id)a3 outClientPoint:(CGPoint *)a4 outGlobalPoint:(CGPoint *)a5
{
  CGFloat v7;
  CGFloat v8;

  objc_msgSend(a3, "locationInView:", self);
  if (a4)
  {
    a4->x = v7;
    a4->y = v8;
  }
  if (a5)
  {
    a5->x = v7;
    a5->y = v8;
  }
}

- (DragData)dragDataForDropSession:(SEL)a3 dragDestinationAction:(id)a4
{
  char v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  float v21[2];
  uint64_t v22;
  float v23[2];
  uint64_t v24;
  CGPoint v25;
  CGPoint v26;

  -[WKContentView computeClientAndGlobalPointsForDropSession:outClientPoint:outGlobalPoint:](self, "computeClientAndGlobalPointsForDropSession:outClientPoint:outGlobalPoint:", a4, &v25, &v26);
  v6 = 0;
  v7 = 0;
  LODWORD(v24) = 134480385;
  WORD2(v24) = 8208;
  do
    v6 |= *((_BYTE *)&v24 + v7++);
  while (v7 != 6);
  objc_msgSend(a4, "allowsMoveOperation");
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v23, &v25);
  v8 = roundf(v23[0]);
  v9 = 0x7FFFFFFFLL;
  v10 = (int)v8;
  if (v8 <= -2147500000.0)
    v10 = 0x80000000;
  if (v8 < 2147500000.0)
    v9 = v10;
  v11 = roundf(v23[1]);
  v12 = 0x7FFFFFFF00000000;
  v13 = 0x8000000000000000;
  if (v11 > -2147500000.0)
    v13 = (unint64_t)(int)v11 << 32;
  if (v11 < 2147500000.0)
    v12 = v13;
  v24 = v12 | v9;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v21, &v26);
  v14 = roundf(v21[0]);
  v15 = 0x7FFFFFFFLL;
  v16 = (int)v14;
  if (v14 <= -2147500000.0)
    v16 = 0x80000000;
  if (v14 < 2147500000.0)
    v15 = v16;
  v17 = roundf(v21[1]);
  v18 = 0x7FFFFFFF00000000;
  v19 = 0x8000000000000000;
  if (v17 > -2147500000.0)
    v19 = (unint64_t)(int)v17 << 32;
  if (v17 < 2147500000.0)
    v18 = v19;
  v22 = v18 | v15;
  return (DragData *)WebCore::DragData::DragData();
}

- (void)cleanUpDragSourceSessionState
{
  CompletionHandler<void ()> *p_pendingRunModalJavaScriptDialogCallback;
  NSObject *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  void *value;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  void *v13;
  unsigned int value_high;
  WTF *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _OWORD v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25[20];
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!self->_treatAsContentEditableUntilNextEditorStateUpdate)
  {
    p_pendingRunModalJavaScriptDialogCallback = &self->_pendingRunModalJavaScriptDialogCallback;
    if (*(_QWORD *)&self->_dragDropInteractionState.m_lastGlobalPosition.y
      || BYTE1(self->_dragDropInteractionState.m_lastGlobalPosition.x))
    {
      v4 = qword_1ECE71078;
      if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v21[0]) = 67109120;
        DWORD1(v21[0]) = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance"), "hasPendingOperation");
        _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "Cleaning up dragging state (has pending operation: %d)", (uint8_t *)v21, 8u);
      }
    }
    if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance"), "hasPendingOperation") & 1) == 0)
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance"), "setItemProviders:", 0);
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance"), "clearRegistrationLists");
    -[WKContentView _restoreEditMenuIfNeeded](self, "_restoreEditMenuIfNeeded");
    -[WKContentView _removeContainerForDragPreviews](self, "_removeContainerForDragPreviews");
    v5 = *(void **)self->_anon_dc8;
    *(_QWORD *)self->_anon_dc8 = 0;
    objc_msgSend(v5, "removeFromSuperview");
    if (v5)
      CFRelease(v5);
    -[WKContentView _removeDropCaret](self, "_removeDropCaret");
    BYTE1(self->_dragDropInteractionState.m_finalDropPreviews.m_impl.var0.m_table) = 0;
    WebKit::DragDropInteractionState::dragAndDropSessionsDidBecomeInactive((WebKit::DragDropInteractionState *)p_pendingRunModalJavaScriptDialogCallback);
    v6 = *MEMORY[0x1E0C9D538];
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    memset(v25, 0, sizeof(v25));
    v7 = *MEMORY[0x1E0C9D538];
    v21[0] = v6;
    v21[1] = v7;
    v24 = 0uLL;
    v26 = 0u;
    v27 = 0u;
    *(_OWORD *)&p_pendingRunModalJavaScriptDialogCallback->m_function.m_callableWrapper.__ptr_.__value_ = v6;
    *(_OWORD *)&p_pendingRunModalJavaScriptDialogCallback[2].m_function.m_callableWrapper.__ptr_.__value_ = v7;
    LOWORD(p_pendingRunModalJavaScriptDialogCallback[4].m_function.m_callableWrapper.__ptr_.__value_) = v22;
    *((_QWORD *)&v23 + 1) = 0;
    *((_QWORD *)&v22 + 1) = 0;
    value = p_pendingRunModalJavaScriptDialogCallback[5].m_function.m_callableWrapper.__ptr_.__value_;
    p_pendingRunModalJavaScriptDialogCallback[5].m_function.m_callableWrapper.__ptr_.__value_ = 0;
    if (value)
      CFRelease(value);
    *(_QWORD *)&v23 = 0;
    v9 = p_pendingRunModalJavaScriptDialogCallback[6].m_function.m_callableWrapper.__ptr_.__value_;
    p_pendingRunModalJavaScriptDialogCallback[6].m_function.m_callableWrapper.__ptr_.__value_ = 0;
    if (v9)
      CFRelease(v9);
    _Block_release(p_pendingRunModalJavaScriptDialogCallback[7].m_function.m_callableWrapper.__ptr_.__value_);
    v10 = (void *)*((_QWORD *)&v23 + 1);
    *((_QWORD *)&v23 + 1) = 0;
    p_pendingRunModalJavaScriptDialogCallback[7].m_function.m_callableWrapper.__ptr_.__value_ = v10;
    _Block_release(p_pendingRunModalJavaScriptDialogCallback[8].m_function.m_callableWrapper.__ptr_.__value_);
    v11 = p_pendingRunModalJavaScriptDialogCallback[9].m_function.m_callableWrapper.__ptr_.__value_;
    v12 = v24;
    v24 = 0uLL;
    *(_OWORD *)&p_pendingRunModalJavaScriptDialogCallback[8].m_function.m_callableWrapper.__ptr_.__value_ = v12;
    if (v11)
      CFRelease(v11);
    std::__optional_storage_base<WebKit::DragSourceState,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::DragSourceState,false>>((uint64_t)&p_pendingRunModalJavaScriptDialogCallback[10], v25);
    value_high = HIDWORD(p_pendingRunModalJavaScriptDialogCallback[51].m_function.m_callableWrapper.__ptr_.__value_);
    if (value_high)
      WTF::VectorDestructor<true,WebKit::DragSourceState>::destruct((WTF::StringImpl *)p_pendingRunModalJavaScriptDialogCallback[50].m_function.m_callableWrapper.__ptr_.__value_, (WTF::StringImpl *)((char *)p_pendingRunModalJavaScriptDialogCallback[50].m_function.m_callableWrapper.__ptr_.__value_+ 312 * value_high));
    v15 = (WTF *)p_pendingRunModalJavaScriptDialogCallback[50].m_function.m_callableWrapper.__ptr_.__value_;
    if (v15)
    {
      p_pendingRunModalJavaScriptDialogCallback[50].m_function.m_callableWrapper.__ptr_.__value_ = 0;
      LODWORD(p_pendingRunModalJavaScriptDialogCallback[51].m_function.m_callableWrapper.__ptr_.__value_) = 0;
      WTF::fastFree(v15, v13);
    }
    p_pendingRunModalJavaScriptDialogCallback[50].m_function.m_callableWrapper.__ptr_.__value_ = (void *)v26;
    v16 = (void *)*((_QWORD *)&v26 + 1);
    v26 = 0uLL;
    p_pendingRunModalJavaScriptDialogCallback[51].m_function.m_callableWrapper.__ptr_.__value_ = v16;
    v17 = (void *)v27;
    *(_QWORD *)&v27 = 0;
    v18 = (uint64_t)p_pendingRunModalJavaScriptDialogCallback[52].m_function.m_callableWrapper.__ptr_.__value_;
    p_pendingRunModalJavaScriptDialogCallback[52].m_function.m_callableWrapper.__ptr_.__value_ = v17;
    if (v18)
      WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::deallocateTable(v18, v13);
    v19 = (void *)*((_QWORD *)&v27 + 1);
    *((_QWORD *)&v27 + 1) = 0;
    v20 = (uint64_t)p_pendingRunModalJavaScriptDialogCallback[53].m_function.m_callableWrapper.__ptr_.__value_;
    p_pendingRunModalJavaScriptDialogCallback[53].m_function.m_callableWrapper.__ptr_.__value_ = v19;
    if (v20)
      WTF::HashTable<WTF::RetainPtr<UIDragItem>,WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>>>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashMap<WTF::RetainPtr<UIDragItem>,WTF::RetainPtr<UITargetedDragPreview>,WTF::DefaultHash<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>,WTF::HashTraits<WTF::RetainPtr<UITargetedDragPreview>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<UIDragItem>>>::deallocateTable(v20, v13);
    WebKit::DragDropInteractionState::~DragDropInteractionState((WebKit::DragDropInteractionState *)v21, v13);
  }
}

- (void)_insertDropCaret:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  void *v8;
  void *v9;
  void *v10;
  void *m_ptr;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  if (-[WKContentView _shouldUseTextCursorDragAnimator](self, "_shouldUseTextCursorDragAnimator"))
  {
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAB08]), "initWithTextInput:delegate:", self, self);
    v9 = (void *)objc_msgSend(v8, "cursorView");
    v10 = v9;
    if (v9)
      CFRetain(v9);
    m_ptr = self->_visibleContentViewSnapshot.m_ptr;
    self->_visibleContentViewSnapshot.m_ptr = v10;
    if (m_ptr)
      CFRelease(m_ptr);
    if (v8)
      CFRelease(v8);
    -[WKContentView addSubview:](self, "addSubview:", self->_visibleContentViewSnapshot.m_ptr);
    objc_msgSend(self->_visibleContentViewSnapshot.m_ptr, "setFrame:", x, y, width, height);
    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAAB8]), "initWithTextCursorView:textInput:", self->_visibleContentViewSnapshot.m_ptr, self);
    v13 = self->_unselectedContentSnapshot.m_ptr;
    self->_unselectedContentSnapshot.m_ptr = v12;
    if (v13)
    {
      CFRelease(v13);
      v12 = self->_unselectedContentSnapshot.m_ptr;
    }
    objc_msgSend(v12, "setCursorVisible:animated:", 1, 1);
    objc_msgSend(self->_unselectedContentSnapshot.m_ptr, "placeCursorAtPosition:animated:", +[WKTextPosition textPositionWithRect:](WKTextPosition, "textPositionWithRect:", x, y, width, height), 0);
  }
  else
  {
    v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAF30]), "initWithTextInputView:", self);
    v15 = self->_dropInteraction.m_ptr;
    self->_dropInteraction.m_ptr = v14;
    if (v15)
    {
      CFRelease(v15);
      v14 = self->_dropInteraction.m_ptr;
    }
    objc_msgSend(v14, "insertAtPosition:", +[WKTextPosition textPositionWithRect:](WKTextPosition, "textPositionWithRect:", x, y, width, height));
  }
}

- (void)_removeDropCaret
{
  void *m_ptr;
  void *v4;
  void *v5;

  m_ptr = self->_dropInteraction.m_ptr;
  self->_dropInteraction.m_ptr = 0;
  objc_msgSend(m_ptr, "remove");
  if (m_ptr)
    CFRelease(m_ptr);
  v4 = self->_unselectedContentSnapshot.m_ptr;
  self->_unselectedContentSnapshot.m_ptr = 0;
  objc_msgSend(v4, "setCursorVisible:animated:", 0, 0);
  if (v4)
    CFRelease(v4);
  v5 = self->_visibleContentViewSnapshot.m_ptr;
  self->_visibleContentViewSnapshot.m_ptr = 0;
  objc_msgSend(v5, "removeFromSuperview");
  if (v5)
    CFRelease(v5);
}

- (void)_willReceiveEditDragSnapshot
{
  self->_treatAsContentEditableUntilNextEditorStateUpdate = 1;
}

- (void)_didReceiveEditDragSnapshot:(optional<WebCore::TextIndicatorData> *)a3
{
  void *v4;
  void (**v5)(_QWORD);
  _BYTE v6[120];

  self->_treatAsContentEditableUntilNextEditorStateUpdate = 0;
  std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)v6, (uint64_t)a3);
  -[WKContentView _deliverDelayedDropPreviewIfPossible:](self, "_deliverDelayedDropPreviewIfPossible:", v6);
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
  -[WKContentView cleanUpDragSourceSessionState](self, "cleanUpDragSourceSessionState");
  v5 = *(void (***)(_QWORD))&self->_isAnimatingDragCancel;
  *(_QWORD *)&self->_isAnimatingDragCancel = 0;
  if (v5)
    v5[2](v5);
  _Block_release(v5);
}

- (void)_deliverDelayedDropPreviewIfPossible:(optional<WebCore::TextIndicatorData> *)a3
{
  Image *m_ptr;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD *v9;
  WebPageProxy *v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  void *v14;
  UIView *v15;
  WebCore::NativeImage *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  WebCore::NativeImage *v25;

  if (*(_QWORD *)self->_anon_dc8)
  {
    if (a3->__engaged_)
    {
      if (a3->var0.__val_.contentImage.m_ptr)
      {
        m_ptr = a3->var0.__val_.contentImageWithoutSelection.m_ptr;
        if (m_ptr)
        {
          ++*((_DWORD *)m_ptr + 2);
          v6 = WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)self);
          (*(void (**)(WebCore::NativeImage **__return_ptr, Image *, uint64_t))(*(_QWORD *)m_ptr + 288))(&v25, m_ptr, v6);
          if (!v25)
            goto LABEL_32;
          if (*(_QWORD *)&self->_commitPotentialTapPointerId)
          {
            v8 = objc_alloc(MEMORY[0x1E0CEA638]);
            v9 = (_QWORD *)WebCore::NativeImage::platformImage(v25);
            v10 = self->_page.m_ptr;
            v11 = 692;
            if (!*((_BYTE *)v10 + 696))
              v11 = 688;
            v12 = (const void *)objc_msgSend(v8, "initWithCGImage:scale:orientation:", *v9, 0, *(float *)((char *)v10 + v11));
            v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA658]), "initWithImage:", v12);
            v14 = self->_dragInteraction.m_ptr;
            self->_dragInteraction.m_ptr = v13;
            if (v14)
            {
              CFRelease(v14);
              v13 = self->_dragInteraction.m_ptr;
            }
            if (a3->__engaged_)
            {
              WebCore::FloatRect::operator CGRect();
              objc_msgSend(v13, "setFrame:");
              -[WKContentView insertSubview:belowSubview:](self, "insertSubview:belowSubview:", self->_dragInteraction.m_ptr, *(_QWORD *)self->_anon_dc8);
              v15 = -[WKContentView containerForDropPreviews](self, "containerForDropPreviews");
              if (a3->__engaged_)
              {
                WebKit::DragDropInteractionState::deliverDelayedDropPreview((WebKit::DragDropInteractionState *)&self->_pendingRunModalJavaScriptDialogCallback, &self->super.super, v15, (WebCore::Image **)a3);
                if (v12)
                  CFRelease(v12);
                goto LABEL_15;
              }
              std::__throw_bad_optional_access[abi:sn180100]();
            }
            __break(1u);
            return;
          }
LABEL_15:
          v16 = v25;
          v25 = 0;
          if (v16)
          {
            v17 = *((_QWORD *)v16 + 1);
            if (__ldaxr((unsigned __int8 *)v17))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v17))
            {
              goto LABEL_20;
            }
            MEMORY[0x19AEABB3C](v17);
LABEL_20:
            v19 = *(_QWORD *)(v17 + 8);
            v20 = v19 - 1;
            *(_QWORD *)(v17 + 8) = v19 - 1;
            if (v19 == 1)
            {
              v24 = *(_QWORD *)(v17 + 16);
              v21 = *(_QWORD *)(v17 + 24);
              *(_QWORD *)(v17 + 24) = 0;
              v22 = v24 != 0;
            }
            else
            {
              v21 = 0;
              v22 = 1;
            }
            v23 = __ldxr((unsigned __int8 *)v17);
            if (v23 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v17))
              {
LABEL_27:
                if (!v20)
                {
                  if (v21)
                    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
                  if (!v22)
                    WTF::fastFree((WTF *)v17, v7);
                }
                goto LABEL_32;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v17);
            goto LABEL_27;
          }
LABEL_32:
          if (*((_DWORD *)m_ptr + 2) == 1)
            (*(void (**)(Image *))(*(_QWORD *)m_ptr + 8))(m_ptr);
          else
            --*((_DWORD *)m_ptr + 2);
        }
      }
    }
  }
}

- (void)_didPerformDragOperation:(BOOL)a3
{
  _BOOL8 v3;
  NSObject *v5;
  CGFloat x;
  id v7;
  id v8;
  WebPageProxy *m_ptr;
  unsigned int v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  IntSize v24;
  IntPoint v25;
  float v26[2];
  uint64_t v27;
  float v28[2];
  uint64_t v29;
  CGPoint v30;
  CGPoint v31;
  uint8_t buf[4];
  _BOOL4 v33;
  char v34;
  uint64_t v35;

  v3 = a3;
  v35 = *MEMORY[0x1E0C80C00];
  v5 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v33 = v3;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "Finished performing drag controller operation (handled: %d)", buf, 8u);
  }
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance"), "decrementPendingOperationCount");
  x = self->_dragDropInteractionState.m_adjustedPositionForDragEnd.x;
  -[WKContentView webViewUIDelegate](self, "webViewUIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v7 = -[WKContentView webViewUIDelegate](self, "webViewUIDelegate");
    v8 = -[WKContentView webView](self, "webView");
    objc_msgSend(v7, "_webView:dataInteractionOperationWasHandled:forSession:itemProviders:", v8, v3, *(_QWORD *)&x, objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance"), "itemProviders"));
  }
  -[WKContentView computeClientAndGlobalPointsForDropSession:outClientPoint:outGlobalPoint:](self, "computeClientAndGlobalPointsForDropSession:outClientPoint:outGlobalPoint:", *(_QWORD *)&x, &v30, &v31);
  -[WKContentView cleanUpDragSourceSessionState](self, "cleanUpDragSourceSessionState");
  m_ptr = self->_page.m_ptr;
  v10 = *(unsigned __int16 *)((char *)m_ptr + 841);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v28, &v30);
  v11 = roundf(v28[0]);
  v12 = 0x7FFFFFFFLL;
  v13 = (int)v11;
  if (v11 <= -2147500000.0)
    v13 = 0x80000000;
  if (v11 < 2147500000.0)
    v12 = v13;
  v14 = roundf(v28[1]);
  v15 = 0x7FFFFFFF00000000;
  v16 = 0x8000000000000000;
  if (v14 > -2147500000.0)
    v16 = (unint64_t)(int)v14 << 32;
  if (v14 < 2147500000.0)
    v15 = v16;
  v29 = v15 | v12;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v26, &v31);
  v17 = roundf(v26[0]);
  v18 = 0x7FFFFFFFLL;
  v19 = (int)v17;
  if (v17 <= -2147500000.0)
    v19 = 0x80000000;
  if (v17 < 2147500000.0)
    v18 = v19;
  v20 = roundf(v26[1]);
  v21 = 0x7FFFFFFF00000000;
  v22 = 0x8000000000000000;
  if (v20 > -2147500000.0)
    v22 = (unint64_t)(int)v20 << 32;
  if (v20 < 2147500000.0)
    v21 = v22;
  v27 = v21 | v18;
  if (v10 <= 0x100)
    v23 = 0;
  else
    v23 = v10;
  buf[0] = 0;
  v34 = 0;
  v24 = (IntSize)&v29;
  v25 = (IntPoint)buf;
  WebKit::WebPageProxy::dragEnded((uint64_t)m_ptr, v24, &v27, v23, v25);
}

- (void)_didChangeDragCaretRect:(CGRect)a3 currentRect:(CGRect)a4
{
  double height;
  double width;
  double y;
  double x;
  _BOOL4 IsEmpty;
  _BOOL4 v10;
  WKTextPosition *v11;
  WKTextPosition *v12;
  CGRect v13;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  IsEmpty = CGRectIsEmpty(a3);
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  v10 = CGRectIsEmpty(v13);
  if (!IsEmpty || !v10)
  {
    if (IsEmpty)
    {
      -[WKContentView _insertDropCaret:](self, "_insertDropCaret:", x, y, width, height);
    }
    else if (v10)
    {
      -[WKContentView _removeDropCaret](self, "_removeDropCaret");
    }
    else
    {
      v11 = +[WKTextPosition textPositionWithRect:](WKTextPosition, "textPositionWithRect:", x, y, width, height);
      v12 = v11;
      if (v11)
        CFRetain(v11);
      objc_msgSend(self->_unselectedContentSnapshot.m_ptr, "placeCursorAtPosition:animated:", v12, 1);
      objc_msgSend(self->_dropInteraction.m_ptr, "updateToPosition:", v12);
      if (v12)
        CFRelease(v12);
    }
  }
}

- (void)_prepareToDragPromisedAttachment:(const void *)a3
{
  CGFloat y;
  NSObject *v6;
  const WTF::StringImpl *v7;
  char *v8;
  void *v9;
  WTF::StringImpl *v10;
  CFTypeRef *v11;
  WTF::StringImpl *v12;
  const __CFString *v13;
  WTF::StringImpl *v14;
  __CFString *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const __CFString *v23;
  const void *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  void *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  const void *v30;
  void *v31;
  void *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  CFTypeRef v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  void *v39;
  CFTypeRef cf;
  id v41;
  WTF::StringImpl *v42;
  _BYTE v43[16];
  WTF::StringImpl *v44;
  id v45;
  uint64_t v46;
  _BYTE buf[24];
  _QWORD v48[3];

  v48[2] = *MEMORY[0x1E0C80C00];
  y = self->_dragDropInteractionState.m_lastGlobalPosition.y;
  if (y != 0.0)
  {
    CFRetain(*(CFTypeRef *)&self->_dragDropInteractionState.m_lastGlobalPosition.y);
    v6 = qword_1ECE71078;
    if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
    {
      WTF::String::utf8();
      v8 = v44 ? (char *)v44 + 16 : 0;
      *(_DWORD *)buf = 134218242;
      *(CGFloat *)&buf[4] = y;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v8;
      _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "Drag session: %p preparing to drag with attachment identifier: %s", buf, 0x16u);
      v10 = v44;
      v44 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          WTF::fastFree(v10, v9);
        else
          --*(_DWORD *)v10;
      }
    }
    WebKit::WebPageProxy::attachmentForIdentifier(self->_page.m_ptr, (WTF::StringImpl **)a3, v7, buf);
    v11 = *(CFTypeRef **)buf;
    if (*(_QWORD *)buf)
    {
      API::Attachment::utiType(*(API::Attachment **)buf, &v44);
      if (v44)
      {
        v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
        v14 = v44;
        v44 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v12);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
      else
      {
        v13 = &stru_1E351F1B8;
      }
      API::Attachment::fileName((API::Attachment *)v11, (uint64_t)&v44);
      if (v44)
      {
        v15 = (__CFString *)WTF::StringImpl::operator NSString *();
        v17 = v44;
        v44 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v16);
          else
            *(_DWORD *)v17 -= 2;
        }
      }
      else
      {
        v15 = &stru_1E351F1B8;
      }
      CFRelease(v11[1]);
    }
    else
    {
      v15 = 0;
      v13 = 0;
    }
    v18 = objc_alloc_init(MEMORY[0x1E0DD9768]);
    objc_msgSend(v18, "setPreferredPresentationStyle:", 2);
    if (-[__CFString length](v15, "length"))
      objc_msgSend(v18, "setSuggestedName:", v15);
    v19 = (char *)a3 + 8;
    if (*((_DWORD *)a3 + 5))
    {
      v20 = 0;
      v21 = 0;
      while (1)
      {
        WebCore::SharedBuffer::createNSData(*(WebCore::SharedBuffer **)(*v19 + v20 + 8));
        if (v21 >= *((unsigned int *)a3 + 5))
          break;
        v22 = *(_QWORD *)buf;
        if (*(_QWORD *)(*v19 + v20))
          v23 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v23 = &stru_1E351F1B8;
        objc_msgSend(v18, "addData:forType:", v22, v23);
        v24 = *(const void **)buf;
        *(_QWORD *)buf = 0;
        if (v24)
          CFRelease(v24);
        ++v21;
        v20 += 16;
        if (v21 >= *((unsigned int *)a3 + 5))
          goto LABEL_35;
      }
      __break(0xC471u);
    }
    else
    {
LABEL_35:
      v36 = MEMORY[0x1E0C809B0];
      v37 = 3321888768;
      v38 = __65__WKContentView_WKInteraction___prepareToDragPromisedAttachment___block_invoke;
      v39 = &__block_descriptor_72_e8_32c79_ZTSKZ65__WKContentView_WKInteraction___prepareToDragPromisedAttachment__E4__77_e32_v16__0___v____NSURL___NSError__8l;
      *(CGFloat *)buf = y;
      *(_QWORD *)&buf[8] = 0;
      objc_initWeak((id *)&buf[8], self);
      v25 = *(_DWORD **)a3;
      if (*(_QWORD *)a3)
        *v25 += 2;
      *(_QWORD *)&buf[16] = v25;
      WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v48, (uint64_t)a3 + 8);
      cf = *(CFTypeRef *)buf;
      if (*(_QWORD *)buf)
        CFRetain(*(CFTypeRef *)buf);
      v41 = 0;
      objc_copyWeak(&v41, (id *)&buf[8]);
      v26 = *(WTF::StringImpl **)&buf[16];
      if (*(_QWORD *)&buf[16])
        **(_DWORD **)&buf[16] += 2;
      v42 = v26;
      WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v43, (uint64_t)v48);
      objc_msgSend(v18, "addPromisedType:fileCallback:", v13, &v36);
      WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v48, v27);
      v29 = *(WTF::StringImpl **)&buf[16];
      *(_QWORD *)&buf[16] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v28);
        else
          *(_DWORD *)v29 -= 2;
      }
      objc_destroyWeak((id *)&buf[8]);
      v30 = *(const void **)buf;
      *(_QWORD *)buf = 0;
      if (v30)
        CFRelease(v30);
      v31 = (void *)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance", v36, v37, v38, v39);
      v46 = objc_msgSend(v18, "itemProvider");
      objc_msgSend(v31, "setItemProviders:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v46, 1));
      v45 = v18;
      objc_msgSend(v31, "stageRegistrationLists:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v45, 1));
      WTF::Vector<WebCore::RawFile,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v43, v32);
      v34 = v42;
      v42 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v33);
        else
          *(_DWORD *)v34 -= 2;
      }
      objc_destroyWeak(&v41);
      v35 = cf;
      cf = 0;
      if (v35)
        CFRelease(v35);
      if (v18)
        CFRelease(v18);
    }
  }
}

void __65__WKContentView_WKInteraction___prepareToDragPromisedAttachment___block_invoke(uint64_t a1, uint64_t a2)
{
  void **WeakRetained;
  NSString *v5;
  void **v6;
  void *TemporaryDirectory;
  void **v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  WKDragSessionContext *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE buf[12];
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v20 = a2;
  WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 40));
  if (!WeakRetained)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(a2 + 16))(a2, 0, objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("WKErrorDomain"), 3, 0));
    return;
  }
  v6 = WeakRetained;
  TemporaryDirectory = (void *)WTF::FileSystemImpl::createTemporaryDirectory((WTF::FileSystemImpl *)CFSTR("blobs"), v5);
  v8 = (void **)(a1 + 32);
  v19 = objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", objc_msgSend(TemporaryDirectory, "stringByAppendingPathComponent:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3A28], "UUID"), "UUIDString")), 0);
  v9 = a1 + 48;
  WebKit::WebPageProxy::attachmentForIdentifier(v6[55], (WTF::StringImpl **)(a1 + 48), v10, buf);
  v11 = *(_QWORD *)buf;
  if (*(_QWORD *)buf && !API::Attachment::isEmpty(*(API::Attachment **)buf))
  {
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v12 = off_1E35070C8;
    v12[1] = v8;
    v12[2] = v9;
    v12[3] = &v19;
    v12[4] = &v20;
    v18 = v12;
    API::Attachment::doWithFileWrapper(v11, &v18);
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(a2 + 16))(a2, 0, objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("WKErrorDomain"), 3, 0));
    if (!v11)
      goto LABEL_9;
  }
  CFRelease(*(CFTypeRef *)(v11 + 8));
LABEL_9:
  v13 = *v8;
  v14 = (void *)existingLocalDragSessionContext(*v8);
  if (!v14)
  {
    if (objc_msgSend(v13, "localContext"))
    {
      v15 = qword_1ECE71078;
      if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
      {
        v16 = objc_msgSend(v13, "localContext");
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v16;
        v22 = 2112;
        v23 = v13;
        _os_log_impl(&dword_196BCC000, v15, OS_LOG_TYPE_DEFAULT, "Overriding existing local context: %@ on session: %@", buf, 0x16u);
      }
    }
    v17 = objc_alloc_init(WKDragSessionContext);
    objc_msgSend(v13, "setLocalContext:", v17);
    if (v17)
      CFRelease(v17);
    v14 = (void *)objc_msgSend(v13, "localContext");
  }
  objc_msgSend(v14, "addTemporaryDirectory:", TemporaryDirectory);
  CFRelease(v6);
}

- (unint64_t)_dragDestinationActionForDropSession:(id)a3
{
  id v5;

  v5 = -[WKContentView webViewUIDelegate](self, "webViewUIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v5, "_webView:dragDestinationActionMaskForDraggingInfo:", -[WKContentView webView](self, "webView"), a3);
  else
    return -5;
}

- (OptionSet<WebCore::DragSourceAction>)_allowedDragSourceActions
{
  OptionSet<WebCore::DragSourceAction> v3;
  uint64_t v4;
  int v6;
  __int16 v7;
  char v8;

  v3.m_storage = 0;
  v4 = 0;
  v6 = 134480385;
  v7 = 8208;
  v8 = 64;
  do
    v3.m_storage |= *((_BYTE *)&v6 + v4++);
  while (v4 != 7);
  if (!-[WKContentView isFirstResponder](self, "isFirstResponder")
    || self->_suppressSelectionAssistantReasons.m_storage)
  {
    return (OptionSet<WebCore::DragSourceAction>)(v3.m_storage & 0xF7);
  }
  return v3;
}

- (id)currentDragOrDropSession
{
  CompletionHandler<void ()> *p_pendingRunModalJavaScriptDialogCallback;
  id result;

  p_pendingRunModalJavaScriptDialogCallback = &self->_pendingRunModalJavaScriptDialogCallback;
  result = *(id *)&self->_dragDropInteractionState.m_adjustedPositionForDragEnd.x;
  if (!result)
    return p_pendingRunModalJavaScriptDialogCallback[5].m_function.m_callableWrapper.__ptr_.__value_;
  return result;
}

- (void)_restoreEditMenuIfNeeded
{
  if (BYTE1(self->_dragDropInteractionState.m_finalDropPreviews.m_impl.var0.m_table))
  {
    objc_msgSend(self->_textInteractionWrapper.m_ptr, "didEndScrollingOverflow");
    BYTE1(self->_dragDropInteractionState.m_finalDropPreviews.m_impl.var0.m_table) = 0;
  }
}

- (id)_itemsForBeginningOrAddingToSessionWithRegistrationLists:(id)a3 stagedDragSource:(const void *)a4
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  CFTypeRef v16;
  CFTypeRef v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t k;
  void *v26;
  WKContentView *v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[4];
  CFTypeRef v39;
  CFTypeRef cf;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  _BYTE v46[128];
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend(a3, "count"))
    return (id)MEMORY[0x1E0C9AA60];
  v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v29 = -[WKContentView webViewUIDelegate](self, "webViewUIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v28 = self;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v42;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v42 != v9)
            objc_enumerationMutation(a3);
          v11 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
          v12 = objc_msgSend(v11, "itemProvider");
          if (v12)
          {
            v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            v14 = objc_alloc_init(MEMORY[0x1E0C99E08]);
            v38[0] = MEMORY[0x1E0C809B0];
            v38[1] = 3321888768;
            v38[2] = __106__WKContentView_WKInteraction___itemsForBeginningOrAddingToSessionWithRegistrationLists_stagedDragSource___block_invoke;
            v38[3] = &__block_descriptor_48_e8_32c121_ZTSKZ106__WKContentView_WKInteraction___itemsForBeginningOrAddingToSessionWithRegistrationLists_stagedDragSource__E4__78_e39_v24__0___WebItemProviderRegistrar__8Q16l;
            if (v13)
              CFRetain(v13);
            if (v14)
              CFRetain(v14);
            v39 = v13;
            if (v13)
              CFRetain(v13);
            cf = v14;
            if (v14)
              CFRetain(v14);
            objc_msgSend(v11, "enumerateItems:", v38);
            if (v14)
              CFRelease(v14);
            if (v13)
              CFRelease(v13);
            v15 = (void *)objc_msgSend(v29, "_webView:adjustedDataInteractionItemProvidersForItemProvider:representingObjects:additionalData:", -[WKContentView webView](v28, "webView"), v12, v13, v14);
            if (objc_msgSend(v15, "count"))
              objc_msgSend(v7, "addObjectsFromArray:", v15);
            v16 = cf;
            cf = 0;
            if (v16)
              CFRelease(v16);
            v17 = v39;
            v39 = 0;
            if (v17)
              CFRelease(v17);
            if (v14)
              CFRelease(v14);
            if (v13)
              CFRelease(v13);
          }
        }
        v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
      }
      while (v8);
    }
  }
  else
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v19 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
    if (v19)
    {
      v20 = *(_QWORD *)v35;
      do
      {
        for (j = 0; j != v19; ++j)
        {
          if (*(_QWORD *)v35 != v20)
            objc_enumerationMutation(a3);
          v22 = objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * j), "itemProvider");
          if (v22)
            objc_msgSend(v7, "addObject:", v22);
        }
        v19 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
      }
      while (v19);
    }
  }
  v18 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v7, "count"));
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v23 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v30, v45, 16);
  if (v23)
  {
    v24 = *(_QWORD *)v31;
    do
    {
      for (k = 0; k != v23; ++k)
      {
        if (*(_QWORD *)v31 != v24)
          objc_enumerationMutation(v7);
        v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA558]), "initWithItemProvider:", *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * k));
        objc_msgSend(v26, "_setPrivateLocalContext:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *((_QWORD *)a4 + 38)));
        objc_msgSend(v18, "addObject:", v26);
        if (v26)
          CFRelease(v26);
      }
      v23 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v30, v45, 16);
    }
    while (v23);
  }
  return v18;
}

uint64_t __106__WKContentView_WKInteraction___itemsForBeginningOrAddingToSessionWithRegistrationLists_stagedDragSource___block_invoke(uint64_t a1, void *a2)
{
  uint64_t result;

  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(a2, "representingObjectForClient"));
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
      return objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", objc_msgSend(a2, "dataForClient"), objc_msgSend(a2, "typeIdentifierForClient"));
  }
  return result;
}

- (void)insertTextPlaceholderWithSize:(CGSize)a3 completionHandler:(id)a4
{
  WebPageProxy *m_ptr;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *aBlock;
  uint64_t v12;
  int v13;
  CGSize v14;

  v14 = a3;
  m_ptr = self->_page.m_ptr;
  WebCore::IntSize::IntSize((WebCore::IntSize *)&v13, &v14);
  v10 = 0;
  objc_initWeak(&v10, self);
  aBlock = _Block_copy(a4);
  v7 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v7 = off_1E3507C20;
  *(_QWORD *)(v7 + 8) = 0;
  objc_moveWeak((id *)(v7 + 8), &v10);
  v8 = aBlock;
  aBlock = 0;
  v12 = v7;
  *(_QWORD *)(v7 + 16) = v8;
  WebKit::WebPageProxy::insertTextPlaceholder((uint64_t)m_ptr, &v13, &v12);
  v9 = v12;
  v12 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  _Block_release(aBlock);
  objc_destroyWeak(&v10);
}

- (void)removeTextPlaceholder:(id)a3 willInsertText:(BOOL)a4 completionHandler:(id)a5
{
  char isKindOfClass;
  WebPageProxy *m_ptr;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (a3 && (isKindOfClass & 1) != 0)
  {
    CFRetain(a3);
    m_ptr = self->_page.m_ptr;
    v10 = objc_msgSend(a3, "elementContext");
    v11 = _Block_copy(a5);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = off_1E34BDAC8;
    v12[1] = v11;
    v14 = v12;
    WebKit::WebPageProxy::removeTextPlaceholder((uint64_t)m_ptr, v10, (uint64_t *)&v14);
    v13 = (uint64_t)v14;
    v14 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    _Block_release(0);
    CFRelease(a3);
  }
  else
  {
    (*((void (**)(id))a5 + 2))(a5);
  }
}

- (BOOL)_handleDropByInsertingImagePlaceholders:(id)a3 session:(id)a4
{
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const WTF::String *v13;
  const WTF::String *v14;
  char isSupportedImageMIMEType;
  CGFloat width;
  WTF::StringImpl *v17;
  CGFloat v18;
  CGFloat v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  WTF *v28;
  NSObject *v29;
  WebPageProxy *m_ptr;
  const void *v31;
  const void *v32;
  _QWORD *v33;
  uint64_t v34;
  WTF *v35;
  unint64_t v36;
  CGSize v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  WTF *v43;
  uint64_t v44;
  _BYTE buf[132];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend(-[WKContentView webView](self, "webView"), "_isEditable"))
    return 0;
  if (*(_QWORD *)&self->_dragDropInteractionState.m_lastGlobalPosition.y)
    return 0;
  v7 = objc_msgSend((id)objc_msgSend(a4, "items"), "count");
  if (v7 != objc_msgSend(a3, "count"))
    return 0;
  v43 = 0;
  v44 = 0;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v9 = (WTF *)objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v39, buf, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v40;
LABEL_6:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v40 != v10)
        objc_enumerationMutation(a3);
      v12 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * v11);
      MEMORY[0x19AEABCC8](&v38, objc_msgSend((id)objc_msgSend(v12, "web_fileUploadContentTypes"), "firstObject"));
      WebCore::MIMETypeFromUTI((WebCore *)&v38, v13);
      isSupportedImageMIMEType = WebCore::MIMETypeRegistry::isSupportedImageMIMEType((WebCore::MIMETypeRegistry *)&v37, v14);
      width = v37.width;
      v37.width = 0.0;
      if (width != 0.0)
      {
        if (**(_DWORD **)&width == 2)
          WTF::StringImpl::destroy(*(WTF::StringImpl **)&width, v8);
        else
          **(_DWORD **)&width -= 2;
      }
      v17 = v38;
      v38 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::destroy(v17, v8);
          if ((isSupportedImageMIMEType & 1) == 0)
            goto LABEL_29;
          goto LABEL_19;
        }
        *(_DWORD *)v17 -= 2;
      }
      if ((isSupportedImageMIMEType & 1) == 0)
        goto LABEL_29;
LABEL_19:
      objc_msgSend(v12, "preferredPresentationSize");
      v37.width = v18;
      v37.height = v19;
      WebCore::IntSize::IntSize((WebCore::IntSize *)&v38, &v37);
      if ((int)v38 < 1 || SHIDWORD(v38) < 1)
      {
LABEL_29:
        v9 = 0;
        v25 = 0;
        v35 = 0;
        v36 = 0;
        goto LABEL_32;
      }
      v20 = HIDWORD(v44);
      if (HIDWORD(v44) == (_DWORD)v44)
      {
        v21 = (WTF::StringImpl **)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v43, HIDWORD(v44) + 1, (unint64_t)&v38);
        v20 = HIDWORD(v44);
        v22 = v43;
        v23 = *v21;
      }
      else
      {
        v22 = v43;
        v23 = v38;
      }
      *((_QWORD *)v22 + v20) = v23;
      ++HIDWORD(v44);
      if (v9 == (WTF *)++v11)
      {
        v9 = (WTF *)objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v39, buf, 16);
        if (v9)
          goto LABEL_6;
        v9 = v43;
        v24 = v44;
        v25 = HIDWORD(v44);
        goto LABEL_31;
      }
    }
  }
  v25 = 0;
  v24 = 0;
LABEL_31:
  v43 = 0;
  v35 = v9;
  HIDWORD(v44) = 0;
  v36 = __PAIR64__(v25, v24);
LABEL_32:
  v28 = v43;
  if (v43)
  {
    v43 = 0;
    LODWORD(v44) = 0;
    WTF::fastFree(v28, v8);
  }
  v26 = v25 != 0;
  if (v25)
  {
    v29 = qword_1ECE71078;
    if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a4;
      _os_log_impl(&dword_196BCC000, v29, OS_LOG_TYPE_DEFAULT, "Inserting dropped image placeholders for session: %p", buf, 0xCu);
    }
    m_ptr = self->_page.m_ptr;
    CFRetain(self);
    v31 = (const void *)objc_msgSend(a4, "items");
    v32 = v31;
    if (v31)
      CFRetain(v31);
    v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v33 = &off_1E3507C48;
    v33[1] = self;
    v33[2] = v32;
    *(_QWORD *)buf = v33;
    WebKit::WebPageProxy::insertDroppedImagePlaceholders((uint64_t)m_ptr, (uint64_t)&v35, (uint64_t *)buf);
    v34 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v9 = v35;
  }
  if (v9)
  {
    v35 = 0;
    LODWORD(v36) = 0;
    WTF::fastFree(v9, v8);
  }
  return v26;
}

- (BOOL)_dragInteraction:(id)a3 shouldDelayCompetingGestureRecognizer:(id)a4
{
  char isKindOfClass;

  if (self->_highlightLongPressGestureRecognizer.m_ptr == a4)
  {
    isKindOfClass = 0;
  }
  else
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
  }
  return isKindOfClass & 1;
}

- (int64_t)_dragInteraction:(id)a3 dataOwnerForSession:(id)a4
{
  id v6;

  v6 = -[WKContentView webViewUIDelegate](self, "webViewUIDelegate", a3);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v6, "_webView:dataOwnerForDragSession:", -[WKContentView webView](self, "webView"), a4);
  else
    return 0;
}

- (void)_dragInteraction:(id)a3 itemsForAddingToSession:(id)a4 withTouchAtPoint:(CGPoint)a5 completion:(id)a6
{
  CompletionHandler<void ()> *p_pendingRunModalJavaScriptDialogCallback;
  WebPageProxy *m_ptr;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  float v21[2];
  uint64_t v22;
  float v23[2];
  uint64_t v24;
  CGPoint v25;

  v25 = a5;
  p_pendingRunModalJavaScriptDialogCallback = &self->_pendingRunModalJavaScriptDialogCallback;
  if (p_pendingRunModalJavaScriptDialogCallback[5].m_function.m_callableWrapper.__ptr_.__value_ != a4
    || p_pendingRunModalJavaScriptDialogCallback[8].m_function.m_callableWrapper.__ptr_.__value_
    || p_pendingRunModalJavaScriptDialogCallback[7].m_function.m_callableWrapper.__ptr_.__value_)
  {
    (*((void (**)(id, _QWORD))a6 + 2))(a6, MEMORY[0x1E0C9AA60]);
  }
  else
  {
    WebKit::DragDropInteractionState::dragSessionWillRequestAdditionalItem((uint64_t)p_pendingRunModalJavaScriptDialogCallback, (WTF::StringImpl *)a6);
    m_ptr = self->_page.m_ptr;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v23, &v25);
    v9 = roundf(v23[0]);
    v10 = 0x7FFFFFFFLL;
    v11 = (int)v9;
    if (v9 <= -2147500000.0)
      v11 = 0x80000000;
    if (v9 < 2147500000.0)
      v10 = v11;
    v12 = roundf(v23[1]);
    v13 = 0x7FFFFFFF00000000;
    v14 = 0x8000000000000000;
    if (v12 > -2147500000.0)
      v14 = (unint64_t)(int)v12 << 32;
    if (v12 < 2147500000.0)
      v13 = v14;
    v24 = v13 | v10;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v21, &v25);
    v15 = roundf(v21[0]);
    v16 = 0x7FFFFFFFLL;
    v17 = (int)v15;
    if (v15 <= -2147500000.0)
      v17 = 0x80000000;
    if (v15 < 2147500000.0)
      v16 = v17;
    v18 = roundf(v21[1]);
    v19 = 0x7FFFFFFF00000000;
    v20 = 0x8000000000000000;
    if (v18 > -2147500000.0)
      v20 = (unint64_t)(int)v18 << 32;
    if (v18 < 2147500000.0)
      v19 = v20;
    v22 = v19 | v16;
    WebKit::WebPageProxy::requestAdditionalItemsForDragSession((uint64_t)m_ptr, &v24, &v22, -[WKContentView _allowedDragSourceActions](self, "_allowedDragSourceActions"));
  }
}

- (void)_dragInteraction:(id)a3 prepareForSession:(id)a4 completion:(id)a5
{
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  CFTypeRef v11;
  CFTypeRef v12;
  id location;
  CFTypeRef cf;
  void *aBlock;
  __int128 buf;
  void (*v17)(id *, int);
  void *v18;
  id v19;
  CFTypeRef v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = a4;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "Preparing for drag session: %p", (uint8_t *)&buf, 0xCu);
  }
  if (-[WKContentView currentDragOrDropSession](self, "currentDragOrDropSession"))
  {
    v9 = qword_1ECE71078;
    if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = a4;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "Drag session failed: %p (a current drag session already exists)", (uint8_t *)&buf, 0xCu);
    }
    (*((void (**)(id))a5 + 2))(a5);
  }
  else
  {
    -[WKContentView cleanUpDragSourceSessionState](self, "cleanUpDragSourceSessionState");
    location = 0;
    objc_initWeak(&location, self);
    cf = a4;
    if (a4)
      CFRetain(a4);
    aBlock = _Block_copy(a5);
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3321888768;
    v17 = ___ZZ78__WKContentView_WKInteraction___dragInteraction_prepareForSession_completion__ENK4__81cvU13block_pointerFvN6WebKit31ProceedWithTextSelectionInImageEEEv_block_invoke;
    v18 = &__block_descriptor_56_e8_32c92_ZTSKZ78__WKContentView_WKInteraction___dragInteraction_prepareForSession_completion__E4__81_e8_v12__0B8l;
    v19 = 0;
    objc_copyWeak(&v19, &location);
    v20 = cf;
    if (cf)
      CFRetain(cf);
    v21 = _Block_copy(aBlock);
    v10 = objc_msgSend((id)objc_msgSend(&buf, "copy"), "autorelease");
    _Block_release(v21);
    v11 = v20;
    v20 = 0;
    if (v11)
      CFRelease(v11);
    objc_destroyWeak(&v19);
    -[WKContentView _doAfterPendingImageAnalysis:](self, "_doAfterPendingImageAnalysis:", v10);
    _Block_release(aBlock);
    v12 = cf;
    cf = 0;
    if (v12)
      CFRelease(v12);
    objc_destroyWeak(&location);
  }
}

- (id)dragInteraction:(id)a3 itemsForBeginningSession:(id)a4
{
  NSObject *v6;
  CompletionHandler<void ()> *p_pendingRunModalJavaScriptDialogCallback;
  CGFloat y;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  __int128 v13;
  CGFloat x;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  id v17;
  uint64_t v18;
  NSObject *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  CFTypeRef v24;
  int v25;
  id v26;
  __int16 v27;
  uint64_t v28;
  _BYTE buf[32];
  uint64_t v30;
  CFTypeRef cf;
  _BYTE v32[120];
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a4;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "Drag items requested for session: %p", buf, 0xCu);
  }
  p_pendingRunModalJavaScriptDialogCallback = &self->_pendingRunModalJavaScriptDialogCallback;
  y = self->_dragDropInteractionState.m_lastGlobalPosition.y;
  if (*(id *)&y != a4)
  {
    v9 = qword_1ECE71078;
    if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = a4;
      *(_WORD *)&buf[12] = 2048;
      *(CGFloat *)&buf[14] = y;
      v10 = "Drag session failed: %p (delegate session does not match %p)";
      v11 = v9;
      v12 = 22;
LABEL_18:
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
      return (id)MEMORY[0x1E0C9AA60];
    }
    return (id)MEMORY[0x1E0C9AA60];
  }
  if (!LOBYTE(self->_dragDropInteractionState.m_stagedDragSource.var0.__val_.linkURL.m_pathEnd)
    || !LOBYTE(self->_dragDropInteractionState.m_dropSession.m_ptr))
  {
    v18 = qword_1ECE71078;
    if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a4;
      v10 = "Drag session failed: %p (missing staged drag source)";
      v11 = v18;
      v12 = 12;
      goto LABEL_18;
    }
    return (id)MEMORY[0x1E0C9AA60];
  }
  v13 = *(_OWORD *)&self->_dragDropInteractionState.m_addDragItemCompletionBlock.m_block;
  *(_OWORD *)buf = *(_OWORD *)&self->_dragDropInteractionState.m_dropSession.m_ptr;
  *(_OWORD *)&buf[16] = v13;
  x = self->_dragDropInteractionState.m_stagedDragSource.var0.__val_.dragPreviewFrameInRootViewCoordinates.origin.x;
  v30 = *(_QWORD *)&self->_dragDropInteractionState.m_stagedDragSource.var0.__null_state_;
  cf = *(CFTypeRef *)&x;
  if (x != 0.0)
    CFRetain(*(CFTypeRef *)&x);
  std::__optional_copy_base<WebCore::TextIndicatorData,false>::__optional_copy_base[abi:sn180100]((WebCore::TextIndicatorData *)v32, (uint64_t)&self->_dragDropInteractionState.m_stagedDragSource.var0.__val_.dragPreviewFrameInRootViewCoordinates.origin.y);
  std::__optional_copy_base<WebCore::Path,false>::__optional_copy_base[abi:sn180100]((WebCore::Path *)&v33, (const WebCore::Path *)&self->_dragDropInteractionState.m_stagedDragSource.var0.__val_.indicatorData.var0.__val_.contentImage);
  v15 = (WTF::StringImpl *)*((_QWORD *)&self->_dragDropInteractionState.m_stagedDragSource.var0.__val_.visiblePath.var0.__val_.m_data.__impl_.__data.__tail.__tail
                           + 6);
  if (v15)
    *(_DWORD *)v15 += 2;
  v37 = v15;
  v16 = *(WTF::StringImpl **)&self->_dragDropInteractionState.m_stagedDragSource.var0.__val_.visiblePath.var0.__val_.m_data.__impl_.__index;
  if (v16)
    *(_DWORD *)v16 += 2;
  v38 = v16;
  v39 = *(_OWORD *)&self->_dragDropInteractionState.m_stagedDragSource.var0.__val_.visiblePath.__engaged_;
  v40 = *(_OWORD *)&self->_dragDropInteractionState.m_stagedDragSource.var0.__val_.linkURL.m_string.m_impl.m_ptr;
  v41 = *(_OWORD *)&self->_dragDropInteractionState.m_stagedDragSource.var0.__val_.linkURL.m_userEnd;
  v17 = -[WKContentView _itemsForBeginningOrAddingToSessionWithRegistrationLists:stagedDragSource:](self, "_itemsForBeginningOrAddingToSessionWithRegistrationLists:stagedDragSource:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance"), "takeRegistrationLists"), buf);
  if (objc_msgSend(v17, "count"))
    -[WKContentView _cancelLongPressGestureRecognizer](self, "_cancelLongPressGestureRecognizer");
  else
    WebKit::WebPageProxy::dragCancelled((uint64_t)self->_page.m_ptr);
  v20 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    v25 = 134218240;
    v26 = a4;
    v27 = 2048;
    v28 = objc_msgSend(v17, "count");
    _os_log_impl(&dword_196BCC000, v20, OS_LOG_TYPE_DEFAULT, "Drag session: %p starting with %tu items", (uint8_t *)&v25, 0x16u);
  }
  WebKit::DragDropInteractionState::clearStagedDragSource((uint64_t)p_pendingRunModalJavaScriptDialogCallback, (WTF::StringImpl *)(objc_msgSend(v17, "count") != 0));
  v22 = v38;
  v38 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v37;
  v37 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (v36)
  {
    if (v35 != -1)
      ((void (*)(int *, uint64_t *))off_1E35070A0[v35])(&v25, &v34);
    v35 = -1;
  }
  std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v32, v21);
  v24 = cf;
  cf = 0;
  if (v24)
    CFRelease(v24);
  return v17;
}

- (id)dragInteraction:(id)a3 previewForLiftingItem:(id)a4 session:(id)a5
{
  id v8;
  CFTypeRef v9;
  id v10;
  void *v11;
  void *v12;
  unsigned __int8 v14[120];
  _BYTE v15[120];

  v8 = -[WKContentView webViewUIDelegate](self, "webViewUIDelegate", a3);
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (v9 = (CFTypeRef)objc_msgSend(v8, "_webView:previewForLiftingItem:session:", -[WKContentView webView](self, "webView"), a4, a5)) == 0)
  {
    v10 = -[WKContentView containerForDragPreviews](self, "containerForDragPreviews");
    v14[0] = 0;
    v14[112] = 0;
    std::__optional_move_base<WebCore::TextIndicatorData,false>::__optional_move_base[abi:sn180100](v15, (uint64_t)&self->_positionInformationLinkIndicator);
    std::__optional_storage_base<WebCore::TextIndicatorData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::TextIndicatorData,false>>((uint64_t)&self->_positionInformationLinkIndicator, v14);
    v9 = WebKit::DragDropInteractionState::previewForLifting((uint64_t)&self->_pendingRunModalJavaScriptDialogCallback, a4, self, v10, (uint64_t)v15);
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v11);
    std::__optional_destruct_base<WebCore::TextIndicatorData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v12);
  }
  return (id)v9;
}

- (void)dragInteraction:(id)a3 willAnimateLiftWithAnimator:(id)a4 session:(id)a5
{
  NSObject *v8;
  unsigned int itemIdentifier_high;
  uint64_t v10;
  _BYTE *v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  WebPageProxy *m_ptr;
  WebPageProxy *v18;
  CFTypeRef v19;
  _QWORD v20[6];
  CFTypeRef cf;
  WebPageProxy *v22;
  float v23[2];
  uint8_t buf[16];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a5;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "Drag session willAnimateLiftWithAnimator: %p", buf, 0xCu);
  }
  itemIdentifier_high = HIDWORD(self->_dragDropInteractionState.m_stagedDragSource.var0.__val_.itemIdentifier);
  if (itemIdentifier_high)
  {
    v10 = 312 * itemIdentifier_high;
    v11 = (_BYTE *)(*(_QWORD *)&self->_dragDropInteractionState.m_stagedDragSource.var0.__val_.possiblyNeedsDragPreviewUpdate
                  + 297);
    while (!*v11)
    {
      v11 += 312;
      v10 -= 312;
      if (!v10)
        goto LABEL_10;
    }
    -[WKContentView cancelActiveTextInteractionGestures](self, "cancelActiveTextInteractionGestures");
    if (!BYTE1(self->_dragDropInteractionState.m_finalDropPreviews.m_impl.var0.m_table))
    {
      objc_msgSend(self->_textInteractionWrapper.m_ptr, "willStartScrollingOverflow");
      BYTE1(self->_dragDropInteractionState.m_finalDropPreviews.m_impl.var0.m_table) = 1;
    }
  }
LABEL_10:
  *(_OWORD *)buf = *(_OWORD *)&self->_lastInsertedCharacterToOverrideCharacterBeforeSelection.var0.__null_state_;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v23, (const CGPoint *)buf);
  v12 = roundf(v23[0]);
  v13 = 0x80000000;
  if (v12 > -2147500000.0)
    v13 = (int)v12;
  if (v12 < 2147500000.0)
    v14 = v13;
  else
    v14 = 0x7FFFFFFFLL;
  v15 = roundf(v23[1]);
  if (v15 >= 2147500000.0)
  {
    v16 = 0x7FFFFFFF00000000;
  }
  else if (v15 <= -2147500000.0)
  {
    v16 = 0x8000000000000000;
  }
  else
  {
    v16 = (unint64_t)(int)v15 << 32;
  }
  CFRetain(self);
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3321888768;
  v20[2] = __84__WKContentView_WKInteraction__dragInteraction_willAnimateLiftWithAnimator_session___block_invoke;
  v20[3] = &__block_descriptor_64_e8_32c98_ZTSKZ84__WKContentView_WKInteraction__dragInteraction_willAnimateLiftWithAnimator_session__E4__82_e8_v16__0q8l;
  CFRetain(self);
  m_ptr = self->_page.m_ptr;
  if (m_ptr)
    CFRetain(*((CFTypeRef *)m_ptr + 1));
  v20[4] = a5;
  v20[5] = v16 | v14;
  cf = self;
  CFRetain(self);
  if (m_ptr)
    CFRetain(*((CFTypeRef *)m_ptr + 1));
  v22 = m_ptr;
  objc_msgSend(a4, "addCompletion:", v20);
  if (m_ptr)
    CFRelease(*((CFTypeRef *)m_ptr + 1));
  CFRelease(self);
  v18 = v22;
  v22 = 0;
  if (v18)
    CFRelease(*((CFTypeRef *)v18 + 1));
  v19 = cf;
  cf = 0;
  if (v19)
    CFRelease(v19);
  CFRelease(self);
}

void __84__WKContentView_WKInteraction__dragInteraction_willAnimateLiftWithAnimator_session___block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  IntSize v8;
  IntPoint v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71078;
  v5 = os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT);
  if (a2 == 1)
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v11 = 134217984;
      v12 = v6;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "Drag session ended at start: %p", (uint8_t *)&v11, 0xCu);
    }
    objc_msgSend(*(id *)(a1 + 48), "cleanUpDragSourceSessionState");
    v7 = *(_QWORD *)(a1 + 56);
    v8 = (IntSize)(a1 + 40);
    LOBYTE(v11) = 0;
    v13 = 0;
    v9 = (IntPoint)&v11;
    WebKit::WebPageProxy::dragEnded(v7, v8, (_QWORD *)(a1 + 40), 0, v9);
  }
  else if (v5)
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = 134217984;
    v12 = v10;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "Drag session did not end at start: %p", (uint8_t *)&v11, 0xCu);
  }
}

- (void)dragInteraction:(id)a3 sessionWillBegin:(id)a4
{
  NSObject *v7;
  id v8;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 134217984;
    v10 = a4;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "Drag session beginning: %p", (uint8_t *)&v9, 0xCu);
  }
  v8 = -[WKContentView webViewUIDelegate](self, "webViewUIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v8, "_webView:dataInteraction:sessionWillBegin:", -[WKContentView webView](self, "webView"), a3, a4);
  objc_msgSend(self->_actionSheetAssistant.m_ptr, "cleanupSheet");
  LOBYTE(self->_dragDropInteractionState.m_lastGlobalPosition.x) = 1;
  WebKit::DragDropInteractionState::updatePreviewsForActiveDragSources((WebKit::DragDropInteractionState *)&self->_pendingRunModalJavaScriptDialogCallback);
  WebKit::WebPageProxy::didStartDrag((uint64_t)self->_page.m_ptr);
}

- (void)dragInteraction:(id)a3 session:(id)a4 didEndWithOperation:(unint64_t)a5
{
  NSObject *v9;
  int v10;
  int x_low;
  id v12;
  CompletionHandler<void ()> *p_pendingRunModalJavaScriptDialogCallback;
  WebPageProxy *m_ptr;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  IntSize v28;
  IntPoint v29;
  CGPoint v30;
  float v31[2];
  uint64_t v32;
  CGPoint v33;
  float v34[2];
  uint64_t v35;
  uint8_t buf[4];
  id v37;
  __int16 v38;
  unint64_t v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v9 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    v10 = BYTE1(self->_dragDropInteractionState.m_lastGlobalPosition.x);
    x_low = LOBYTE(self->_dragDropInteractionState.m_lastGlobalPosition.x);
    *(_DWORD *)buf = 134218752;
    v37 = a4;
    v38 = 2048;
    v39 = a5;
    v40 = 1024;
    v41 = v10;
    v42 = 1024;
    v43 = x_low;
    _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "Drag session ended: %p (with operation: %tu, performing operation: %d, began dragging: %d)", buf, 0x22u);
  }
  -[WKContentView _restoreEditMenuIfNeeded](self, "_restoreEditMenuIfNeeded");
  v12 = -[WKContentView webViewUIDelegate](self, "webViewUIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v12, "_webView:dataInteraction:session:didEndWithOperation:", -[WKContentView webView](self, "webView"), a3, a4, a5);
  p_pendingRunModalJavaScriptDialogCallback = &self->_pendingRunModalJavaScriptDialogCallback;
  if (!BYTE1(self->_dragDropInteractionState.m_lastGlobalPosition.x))
  {
    -[WKContentView cleanUpDragSourceSessionState](self, "cleanUpDragSourceSessionState");
    m_ptr = self->_page.m_ptr;
    v33 = *(CGPoint *)&p_pendingRunModalJavaScriptDialogCallback[2].m_function.m_callableWrapper.__ptr_.__value_;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v34, &v33);
    v15 = roundf(v34[0]);
    v16 = 0x7FFFFFFFLL;
    v17 = 0x80000000;
    if (v15 > -2147500000.0)
      v17 = (int)v15;
    if (v15 < 2147500000.0)
      v16 = v17;
    v18 = roundf(v34[1]);
    v19 = 0x7FFFFFFF00000000;
    v20 = 0x8000000000000000;
    if (v18 > -2147500000.0)
      v20 = (unint64_t)(int)v18 << 32;
    if (v18 < 2147500000.0)
      v19 = v20;
    v35 = v19 | v16;
    v30 = *(CGPoint *)&p_pendingRunModalJavaScriptDialogCallback[2].m_function.m_callableWrapper.__ptr_.__value_;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v31, &v30);
    v21 = roundf(v31[0]);
    v22 = 0x7FFFFFFFLL;
    v23 = 0x80000000;
    if (v21 > -2147500000.0)
      v23 = (int)v21;
    if (v21 < 2147500000.0)
      v22 = v23;
    v24 = roundf(v31[1]);
    v25 = 0x7FFFFFFF00000000;
    v26 = 0x8000000000000000;
    if (v24 > -2147500000.0)
      v26 = (unint64_t)(int)v24 << 32;
    if (v24 < 2147500000.0)
      v25 = v26;
    v32 = v25 | v22;
    if (a5 - 1 > 2)
      LOBYTE(v27) = 0;
    else
      v27 = qword_1978D2B80[a5 - 1];
    buf[0] = 0;
    BYTE2(v39) = 0;
    v28 = (IntSize)&v35;
    v29 = (IntPoint)buf;
    WebKit::WebPageProxy::dragEnded((uint64_t)m_ptr, v28, &v32, v27, v29);
  }
}

- (id)dragInteraction:(id)a3 previewForCancellingItem:(id)a4 withDefault:(id)a5
{
  id v8;
  id result;

  v8 = -[WKContentView webViewUIDelegate](self, "webViewUIDelegate", a3);
  if ((objc_opt_respondsToSelector() & 1) == 0)
    return (id)WebKit::DragDropInteractionState::previewForCancelling((WebKit::DragDropInteractionState *)&self->_pendingRunModalJavaScriptDialogCallback, (UIDragItem *)a4, &self->super.super, -[WKContentView unscaledView](self, "unscaledView"));
  result = (id)objc_msgSend(v8, "_webView:previewForCancellingItem:withDefault:", -[WKContentView webView](self, "webView"), a4, a5);
  if (!result)
    return (id)WebKit::DragDropInteractionState::previewForCancelling((WebKit::DragDropInteractionState *)&self->_pendingRunModalJavaScriptDialogCallback, (UIDragItem *)a4, &self->super.super, -[WKContentView unscaledView](self, "unscaledView"));
  return result;
}

- (void)dragInteraction:(id)a3 item:(id)a4 willAnimateCancelWithAnimator:(id)a5
{
  NSObject *v7;
  void *m_ptr;
  WebPageProxy *v9;
  WebPageProxy *v10;
  CFTypeRef v11;
  CFTypeRef v12;
  _QWORD v13[4];
  CFTypeRef v14;
  CFTypeRef cf;
  WebPageProxy *v16;
  uint8_t buf[16];

  LOBYTE(self->_dragDropInteractionState.m_finalDropPreviews.m_impl.var0.m_table) = 1;
  v7 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "Drag interaction willAnimateCancelWithAnimator", buf, 2u);
  }
  m_ptr = self->_dragDropInteractionState.m_dragSession.m_ptr;
  self->_dragDropInteractionState.m_dragSession.m_ptr = 0;
  objc_msgSend(m_ptr, "setAlpha:", 0.0);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3321888768;
  v13[2] = __83__WKContentView_WKInteraction__dragInteraction_item_willAnimateCancelWithAnimator___block_invoke;
  v13[3] = &__block_descriptor_56_e8_32c97_ZTSKZ83__WKContentView_WKInteraction__dragInteraction_item_willAnimateCancelWithAnimator__E4__83_e8_v16__0q8l;
  CFRetain(self);
  v9 = self->_page.m_ptr;
  if (v9)
    CFRetain(*((CFTypeRef *)v9 + 1));
  v14 = self;
  CFRetain(self);
  cf = m_ptr;
  if (m_ptr)
    CFRetain(m_ptr);
  if (v9)
    CFRetain(*((CFTypeRef *)v9 + 1));
  v16 = v9;
  objc_msgSend(a5, "addCompletion:", v13);
  if (v9)
    CFRelease(*((CFTypeRef *)v9 + 1));
  if (m_ptr)
    CFRelease(m_ptr);
  CFRelease(self);
  v10 = v16;
  v16 = 0;
  if (v10)
    CFRelease(*((CFTypeRef *)v10 + 1));
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = v14;
  v14 = 0;
  if (v12)
    CFRelease(v12);
}

uint64_t __83__WKContentView_WKInteraction__dragInteraction_item_willAnimateCancelWithAnimator___block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  uint8_t buf[16];

  v2 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "Drag interaction willAnimateCancelWithAnimator (animation completion block fired)", buf, 2u);
  }
  objc_msgSend(*(id *)(a1 + 40), "setAlpha:", 1.0);
  WebKit::WebPageProxy::dragCancelled(*(_QWORD *)(a1 + 48));
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  if (v3)
    CFRetain(*(CFTypeRef *)(a1 + 40));
  v5 = *(const void **)(a1 + 32);
  if (v5)
    CFRetain(v5);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E3507120;
  v6[1] = v3;
  v6[2] = v5;
  v8 = v6;
  WebKit::WebPageProxy::callAfterNextPresentationUpdate(v4, (uint64_t *)&v8);
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

- (void)dragInteraction:(id)a3 sessionDidTransferItems:(id)a4
{
  objc_msgSend((id)existingLocalDragSessionContext(a4), "cleanUpTemporaryDirectories");
}

- (void)dragInteraction:(id)a3 prepareDragSession:(id)a4 completion:(id)a5
{
  void *v8;
  _QWORD v9[4];
  void *aBlock;

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3321888768;
  v9[2] = __78__WKContentView_WKInteraction__dragInteraction_prepareDragSession_completion___block_invoke;
  v9[3] = &__block_descriptor_40_e8_32c92_ZTSKZ78__WKContentView_WKInteraction__dragInteraction_prepareDragSession_completion__E4__84_e5_v8__0l;
  v8 = _Block_copy(a5);
  aBlock = _Block_copy(v8);
  -[WKContentView _dragInteraction:prepareForSession:completion:](self, "_dragInteraction:prepareForSession:completion:", a3, a4, v9);
  _Block_release(v8);
  _Block_release(aBlock);
}

uint64_t __78__WKContentView_WKInteraction__dragInteraction_prepareDragSession_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (void)dragInteraction:(id)a3 itemsForAddingToSession:(id)a4 forTouchAtPoint:(CGPoint)a5 completion:(id)a6
{
  double y;
  double x;
  void *v11;
  _QWORD v12[4];
  void *aBlock;

  y = a5.y;
  x = a5.x;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3321888768;
  v12[2] = __99__WKContentView_WKInteraction__dragInteraction_itemsForAddingToSession_forTouchAtPoint_completion___block_invoke;
  v12[3] = &__block_descriptor_40_e8_32c113_ZTSKZ99__WKContentView_WKInteraction__dragInteraction_itemsForAddingToSession_forTouchAtPoint_completion__E4__85_e17_v16__0__NSArray_8l;
  v11 = _Block_copy(a6);
  aBlock = _Block_copy(v11);
  -[WKContentView _dragInteraction:itemsForAddingToSession:withTouchAtPoint:completion:](self, "_dragInteraction:itemsForAddingToSession:withTouchAtPoint:completion:", a3, a4, v12, x, y);
  _Block_release(v11);
  _Block_release(aBlock);
}

uint64_t __99__WKContentView_WKInteraction__dragInteraction_itemsForAddingToSession_forTouchAtPoint_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (int64_t)_dropInteraction:(id)a3 dataOwnerForSession:(id)a4
{
  id v6;

  v6 = -[WKContentView webViewUIDelegate](self, "webViewUIDelegate", a3);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(v6, "_webView:dataOwnerForDropSession:", -[WKContentView webView](self, "webView"), a4);
  else
    return 0;
}

- (BOOL)dropInteraction:(id)a3 canHandleSession:(id)a4
{
  id v5;
  NSObject *v6;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = -[WKContentView currentDragOrDropSession](self, "currentDragOrDropSession", a3);
  v6 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134218496;
    v9 = a4;
    v10 = 2048;
    v11 = objc_msgSend(a4, "localDragSession");
    v12 = 2048;
    v13 = v5;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "Can handle drag session: %p with local session: %p existing session: %p?", (uint8_t *)&v8, 0x20u);
  }
  return !v5 || objc_msgSend(a4, "localDragSession") == (_QWORD)v5;
}

- (void)dropInteraction:(id)a3 sessionDidEnter:(id)a4
{
  NSObject *v6;
  unint64_t v7;
  WebCore::Pasteboard *v8;
  WebPageProxy *m_ptr;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  StringImpl *v12;
  WTF::StringImpl *v13;
  DragData buf;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    buf.var0.m_x = 134218240;
    *(_QWORD *)&buf.var0.m_y = a4;
    LOWORD(buf.var1.m_y) = 2048;
    *(_QWORD *)((char *)&buf.var1.m_y + 2) = objc_msgSend((id)objc_msgSend(a4, "items"), "count");
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "Drop session entered: %p with %tu items", (uint8_t *)&buf, 0x16u);
  }
  v7 = -[WKContentView _dragDestinationActionForDropSession:](self, "_dragDestinationActionForDropSession:", a4);
  if (self)
    -[WKContentView dragDataForDropSession:dragDestinationAction:](self, "dragDataForDropSession:dragDestinationAction:", a4, v7);
  else
    memset(&buf, 0, sizeof(buf));
  WebKit::DragDropInteractionState::dropSessionDidEnterOrUpdate(&self->_pendingRunModalJavaScriptDialogCallback.m_function.m_callableWrapper.__ptr_.__value_, a4);
  v8 = (WebCore::Pasteboard *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance"), "setItemProviders:dropSession:", extractItemProvidersFromDragItems((void *)objc_msgSend(a4, "items")), a4);
  m_ptr = self->_page.m_ptr;
  WebCore::Pasteboard::nameOfDragPasteboard(v8);
  WebKit::WebPageProxy::dragEntered((WebKit::WebPageProxy *)m_ptr, &buf, &v13);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = buf.var8.m_impl.m_ptr;
  buf.var8.m_impl.m_ptr = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf.var5, v10);
}

- (id)dropInteraction:(id)a3 sessionDidUpdate:(id)a4
{
  DragData *v6;
  WebPageProxy *m_ptr;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  id v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v24;
  CGFloat v25;
  const void *v26;
  const void *v27;
  WTF::StringImpl *v28;
  CFTypeRef v29;
  StringImpl *v30;
  WTF::StringImpl *v32[2];
  DragData v33;
  CGPoint v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance", a3), "setItemProviders:dropSession:", extractItemProvidersFromDragItems((void *)objc_msgSend(a4, "items")), a4);
  v6 = -[WKContentView _dragDestinationActionForDropSession:](self, "_dragDestinationActionForDropSession:", a4);
  if (self)
    v6 = -[WKContentView dragDataForDropSession:dragDestinationAction:](self, "dragDataForDropSession:dragDestinationAction:", a4, v6);
  else
    memset(&v33, 0, sizeof(v33));
  m_ptr = self->_page.m_ptr;
  WebCore::Pasteboard::nameOfDragPasteboard((WebCore::Pasteboard *)v6);
  WebKit::WebPageProxy::dragUpdated((WebKit::WebPageProxy *)m_ptr, &v33, v32);
  v9 = v32[0];
  v32[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebKit::DragDropInteractionState::dropSessionDidEnterOrUpdate(&self->_pendingRunModalJavaScriptDialogCallback.m_function.m_callableWrapper.__ptr_.__value_, a4);
  v10 = -[WKContentView webViewUIDelegate](self, "webViewUIDelegate", v32[0]);
  v11 = *(_WORD *)((char *)self->_page.m_ptr + 841);
  v12 = 2 * (v11 == 1);
  v13 = v11 == 16;
  v14 = 3;
  if (!v13)
    v14 = v12;
  if (*(unsigned __int16 *)((char *)self->_page.m_ptr + 841) >= 0x100u)
    v15 = v14;
  else
    v15 = 0;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v15 = objc_msgSend(v10, "_webView:willUpdateDataInteractionOperationToOperation:forSession:", -[WKContentView webView](self, "webView"), v15, a4);
  v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA590]), "initWithDropOperation:", v15);
  v17 = v16;
  if (*(unsigned __int8 *)(*((_QWORD *)self->_page.m_ptr + 4) + 2040) - 1 > 1)
  {
    objc_msgSend(v16, "setPrecise:", 0);
  }
  else
  {
    objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "scrollView"), "zoomScale");
    v19 = v18;
    *(_OWORD *)v32 = *(_OWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 2008);
    WebCore::IntRect::operator CGRect();
    v36 = CGRectInset(v35, 0.0, 25.0 / v19);
    x = v36.origin.x;
    y = v36.origin.y;
    width = v36.size.width;
    height = v36.size.height;
    objc_msgSend(a4, "locationInView:", self);
    v34.x = v24;
    v34.y = v25;
    v37.origin.x = x;
    v37.origin.y = y;
    v37.size.width = width;
    v37.size.height = height;
    objc_msgSend(v17, "setPrecise:", CGRectContainsPoint(v37, v34));
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v26 = (const void *)objc_msgSend(v10, "_webView:willUpdateDropProposalToProposal:forSession:", -[WKContentView webView](self, "webView"), v17, a4);
    v27 = v26;
    if (v26)
      CFRetain(v26);
    if (v17)
      CFRelease(v17);
  }
  else
  {
    v27 = v17;
  }
  v29 = (id)CFMakeCollectable(v27);
  v30 = v33.var8.m_impl.m_ptr;
  v33.var8.m_impl.m_ptr = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v30, v28);
    else
      *(_DWORD *)v30 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33.var5, v28);
  return (id)v29;
}

- (void)dropInteraction:(id)a3 sessionDidExit:(id)a4
{
  NSObject *v6;
  WebPageProxy *m_ptr;
  WTF::StringImpl *v8;
  CGFloat x;
  WTF::StringImpl *v10;
  _BYTE v11[24];
  _DWORD buf[8];
  _OWORD v13[2];
  WTF::StringImpl *v14[2];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 134218240;
    *(_QWORD *)&buf[1] = a4;
    LOWORD(buf[3]) = 2048;
    *(_QWORD *)((char *)&buf[3] + 2) = objc_msgSend((id)objc_msgSend(a4, "items"), "count");
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "Drop session exited: %p with %tu items", (uint8_t *)buf, 0x16u);
  }
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance"), "setItemProviders:dropSession:", extractItemProvidersFromDragItems((void *)objc_msgSend(a4, "items")), a4);
  if (self)
  {
    -[WKContentView dragDataForDropSession:dragDestinationAction:](self, "dragDataForDropSession:dragDestinationAction:", a4, -1);
  }
  else
  {
    v15 = 0;
    *(_OWORD *)v14 = 0u;
    memset(v13, 0, sizeof(v13));
    memset(buf, 0, sizeof(buf));
  }
  m_ptr = self->_page.m_ptr;
  v11[0] = 0;
  v11[16] = 0;
  WebKit::WebPageProxy::performDragControllerAction((uint64_t)m_ptr, 2, (uint64_t)buf, (uint64_t)v11);
  WebKit::WebPageProxy::resetCurrentDragInformation((WebKit::WebPageProxy *)self->_page.m_ptr);
  x = self->_dragDropInteractionState.m_adjustedPositionForDragEnd.x;
  self->_dragDropInteractionState.m_adjustedPositionForDragEnd.x = 0.0;
  if (x != 0.0)
    CFRelease(*(CFTypeRef *)&x);
  v10 = v14[1];
  v14[1] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v8);
}

- (void)dropInteraction:(id)a3 performDrop:(id)a4
{
  void *ItemProvidersFromDragItems;
  id v7;
  BOOL v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  const void *v18;
  WTF::StringImpl *v19;
  CFTypeRef v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _QWORD v23[4];
  CFTypeRef cf;
  _OWORD v25[2];
  _OWORD v26[2];
  char v27;
  WTF::StringImpl *v28;
  char v29;
  BOOL v30;
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  WTF::StringImpl *v36;
  char v37;
  _BYTE buf[34];
  _QWORD v39[2];
  __int128 v40;
  char v41;
  WTF::StringImpl *v42;
  char v43;
  BOOL v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  ItemProvidersFromDragItems = extractItemProvidersFromDragItems((void *)objc_msgSend(a4, "items", a3));
  v7 = -[WKContentView webViewUIDelegate](self, "webViewUIDelegate");
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (objc_msgSend(v7, "_webView:performDataInteractionOperationWithItemProviders:", -[WKContentView webView](self, "webView"), ItemProvidersFromDragItems) & 1) == 0)
  {
    if ((objc_opt_respondsToSelector() & 1) == 0
      || (ItemProvidersFromDragItems = extractItemProvidersFromDragItems((void *)objc_msgSend(v7, "_webView:willPerformDropWithSession:", -[WKContentView webView](self, "webView"), a4)), objc_msgSend(ItemProvidersFromDragItems, "count")))
    {
      BYTE1(self->_dragDropInteractionState.m_lastGlobalPosition.x) = 1;
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance"), "setItemProviders:dropSession:", ItemProvidersFromDragItems, a4);
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance"), "incrementPendingOperationCount");
      -[WKContentView dragDataForDropSession:dragDestinationAction:](self, "dragDataForDropSession:dragDestinationAction:", a4, -1);
      v8 = -[WKContentView _handleDropByInsertingImagePlaceholders:session:](self, "_handleDropByInsertingImagePlaceholders:session:", ItemProvidersFromDragItems, a4);
      v9 = qword_1ECE71078;
      if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
      {
        v10 = objc_msgSend(ItemProvidersFromDragItems, "count");
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v10;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a4;
        _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "Loading data from %tu item providers for session: %p", buf, 0x16u);
      }
      CFRetain(self);
      v11 = (void *)objc_msgSend(MEMORY[0x1E0DD9760], "sharedInstance");
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3321888768;
      v23[2] = __60__WKContentView_WKInteraction__dropInteraction_performDrop___block_invoke;
      v23[3] = &__block_descriptor_136_e8_32c74_ZTSKZ60__WKContentView_WKInteraction__dropInteraction_performDrop__E4__86_e17_v16__0__NSArray_8l;
      *(_QWORD *)buf = self;
      CFRetain(self);
      *(_OWORD *)&buf[8] = v31[0];
      *(_OWORD *)&buf[18] = *(_OWORD *)((char *)v31 + 10);
      v39[0] = v32;
      v12 = v33;
      v32 = 0;
      v33 = 0;
      v39[1] = v12;
      v40 = v34;
      v41 = v35;
      v13 = v36;
      v36 = 0;
      v42 = v13;
      v43 = v37;
      v44 = !v8;
      cf = *(CFTypeRef *)buf;
      if (*(_QWORD *)buf)
        CFRetain(*(CFTypeRef *)buf);
      v25[0] = *(_OWORD *)&buf[8];
      *(_OWORD *)((char *)v25 + 10) = *(_OWORD *)&buf[18];
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v26, (uint64_t)v39);
      v26[1] = v40;
      v27 = v41;
      v14 = v42;
      if (v42)
        *(_DWORD *)v42 += 2;
      v28 = v14;
      v29 = v43;
      v30 = v44;
      objc_msgSend(v11, "doAfterLoadingProvidedContentIntoFileURLs:", v23);
      v16 = v42;
      v42 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v15);
      v18 = *(const void **)buf;
      *(_QWORD *)buf = 0;
      if (v18)
        CFRelease(v18);
      v19 = v28;
      v28 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v17);
        else
          *(_DWORD *)v19 -= 2;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v17);
      v20 = cf;
      cf = 0;
      if (v20)
        CFRelease(v20);
      CFRelease(self);
      v22 = v36;
      v36 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v21);
        else
          *(_DWORD *)v22 -= 2;
      }
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v21);
    }
  }
}

uint64_t __60__WKContentView_WKInteraction__dropInteraction_performDrop___block_invoke(uint64_t a1, void *a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  _QWORD *v18;
  void *v19;
  WTF::StringImpl *v20;
  void *v21;
  WTF::StringImpl *v23;
  _QWORD v24[2];
  const char **v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t buf[4];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v33 = objc_msgSend(a2, "count");
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "Loaded data into %tu files", buf, 0xCu);
  }
  v30 = 0;
  v31 = 0;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v26, buf, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v27;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v27 != v7)
          objc_enumerationMutation(a2);
        v24[0] = objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * v8), "path");
        if (HIDWORD(v31) == (_DWORD)v31)
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,NSString *&>((uint64_t)&v30, v24);
        }
        else
        {
          MEMORY[0x19AEABCC8](v30 + 8 * HIDWORD(v31));
          ++HIDWORD(v31);
        }
        ++v8;
      }
      while (v6 != v8);
      v9 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v26, buf, 16);
      v6 = v9;
    }
    while (v9);
  }
  v10 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v10)
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(a1 + 72), (WTF::StringImpl *)(*(_QWORD *)(a1 + 72) + 8 * v10));
  v11 = *(WTF **)(a1 + 72);
  if (v11)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    v11 = (WTF *)WTF::fastFree(v11, v5);
  }
  *(_QWORD *)(a1 + 72) = v30;
  v12 = v31;
  v30 = 0;
  v31 = 0;
  *(_QWORD *)(a1 + 80) = v12;
  v24[1] = 0;
  v25 = 0;
  v24[0] = 0;
  WebCore::Pasteboard::nameOfDragPasteboard(v11);
  WebKit::WebPageProxy::createSandboxExtensionsIfNeeded(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 440), (uint64_t)&v30, &v25, (uint64_t)v24);
  WebKit::WebPageProxy::performDragOperation(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 440), a1 + 40, &v23, (uint64_t)&v25, (uint64_t)v24);
  if (*(_BYTE *)(a1 + 128))
  {
    v14 = (const void *)objc_msgSend(*(id *)(a1 + 32), "snapshotViewAfterScreenUpdates:", 0);
    v15 = v14;
    v16 = *(_QWORD *)(a1 + 32);
    if (v14)
      CFRetain(v14);
    v17 = *(const void **)(v16 + 3560);
    *(_QWORD *)(v16 + 3560) = v15;
    if (v17)
      CFRelease(v17);
    v18 = *(_QWORD **)(a1 + 32);
    v19 = (void *)v18[445];
    objc_msgSend(v18, "bounds");
    objc_msgSend(v19, "setFrame:");
    objc_msgSend(*(id *)(a1 + 32), "addSubview:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 3560));
  }
  v20 = v23;
  v23 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v13);
    else
      *(_DWORD *)v20 -= 2;
  }
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v13);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v25);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v21);
}

- (void)dropInteraction:(id)a3 item:(id)a4 willAnimateDropWithAnimator:(id)a5
{
  CFTypeRef v7;
  _QWORD v8[4];
  CFTypeRef cf;

  ++*(_QWORD *)&self->_commitPotentialTapPointerId;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3321888768;
  v8[2] = __81__WKContentView_WKInteraction__dropInteraction_item_willAnimateDropWithAnimator___block_invoke;
  v8[3] = &__block_descriptor_40_e8_32c95_ZTSKZ81__WKContentView_WKInteraction__dropInteraction_item_willAnimateDropWithAnimator__E4__87_e8_v16__0q8l;
  CFRetain(self);
  cf = self;
  CFRetain(self);
  objc_msgSend(a5, "addCompletion:", v8);
  CFRelease(self);
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
}

void __81__WKContentView_WKInteraction__dropInteraction_item_willAnimateDropWithAnimator___block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 3008) - 1;
  *(_QWORD *)(v1 + 3008) = v2;
  if (!v2)
  {
    v3 = *(void **)(v1 + 3568);
    *(_QWORD *)(v1 + 3568) = 0;
    objc_msgSend(v3, "removeFromSuperview");
    if (v3)
      CFRelease(v3);
  }
}

- (void)dropInteraction:(id)a3 concludeDrop:(id)a4
{
  void *v5;
  void *m_ptr;
  WebPageProxy *v7;
  uint64_t v8;
  char v9;

  -[WKContentView _removeContainerForDropPreviews](self, "_removeContainerForDropPreviews", a3, a4);
  v5 = *(void **)self->_anon_dc8;
  *(_QWORD *)self->_anon_dc8 = 0;
  objc_msgSend(v5, "removeFromSuperview");
  if (v5)
    CFRelease(v5);
  m_ptr = self->_dragInteraction.m_ptr;
  self->_dragInteraction.m_ptr = 0;
  objc_msgSend(m_ptr, "removeFromSuperview");
  if (m_ptr)
    CFRelease(m_ptr);
  v7 = self->_page.m_ptr;
  v8 = *((_QWORD *)v7 + 26);
  v9 = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidConcludeDrop>(v8, (uint64_t)&v9, *(_QWORD *)(*((_QWORD *)v7 + 4) + 1896), 0);
}

- (id)dropInteraction:(id)a3 previewForDroppingItem:(id)a4 withDefault:(id)a5
{
  CompletionHandler<void ()> *p_pendingRunModalJavaScriptDialogCallback;
  CFTypeRef v9;
  double x;
  double y;
  double width;
  double height;
  id v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  double MidX;
  double MidY;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;
  __int128 v26;
  const void *v27;
  _OWORD v29[4];
  CGRect v30;
  CGRect v31;
  CGRect v32;

  p_pendingRunModalJavaScriptDialogCallback = &self->_pendingRunModalJavaScriptDialogCallback;
  v9 = WebKit::DragDropInteractionState::finalDropPreview((WebKit::DragDropInteractionState *)&self->_pendingRunModalJavaScriptDialogCallback, (UIDragItem *)a4);
  if (!v9)
  {
    WebKit::DragDropInteractionState::addDefaultDropPreview((WebKit::DragDropInteractionState *)p_pendingRunModalJavaScriptDialogCallback, a4, (UITargetedDragPreview *)a5);
    v29[3] = *(_OWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 2024);
    WebCore::IntRect::operator CGRect();
    x = v30.origin.x;
    y = v30.origin.y;
    width = v30.size.width;
    height = v30.size.height;
    if (CGRectIsEmpty(v30))
    {
      return 0;
    }
    else
    {
      v14 = -[WKContentView textEffectsWindow](self, "textEffectsWindow");
      -[WKContentView convertRect:toCoordinateSpace:](self, "convertRect:toCoordinateSpace:", v14, x, y, width, height);
      v15 = v31.origin.x;
      v16 = v31.origin.y;
      v17 = v31.size.width;
      v18 = v31.size.height;
      MidX = CGRectGetMidX(v31);
      v32.origin.x = v15;
      v32.origin.y = v16;
      v32.size.width = v17;
      v32.size.height = v18;
      MidY = CGRectGetMidY(v32);
      objc_msgSend(a5, "size");
      v22 = MidX + v21 * 0.5;
      objc_msgSend(a5, "size");
      v24 = MidY + v23 * 0.5;
      v25 = objc_alloc(MEMORY[0x1E0CEA570]);
      v26 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      v29[0] = *MEMORY[0x1E0C9BAA8];
      v29[1] = v26;
      v29[2] = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      v27 = (const void *)objc_msgSend(v25, "initWithContainer:center:transform:", v14, v29, v22, v24);
      v9 = (CFTypeRef)objc_msgSend(a5, "retargetedPreviewWithTarget:", v27);
      if (v27)
        CFRelease(v27);
    }
  }
  return (id)v9;
}

- (void)dropInteraction:(id)a3 sessionDidEnd:(id)a4
{
  NSObject *v6;
  int v7;
  int x_low;
  WebPageProxy *m_ptr;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  IntSize v22;
  IntPoint v23;
  float v24[2];
  uint64_t v25;
  float v26[2];
  uint64_t v27;
  CGPoint v28;
  CGPoint v29;
  uint8_t buf[4];
  id v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71078;
  if (os_log_type_enabled((os_log_t)qword_1ECE71078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = BYTE1(self->_dragDropInteractionState.m_lastGlobalPosition.x);
    x_low = LOBYTE(self->_dragDropInteractionState.m_lastGlobalPosition.x);
    *(_DWORD *)buf = 134218496;
    v31 = a4;
    v32 = 1024;
    v33 = v7;
    v34 = 1024;
    v35 = x_low;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "Drop session ended: %p (performing operation: %d, began dragging: %d)", buf, 0x18u);
  }
  if (!BYTE1(self->_dragDropInteractionState.m_lastGlobalPosition.x)
    && !LOBYTE(self->_dragDropInteractionState.m_lastGlobalPosition.x))
  {
    -[WKContentView computeClientAndGlobalPointsForDropSession:outClientPoint:outGlobalPoint:](self, "computeClientAndGlobalPointsForDropSession:outClientPoint:outGlobalPoint:", a4, &v28, &v29);
    -[WKContentView cleanUpDragSourceSessionState](self, "cleanUpDragSourceSessionState");
    m_ptr = self->_page.m_ptr;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v26, &v28);
    v10 = roundf(v26[0]);
    v11 = 0x7FFFFFFFLL;
    v12 = (int)v10;
    if (v10 <= -2147500000.0)
      v12 = 0x80000000;
    if (v10 < 2147500000.0)
      v11 = v12;
    v13 = roundf(v26[1]);
    v14 = 0x7FFFFFFF00000000;
    v15 = 0x8000000000000000;
    if (v13 > -2147500000.0)
      v15 = (unint64_t)(int)v13 << 32;
    if (v13 < 2147500000.0)
      v14 = v15;
    v27 = v14 | v11;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v24, &v29);
    v16 = roundf(v24[0]);
    v17 = 0x7FFFFFFFLL;
    v18 = 0x80000000;
    if (v16 > -2147500000.0)
      v18 = (int)v16;
    if (v16 < 2147500000.0)
      v17 = v18;
    v19 = roundf(v24[1]);
    v20 = 0x7FFFFFFF00000000;
    v21 = 0x8000000000000000;
    if (v19 > -2147500000.0)
      v21 = (unint64_t)(int)v19 << 32;
    if (v19 < 2147500000.0)
      v20 = v21;
    v25 = v20 | v17;
    buf[0] = 0;
    BYTE2(v33) = 0;
    v22 = (IntSize)&v27;
    v23 = (IntPoint)buf;
    WebKit::WebPageProxy::dragEnded((uint64_t)m_ptr, v22, &v25, 0, v23);
  }
}

- (void)cancelActiveTextInteractionGestures
{
  objc_msgSend(-[WKContentView textInteractionLoupeGestureRecognizer](self, "textInteractionLoupeGestureRecognizer"), "_wk_cancel");
}

- (id)textEffectsWindow
{
  return (id)objc_msgSend(MEMORY[0x1E0CEAAC8], "sharedTextEffectsWindowForWindowScene:", objc_msgSend((id)-[WKContentView window](self, "window"), "windowScene"));
}

- (id)_autofillContext
{
  id v3;
  uint64_t v5;
  const __CFString *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (!-[WKContentView _hasFocusedElement](self, "_hasFocusedElement"))
    return 0;
  v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", &unk_1E356FE80, CFSTR("_WKAutofillContextVersion"));
  if (self->_textInteractionDidChangeFocusedElement && self->_anon_938[113] == 3)
  {
    objc_msgSend(v3, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("_automaticPasswordKeyboard"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", self->_domPasteRequestHandler.m_function.m_callableWrapper.__ptr_.__value_, CFSTR("strongPasswordAdditionalContext"));
  }
  else if (self->_anon_938[176])
  {
    objc_msgSend(v3, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("_acceptsLoginCredentials"));
  }
  v5 = WTF::URL::operator NSURL *();
  if (v5)
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v5, CFSTR("_WebViewURL"));
  if (self->_anon_938[225])
  {
    objc_msgSend(v3, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 1896)), CFSTR("_page_id"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *(_QWORD *)&self->_anon_938[328]), CFSTR("_frame_id"));
    WebCore::nonAutofillCredentialTypeString();
    if (v8)
      v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v6 = &stru_1E351F1B8;
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v6, CFSTR("_credential_type"));
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  return (id)(id)CFMakeCollectable(v3);
}

- (id)_createTargetedContextMenuHintPreviewForFocusedElement:(unsigned __int8)a3
{
  int v3;
  FocusedElementInformation *p_focusedElementInformation;
  unsigned int v6;
  BOOL v7;
  int v8;
  uint64_t v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  const WebCore::FloatRect *v22;
  FloatSize m_size;
  id result;
  void *m_ptr;
  __int128 v26;
  char m_width_low;
  CGRect v28;
  FloatRect v29;
  void *v30;
  int v31;
  IntRect interactionRect;

  v3 = a3;
  p_focusedElementInformation = &self->_focusedElementInformation;
  v6 = self->_anon_938[113];
  v7 = v6 > 0xF;
  v8 = (1 << v6) & 0xB800;
  if (v7 || v8 == 0)
    v10 = 0;
  else
    v10 = objc_msgSend(MEMORY[0x1E0CEA478], "clearColor");
  interactionRect = p_focusedElementInformation->interactionRect;
  if (v3 != 1)
    goto LABEL_22;
  -[WKContentView unobscuredContentRect](self, "unobscuredContentRect");
  v28.origin.x = v11;
  v28.origin.y = v12;
  v28.size.width = v13;
  v28.size.height = v14;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v29, &v28);
  WebCore::IntRect::IntRect((WebCore::IntRect *)&v30, &v29);
  v15 = interactionRect.m_location.m_x - 250;
  v16 = interactionRect.m_size.m_width + interactionRect.m_location.m_x;
  v17 = interactionRect.m_size.m_width + interactionRect.m_location.m_x + 250;
  v18 = (int)v30;
  v19 = v31 + (_DWORD)v30;
  v20 = -[WKContentView effectiveUserInterfaceLayoutDirection](self, "effectiveUserInterfaceLayoutDirection");
  if (v20 == 1)
  {
    if (v15 <= v18)
      v21 = v16;
    else
      v21 = v15;
    if (v15 > v18 || v17 <= v19)
      goto LABEL_21;
  }
  else if (!v20)
  {
    v21 = v17 > v19 ? v15 : v16;
    if (v17 <= v19 || v15 > v18)
    {
LABEL_21:
      interactionRect.m_location.m_x = v21 + 20;
      interactionRect.m_size.m_width = 1;
    }
  }
LABEL_22:
  v22 = -[WKContentView containerForContextMenuHintPreviews](self, "containerForContextMenuHintPreviews");
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v28, (const WebCore::IntRect *)&interactionRect);
  createFallbackTargetedPreview((UIView *)&v30, &self->super.super, v22, (UIColor *)&v28, v10);
  m_size = p_focusedElementInformation[5].elementContext.boundingRect.m_size;
  if (m_size)
  {
    v26 = *(_OWORD *)&p_focusedElementInformation[5].elementContext.boundingRect.m_size.m_width;
    LOBYTE(m_size.m_width) = 1;
  }
  else
  {
    LOBYTE(v26) = 0;
  }
  m_width_low = LOBYTE(m_size.m_width);
  -[WKContentView _updateTargetedPreviewScrollViewUsingContainerScrollingNodeID:](self, "_updateTargetedPreviewScrollViewUsingContainerScrollingNodeID:", &v26);
  result = v30;
  m_ptr = self->_contextMenuInteractionTargetedPreview.m_ptr;
  self->_contextMenuInteractionTargetedPreview.m_ptr = v30;
  if (m_ptr)
  {
    CFRelease(m_ptr);
    return self->_contextMenuInteractionTargetedPreview.m_ptr;
  }
  return result;
}

- (BOOL)positionInformationHasImageOverlayDataDetector
{
  return self->_positionInformation.isImageOverlayText
      && objc_msgSend(self->_positionInformation.dataDetectorResults.m_ptr, "count") != 0;
}

- (id)_createTargetedContextMenuHintPreviewIfPossible
{
  InteractionInformationAtPosition *p_positionInformation;
  optional<WebCore::TextIndicatorData> *p_positionInformationLinkIndicator;
  WebCore::DestinationColorSpace *v5;
  ShareableBitmap *v6;
  const void *v7;
  id v8;
  void *v9;
  CFTypeRef v10;
  Image *m_ptr;
  uint64_t v12;
  id v13;
  void *v14;
  Class isa;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  id v23;
  uint64_t v24;
  void *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  WTF *v29;
  Image *v30;
  Image *v31;
  Image *v32;
  FloatRect *m_buffer;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  FloatSize v37;
  const WebCore::FloatRect *v38;
  char v39;
  Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>::MarkableTraits> *p_containerScrollingNodeID;
  unint64_t m_identifier;
  void *v42;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  Markable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>, WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType, WTF::ObjectIdentifierMainThreadAccessTraits<uint64_t>, unsigned long long>>::MarkableTraits> v51;
  char v52;
  UIColor v53;
  uint64_t v54;
  void *v55;
  CFTypeRef cf;
  _QWORD v57[2];
  CFTypeRef (*v58)(uint64_t, const Color *);
  void *v59;
  uint64_t v60;
  WTF *v61;
  int v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  TextIndicatorData v67;

  p_positionInformation = &self->_positionInformation;
  if (self->_positionInformation.isLink && self->_positionInformation.linkIndicator.contentImage.m_ptr)
  {
    WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)&v67, &self->_positionInformation.linkIndicator);
    p_positionInformationLinkIndicator = &self->_positionInformationLinkIndicator;
    if (self->_positionInformationLinkIndicator.__engaged_)
    {
      v5 = (WebCore::DestinationColorSpace *)WebCore::TextIndicatorData::operator=((uint64_t)p_positionInformationLinkIndicator, (__int128 *)&v67);
    }
    else
    {
      v5 = WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)p_positionInformationLinkIndicator, &v67);
      *((_BYTE *)v5 + 112) = 1;
    }
    m_ptr = v67.contentImage.m_ptr;
    if (v67.contentImage.m_ptr)
    {
      v12 = WebCore::DestinationColorSpace::SRGB(v5);
      (*(void (**)(UIColor *__return_ptr, Image *, uint64_t))(*(_QWORD *)m_ptr + 288))(&v53, m_ptr, v12);
      if (v53.super.isa)
      {
        v13 = objc_alloc(MEMORY[0x1E0CEA638]);
        m_ptr = (Image *)objc_msgSend(v13, "initWithCGImage:", *(_QWORD *)WebCore::NativeImage::platformImage(v53.super.isa));
        isa = v53.super.isa;
        v53.super.isa = 0;
        if (isa)
        {
          v16 = *((_QWORD *)isa + 1);
          if (__ldaxr((unsigned __int8 *)v16))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v16))
          {
            goto LABEL_21;
          }
          MEMORY[0x19AEABB3C](v16);
LABEL_21:
          v18 = *(_QWORD *)(v16 + 8);
          v19 = v18 - 1;
          *(_QWORD *)(v16 + 8) = v18 - 1;
          if (v18 == 1)
          {
            v50 = *(_QWORD *)(v16 + 16);
            v20 = *(_QWORD *)(v16 + 24);
            *(_QWORD *)(v16 + 24) = 0;
            v21 = v50 != 0;
          }
          else
          {
            v20 = 0;
            v21 = 1;
          }
          v22 = __ldxr((unsigned __int8 *)v16);
          if (v22 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v16))
            {
LABEL_28:
              if (!v19)
              {
                if (v20)
                  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
                if (!v21)
                  WTF::fastFree((WTF *)v16, v14);
              }
              goto LABEL_33;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v16);
          goto LABEL_28;
        }
      }
      else
      {
        m_ptr = 0;
      }
    }
LABEL_33:
    v23 = -[WKContentView containerForContextMenuHintPreviews](self, "containerForContextMenuHintPreviews");
    v57[0] = MEMORY[0x1E0C809B0];
    v57[1] = 3321888768;
    v58 = __79__WKContentView_WKInteraction___createTargetedContextMenuHintPreviewIfPossible__block_invoke;
    v59 = &__block_descriptor_144_e8_32c33_ZTSN7WebCore17TextIndicatorDataE_e14___UIColor_8__0l;
    WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)&v60, &v67);
    v24 = ((uint64_t (*)(_QWORD *))v58)(v57);
    createTargetedPreview(&v53, (uint64_t)m_ptr, self, v23, (uint64_t)&v67.textBoundingRectInRootViewCoordinates, (uint64_t)&v67.textRectsInBoundingRectCoordinates, v24);
    v9 = v53.super.isa;
    if ((v66 & 0x8000000000000) != 0)
    {
      v44 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        atomic_store(1u, v44);
        WTF::fastFree((WTF *)v44, v25);
      }
    }
    v26 = v65;
    v65 = 0;
    if (v26)
    {
      if (v26[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
      else
        --v26[2];
    }
    v27 = v64;
    v64 = 0;
    if (v27)
    {
      if (v27[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
      else
        --v27[2];
    }
    v28 = v63;
    v63 = 0;
    if (v28)
    {
      if (v28[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
      else
        --v28[2];
    }
    v29 = v61;
    if (v61)
    {
      v61 = 0;
      v62 = 0;
      WTF::fastFree(v29, v25);
    }
    if (m_ptr)
      CFRelease(m_ptr);
    if ((v67.estimatedBackgroundColor.m_colorAndFlags & 0x8000000000000) != 0)
    {
      v47 = (unsigned int *)(v67.estimatedBackgroundColor.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, v25);
      }
    }
    v30 = v67.contentImage.m_ptr;
    v67.contentImage.m_ptr = 0;
    if (v30)
    {
      if (*((_DWORD *)v30 + 2) == 1)
        (*(void (**)(Image *))(*(_QWORD *)v30 + 8))(v30);
      else
        --*((_DWORD *)v30 + 2);
    }
    v31 = v67.contentImageWithoutSelection.m_ptr;
    v67.contentImageWithoutSelection.m_ptr = 0;
    if (v31)
    {
      if (*((_DWORD *)v31 + 2) == 1)
        (*(void (**)(Image *))(*(_QWORD *)v31 + 8))(v31);
      else
        --*((_DWORD *)v31 + 2);
    }
    v32 = v67.contentImageWithHighlight.m_ptr;
    v67.contentImageWithHighlight.m_ptr = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 2) == 1)
        (*(void (**)(Image *))(*(_QWORD *)v32 + 8))(v32);
      else
        --*((_DWORD *)v32 + 2);
    }
    m_buffer = v67.textRectsInBoundingRectCoordinates.m_buffer;
    if (v67.textRectsInBoundingRectCoordinates.m_buffer)
    {
      v67.textRectsInBoundingRectCoordinates.m_buffer = 0;
      v67.textRectsInBoundingRectCoordinates.m_capacity = 0;
      WTF::fastFree((WTF *)m_buffer, v25);
    }
    goto LABEL_65;
  }
  if (self->_positionInformation.isAttachment || self->_positionInformation.isImage)
  {
    v6 = self->_positionInformation.image.m_ptr;
    if (v6)
    {
      WebCore::ShareableBitmap::makeCGImageCopy((WebCore::ShareableBitmap *)v6);
      v7 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA638]), "initWithCGImage:", cf);
      v8 = -[WKContentView containerForContextMenuHintPreviews](self, "containerForContextMenuHintPreviews");
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v67, (const WebCore::IntRect *)&p_positionInformation->bounds);
      v53.super.isa = 0;
      v54 = 0;
      createTargetedPreview(&v55, (uint64_t)v7, self, v8, (uint64_t)&v67, (uint64_t)&v53, 0);
      v9 = v55;
      if (v7)
        CFRelease(v7);
      v10 = cf;
      cf = 0;
      if (v10)
        CFRelease(v10);
LABEL_65:
      if (v9)
        goto LABEL_71;
    }
  }
  v34 = -[WKContentView positionInformationHasImageOverlayDataDetector](self, "positionInformationHasImageOverlayDataDetector");
  v35 = 176;
  if (v34)
    v35 = 408;
  v36 = 184;
  if (v34)
    v36 = 416;
  v37 = *(FloatSize *)((char *)&p_positionInformation->request.point + v36);
  v67.selectionRectInRootViewCoordinates.m_location = *(FloatPoint *)((char *)&p_positionInformation->request.point + v35);
  v67.selectionRectInRootViewCoordinates.m_size = v37;
  v38 = -[WKContentView containerForContextMenuHintPreviews](self, "containerForContextMenuHintPreviews");
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v53, (const WebCore::IntRect *)&v67);
  createFallbackTargetedPreview((UIView *)&cf, &self->super.super, v38, &v53, 0);
  v9 = (void *)cf;
LABEL_71:
  m_identifier = p_positionInformation->containerScrollingNodeID.m_value.m_object.m_identifier;
  p_containerScrollingNodeID = &p_positionInformation->containerScrollingNodeID;
  v39 = m_identifier;
  if (m_identifier)
  {
    v51 = *p_containerScrollingNodeID;
    v39 = 1;
  }
  else
  {
    LOBYTE(v51.m_value.m_object.m_identifier) = 0;
  }
  v52 = v39;
  -[WKContentView _updateTargetedPreviewScrollViewUsingContainerScrollingNodeID:](self, "_updateTargetedPreviewScrollViewUsingContainerScrollingNodeID:", &v51);
  v42 = self->_contextMenuInteractionTargetedPreview.m_ptr;
  self->_contextMenuInteractionTargetedPreview.m_ptr = v9;
  if (v42)
  {
    CFRelease(v42);
    return self->_contextMenuInteractionTargetedPreview.m_ptr;
  }
  return v9;
}

CFTypeRef __79__WKContentView_WKInteraction___createTargetedContextMenuHintPreviewIfPossible__block_invoke(uint64_t a1, const Color *a2)
{
  WebCore *v2;
  uint64_t v3;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 128);
  v2 = (WebCore *)(a1 + 128);
  if (v3 == 0x1104000000000000)
    return (CFTypeRef)objc_msgSend(MEMORY[0x1E0CEA478], "systemBackgroundColor");
  WebCore::cocoaColor(v2, a2);
  return (id)CFMakeCollectable(cf);
}

- (void)_removeContextMenuHintContainerIfPossible
{
  if (!self->_contextMenuElementInfo.m_ptr
    && !self->_isDisplayingContextMenuWithAnimation
    && (objc_msgSend(self->_actionSheetAssistant.m_ptr, "hasContextMenuInteraction") & 1) == 0
    && !self->_fileUploadPanel.m_ptr
    && !-[WKContentView dateTimeInputControl](self, "dateTimeInputControl")
    && !-[WKContentView selectControl](self, "selectControl")
    && !objc_msgSend((id)objc_msgSend(self->_contextMenuHintContainerView.m_ptr, "subviews"), "count"))
  {
    -[WKContentView _removeContainerForContextMenuHintPreviews](self, "_removeContainerForContextMenuHintPreviews");
  }
}

- (void)adjustSelectionWithDelta:(_NSRange)a3 completionHandler:(id)a4
{
  NSUInteger length;
  NSUInteger location;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  length = a3.length;
  location = a3.location;
  v11 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v8 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v9 = 136315138;
      v10 = "-[WKContentView(WKInteraction) adjustSelectionWithDelta:completionHandler:]";
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v9, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x197858024);
  }
  -[WKContentView _internalAdjustSelectionWithOffset:lengthDelta:completionHandler:](self, "_internalAdjustSelectionWithOffset:lengthDelta:completionHandler:", location, length, a4);
}

- (void)requestDocumentContext:(id)a3 completionHandler:(id)a4
{
  char isKindOfClass;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  WebPageProxy *m_ptr;
  BOOL v28;
  void *v29;
  uint64_t v30;
  CGFloat x;
  CGRect v32;
  _BYTE v33[8];
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (a3 && (isKindOfClass & 1) != 0)
  {
    objc_msgSend(a3, "documentRect");
    v12 = objc_msgSend(a3, "flags", v8, v9, v10, v11);
  }
  else
  {
    objc_opt_class();
    v13 = objc_opt_isKindOfClass();
    v12 = 0;
    if (a3 && (v13 & 1) != 0)
    {
      objc_msgSend(a3, "_documentRect");
      v12 = objc_msgSend(a3, "options", v14, v15, v16, v17);
    }
  }
  v33[0] = v12;
  v18 = objc_msgSend(a3, "surroundingGranularity");
  v19 = 0x50304020100uLL >> (8 * v18);
  if (v18 >= 6)
    LOBYTE(v19) = 0;
  v33[1] = v19;
  v34 = objc_msgSend(a3, "granularityCount");
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v35, &v32);
  LOBYTE(v36) = 0;
  v41 = 0;
  v20 = (void *)objc_msgSend(a3, "inputElementIdentifier");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & (v20 != 0)) == 1)
  {
    v21 = objc_msgSend(v20, "_textInputContext");
    v36 = *(_OWORD *)v21;
    v22 = *(_OWORD *)(v21 + 16);
    v23 = *(_OWORD *)(v21 + 32);
    if (v41)
    {
      v24 = *(_OWORD *)(v21 + 48);
      *(_QWORD *)&v40 = *(_QWORD *)(v21 + 64);
      v38 = v23;
      v39 = v24;
      v37 = v22;
    }
    else
    {
      v25 = *(_OWORD *)(v21 + 64);
      v39 = *(_OWORD *)(v21 + 48);
      v40 = v25;
      v37 = v22;
      v38 = v23;
      v41 = 1;
    }
  }
  v26 = v33[0];
  m_ptr = self->_page.m_ptr;
  v28 = -[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions");
  v29 = _Block_copy(a4);
  v30 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v30 = off_1E3507C70;
  *(_BYTE *)(v30 + 8) = v28;
  *(_QWORD *)(v30 + 16) = v29;
  *(_BYTE *)(v30 + 24) = v26;
  *(_QWORD *)&v32.origin.x = v30;
  WebKit::WebPageProxy::requestDocumentEditingContext((uint64_t)m_ptr, (uint64_t)v33, (uint64_t *)&v32);
  x = v32.origin.x;
  v32.origin.x = 0.0;
  if (x != 0.0)
    (*(void (**)(CGFloat))(**(_QWORD **)&x + 8))(COERCE_CGFLOAT(*(_QWORD *)&x));
  _Block_release(0);
}

- (void)selectPositionAtPoint:(CGPoint)a3 withContextRequest:(id)a4 completionHandler:(id)a5
{
  double y;
  double x;
  id v10;
  uint64_t v11;
  void *v12;
  CFTypeRef v13;
  CFTypeRef v14;
  _QWORD v15[4];
  CFTypeRef v16;
  CFTypeRef cf;
  void *aBlock;
  _QWORD v19[2];
  char v20;

  y = a3.y;
  x = a3.x;
  v10 = -[WKContentView textInteractionLoupeGestureRecognizer](self, "textInteractionLoupeGestureRecognizer");
  *(double *)v19 = x;
  *(double *)&v19[1] = y;
  v20 = 1;
  logTextInteraction((uint64_t)"-[WKContentView(WKInteraction) selectPositionAtPoint:withContextRequest:completionHandler:]", v10, (uint64_t)v19, 0, 0, 0, 0, v11, 0, 0, 0, 0, 0, 0);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3321888768;
  v15[2] = __91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler___block_invoke;
  v15[3] = &__block_descriptor_56_e8_32c105_ZTSKZ91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler__E4__91_e5_v8__0l;
  if (self)
    CFRetain(self);
  if (a4)
    CFRetain(a4);
  v12 = _Block_copy(a5);
  v16 = self;
  if (self)
    CFRetain(self);
  cf = a4;
  if (a4)
    CFRetain(a4);
  aBlock = _Block_copy(v12);
  -[WKContentView selectPositionAtPoint:completionHandler:](self, "selectPositionAtPoint:completionHandler:", v15, x, y);
  _Block_release(v12);
  if (a4)
    CFRelease(a4);
  if (self)
    CFRelease(self);
  _Block_release(aBlock);
  v13 = cf;
  cf = 0;
  if (v13)
    CFRelease(v13);
  v14 = v16;
  v16 = 0;
  if (v14)
    CFRelease(v14);
}

void __91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler___block_invoke(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  const void *v3;
  _QWORD v4[4];
  void *aBlock;

  v1 = (void *)a1[4];
  v2 = a1[5];
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3321888768;
  v4[2] = ___ZZ91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler__EN4__91clEv_block_invoke;
  v4[3] = &__block_descriptor_40_e8_32c126_ZTSKZZ91__WKContentView_WKInteraction__selectPositionAtPoint_withContextRequest_completionHandler__EN4__91clEvEUlP8NSObjectE__e18_v16__0__NSObject_8l;
  v3 = (const void *)a1[6];
  a1[6] = 0;
  aBlock = _Block_copy(v3);
  objc_msgSend(v1, "requestDocumentContext:completionHandler:", v2, v4);
  _Block_release(v3);
  _Block_release(aBlock);
}

- (void)buildMenuForWebViewWithBuilder:(id)a3
{
  id v5;
  id v6;
  id v7;

  v5 = -[WKContentView removeBackgroundMenu](self, "removeBackgroundMenu");
  if (v5)
    objc_msgSend(a3, "insertSiblingMenu:beforeMenuForIdentifier:", v5, *MEMORY[0x1E0CEB9A8]);
  v6 = -[WKContentView appHighlightMenu](self, "appHighlightMenu");
  if (v6)
    objc_msgSend(a3, "insertChildMenu:atEndOfMenuForIdentifier:", v6, *MEMORY[0x1E0CEB9C0]);
  v7 = -[WKContentView scrollToTextFragmentGenerationMenu](self, "scrollToTextFragmentGenerationMenu");
  if (v7)
    objc_msgSend(a3, "insertSiblingMenu:afterMenuForIdentifier:", v7, *MEMORY[0x1E0CEB9D0]);
}

- (id)menuWithInlineAction:(id)a3 image:(id)a4 identifier:(id)a5 handler:(void *)a6
{
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v9 = (void *)MEMORY[0x1E0CEA2A8];
  v10 = *(_QWORD *)a6;
  *(_QWORD *)a6 = 0;
  v16 = v10;
  v18 = 0;
  objc_initWeak(&v18, self);
  v19 = v16;
  v20 = 0;
  objc_moveWeak(&v20, &v18);
  v11 = malloc_type_malloc(0x30uLL, 0x10E00408E6EE7F8uLL);
  *(_QWORD *)v11 = MEMORY[0x1E0C809A0];
  *((_QWORD *)v11 + 1) = 50331650;
  *((_QWORD *)v11 + 2) = WTF::BlockPtr<void ()(UIAction *)>::fromCallable<-[WKContentView(WKInteraction) menuWithInlineAction:image:identifier:handler:]::$_2>(-[WKContentView(WKInteraction) menuWithInlineAction:image:identifier:handler:]::$_2)::{lambda(void *,UIAction *)#1}::__invoke;
  *((_QWORD *)v11 + 3) = &WTF::BlockPtr<void ()(UIAction *)>::fromCallable<-[WKContentView(WKInteraction) menuWithInlineAction:image:identifier:handler:]::$_2>(-[WKContentView(WKInteraction) menuWithInlineAction:image:identifier:handler:]::$_2)::descriptor;
  v12 = v19;
  v19 = 0;
  *((_QWORD *)v11 + 4) = v12;
  *((_QWORD *)v11 + 5) = 0;
  objc_moveWeak((id *)v11 + 5, &v20);
  objc_destroyWeak(&v20);
  v13 = v19;
  v19 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = objc_msgSend(v9, "actionWithTitle:image:identifier:handler:", a3, a4, a5, v11, 0);
  _Block_release(v11);
  objc_destroyWeak(&v18);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v21[0] = v14;
  return (id)objc_msgSend(MEMORY[0x1E0CEA740], "menuWithTitle:image:identifier:options:children:", &stru_1E351F1B8, 0, 0, 1, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 1, 0));
}

- (id)appHighlightMenu
{
  const WTF::StringImpl *v2;
  uint64_t v4;
  WebCore *v5;
  char v6;
  id v7;
  const __CFString *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;

  v4 = *((_QWORD *)self->_page.m_ptr + 28);
  {
    WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::appHighlightsEnabledKey(void)::key, v2)|| !*(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 234)|| !-[WKContentView shouldAllowHighlightLinkCreation](self, "shouldAllowHighlightLinkCreation"))
  {
    return 0;
  }
  v5 = (WebCore *)objc_msgSend(*((id *)self->_page.m_ptr + 164), "isVisible");
  v6 = (char)v5;
  if ((_DWORD)v5)
    WebCore::contextMenuItemTagAddHighlightToCurrentQuickNote(v5);
  else
    WebCore::contextMenuItemTagAddHighlightToNewQuickNote(v5);
  if (v15)
    v9 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v9 = &stru_1E351F1B8;
  v10 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v10 = off_1E3507C98;
  *(_BYTE *)(v10 + 8) = v6;
  v14 = v10;
  v7 = -[WKContentView menuWithInlineAction:image:identifier:handler:](self, "menuWithInlineAction:image:identifier:handler:", v9, 0, CFSTR("WKActionCreateQuickNote"), &v14);
  v12 = v14;
  v14 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v7;
}

- (id)scrollToTextFragmentGenerationMenu
{
  const WTF::StringImpl *v2;
  uint64_t v4;
  WebCore *v5;
  const __CFString *v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  id v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v13;
  WTF::StringImpl *v14;

  v4 = *((_QWORD *)self->_page.m_ptr + 28);
  {
    WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollToTextFragmentGenerationEnabledKey(void)::key, v2))return 0;
  if (!*(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 234))
    return 0;
  v5 = (WebCore *)-[WKContentView shouldAllowHighlightLinkCreation](self, "shouldAllowHighlightLinkCreation");
  if (!(_DWORD)v5)
    return 0;
  WebCore::contextMenuItemTagCopyLinkToHighlight(v5);
  if (v14)
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E351F1B8;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3507CC0;
  v13 = v7;
  v9 = -[WKContentView menuWithInlineAction:image:identifier:handler:](self, "menuWithInlineAction:image:identifier:handler:", v6, 0, CFSTR("WKActionScrollToTextFragmentGeneration"), &v13);
  v10 = v13;
  v13 = 0;
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  return v9;
}

- (void)setContinuousSpellCheckingEnabled:(BOOL)a3
{
  if (WebKit::TextChecker::setContinuousSpellCheckingEnabled((WebKit::TextChecker *)a3))
    WebKit::WebProcessProxy::updateTextCheckerState(*((WebKit **)self->_page.m_ptr + 26));
}

- (void)setGrammarCheckingEnabled:(BOOL)a3
{
  _BOOL8 v3;

  v3 = a3;
  if (*((_BYTE *)WebKit::mutableState((WebKit *)self) + 1) != a3)
  {
    WebKit::TextChecker::setGrammarCheckingEnabled((WebKit::TextChecker *)v3);
    WebKit::WebProcessProxy::updateTextCheckerState(*((WebKit **)self->_page.m_ptr + 26));
  }
}

- (void)mouseInteraction:(id)a3 changedWithEvent:(const void *)a4
{
  WebPageProxy *m_ptr;
  uint64_t v7;
  __int128 v8;
  char v9;

  m_ptr = self->_page.m_ptr;
  if (!*((_BYTE *)m_ptr + 729) && *((_BYTE *)m_ptr + 728))
  {
    if (*(_BYTE *)a4 == 1)
    {
      BYTE3(self->_dataListTextSuggestions.m_ptr) = 0;
      if (-[WKContentView hasHiddenContentEditable](self, "hasHiddenContentEditable", a3)
        && -[WKContentView _hasFocusedElement](self, "_hasFocusedElement")
        && (objc_msgSend((id)-[WKContentView window](self, "window"), "isKeyWindow") & 1) == 0)
      {
        objc_msgSend((id)-[WKContentView window](self, "window"), "makeKeyWindow");
      }
    }
    else if (!*(_BYTE *)a4)
    {
      v7 = *((_QWORD *)m_ptr + 23);
      if (*(_BYTE *)(v7 + 32))
      {
        __break(0xC471u);
        return;
      }
      *(_QWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[32] = *(_QWORD *)(v7 + 112);
      if (a3)
      {
        objc_msgSend(a3, "lastLocation");
        if (v9)
          *(_OWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[16] = v8;
      }
    }
    WebKit::WebPageProxy::handleMouseEvent((WebKit::WebProcessProxy **)self->_page.m_ptr, (const NativeWebMouseEvent *)a4);
  }
}

- (void)_setMouseEventPolicy:(unsigned __int8)a3
{
  self->_mouseEventPolicy = a3;
  -[WKContentView _configureMouseGestureRecognizer](self, "_configureMouseGestureRecognizer");
}

- (void)_showMediaControlsContextMenu:(FloatRect *)a3 items:(void *)a4 completionHandler:(void *)a5
{
  objc_msgSend(self->_actionSheetAssistant.m_ptr, "showMediaControlsContextMenu:items:completionHandler:", a3, a4, a5);
}

- (id)pointerInteraction:(id)a3 regionForRequest:(id)a4 defaultRegion:(id)a5
{
  -[WKContentView _updateLastPointerRegionIfNeeded:](self, "_updateLastPointerRegionIfNeeded:", a4);
  return self->_lastPointerRegion.m_ptr;
}

- (void)_updateLastPointerRegionIfNeeded:(id)a3
{
  void *v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  void *m_ptr;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id location;
  __int128 v23;
  _QWORD v24[4];
  id v25;
  __int128 v26;
  float v27[2];
  uint64_t v28;
  uint64_t v29;

  BYTE2(v29) = 0;
  LOWORD(v29) = 0;
  WORD2(v29) = 0;
  BYTE6(v29) = 0;
  objc_msgSend(a3, "location");
  location = v5;
  *(_QWORD *)&v23 = v6;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v27, (const CGPoint *)&location);
  v7 = roundf(v27[0]);
  v8 = 0x7FFFFFFFLL;
  v9 = 0x80000000;
  if (v7 > -2147500000.0)
    v9 = (int)v7;
  if (v7 < 2147500000.0)
    v8 = v9;
  v10 = roundf(v27[1]);
  v11 = 0x7FFFFFFF00000000;
  v12 = 0x8000000000000000;
  if (v10 > -2147500000.0)
    v12 = (unint64_t)(int)v10 << 32;
  if (v10 < 2147500000.0)
    v11 = v12;
  v28 = v11 | v8;
  WORD1(v29) = 1;
  if (-[WKContentView _currentPositionInformationIsValidForRequest:](self, "_currentPositionInformationIsValidForRequest:", &v28))
  {
    objc_msgSend(a3, "location");
    v13 = -[WKContentView pointerRegionForPositionInformation:point:](self, "pointerRegionForPositionInformation:point:", &self->_positionInformation);
    v14 = v13;
    if (v13)
      CFRetain(v13);
    m_ptr = self->_lastPointerRegion.m_ptr;
    self->_lastPointerRegion.m_ptr = v14;
    if (m_ptr)
      CFRelease(m_ptr);
    self->_pointerInteractionRegionNeedsUpdate = 0;
  }
  else
  {
    if (objc_msgSend(-[WKContentView webView](self, "webView"), "_isEditable")
      && !self->_positionInformation.shouldNotUseIBeamInEditableContent)
    {
      v16 = self->_lastPointerRegion.m_ptr;
      if (v16)
        objc_msgSend(v16, "rect");
      else
        -[WKContentView bounds](self, "bounds");
      v17 = (void *)objc_msgSend(MEMORY[0x1E0CEA870], "regionWithRect:identifier:", CFSTR("WKEditablePointerRegion"));
      v18 = v17;
      if (v17)
        CFRetain(v17);
      v19 = self->_lastPointerRegion.m_ptr;
      self->_lastPointerRegion.m_ptr = v18;
      if (v19)
        CFRelease(v19);
    }
    if (!self->_pointerInteractionRegionNeedsUpdate)
    {
      self->_pointerInteractionRegionNeedsUpdate = 1;
      v24[0] = MEMORY[0x1E0C809B0];
      v24[1] = 3321888768;
      v24[2] = __65__WKContentView_WKInteraction___updateLastPointerRegionIfNeeded___block_invoke;
      v24[3] = &__block_descriptor_56_e8_32c79_ZTSKZ65__WKContentView_WKInteraction___updateLastPointerRegionIfNeeded__E4__95_e4285_v648__0_InteractionInformationAtPosition__InteractionInformationRequest__IntPoint_ii_BBBBBBB_B_optional_BOOL_____cB_B_CBBBBBBBBBBBBB_Markable_WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long____WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__::MarkableTraits___ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long____ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___BBBBBB_FloatPoint_ff__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____IntRect__IntPoint_ii__IntSize_ii___RefPtr_WebCore::ShareableBitmap__WTF::RawPtrTraits_WebCore::ShareableBitmap___WTF::DefaultRefDerefTraits_WebCore::ShareableBitmap_____ShareableBitmap___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___f_FloatRect__FloatPoint_ff__FloatSize_ff___optional_WebCore::Cursor_____c_Cursor_C_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___IntPoint_ii__v__B__TextIndicatorData__FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___Vector_WebCore::FloatRect__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____FloatRect_II_f_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___Color_Q_C_OptionSet_WebCore::TextIndicatorOption__S___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____RetainPtr_NSArray___v__IntRect__IntPoint_ii__IntSize_ii___optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___B__optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___B__Vector_WebCore::ElementAnimationContext__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____ElementAnimationContext_II__8l;
      location = 0;
      objc_initWeak(&location, self);
      objc_msgSend(a3, "location");
      *(_QWORD *)&v23 = v20;
      *((_QWORD *)&v23 + 1) = v21;
      v25 = 0;
      objc_copyWeak(&v25, &location);
      v26 = v23;
      -[WKContentView doAfterPositionInformationUpdate:forRequest:](self, "doAfterPositionInformationUpdate:forRequest:", v24, v28, v29);
      objc_destroyWeak(&location);
      objc_destroyWeak(&v25);
    }
  }
}

void __65__WKContentView_WKInteraction___updateLastPointerRegionIfNeeded___block_invoke(uint64_t a1, uint64_t a2)
{
  _BYTE *WeakRetained;
  _BYTE *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    WeakRetained[712] = 0;
    v6 = (const void *)objc_msgSend(WeakRetained, "pointerRegionForPositionInformation:point:", a2, *(double *)(a1 + 40), *(double *)(a1 + 48));
    v7 = v6;
    if (v6)
      CFRetain(v6);
    v8 = (const void *)*((_QWORD *)v5 + 88);
    *((_QWORD *)v5 + 88) = v7;
    if (v8)
      CFRelease(v8);
    objc_msgSend(*((id *)v5 + 87), "invalidate");
    CFRelease(v5);
  }
}

- (id)pointerRegionForPositionInformation:(const void *)a3 point:(CGPoint)a4
{
  uint64_t v6;
  int v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  int v11;
  void *v12;
  _QWORD v14[2];
  _BYTE v15[4];
  float v16;
  float v17;
  CGPoint v18;

  v18 = a4;
  v14[0] = WebCore::enclosingIntRect((WebCore *)((char *)a3 + 220), (const FloatRect *)a2);
  v14[1] = v6;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v15, (const WebCore::IntRect *)v14);
  v16 = v16 + -10.0;
  v17 = (float)(v17 + 10.0) + 10.0;
  if (!*((_BYTE *)a3 + 272))
    goto LABEL_8;
  v7 = *((unsigned __int8 *)a3 + 240);
  if (v7 != 3)
  {
    if (v7 == 4)
    {
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v14, &v18);
      if (WebCore::FloatRect::contains())
      {
        v8 = (void *)MEMORY[0x1E0CEA870];
        WebCore::FloatRect::operator CGRect();
        goto LABEL_7;
      }
    }
LABEL_8:
    if (objc_msgSend(-[WKContentView webView](self, "webView"), "_isEditable"))
    {
      WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v14, &v18);
      v11 = WebCore::FloatRect::contains();
      v12 = (void *)MEMORY[0x1E0CEA870];
      if (!v11)
      {
        -[WKContentView bounds](self, "bounds");
        v9 = CFSTR("WKEditablePointerRegion");
        goto LABEL_14;
      }
      WebCore::FloatRect::operator CGRect();
    }
    else
    {
      v12 = (void *)MEMORY[0x1E0CEA870];
      -[WKContentView bounds](self, "bounds");
    }
    v9 = CFSTR("WKPointerRegion");
LABEL_14:
    v10 = v12;
    return (id)objc_msgSend(v10, "regionWithRect:identifier:", v9);
  }
  v8 = (void *)MEMORY[0x1E0CEA870];
  WebCore::IntRect::operator CGRect();
LABEL_7:
  v9 = CFSTR("WKPointerRegion");
  v10 = v8;
  return (id)objc_msgSend(v10, "regionWithRect:identifier:", v9);
}

- (id)pointerInteraction:(id)a3 styleForRegion:(id)a4
{
  uint64_t v6;
  int v7;
  InteractionInformationAtPosition *p_positionInformation;
  id result;
  int m_type;
  uint64_t v11;
  _QWORD v12[7];

  -[WKContentView _contentZoomScale](self, "_contentZoomScale", a3);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __66__WKContentView_WKInteraction__pointerInteraction_styleForRegion___block_invoke;
  v12[3] = &unk_1E3506BD0;
  v12[6] = v6;
  v12[4] = self;
  v12[5] = a4;
  v7 = objc_msgSend(-[WKContentView webView](self, "webView"), "_isEditable");
  p_positionInformation = &self->_positionInformation;
  if (v7)
  {
    if (p_positionInformation->shouldNotUseIBeamInEditableContent)
      return (id)objc_msgSend(MEMORY[0x1E0CEA880], "systemPointerStyle");
    return (id)__66__WKContentView_WKInteraction__pointerInteraction_styleForRegion___block_invoke((uint64_t)v12);
  }
  if (p_positionInformation->cursor.__engaged_)
  {
    result = (id)objc_msgSend((id)objc_msgSend(a4, "identifier"), "isEqual:", CFSTR("WKPointerRegion"));
    if ((_DWORD)result)
    {
      if (!p_positionInformation->cursor.__engaged_)
      {
        __break(1u);
        return result;
      }
      m_type = p_positionInformation->cursor.var0.__val_.m_type;
      if (m_type == 3)
        return (id)objc_msgSend(MEMORY[0x1E0CEA880], "systemPointerStyle");
      if (m_type == 4)
      {
        WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v11, &p_positionInformation->request.point);
        if (WebCore::FloatRect::contains())
          return (id)__66__WKContentView_WKInteraction__pointerInteraction_styleForRegion___block_invoke((uint64_t)v12);
      }
    }
  }
  return (id)objc_msgSend(MEMORY[0x1E0CEA880], "systemPointerStyle");
}

uint64_t __66__WKContentView_WKInteraction__pointerInteraction_styleForRegion___block_invoke(uint64_t a1)
{
  uint64_t v2;
  float v3;
  double v4;
  int v5;
  uint64_t v6;
  double Width;
  uint64_t v11;
  float v12;
  int v13;
  int v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(float *)(v2 + 1736);
  v4 = *(double *)(a1 + 48);
  v5 = *(unsigned __int8 *)(v2 + 1581);
  objc_msgSend(*(id *)(a1 + 40), "rect");
  if (v5)
  {
    Width = CGRectGetWidth(*(CGRect *)&v6);
    v11 = 1;
  }
  else
  {
    Width = CGRectGetHeight(*(CGRect *)&v6);
    v11 = 2;
  }
  v12 = v4 * v3;
  v13 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "identifier"), "isEqual:", CFSTR("WKEditablePointerRegion"));
  if (v12 > 100.0)
    v14 = 1;
  else
    v14 = v13;
  if (Width > 100.0)
    v14 = 1;
  if (v14)
    v15 = 0;
  else
    v15 = v11;
  return objc_msgSend(MEMORY[0x1E0CEA880], "styleWithShape:constrainedAxes:", objc_msgSend(MEMORY[0x1E0CEA878], "beamWithPreferredLength:axis:", v11, v12), v15);
}

- (void)cleanUpScribbleInteraction
{
  void *m_ptr;

  -[WKContentView removeInteraction:](self, "removeInteraction:", self->_scribbleInteraction.m_ptr);
  m_ptr = self->_scribbleInteraction.m_ptr;
  self->_scribbleInteraction.m_ptr = 0;
  if (m_ptr)
    CFRelease(m_ptr);
}

- (id)_textInputContextByScribbleIdentifier:(id)a3
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  if (*(_QWORD *)(objc_msgSend(a3, "_textInputContext") + 16) == *(_QWORD *)(*((_QWORD *)self->_page.m_ptr + 4) + 1896))
    return a3;
  return 0;
}

- (BOOL)_elementForTextInputContextIsFocused:(id)a3
{
  _BOOL4 v5;
  BOOL result;
  _QWORD *v7;
  BOOL v8;
  BOOL v9;

  v5 = -[WKContentView _hasFocusedElement](self, "_hasFocusedElement");
  result = 0;
  if (a3 && v5)
  {
    v7 = (_QWORD *)objc_msgSend(a3, "_textInputContext");
    result = v7[2] == self->_focusedElementInformation.elementContext.webPageIdentifier.m_identifier
          && (v7[5] == self->_focusedElementInformation.elementContext.m_processIdentifier.m_identifier
            ? (v8 = v7[4] == *(_QWORD *)&self->_focusedElementInformation.elementContext.documentIdentifier.m_object[8])
            : (v8 = 0),
              v8 ? (v9 = v7[6] == self->_focusedElementInformation.elementIdentifier.m_identifier) : (v9 = 0),
              v9)
          && v7[8] == *(_QWORD *)&self->_anon_938[8];
  }
  return result;
}

- (void)indirectScribbleInteraction:(id)a3 requestElementsInRect:(CGRect)a4 completion:(id)a5
{
  -[WKContentView _requestTextInputContextsInRect:completionHandler:](self, "_requestTextInputContextsInRect:completionHandler:", a5, a4.origin.x, a4.origin.y, a4.size.width, a4.size.height);
}

- (BOOL)indirectScribbleInteraction:(id)a3 isElementFocused:(id)a4
{
  return -[WKContentView _elementForTextInputContextIsFocused:](self, "_elementForTextInputContextIsFocused:", -[WKContentView _textInputContextByScribbleIdentifier:](self, "_textInputContextByScribbleIdentifier:", a4));
}

- (void)indirectScribbleInteraction:(id)a3 focusElementIfNeeded:(id)a4 referencePoint:(CGPoint)a5 completion:(id)a6
{
  double y;
  double x;
  id v10;

  y = a5.y;
  x = a5.x;
  v10 = -[WKContentView _textInputContextByScribbleIdentifier:](self, "_textInputContextByScribbleIdentifier:", a4);
  if (v10)
    -[WKContentView _focusTextInputContext:placeCaretAt:completionHandler:](self, "_focusTextInputContext:placeCaretAt:completionHandler:", v10, a6, x, y);
  else
    (*((void (**)(id, _QWORD))a6 + 2))(a6, 0);
}

- (CGRect)indirectScribbleInteraction:(id)a3 frameForElement:(id)a4
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  CGRect result;

  v4 = -[WKContentView _textInputContextByScribbleIdentifier:](self, "_textInputContextByScribbleIdentifier:", a4);
  if (v4)
  {
    objc_msgSend(v4, "boundingRect");
  }
  else
  {
    v5 = *MEMORY[0x1E0C9D628];
    v6 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v7 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v8 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  result.size.height = v8;
  result.size.width = v7;
  result.origin.y = v6;
  result.origin.x = v5;
  return result;
}

- (void)indirectScribbleInteraction:(id)a3 willBeginWritingInElement:(id)a4
{
  id v5;

  v5 = -[WKContentView _textInputContextByScribbleIdentifier:](self, "_textInputContextByScribbleIdentifier:", a4);
  if (v5)
    -[WKContentView _willBeginTextInteractionInTextInputContext:](self, "_willBeginTextInteractionInTextInputContext:", v5);
}

- (void)indirectScribbleInteraction:(id)a3 didFinishWritingInElement:(id)a4
{
  id v5;

  v5 = -[WKContentView _textInputContextByScribbleIdentifier:](self, "_textInputContextByScribbleIdentifier:", a4);
  if (v5)
    -[WKContentView _didFinishTextInteractionInTextInputContext:](self, "_didFinishTextInteractionInTextInputContext:", v5);
}

- (void)_writePromisedAttachmentToPasteboard:(void *)a3
{
  WKContentView *v4;
  CFTypeRef *v5;
  WTF::StringImpl *v6;
  __CFString *v7;
  WTF::StringImpl *v8;
  id v9;
  WTF::StringImpl *v10;
  __CFString *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const __CFString *v16;
  WTF::StringImpl *v17;
  CFTypeRef v18;
  WTF::StringImpl *v19;
  CFTypeRef *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  WKContentView *v24;
  _QWORD v25[4];
  CFTypeRef v26;
  _QWORD v27[4];
  CFTypeRef *v28;
  _QWORD v29[4];
  CFTypeRef cf;
  WTF::StringImpl *v31;
  CFTypeRef *v32;

  v4 = self;
  WebKit::WebPageProxy::attachmentForIdentifier(self->_page.m_ptr, (WTF::StringImpl **)a3, (const WTF::StringImpl *)a3, &v32);
  v5 = v32;
  if (!v32)
    return;
  API::Attachment::utiType((API::Attachment *)v32, &v31);
  if (v31)
  {
    v7 = (__CFString *)WTF::StringImpl::operator NSString *();
    v8 = v31;
    v31 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  else
  {
    v7 = &stru_1E351F1B8;
  }
  if (!-[__CFString length](v7, "length") || API::Attachment::isEmpty((API::Attachment *)v5))
  {
    v9 = 0;
LABEL_36:
    CFRelease(v5[1]);
    if (v9)
    {
      v21 = (void *)MEMORY[0x1E0CEA810];
      v22 = objc_msgSend(objc_loadWeak(&v4->_webView.m_weakReference), "_effectiveDataOwner:", -[WKContentView _dataOwnerForCopy](v4, "_dataOwnerForCopy"));
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3321888768;
      v25[2] = __69__WKContentView_WKInteraction___writePromisedAttachmentToPasteboard___block_invoke;
      v25[3] = &__block_descriptor_40_e8_32c38_ZTSN3WTF9RetainPtrI14NSItemProviderEE_e5_v8__0l;
      v26 = v9;
      CFRetain(v9);
      objc_msgSend(v21, "_performAsDataOwner:block:", v22, v25);
      if (v26)
        CFRelease(v26);
      CFRelease(v9);
    }
    return;
  }
  v9 = objc_alloc_init(MEMORY[0x1E0CB36C8]);
  objc_msgSend(v9, "setPreferredPresentationStyle:", 2);
  API::Attachment::fileName((API::Attachment *)v5, (uint64_t)&v31);
  if (v31)
  {
    v11 = (__CFString *)WTF::StringImpl::operator NSString *();
    v12 = v31;
    v31 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    v11 = &stru_1E351F1B8;
  }
  if (-[__CFString length](v11, "length", v7, v4))
    objc_msgSend(v9, "setSuggestedName:", v11);
  v13 = MEMORY[0x1E0C809B0];
  if (!*((_DWORD *)a3 + 5))
  {
LABEL_34:
    v27[0] = v13;
    v27[1] = 3321888768;
    v27[2] = ___ZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoE_block_invoke_2854;
    v27[3] = &__block_descriptor_40_e8_32c93_ZTSKZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoEE3__0_e45___NSProgress_16__0___v____NSData___NSError__8l;
    CFRetain(v5[1]);
    CFRetain(v5[1]);
    v4 = v24;
    v28 = v5;
    objc_msgSend(v9, "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:", v23, 0, v27);
    CFRelease(v5[1]);
    v20 = v28;
    v28 = 0;
    if (v20)
      CFRelease(v20[1]);
    goto LABEL_36;
  }
  v14 = 0;
  v15 = 0;
  while (1)
  {
    WebCore::SharedBuffer::createNSData(*(WebCore::SharedBuffer **)(*((_QWORD *)a3 + 1) + v14 + 8));
    if (v15 >= *((unsigned int *)a3 + 5))
      break;
    if (*(_QWORD *)(*((_QWORD *)a3 + 1) + v14))
      v16 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v16 = &stru_1E351F1B8;
    v29[0] = v13;
    v29[1] = 3321888768;
    v29[2] = ___ZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoE_block_invoke;
    v29[3] = &__block_descriptor_40_e8_32c93_ZTSKZL18createItemProviderRKN6WebKit12WebPageProxyERKN7WebCore22PromisedAttachmentInfoEE3__1_e45___NSProgress_16__0___v____NSData___NSError__8l;
    v17 = v31;
    if (v31)
    {
      CFRetain(v31);
      cf = v17;
      CFRetain(v17);
    }
    else
    {
      cf = 0;
    }
    objc_msgSend(v9, "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:", v16, 0, v29);
    if (v17)
      CFRelease(v17);
    v18 = cf;
    cf = 0;
    if (v18)
      CFRelease(v18);
    v19 = v31;
    v31 = 0;
    if (v19)
      CFRelease(v19);
    ++v15;
    v14 += 16;
    if (v15 >= *((unsigned int *)a3 + 5))
      goto LABEL_34;
  }
  __break(0xC471u);
}

uint64_t __69__WKContentView_WKInteraction___writePromisedAttachmentToPasteboard___block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v3[0] = *(_QWORD *)(a1 + 32);
  v1 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v3, 1);
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA810], "generalPasteboard"), "setItemProviders:", v1);
}

- (void)_endImageAnalysisGestureDeferral:(BOOL)a3
{
  objc_msgSend(self->_imageAnalysisDeferringGestureRecognizer.m_ptr, "endDeferral:", a3);
}

- (void)_doAfterPendingImageAnalysis:(id)a3
{
  unsigned __int8 *v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  const void *v14;

  if (-[WKContentView hasPendingImageAnalysisRequest](self, "hasPendingImageAnalysisRequest"))
  {
    v5 = &self->_anon_e60[16];
    v6 = _Block_copy(a3);
    v14 = v6;
    v7 = *((unsigned int *)v5 + 3);
    if ((_DWORD)v7 == *((_DWORD *)v5 + 2))
    {
      v8 = (uint64_t *)WTF::Vector<WTF::BlockPtr<void ()(WebKit::ProceedWithTextSelectionInImage)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v7 + 1, (unint64_t)&v14);
      v9 = *((unsigned int *)v5 + 3);
      v7 = *(_QWORD *)v5;
      v10 = *v8;
      *v8 = 0;
      *(_QWORD *)(v7 + 8 * v9) = v10;
      LODWORD(v7) = *((_DWORD *)v5 + 3);
      v11 = v14;
    }
    else
    {
      v12 = v6;
      v11 = 0;
      v13 = *(_QWORD *)v5;
      v14 = 0;
      *(_QWORD *)(v13 + 8 * v7) = v12;
    }
    *((_DWORD *)v5 + 3) = v7 + 1;
    _Block_release(v11);
  }
  else
  {
    (*((void (**)(id, _QWORD))a3 + 2))(a3, 0);
  }
}

- (void)_invokeAllActionsToPerformAfterPendingImageAnalysis:(BOOL)a3
{
  _BOOL8 v3;
  const void **v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void (**v8)(void *, _BOOL8);
  _QWORD v9[2];
  const void **v10;
  int v11;
  int v12;

  v3 = a3;
  if (LOBYTE(self->_editDropTextCursorView.m_ptr))
    LOBYTE(self->_editDropTextCursorView.m_ptr) = 0;
  if (self->_anon_e60[0])
    self->_anon_e60[0] = 0;
  v4 = *(const void ***)&self->_anon_e60[16];
  v10 = v4;
  v5 = *(unsigned int *)&self->_anon_e60[28];
  v11 = *(_DWORD *)&self->_anon_e60[24];
  v12 = v5;
  v9[0] = 0;
  *(_QWORD *)&self->_anon_e60[16] = 0;
  v9[1] = 0;
  *(_QWORD *)&self->_anon_e60[24] = 0;
  WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, (void *)a2);
  if ((_DWORD)v5)
  {
    v7 = 8 * v5;
    do
    {
      v8 = (void (**)(void *, _BOOL8))_Block_copy(*v4);
      v8[2](v8, v3);
      _Block_release(v8);
      ++v4;
      v7 -= 8;
    }
    while (v7);
  }
  WTF::Vector<WTF::BlockPtr<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
}

- (void)setUpTextIndicator:()Ref<WebCore:()WTF:(WTF::DefaultRefDerefTraits<WebCore::TextIndicator>>)a3 :RawPtrTraits<WebCore::TextIndicator> :TextIndicator
{
  TextIndicator *v5;
  TextIndicator *m_ptr;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  void *v16;
  void *v17;
  __int128 v18;

  if (self->_textIndicator.m_ptr != *(TextIndicator **)a3.var0)
  {
    -[WKContentView teardownTextIndicatorLayer](self, "teardownTextIndicatorLayer");
    objc_msgSend(MEMORY[0x1E0DE7910], "cancelPreviousPerformRequestsWithTarget:selector:object:", self, sel_startFadeOut, 0);
    v5 = *(TextIndicator **)a3.var0;
    if (*(_QWORD *)a3.var0)
      ++*(_DWORD *)v5;
    m_ptr = self->_textIndicator.m_ptr;
    self->_textIndicator.m_ptr = v5;
    if (m_ptr)
    {
      WTF::RefCounted<WebCore::TextIndicator>::deref(m_ptr);
      v5 = self->_textIndicator.m_ptr;
    }
    v18 = *(_OWORD *)((char *)v5 + 24);
    WebCore::FloatRect::operator CGRect();
    v8 = v7;
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v15 = objc_alloc(MEMORY[0x1E0DCDDA8]);
    v16 = (void *)objc_msgSend(v15, "initWithFrame:textIndicator:margin:offset:", *(_QWORD *)a3.var0, v8, v10, v12, v14, *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8), v18);
    v17 = self->_textIndicatorLayer.m_ptr;
    self->_textIndicatorLayer.m_ptr = v16;
    if (v17)
      CFRelease(v17);
    objc_msgSend((id)-[WKContentView layer](self, "layer"), "addSublayer:", self->_textIndicatorLayer.m_ptr);
    if (*((_BYTE *)self->_textIndicator.m_ptr + 112))
      objc_msgSend(self->_textIndicatorLayer.m_ptr, "present");
    -[WKContentView performSelector:withObject:afterDelay:](self, "performSelector:withObject:afterDelay:", sel_startFadeOut, self, 0.32);
  }
}

- (void)clearTextIndicator:(unsigned __int8)a3
{
  int v3;
  TextIndicator *m_ptr;
  int v6;

  v3 = a3;
  m_ptr = self->_textIndicator.m_ptr;
  self->_textIndicator.m_ptr = 0;
  if ((objc_msgSend(self->_textIndicatorLayer.m_ptr, "isFadingOut") & 1) != 0)
  {
LABEL_9:
    if (!m_ptr)
      return;
    goto LABEL_10;
  }
  if (!m_ptr || !objc_msgSend(self->_textIndicatorLayer.m_ptr, "indicatorWantsManualAnimation:", m_ptr))
    goto LABEL_8;
  v6 = objc_msgSend(self->_textIndicatorLayer.m_ptr, "hasCompletedAnimation") ^ 1;
  if (v3 != 1)
    LOBYTE(v6) = 1;
  if ((v6 & 1) != 0)
  {
LABEL_8:
    -[WKContentView teardownTextIndicatorLayer](self, "teardownTextIndicatorLayer");
    goto LABEL_9;
  }
  -[WKContentView startFadeOut](self, "startFadeOut");
LABEL_10:
  WTF::RefCounted<WebCore::TextIndicator>::deref(m_ptr);
}

- (void)setTextIndicatorAnimationProgress:(float)a3
{
  if (self->_textIndicator.m_ptr)
    objc_msgSend(self->_textIndicatorLayer.m_ptr, "setAnimationProgress:");
}

- (void)teardownTextIndicatorLayer
{
  void *m_ptr;

  objc_msgSend(self->_textIndicatorLayer.m_ptr, "removeFromSuperlayer");
  m_ptr = self->_textIndicatorLayer.m_ptr;
  self->_textIndicatorLayer.m_ptr = 0;
  if (m_ptr)
    CFRelease(m_ptr);
}

- (void)startFadeOut
{
  void *m_ptr;
  id v4;
  _QWORD v5[4];
  id v6;

  objc_msgSend(self->_textIndicatorLayer.m_ptr, "setFadingOut:", 1);
  m_ptr = self->_textIndicatorLayer.m_ptr;
  v4 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3321888768;
  v5[2] = __44__WKContentView_WKInteraction__startFadeOut__block_invoke;
  v5[3] = &__block_descriptor_40_e8_32c58_ZTSKZ44__WKContentView_WKInteraction__startFadeOut_E4__96_e5_v8__0l;
  objc_initWeak(&v4, self);
  v6 = 0;
  objc_copyWeak(&v6, &v4);
  objc_msgSend(m_ptr, "hideWithCompletionHandler:", v5);
  objc_destroyWeak(&v4);
  objc_destroyWeak(&v6);
}

void __44__WKContentView_WKInteraction__startFadeOut__block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "teardownTextIndicatorLayer");
  if (WeakRetained)
    CFRelease(WeakRetained);
}

- (void)addTextAnimationForAnimationID:(id)a3 withStyleType:(int64_t)a4
{
  uint64_t v7;
  void *m_ptr;
  void *v9;

  v7 = *((_QWORD *)self->_page.m_ptr + 28);
  {
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key, (const WTF::StringImpl *)a3))
  {
    m_ptr = self->_textAnimationManager.m_ptr;
    if (!m_ptr)
    {
      m_ptr = (void *)objc_msgSend(objc_alloc((Class)WebKit::getWKSTextAnimationManagerClass[0](0)), "initWithDelegate:", self);
      v9 = self->_textAnimationManager.m_ptr;
      self->_textAnimationManager.m_ptr = m_ptr;
      if (v9)
      {
        CFRelease(v9);
        m_ptr = self->_textAnimationManager.m_ptr;
      }
    }
    objc_msgSend(m_ptr, "addTextAnimationForAnimationID:withStyleType:", a3, a4);
  }
}

- (void)removeTextAnimationForAnimationID:(id)a3
{
  uint64_t v5;
  void *m_ptr;

  v5 = *((_QWORD *)self->_page.m_ptr + 28);
  {
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAnimationsEnabledKey(void)::key, (const WTF::StringImpl *)a3))
  {
    m_ptr = self->_textAnimationManager.m_ptr;
    if (m_ptr)
      objc_msgSend(m_ptr, "removeTextAnimationForAnimationID:", a3);
  }
}

- (void)find:(id)a3
{
  objc_msgSend(-[WKContentView webView](self, "webView"), "find:", a3);
}

- (void)findAndReplace:(id)a3
{
  objc_msgSend(-[WKContentView webView](self, "webView"), "findAndReplace:", a3);
}

- (void)findNext:(id)a3
{
  objc_msgSend(-[WKContentView webView](self, "webView"), "findNext:", a3);
}

- (void)findPrevious:(id)a3
{
  objc_msgSend(-[WKContentView webView](self, "webView"), "findPrevious:", a3);
}

- (void)useSelectionForFindForWebView:(id)a3
{
  id v4;

  if (*(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 234))
  {
    v4 = -[WKContentView selectedText](self, "selectedText", a3);
    if (objc_msgSend(v4, "length"))
    {
      objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "findInteraction"), "setSearchText:", v4);
      objc_msgSend(MEMORY[0x1E0CEA5C8], "_setGlobalFindBuffer:", v4);
    }
  }
}

- (void)_findSelectedForWebView:(id)a3
{
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (-[WKContentView shouldUseAsyncInteractions](self, "shouldUseAsyncInteractions"))
  {
    v5 = qword_1ECE719B0;
    if (os_log_type_enabled((os_log_t)qword_1ECE719B0, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315138;
      v7 = "-[WKContentView(WKInteraction) _findSelectedForWebView:]";
      _os_log_error_impl(&dword_196BCC000, v5, OS_LOG_TYPE_ERROR, "Received unexpected call to %s", (uint8_t *)&v6, 0xCu);
    }
    __break(0xC471u);
    JUMPOUT(0x19785A58CLL);
  }
  -[WKContentView findSelectedForWebView:](self, "findSelectedForWebView:", a3);
}

- (void)findSelectedForWebView:(id)a3
{
  -[WKContentView useSelectionForFindForWebView:](self, "useSelectionForFindForWebView:");
  objc_msgSend(-[WKContentView webView](self, "webView"), "find:", a3);
}

- (void)performTextSearchWithQueryString:(id)a3 usingOptions:(id)a4 resultAggregator:(id)a5
{
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  char v12;
  WebPageProxy *m_ptr;
  _QWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  _QWORD v20[3];
  int v21;
  __int16 v22;

  v9 = objc_msgSend(a4, "wordMatchMethod");
  v10 = 1026;
  if (v9 != 2)
    v10 = 0;
  if (v9 == 1)
    v11 = 2;
  else
    v11 = v10;
  v12 = objc_msgSend(a4, "stringCompareOptions");
  m_ptr = self->_page.m_ptr;
  MEMORY[0x19AEABCC8](&v19, a3);
  if (a3)
    CFRetain(a3);
  if (a5)
    CFRetain(a5);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = &off_1E3507CE8;
  v14[1] = a3;
  v14[2] = a5;
  v18 = v14;
  v22 = v11 & 0xFFFE | v12 & 1;
  v21 = 1000;
  v20[0] = &v19;
  v20[1] = &v22;
  v20[2] = &v21;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::FindTextRangesForStringMatches,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebFoundTextRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(*((_QWORD *)m_ptr + 26), (uint64_t)v20, (uint64_t *)&v18, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0, 1);
  v16 = (uint64_t)v18;
  v18 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v19;
  v19 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
}

- (void)replaceFoundTextInRange:(id)a3 inDocument:(id)a4 withText:(id)a5
{
  char isKindOfClass;
  WebPageProxy *m_ptr;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;
  WTF::StringImpl *v15;
  uint64_t *v16[2];

  if (-[WKContentView supportsTextReplacement](self, "supportsTextReplacement", a3, a4))
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if (a3)
    {
      if ((isKindOfClass & 1) != 0)
      {
        m_ptr = self->_page.m_ptr;
        objc_msgSend(a3, "webFoundTextRange");
        MEMORY[0x19AEABCC8](&v13, a5);
        v16[0] = (uint64_t *)&v14;
        v16[1] = (uint64_t *)&v13;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReplaceFoundTextRangeWithString>(*((_QWORD *)m_ptr + 26), v16, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
        v11 = v13;
        v13 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = v15;
        v15 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v10);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
  }
}

- (void)decorateFoundTextRange:(id)a3 inDocument:(id)a4 usingStyle:(int64_t)a5
{
  char isKindOfClass;
  char v9;
  WebPageProxy *m_ptr;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  char v16;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (a3 && (isKindOfClass & 1) != 0)
  {
    if (a5 == 1)
      v9 = 1;
    else
      v9 = 2 * (a5 == 2);
    m_ptr = self->_page.m_ptr;
    objc_msgSend(a3, "webFoundTextRange");
    v15 = &v13;
    v16 = v9;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DecorateTextRangeWithStyle>(*((_QWORD *)m_ptr + 26), (uint64_t)&v15, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

- (void)scrollRangeToVisible:(id)a3 inDocument:(id)a4
{
  char isKindOfClass;
  WebPageProxy *m_ptr;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl *v11;
  char *v12;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (a3)
  {
    if ((isKindOfClass & 1) != 0)
    {
      m_ptr = self->_page.m_ptr;
      objc_msgSend(a3, "webFoundTextRange");
      v12 = &v10;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ScrollTextRangeToVisible>(*((_QWORD *)m_ptr + 26), (uint64_t **)&v12, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
      v9 = v11;
      v11 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
    }
  }
}

- (void)clearAllDecoratedFoundText
{
  WebPageProxy *m_ptr;
  char v3;

  m_ptr = self->_page.m_ptr;
  v3 = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearAllDecoratedFoundText>(*((_QWORD *)m_ptr + 26), (uint64_t)&v3, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)didBeginTextSearchOperation
{
  WebPageProxy *m_ptr;
  char v4;

  objc_msgSend(-[WKContentView webView](self, "webView"), "_showFindOverlay");
  m_ptr = self->_page.m_ptr;
  v4 = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidBeginTextSearchOperation>(*((_QWORD *)m_ptr + 26), (uint64_t)&v4, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)didEndTextSearchOperation
{
  objc_msgSend(-[WKContentView webView](self, "webView"), "_hideFindOverlay");
}

- (BOOL)supportsTextReplacement
{
  return objc_msgSend(-[WKContentView webView](self, "webView"), "supportsTextReplacement");
}

- (BOOL)supportsTextReplacementForWebView
{
  return objc_msgSend(-[WKContentView webView](self, "webView"), "_isEditable");
}

- (int64_t)compareFoundRange:(id)a3 toRange:(id)a4 inDocument:(id)a5
{
  uint64_t v5;

  v5 = -[WKContentView offsetFromPosition:toPosition:](self, "offsetFromPosition:toPosition:", objc_msgSend(a3, "start"), objc_msgSend(a4, "start"));
  if (v5 < 0)
    return -1;
  else
    return v5 != 0;
}

- (void)requestRectForFoundTextRange:(id)a3 completionHandler:(id)a4
{
  char isKindOfClass;
  WebPageProxy *m_ptr;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  char v15;
  WTF::StringImpl *v16;
  char *v17;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (a3 && (isKindOfClass & 1) != 0)
  {
    m_ptr = self->_page.m_ptr;
    objc_msgSend(a3, "webFoundTextRange");
    v9 = _Block_copy(a4);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E3507D10;
    v10[1] = v9;
    v14 = v10;
    v17 = &v15;
    WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::RequestRectForFoundTextRange,WTF::CompletionHandler<void ()(WebCore::FloatRect)>>(*((_QWORD *)m_ptr + 26), (uint64_t **)&v17, (uint64_t *)&v14, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0, 1);
    v11 = (uint64_t)v14;
    v14 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    _Block_release(0);
    v13 = v16;
    v16 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  else
  {
    (*((void (**)(id, double, double, double, double))a4 + 2))(a4, *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
  }
}

- (BOOL)hasSelectableTextForImageContextMenu
{
  int v2;
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef cf;

  WTF::valueOrDefault<std::optional<WebKit::ImageAnalysisContextMenuActionData> &>(&v4, (uint64_t)&self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.size);
  v2 = v4;
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  return v2 != 0;
}

- (BOOL)hasVisualSearchResultsForImageContextMenu
{
  int v2;
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef cf;

  WTF::valueOrDefault<std::optional<WebKit::ImageAnalysisContextMenuActionData> &>(&v4, (uint64_t)&self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.size);
  v2 = BYTE1(v4);
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  return v2 != 0;
}

- (CGImage)copySubjectResultForImageContextMenu
{
  const void *v2;
  _QWORD v4[2];
  CFTypeRef v5;

  WTF::valueOrDefault<std::optional<WebKit::ImageAnalysisContextMenuActionData> &>(v4, (uint64_t)&self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.size);
  v2 = (const void *)v4[1];
  if (v5)
    CFRelease(v5);
  if (v2)
    CFRelease(v2);
  return (CGImage *)v2;
}

- (id)machineReadableCodeSubMenuForImageContextMenu
{
  CFTypeRef v2;
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef cf;

  WTF::valueOrDefault<std::optional<WebKit::ImageAnalysisContextMenuActionData> &>(&v4, (uint64_t)&self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.size);
  v2 = cf;
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  return (id)v2;
}

- (void)presentVisualSearchPreviewControllerForImage:(id)a3 imageURL:(id)a4 title:(id)a5 imageBounds:(CGRect)a6 appearanceActions:(unint64_t)a7
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  void *v16;
  void *m_buffer;
  const void *v18;
  void *m_ptr;
  const void *v20;

  height = a6.size.height;
  width = a6.size.width;
  y = a6.origin.y;
  x = a6.origin.x;
  v16 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(WKContentView *, SEL))*MEMORY[0x1E0DCE090])(self, a2)), "init");
  m_buffer = self->_actionsToPerformAfterPendingImageAnalysis.m_buffer;
  self->_actionsToPerformAfterPendingImageAnalysis.m_buffer = v16;
  if (m_buffer)
  {
    CFRelease(m_buffer);
    v16 = self->_actionsToPerformAfterPendingImageAnalysis.m_buffer;
  }
  objc_msgSend(v16, "setDelegate:", self);
  objc_msgSend(self->_actionsToPerformAfterPendingImageAnalysis.m_buffer, "setDataSource:", self);
  objc_msgSend(self->_actionsToPerformAfterPendingImageAnalysis.m_buffer, "setAppearanceActions:", a7);
  objc_msgSend(self->_actionsToPerformAfterPendingImageAnalysis.m_buffer, "setModalPresentationStyle:", 5);
  if (a3)
    CFRetain(a3);
  v18 = *(const void **)&self->_actionsToPerformAfterPendingImageAnalysis.m_capacity;
  *(_QWORD *)&self->_actionsToPerformAfterPendingImageAnalysis.m_capacity = a3;
  if (v18)
    CFRelease(v18);
  if (a5)
    CFRetain(a5);
  m_ptr = self->_imageAnalyzer.m_ptr;
  self->_imageAnalyzer.m_ptr = a5;
  if (m_ptr)
    CFRelease(m_ptr);
  if (a4)
    CFRetain(a4);
  v20 = *(const void **)&self->_isProceedingWithTextSelectionInImage;
  *(_QWORD *)&self->_isProceedingWithTextSelectionInImage = a4;
  if (v20)
    CFRelease(v20);
  *(CGFloat *)&self->_visualSearchPreviewController.m_ptr = x;
  *(CGFloat *)&self->_visualSearchPreviewImage.m_ptr = y;
  *(CGFloat *)&self->_visualSearchPreviewImageURL.m_ptr = width;
  *(CGFloat *)&self->_visualSearchPreviewTitle.m_ptr = height;
  -[UIViewController presentViewController:animated:completion:](-[UIView _wk_viewControllerForFullScreenPresentation](self, "_wk_viewControllerForFullScreenPresentation"), "presentViewController:animated:completion:", self->_actionsToPerformAfterPendingImageAnalysis.m_buffer, 1, 0);
}

- (CGRect)previewController:(id)a3 frameForPreviewItem:(id)a4 inSourceView:(id *)a5
{
  void *m_ptr;
  void *v6;
  void *v7;
  void *v8;
  CGRect result;

  *a5 = self;
  m_ptr = self->_visualSearchPreviewController.m_ptr;
  v6 = self->_visualSearchPreviewImage.m_ptr;
  v7 = self->_visualSearchPreviewImageURL.m_ptr;
  v8 = self->_visualSearchPreviewTitle.m_ptr;
  result.size.height = *(double *)&v8;
  result.size.width = *(double *)&v7;
  result.origin.y = *(double *)&v6;
  result.origin.x = *(double *)&m_ptr;
  return result;
}

- (id)previewController:(id)a3 transitionImageForPreviewItem:(id)a4 contentRect:(CGRect *)a5
{
  CGRect *p_visualSearchPreviewImageBounds;
  int x_low;
  CGFloat v9;
  CGFloat v10;
  CGSize size;
  CGPoint v13;

  p_visualSearchPreviewImageBounds = &self->_visualSearchPreviewImageBounds;
  if (!self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__null_state_)
  {
    v13 = (CGPoint)*MEMORY[0x1E0C9D538];
    -[WKContentView convertRect:toView:](self, "convertRect:toView:", 0, a4, *(double *)&self->_visualSearchPreviewController.m_ptr, *(double *)&self->_visualSearchPreviewImage.m_ptr, *(double *)&self->_visualSearchPreviewImageURL.m_ptr, *(double *)&self->_visualSearchPreviewTitle.m_ptr);
    x_low = LOBYTE(p_visualSearchPreviewImageBounds[1].origin.x);
    p_visualSearchPreviewImageBounds->origin = v13;
    p_visualSearchPreviewImageBounds->size.width = v9;
    p_visualSearchPreviewImageBounds->size.height = v10;
    if (!x_low)
      LOBYTE(p_visualSearchPreviewImageBounds[1].origin.x) = 1;
  }
  size = p_visualSearchPreviewImageBounds->size;
  a5->origin = p_visualSearchPreviewImageBounds->origin;
  a5->size = size;
  return *(id *)&self->_actionsToPerformAfterPendingImageAnalysis.m_capacity;
}

- (void)previewControllerDidDismiss:(id)a3
{
  void *m_buffer;
  const void *v5;
  void *m_ptr;
  const void *v7;

  m_buffer = self->_actionsToPerformAfterPendingImageAnalysis.m_buffer;
  self->_actionsToPerformAfterPendingImageAnalysis.m_buffer = 0;
  if (m_buffer)
    CFRelease(m_buffer);
  v5 = *(const void **)&self->_actionsToPerformAfterPendingImageAnalysis.m_capacity;
  *(_QWORD *)&self->_actionsToPerformAfterPendingImageAnalysis.m_capacity = 0;
  if (v5)
    CFRelease(v5);
  m_ptr = self->_imageAnalyzer.m_ptr;
  self->_imageAnalyzer.m_ptr = 0;
  if (m_ptr)
    CFRelease(m_ptr);
  v7 = *(const void **)&self->_isProceedingWithTextSelectionInImage;
  *(_QWORD *)&self->_isProceedingWithTextSelectionInImage = 0;
  if (v7)
    CFRelease(v7);
  if (self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__null_state_)
    self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__null_state_ = 0;
}

- (int64_t)numberOfPreviewItemsInPreviewController:(id)a3
{
  return 1;
}

- (id)previewController:(id)a3 previewItemAtIndex:(int64_t)a4
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v5 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(WKContentView *, SEL, id, int64_t))*MEMORY[0x1E0DCDEF0])(self, a2, a3, a4)), "initWithDataProvider:contentType:previewTitle:", self, objc_msgSend((id)*MEMORY[0x1E0CEC600], "identifier"), self->_imageAnalyzer.m_ptr);
  if ((objc_opt_respondsToSelector() & 1) == 0)
    return (id)(id)CFMakeCollectable(v5);
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 2);
  v7 = v6;
  v8 = *(_QWORD *)&self->_isProceedingWithTextSelectionInImage;
  if (v8)
    objc_msgSend(v6, "setObject:forKey:", v8, CFSTR("imageURL"));
  WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)self->_page.m_ptr, &v13);
  MEMORY[0x19AEABB0C](&v14, &v13, 0);
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v14;
  if (v14)
  {
    if (*((_DWORD *)v14 + 1))
    {
      objc_msgSend(v7, "setObject:forKey:", WTF::URL::operator NSURL *(), CFSTR("pageURL"), v13);
      v11 = v14;
      v14 = 0;
      if (!v11)
        goto LABEL_16;
    }
    else
    {
      v14 = 0;
    }
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_16:
  if (objc_msgSend(v7, "count", v13, v14))
    objc_msgSend(v5, "setPreviewOptions:", v7);
  if (v7)
    CFRelease(v7);
  return (id)(id)CFMakeCollectable(v5);
}

- (id)provideDataForItem:(id)a3
{
  WebKit *v3;
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v3 = (WebKit *)objc_msgSend(*(id *)&self->_actionsToPerformAfterPendingImageAnalysis.m_capacity, "CGImage", a3);
  WebKit::transcode(v3, (const __CFString *)objc_msgSend((id)*MEMORY[0x1E0CEC600], "identifier"), (__CFData **)&cf);
  v4 = cf;
  cf = 0;
  v5 = (id)CFMakeCollectable(v4);
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
  return (id)v5;
}

- (BOOL)actionSheetAssistant:(id)a3 shouldIncludeShowTextActionForElement:(id)a4
{
  uint64_t v5;

  v5 = PAL::VisionKitCoreLibrary((PAL *)1);
  if (v5)
    LOBYTE(v5) = -[WKContentView hasSelectableTextForImageContextMenu](self, "hasSelectableTextForImageContextMenu");
  return v5;
}

- (void)actionSheetAssistant:(id)a3 showTextForImage:(id)a4 imageURL:(id)a5 title:(id)a6 imageBounds:(CGRect)a7
{
  -[WKContentView presentVisualSearchPreviewControllerForImage:imageURL:title:imageBounds:appearanceActions:](self, "presentVisualSearchPreviewControllerForImage:imageURL:title:imageBounds:appearanceActions:", a4, a5, a6, 8, a7.origin.x, a7.origin.y, a7.size.width, a7.size.height);
}

- (BOOL)actionSheetAssistant:(id)a3 shouldIncludeLookUpImageActionForElement:(id)a4
{
  uint64_t v5;

  v5 = PAL::VisionKitCoreLibrary((PAL *)1);
  if (v5)
    LOBYTE(v5) = -[WKContentView hasVisualSearchResultsForImageContextMenu](self, "hasVisualSearchResultsForImageContextMenu");
  return v5;
}

- (void)actionSheetAssistant:(id)a3 lookUpImage:(id)a4 imageURL:(id)a5 title:(id)a6 imageBounds:(CGRect)a7
{
  -[WKContentView presentVisualSearchPreviewControllerForImage:imageURL:title:imageBounds:appearanceActions:](self, "presentVisualSearchPreviewControllerForImage:imageURL:title:imageBounds:appearanceActions:", a4, a5, a6, 16, a7.origin.x, a7.origin.y, a7.size.width, a7.size.height);
}

- (id)imageAnalyzer
{
  id result;
  const void *v4;

  result = *(id *)&self->_anon_e60[40];
  if (!result)
  {
    result = (id)objc_msgSend(objc_alloc((Class)((uint64_t (*)(_QWORD, SEL))*MEMORY[0x1E0DCE038])(0, a2)), "init");
    v4 = *(const void **)&self->_anon_e60[40];
    *(_QWORD *)&self->_anon_e60[40] = result;
    if (v4)
    {
      CFRelease(v4);
      return *(id *)&self->_anon_e60[40];
    }
  }
  return result;
}

- (void)_tearDownImageAnalysis
{
  void *m_ptr;
  void *v4;
  WTF::StringImpl *v5;

  if (PAL::VisionKitCoreLibrary((PAL *)1))
  {
    objc_msgSend(self->_editDropCaretView.m_ptr, "setDelegate:", 0);
    -[WKContentView removeGestureRecognizer:](self, "removeGestureRecognizer:", self->_editDropCaretView.m_ptr);
    m_ptr = self->_editDropCaretView.m_ptr;
    self->_editDropCaretView.m_ptr = 0;
    if (m_ptr)
      CFRelease(m_ptr);
    if (LOBYTE(self->_editDropTextCursorView.m_ptr))
      LOBYTE(self->_editDropTextCursorView.m_ptr) = 0;
    self->_anon_e60[32] = 0;
    if (self->_anon_e60[0])
      self->_anon_e60[0] = 0;
    v4 = *(void **)&self->_anon_e60[40];
    *(_QWORD *)&self->_anon_e60[40] = 0;
    objc_msgSend(v4, "cancelAllRequests");
    if (v4)
      CFRelease(v4);
    -[WKContentView _invokeAllActionsToPerformAfterPendingImageAnalysis:](self, "_invokeAllActionsToPerformAfterPendingImageAnalysis:", 0);
    -[WKContentView uninstallImageAnalysisInteraction](self, "uninstallImageAnalysisInteraction");
    std::__optional_destruct_base<WebKit::RemoveBackgroundData,false>::reset[abi:sn180100]((uint64_t)&self->_imageAnalysisActionButtons, v5);
    LOBYTE(self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.origin.y) = 0;
    std::__optional_destruct_base<WebKit::ImageAnalysisContextMenuActionData,false>::reset[abi:sn180100]((uint64_t)&self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.size);
  }
}

- (RetainPtr<VKCImageAnalyzerRequest>)createImageAnalyzerRequest:(unint64_t)a3 image:(CGImage *)a4 imageURL:(id)a5
{
  _QWORD *v5;
  _QWORD *v8;
  void *v9;
  void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v8 = v5;
  v9 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(WKContentView *, SEL))*MEMORY[0x1E0DCE108])(self, a2)), "initWithCGImage:orientation:requestType:", a4, 0, a3);
  *v8 = v9;
  objc_msgSend(v9, "setImageURL:", a5);
  v10 = (void *)MEMORY[0x1E0C99E98];
  WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)self->_page.m_ptr, &v13);
  objc_msgSend(v9, "setPageURL:", objc_msgSend(v10, "_web_URLWithWTFString:", &v13));
  v12 = v13;
  v13 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return (RetainPtr<VKCImageAnalyzerRequest>)WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  return (RetainPtr<VKCImageAnalyzerRequest>)v12;
}

- (RetainPtr<VKCImageAnalyzerRequest>)createImageAnalyzerRequest:(unint64_t)a3 image:(CGImage *)a4
{
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;

  v8 = v4;
  v9 = WTF::URL::operator NSURL *();
  if (self)
    return (RetainPtr<VKCImageAnalyzerRequest>)-[WKContentView createImageAnalyzerRequest:image:imageURL:](self, "createImageAnalyzerRequest:image:imageURL:", a3, a4, v9);
  else
    *v8 = 0;
  return (RetainPtr<VKCImageAnalyzerRequest>)v9;
}

- (void)updateImageAnalysisForContextMenuPresentation:(id)a3 elementBounds:(CGRect)a4
{
  double height;
  double width;
  double y;
  double x;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  objc_msgSend(a3, "setPresentingViewControllerForMrcAction:", -[UIView _wk_viewControllerForFullScreenPresentation](self, "_wk_viewControllerForFullScreenPresentation"));
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[WKContentView convertRect:toView:](self, "convertRect:toView:", objc_msgSend((id)objc_msgSend(a3, "presentingViewControllerForMrcAction"), "viewIfLoaded"), x, y, width, height);
    objc_msgSend(a3, "setRectForMrcActionInPresentingViewController:");
  }
}

- (BOOL)validateImageAnalysisRequestIdentifier:()ObjectIdentifierGeneric<WebKit:()WTF:(unsigned long long>)a3 :ObjectIdentifierMainThreadAccessTraits<uint64_t> :ImageAnalysisRequestIdentifierType
{
  BOOL v3;
  BOOL v4;
  NSObject *v7;
  int v9;
  unint64_t m_identifier;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (LOBYTE(self->_editDropTextCursorView.m_ptr))
    v3 = self->_actionToPerformAfterReceivingEditDragSnapshot.m_block == (id)a3.m_identifier;
  else
    v3 = 0;
  v4 = v3;
  if (!v3)
  {
    if (!-[WKContentView hasPendingImageAnalysisRequest](self, "hasPendingImageAnalysisRequest"))
      -[WKContentView _invokeAllActionsToPerformAfterPendingImageAnalysis:](self, "_invokeAllActionsToPerformAfterPendingImageAnalysis:", 0);
    v7 = qword_1ECE71C18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C18, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 134217984;
      m_identifier = a3.m_identifier;
      _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "Image analysis request %llu invalidated.", (uint8_t *)&v9, 0xCu);
    }
  }
  return v4;
}

- (void)requestTextRecognition:(id)a3 imageData:(void *)a4 sourceLanguageIdentifier:(id)a5 targetLanguageIdentifier:(id)a6 completionHandler:(void *)a7
{
  WTF::MonotonicTime *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v16;
  CFTypeRef v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  CFTypeRef v22;
  void *v23;
  void *v24;
  WTF::StringImpl *v25;
  id v26;
  CFTypeRef v27;
  uint64_t v28;
  _QWORD *v29;
  CFTypeRef v30;
  CFTypeRef v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  CFTypeRef v34;
  CFTypeRef v35[2];
  __int128 v36;
  __int128 v37;
  CFTypeRef cf;
  uint64_t v39;

  WebCore::ShareableBitmap::create();
  if (v39)
  {
    WebCore::ShareableBitmap::makeCGImage();
    if (v34)
    {
      if (objc_msgSend(a6, "length"))
      {
        v12 = -[WKContentView imageAnalyzer](self, "imageAnalyzer");
        MEMORY[0x19AEABCC8](v35, a5);
        MEMORY[0x19AEABCC8](&v33, a6);
        WebKit::requestVisualTranslation(v12, (uint64_t)a3, (WTF::StringImpl **)v35, &v33, (uint64_t)v34, (uint64_t *)a7);
        v14 = v33;
        v33 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v13);
          else
            *(_DWORD *)v14 -= 2;
        }
        v25 = (WTF::StringImpl *)v35[0];
        v35[0] = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v13);
          else
            *(_DWORD *)v25 -= 2;
        }
      }
      else
      {
        if (self)
          -[WKContentView createImageAnalyzerRequest:image:](self, "createImageAnalyzerRequest:image:", 1, v34);
        else
          v35[0] = 0;
        v26 = -[WKContentView imageAnalyzer](self, "imageAnalyzer");
        v27 = v35[0];
        v28 = *(_QWORD *)a7;
        *(_QWORD *)a7 = 0;
        v29 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
        *v29 = MEMORY[0x1E0C809A0];
        v29[1] = 50331650;
        v29[2] = WTF::BlockPtr<void ()(VKCImageAnalysis *,NSError *)>::fromCallable<-[WKContentView(WKInteraction) requestTextRecognition:imageData:sourceLanguageIdentifier:targetLanguageIdentifier:completionHandler:]::$_3>(-[WKContentView(WKInteraction) requestTextRecognition:imageData:sourceLanguageIdentifier:targetLanguageIdentifier:completionHandler:]::$_3)::{lambda(void *,VKCImageAnalysis *,NSError *)#1}::__invoke;
        v29[3] = &WTF::BlockPtr<void ()(VKCImageAnalysis *,NSError *)>::fromCallable<-[WKContentView(WKInteraction) requestTextRecognition:imageData:sourceLanguageIdentifier:targetLanguageIdentifier:completionHandler:]::$_3>(-[WKContentView(WKInteraction) requestTextRecognition:imageData:sourceLanguageIdentifier:targetLanguageIdentifier:completionHandler:]::$_3)::descriptor;
        v29[4] = v28;
        objc_msgSend(v26, "processRequest:progressHandler:completionHandler:", v27, 0, v29);
        _Block_release(v29);
        v30 = v35[0];
        v35[0] = 0;
        if (v30)
          CFRelease(v30);
      }
    }
    else
    {
      cf = 0;
      v36 = 0u;
      v37 = 0u;
      *(_OWORD *)v35 = 0u;
      v20 = *(_QWORD *)a7;
      *(_QWORD *)a7 = 0;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v20 + 16))(v20, v35);
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      v22 = cf;
      cf = 0;
      if (v22)
        CFRelease(v22);
      WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v21);
      WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v23);
      WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v24);
    }
    v31 = v34;
    v34 = 0;
    if (v31)
      CFRelease(v31);
  }
  else
  {
    cf = 0;
    v36 = 0u;
    v37 = 0u;
    *(_OWORD *)v35 = 0u;
    v15 = *(_QWORD *)a7;
    *(_QWORD *)a7 = 0;
    (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v15 + 16))(v15, v35);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v17 = cf;
    cf = 0;
    if (v17)
      CFRelease(v17);
    WTF::Vector<WebCore::TextRecognitionBlockData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v16);
    WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v18);
    WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v19);
  }
  v32 = v39;
  v39 = 0;
  if (v32)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v32, v13);
}

- (void)imageAnalysisGestureDidBegin:(id)a3
{
  void *IdentifierInternal;
  CGFloat v6;
  CGFloat v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  CGPoint v18;
  _DWORD *v19;
  _QWORD v20[5];
  id v21;
  uint64_t v22;
  float v23[2];

  if (!-[WKContentView _isPanningScrollViewOrAncestor:](self, "_isPanningScrollViewOrAncestor:", objc_msgSend(a3, "lastTouchedScrollView")))
  {
    IdentifierInternal = (void *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    objc_msgSend(*(id *)&self->_anon_e60[40], "cancelAllRequests");
    if (!LOBYTE(self->_editDropTextCursorView.m_ptr))
      LOBYTE(self->_editDropTextCursorView.m_ptr) = 1;
    self->_actionToPerformAfterReceivingEditDragSnapshot.m_block = IdentifierInternal;
    self->_anon_e60[32] = 0;
    if (self->_anon_e60[0])
      self->_anon_e60[0] = 0;
    LOBYTE(self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.origin.y) = 0;
    std::__optional_destruct_base<WebKit::ImageAnalysisContextMenuActionData,false>::reset[abi:sn180100]((uint64_t)&self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.size);
    objc_msgSend(a3, "locationInView:", self);
    v18.x = v6;
    v18.y = v7;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v23, &v18);
    v8 = roundf(v23[0]);
    v9 = 0x80000000;
    if (v8 > -2147500000.0)
      v9 = (int)v8;
    if (v8 < 2147500000.0)
      v10 = v9;
    else
      v10 = 0x7FFFFFFFLL;
    v11 = roundf(v23[1]);
    v12 = 0x8000000000000000;
    if (v11 > -2147500000.0)
      v12 = (unint64_t)(int)v11 << 32;
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3321888768;
    v20[2] = __61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin___block_invoke;
    v20[3] = &__block_descriptor_56_e8_32c75_ZTSKZ61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin__E4__99_e4285_v648__0_InteractionInformationAtPosition__InteractionInformationRequest__IntPoint_ii_BBBBBBB_B_optional_BOOL_____cB_B_CBBBBBBBBBBBBB_Markable_WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long____WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__::MarkableTraits___ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long____ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___BBBBBB_FloatPoint_ff__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____IntRect__IntPoint_ii__IntSize_ii___RefPtr_WebCore::ShareableBitmap__WTF::RawPtrTraits_WebCore::ShareableBitmap___WTF::DefaultRefDerefTraits_WebCore::ShareableBitmap_____ShareableBitmap___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___f_FloatRect__FloatPoint_ff__FloatSize_ff___optional_WebCore::Cursor_____c_Cursor_C_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___IntPoint_ii__v__B__TextIndicatorData__FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___Vector_WebCore::FloatRect__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____FloatRect_II_f_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___Color_Q_C_OptionSet_WebCore::TextIndicatorOption__S___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____RetainPtr_NSArray___v__IntRect__IntPoint_ii__IntSize_ii___optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___B__optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___B__Vector_WebCore::ElementAnimationContext__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____ElementAnimationContext_II__8l;
    if (v11 < 2147500000.0)
      v13 = v12;
    else
      v13 = 0x7FFFFFFF00000000;
    *(_QWORD *)&v18.x = IdentifierInternal;
    v18.y = 0.0;
    objc_initWeak((id *)&v18.y, self);
    v14 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    objc_initWeak((id *)(v14 + 8), self);
    *(_BYTE *)(v14 + 16) = 0;
    v19 = (_DWORD *)v14;
    v20[4] = *(_QWORD *)&v18.x;
    v21 = 0;
    objc_copyWeak(&v21, (id *)&v18.y);
    v15 = v19;
    if (v19)
      ++*v19;
    v22 = (uint64_t)v15;
    -[WKContentView doAfterPositionInformationUpdate:forRequest:](self, "doAfterPositionInformationUpdate:forRequest:", v20, v13 | v10, 0x101000000);
    v16 = (uint64_t)v19;
    v19 = 0;
    if (v16)
      WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(v16);
    objc_destroyWeak((id *)&v18.y);
    v17 = v22;
    v22 = 0;
    if (v17)
      WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(v17);
    objc_destroyWeak(&v21);
  }
}

void __61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin___block_invoke(uint64_t a1, id *a2)
{
  id *v4;
  id WeakRetained;
  const WTF::StringImpl *v6;
  uint64_t v7;
  WebCore::ShareableBitmap *v9;
  NSObject *v10;
  CFTypeRef v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  id v17;
  __int128 v18;
  __int128 v19;
  WTF::MonotonicTime *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef v28;
  void *v29;
  CFTypeRef cf;
  uint64_t v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  id v38;
  CFTypeRef v39;
  _DWORD *v40;
  uint64_t v41;
  __int128 buf;
  void (*v43)(uint64_t, void *);
  void *v44;
  uint64_t v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  id v52;
  CFTypeRef v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if ((objc_msgSend(WeakRetained, "validateImageAnalysisRequestIdentifier:", *(_QWORD *)(a1 + 32)) & 1) == 0)
  {
LABEL_13:
    if (!WeakRetained)
      return;
    goto LABEL_14;
  }
  if (!*((_BYTE *)a2 + 25))
  {
    v7 = *(_QWORD *)(*((_QWORD *)WeakRetained + 55) + 224);
    {
      WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key, v6)|| *((_BYTE *)a2 + 30) == 0)
    {
      goto LABEL_12;
    }
  }
  v9 = (WebCore::ShareableBitmap *)a2[24];
  if (!v9 || !*((_BYTE *)a2 + 608) || *((_BYTE *)a2 + 27) || *((_BYTE *)a2 + 32) || !*((_BYTE *)WeakRetained + 3624))
  {
LABEL_12:
    objc_msgSend(WeakRetained, "_invokeAllActionsToPerformAfterPendingImageAnalysis:", 0);
    goto LABEL_13;
  }
  WebCore::ShareableBitmap::makeCGImageCopy(v9);
  if (cf)
  {
    v10 = qword_1ECE71C18;
    v11 = (CFTypeRef)os_log_type_enabled((os_log_t)qword_1ECE71C18, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(a1 + 32);
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v12;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "Image analysis preflight gesture initiated (request %llu).", (uint8_t *)&buf, 0xCu);
    }
    v13 = *((_OWORD *)a2 + 34);
    *((_OWORD *)WeakRetained + 227) = *((_OWORD *)a2 + 33);
    *((_OWORD *)WeakRetained + 228) = v13;
    v15 = *((_OWORD *)a2 + 36);
    v14 = *((_OWORD *)a2 + 37);
    v16 = *((_OWORD *)a2 + 35);
    *((_BYTE *)WeakRetained + 3712) = *((_BYTE *)a2 + 608);
    *((_OWORD *)WeakRetained + 230) = v15;
    *((_OWORD *)WeakRetained + 231) = v14;
    *((_OWORD *)WeakRetained + 229) = v16;
    if (*((_BYTE *)a2 + 608))
    {
      v17 = *a2;
      v18 = *((_OWORD *)a2 + 36);
      v58 = *((_OWORD *)a2 + 35);
      v59 = v18;
      v60 = *((_OWORD *)a2 + 37);
      v19 = *((_OWORD *)a2 + 34);
      v56 = *((_OWORD *)a2 + 33);
      v57 = v19;
      v20 = (WTF::MonotonicTime *)objc_msgSend(WeakRetained, "createImageAnalyzerRequest:image:", 1, cf);
      if (*((_BYTE *)a2 + 30))
        v20 = (WTF::MonotonicTime *)objc_msgSend(v29, "setImageSource:", 2);
      if (*((_BYTE *)a2 + 58))
      {
        objc_msgSend(WeakRetained, "_completeImageAnalysisRequestForContextMenu:requestIdentifier:hasTextResults:", cf, *(_QWORD *)(a1 + 32), 1);
LABEL_43:
        if (v29)
          CFRelease(v29);
        goto LABEL_45;
      }
      WTF::MonotonicTime::now(v20);
      v22 = v21;
      v23 = (void *)objc_msgSend(WeakRetained, "imageAnalyzer");
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      *((_QWORD *)&buf + 1) = 3321888768;
      v43 = ___ZZ61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin__EN4__99clEN6WebKit32InteractionInformationAtPositionE_block_invoke;
      v44 = &__block_descriptor_160_e16_32c156_ZTSKZZ61__WKContentView_WKInteraction__imageAnalysisGestureDidBegin__EN4__99clEN6WebKit32InteractionInformationAtPositionEEUlP16VKCImageAnalysisP7NSErrorE__e38_v24__0__VKCImageAnalysis_8__NSError_16l;
      a2 = &v32;
      v31 = *(_QWORD *)(a1 + 32);
      v32 = 0;
      objc_copyWeak(&v32, v4);
      v35 = v58;
      v36 = v59;
      v33 = v56;
      v34 = v57;
      *(_QWORD *)&v37 = v60;
      v38 = v17;
      v39 = cf;
      CFRetain(cf);
      v24 = *(_DWORD **)(a1 + 48);
      if (v24)
        ++*v24;
      v40 = v24;
      v41 = v22;
      v4 = &v46;
      v45 = v31;
      v46 = 0;
      objc_copyWeak(&v46, &v32);
      v49 = v35;
      v50 = v36;
      v51 = v37;
      v47 = v33;
      v48 = v34;
      v52 = v38;
      v53 = v39;
      if (v39)
        CFRetain(v39);
      v25 = v40;
      if (v40)
        ++*v40;
      v54 = (uint64_t)v25;
      v55 = v41;
      objc_msgSend(v23, "processRequest:progressHandler:completionHandler:", v29, 0, &buf);
      v26 = (uint64_t)v40;
      v40 = 0;
      if (v26)
        WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(v26);
      v11 = v39;
      v39 = 0;
      if (!v11)
      {
LABEL_38:
        objc_destroyWeak(a2);
        v27 = v54;
        v54 = 0;
        if (v27)
          WTF::RefCounted<WebKit::ImageAnalysisGestureDeferralToken>::deref(v27);
        v28 = v53;
        v53 = 0;
        if (v28)
          CFRelease(v28);
        objc_destroyWeak(v4);
        goto LABEL_43;
      }
    }
    else
    {
      __break(1u);
    }
    CFRelease(v11);
    goto LABEL_38;
  }
  objc_msgSend(WeakRetained, "_invokeAllActionsToPerformAfterPendingImageAnalysis:", 0);
LABEL_45:
  if (cf)
    CFRelease(cf);
LABEL_14:
  CFRelease(WeakRetained);
}

- (void)_completeImageAnalysisRequestForContextMenu:(CGImage *)a3 requestIdentifier:()ObjectIdentifierGeneric<WebKit:()WTF:(unsigned long long>)a4 :(BOOL)a5 ObjectIdentifierMainThreadAccessTraits<uint64_t> :ImageAnalysisRequestIdentifierType hasTextResults:
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  WTF::MonotonicTime *v16;
  WTF *v17;
  WTF *v18;
  id v19;
  id v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  void *v27;
  WTF *v28;
  unsigned int *v29;
  const WTF::StringImpl *v30;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  unsigned int *v40;
  WTF *v41;
  unsigned int *v42;
  id v43;
  void *v44;
  uint64_t v45;
  id to;
  WTF *v47;
  WTF *v48;
  unsigned int *v49;
  WTF *v50;
  IntRect v51;
  _QWORD v52[5];
  id v53[2];
  unsigned int *v54;
  WTF *v55;
  IntRect v56;
  IntRect bounds;
  id v58;
  id location;

  LOBYTE(self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.origin.y) = 1;
  std::__optional_destruct_base<WebKit::ImageAnalysisContextMenuActionData,false>::reset[abi:sn180100]((uint64_t)&self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.size);
  -[WKContentView _invokeAllActionsToPerformAfterPendingImageAnalysis:](self, "_invokeAllActionsToPerformAfterPendingImageAnalysis:", 0);
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 8) = a5;
  location = 0;
  objc_initWeak(&location, self);
  to = 0;
  objc_copyWeak(&to, &location);
  do
    v10 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v10 + 1, (unsigned int *)v9));
  v47 = (WTF *)v9;
  v11 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v11 = off_1E3507D38;
  *(_QWORD *)(v11 + 8) = 0;
  objc_moveWeak((id *)(v11 + 8), &to);
  v12 = v47;
  v47 = 0;
  *(_QWORD *)(v11 + 16) = v12;
  v14 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v11;
  v15 = v47;
  v47 = 0;
  if (v15)
    WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref(v15, v13);
  objc_destroyWeak(&to);
  v16 = -[WKContentView createImageAnalyzerRequest:image:](self, "createImageAnalyzerRequest:image:", 28, a3);
  if (self->_positionInformation.isPausedVideo)
    v16 = (WTF::MonotonicTime *)objc_msgSend(v58, "setImageSource:", 2);
  bounds = self->_positionInformation.bounds;
  WTF::MonotonicTime::now(v16);
  v18 = v17;
  v19 = -[WKContentView imageAnalyzer](self, "imageAnalyzer");
  v20 = v58;
  v52[0] = MEMORY[0x1E0C809B0];
  v52[1] = 3321888768;
  v52[2] = __109__WKContentView_WKInteraction___completeImageAnalysisRequestForContextMenu_requestIdentifier_hasTextResults___block_invoke;
  v52[3] = &__block_descriptor_88_e8_32c125_ZTSKZ109__WKContentView_WKInteraction___completeImageAnalysisRequestForContextMenu_requestIdentifier_hasTextResults__E5__101_e38_v24__0__VKCImageAnalysis_8__NSError_16l;
  to = (id)a4.m_identifier;
  v47 = 0;
  objc_copyWeak((id *)&v47, &location);
  v48 = v18;
  do
    v21 = __ldaxr((unsigned int *)v14);
  while (__stlxr(v21 + 1, (unsigned int *)v14));
  v49 = (unsigned int *)v14;
  do
    v22 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v22 + 1, (unsigned int *)v9));
  v50 = (WTF *)v9;
  v51 = bounds;
  v52[4] = to;
  v53[0] = 0;
  objc_copyWeak(v53, (id *)&v47);
  v23 = v49;
  v53[1] = v48;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  v54 = v23;
  v25 = (unsigned int *)v50;
  if (v50)
  {
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
  }
  v55 = (WTF *)v25;
  v56 = v51;
  objc_msgSend(v19, "processRequest:progressHandler:completionHandler:", v20, 0, v52);
  v28 = v50;
  v50 = 0;
  if (v28)
    WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref(v28, v27);
  v29 = v49;
  v49 = 0;
  if (v29)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v29);
  objc_destroyWeak((id *)&v47);
  v31 = *((_QWORD *)self->_page.m_ptr + 28);
  {
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v31 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::removeBackgroundEnabledKey(void)::key, v30))
  {
    to = 0;
    objc_initWeak(&to, self);
    do
      v33 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v33 + 1, (unsigned int *)v14));
    v47 = (WTF *)v14;
    do
      v34 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v34 + 1, (unsigned int *)v9));
    v48 = (WTF *)v9;
    v35 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v35 = off_1E3507D60;
    *(_QWORD *)(v35 + 8) = 0;
    objc_moveWeak((id *)(v35 + 8), &to);
    *(_QWORD *)(v35 + 16) = v47;
    v36 = v48;
    v47 = 0;
    v48 = 0;
    *(_QWORD *)(v35 + 24) = v36;
    v45 = v35;
    WebKit::requestBackgroundRemoval(a3, &v45);
    v38 = v45;
    v45 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v48;
    v48 = 0;
    if (v39)
      WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref(v39, v37);
    v40 = (unsigned int *)v47;
    v47 = 0;
    if (v40)
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v40);
    objc_destroyWeak(&to);
  }
  v41 = v55;
  v55 = 0;
  if (v41)
    WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref(v41, v32);
  v42 = v54;
  v54 = 0;
  if (v42)
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref(v42);
  objc_destroyWeak(v53);
  v43 = v58;
  v58 = 0;
  if (v43)
    CFRelease(v43);
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)2>,(WTF::DestructionThread)2>::deref((unsigned int *)v14);
  objc_destroyWeak(&location);
  WTF::ThreadSafeRefCounted<WTF::Box<WebKit::ImageAnalysisContextMenuActionData>::Data,(WTF::DestructionThread)0>::deref((WTF *)v9, v44);
}

void __109__WKContentView_WKInteraction___completeImageAnalysisRequestForContextMenu_requestIdentifier_hasTextResults___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained;
  void *v7;
  int v8;
  NSObject *v9;
  _BOOL8 v10;
  double v11;
  double v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  int v18;
  double v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v8 = objc_msgSend(a2, "hasResultsForAnalysisTypes:", 16);
    v9 = qword_1ECE71C18;
    v10 = os_log_type_enabled((os_log_t)qword_1ECE71C18, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
      v12 = (v11 - *(double *)(a1 + 48)) * 1000.0;
      v13 = *(_QWORD *)(a1 + 32);
      v18 = 134218496;
      v19 = v12;
      v20 = 2048;
      v21 = v13;
      v22 = 1024;
      v23 = v8;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "Image analysis completed in %.0f ms (request %llu; found visual search results? %d)",
        (uint8_t *)&v18,
        0x1Cu);
    }
    if (a2 && !a3)
    {
      WebCore::IntRect::operator CGRect();
      objc_msgSend(v7, "updateImageAnalysisForContextMenuPresentation:elementBounds:", a2);
      if (objc_msgSend((id)objc_msgSend(a2, "barcodeActions"), "indexOfObjectPassingTest:", &__block_literal_global_2858) == 0x7FFFFFFFFFFFFFFFLL)
      {
        v14 = (const void *)objc_msgSend(a2, "mrcMenu");
        v15 = v14;
        v16 = *(_QWORD *)(a1 + 64);
        if (v14)
          CFRetain(v14);
        v17 = *(const void **)(v16 + 24);
        *(_QWORD *)(v16 + 24) = v15;
        if (v17)
          CFRelease(v17);
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 64) + 9) = v8;
    }
    CFRelease(v7);
  }
}

- (void)_insertDynamicImageAnalysisContextMenuItemsIfPossible
{
  UIContextMenuInteraction *v2;
  _QWORD *v3;
  char v4;
  WKContentView *v5;

  v5 = self;
  v4 = 0;
  v2 = -[WKContentView contextMenuInteraction](self, "contextMenuInteraction");
  v3 = malloc_type_malloc(0x30uLL, 0x10F00403496527AuLL);
  *v3 = MEMORY[0x1E0C809A0];
  v3[1] = 50331650;
  v3[2] = WTF::BlockPtr<UIMenu * ()(UIMenu *)>::fromCallable<-[WKContentView(WKInteraction) _insertDynamicImageAnalysisContextMenuItemsIfPossible]::$_4>(-[WKContentView(WKInteraction) _insertDynamicImageAnalysisContextMenuItemsIfPossible]::$_4)::{lambda(void *,UIMenu *)#1}::__invoke;
  v3[3] = &WTF::BlockPtr<UIMenu * ()(UIMenu *)>::fromCallable<-[WKContentView(WKInteraction) _insertDynamicImageAnalysisContextMenuItemsIfPossible]::$_4>(-[WKContentView(WKInteraction) _insertDynamicImageAnalysisContextMenuItemsIfPossible]::$_4)::descriptor;
  v3[4] = &v4;
  v3[5] = &v5;
  -[UIContextMenuInteraction updateVisibleMenuWithBlock:](v2, "updateVisibleMenuWithBlock:", v3);
  _Block_release(v3);
  LOBYTE(v5->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.origin.y) = 2 * (v4 == 0);
}

- (void)imageAnalysisGestureDidFail:(id)a3
{
  -[WKContentView _endImageAnalysisGestureDeferral:](self, "_endImageAnalysisGestureDeferral:", 0);
}

- (void)captureTextFromCameraForWebView:(id)a3
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)WKContentView;
  -[WKContentView captureTextFromCamera:](&v3, sel_captureTextFromCamera_, a3);
}

- (BOOL)actionSheetAssistantShouldIncludeCopySubjectAction:(id)a3
{
  return -[WKContentView copySubjectResultForImageContextMenu](self, "copySubjectResultForImageContextMenu", a3) != 0;
}

- (void)actionSheetAssistant:(id)a3 copySubject:(id)a4 sourceMIMEType:(id)a5
{
  CGImage *v7;
  const WTF::String *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  void *v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  _QWORD v17[4];
  CFTypeRef v18;
  CFTypeRef cf;
  WTF::StringImpl *v20;
  const void *v21;
  const void *v22;

  if (-[WKContentView copySubjectResultForImageContextMenu](self, "copySubjectResultForImageContextMenu", a3, a4))
  {
    v7 = -[WKContentView copySubjectResultForImageContextMenu](self, "copySubjectResultForImageContextMenu");
    MEMORY[0x19AEABCC8](&v20, a5);
    WebKit::imageDataForRemoveBackground(v7, &v20, v8, (WebKit *)&v21);
    v10 = v20;
    v20 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (v21)
    {
      v11 = (void *)MEMORY[0x1E0CEA810];
      v12 = -[WKContentView _dataOwnerForCopy](self, "_dataOwnerForCopy");
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3321888768;
      v17[2] = __80__WKContentView_WKInteraction__actionSheetAssistant_copySubject_sourceMIMEType___block_invoke;
      v17[3] = &__block_descriptor_48_e8_32c95_ZTSKZ80__WKContentView_WKInteraction__actionSheetAssistant_copySubject_sourceMIMEType__E5__103_e5_v8__0l;
      v13 = v21;
      v14 = v22;
      v21 = 0;
      v22 = 0;
      v18 = v13;
      if (v13)
        CFRetain(v13);
      cf = v14;
      if (v14)
        CFRetain(v14);
      objc_msgSend(v11, "_performAsDataOwner:block:", v12, v17);
      if (v14)
        CFRelease(v14);
      if (v13)
        CFRelease(v13);
      if (cf)
        CFRelease(cf);
      if (v18)
        CFRelease(v18);
    }
    v15 = v22;
    v22 = 0;
    if (v15)
      CFRelease(v15);
    v16 = v21;
    v21 = 0;
    if (v16)
      CFRelease(v16);
  }
}

uint64_t __80__WKContentView_WKInteraction__actionSheetAssistant_copySubject_sourceMIMEType___block_invoke(uint64_t a1)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA810], "generalPasteboard"), "setData:forPasteboardType:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

- (CGRect)contentsRectForImageAnalysisInteraction:(id)a3
{
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CGRect v11;
  float32x2_t v12;
  float v13;
  float v14;
  __int128 v15;
  CGRect result;

  v15 = *(_OWORD *)&self->_imageAnalysisContextMenuActionData.__engaged_;
  -[WKContentView bounds](self, "bounds", a3);
  v11.origin.x = v3;
  v11.origin.y = v4;
  v11.size.width = v5;
  v11.size.height = v6;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v12, &v11);
  *(float32x2_t *)&v15 = vsub_f32(*(float32x2_t *)&v15, v12);
  WebCore::FloatRect::scale((WebCore::FloatRect *)&v15, 1.0 / v13, 1.0 / v14);
  WebCore::FloatRect::operator CGRect();
  result.size.height = v10;
  result.size.width = v9;
  result.origin.y = v8;
  result.origin.x = v7;
  return result;
}

- (BOOL)imageAnalysisInteraction:(id)a3 shouldBeginAtPoint:(CGPoint)a4 forAnalysisType:(unint64_t)a5
{
  double y;
  double x;

  y = a4.y;
  x = a4.x;
  if ((objc_msgSend(a3, "hasActiveTextSelection") & 1) != 0)
    return 1;
  else
    return objc_msgSend(a3, "interactableItemExistsAtPoint:", x, y);
}

- (void)beginTextRecognitionForFullscreenVideo:(void *)a3 playerViewController:(id)a4
{
  void *v6;
  id v7;
  CFTypeRef v8;
  CFTypeRef v9;
  void *v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  WTF *v14;
  id location;
  CFTypeRef cf;
  CFTypeRef v17;
  CFTypeRef v18;
  WTF *v19;
  id to;
  CFTypeRef v21;

  if (!*(_DWORD *)&self->_imageAnalysisContextMenuActionData.var0.__null_state_)
  {
    WebCore::ShareableBitmap::create();
    if (v19)
    {
      WebCore::ShareableBitmap::makeCGImage();
      if (v18)
      {
        -[WKContentView createImageAnalyzerRequest:image:](self, "createImageAnalyzerRequest:image:", 61);
        objc_msgSend((id)v17, "setImageSource:", 2);
        v7 = -[WKContentView imageAnalyzer](self, "imageAnalyzer");
        v8 = v17;
        location = 0;
        objc_initWeak(&location, self);
        cf = a4;
        if (a4)
          CFRetain(a4);
        to = 0;
        objc_moveWeak(&to, &location);
        v9 = cf;
        cf = 0;
        v21 = v9;
        v10 = malloc_type_malloc(0x30uLL, 0x10E004016A945A2uLL);
        *(_QWORD *)v10 = MEMORY[0x1E0C809A0];
        *((_QWORD *)v10 + 1) = 50331650;
        *((_QWORD *)v10 + 2) = WTF::BlockPtr<void ()(VKCImageAnalysis *,NSError *)>::fromCallable<-[WKContentView(WKInteraction) beginTextRecognitionForFullscreenVideo:playerViewController:]::$_5>(-[WKContentView(WKInteraction) beginTextRecognitionForFullscreenVideo:playerViewController:]::$_5)::{lambda(void *,VKCImageAnalysis *,NSError *)#1}::__invoke;
        *((_QWORD *)v10 + 3) = &WTF::BlockPtr<void ()(VKCImageAnalysis *,NSError *)>::fromCallable<-[WKContentView(WKInteraction) beginTextRecognitionForFullscreenVideo:playerViewController:]::$_5>(-[WKContentView(WKInteraction) beginTextRecognitionForFullscreenVideo:playerViewController:]::$_5)::descriptor;
        *((_QWORD *)v10 + 4) = 0;
        objc_moveWeak((id *)v10 + 4, &to);
        *((_QWORD *)v10 + 5) = v21;
        v21 = 0;
        objc_destroyWeak(&to);
        *(_DWORD *)&self->_imageAnalysisContextMenuActionData.var0.__null_state_ = objc_msgSend(v7, "processRequest:progressHandler:completionHandler:", v8, 0, v10);
        _Block_release(v10);
        v11 = cf;
        cf = 0;
        if (v11)
          CFRelease(v11);
        objc_destroyWeak(&location);
        v12 = v17;
        v17 = 0;
        if (v12)
          CFRelease(v12);
        v13 = v18;
        v18 = 0;
        if (v13)
          CFRelease(v13);
      }
      v14 = v19;
      v19 = 0;
      if (v14)
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v14, v6);
    }
  }
}

- (void)cancelTextRecognitionForFullscreenVideo:(id)a3
{
  int v4;

  v4 = *(_DWORD *)&self->_imageAnalysisContextMenuActionData.var0.__null_state_;
  *(_DWORD *)&self->_imageAnalysisContextMenuActionData.var0.__null_state_ = 0;
  if (v4)
    objc_msgSend(*(id *)&self->_anon_e60[40], "cancelRequestID:");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(a3, "setImageAnalysis:", 0);
}

- (BOOL)isTextRecognitionInFullscreenVideoEnabled
{
  const WTF::StringImpl *v2;
  uint64_t v3;

  v3 = *((_QWORD *)self->_page.m_ptr + 28);
  {
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v3 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key, v2);
}

- (void)beginTextRecognitionForVideoInElementFullscreen:(void *)a3 bounds:(FloatRect)a4
{
  float m_height;
  float m_width;
  float m_y;
  float m_x;
  uint64_t CGImage;
  void *v10;
  void *v11;
  id v12;
  CFTypeRef v13;
  WTF *v14;
  id v15;
  __int128 v16;
  _QWORD v17[4];
  id v18;
  __int128 v19;
  CFTypeRef cf;
  WTF *v21;

  m_height = a4.m_size.m_height;
  m_width = a4.m_size.m_width;
  m_y = a4.m_location.m_y;
  m_x = a4.m_location.m_x;
  WebCore::ShareableBitmap::create();
  if (v21)
  {
    CGImage = WebCore::ShareableBitmap::makeCGImage();
    if (cf)
    {
      v11 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(uint64_t))*MEMORY[0x1E0DCE108])(CGImage)), "initWithCGImage:orientation:requestType:", cf, 0, 45);
      objc_msgSend(v11, "setImageSource:", 2);
      v12 = -[WKContentView imageAnalyzer](self, "imageAnalyzer");
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3321888768;
      v17[2] = __87__WKContentView_WKInteraction__beginTextRecognitionForVideoInElementFullscreen_bounds___block_invoke;
      v17[3] = &__block_descriptor_56_e8_32c102_ZTSKZ87__WKContentView_WKInteraction__beginTextRecognitionForVideoInElementFullscreen_bounds__E5__104_e38_v24__0__VKCImageAnalysis_8__NSError_16l;
      v15 = 0;
      objc_initWeak(&v15, self);
      *(_QWORD *)&v16 = __PAIR64__(LODWORD(m_y), LODWORD(m_x));
      *((_QWORD *)&v16 + 1) = __PAIR64__(LODWORD(m_height), LODWORD(m_width));
      v18 = 0;
      objc_copyWeak(&v18, &v15);
      v19 = v16;
      *(_DWORD *)&self->_imageAnalysisContextMenuActionData.var0.__null_state_ = objc_msgSend(v12, "processRequest:progressHandler:completionHandler:", v11, 0, v17);
      objc_destroyWeak(&v15);
      objc_destroyWeak(&v18);
      if (v11)
        CFRelease(v11);
      v13 = cf;
      cf = 0;
      if (v13)
        CFRelease(v13);
    }
    v14 = v21;
    v21 = 0;
    if (v14)
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v14, v10);
  }
}

void __87__WKContentView_WKInteraction__beginTextRecognitionForVideoInElementFullscreen_bounds___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *WeakRetained;
  const void *v7;

  WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = WeakRetained;
    if (*((_DWORD *)WeakRetained + 976))
    {
      *((_DWORD *)WeakRetained + 976) = 0;
      if (a2)
      {
        if (!a3)
        {
          *(_OWORD *)(WeakRetained + 3928) = *(_OWORD *)(a1 + 40);
          objc_msgSend(WeakRetained, "installImageAnalysisInteraction:", a2);
        }
      }
    }
    CFRelease(v7);
  }
}

- (void)cancelTextRecognitionForVideoInElementFullscreen
{
  uint64_t v3;

  -[WKContentView uninstallImageAnalysisInteraction](self, "uninstallImageAnalysisInteraction");
  v3 = *(unsigned int *)&self->_imageAnalysisContextMenuActionData.var0.__null_state_;
  *(_DWORD *)&self->_imageAnalysisContextMenuActionData.var0.__null_state_ = 0;
  if ((_DWORD)v3)
    objc_msgSend(-[WKContentView imageAnalyzer](self, "imageAnalyzer"), "cancelRequestID:", v3);
}

- (void)installImageAnalysisInteraction:(id)a3
{
  void *m_ptr;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  _QWORD v17[4];
  id v18;
  _BYTE location[12];
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  m_ptr = self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr;
  if (!m_ptr)
  {
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", 1);
    v7 = self->_imageAnalysisContextMenuActionData.var0.__val_.machineReadableCodeMenu.m_ptr;
    self->_imageAnalysisContextMenuActionData.var0.__val_.machineReadableCodeMenu.m_ptr = v6;
    if (v7)
      CFRelease(v7);
    v8 = (void *)objc_msgSend(objc_alloc((Class)((uint64_t (*)(void))*MEMORY[0x1E0DCE198])()), "init");
    v9 = self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr;
    self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr = v8;
    if (v9)
    {
      CFRelease(v9);
      v8 = self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr;
    }
    objc_msgSend(v8, "setDelegate:", self);
    objc_msgSend(self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr, "setAnalysisButtonRequiresVisibleContentGating:", 1);
    v10 = self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr;
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3321888768;
    v17[2] = __64__WKContentView_WKInteraction__installImageAnalysisInteraction___block_invoke;
    v17[3] = &__block_descriptor_40_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__installImageAnalysisInteraction__E5__105_e18_v16__0__UIButton_8l;
    *(_QWORD *)location = 0;
    objc_initWeak((id *)location, self);
    v18 = 0;
    objc_copyWeak(&v18, (id *)location);
    objc_msgSend(v10, "setQuickActionConfigurationUpdateHandler:", v17);
    objc_destroyWeak((id *)location);
    v11 = self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr;
    objc_msgSend(v11, "setActiveInteractionTypes:", 3);
    objc_msgSend(v11, "setWantsAutomaticContentsRectCalculation:", 0);
    objc_msgSend(v11, "setActionInfoLiveTextButtonDisabled:", 0);
    objc_msgSend(v11, "setActionInfoQuickActionsDisabled:", 0);
    objc_msgSend(v11, "setActionInfoViewHidden:animated:", 0, 1);
    -[WKContentView addInteraction:](self, "addInteraction:", self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr);
    v12 = qword_1ECE71C18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C18, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(float *)&self->_imageAnalysisContextMenuActionData.__engaged_;
      v14 = *((float *)&self->_imageAnalysisContextMenuActionData.__engaged_ + 1);
      v15 = *(float *)&self->_fullscreenVideoImageAnalysisRequestIdentifier;
      v16 = *((float *)&self->_fullscreenVideoImageAnalysisRequestIdentifier + 1);
      *(_DWORD *)location = 134218752;
      *(double *)&location[4] = v13;
      v20 = 2048;
      v21 = v14;
      v22 = 2048;
      v23 = v15;
      v24 = 2048;
      v25 = v16;
      _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "Installing image analysis interaction at {{ %.0f, %.0f }, { %.0f, %.0f }}", location, 0x2Au);
    }
    objc_destroyWeak(&v18);
    m_ptr = self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr;
  }
  objc_msgSend(m_ptr, "setAnalysis:", a3);
  objc_msgSend(self->_imageAnalysisDeferringGestureRecognizer.m_ptr, "setEnabled:", 0);
  objc_msgSend(self->_editDropCaretView.m_ptr, "setEnabled:", 0);
}

void __64__WKContentView_WKInteraction__installImageAnalysisInteraction___block_invoke(uint64_t a1, uint64_t a2)
{
  id *WeakRetained;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained[490], "addObject:", a2);
    CFRelease(v4);
  }
}

- (void)uninstallImageAnalysisInteraction
{
  void *m_ptr;
  NSObject *v4;
  void *v5;
  void *v6;
  uint8_t v7[16];

  m_ptr = self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr;
  if (m_ptr)
  {
    v4 = qword_1ECE71C18;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "Uninstalling image analysis interaction", v7, 2u);
      m_ptr = self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr;
    }
    -[WKContentView removeInteraction:](self, "removeInteraction:", m_ptr);
    objc_msgSend(self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr, "setDelegate:", 0);
    objc_msgSend(self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr, "setQuickActionConfigurationUpdateHandler:", 0);
    v5 = self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr;
    self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr = 0;
    if (v5)
      CFRelease(v5);
    v6 = self->_imageAnalysisContextMenuActionData.var0.__val_.machineReadableCodeMenu.m_ptr;
    self->_imageAnalysisContextMenuActionData.var0.__val_.machineReadableCodeMenu.m_ptr = 0;
    if (v6)
      CFRelease(v6);
    *(_QWORD *)&self->_imageAnalysisContextMenuActionData.__engaged_ = 0;
    *(_QWORD *)&self->_fullscreenVideoImageAnalysisRequestIdentifier = 0;
    objc_msgSend(self->_imageAnalysisDeferringGestureRecognizer.m_ptr, "setEnabled:", PAL::VisionKitCoreLibrary((PAL *)1) != 0);
    objc_msgSend(self->_editDropCaretView.m_ptr, "setEnabled:", PAL::VisionKitCoreLibrary((PAL *)1) != 0);
  }
}

- (BOOL)_shouldAvoidSecurityHeuristicScoreUpdates
{
  return objc_msgSend(self->_imageAnalysisContextMenuActionData.var0.__val_.copySubjectResult.m_ptr, "hasActiveTextSelection");
}

- (BOOL)isImageBacked
{
  WebPageProxy *m_ptr;

  m_ptr = self->_page.m_ptr;
  return m_ptr && *(_BYTE *)(*((_QWORD *)m_ptr + 4) + 235) != 0;
}

- (void)willPresentEditMenuWithAnimator:(id)a3
{
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v6 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3321888768;
  v7[2] = __64__WKContentView_WKInteraction__willPresentEditMenuWithAnimator___block_invoke;
  v7[3] = &__block_descriptor_40_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__willPresentEditMenuWithAnimator__E5__106_e5_v8__0l;
  objc_initWeak(&v6, self);
  v8 = 0;
  objc_copyWeak(&v8, &v6);
  objc_msgSend(a3, "addCompletion:", v7);
  objc_destroyWeak(&v6);
  v5 = (void *)objc_msgSend(-[WKContentView webView](self, "webView"), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v5, "webView:willPresentEditMenuWithAnimator:", -[WKContentView webView](self, "webView"), a3);
  objc_destroyWeak(&v8);
}

void __64__WKContentView_WKInteraction__willPresentEditMenuWithAnimator___block_invoke(uint64_t a1)
{
  _BYTE *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[2996] = 1;
    CFRelease(WeakRetained);
  }
}

- (void)willDismissEditMenuWithAnimator:(id)a3
{
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v6 = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3321888768;
  v7[2] = __64__WKContentView_WKInteraction__willDismissEditMenuWithAnimator___block_invoke;
  v7[3] = &__block_descriptor_40_e8_32c79_ZTSKZ64__WKContentView_WKInteraction__willDismissEditMenuWithAnimator__E5__107_e5_v8__0l;
  objc_initWeak(&v6, self);
  v8 = 0;
  objc_copyWeak(&v8, &v6);
  objc_msgSend(a3, "addCompletion:", v7);
  objc_destroyWeak(&v6);
  v5 = (void *)objc_msgSend(-[WKContentView webView](self, "webView"), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v5, "webView:willDismissEditMenuWithAnimator:", -[WKContentView webView](self, "webView"), a3);
  objc_destroyWeak(&v8);
}

void __64__WKContentView_WKInteraction__willDismissEditMenuWithAnimator___block_invoke(uint64_t a1)
{
  _BYTE *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[2996] = 0;
    CFRelease(WeakRetained);
  }
}

- (BOOL)isPresentingEditMenu
{
  return self->_inspectorNodeSearchEnabled;
}

- (CGSize)sizeForLegacyFormControlPickerViews
{
  double v2;
  double v3;
  double v4;
  CGSize result;

  objc_msgSend((id)-[WKContentView window](self, "window"), "bounds");
  v3 = v2;
  v4 = 0.0;
  result.height = v4;
  result.width = v3;
  return result;
}

- (void)_logMissingSystemInputDelegateIfNeeded:(const char *)a3
{
  double v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!objc_loadWeak((id *)&self->_anon_fa8[24]))
  {
    WTF::ApproximateTime::now(0);
    v5 = *(_QWORD *)&v4;
    if (v4 - *(double *)&-[WKContentView(WKInteraction) _logMissingSystemInputDelegateIfNeeded:]::lastLoggingTimestamp > 10.0)
    {
      v6 = qword_1ECE71988;
      if (os_log_type_enabled((os_log_t)qword_1ECE71988, OS_LOG_TYPE_ERROR))
      {
        v7 = 136446210;
        v8 = a3;
        _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "%{public}s - system input delegate is nil", (uint8_t *)&v7, 0xCu);
      }
      -[WKContentView(WKInteraction) _logMissingSystemInputDelegateIfNeeded:]::lastLoggingTimestamp = v5;
    }
  }
}

- (void)shiftKeyStateChangedFromState:(int64_t)a3 toState:(int64_t)a4
{
  WKSyntheticFlagsChangedWebEvent *v6;
  WKSyntheticFlagsChangedWebEvent *v7;
  WKSyntheticFlagsChangedWebEvent *v8;
  WKSyntheticFlagsChangedWebEvent *v9;

  if (!self->_didAccessoryTabInitiateFocus)
  {
    switch(a3)
    {
      case 0:
        goto LABEL_12;
      case 2:
        v6 = -[WKSyntheticFlagsChangedWebEvent initWithCapsLockState:]([WKSyntheticFlagsChangedWebEvent alloc], "initWithCapsLockState:", 0);
        break;
      case 1:
        v6 = -[WKSyntheticFlagsChangedWebEvent initWithShiftState:]([WKSyntheticFlagsChangedWebEvent alloc], "initWithShiftState:", 0);
        break;
      default:
        v7 = 0;
LABEL_10:
        -[WKContentView _internalHandleKeyWebEvent:](self, "_internalHandleKeyWebEvent:", v7);
        if (v7)
          CFRelease(v7);
LABEL_12:
        switch(a4)
        {
          case 0:
            return;
          case 2:
            v8 = -[WKSyntheticFlagsChangedWebEvent initWithCapsLockState:]([WKSyntheticFlagsChangedWebEvent alloc], "initWithCapsLockState:", 1);
            break;
          case 1:
            v8 = -[WKSyntheticFlagsChangedWebEvent initWithShiftState:]([WKSyntheticFlagsChangedWebEvent alloc], "initWithShiftState:", 1);
            break;
          default:
            v9 = 0;
LABEL_19:
            -[WKContentView _internalHandleKeyWebEvent:](self, "_internalHandleKeyWebEvent:", v9);
            if (v9)
              CFRelease(v9);
            return;
        }
        v9 = v8;
        goto LABEL_19;
    }
    v7 = v6;
    goto LABEL_10;
  }
}

- (void)insertTextAlternatives:(id)a3
{
  void *v5;
  WebPageProxy *m_ptr;
  void *v7;
  WTF::StringImpl *v8;
  const void *v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  __int16 v12;
  char v13;
  BOOL v14;
  char v15;
  uint64_t v16[2];
  __int128 v17;
  WTF::StringImpl *v18;
  __int128 v19;
  CFTypeRef cf;
  __int128 v21;
  CFTypeRef v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend(a3, "primaryString");
  if (objc_msgSend((id)objc_msgSend(a3, "alternativeStrings"), "count"))
  {
    objc_msgSend(v5, "length");
    WebCore::TextAlternativeWithRange::TextAlternativeWithRange();
    m_ptr = self->_page.m_ptr;
    MEMORY[0x19AEABCC8](&v18, v5);
    v17 = xmmword_1978CEF10;
    v21 = v19;
    v22 = cf;
    if (cf)
      CFRetain(cf);
    WTF::Vector<WebCore::TextAlternativeWithRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v16, (uint64_t)&v21, 1uLL);
    v12 = 0;
    v13 = 0;
    v14 = -[WKContentView _shouldSimulateKeyboardInputOnTextInsertion](self, "_shouldSimulateKeyboardInputOnTextInsertion");
    v15 = 0;
    WebKit::WebPageProxy::insertDictatedTextAsync(m_ptr, (uint64_t *)&v18, (uint64_t *)&v17, (unsigned int *)v16, (char *)&v12);
    WTF::Vector<WebKit::RemoteLayerTreeNode::CachedContentsBuffer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v16, v7);
    v9 = v22;
    v22 = 0;
    if (v9)
      CFRelease(v9);
    v10 = v18;
    v18 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
  }
  else
  {
    -[WKContentView insertText:](self, "insertText:", v5);
  }
}

- (void)insertText:(id)a3 textAlternatives:(id)a4 style:(int64_t)a5
{
  -[WKContentView insertTextAlternatives:](self, "insertTextAlternatives:", a4);
}

- (BOOL)automaticallyPresentEditMenu
{
  return self->_suppressSelectionAssistantReasons.m_storage == 0;
}

- (id)asyncInputDelegate
{
  return objc_loadWeak((id *)&self->_anon_fa8[24]);
}

- (void)setAsyncInputDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_anon_fa8[24], a3);
}

- (void)handleKeyEntry:(id)a3 withCompletionHandler:(id)a4
{
  const void *v7;
  void *v8;
  CFTypeRef v9;
  _QWORD v10[4];
  CFTypeRef cf;
  void *aBlock;

  v7 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DD9748]), "initWithKeyEntry:", a3);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = __69__WKContentView_WKInteraction__handleKeyEntry_withCompletionHandler___block_invoke;
  v10[3] = &__block_descriptor_48_e8_32c84_ZTSKZ69__WKContentView_WKInteraction__handleKeyEntry_withCompletionHandler__E5__109_e21_v20__0__WebEvent_8B16l;
  if (a3)
    CFRetain(a3);
  v8 = _Block_copy(a4);
  cf = a3;
  if (a3)
    CFRetain(a3);
  aBlock = _Block_copy(v8);
  -[WKContentView _internalHandleKeyWebEvent:withCompletionHandler:](self, "_internalHandleKeyWebEvent:withCompletionHandler:", v7, v10);
  _Block_release(v8);
  if (a3)
    CFRelease(a3);
  _Block_release(aBlock);
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  if (v7)
    CFRelease(v7);
}

uint64_t __69__WKContentView_WKInteraction__handleKeyEntry_withCompletionHandler___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

- (void)replaceText:(id)a3 withText:(id)a4 options:(unint64_t)a5 completionHandler:(id)a6
{
  char v7;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  v7 = a5;
  if (self)
    CFRetain(self);
  v11 = _Block_copy(a6);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E3507D88;
  v12[1] = self;
  v12[2] = v11;
  v14 = v12;
  -[WKContentView _internalReplaceText:withText:isCandidate:completion:](self, "_internalReplaceText:withText:isCandidate:completion:", a3, a4, v7 & 1, &v14);
  v13 = v14;
  v14 = 0;
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  _Block_release(0);
}

- (void)requestTextRectsForString:(id)a3 withCompletionHandler:(id)a4
{
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  if (self)
    CFRetain(self);
  v7 = _Block_copy(a4);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E3507DB0;
  v8[1] = self;
  v8[2] = v7;
  v10 = v8;
  -[WKContentView _internalRequestTextRectsForString:completion:](self, "_internalRequestTextRectsForString:completion:", a3, &v10);
  v9 = v10;
  v10 = 0;
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  _Block_release(0);
}

- (void)autoscrollToPoint:(CGPoint)a3
{
  WebPageProxy *m_ptr;
  uint64_t v4;
  uint64_t v5;
  CGPoint v6;
  uint64_t *v7;

  v6 = a3;
  m_ptr = self->_page.m_ptr;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v5, &v6);
  v4 = *((_QWORD *)m_ptr + 26);
  v7 = &v5;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartAutoscrollAtPosition>(v4, (int **)&v7, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)requestTextContextForAutocorrectionWithCompletionHandler:(id)a3
{
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  if (a3)
  {
    v4 = _Block_copy(a3);
    if (self)
      CFRetain(self);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v5 = off_1E3507DD8;
    v5[1] = v4;
    v5[2] = self;
    v7 = v5;
    -[WKContentView _internalRequestAutocorrectionContextWithCompletionHandler:](self, "_internalRequestAutocorrectionContextWithCompletionHandler:", &v7);
    v6 = v7;
    v7 = 0;
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    _Block_release(0);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Expected a nonnull completion handler in %s."), "-[WKContentView(WKInteraction) requestTextContextForAutocorrectionWithCompletionHandler:]");
  }
}

- (void)selectTextForContextMenuWithLocationInView:(CGPoint)a3 completionHandler:(id)a4
{
  double y;
  double x;
  void *v7;
  _QWORD v8[4];
  void *aBlock;

  y = a3.y;
  x = a3.x;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3321888768;
  v8[2] = __93__WKContentView_WKInteraction__selectTextForContextMenuWithLocationInView_completionHandler___block_invoke;
  v8[3] = &__block_descriptor_40_e8_32c108_ZTSKZ93__WKContentView_WKInteraction__selectTextForContextMenuWithLocationInView_completionHandler__E5__113_e13_v20__0B8r_v12l;
  v7 = _Block_copy(a4);
  aBlock = _Block_copy(v7);
  -[WKContentView _internalSelectTextForContextMenuWithLocationInView:completionHandler:](self, "_internalSelectTextForContextMenuWithLocationInView:completionHandler:", v8, x, y);
  _Block_release(v7);
  _Block_release(aBlock);
}

uint64_t __93__WKContentView_WKInteraction__selectTextForContextMenuWithLocationInView_completionHandler___block_invoke(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (*a3)
    WTF::StringImpl::operator NSString *();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (void)deleteInDirection:(int64_t)a3 toGranularity:(int64_t)a4
{
  _BOOL8 v6;
  const __CFString *v7;
  const __CFString *v8;
  void *v9;
  const __CFString *v10;
  const __CFString *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v6 = a3 != 1 || a4 != 0;
  v20 = 0uLL;
  v21 = 0uLL;
  switch(a4)
  {
    case 0:
      v7 = CFSTR("DeleteForward");
      v8 = CFSTR("DeleteBackward");
      goto LABEL_14;
    case 1:
      v7 = CFSTR("DeleteWordForward");
      v8 = CFSTR("DeleteWordBackward");
      goto LABEL_14;
    case 2:
      v10 = CFSTR("MoveToEndOfSentenceAndModifySelection");
      v11 = CFSTR("MoveToBeginningOfSentenceAndModifySelection");
      goto LABEL_18;
    case 3:
      v7 = CFSTR("DeleteToEndOfParagraph");
      v8 = CFSTR("DeleteToBeginningOfParagraph");
      goto LABEL_14;
    case 4:
      v7 = CFSTR("DeleteToEndOfLine");
      v8 = CFSTR("DeleteToBeginningOfLine");
LABEL_14:
      if (a3 == 1)
        v7 = v8;
      v23[0] = v7;
      v12 = (void *)MEMORY[0x1E0C99D20];
      v13 = 1;
      goto LABEL_21;
    case 5:
      v10 = CFSTR("MoveToEndOfDocumentAndModifySelection");
      v11 = CFSTR("MoveToBeginningOfDocumentAndModifySelection");
LABEL_18:
      if (a3 == 1)
        v10 = v11;
      v23[0] = v10;
      v23[1] = CFSTR("DeleteBackward");
      v12 = (void *)MEMORY[0x1E0C99D20];
      v13 = 2;
LABEL_21:
      v9 = (void *)objc_msgSend(v12, "arrayWithObjects:count:", v23, v13, (_QWORD)v18);
      break;
    default:
      v9 = (void *)MEMORY[0x1E0C9AA60];
      break;
  }
  v14 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v19 != v16)
          objc_enumerationMutation(v9);
        -[WKContentView _executeEditCommand:notifyDelegate:](self, "_executeEditCommand:notifyDelegate:", *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * i), v6, (_QWORD)v18);
      }
      v15 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v15);
  }
}

- (void)moveInStorageDirection:(int64_t)a3 byGranularity:(int64_t)a4
{
  const __CFString *v5;
  const __CFString *v6;
  void *v7;
  const __CFString *v8;
  const __CFString *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  switch(a4)
  {
    case 0:
      v5 = CFSTR("MoveForward");
      v6 = CFSTR("MoveBackward");
      goto LABEL_12;
    case 1:
      v5 = CFSTR("MoveWordForward");
      v6 = CFSTR("MoveWordBackward");
      goto LABEL_12;
    case 2:
      v5 = CFSTR("MoveToEndOfSentence");
      v6 = CFSTR("MoveToBeginningOfSentence");
      goto LABEL_12;
    case 3:
      v8 = CFSTR("MoveForward");
      if (a3 == 1)
      {
        v8 = CFSTR("MoveBackward");
        v9 = CFSTR("MoveToBeginningOfParagraph");
      }
      else
      {
        v9 = CFSTR("MoveToEndOfParagraph");
      }
      v21[0] = v8;
      v21[1] = v9;
      v10 = (void *)MEMORY[0x1E0C99D20];
      v11 = 2;
      goto LABEL_15;
    case 4:
      v5 = CFSTR("MoveToEndOfLine");
      v6 = CFSTR("MoveToBeginningOfLine");
      goto LABEL_12;
    case 5:
      v5 = CFSTR("MoveToEndOfDocument");
      v6 = CFSTR("MoveToBeginningOfDocument");
LABEL_12:
      if (a3 == 1)
        v5 = v6;
      v21[0] = v5;
      v10 = (void *)MEMORY[0x1E0C99D20];
      v11 = 1;
LABEL_15:
      v7 = (void *)objc_msgSend(v10, "arrayWithObjects:count:", v21, v11, (_QWORD)v16);
      break;
    default:
      v7 = 0;
      break;
  }
  v12 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v17 != v14)
          objc_enumerationMutation(v7);
        -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i), (_QWORD)v16);
      }
      v13 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v13);
  }
}

- (void)moveInLayoutDirection:(int64_t)a3
{
  uint64_t v3;

  if ((unint64_t)(a3 - 2) > 3)
    v3 = 0;
  else
    v3 = *((_QWORD *)&off_1E3507F48 + a3 - 2);
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v3);
}

- (void)extendInStorageDirection:(int64_t)a3 byGranularity:(int64_t)a4
{
  const __CFString *v5;
  const __CFString *v6;
  void *v7;
  const __CFString *v8;
  const __CFString *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  switch(a4)
  {
    case 0:
      v5 = CFSTR("MoveForwardAndModifySelection");
      v6 = CFSTR("MoveBackwardAndModifySelection");
      goto LABEL_12;
    case 1:
      v5 = CFSTR("MoveWordForwardAndModifySelection");
      v6 = CFSTR("MoveWordBackwardAndModifySelection");
      goto LABEL_12;
    case 2:
      v5 = CFSTR("MoveToEndOfSentenceAndModifySelection");
      v6 = CFSTR("MoveToBeginningOfSentenceAndModifySelection");
      goto LABEL_12;
    case 3:
      v8 = CFSTR("MoveForwardAndModifySelection");
      if (a3 == 1)
      {
        v8 = CFSTR("MoveBackwardAndModifySelection");
        v9 = CFSTR("MoveToBeginningOfParagraphAndModifySelection");
      }
      else
      {
        v9 = CFSTR("MoveToEndOfParagraphAndModifySelection");
      }
      v21[0] = v8;
      v21[1] = v9;
      v10 = (void *)MEMORY[0x1E0C99D20];
      v11 = 2;
      goto LABEL_15;
    case 4:
      v5 = CFSTR("MoveToEndOfLineAndModifySelection");
      v6 = CFSTR("MoveToBeginningOfLineAndModifySelection");
      goto LABEL_12;
    case 5:
      v5 = CFSTR("MoveToEndOfDocumentAndModifySelection");
      v6 = CFSTR("MoveToBeginningOfDocumentAndModifySelection");
LABEL_12:
      if (a3 == 1)
        v5 = v6;
      v21[0] = v5;
      v10 = (void *)MEMORY[0x1E0C99D20];
      v11 = 1;
LABEL_15:
      v7 = (void *)objc_msgSend(v10, "arrayWithObjects:count:", v21, v11, (_QWORD)v16);
      break;
    default:
      v7 = 0;
      break;
  }
  v12 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v17 != v14)
          objc_enumerationMutation(v7);
        -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i), (_QWORD)v16);
      }
      v13 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v13);
  }
}

- (void)extendInLayoutDirection:(int64_t)a3
{
  uint64_t v3;

  if ((unint64_t)(a3 - 2) > 3)
    v3 = 0;
  else
    v3 = *((_QWORD *)&off_1E3507F68 + a3 - 2);
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", v3);
}

- (void)_internalAdjustSelectionWithOffset:(int64_t)a3 lengthDelta:(int64_t)a4 completionHandler:(id)a5
{
  WebPageProxy *m_ptr;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  m_ptr = self->_page.m_ptr;
  v8 = _Block_copy(a5);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E3507E00;
  v9[1] = v8;
  v11 = v9;
  WebKit::WebPageProxy::updateSelectionWithDelta((uint64_t)m_ptr, a3, a4, (uint64_t *)&v11);
  v10 = (uint64_t)v11;
  v11 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Block_release(0);
}

- (void)transposeCharactersAroundSelection
{
  -[WKContentView _executeEditCommand:](self, "_executeEditCommand:", CFSTR("transpose"));
}

- (BOOL)selectionAtDocumentStart
{
  uint64_t v2;

  v2 = *((_QWORD *)self->_page.m_ptr + 4);
  return *(_BYTE *)(v2 + 560) && *(_DWORD *)(v2 + 316) == 0;
}

- (BOOL)shouldSuppressEditMenu
{
  return self->_suppressSelectionAssistantReasons.m_storage != 0;
}

- (void)targetedPreviewForID:(id)a3 completionHandler:(id)a4
{
  WebPageProxy *m_ptr;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  WTF::UUID::fromNSUUID((WTF::UUID *)a3, (NSUUID *)a2);
  if (!v12)
    __break(1u);
  m_ptr = self->_page.m_ptr;
  CFRetain(self);
  v7 = _Block_copy(a4);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E3507E28;
  v8[1] = self;
  v8[2] = v7;
  v10 = v8;
  WebKit::WebPageProxy::getTextIndicatorForID((uint64_t)m_ptr, &v11, (uint64_t *)&v10);
  v9 = (uint64_t)v10;
  v10 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  _Block_release(0);
}

- (void)updateUnderlyingTextVisibilityForTextAnimationID:(id)a3 visible:(BOOL)a4 completionHandler:(id)a5
{
  WebPageProxy *m_ptr;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE v13[40];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  WTF::UUID::fromNSUUID((WTF::UUID *)a3, (NSUUID *)a2);
  if (!v13[16])
    __break(1u);
  m_ptr = self->_page.m_ptr;
  v9 = _Block_copy(a5);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = off_1E3507E50;
  v10[1] = v9;
  v12 = v10;
  WebKit::WebPageProxy::updateUnderlyingTextVisibilityForTextAnimationID((uint64_t)m_ptr, (uint64_t)v13, a4, (uint64_t *)&v12);
  v11 = (uint64_t)v12;
  v12 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Block_release(0);
}

- (void)callCompletionHandlerForAnimationID:(id)a3
{
  _BYTE v4[40];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  WTF::UUID::fromNSUUID((WTF::UUID *)a3, (NSUUID *)a2);
  if (!v4[16])
    __break(1u);
  WebKit::WebPageProxy::callCompletionHandlerForAnimationID((uint64_t *)self->_page.m_ptr, (const WTF::UUID *)v4);
}

- (unint64_t)writingToolsAllowedInputOptions
{
  return objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "allowedWritingToolsResultOptions");
}

- (unint64_t)allowedWritingToolsResultOptions
{
  return objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "allowedWritingToolsResultOptions");
}

- (int64_t)writingToolsBehavior
{
  return objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "writingToolsBehavior");
}

- (void)willBeginWritingToolsSession:(id)a3 requestContexts:(id)a4
{
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "willBeginWritingToolsSession:requestContexts:", a3, a4);
}

- (void)didBeginWritingToolsSession:(id)a3 contexts:(id)a4
{
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "didBeginWritingToolsSession:contexts:", a3, a4);
}

- (void)proofreadingSession:(id)a3 didReceiveSuggestions:(id)a4 processedRange:(_NSRange)a5 inContext:(id)a6 finished:(BOOL)a7
{
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "proofreadingSession:didReceiveSuggestions:processedRange:inContext:finished:", a3, a4, a5.location, a5.length, a6, a7);
}

- (void)proofreadingSession:(id)a3 didUpdateState:(int64_t)a4 forSuggestionWithUUID:(id)a5 inContext:(id)a6
{
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "proofreadingSession:didUpdateState:forSuggestionWithUUID:inContext:", a3, a4, a5, a6);
}

- (void)didEndWritingToolsSession:(id)a3 accepted:(BOOL)a4
{
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "didEndWritingToolsSession:accepted:", a3, a4);
}

- (void)compositionSession:(id)a3 didReceiveText:(id)a4 replacementRange:(_NSRange)a5 inContext:(id)a6 finished:(BOOL)a7
{
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "compositionSession:didReceiveText:replacementRange:inContext:finished:", a3, a4, a5.location, a5.length, a6, a7);
}

- (void)writingToolsSession:(id)a3 didReceiveAction:(int64_t)a4
{
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "writingToolsSession:didReceiveAction:", a3, a4);
}

- (BOOL)supportsAdaptiveImageGlyph
{
  int v3;

  if ((objc_msgSend(-[WKContentView webView](self, "webView"), "_isEditable") & 1) != 0
    || (v3 = objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "configuration"), "_multiRepresentationHEICInsertionEnabled")) != 0)
  {
    LOBYTE(v3) = *(_BYTE *)(*((_QWORD *)self->_page.m_ptr + 4) + 238) != 0;
  }
  return v3;
}

- (void)insertAdaptiveImageGlyph:(id)a3 replacementRange:(id)a4
{
  WebKit::WebPageProxy::insertMultiRepresentationHEIC((WebKit::WebPageProxy *)self->_page.m_ptr, (NSData *)objc_msgSend(a3, "imageContent"), (NSString *)objc_msgSend(a3, "contentDescription"));
}

- (void)_closeCurrentTypingCommand
{
  WebPageProxy *m_ptr;

  m_ptr = self->_page.m_ptr;
  if (m_ptr)
    WebKit::WebPageProxy::closeCurrentTypingCommand((uint64_t)m_ptr);
}

- (void)selectWordBackwardForTesting
{
  WebPageProxy *m_ptr;
  uint64_t v3;
  char v4;

  BYTE4(self->_dataListSuggestionsControl.m_weakReference) = 1;
  m_ptr = self->_page.m_ptr;
  v3 = *((_QWORD *)m_ptr + 26);
  v4 = 0;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SelectWordBackward>(v3, (uint64_t)&v4, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
}

- (void)_doAfterReceivingEditDragSnapshotForTesting:(id)a3
{
  void *v4;

  if (self->_treatAsContentEditableUntilNextEditorStateUpdate)
  {
    v4 = _Block_copy(a3);
    _Block_release(*(const void **)&self->_isAnimatingDragCancel);
    *(_QWORD *)&self->_isAnimatingDragCancel = v4;
    _Block_release(0);
  }
  else
  {
    (*((void (**)(id))a3 + 2))(a3);
  }
}

- (WKDateTimeInputControl)dateTimeInputControl
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return (WKDateTimeInputControl *)self->_inputPeripheral.m_ptr;
  else
    return 0;
}

- (WKFormSelectControl)selectControl
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return (WKFormSelectControl *)self->_inputPeripheral.m_ptr;
  else
    return 0;
}

- (BOOL)isAnimatingDragCancel
{
  return (BOOL)self->_dragDropInteractionState.m_finalDropPreviews.m_impl.var0.m_table;
}

- (void)_simulateElementAction:(int64_t)a3 atLocation:(CGPoint)a4
{
  uint64_t v4;
  float v7;
  uint64_t v8;
  float v9;
  unint64_t v10;
  CFTypeRef v11;
  float v12[2];
  _QWORD v13[6];
  CFTypeRef cf;
  CGPoint v15;

  v15 = a4;
  v4 = *((_QWORD *)self->_page.m_ptr + 23);
  if (*(_BYTE *)(v4 + 32))
  {
    __break(0xC471u);
    JUMPOUT(0x19785FA00);
  }
  *(_QWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[32] = *(_QWORD *)(v4 + 112);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3321888768;
  v13[2] = __62__WKContentView_WKTesting___simulateElementAction_atLocation___block_invoke;
  v13[3] = &__block_descriptor_56_e8_32c77_ZTSKZ62__WKContentView_WKTesting___simulateElementAction_atLocation__E5__117_e4285_v648__0_InteractionInformationAtPosition__InteractionInformationRequest__IntPoint_ii_BBBBBBB_B_optional_BOOL_____cB_B_CBBBBBBBBBBBBB_Markable_WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long____WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__::MarkableTraits___ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long____ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___BBBBBB_FloatPoint_ff__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____IntRect__IntPoint_ii__IntSize_ii___RefPtr_WebCore::ShareableBitmap__WTF::RawPtrTraits_WebCore::ShareableBitmap___WTF::DefaultRefDerefTraits_WebCore::ShareableBitmap_____ShareableBitmap___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___f_FloatRect__FloatPoint_ff__FloatSize_ff___optional_WebCore::Cursor_____c_Cursor_C_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___IntPoint_ii__v__B__TextIndicatorData__FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___Vector_WebCore::FloatRect__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____FloatRect_II_f_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___Color_Q_C_OptionSet_WebCore::TextIndicatorOption__S___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____RetainPtr_NSArray___v__IntRect__IntPoint_ii__IntSize_ii___optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___B__optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___B__Vector_WebCore::ElementAnimationContext__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____ElementAnimationContext_II__8l;
  CFRetain(self);
  v13[4] = a3;
  v13[5] = self;
  cf = self;
  CFRetain(self);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v12, &v15);
  v7 = roundf(v12[0]);
  if (v7 >= 2147500000.0)
  {
    v8 = 0x7FFFFFFFLL;
  }
  else if (v7 <= -2147500000.0)
  {
    v8 = 0x80000000;
  }
  else
  {
    v8 = (int)v7;
  }
  v9 = roundf(v12[1]);
  if (v9 >= 2147500000.0)
  {
    v10 = 0x7FFFFFFF00000000;
  }
  else if (v9 <= -2147500000.0)
  {
    v10 = 0x8000000000000000;
  }
  else
  {
    v10 = (unint64_t)(int)v9 << 32;
  }
  -[WKContentView doAfterPositionInformationUpdate:forRequest:](self, "doAfterPositionInformationUpdate:forRequest:", v13, v10 | v8, 0x1000000);
  CFRelease(self);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
}

uint64_t __62__WKContentView_WKTesting___simulateElementAction_atLocation___block_invoke(uint64_t a1, uint64_t a2)
{
  _WKActivatedElementInfo *v3;

  v3 = +[_WKActivatedElementInfo activatedElementInfoWithInteractionInformationAtPosition:userInfo:](_WKActivatedElementInfo, "activatedElementInfoWithInteractionInformationAtPosition:userInfo:", a2, 0);
  return objc_msgSend(+[_WKElementAction _elementActionWithType:info:assistant:](_WKElementAction, "_elementActionWithType:info:assistant:", *(_QWORD *)(a1 + 32), v3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 832)), "runActionWithElementInfo:", v3);
}

- (void)_simulateLongPressActionAtLocation:(CGPoint)a3
{
  float v4;
  uint64_t v5;
  float v6;
  unint64_t v7;
  CFTypeRef v8;
  float v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  CFTypeRef cf;
  CGPoint v15;

  v15 = a3;
  if (self)
  {
    CFRetain(self);
    v10 = MEMORY[0x1E0C809B0];
    v11 = 3321888768;
    v12 = __63__WKContentView_WKTesting___simulateLongPressActionAtLocation___block_invoke;
    v13 = &__block_descriptor_40_e8_32c78_ZTSKZ63__WKContentView_WKTesting___simulateLongPressActionAtLocation__E5__118_e4285_v648__0_InteractionInformationAtPosition__InteractionInformationRequest__IntPoint_ii_BBBBBBB_B_optional_BOOL_____cB_B_CBBBBBBBBBBBBB_Markable_WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long____WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__::MarkableTraits___ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long____ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___BBBBBB_FloatPoint_ff__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____IntRect__IntPoint_ii__IntSize_ii___RefPtr_WebCore::ShareableBitmap__WTF::RawPtrTraits_WebCore::ShareableBitmap___WTF::DefaultRefDerefTraits_WebCore::ShareableBitmap_____ShareableBitmap___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___f_FloatRect__FloatPoint_ff__FloatSize_ff___optional_WebCore::Cursor_____c_Cursor_C_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___IntPoint_ii__v__B__TextIndicatorData__FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___Vector_WebCore::FloatRect__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____FloatRect_II_f_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___Color_Q_C_OptionSet_WebCore::TextIndicatorOption__S___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____RetainPtr_NSArray___v__IntRect__IntPoint_ii__IntSize_ii___optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___B__optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___B__Vector_WebCore::ElementAnimationContext__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____ElementAnimationContext_II__8l;
    CFRetain(self);
    cf = self;
    CFRetain(self);
  }
  else
  {
    v10 = MEMORY[0x1E0C809B0];
    v11 = 3321888768;
    v12 = __63__WKContentView_WKTesting___simulateLongPressActionAtLocation___block_invoke;
    v13 = &__block_descriptor_40_e8_32c78_ZTSKZ63__WKContentView_WKTesting___simulateLongPressActionAtLocation__E5__118_e4285_v648__0_InteractionInformationAtPosition__InteractionInformationRequest__IntPoint_ii_BBBBBBB_B_optional_BOOL_____cB_B_CBBBBBBBBBBBBB_Markable_WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long____WebCore::ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__::MarkableTraits___ProcessQualified_WTF::ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long____ObjectIdentifierGeneric_WebCore::ScrollingNodeIDType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___BBBBBB_FloatPoint_ff__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__URL__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___b1b1b1b3b26IIIIIII__String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____IntRect__IntPoint_ii__IntSize_ii___RefPtr_WebCore::ShareableBitmap__WTF::RawPtrTraits_WebCore::ShareableBitmap___WTF::DefaultRefDerefTraits_WebCore::ShareableBitmap_____ShareableBitmap___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl___f_FloatRect__FloatPoint_ff__FloatSize_ff___optional_WebCore::Cursor_____c_Cursor_C_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___IntPoint_ii__v__B__TextIndicatorData__FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___FloatRect__FloatPoint_ff__FloatSize_ff___Vector_WebCore::FloatRect__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____FloatRect_II_f_RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___RefPtr_WebCore::Image__WTF::RawPtrTraits_WebCore::Image___WTF::DefaultRefDerefTraits_WebCore::Image_____Image___Color_Q_C_OptionSet_WebCore::TextIndicatorOption__S___String__RefPtr_WTF::StringImpl__WTF::RawPtrTraits_WTF::StringImpl___WTF::DefaultRefDerefTraits_WTF::StringImpl_____StringImpl____RetainPtr_NSArray___v__IntRect__IntPoint_ii__IntSize_ii___optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___B__optional_WebCore::ElementContext_____c_ElementContext__FloatRect__FloatPoint_ff__FloatSize_ff___ObjectIdentifierGeneric_WebCore::PageIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q__ProcessQualified_WTF::UUID___UUID_T__ObjectIdentifierGeneric_WebCore::ProcessIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___ObjectIdentifierGeneric_WebCore::ElementIdentifierType__WTF::ObjectIdentifierMainThreadAccessTraits_uint64_t___unsigned_long_long__Q___B__Vector_WebCore::ElementAnimationContext__0UL__WTF::CrashOnOverflow__16UL__WTF::FastMalloc____ElementAnimationContext_II__8l;
    cf = 0;
  }
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v9, &v15);
  v4 = roundf(v9[0]);
  if (v4 >= 2147500000.0)
  {
    v5 = 0x7FFFFFFFLL;
  }
  else
  {
    v5 = 0x80000000;
    if (v4 > -2147500000.0)
      v5 = (int)v4;
  }
  v6 = roundf(v9[1]);
  if (v6 >= 2147500000.0)
  {
    v7 = 0x7FFFFFFF00000000;
  }
  else if (v6 <= -2147500000.0)
  {
    v7 = 0x8000000000000000;
  }
  else
  {
    v7 = (unint64_t)(int)v6 << 32;
  }
  -[WKContentView doAfterPositionInformationUpdate:forRequest:](self, "doAfterPositionInformationUpdate:forRequest:", &v10, v7 | v5, 0x1000000);
  if (self)
    CFRelease(self);
  v8 = cf;
  cf = 0;
  if (v8)
    CFRelease(v8);
  if (self)
    CFRelease(self);
}

uint64_t __63__WKContentView_WKTesting___simulateLongPressActionAtLocation___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_actionForLongPress");
  if (result)
    return objc_msgSend(*(id *)(a1 + 32), "performSelector:", result);
  return result;
}

- (void)selectFormAccessoryPickerRow:(int64_t)a3
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(self->_inputPeripheral.m_ptr, "selectRow:inComponent:extendingSelection:", a3, 0, 0);
}

- (BOOL)selectFormAccessoryHasCheckedItemAtRow:(int64_t)a3
{
  objc_opt_self();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return objc_msgSend(self->_inputPeripheral.m_ptr, "selectFormAccessoryHasCheckedItemAtRow:", a3);
  else
    return 0;
}

- (void)setSelectedColorForColorPicker:(id)a3
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(self->_inputPeripheral.m_ptr, "selectColor:", a3);
}

- (NSString)textContentTypeForTesting
{
  id v3;

  if (-[WKContentView _requiresLegacyTextInputTraits](self, "_requiresLegacyTextInputTraits"))
    v3 = -[WKContentView textInputTraits](self, "textInputTraits");
  else
    v3 = -[WKContentView extendedTraitsDelegate](self, "extendedTraitsDelegate");
  return (NSString *)objc_msgSend(v3, "textContentType");
}

- (NSString)selectFormPopoverTitle
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return (NSString *)objc_msgSend(self->_inputPeripheral.m_ptr, "selectFormPopoverTitle");
  else
    return 0;
}

- (NSString)formInputLabel
{
  return 0;
}

- (void)setTimePickerValueToHour:(int64_t)a3 minute:(int64_t)a4
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(self->_inputPeripheral.m_ptr, "setTimePickerHour:minute:", a3, a4);
}

- (double)timePickerValueHour
{
  double result;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return -1.0;
  objc_msgSend(self->_inputPeripheral.m_ptr, "timePickerValueHour");
  return result;
}

- (double)timePickerValueMinute
{
  double result;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return -1.0;
  objc_msgSend(self->_inputPeripheral.m_ptr, "timePickerValueMinute");
  return result;
}

- (id)_contentsOfUserInterfaceItem:(id)a3
{
  void *v6;
  UIContextMenuInteraction *v8;
  const __CFString *v9;
  void *m_ptr;
  void *v11;
  uint64_t v12;
  const __CFString *v13;
  NSArray *v14;
  WTF *v15;
  NSURL *v16;
  const __CFString *v17;
  WTF *v18;
  NSURL *v19;
  uint64_t v20;
  WTF *v21;
  NSURL *v22;
  CFTypeRef v23;
  _QWORD v24[5];
  CFTypeRef cf;
  id v26;
  uint64_t v27;
  id v28;
  NSArray *v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  _QWORD v36[5];
  _QWORD v37[5];
  id v38;
  uint64_t v39;
  _QWORD v40[5];
  _QWORD v41[5];
  id v42;
  uint64_t v43;
  id v44;
  _QWORD v45[2];

  v45[1] = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a3, "isEqualToString:", CFSTR("actionSheet")))
  {
    v44 = a3;
    v45[0] = objc_msgSend(self->_actionSheetAssistant.m_ptr, "currentlyAvailableActionTitles");
    return (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v45, &v44, 1);
  }
  if (!objc_msgSend(a3, "isEqualToString:", CFSTR("contextMenu")))
  {
    if (objc_msgSend(a3, "isEqualToString:", CFSTR("mediaControlsContextMenu")))
    {
      v34 = a3;
      v35 = objc_msgSend(self->_actionSheetAssistant.m_ptr, "currentlyAvailableMediaControlsContextMenuItems");
      return (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
    }
    else if (objc_msgSend(a3, "isEqualToString:", CFSTR("fileUploadPanelMenu")))
    {
      m_ptr = self->_fileUploadPanel.m_ptr;
      if (m_ptr)
      {
        v30 = a3;
        v31 = objc_msgSend(m_ptr, "currentAvailableActionTitles");
        return (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
      }
      else
      {
        v32 = a3;
        v33 = MEMORY[0x1E0C9AA60];
        return (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
      }
    }
    else
    {
      if (!objc_msgSend(a3, "isEqualToString:", CFSTR("selectMenu")))
        return 0;
      v14 = -[WKFormSelectControl menuItemTitles](-[WKContentView selectControl](self, "selectControl"), "menuItemTitles");
      if (v14)
      {
        v28 = a3;
        v29 = v14;
        return (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
      }
      else
      {
        v26 = a3;
        v27 = MEMORY[0x1E0C9AA60];
        return (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
      }
    }
  }
  cf = (CFTypeRef)objc_opt_new();
  v8 = -[WKContentView contextMenuInteraction](self, "contextMenuInteraction");
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3321888768;
  v24[2] = __57__WKContentView_WKTesting___contentsOfUserInterfaceItem___block_invoke;
  v24[3] = &__block_descriptor_40_e8_32c72_ZTSKZ57__WKContentView_WKTesting___contentsOfUserInterfaceItem__E5__119_e24___UIMenu_16__0__UIMenu_8l;
  v24[4] = &cf;
  -[UIContextMenuInteraction updateVisibleMenuWithBlock:](v8, "updateVisibleMenuWithBlock:", v24);
  if (-[WKContentView _shouldUseContextMenus](self, "_shouldUseContextMenus"))
  {
    v42 = a3;
    v40[0] = CFSTR("url");
    if ((*((_BYTE *)&self->_positionInformation.url + 8) & 1) != 0)
    {
      v15 = (WTF *)WTF::URL::operator NSURL *();
      v9 = (const __CFString *)WTF::userVisibleString(v15, v16);
    }
    else
    {
      v9 = &stru_1E351F1B8;
    }
    v41[0] = v9;
    v40[1] = CFSTR("isLink");
    v41[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", self->_positionInformation.isLink);
    v40[2] = CFSTR("isImage");
    v41[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", self->_positionInformation.isImage);
    v40[3] = CFSTR("imageURL");
    if ((*((_BYTE *)&self->_positionInformation.imageURL + 8) & 1) != 0)
    {
      v18 = (WTF *)WTF::URL::operator NSURL *();
      v17 = (const __CFString *)WTF::userVisibleString(v18, v19);
    }
    else
    {
      v17 = &stru_1E351F1B8;
    }
    v40[4] = CFSTR("items");
    v41[3] = v17;
    v41[4] = cf;
    v43 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, v40, 5);
    v20 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1);
  }
  else
  {
    v11 = (void *)objc_msgSend(self->_previewItemController.m_ptr, "previewData");
    v12 = objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0CEBA68]);
    v38 = a3;
    v37[0] = v12;
    v36[0] = CFSTR("url");
    v36[1] = CFSTR("isLink");
    v37[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", self->_positionInformation.isLink);
    v36[2] = CFSTR("isImage");
    v37[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", self->_positionInformation.isImage);
    v36[3] = CFSTR("imageURL");
    if ((*((_BYTE *)&self->_positionInformation.imageURL + 8) & 1) != 0)
    {
      v21 = (WTF *)WTF::URL::operator NSURL *();
      v13 = (const __CFString *)WTF::userVisibleString(v21, v22);
    }
    else
    {
      v13 = &stru_1E351F1B8;
    }
    v36[4] = CFSTR("items");
    v37[3] = v13;
    v37[4] = cf;
    v39 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v37, v36, 5);
    v20 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
  }
  v6 = (void *)v20;
  v23 = cf;
  cf = 0;
  if (v23)
    CFRelease(v23);
  return v6;
}

void *__57__WKContentView_WKTesting___contentsOfUserInterfaceItem___block_invoke(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (void *)objc_msgSend(a2, "children", 0);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(**(id **)(a1 + 32), "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v8++), "title"));
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }
  return a2;
}

- (void)_dismissContactPickerWithContacts:(id)a3
{
  objc_msgSend(self->_contactPicker.m_ptr, "dismissWithContacts:", a3);
}

- (UITapGestureRecognizer)singleTapGestureRecognizer
{
  return (UITapGestureRecognizer *)self->_singleTapGestureRecognizer.m_ptr;
}

- (void)_simulateSelectionStart
{
  BYTE2(self->_dataListTextSuggestions.m_ptr) = 1;
  *(_DWORD *)&self->_keyWebEventHandlers.m_inlineBuffer[0].__lx[40] = 2;
}

- (BOOL)_allowAnimationControls
{
  return objc_msgSend(-[WKContentView webView](self, "webView"), "_allowAnimationControls");
}

- (void)dismissFormAccessoryView
{
  if (!-[WKDateTimeInputControl dismissWithAnimationForTesting](-[WKContentView dateTimeInputControl](self, "dateTimeInputControl"), "dismissWithAnimationForTesting"))-[WKContentView accessoryDone](self, "accessoryDone");
}

- (void)_selectDataListOption:(int64_t)a3
{
  objc_msgSend(objc_loadWeak(&self->_actionsToPerformAfterEditorStateUpdate.m_buffer), "didSelectOptionAtIndex:", a3);
}

- (void)_setDataListSuggestionsControl:(id)a3
{
  objc_storeWeak(&self->_actionsToPerformAfterEditorStateUpdate.m_buffer, a3);
}

- (BOOL)isShowingDataListSuggestions
{
  return objc_msgSend(objc_loadWeak(&self->_actionsToPerformAfterEditorStateUpdate.m_buffer), "isShowingSuggestions");
}

- (UIWKTextInteractionAssistant)textInteractionAssistant
{
  return (UIWKTextInteractionAssistant *)objc_msgSend(self->_textInteractionWrapper.m_ptr, "textInteractionAssistant");
}

- (UIContextMenuInteraction)contextMenuInteraction
{
  return (UIContextMenuInteraction *)objc_msgSend(self->_textInteractionWrapper.m_ptr, "contextMenuInteraction");
}

- (void)assignLegacyDataForContextMenuInteraction
{
  WKContentView *v2;
  uint64_t v3;
  void *v4;
  InteractionInformationAtPosition *p_positionInformation;
  WebPageProxy *m_ptr;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  const void *v12;
  CFTypeRef v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _WKElementAction *v18;
  NSString *v19;
  uint64_t v20;
  WKPreviewAction *v21;
  id v22;
  uint64_t v23;
  WKImagePreviewViewController *v24;
  CFTypeRef v25;
  void *v26;
  void *v27;
  void *v28;
  CFTypeRef v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  const __CFString *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  CFTypeRef v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  CFTypeRef v45;
  void *v46;
  uint64_t v47;
  WKImagePreviewViewController *v48;
  WKImagePreviewViewController *v49;
  CFTypeRef v50;
  CFTypeRef v51;
  CFTypeRef v52;
  CFTypeRef v53;
  const __CFString *v54;
  void *v55;
  void *v56;
  void *v57;
  CFTypeRef v58;
  CFTypeRef v59;
  void *v60;
  void *v61;
  InteractionInformationAtPosition *v62;
  WKContentView *v63;
  void *v64;
  const void *v65;
  CFTypeRef v66;
  CFTypeRef v67;
  CFTypeRef v68;
  const void *v69;
  id v70;
  CFTypeRef v71;
  id v72[6];
  CFTypeRef cf[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  CFTypeRef v77[19];

  v77[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (self->_contextMenuHasRequestedLegacyData)
    return;
  v2 = self;
  self->_contextMenuHasRequestedLegacyData = 1;
  if (!objc_loadWeak(&self->_webView.m_weakReference))
    return;
  v3 = objc_msgSend(-[WKContentView webView](v2, "webView"), "UIDelegate");
  if (!v3)
    return;
  v4 = (void *)v3;
  p_positionInformation = &v2->_positionInformation;
  m_ptr = v2->_page.m_ptr;
  v7 = *((_QWORD *)m_ptr + 26);
  v77[0] = &v2->_positionInformation.elementContext.var0.var2 + 1;
  v77[1] = &v2->_positionInformation;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartInteractionWithElementContextOrPosition>(v7, (uint64_t)v77, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
  v8 = -[_WKActivatedElementInfo _initWithInteractionInformationAtPosition:isUsingAlternateURLForImage:userInfo:]([_WKActivatedElementInfo alloc], "_initWithInteractionInformationAtPosition:isUsingAlternateURLForImage:userInfo:", &v2->_positionInformation, 0, 0);
  if (!v2->_positionInformation.isLink)
  {
    if (v2->_positionInformation.isImage && v2->_positionInformation.image.m_ptr)
    {
      v10 = WTF::URL::operator NSURL *();
      WebCore::ShareableBitmap::makeCGImageCopy((WebCore::ShareableBitmap *)v2->_positionInformation.image.m_ptr);
      v11 = objc_alloc(MEMORY[0x1E0CEA638]);
      v12 = (const void *)objc_msgSend(v11, "initWithCGImage:", v77[0]);
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        cf[0] = 0;
        v10 = objc_msgSend(v4, "_webView:alternateURLFromImage:userInfo:", -[WKContentView webView](v2, "webView"), v12, cf);
        v13 = cf[0];
        if (cf[0])
          CFRetain(cf[0]);
      }
      else
      {
        v13 = 0;
      }
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(v4, "_webView:willPreviewImageWithURL:", -[WKContentView webView](v2, "webView"), WTF::URL::operator NSURL *());
      v46 = v2->_actionSheetAssistant.m_ptr;
      if (v46)
        objc_msgSend(v46, "defaultActionsForImageSheet:", v8);
      else
        cf[0] = 0;
      if (v13 && (objc_opt_respondsToSelector() & 1) != 0)
      {
        v47 = -[WKContentView webView](v2, "webView");
        v48 = (WKImagePreviewViewController *)objc_msgSend(v4, "_webView:previewViewControllerForImage:alternateURL:defaultActions:elementInfo:", v47, v12, v10, cf[0], v8);
        v24 = v48;
        if (v48)
          CFRetain(v48);
      }
      else
      {
        v49 = [WKImagePreviewViewController alloc];
        v68 = v77[0];
        if (v77[0])
          CFRetain(v77[0]);
        v67 = cf[0];
        if (cf[0])
          CFRetain(cf[0]);
        v66 = v8;
        if (v8)
          CFRetain(v8);
        v24 = -[WKImagePreviewViewController initWithCGImage:defaultActions:elementInfo:](v49, "initWithCGImage:defaultActions:elementInfo:", &v68, &v67, &v66);
        v50 = v66;
        v66 = 0;
        if (v50)
          CFRelease(v50);
        v51 = v67;
        v67 = 0;
        if (v51)
          CFRelease(v51);
        v52 = v68;
        v68 = 0;
        if (v52)
          CFRelease(v52);
      }
      v53 = cf[0];
      v72[0] = (id)cf[0];
      if (cf[0])
        CFRetain(cf[0]);
      v65 = v8;
      if (v8)
        CFRetain(v8);
      if (v2->_positionInformation.title.m_impl.m_ptr)
        v54 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v54 = &stru_1E351F1B8;
      v55 = (void *)menuFromLegacyPreviewOrDefaultActions(v24, v72, &v65, (uint64_t)v54);
      v56 = v55;
      if (v55)
        CFRetain(v55);
      v57 = v2->_contextMenuLegacyMenu.m_ptr;
      v2->_contextMenuLegacyMenu.m_ptr = v56;
      if (v57)
        CFRelease(v57);
      v65 = 0;
      if (v8)
        CFRelease(v8);
      if (v53)
        CFRelease(v53);
      v58 = cf[0];
      cf[0] = 0;
      if (v58)
        CFRelease(v58);
      if (v12)
        CFRelease(v12);
      v59 = v77[0];
      v77[0] = 0;
      if (v59)
      {
        CFRelease(v59);
        if (!v13)
          goto LABEL_120;
        goto LABEL_118;
      }
      if (v13)
      {
LABEL_118:
        v29 = v13;
LABEL_119:
        CFRelease(v29);
      }
    }
    else
    {
      v24 = 0;
    }
LABEL_120:
    v60 = v2->_contextMenuLegacyPreviewController.m_ptr;
    v2->_contextMenuLegacyPreviewController.m_ptr = v24;
    if (v60)
      CFRelease(v60);
    v24 = 0;
    goto LABEL_123;
  }
  BYTE6(v2->_dataListTextSuggestionsInputView.m_ptr) = 0;
  v9 = v2->_actionSheetAssistant.m_ptr;
  if (v9)
    objc_msgSend(v9, "defaultActionsForLinkSheet:", v8);
  else
    v71 = 0;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v63 = v2;
    v61 = v4;
    v62 = &v2->_positionInformation;
    v64 = v8;
    v14 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend((id)v71, "count"));
    v75 = 0u;
    v76 = 0u;
    *(_OWORD *)cf = 0u;
    v74 = 0u;
    v15 = objc_msgSend((id)v71, "countByEnumeratingWithState:objects:count:", cf, v77, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v74;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v74 != v16)
            objc_enumerationMutation((id)v71);
          v18 = (_WKElementAction *)*((_QWORD *)cf[1] + i);
          v19 = previewIdentifierForElementAction(v18);
          v20 = -[_WKElementAction title](v18, "title");
          v72[0] = (id)MEMORY[0x1E0C809B0];
          v72[1] = (id)3221225472;
          v72[2] = ___ZL40wkLegacyPreviewActionsFromElementActionsP7NSArrayIP16_WKElementActionEP23_WKActivatedElementInfo_block_invoke;
          v72[3] = &unk_1E34BA030;
          v72[4] = v18;
          v72[5] = v64;
          v21 = +[WKPreviewAction actionWithIdentifier:title:style:handler:](WKPreviewAction, "actionWithIdentifier:title:style:handler:", v19, v20, 0, v72);
          -[UIPreviewAction setImage:](v21, "setImage:", +[_WKElementAction imageForElementActionType:](_WKElementAction, "imageForElementActionType:", -[_WKElementAction type](v18, "type")));
          objc_msgSend(v14, "addObject:", v21);
        }
        v15 = objc_msgSend((id)v71, "countByEnumeratingWithState:objects:count:", cf, v77, 16);
      }
      while (v15);
    }
    v22 = -[WKPreviewElementInfo _initWithLinkURL:]([WKPreviewElementInfo alloc], "_initWithLinkURL:", WTF::URL::operator NSURL *());
    v2 = v63;
    v8 = v64;
    p_positionInformation = v62;
    v23 = objc_msgSend(v61, "webView:previewingViewControllerForElement:defaultActions:", -[WKContentView webView](v63, "webView"), v22, v14);
    v24 = (WKImagePreviewViewController *)v23;
    if (v23)
      v23 = (uint64_t)CFRetain((CFTypeRef)v23);
    if (v22)
      CFRelease(v22);
    if (!v24)
      goto LABEL_51;
LABEL_35:
    v23 = objc_msgSend((id)WTF::URL::operator NSURL *(), "iTunesStoreURL");
    if (!v23)
    {
      v25 = v71;
      v77[0] = v71;
      if (v71)
        CFRetain(v71);
      v69 = v8;
      if (v8)
        CFRetain(v8);
      v26 = (void *)menuFromLegacyPreviewOrDefaultActions(v24, (id *)v77, &v69, 0);
      v27 = v26;
      if (v26)
        CFRetain(v26);
      v28 = v2->_contextMenuLegacyMenu.m_ptr;
      v2->_contextMenuLegacyMenu.m_ptr = v27;
      if (v28)
        CFRelease(v28);
      v69 = 0;
      if (v8)
        CFRelease(v8);
      if (v25)
        CFRelease(v25);
      v29 = v71;
      v71 = 0;
      if (!v29)
        goto LABEL_120;
      goto LABEL_119;
    }
    goto LABEL_51;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v23 = objc_msgSend(v4, "_webView:previewViewControllerForURL:defaultActions:elementInfo:", -[WKContentView webView](v2, "webView"), WTF::URL::operator NSURL *(), v71, v8);
    v24 = (WKImagePreviewViewController *)v23;
    if (!v23)
      goto LABEL_51;
    goto LABEL_34;
  }
  v23 = objc_opt_respondsToSelector();
  if ((v23 & 1) == 0)
  {
    v24 = 0;
    goto LABEL_51;
  }
  v23 = objc_msgSend(v4, "_webView:previewViewControllerForURL:", -[WKContentView webView](v2, "webView"), WTF::URL::operator NSURL *());
  v24 = (WKImagePreviewViewController *)v23;
  if (v23)
  {
LABEL_34:
    CFRetain((CFTypeRef)v23);
    goto LABEL_35;
  }
LABEL_51:
  v30 = (void *)((uint64_t (*)(uint64_t))*MEMORY[0x1E0DCE078])(v23);
  v31 = -[WKContentView dataDetectionContextForPositionInformation:](v2, "dataDetectionContextForPositionInformation:", p_positionInformation);
  v32 = WTF::URL::operator NSURL *();
  if (p_positionInformation->dataDetectorIdentifier.m_impl.m_ptr)
    v33 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v33 = &stru_1E351F1B8;
  v34 = (void *)objc_msgSend(v30, "contextMenuConfigurationForURL:identifier:selectedText:results:inView:context:menuIdentifier:", v32, v33, -[WKContentView selectedText](v2, "selectedText"), p_positionInformation->dataDetectorResults.m_ptr, v2, v31, 0);
  v35 = v34;
  if (v34)
  {
    CFRetain(v34);
    if (v2->_showLinkPreviews && objc_msgSend(v35, "previewProvider"))
    {
      v36 = (void *)(*(uint64_t (**)(void))(objc_msgSend(v35, "previewProvider") + 16))();
      v37 = v36;
      if (v36)
        CFRetain(v36);
      v38 = v2->_contextMenuLegacyPreviewController.m_ptr;
      v2->_contextMenuLegacyPreviewController.m_ptr = v37;
      if (v38)
        CFRelease(v38);
    }
    if (objc_msgSend(v35, "actionProvider"))
    {
      v39 = v71;
      v77[0] = v71;
      if (v71)
        CFRetain(v71);
      v70 = v8;
      if (v8)
        CFRetain(v8);
      v40 = menuElementsFromDefaultActions((id *)v77, &v70);
      v70 = 0;
      if (v8)
        CFRelease(v8);
      if (v39)
        CFRelease(v39);
      v41 = objc_msgSend(v35, "actionProvider");
      v42 = (void *)(*(uint64_t (**)(uint64_t, void *))(v41 + 16))(v41, v40);
      v43 = v42;
      if (v42)
        CFRetain(v42);
      v44 = v2->_contextMenuLegacyMenu.m_ptr;
      v2->_contextMenuLegacyMenu.m_ptr = v43;
      if (v44)
        CFRelease(v44);
    }
    CFRelease(v35);
  }
  v45 = v71;
  v71 = 0;
  if (v45)
    CFRelease(v45);
LABEL_123:
  if (v8)
    CFRelease(v8);
  if (v24)
    CFRelease(v24);
}

- (id)contextMenuInteraction:(id)a3 configurationForMenuAtLocation:(CGPoint)a4
{
  double y;
  double x;
  id v8;
  const void *v9;
  CFTypeRef v10;
  _QWORD v12[4];
  CFTypeRef cf;

  y = a4.y;
  x = a4.x;
  if (-[WKContentView _shouldUseUIContextMenuAsyncConfiguration](self, "_shouldUseUIContextMenuAsyncConfiguration"))
  {
    v8 = objc_alloc_init(MEMORY[0x1E0C926B8]);
    v9 = v8;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3321888768;
    v12[2] = __93__WKContentView_WKInteractionPreview__contextMenuInteraction_configurationForMenuAtLocation___block_invoke;
    v12[3] = &__block_descriptor_40_e8_32c108_ZTSKZ93__WKContentView_WKInteractionPreview__contextMenuInteraction_configurationForMenuAtLocation__E5__123_e36_v16__0__UIContextMenuConfiguration_8l;
    if (v8)
    {
      CFRetain(v8);
      cf = v9;
      CFRetain(v9);
    }
    else
    {
      cf = 0;
    }
    -[WKContentView _internalContextMenuInteraction:configurationForMenuAtLocation:completion:](self, "_internalContextMenuInteraction:configurationForMenuAtLocation:completion:", a3, v12, x, y);
    if (v9)
    {
      CFRelease(v9);
      CFRetain(v9);
    }
    v10 = cf;
    cf = 0;
    if (v10)
      CFRelease(v10);
    if (v9)
      CFRelease(v9);
  }
  else
  {
    v9 = 0;
  }
  return (id)(id)CFMakeCollectable(v9);
}

uint64_t __93__WKContentView_WKInteractionPreview__contextMenuInteraction_configurationForMenuAtLocation___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "fulfillUsingConfiguration:", a2);
}

- (void)_internalContextMenuInteraction:(id)a3 configurationForMenuAtLocation:(CGPoint)a4 completion:(id)a5
{
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  id v11;
  CFTypeRef cf;
  void *aBlock;
  _QWORD v14[4];
  id v15;
  CFTypeRef v16;
  void *v17;

  self->_useContextMenuInteractionDismissalPreview = 1;
  if (objc_loadWeak(&self->_webView.m_weakReference)
    && (objc_msgSend((id)objc_msgSend(-[WKContentView webView](self, "webView"), "configuration"), "_longPressActionsEnabled") & 1) != 0)
  {
    v11 = 0;
    objc_initWeak(&v11, self);
    cf = a3;
    if (a3)
      CFRetain(a3);
    aBlock = _Block_copy(a5);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3321888768;
    v14[2] = ___ZZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__ENK5__124cvU13block_pointerFvN6WebKit31ProceedWithTextSelectionInImageEEEv_block_invoke;
    v14[3] = &__block_descriptor_56_e8_32c129_ZTSKZ113__WKContentView_WKInteractionPreview___internalContextMenuInteraction_configurationForMenuAtLocation_completion__E5__124_e8_v12__0B8l;
    v15 = 0;
    objc_copyWeak(&v15, &v11);
    v16 = cf;
    if (cf)
      CFRetain(cf);
    v17 = _Block_copy(aBlock);
    v8 = objc_msgSend((id)objc_msgSend(v14, "copy"), "autorelease");
    _Block_release(v17);
    v9 = v16;
    v16 = 0;
    if (v9)
      CFRelease(v9);
    objc_destroyWeak(&v15);
    -[WKContentView _doAfterPendingImageAnalysis:](self, "_doAfterPendingImageAnalysis:", v8);
    _Block_release(aBlock);
    v10 = cf;
    cf = 0;
    if (v10)
      CFRelease(v10);
    objc_destroyWeak(&v11);
  }
  else
  {
    (*((void (**)(id, _QWORD))a5 + 2))(a5, 0);
  }
}

- (id)placeholderForDynamicallyInsertedImageAnalysisActions
{
  void *v2;
  void *v3;

  if (LOBYTE(self->_cachedVisualSearchPreviewImageBoundsInWindowCoordinates.var0.__val_.origin.y) - 1 > 1)
    return 0;
  v2 = (void *)objc_msgSend(MEMORY[0x1E0CEA2A8], "actionWithTitle:image:identifier:handler:", &stru_1E351F1B8, 0, elementActionTypeToUIActionIdentifier(13), &__block_literal_global_40);
  v3 = v2;
  if (v2)
    CFRetain(v2);
  objc_msgSend(v3, "setAttributes:", 4);
  return (id)(id)CFMakeCollectable(v3);
}

- (void)continueContextMenuInteraction:(id)a3
{
  StringImpl *m_ptr;
  __int128 v6;
  void *v7;
  const WTF::URL *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  WebPageProxy *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  id v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  CFTypeRef *v33;
  API::ContextMenuElementInfo *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  _QWORD *v40;
  id v41;
  void *v42;
  id v43;
  __int128 v44;
  WTF::StringImpl *v45;
  void *aBlock[2];
  _BYTE v47[32];
  id v48;
  _QWORD v49[4];
  id v50;
  _QWORD v51[4];
  id v52;
  WTF::StringImpl *v53;
  _BYTE v54[32];
  id location[2];
  __int128 v56;
  __int128 v57;
  id v58[4];

  if (!-[WKContentView window](self, "window")
    || !self->_positionInformation.touchCalloutEnabled
    || !self->_positionInformation.isLink
    && !self->_positionInformation.isImage
    && !self->_positionInformation.isAttachment
    && !-[WKContentView positionInformationHasImageOverlayDataDetector](self, "positionInformationHasImageOverlayDataDetector"))
  {
    (*((void (**)(id, _QWORD))a3 + 2))(a3, 0);
    return;
  }
  m_ptr = self->_positionInformation.url.m_string.m_impl.m_ptr;
  if (!m_ptr)
  {
    v53 = 0;
    v44 = *(_OWORD *)&self->_positionInformation.url.m_hostEnd;
    *(_OWORD *)v54 = *(_OWORD *)((char *)&self->_positionInformation.url + 8);
    *(_OWORD *)&v54[16] = v44;
    if (!self->_positionInformation.isLink)
      goto LABEL_10;
LABEL_64:
    (*((void (**)(id, _QWORD))a3 + 2))(a3, 0);
    goto LABEL_65;
  }
  *(_DWORD *)m_ptr += 2;
  v53 = (WTF::StringImpl *)m_ptr;
  v6 = *(_OWORD *)&self->_positionInformation.url.m_hostEnd;
  *(_OWORD *)v54 = *(_OWORD *)((char *)&self->_positionInformation.url + 8);
  *(_OWORD *)&v54[16] = v6;
  if (self->_positionInformation.isLink && !*((_DWORD *)m_ptr + 1))
    goto LABEL_64;
LABEL_10:
  v7 = (void *)objc_msgSend(-[WKContentView webView](self, "webView"), "UIDelegate");
  if (!needsDeprecatedPreviewAPI((uint64_t)v7))
  {
    if (objc_msgSend((id)WTF::URL::operator NSURL *(), "iTunesStoreURL"))
    {
      -[WKContentView continueContextMenuInteractionWithDataDetectors:](self, "continueContextMenuInteractionWithDataDetectors:", a3);
      goto LABEL_65;
    }
    v16 = _Block_copy(a3);
    v17 = v53;
    v53 = 0;
    aBlock[0] = v16;
    aBlock[1] = v17;
    *(_OWORD *)&v47[4] = *(_OWORD *)&v54[4];
    *(_DWORD *)v47 = *(_DWORD *)v54;
    *(_QWORD *)&v47[20] = *(_QWORD *)&v54[20];
    *(_DWORD *)&v47[28] = *(_DWORD *)&v54[28];
    *(_DWORD *)v54 &= ~1u;
    v48 = 0;
    objc_initWeak(&v48, self);
    v18 = *(_OWORD *)aBlock;
    aBlock[0] = 0;
    aBlock[1] = 0;
    *(_OWORD *)location = v18;
    v56 = *(_OWORD *)v47;
    v57 = *(_OWORD *)&v47[16];
    *(_DWORD *)v47 &= ~1u;
    v58[0] = 0;
    objc_moveWeak(v58, &v48);
    v19 = malloc_type_malloc(0x58uLL, 0x10E0040CE977623uLL);
    v20 = MEMORY[0x1E0C809A0];
    *(_QWORD *)v19 = MEMORY[0x1E0C809A0];
    *((_QWORD *)v19 + 1) = 50331650;
    *((_QWORD *)v19 + 2) = WTF::BlockPtr<void ()(UIContextMenuConfiguration *)>::fromCallable<-[WKContentView(WKInteractionPreview) continueContextMenuInteraction:]::$_120>(-[WKContentView(WKInteractionPreview) continueContextMenuInteraction:]::$_120)::{lambda(void *,UIContextMenuConfiguration *)#1}::__invoke;
    *((_QWORD *)v19 + 3) = &WTF::BlockPtr<void ()(UIContextMenuConfiguration *)>::fromCallable<-[WKContentView(WKInteractionPreview) continueContextMenuInteraction:]::$_120>(-[WKContentView(WKInteractionPreview) continueContextMenuInteraction:]::$_120)::descriptor;
    v21 = location[0];
    location[0] = 0;
    *((_QWORD *)v19 + 4) = v21;
    WTF::URL::URL((uint64_t)v19 + 40, (uint64_t *)&location[1]);
    *((_QWORD *)v19 + 10) = 0;
    objc_moveWeak((id *)v19 + 10, v58);
    objc_destroyWeak(v58);
    v23 = (WTF::StringImpl *)location[1];
    location[1] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    _Block_release(location[0]);
    objc_destroyWeak(&v48);
    v25 = (WTF::StringImpl *)aBlock[1];
    aBlock[1] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    _Block_release(aBlock[0]);
    self->_contextMenuActionProviderDelegateNeedsOverride = 0;
    self->_contextMenuIsUsingAlternateURLForImage = 0;
    v26 = API::Object::newObject(0x2A0uLL, 51);
    *(_QWORD *)v26 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v26);
    *(_QWORD *)v26 = &off_1E34D92A8;
    WebKit::InteractionInformationAtPosition::InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)(v26 + 16), (const WebKit::InteractionInformationAtPosition *)&self->_positionInformation);
    *(_QWORD *)(v26 + 656) = 0;
    v27 = *(void **)(v26 + 8);
    if (v27)
      CFRetain(*(CFTypeRef *)(v26 + 8));
    v28 = self->_contextMenuElementInfo.m_ptr;
    self->_contextMenuElementInfo.m_ptr = v27;
    if (v28)
      CFRelease(v28);
    CFRelease(*(CFTypeRef *)(v26 + 8));
    if (self->_positionInformation.isImage
      && !self->_positionInformation.url.m_string.m_impl.m_ptr
      && (objc_opt_respondsToSelector() & 1) != 0)
    {
      v29 = objc_msgSend((id)objc_msgSend(self->_contextMenuElementInfo.m_ptr, "_activatedElementInfo"), "image");
      aBlock[0] = 0;
      v30 = objc_msgSend(v7, "_webView:alternateURLFromImage:userInfo:", -[WKContentView webView](self, "webView"), v29, aBlock);
      MEMORY[0x19AEABB18](location, v30);
      WTF::URL::operator=((uint64_t)&self->_positionInformation.url, (WTF::StringImpl *)location);
      v32 = (WTF::StringImpl *)location[0];
      location[0] = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v31);
        else
          *(_DWORD *)v32 -= 2;
      }
      if (v30)
        self->_contextMenuIsUsingAlternateURLForImage = 1;
      v33 = (CFTypeRef *)API::Object::newObject(0x2A0uLL, 51);
      v34 = API::ContextMenuElementInfo::ContextMenuElementInfo((API::ContextMenuElementInfo *)v33, (const WebKit::InteractionInformationAtPosition *)&self->_positionInformation, (NSDictionary *)aBlock[0]);
      v35 = (void *)*((_QWORD *)v34 + 1);
      if (v35)
        CFRetain(*((CFTypeRef *)v34 + 1));
      v36 = self->_contextMenuElementInfo.m_ptr;
      self->_contextMenuElementInfo.m_ptr = v35;
      if (v36)
        CFRelease(v36);
      CFRelease(v33[1]);
    }
    if (self->_positionInformation.isLink && (objc_opt_respondsToSelector() & 1) != 0)
    {
      WebKit::CompletionHandlerCallChecker::create((WebKit::CompletionHandlerCallChecker *)v7, (objc_object *)sel_webView_contextMenuConfigurationForElement_completionHandler_, (uint64_t *)location);
      v37 = -[WKContentView webView](self, "webView");
      v38 = self->_contextMenuElementInfo.m_ptr;
      v39 = location[0];
      v40 = malloc_type_malloc(0x30uLL, 0x10E0040DAA130B6uLL);
      *v40 = v20;
      v40[1] = 50331650;
      v40[2] = WTF::BlockPtr<void ()(UIContextMenuConfiguration *)>::fromCallable<-[WKContentView(WKInteractionPreview) continueContextMenuInteraction:]::$_121>(-[WKContentView(WKInteractionPreview) continueContextMenuInteraction:]::$_121)::{lambda(void *,UIContextMenuConfiguration *)#1}::__invoke;
      v40[3] = &WTF::BlockPtr<void ()(UIContextMenuConfiguration *)>::fromCallable<-[WKContentView(WKInteractionPreview) continueContextMenuInteraction:]::$_121>(-[WKContentView(WKInteractionPreview) continueContextMenuInteraction:]::$_121)::descriptor;
      v40[4] = v19;
      v40[5] = v39;
      _Block_release(0);
      objc_msgSend(v7, "webView:contextMenuConfigurationForElement:completionHandler:", v37, v38, v40);
    }
    else
    {
      if ((objc_opt_respondsToSelector() & 1) == 0)
      {
        (*((void (**)(void *, _QWORD))v19 + 2))(v19, 0);
        goto LABEL_62;
      }
      WebKit::CompletionHandlerCallChecker::create((WebKit::CompletionHandlerCallChecker *)v7, (objc_object *)sel__webView_contextMenuConfigurationForElement_completionHandler_, (uint64_t *)location);
      v41 = -[WKContentView webView](self, "webView");
      v42 = self->_contextMenuElementInfo.m_ptr;
      v43 = location[0];
      v40 = malloc_type_malloc(0x30uLL, 0x10E0040DAA130B6uLL);
      *v40 = v20;
      v40[1] = 50331650;
      v40[2] = WTF::BlockPtr<void ()(UIContextMenuConfiguration *)>::fromCallable<-[WKContentView(WKInteractionPreview) continueContextMenuInteraction:]::$_122>(-[WKContentView(WKInteractionPreview) continueContextMenuInteraction:]::$_122)::{lambda(void *,UIContextMenuConfiguration *)#1}::__invoke;
      v40[3] = &WTF::BlockPtr<void ()(UIContextMenuConfiguration *)>::fromCallable<-[WKContentView(WKInteractionPreview) continueContextMenuInteraction:]::$_122>(-[WKContentView(WKInteractionPreview) continueContextMenuInteraction:]::$_122)::descriptor;
      v40[4] = v19;
      v40[5] = v43;
      _Block_release(0);
      objc_msgSend(v7, "_webView:contextMenuConfigurationForElement:completionHandler:", v41, v42, v40);
    }
    _Block_release(v40);
    _Block_release(0);
    v19 = 0;
LABEL_62:
    _Block_release(v19);
    goto LABEL_65;
  }
  if (!self->_positionInformation.isLink)
    goto LABEL_18;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v9 = -[WKPreviewElementInfo _initWithLinkURL:]([WKPreviewElementInfo alloc], "_initWithLinkURL:", WTF::URL::operator NSURL *());
    if ((objc_msgSend(v7, "webView:shouldPreviewElement:", -[WKContentView webView](self, "webView"), v9) & 1) == 0)
    {
      (*((void (**)(id, _QWORD))a3 + 2))(a3, 0);
      if (v9)
        CFRelease(v9);
      goto LABEL_65;
    }
    if (v9)
      CFRelease(v9);
  }
  if ((v54[0] & 2) != 0
    || (WebCore::DataDetection::canBePresentedByDataDetectors((WebCore::DataDetection *)&v53, v8) & 1) != 0)
  {
LABEL_18:
    v10 = self->_contextMenuLegacyPreviewController.m_ptr;
    self->_contextMenuLegacyPreviewController.m_ptr = 0;
    if (v10)
      CFRelease(v10);
    v11 = self->_contextMenuLegacyMenu.m_ptr;
    self->_contextMenuLegacyMenu.m_ptr = 0;
    if (v11)
      CFRelease(v11);
    self->_contextMenuHasRequestedLegacyData = 0;
    self->_contextMenuActionProviderDelegateNeedsOverride = 0;
    self->_contextMenuIsUsingAlternateURLForImage = 0;
    v12 = MEMORY[0x1E0C809B0];
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 3321888768;
    v51[2] = __70__WKContentView_WKInteractionPreview__continueContextMenuInteraction___block_invoke;
    v51[3] = &__block_descriptor_40_e8_32c85_ZTSKZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__E5__125_e25___UIMenu_16__0__NSArray_8l;
    location[0] = 0;
    objc_initWeak(location, self);
    v52 = 0;
    objc_copyWeak(&v52, location);
    objc_destroyWeak(location);
    v49[0] = v12;
    v49[1] = 3321888768;
    v49[2] = __70__WKContentView_WKInteractionPreview__continueContextMenuInteraction___block_invoke_2575;
    v49[3] = &__block_descriptor_40_e8_32c85_ZTSKZ70__WKContentView_WKInteractionPreview__continueContextMenuInteraction__E5__126_e23___UIViewController_8__0l;
    location[0] = 0;
    objc_initWeak(location, self);
    v50 = 0;
    objc_copyWeak(&v50, location);
    objc_destroyWeak(location);
    v13 = self->_page.m_ptr;
    v14 = *((_QWORD *)v13 + 26);
    location[0] = &self->_positionInformation.elementContext.var0.var2 + 1;
    location[1] = &self->_positionInformation;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartInteractionWithElementContextOrPosition>(v14, (uint64_t)location, *(_QWORD *)(*((_QWORD *)v13 + 4) + 1896), 0);
    (*((void (**)(id, uint64_t))a3 + 2))(a3, objc_msgSend(MEMORY[0x1E0CEA4B0], "configurationWithIdentifier:previewProvider:actionProvider:", 0, v49, v51));
    objc_destroyWeak(&v50);
    objc_destroyWeak(&v52);
  }
  else
  {
    (*((void (**)(id, _QWORD))a3 + 2))(a3, 0);
  }
LABEL_65:
  v45 = v53;
  v53 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v15);
    else
      *(_DWORD *)v45 -= 2;
  }
}

uint64_t __70__WKContentView_WKInteractionPreview__continueContextMenuInteraction___block_invoke(uint64_t a1)
{
  _BYTE *WeakRetained;
  _QWORD *v2;
  uint64_t v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
    return 0;
  v2 = WeakRetained;
  if (!WeakRetained[1240])
    objc_msgSend(WeakRetained, "assignLegacyDataForContextMenuInteraction");
  v3 = v2[154];
  CFRelease(v2);
  return v3;
}

uint64_t __70__WKContentView_WKInteractionPreview__continueContextMenuInteraction___block_invoke_2575(uint64_t a1)
{
  _BYTE *WeakRetained;
  _QWORD *v2;
  uint64_t v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
    return 0;
  v2 = WeakRetained;
  if (!WeakRetained[1240])
    objc_msgSend(WeakRetained, "assignLegacyDataForContextMenuInteraction");
  v3 = v2[153];
  CFRelease(v2);
  return v3;
}

- (void)continueContextMenuInteractionWithDataDetectors:(id)a3
{
  void *v5;
  id v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  const __CFString *v11;
  const void *v12;
  WebPageProxy *m_ptr;
  uint64_t v14;
  _QWORD v15[2];

  v5 = (void *)((uint64_t (*)(WKContentView *, SEL))*MEMORY[0x1E0DCE078])(self, a2);
  v6 = -[WKContentView dataDetectionContextForPositionInformation:](self, "dataDetectionContextForPositionInformation:", &self->_positionInformation);
  v7 = v6;
  if (v6)
    CFRetain(v6);
  if (-[WKContentView positionInformationHasImageOverlayDataDetector](self, "positionInformationHasImageOverlayDataDetector"))
  {
    v8 = (const void *)objc_msgSend(v5, "contextMenuConfigurationWithResult:inView:context:menuIdentifier:", objc_msgSend((id)objc_msgSend(self->_positionInformation.dataDetectorResults.m_ptr, "firstObject"), "coreResult"), self, v7, 0);
    v9 = v8;
    if (v8)
      CFRetain(v8);
  }
  else
  {
    v10 = WTF::URL::operator NSURL *();
    if (self->_positionInformation.dataDetectorIdentifier.m_impl.m_ptr)
      v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v11 = &stru_1E351F1B8;
    v12 = (const void *)objc_msgSend(v5, "contextMenuConfigurationForURL:identifier:selectedText:results:inView:context:menuIdentifier:", v10, v11, -[WKContentView selectedText](self, "selectedText"), self->_positionInformation.dataDetectorResults.m_ptr, self, v7, 0);
    v9 = v12;
    if (v12)
      CFRetain(v12);
    m_ptr = self->_page.m_ptr;
    v14 = *((_QWORD *)m_ptr + 26);
    v15[0] = &self->_positionInformation.elementContext.var0.var2 + 1;
    v15[1] = &self->_positionInformation;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartInteractionWithElementContextOrPosition>(v14, (uint64_t)v15, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
  }
  self->_contextMenuActionProviderDelegateNeedsOverride = 1;
  (*((void (**)(id, const void *))a3 + 2))(a3, v9);
  if (v9)
    CFRelease(v9);
  if (v7)
    CFRelease(v7);
}

- (id)_contextMenuInteraction:(id)a3 overrideSuggestedActionsForConfiguration:(id)a4
{
  void *v5;
  id v6;

  if (!self->_contextMenuActionProviderDelegateNeedsOverride)
    return 0;
  v5 = (void *)objc_msgSend(self->_actionSheetAssistant.m_ptr, "suggestedActionsForContextMenuWithPositionInformation:", &self->_positionInformation, a4);
  v6 = -[WKContentView placeholderForDynamicallyInsertedImageAnalysisActions](self, "placeholderForDynamicallyInsertedImageAnalysisActions");
  if (v6)
    objc_msgSend(v5, "addObject:", v6);
  return v5;
}

- (id)contextMenuInteraction:(id)a3 configuration:(id)a4 highlightPreviewForItemWithIdentifier:(id)a5
{
  -[WKContentView _startSuppressingSelectionAssistantForReason:](self, "_startSuppressingSelectionAssistantForReason:", 4, a4, a5);
  -[WKContentView _cancelTouchEventGestureRecognizer](self, "_cancelTouchEventGestureRecognizer");
  return -[WKContentView _createTargetedContextMenuHintPreviewIfPossible](self, "_createTargetedContextMenuHintPreviewIfPossible");
}

- (void)contextMenuInteraction:(id)a3 willDisplayMenuForConfiguration:(id)a4 animator:(id)a5
{
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;

  if (objc_loadWeak(&self->_webView.m_weakReference))
  {
    self->_isDisplayingContextMenuWithAnimation = 1;
    v8 = 0;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3321888768;
    v9[2] = __103__WKContentView_WKInteractionPreview__contextMenuInteraction_willDisplayMenuForConfiguration_animator___block_invoke;
    v9[3] = &__block_descriptor_40_e8_32c119_ZTSKZ103__WKContentView_WKInteractionPreview__contextMenuInteraction_willDisplayMenuForConfiguration_animator__E5__127_e5_v8__0l;
    objc_initWeak(&v8, self);
    v10 = 0;
    objc_copyWeak(&v10, &v8);
    objc_msgSend(a5, "addCompletion:", v9);
    objc_destroyWeak(&v8);
    v7 = (void *)objc_msgSend(-[WKContentView webView](self, "webView"), "UIDelegate");
    if (v7)
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        objc_msgSend(v7, "webView:contextMenuWillPresentForElement:", -[WKContentView webView](self, "webView"), self->_contextMenuElementInfo.m_ptr);
      }
      else if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        objc_msgSend(v7, "_webView:contextMenuWillPresentForElement:", -[WKContentView webView](self, "webView"), self->_contextMenuElementInfo.m_ptr);
      }
    }
    objc_destroyWeak(&v10);
  }
}

void __103__WKContentView_WKInteractionPreview__contextMenuInteraction_willDisplayMenuForConfiguration_animator___block_invoke(uint64_t a1)
{
  id WeakRetained;
  _BYTE *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    *((_BYTE *)WeakRetained + 1288) = 0;
    objc_msgSend(objc_loadWeak((id *)WeakRetained + 56), "_didShowContextMenu");
    if (v2[3864] == 2)
      objc_msgSend(v2, "_insertDynamicImageAnalysisContextMenuItemsIfPossible");
    CFRelease(v2);
  }
}

- (id)contextMenuInteraction:(id)a3 configuration:(id)a4 dismissalPreviewForItemWithIdentifier:(id)a5
{
  _BOOL4 useContextMenuInteractionDismissalPreview;
  void *m_ptr;

  useContextMenuInteractionDismissalPreview = self->_useContextMenuInteractionDismissalPreview;
  m_ptr = self->_contextMenuInteractionTargetedPreview.m_ptr;
  self->_contextMenuInteractionTargetedPreview.m_ptr = 0;
  if (useContextMenuInteractionDismissalPreview)
    return (id)(id)CFMakeCollectable(m_ptr);
  if (m_ptr)
    CFRelease(m_ptr);
  return 0;
}

- (void)contextMenuInteraction:(id)a3 willPerformPreviewActionForMenuWithConfiguration:(id)a4 animator:(id)a5
{
  uint64_t v8;
  void *v9;
  StringImpl *m_ptr;
  uint64_t v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef v20;
  CFTypeRef v21;
  _QWORD v22[5];
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  void *v26;
  CFTypeRef v27;
  CFTypeRef cf;

  if (objc_loadWeak(&self->_webView.m_weakReference))
  {
    self->_useContextMenuInteractionDismissalPreview = 0;
    v8 = objc_msgSend(-[WKContentView webView](self, "webView"), "UIDelegate");
    if (v8)
    {
      v9 = (void *)v8;
      if (needsDeprecatedPreviewAPI(v8))
      {
        if (self->_positionInformation.isImage)
        {
          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            m_ptr = self->_positionInformation.imageURL.m_string.m_impl.m_ptr;
            if (m_ptr)
            {
              if (*((_DWORD *)m_ptr + 1)
                && ((*((_BYTE *)&self->_positionInformation.imageURL + 8) & 2) != 0
                 || WTF::URL::protocolIs()))
              {
                objc_msgSend(v9, "_webView:commitPreviewedImageWithURL:", -[WKContentView webView](self, "webView"), WTF::URL::operator NSURL *());
              }
            }
          }
        }
        else if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v16 = self->_contextMenuLegacyPreviewController.m_ptr;
          if (v16)
            objc_msgSend(v9, "webView:commitPreviewingViewController:", -[WKContentView webView](self, "webView"), v16);
        }
        else if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v17 = self->_contextMenuLegacyPreviewController.m_ptr;
          if (v17)
            objc_msgSend(v9, "_webView:commitPreviewedViewController:", -[WKContentView webView](self, "webView"), v17);
        }
      }
      else
      {
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v11 = objc_msgSend(v9, "webView:contextMenuForElement:willCommitWithAnimator:", -[WKContentView webView](self, "webView"), self->_contextMenuElementInfo.m_ptr, a5);
        }
        else
        {
          v11 = objc_opt_respondsToSelector();
          if ((v11 & 1) != 0)
            v11 = objc_msgSend(v9, "_webView:contextMenuForElement:willCommitWithAnimator:", -[WKContentView webView](self, "webView"), self->_contextMenuElementInfo.m_ptr, a5);
        }
        ((void (*)(uint64_t))*MEMORY[0x1E0DCE170])(v11);
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if (objc_msgSend(a4, "interactionViewControllerProvider"))
          {
            v12 = (const void *)(*(uint64_t (**)(void))(objc_msgSend(a4, "interactionViewControllerProvider") + 16))();
            v13 = v12;
            if (v12)
              CFRetain(v12);
            objc_msgSend(a5, "setPreferredCommitStyle:", 1);
            self->_useContextMenuInteractionDismissalPreview = 1;
            v14 = (const void *)objc_msgSend((id)objc_msgSend(a5, "previewViewController"), "presentingViewController");
            v15 = v14;
            if (v14)
            {
              CFRetain(v14);
              v23 = MEMORY[0x1E0C809B0];
              v24 = 3321888768;
              v25 = __120__WKContentView_WKInteractionPreview__contextMenuInteraction_willPerformPreviewActionForMenuWithConfiguration_animator___block_invoke;
              v26 = &__block_descriptor_48_e8_32c40_ZTSN3WTF9RetainPtrI16UIViewControllerEE40c40_ZTSN3WTF9RetainPtrI16UIViewControllerEE_e5_v8__0l;
              v27 = v15;
              CFRetain(v15);
            }
            else
            {
              v23 = MEMORY[0x1E0C809B0];
              v24 = 3321888768;
              v25 = __120__WKContentView_WKInteractionPreview__contextMenuInteraction_willPerformPreviewActionForMenuWithConfiguration_animator___block_invoke;
              v26 = &__block_descriptor_48_e8_32c40_ZTSN3WTF9RetainPtrI16UIViewControllerEE40c40_ZTSN3WTF9RetainPtrI16UIViewControllerEE_e5_v8__0l;
              v27 = 0;
            }
            cf = v13;
            if (v13)
              CFRetain(v13);
            objc_msgSend(a5, "addAnimations:", &v23);
            v20 = cf;
            cf = 0;
            if (v20)
              CFRelease(v20);
            v21 = v27;
            v27 = 0;
            if (v21)
              CFRelease(v21);
            if (v15)
              CFRelease(v15);
            if (v13)
              CFRelease(v13);
          }
          else
          {
            v18 = objc_msgSend(a4, "interactionURL");
            if (v18)
            {
              v19 = v18;
              objc_msgSend(a5, "setPreferredCommitStyle:", 1);
              self->_useContextMenuInteractionDismissalPreview = 1;
              v22[0] = MEMORY[0x1E0C809B0];
              v22[1] = 3221225472;
              v22[2] = __120__WKContentView_WKInteractionPreview__contextMenuInteraction_willPerformPreviewActionForMenuWithConfiguration_animator___block_invoke_2600;
              v22[3] = &unk_1E34BAF80;
              v22[4] = v19;
              objc_msgSend(a5, "addAnimations:", v22);
            }
          }
        }
      }
    }
  }
}

uint64_t __120__WKContentView_WKInteractionPreview__contextMenuInteraction_willPerformPreviewActionForMenuWithConfiguration_animator___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 0, 0);
}

uint64_t __120__WKContentView_WKInteractionPreview__contextMenuInteraction_willPerformPreviewActionForMenuWithConfiguration_animator___block_invoke_2600(uint64_t a1)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication"), "openURL:withCompletionHandler:", *(_QWORD *)(a1 + 32), 0);
}

- (void)contextMenuInteraction:(id)a3 willEndForConfiguration:(id)a4 animator:(id)a5
{
  void *v7;
  WebPageProxy *m_ptr;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id *v14;
  id *v15;
  id v16;
  _QWORD v17[4];
  id v18;

  if (objc_loadWeak(&self->_webView.m_weakReference))
  {
    if (self->_contextMenuElementInfo.m_ptr)
    {
      v7 = (void *)objc_msgSend(-[WKContentView webView](self, "webView"), "UIDelegate");
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        objc_msgSend(v7, "webView:contextMenuDidEndForElement:", -[WKContentView webView](self, "webView"), self->_contextMenuElementInfo.m_ptr);
      }
      else if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        objc_msgSend(v7, "_webView:contextMenuDidEndForElement:", -[WKContentView webView](self, "webView"), self->_contextMenuElementInfo.m_ptr);
      }
    }
    m_ptr = self->_page.m_ptr;
    v9 = *((_QWORD *)m_ptr + 26);
    LOBYTE(v17[0]) = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StopInteraction>(v9, (uint64_t)v17, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
    v10 = self->_contextMenuLegacyPreviewController.m_ptr;
    self->_contextMenuLegacyPreviewController.m_ptr = 0;
    if (v10)
      CFRelease(v10);
    v11 = self->_contextMenuLegacyMenu.m_ptr;
    self->_contextMenuLegacyMenu.m_ptr = 0;
    if (v11)
      CFRelease(v11);
    self->_contextMenuHasRequestedLegacyData = 0;
    v12 = self->_contextMenuElementInfo.m_ptr;
    self->_contextMenuElementInfo.m_ptr = 0;
    if (v12)
      CFRelease(v12);
    v16 = 0;
    objc_initWeak(&v16, self);
    if (a5)
    {
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3321888768;
      v17[2] = ___ZZ95__WKContentView_WKInteractionPreview__contextMenuInteraction_willEndForConfiguration_animator__ENK5__128cvU13block_pointerFvvEEv_block_invoke;
      v17[3] = &__block_descriptor_40_e8_32c110_ZTSKZ95__WKContentView_WKInteractionPreview__contextMenuInteraction_willEndForConfiguration_animator__E5__128_e5_v8__0l;
      v18 = 0;
      objc_copyWeak(&v18, &v16);
      v13 = objc_msgSend((id)objc_msgSend(v17, "copy"), "autorelease");
      objc_destroyWeak(&v18);
      objc_msgSend(a5, "addCompletion:", v13);
    }
    else
    {
      v14 = (id *)objc_loadWeakRetained(&v16);
      v15 = v14;
      if (v14)
      {
        *((_BYTE *)v14 + 1288) = 0;
        objc_msgSend(v14, "_removeContextMenuHintContainerIfPossible");
        objc_msgSend(objc_loadWeak(v15 + 56), "_didDismissContextMenu");
        objc_msgSend(v15, "_stopSuppressingSelectionAssistantForReason:", 4);
        CFRelease(v15);
      }
    }
    objc_destroyWeak(&v16);
  }
}

- (BOOL)_interactionShouldBeginFromPreviewItemController:(id)a3 forPosition:(CGPoint)a4
{
  float v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  URL *p_url;
  void *v16;
  const WTF::URL *v17;
  id v18;
  char v19;
  float v21[2];
  CGPoint v22;

  v22 = a4;
  if (!BYTE6(self->_dataListTextSuggestionsInputView.m_ptr))
    return 0;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v21, &v22);
  v5 = roundf(v21[0]);
  v6 = 0x7FFFFFFFLL;
  v7 = 0x80000000;
  if (v5 > -2147500000.0)
    v7 = (int)v5;
  if (v5 < 2147500000.0)
    v6 = v7;
  v8 = roundf(v21[1]);
  v9 = 0x7FFFFFFF00000000;
  v10 = 0x8000000000000000;
  if (v8 > -2147500000.0)
    v10 = (unint64_t)(int)v8 << 32;
  if (v8 < 2147500000.0)
    v9 = v10;
  v11 = v9 | v6;
  if (-[WKContentView _shouldUseContextMenus](self, "_shouldUseContextMenus"))
    v12 = 16777473;
  else
    v12 = 0x1000001000101;
  v13 = objc_msgSend(-[WKContentView webView](self, "webView"), "_allowAnimationControls");
  v14 = 0x10000000000;
  if (!v13)
    v14 = 0;
  if (!-[WKContentView ensurePositionInformationIsUpToDate:](self, "ensurePositionInformationIsUpToDate:", v11, v14 | v12))return 0;
  if (!self->_positionInformation.isLink)
    return self->_positionInformation.isImage || self->_positionInformation.isAttachment;
  p_url = &self->_positionInformation.url;
  v16 = (void *)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    if (p_url->m_string.m_impl.m_ptr && *((_DWORD *)p_url->m_string.m_impl.m_ptr + 1))
    {
      if ((*((_BYTE *)&self->_positionInformation.url + 8) & 2) == 0)
        return WebCore::DataDetection::canBePresentedByDataDetectors((WebCore::DataDetection *)&self->_positionInformation.url, v17);
      return 1;
    }
    return 0;
  }
  v18 = -[WKPreviewElementInfo _initWithLinkURL:]([WKPreviewElementInfo alloc], "_initWithLinkURL:", WTF::URL::operator NSURL *());
  v19 = objc_msgSend(v16, "webView:shouldPreviewElement:", -[WKContentView webView](self, "webView"), v18);
  if (v18)
    CFRelease(v18);
  return v19;
}

- (id)_dataForPreviewItemController:(id)a3 atPosition:(CGPoint)a4 type:(int64_t *)a5
{
  void *v7;
  unsigned int v8;
  int v9;
  char v10;
  int v11;
  _BOOL4 isDataDetectorLink;
  id v13;
  uint64_t v14;
  StringImpl *m_ptr;
  id v16;
  void *v18;
  uint64_t v19;
  const __CFString *v20;
  PAL *v21;
  StringImpl *v22;
  StringImpl *v23;
  PAL *v24;
  const __CFString *v25;
  void *v26;
  void *v27;
  const void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t DataDetectorsUI_kDataDetectorsLeadingText;
  uint64_t DataDetectorsUI_kDataDetectorsTrailingText;
  _QWORD v38[3];

  v38[2] = *MEMORY[0x1E0C80C00];
  *a5 = 0;
  v7 = (void *)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "UIDelegate");
  v8 = self->_positionInformation.isImage & objc_opt_respondsToSelector();
  if (self->_positionInformation.isLink)
    v9 = 1;
  else
    v9 = v8;
  v10 = objc_opt_respondsToSelector();
  if ((objc_opt_respondsToSelector() & 1) != 0 || (v10 & 1) != 0)
    v11 = objc_opt_respondsToSelector();
  else
    v11 = 0;
  if (!self->_positionInformation.isAttachment && !self->_positionInformation.isImage)
    v11 = 0;
  isDataDetectorLink = self->_positionInformation.isDataDetectorLink;
  if (v8)
  {
    if (self->_positionInformation.isAnimatedImage)
    {
      v13 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      *a5 = 2;
      objc_msgSend(v13, "setObject:forKeyedSubscript:", WTF::URL::operator NSURL *(), *MEMORY[0x1E0CEBA68]);
      goto LABEL_14;
    }
  }
  else if (((v9 | v11) & 1) == 0)
  {
    return 0;
  }
  m_ptr = self->_positionInformation.url.m_string.m_impl.m_ptr;
  if (!m_ptr
    || !*((_DWORD *)m_ptr + 1)
    || !self->_positionInformation.isDataDetectorLink && (*((_DWORD *)&self->_positionInformation.url + 2) & 2) == 0)
  {
    if (((v9 ^ 1 | v8) & 1) != 0)
    {
      v16 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      if (v8)
      {
        *a5 = 3;
        v13 = v16;
        objc_msgSend(v16, "setObject:forKeyedSubscript:", WTF::URL::operator NSURL *(), *MEMORY[0x1E0CEBA68]);
        return (id)(id)CFMakeCollectable(v13);
      }
      v13 = v16;
LABEL_46:
      if ((v11 & 1) == 0)
        return (id)(id)CFMakeCollectable(v13);
      *a5 = 5;
      v29 = -[_WKActivatedElementInfo _initWithType:URL:image:information:]([_WKActivatedElementInfo alloc], "_initWithType:URL:image:information:", 2, WTF::URL::operator NSURL *(), 0, &self->_positionInformation);
      v30 = objc_msgSend(v7, "_webView:indexIntoAttachmentListForElement:", -[WKContentView webView](self, "webView"), v29);
      if (v30 != 0x7FFFFFFFFFFFFFFFLL)
      {
        LOBYTE(v35) = 0;
        if ((v10 & 1) != 0)
          v31 = objc_msgSend(v7, "_attachmentListForWebView:sourceIsManaged:", -[WKContentView webView](self, "webView"), &v35);
        else
          v31 = objc_msgSend(v7, "_attachmentListForWebView:", -[WKContentView webView](self, "webView"));
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v31, *MEMORY[0x1E0CEBA48], v35);
        v33 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v30);
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v33, *MEMORY[0x1E0CEBA40]);
        v34 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v35);
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v34, *MEMORY[0x1E0CEBA50]);
      }
      if (!v29)
        return (id)(id)CFMakeCollectable(v13);
      v32 = v29;
      goto LABEL_54;
    }
    return 0;
  }
  v13 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if ((v9 & 1) == 0)
    goto LABEL_46;
  *a5 = 2;
  objc_msgSend(v13, "setObject:forKeyedSubscript:", WTF::URL::operator NSURL *(), *MEMORY[0x1E0CEBA68]);
LABEL_14:
  if (!isDataDetectorLink)
    return (id)(id)CFMakeCollectable(v13);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v14 = objc_msgSend(v7, "_dataDetectionContextForWebView:", -[WKContentView webView](self, "webView"));
  else
    v14 = 0;
  v18 = (void *)objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCE0B8])(), "sharedController");
  v35 = 0;
  v19 = objc_msgSend(v13, "objectForKeyedSubscript:", *MEMORY[0x1E0CEBA68]);
  if (self->_positionInformation.dataDetectorIdentifier.m_impl.m_ptr)
    v20 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v20 = &stru_1E351F1B8;
  v21 = (PAL *)objc_msgSend(v18, "resultForURL:identifier:selectedText:results:context:extendedContext:", v19, v20, -[WKContentView selectedText](self, "selectedText"), self->_positionInformation.dataDetectorResults.m_ptr, v14, &v35);
  if (v21)
    v21 = (PAL *)objc_msgSend(v13, "setObject:forKeyedSubscript:", v21, *MEMORY[0x1E0CEBA60]);
  v22 = self->_positionInformation.textBefore.m_impl.m_ptr;
  if (!v22 || !*((_DWORD *)v22 + 1))
  {
    v23 = self->_positionInformation.textAfter.m_impl.m_ptr;
    if (!v23 || !*((_DWORD *)v23 + 1))
    {
      v28 = 0;
      v27 = v35;
      if (!v35)
        goto LABEL_52;
      goto LABEL_51;
    }
  }
  DataDetectorsUI_kDataDetectorsLeadingText = PAL::get_DataDetectorsUI_kDataDetectorsLeadingText(v21);
  if (self->_positionInformation.textBefore.m_impl.m_ptr)
    v24 = (PAL *)WTF::StringImpl::operator NSString *();
  else
    v24 = (PAL *)&stru_1E351F1B8;
  v38[0] = v24;
  DataDetectorsUI_kDataDetectorsTrailingText = PAL::get_DataDetectorsUI_kDataDetectorsTrailingText(v24);
  if (self->_positionInformation.textAfter.m_impl.m_ptr)
    v25 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v25 = &stru_1E351F1B8;
  v38[1] = v25;
  v26 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v38, &DataDetectorsUI_kDataDetectorsLeadingText, 2), "mutableCopy");
  v27 = v26;
  if (v35)
    objc_msgSend(v26, "addEntriesFromDictionary:");
  v35 = v27;
  v28 = v27;
  if (v27)
LABEL_51:
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v27, *MEMORY[0x1E0CEBA58], v35, DataDetectorsUI_kDataDetectorsLeadingText, DataDetectorsUI_kDataDetectorsTrailingText);
LABEL_52:
  if (v28)
  {
    v32 = v28;
LABEL_54:
    CFRelease(v32);
  }
  return (id)(id)CFMakeCollectable(v13);
}

- (CGRect)_presentationRectForPreviewItemController:(id)a3
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  WebCore::IntRect::operator CGRect();
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

- (id)_presentedViewControllerForPreviewItemController:(id)a3
{
  CFTypeRef v3;
  WKContentView *v5;
  WeakObjCPtr<WKWebView> *p_webView;
  void *v7;
  void *v8;
  const void *v9;
  int v10;
  WebPageProxy *v11;
  uint64_t v12;
  id v13;
  WTF::StringImpl *v14;
  char v15;
  void *v16;
  CFTypeRef v17;
  int v18;
  const void *v19;
  const void *v20;
  const void *v21;
  CFTypeRef v22;
  id v23;
  WebPageProxy *m_ptr;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  WKImagePreviewViewController *v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  const void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  _WKElementAction *v41;
  NSString *v42;
  uint64_t v43;
  CFTypeRef v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  CFTypeRef v48;
  WTF::StringImpl *v49;
  void *v51;
  WKContentView *v52;
  const void *v53;
  id obj;
  id v55;
  CFTypeRef v56;
  CFTypeRef v57;
  CFTypeRef v58;
  CFTypeRef v59;
  CFTypeRef v60;
  _QWORD v61[5];
  CFTypeRef v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  WTF::StringImpl *v67;
  char v68;
  CFTypeRef cf;
  InteractionInformationAtPosition *p_positionInformation;
  _BYTE v71[128];
  uint64_t v72;

  v5 = self;
  v72 = *MEMORY[0x1E0C80C00];
  p_webView = &self->_webView;
  v7 = (void *)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "UIDelegate");
  objc_msgSend(objc_loadWeak(&p_webView->m_weakReference), "_didShowContextMenu");
  v8 = (void *)objc_msgSend(a3, "previewData");
  v9 = (const void *)objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x1E0CEBA68]);
  MEMORY[0x19AEABB18](&v67, v9);
  if (v67 && *((_DWORD *)v67 + 1))
  {
    if ((v68 & 2) != 0)
      v10 = 1;
    else
      v10 = WTF::URL::protocolIs();
  }
  else
  {
    v10 = 0;
  }
  if (objc_msgSend(v5->_previewItemController.m_ptr, "type") != 2)
  {
    if (objc_msgSend(v5->_previewItemController.m_ptr, "type") == 3)
      v18 = v10;
    else
      v18 = 0;
    if (v18 != 1)
    {
      v3 = 0;
      goto LABEL_94;
    }
    if (v9)
      CFRetain(v9);
    WebCore::ShareableBitmap::makeCGImageCopy((WebCore::ShareableBitmap *)v5->_positionInformation.image.m_ptr);
    v19 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA638]), "initWithCGImage:", v60);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      cf = 0;
      v20 = v9;
      v21 = (const void *)objc_msgSend(v7, "_webView:alternateURLFromImage:userInfo:", -[WKContentView webView](v5, "webView"), v19, &cf);
      v9 = v21;
      if (v21)
        CFRetain(v21);
      if (v20)
        CFRelease(v20);
      v22 = cf;
      if (cf)
        CFRetain(cf);
    }
    else
    {
      v22 = 0;
      v20 = v9;
    }
    v23 = -[_WKActivatedElementInfo _initWithType:URL:imageURL:userInfo:information:]([_WKActivatedElementInfo alloc], "_initWithType:URL:imageURL:userInfo:information:", 1, v9, 0, v22, &v5->_positionInformation);
    m_ptr = v5->_page.m_ptr;
    v25 = *((_QWORD *)m_ptr + 26);
    cf = &v5->_positionInformation.elementContext.var0.var2 + 1;
    p_positionInformation = &v5->_positionInformation;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartInteractionWithElementContextOrPosition>(v25, (uint64_t)&cf, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v7, "_webView:willPreviewImageWithURL:", -[WKContentView webView](v5, "webView"), v20);
    v26 = v5->_actionSheetAssistant.m_ptr;
    if (v26)
    {
      objc_msgSend(v26, "defaultActionsForImageSheet:", v23);
      if (!v22)
        goto LABEL_36;
    }
    else
    {
      cf = 0;
      if (!v22)
      {
LABEL_36:
        v28 = [WKImagePreviewViewController alloc];
        v59 = v60;
        if (v60)
          CFRetain(v60);
        v58 = cf;
        if (cf)
          CFRetain(cf);
        v57 = v23;
        if (v23)
          CFRetain(v23);
        v3 = (id)CFMakeCollectable(-[WKImagePreviewViewController initWithCGImage:defaultActions:elementInfo:](v28, "initWithCGImage:defaultActions:elementInfo:", &v59, &v58, &v57));
        v29 = v57;
        v57 = 0;
        if (v29)
          CFRelease(v29);
        v30 = v58;
        v58 = 0;
        if (v30)
          CFRelease(v30);
        v31 = v59;
        v59 = 0;
        if (v31)
          CFRelease(v31);
LABEL_48:
        v32 = cf;
        cf = 0;
        if (v32)
          CFRelease(v32);
        if (v23)
          CFRelease(v23);
        if (v19)
          CFRelease(v19);
        v33 = v60;
        v60 = 0;
        if (v33)
        {
          CFRelease(v33);
          if (!v22)
          {
LABEL_57:
            v34 = v9;
            if (!v9)
              goto LABEL_94;
            goto LABEL_93;
          }
        }
        else if (!v22)
        {
          goto LABEL_57;
        }
        CFRelease(v22);
        goto LABEL_57;
      }
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v27 = -[WKContentView webView](v5, "webView");
      v3 = (CFTypeRef)objc_msgSend(v7, "_webView:previewViewControllerForImage:alternateURL:defaultActions:elementInfo:", v27, v19, v9, cf, v23);
      if (v3)
        goto LABEL_48;
    }
    goto LABEL_36;
  }
  BYTE6(v5->_dataListTextSuggestionsInputView.m_ptr) = 0;
  v11 = v5->_page.m_ptr;
  v12 = *((_QWORD *)v11 + 26);
  cf = &v5->_positionInformation.elementContext.var0.var2 + 1;
  p_positionInformation = &v5->_positionInformation;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StartInteractionWithElementContextOrPosition>(v12, (uint64_t)&cf, *(_QWORD *)(*((_QWORD *)v11 + 4) + 1896), 0);
  if (!v10 || !v5->_positionInformation.isAnimatedImage)
    goto LABEL_64;
  v13 = -[_WKActivatedElementInfo _initWithType:URL:imageURL:information:]([_WKActivatedElementInfo alloc], "_initWithType:URL:imageURL:information:", 1, v9, 0, &v5->_positionInformation);
  v15 = objc_opt_respondsToSelector();
  if ((v15 & 1) == 0
    || ((v16 = v5->_actionSheetAssistant.m_ptr) == 0
      ? (v17 = 0)
      : (objc_msgSend(v16, "defaultActionsForImageSheet:", v13), v17 = cf),
        v35 = -[WKContentView webView](v5, "webView"),
        cf = (CFTypeRef)*((_QWORD *)v5->_positionInformation.image.m_ptr + 1),
        WebCore::IntSize::operator CGSize(),
        v3 = (CFTypeRef)objc_msgSend(v7, "_webView:previewViewControllerForAnimatedImageAtURL:defaultActions:elementInfo:imageSize:", v35, v9, v17, v13), !v17))
  {
    if (!v13)
      goto LABEL_63;
    goto LABEL_62;
  }
  CFRelease(v17);
  if (v13)
LABEL_62:
    CFRelease(v13);
LABEL_63:
  if ((v15 & 1) != 0)
    goto LABEL_94;
LABEL_64:
  v56 = -[_WKActivatedElementInfo _initWithType:URL:imageURL:information:]([_WKActivatedElementInfo alloc], "_initWithType:URL:imageURL:information:", 0, v9, 0, &v5->_positionInformation);
  v36 = v5->_actionSheetAssistant.m_ptr;
  if (v36)
    objc_msgSend(v36, "defaultActionsForLinkSheet:", v56);
  else
    cf = 0;
  if ((objc_opt_respondsToSelector() & 1) == 0)
    goto LABEL_84;
  v52 = v5;
  v55 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v51 = v7;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v53 = v9;
  obj = (id)cf;
  v37 = objc_msgSend((id)cf, "countByEnumeratingWithState:objects:count:", &v63, v71, 16);
  if (v37)
  {
    v38 = *(_QWORD *)v64;
    v39 = MEMORY[0x1E0C809B0];
    do
    {
      for (i = 0; i != v37; ++i)
      {
        if (*(_QWORD *)v64 != v38)
          objc_enumerationMutation(obj);
        v41 = *(_WKElementAction **)(*((_QWORD *)&v63 + 1) + 8 * i);
        v42 = previewIdentifierForElementAction(v41);
        v43 = -[_WKElementAction title](v41, "title");
        v61[0] = v39;
        v61[1] = 3321888768;
        v61[2] = __88__WKContentView_WKInteractionPreview___presentedViewControllerForPreviewItemController___block_invoke;
        v61[3] = &unk_1E3506FA8;
        v61[4] = v41;
        v62 = v56;
        if (v56)
          CFRetain(v56);
        objc_msgSend(v55, "addObject:", +[WKPreviewAction actionWithIdentifier:title:style:handler:](WKPreviewAction, "actionWithIdentifier:title:style:handler:", v42, v43, 0, v61));
        v44 = v62;
        v62 = 0;
        if (v44)
          CFRelease(v44);
      }
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, v71, 16);
    }
    while (v37);
  }
  v9 = v53;
  v45 = -[WKPreviewElementInfo _initWithLinkURL:]([WKPreviewElementInfo alloc], "_initWithLinkURL:", v53);
  v5 = v52;
  v7 = v51;
  v3 = (CFTypeRef)objc_msgSend(v51, "webView:previewingViewControllerForElement:defaultActions:", -[WKContentView webView](v52, "webView"), v45, v55);
  if (v45)
    CFRelease(v45);
  if (v55)
    CFRelease(v55);
  if (!v3)
  {
LABEL_84:
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v46 = -[WKContentView webView](v5, "webView");
      v47 = objc_msgSend(v7, "_webView:previewViewControllerForURL:defaultActions:elementInfo:", v46, v9, cf, v56);
LABEL_88:
      v3 = (CFTypeRef)v47;
      goto LABEL_90;
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v47 = objc_msgSend(v7, "_webView:previewViewControllerForURL:", -[WKContentView webView](v5, "webView"), v9);
      goto LABEL_88;
    }
    v3 = 0;
  }
LABEL_90:
  v48 = cf;
  cf = 0;
  if (v48)
    CFRelease(v48);
  v34 = v56;
  if (v56)
LABEL_93:
    CFRelease(v34);
LABEL_94:
  v49 = v67;
  v67 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v14);
    else
      *(_DWORD *)v49 -= 2;
  }
  return (id)v3;
}

uint64_t __88__WKContentView_WKInteractionPreview___presentedViewControllerForPreviewItemController___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "runActionWithElementInfo:", *(_QWORD *)(a1 + 40));
}

- (void)_previewItemController:(id)a3 commitPreview:(id)a4
{
  void *v6;
  StringImpl *m_ptr;

  v6 = (void *)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "UIDelegate");
  if (objc_msgSend(self->_previewItemController.m_ptr, "type") == 3)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      m_ptr = self->_positionInformation.imageURL.m_string.m_impl.m_ptr;
      if (m_ptr)
      {
        if (*((_DWORD *)m_ptr + 1)
          && ((*((_BYTE *)&self->_positionInformation.imageURL + 8) & 2) != 0 || WTF::URL::protocolIs()))
        {
          objc_msgSend(v6, "_webView:commitPreviewedImageWithURL:", -[WKContentView webView](self, "webView"), WTF::URL::operator NSURL *());
        }
      }
    }
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v6, "webView:commitPreviewingViewController:", -[WKContentView webView](self, "webView"), a4);
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v6, "_webView:commitPreviewedViewController:", -[WKContentView webView](self, "webView"), a4);
  }
}

- (void)_interactionStartedFromPreviewItemController:(id)a3
{
  -[WKContentView _removeDefaultGestureRecognizers](self, "_removeDefaultGestureRecognizers", a3);
  -[WKContentView _cancelInteraction](self, "_cancelInteraction");
}

- (void)_interactionStoppedFromPreviewItemController:(id)a3
{
  WebPageProxy *m_ptr;
  uint64_t v5;
  char v6;

  -[WKContentView _addDefaultGestureRecognizers](self, "_addDefaultGestureRecognizers", a3);
  if ((objc_msgSend(self->_actionSheetAssistant.m_ptr, "isShowingSheet") & 1) == 0)
  {
    m_ptr = self->_page.m_ptr;
    v5 = *((_QWORD *)m_ptr + 26);
    v6 = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::StopInteraction>(v5, (uint64_t)&v6, *(_QWORD *)(*((_QWORD *)m_ptr + 4) + 1896), 0);
  }
}

- (void)_previewItemController:(id)a3 didDismissPreview:(id)a4 committing:(BOOL)a5
{
  _BOOL8 v5;
  WeakObjCPtr<WKWebView> *p_webView;
  void *v9;

  v5 = a5;
  p_webView = &self->_webView;
  v9 = (void *)objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "UIDelegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v9, "_webView:didDismissPreviewViewController:committing:", -[WKContentView webView](self, "webView"), a4, v5);
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v9, "_webView:didDismissPreviewViewController:", -[WKContentView webView](self, "webView"), a4);
  }
  objc_msgSend(objc_loadWeak(&p_webView->m_weakReference), "_didDismissContextMenu");
}

- (id)_presentationSnapshotForPreviewItemController:(id)a3
{
  Image *m_ptr;
  uint64_t v4;
  id v5;
  const void *v6;
  void *v7;
  WebCore::NativeImage *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  WebCore::NativeImage *v18;

  m_ptr = self->_positionInformation.linkIndicator.contentImage.m_ptr;
  if (m_ptr)
  {
    v4 = WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)self);
    (*(void (**)(WebCore::NativeImage **__return_ptr, Image *, uint64_t))(*(_QWORD *)m_ptr + 288))(&v18, m_ptr, v4);
    if (!v18)
      return 0;
    v5 = objc_alloc(MEMORY[0x1E0CEA638]);
    v6 = (const void *)objc_msgSend(v5, "initWithCGImage:", *(_QWORD *)WebCore::NativeImage::platformImage(v18));
    m_ptr = (id)CFMakeCollectable(v6);
    v8 = v18;
    v18 = 0;
    if (v8)
    {
      v9 = *((_QWORD *)v8 + 1);
      if (__ldaxr((unsigned __int8 *)v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v9))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v9);
LABEL_9:
      v11 = *(_QWORD *)(v9 + 8);
      v12 = v11 - 1;
      *(_QWORD *)(v9 + 8) = v11 - 1;
      if (v11 == 1)
      {
        v17 = *(_QWORD *)(v9 + 16);
        v13 = *(_QWORD *)(v9 + 24);
        *(_QWORD *)(v9 + 24) = 0;
        v14 = v17 != 0;
      }
      else
      {
        v13 = 0;
        v14 = 1;
      }
      v15 = __ldxr((unsigned __int8 *)v9);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v9))
        {
          if (v12)
            return m_ptr;
          goto LABEL_17;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (v12)
        return m_ptr;
LABEL_17:
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if (!v14)
        WTF::fastFree((WTF *)v9, v7);
    }
  }
  return m_ptr;
}

- (id)_presentationRectsForPreviewItemController:(id)a3
{
  InteractionInformationAtPosition *p_positionInformation;
  float m_x;
  float m_y;
  void *v6;
  uint64_t m_size;
  FloatRect *m_buffer;
  double v9;
  double v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WebPageProxy *m_ptr;
  uint64_t v16;
  float v17;
  void *v18;
  _QWORD v19[2];
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  v19[1] = *MEMORY[0x1E0C80C00];
  p_positionInformation = &self->_positionInformation;
  if (self->_positionInformation.linkIndicator.contentImage.m_ptr)
  {
    m_x = self->_positionInformation.linkIndicator.textBoundingRectInRootViewCoordinates.m_location.m_x;
    m_y = self->_positionInformation.linkIndicator.textBoundingRectInRootViewCoordinates.m_location.m_y;
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", self->_positionInformation.linkIndicator.textRectsInBoundingRectCoordinates.m_size);
    m_size = p_positionInformation->linkIndicator.textRectsInBoundingRectCoordinates.m_size;
    if ((_DWORD)m_size)
    {
      m_buffer = p_positionInformation->linkIndicator.textRectsInBoundingRectCoordinates.m_buffer;
      v9 = m_x;
      v10 = m_y;
      v11 = 16 * m_size;
      do
      {
        WebCore::FloatRect::operator CGRect();
        v12 = (void *)MEMORY[0x1E0CB3B18];
        v21 = CGRectOffset(v20, v9, v10);
        v13 = objc_msgSend(v12, "valueWithCGRect:", v21.origin.x, v21.origin.y, v21.size.width, v21.size.height);
        if (v13)
          objc_msgSend(v6, "addObject:", v13);
        ++m_buffer;
        v11 -= 16;
      }
      while (v11);
    }
    return (id)(id)CFMakeCollectable(v6);
  }
  else
  {
    m_ptr = self->_page.m_ptr;
    v16 = 692;
    if (!*((_BYTE *)m_ptr + 696))
      v16 = 688;
    v17 = *(float *)((char *)m_ptr + v16);
    v18 = (void *)MEMORY[0x1E0CB3B18];
    WebCore::IntRect::operator CGRect();
    v23 = CGRectInset(v22, (float)(v17 * -4.0), (float)(v17 * -4.0));
    v19[0] = objc_msgSend(v18, "valueWithCGRect:", v23.origin.x, v23.origin.y, v23.size.width, v23.size.height);
    return (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 1);
  }
}

- (void)_previewItemControllerDidCancelPreview:(id)a3
{
  BYTE6(self->_dataListTextSuggestionsInputView.m_ptr) = 0;
  objc_msgSend(objc_loadWeak(&self->_webView.m_weakReference), "_didDismissContextMenu");
}

@end
