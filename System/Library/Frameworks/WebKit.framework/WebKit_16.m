uint64_t WTF::Vector<WebCore::ElementContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  WTF *v4;
  int v5;
  uint64_t v6;
  WTF *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v2 = result;
    v3 = *(unsigned int *)(result + 12);
    if (v3 > a2)
    {
      *(_DWORD *)(result + 12) = a2;
      LODWORD(v3) = a2;
    }
    v4 = *(WTF **)result;
    if (a2)
    {
      if (a2 >= 0x3333334)
      {
        __break(0xC471u);
        return result;
      }
      v5 = 80 * a2;
      result = WTF::fastMalloc((WTF *)(80 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v3 && (WTF *)result != v4)
      {
        v6 = 80 * v3;
        v7 = v4;
        do
        {
          *(_OWORD *)result = *(_OWORD *)v7;
          v8 = *((_OWORD *)v7 + 1);
          v9 = *((_OWORD *)v7 + 2);
          v10 = *((_OWORD *)v7 + 4);
          *(_OWORD *)(result + 48) = *((_OWORD *)v7 + 3);
          *(_OWORD *)(result + 64) = v10;
          *(_OWORD *)(result + 16) = v8;
          *(_OWORD *)(result + 32) = v9;
          result += 80;
          v7 = (WTF *)((char *)v7 + 80);
          v6 -= 80;
        }
        while (v6);
      }
    }
    if (v4)
    {
      if (*(WTF **)v2 == v4)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::FocusTextInputContextAndPlaceCaret,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 2210;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebCore::ElementContext,void>::encode((IPC::Encoder *)v12, *(_QWORD *)a2);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v12, *(_DWORD **)(a2 + 8));
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34CE998;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void sub_1972AB738(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FocusTextInputContextAndPlaceCaret,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CE998;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FocusTextInputContextAndPlaceCaret,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE998;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FocusTextInputContextAndPlaceCaret,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v3;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPage::FocusTextInputContextAndPlaceCaret,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::FocusTextInputContextAndPlaceCaret,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v3 < 0x100u)
    return IPC::Connection::cancelReply<Messages::WebPage::FocusTextInputContextAndPlaceCaret,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v5 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, v3 != 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1972AB89C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPage::FocusTextInputContextAndPlaceCaret,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972AB8F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetShouldRevealCurrentSelectionAfterInsertion>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2426;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972ABA04(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetScreenIsBeingCaptured>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2422;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972ABB34(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::willOpenAppLink(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CE9C0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageProxy::willOpenAppLink(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CE9C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WebKit::ProcessThrottlerActivity *WTF::Detail::CallableWrapper<WebKit::WebPageProxy::willOpenAppLink(void)::$_0,void>::call(WebKit::ProcessThrottlerActivity *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v2 + 544), 0);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetInsertionPointColor>(uint64_t a1, WebCore::Color **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2396;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::Color,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void sub_1972ABD28(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, IPC::Encoder *a12)
{
  WTF *v13;
  void *v14;

  if (a11 && a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v13, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebProcessProxy::platformInitialize(void)::$_0,BOOL,BOOL>::call(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  {
    WebKit::WebProcessProxy::globalPageMap(void)::pageMap = 0;
  }
  v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&WebKit::WebProcessProxy::globalPageMap(void)::pageMap);
  v4 = v3;
  v6 = v5;
  if (WebKit::WebProcessProxy::globalPageMap(void)::pageMap)
    v7 = WebKit::WebProcessProxy::globalPageMap(void)::pageMap
       + 16 * *(unsigned int *)(WebKit::WebProcessProxy::globalPageMap(void)::pageMap - 4);
  else
    v7 = 0;
  if ((_QWORD *)v7 == v3)
    return 0;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(v4[1] + 8);
    if (!v8)
    {
      if (v9)
      {
        v8 = v9 - 16;
        CFRetain(*(CFTypeRef *)(v9 - 8));
      }
      else
      {
        v8 = 0;
      }
      goto LABEL_16;
    }
    v10 = v9 - 16;
    if (v9)
      v11 = v9 - 16;
    else
      v11 = 0;
    if ((*(_WORD *)(*(_QWORD *)(v11 + 32) + 48) & 4) != 0)
    {
      if (v9)
        CFRetain(*(CFTypeRef *)(v9 - 8));
      CFRelease(*(CFTypeRef *)(v8 + 8));
      v8 = v10;
      goto LABEL_28;
    }
LABEL_16:
    while (1)
    {
      v4 += 2;
      if (v4 == v6)
        break;
      if ((unint64_t)(*v4 + 1) > 1)
        goto LABEL_20;
    }
    v4 = v6;
LABEL_20:
    ;
  }
  while (v4 != (_QWORD *)v7);
  if (!v8)
    return 0;
LABEL_28:
  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 104) + 480))(*(_QWORD *)(v8 + 104), a2);
  CFRelease(*(CFTypeRef *)(v8 + 8));
  return v12;
}

void sub_1972ABEB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v6 = a1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEEE3__0JZNSA_16convertToBackingESL_E3__1EEEEEJRKNS0_6__implIJSF_SI_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v7);
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v6 = a1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEEE3__0JZNSA_16convertToBackingESL_E3__1EEEEEJRKNS0_6__implIJSF_SI_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v7);
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v6 = a1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit6WebGPU23ConvertToBackingContext16convertToBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEEE3__0JZNSA_16convertToBackingESL_E3__1EEEEEJRKNS0_6__implIJSF_SI_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v7);
  }
}

uint64_t WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v5 = a1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebGPU::ConvertToBackingContext::convertToBacking(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit6WebGPU25ConvertFromBackingContext18convertFromBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_12Extent3DDictEEEEE3__0JZNSA_18convertFromBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v6);
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v5 = a1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebGPU::ConvertToBackingContext::convertToBacking(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit6WebGPU25ConvertFromBackingContext18convertFromBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_12Origin2DDictEEEEE3__0JZNSA_18convertFromBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v6);
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v5 = a1;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebKit::WebGPU::ConvertToBackingContext::convertToBacking(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN6WebKit6WebGPU25ConvertFromBackingContext18convertFromBackingERKNS_7variantIJNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_12Origin3DDictEEEEE3__0JZNSA_18convertFromBackingESJ_E3__1EEEEEJRKNS0_6__implIJSF_SG_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v6);
  }
}

WTF::StringImpl *WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  char v4;
  char v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  char v9;
  _BYTE v10[7];
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  int v15;
  char v16;
  _BYTE v17[7];
  char v18;

  v3 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1)
    *(_DWORD *)v3 += 2;
  if (*(_DWORD *)(a1 + 32))
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v5 = *(_BYTE *)(a1 + 16);
    *(_DWORD *)v17 = *(_DWORD *)(a1 + 17);
    *(_DWORD *)&v17[3] = *(_DWORD *)(a1 + 20);
    v4 = *(_BYTE *)(a1 + 24);
  }
  v8 = v3;
  v9 = v5;
  *(_DWORD *)v10 = *(_DWORD *)v17;
  *(_DWORD *)&v10[3] = *(_DWORD *)&v17[3];
  v11 = v4;
  v12 = *(_BYTE *)(a1 + 40);
  v13 = 0;
  v16 = 0;
  std::__optional_destruct_base<WebKit::WebGPU::ExternalTextureDescriptor,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::ExternalTextureDescriptor>(a2, (uint64_t *)&v8);
  if (v16)
  {
    if (v15 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3IPC29ObjectIdentifierReadReferenceIN3WTF23ObjectIdentifierGenericIN6WebKit30RemoteVideoFrameIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEENS8_13MachSendRightEN7WebCore7IntSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix_2[v15])(&v18, &v14);
    v15 = -1;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X1>, const void **a2@<X2>, uint64_t a3@<X8>)
{
  _DWORD *v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  char v9;
  WTF::StringImpl *v10;
  _QWORD v11[2];
  int v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v5 += 2;
  v6 = *a2;
  v11[0] = v6;
  if (v6)
    CFRetain(v6);
  v12 = 2;
  v13 = *(_BYTE *)(a1 + 24);
  v10 = 0;
  *(_QWORD *)a3 = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 32) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,WTF::RetainPtr<__CVBuffer *>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,WTF::RetainPtr<__CVBuffer *>>,(std::__variant_detail::_Trait)1>>(a3 + 16, (uint64_t)v11);
  *(_BYTE *)(a3 + 40) = v13;
  *(_BYTE *)(a3 + 48) = 1;
  if (v12 != -1)
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS7_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS7_6RefPtrINS9_10VideoFrameENS7_12RawPtrTraitsISG_EENS7_21DefaultRefDerefTraitsISG_EEEENS7_9RetainPtrIP10__CVBufferEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSS_EEEDcOST_DpOT0____fmatrix[v12])(&v9, v11);
  v12 = -1;
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *result;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  char v12;
  __int16 v13;
  char v14;
  int v15;
  char v16;

  v4 = *a2;
  v15 = *((_DWORD *)a2 + 2);
  v16 = *((_BYTE *)a2 + 12);
  v5 = *((unsigned __int8 *)a2 + 20);
  v6 = *((unsigned int *)a2 + 4);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2[3]);
  if (result)
  {
    v8 = result;
    v9 = (v6 | (v5 << 32)) << 24;
    result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(result + 4, (uint64_t)result);
    v10 = (unsigned int *)*((_QWORD *)v8 + 2);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    *(_QWORD *)a3 = v4;
    *(_DWORD *)(a3 + 8) = v15;
    *(_BYTE *)(a3 + 12) = v16;
    *(_QWORD *)(a3 + 13) = v9;
    *(_WORD *)(a3 + 21) = v13;
    *(_BYTE *)(a3 + 23) = v14;
    v12 = 1;
    *(_QWORD *)(a3 + 24) = v10;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 32) = v12;
  return result;
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  _BYTE v6[16];
  int v7;
  char v8;
  char v9;
  _BYTE v10[16];
  int v11;
  char v12;
  char v13;

  v10[0] = 0;
  v12 = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, a2);
    result = std::__optional_storage_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,false>>((uint64_t)v10, (uint64_t)v6);
    if (v8 && v7 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v7])(&v13, v6);
    if (!v12)
    {
      *a3 = 0;
      a3[40] = 0;
      return result;
    }
    v6[0] = 0;
    v8 = 0;
    v7 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v6, (uint64_t)v10);
    v8 = 1;
  }
  else
  {
    v6[0] = 0;
    v8 = 0;
  }
  v9 = *(_BYTE *)(a2 + 32);
  result = std::__optional_destruct_base<WebKit::WebGPU::ImageCopyExternalImage,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::ImageCopyExternalImage>((uint64_t)a3, (uint64_t)v6);
  if (v8 && v7 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v7])(&v13, v6);
  if (v12)
  {
    if (v11 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v11])(v6, v10);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  int v7;
  _BYTE v8[16];
  int v9;
  char v10;
  char v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[16];
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;

  result = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, a2, (uint64_t)&v13);
  if (v19)
  {
    v6 = v13;
    v7 = v14;
    v8[0] = 0;
    v10 = 0;
    if (v17)
    {
      v9 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v8, (uint64_t)v15);
      v10 = 1;
    }
    v11 = v18;
    v12 = *(_WORD *)(a2 + 49);
    result = std::__optional_destruct_base<WebKit::WebGPU::ImageCopyTextureTagged,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::ImageCopyTextureTagged>((uint64_t)a3, &v6);
    if (v10 && v9 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v9])(&v20, v8);
    if (v19 && v17 && v16 != -1)
      return ((uint64_t (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v16])(&v6, v15);
  }
  else
  {
    *a3 = 0;
    a3[56] = 0;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  __int128 v14;
  unint64_t v15;
  char v16;
  int v17;
  char v18;
  int v19;
  char v20;
  __int16 v21;
  _BYTE v22[32];
  int v23;
  char v24;
  uint64_t v25;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 208))(a1, *(_QWORD *)(*(_QWORD *)a2 + 8));
  if (!result)
    goto LABEL_20;
  v7 = result;
  v8 = *(_QWORD *)(a2 + 16);
  if (v8 && *(_QWORD *)(v8 + 8))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
    v10 = v9 & 0xFFFFFFFFFFFFFF00;
    v11 = v9;
    v12 = 1;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v10 = 0;
  }
  v22[0] = 0;
  v24 = 0;
  v13 = *(unsigned __int8 *)(a2 + 64);
  if (!*(_BYTE *)(a2 + 64))
    goto LABEL_12;
  result = WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, a2 + 24);
  if (v24 != v18)
  {
    v22[0] = 0;
    v23 = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v22, (uint64_t)&v14);
    v24 = 1;
    if (v18)
    {
      if (v17 != -1)
        result = ((uint64_t (*)(uint64_t *, __int128 *))off_1E34CF180[v17])(&v25, &v14);
    }
  }
  if (v24)
  {
LABEL_12:
    *(_QWORD *)&v14 = v7;
    DWORD2(v14) = *(_DWORD *)(a2 + 8);
    BYTE12(v14) = *(_BYTE *)(a2 + 12);
    v15 = v10 | v11;
    v16 = v12;
    LOBYTE(v17) = 0;
    v20 = 0;
    if (v13)
    {
      v19 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v17, (uint64_t)v22);
      v20 = 1;
    }
    v21 = *(_WORD *)(a2 + 72);
    result = std::__optional_destruct_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::RenderPassColorAttachment>((uint64_t)a3, &v14);
    if (v20 && v19 != -1)
      result = ((uint64_t (*)(uint64_t *, int *))off_1E34CF180[v19])(&v25, &v17);
    if (v24)
    {
      if (v23 != -1)
        return ((uint64_t (*)(__int128 *, _BYTE *))off_1E34CF180[v23])(&v14, v22);
    }
  }
  else
  {
LABEL_20:
    *a3 = 0;
    a3[88] = 0;
  }
  return result;
}

uint64_t WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  _BYTE v6[16];
  int v7;
  char v8;
  char v9;
  _BYTE v10[16];
  int v11;
  char v12;
  char v13;

  v10[0] = 0;
  v12 = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2);
    result = std::__optional_storage_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,false>>((uint64_t)v10, (uint64_t)v6);
    if (v8 && v7 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v7])(&v13, v6);
    if (!v12)
    {
      *a3 = 0;
      a3[40] = 0;
      return result;
    }
    v6[0] = 0;
    v8 = 0;
    v7 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v6, (uint64_t)v10);
    v8 = 1;
  }
  else
  {
    v6[0] = 0;
    v8 = 0;
  }
  v9 = *(_BYTE *)(a2 + 32);
  result = std::__optional_destruct_base<WebCore::WebGPU::ImageCopyExternalImage,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::ImageCopyExternalImage>((uint64_t)a3, (uint64_t)v6);
  if (v8 && v7 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v7])(&v13, v6);
  if (v12)
  {
    if (v11 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v11])(v6, v10);
  }
  return result;
}

{
  void *v5;
  WTF *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v11;
  int v12;
  _BYTE v13[16];
  int v14;
  char v15;
  char v16;
  __int16 v17;
  WTF *v18;
  int v19;
  _BYTE v20[55];
  char v21;

  WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2, (uint64_t)&v18);
  if (v20[40])
  {
    v6 = v18;
    v18 = 0;
    v11 = v6;
    v12 = v19;
    v13[0] = 0;
    v15 = 0;
    if (v20[24])
    {
      v14 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v13, (uint64_t)v20);
      v15 = 1;
    }
    v16 = v20[32];
    v17 = *(_WORD *)(a2 + 49);
    std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTextureTagged,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::ImageCopyTextureTagged>((uint64_t)a3, (uint64_t *)&v11);
    if (v15)
    {
      if (v14 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_1[v14])(&v21, v13);
      v14 = -1;
    }
    v7 = (unsigned int *)v11;
    v11 = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v5);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[56] = 0;
  }
  return std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTexture,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, v5);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,WTF::RetainPtr<__CVBuffer *>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,WTF::RetainPtr<__CVBuffer *>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS7_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS7_6RefPtrINS9_10VideoFrameENS7_12RawPtrTraitsISG_EENS7_21DefaultRefDerefTraitsISG_EEEENS7_9RetainPtrIP10__CVBufferEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSS_EEEDcOST_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS7_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS7_6RefPtrINS9_10VideoFrameENS7_12RawPtrTraitsISG_EENS7_21DefaultRefDerefTraitsISG_EEEENS7_9RetainPtrIP10__CVBufferEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JSW_SV_EEEDcmSY_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_6RefPtrINSB_10VideoFrameENS9_12RawPtrTraitsISI_EENS9_21DefaultRefDerefTraitsISI_EEEENS9_9RetainPtrIP10__CVBufferEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJSG_SN_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_6RefPtrINSB_10VideoFrameENS9_12RawPtrTraitsISI_EENS9_21DefaultRefDerefTraitsISI_EEEENS9_9RetainPtrIP10__CVBufferEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJSG_SN_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN3WTF23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS9_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEENS9_6RefPtrINSB_10VideoFrameENS9_12RawPtrTraitsISI_EENS9_21DefaultRefDerefTraitsISI_EEEENS9_9RetainPtrIP10__CVBufferEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISS_LNS0_6_TraitE1EEEEEvRST_OT_EUlRSZ_OT0_E_JRNS0_6__baseILSW_1EJSG_SN_SR_EEEOS17_EEEDcSZ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__optional_storage_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = result;
  if (*(unsigned __int8 *)(result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(result + 24))
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(result, a2);
  }
  else if (*(_BYTE *)(result + 24))
  {
    v3 = *(unsigned int *)(result + 16);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v3])(&v4, result);
    *(_DWORD *)(v2 + 16) = -1;
    *(_BYTE *)(v2 + 24) = 0;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 16) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(result, a2);
    *(_BYTE *)(v2 + 24) = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 16);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 16) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRSF_SJ_EEEDcmSL_DpOT0____fdiagonal[v4])(&v5, result, a2);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(WTF *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
      return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2, a3);
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v5])(&v7, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)v4 = v6;
  LODWORD(v6) = a3[2];
  a3[2] = 0;
  *(_DWORD *)(v4 + 8) = v6;
  LODWORD(v6) = a3[3];
  a3[3] = 0;
  *(_QWORD *)(v4 + 12) = v6;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::ImageCopyExternalImage,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::ImageCopyExternalImage>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_DWORD *)(a1 + 16) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(a1, a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

uint64_t std::__optional_storage_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = result;
  if (*(unsigned __int8 *)(result + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(result + 24))
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(result, a2);
  }
  else if (*(_BYTE *)(result + 24))
  {
    v3 = *(unsigned int *)(result + 16);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v3])(&v4, result);
    *(_DWORD *)(v2 + 16) = -1;
    *(_BYTE *)(v2 + 24) = 0;
  }
  else
  {
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 16) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(result, a2);
    *(_BYTE *)(v2 + 24) = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 16);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 16) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRSF_SJ_EEEDcmSL_DpOT0____fdiagonal[v4])(&v5, result, a2);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(WTF *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
      return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2, a3);
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v5])(&v7, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)v4 = v6;
  LODWORD(v6) = a3[2];
  a3[2] = 0;
  *(_DWORD *)(v4 + 8) = v6;
  LODWORD(v6) = a3[3];
  a3[3] = 0;
  *(_QWORD *)(v4 + 12) = v6;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JSK_SJ_EEEDcmSM_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin2DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ImageCopyExternalImage,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::ImageCopyExternalImage>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_DWORD *)(a1 + 16) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(a1, a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(WTF *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
      return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2, a3);
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v5])(&v7, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)v4 = v6;
  LODWORD(v6) = a3[2];
  a3[2] = 0;
  *(_DWORD *)(v4 + 8) = v6;
  LODWORD(v6) = a3[3];
  a3[3] = 0;
  *(_QWORD *)(v4 + 12) = v6;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = v6;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN6WebKit6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_0[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v7 = *a3;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(WTF *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
      return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2, a3);
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_1[v5])(&v7, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)v4 = v6;
  LODWORD(v6) = a3[2];
  a3[2] = 0;
  *(_DWORD *)(v4 + 8) = v6;
  LODWORD(v6) = a3[3];
  a3[3] = 0;
  *(_QWORD *)(v4 + 12) = v6;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = v6;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_1[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v7 = *a3;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix_1[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JSK_SJ_EEEDcmSM_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Origin3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::ImageCopyTextureTagged,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::ImageCopyTextureTagged>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = 0;
  v5 = a1 + 16;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    *(_DWORD *)(a1 + 32) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)(a2 + 2));
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)((char *)a2 + 49);
  *(_BYTE *)(a1 + 56) = 1;
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::ImageCopyTextureTagged,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::ImageCopyTextureTagged>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_BYTE *)(a1 + 16) = 0;
  v5 = a1 + 16;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    *(_DWORD *)(a1 + 32) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)(a2 + 2));
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)((char *)a2 + 49);
  *(_BYTE *)(a1 + 56) = 1;
  return a1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  _BYTE v4[16];
  int v5;
  char v6;

  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4, a1);
  v5 = 0;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
  *(_BYTE *)(a2 + 24) = 1;
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34CEB00[v5])(&v6, v4);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_0,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict> const&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  char v8;

  v3 = *((_DWORD *)a1 + 2);
  v5 = *a1;
  v6 = v3;
  v7 = 1;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)&v5);
  *(_BYTE *)(a2 + 24) = 1;
  if (v7 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E34CEB00[v7])(&v8, &v5);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict> const&)::$_0,WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  _BYTE v4[16];
  int v5;
  char v6;

  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4, a1);
  v5 = 0;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
  *(_BYTE *)(a2 + 24) = 1;
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34CEB20[v5])(&v6, v4);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict> const&)::$_0,WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict> const&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  char v8;

  v3 = *((_DWORD *)a1 + 2);
  v5 = *a1;
  v6 = v3;
  v7 = 1;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)&v5);
  *(_BYTE *)(a2 + 24) = 1;
  if (v7 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E34CEB20[v7])(&v8, &v5);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34CEB20[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34CEB30[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU12Extent3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
}

void sub_1972AE414(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972AE7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  CFRelease(v14);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c72_ZTSKZ59__WKDatePickerPopoverController_dismissDatePickerAnimated__E3__0(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c72_ZTSKZ59__WKDatePickerPopoverController_dismissDatePickerAnimated__E3__0(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1972AEAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  const void *v9;

  if (v9)
    CFRelease(v9);
  _Unwind_Resume(exception_object);
}

void sub_1972AF2C4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1972AF5C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1972AF628(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = 0;
  _Unwind_Resume(a1);
}

void sub_1972AF6A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = 0;
  _Unwind_Resume(a1);
}

void sub_1972AF7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  if (cf)
    CFRelease(cf);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c51_ZTSKZ38__WKDateTimePicker_showDateTimePicker_E3__2(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c51_ZTSKZ38__WKDateTimePicker_showDateTimePicker_E3__2(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1972AF9EC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972AFA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1972AFB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1972AFDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1972AFEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1972B046C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  const void *v10;

  _Block_release(v10);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_1972B0738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location)
{
  const void *v11;
  const void *v12;

  _Block_release(v11);
  objc_destroyWeak((id *)&a9);
  if (v12)
    CFRelease(v12);
  _Unwind_Resume(a1);
}

void sub_1972B07E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1972B0CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf)
{
  const void *v19;

  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  _Unwind_Resume(exception_object);
}

void sub_1972B0FD0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, WTF::StringImpl *a19)
{
  uint64_t v19;

  if (v19)
    CFRelease(*(CFTypeRef *)(v19 + 8));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a17, a2);
  _Unwind_Resume(a1);
}

void sub_1972B1648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  if (a14)
    CFRelease(*(CFTypeRef *)(a14 + 8));
  _Unwind_Resume(a1);
}

uint64_t setContainsUTIThatConformsTo(void *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v9;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(a1);
        if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEC3F8], "typeWithIdentifier:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v7)), "conformsToType:", a2) & 1) != 0)return 1;
        ++v7;
      }
      while (v5 != v7);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v5 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

void sub_1972B1874(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1972B1DE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1972B1E90(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1972B1F90(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1972B20A0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1972B2300(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c88_ZTSKZ75__WKFileUploadPanel_contextMenuInteraction_configurationForMenuAtLocation__E3__6(uint64_t a1, uint64_t a2)
{
  void *v2;
  id *v3;

  v2 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v3 = (id *)(a1 + 40);
  *(v3 - 1) = v2;
  objc_copyWeak(v3, (id *)(a2 + 40));
}

void __destroy_helper_block_e8_32c88_ZTSKZ75__WKFileUploadPanel_contextMenuInteraction_configurationForMenuAtLocation__E3__6(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_1972B24B8(_Unwind_Exception *a1, void *a2)
{
  const void *v2;
  WTF *v3;

  WTF::fastFree(v3, a2);
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(a1);
}

void sub_1972B2630(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_BYTE *)(v1 + v2) = v3;
  _Unwind_Resume(a1);
}

void sub_1972B2BF8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972B2D5C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972B2EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1972B2F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1972B3118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1972B31D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1972B32FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t firstUTIThatConformsTo(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)v11;
LABEL_3:
  v7 = 0;
  while (1)
  {
    if (*(_QWORD *)v11 != v6)
      objc_enumerationMutation(a1);
    v8 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v7);
    if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEC3F8], "typeWithIdentifier:", v8), "conformsToType:", a2) & 1) != 0)
      return v8;
    if (v5 == ++v7)
    {
      v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        goto LABEL_3;
      return 0;
    }
  }
}

void sub_1972B3870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a9)
    CFRelease(a9);
  _Unwind_Resume(exception_object);
}

void sub_1972B39DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  if (a9)
    CFRelease(a9);
  _Unwind_Resume(exception_object);
}

void sub_1972B3C1C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972B3EA4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972B3F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1972B41A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,CFTypeRef a24,CFTypeRef a25)
{
  const void *v25;
  _QWORD *v26;
  const void *v27;
  CFTypeRef v29;
  CFTypeRef v30;

  *v26 = 0;
  if (v27)
    CFRelease(v27);
  if (cf)
    CFRelease(cf);
  _Block_object_dispose(&a18, 8);
  v29 = a25;
  a25 = 0;
  if (v29)
    CFRelease(v29);
  v30 = a24;
  a24 = 0;
  if (v30)
    CFRelease(v30);
  if (v25)
    CFRelease(v25);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(result + 56) = v3;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
    CFRelease(v3);
}

void sub_1972B4380(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<WTF::RetainPtr<NSURL>,WTF::RetainPtr<NSURL>>::operator=[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  const void *v7;

  v4 = *a2;
  *a2 = 0;
  v5 = *(const void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    CFRelease(v5);
  v6 = a2[1];
  a2[1] = 0;
  v7 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
    CFRelease(v7);
  return a1;
}

CFTypeRef __copy_helper_block_e8_56c28_ZTSN3WTF9RetainPtrI5NSURLEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_56c28_ZTSN3WTF9RetainPtrI5NSURLEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    CFRelease(v2);
}

void sub_1972B4958(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972B4D78(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972B5258(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972B5470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__491(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__492(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_1972B559C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972B58A4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972B5C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1972B5D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1972B5F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

Class initPXActivityProgressController(void)
{
  Class result;
  void *v1;

  if ((_MergedGlobals_49 & 1) == 0)
  {
    v1 = dlopen("/System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore", 2);
    if (!v1)
    {
LABEL_7:
      __break(0xC471u);
      JUMPOUT(0x1972B61F0);
    }
    qword_1ECE72C98 = (uint64_t)v1;
    _MergedGlobals_49 = 1;
  }
  result = objc_getClass("PXActivityProgressController");
  qword_1ECE72C90 = (uint64_t)result;
  if (!result)
    goto LABEL_7;
  getPXActivityProgressControllerClass = PXActivityProgressControllerFunction;
  return result;
}

uint64_t PXActivityProgressControllerFunction(void)
{
  return qword_1ECE72C90;
}

void sub_1972B629C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1972B634C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1972B64A8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZZ75__WKFileUploadPanel_contextMenuInteraction_configurationForMenuAtLocation__ENK3__6clEP7NSArrayIP13UIMenuElementE_block_invoke(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1056) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "showFilePickerMenu");
}

uint64_t ___ZZ75__WKFileUploadPanel_contextMenuInteraction_configurationForMenuAtLocation__ENK3__6clEP7NSArrayIP13UIMenuElementE_block_invoke_2(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1056) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "_showPhotoPicker");
}

uint64_t ___ZZ75__WKFileUploadPanel_contextMenuInteraction_configurationForMenuAtLocation__ENK3__6clEP7NSArrayIP13UIMenuElementE_block_invoke_3(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1017) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1056) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "_showCamera");
}

Class initPHPickerConfiguration(void)
{
  Class result;

  if ((byte_1ECE72C89 & 1) == 0)
  {
    *(_QWORD *)algn_1ECE72CA8 = ___ZL15PhotosUILibraryv_block_invoke();
    byte_1ECE72C89 = 1;
  }
  result = objc_getClass("PHPickerConfiguration");
  qword_1ECE72CA0 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1972B6584);
  }
  off_1EE33FF98 = PHPickerConfigurationFunction;
  return result;
}

uint64_t PHPickerConfigurationFunction(void)
{
  return qword_1ECE72CA0;
}

uint64_t ___ZL15PhotosUILibraryv_block_invoke()
{
  uint64_t result;

  result = (uint64_t)dlopen("/System/Library/Frameworks/PhotosUI.framework/PhotosUI", 2);
  if (!result)
  {
    result = 70;
    __break(0xC471u);
  }
  return result;
}

Class initPHPickerFilter(void)
{
  Class result;

  if ((byte_1ECE72C89 & 1) == 0)
  {
    *(_QWORD *)algn_1ECE72CA8 = ___ZL15PhotosUILibraryv_block_invoke();
    byte_1ECE72C89 = 1;
  }
  result = objc_getClass("PHPickerFilter");
  qword_1ECE72CB0 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1972B6654);
  }
  _MergedGlobals_48 = PHPickerFilterFunction;
  return result;
}

uint64_t PHPickerFilterFunction(void)
{
  return qword_1ECE72CB0;
}

Class initPHPickerViewController(void)
{
  Class result;

  if ((byte_1ECE72C89 & 1) == 0)
  {
    *(_QWORD *)algn_1ECE72CA8 = ___ZL15PhotosUILibraryv_block_invoke();
    byte_1ECE72C89 = 1;
  }
  result = objc_getClass("PHPickerViewController");
  qword_1ECE72CB8 = (uint64_t)result;
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1972B66E0);
  }
  off_1EE33FFA0 = PHPickerViewControllerFunction;
  return result;
}

uint64_t PHPickerViewControllerFunction(void)
{
  return qword_1ECE72CB8;
}

void sub_1972B69D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf)
{
  if (a11)
    (*(void (**)(CFTypeRef))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_1972B6C64(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, CFTypeRef cf, WTF::StringImpl *a13)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZ45__WKFileUploadPanel_picker_didFinishPicking__EUb_E3__7vJEED1Ev(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &off_1E34CEE18;
  v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ45__WKFileUploadPanel_picker_didFinishPicking__EUb_E3__7vJEED0Ev(WTF *this, void *a2)
{
  const void *v3;
  const void *v4;

  *(_QWORD *)this = &off_1E34CEE18;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(v4);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ45__WKFileUploadPanel_picker_didFinishPicking__EUb_E3__7vJEE4callEv(_QWORD *a1)
{
  id Weak;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  Weak = objc_loadWeak((id *)(a1[2] + 968));
  v3 = a1[2] + 1088;
  v12[0] = *(_QWORD *)v3;
  v12[1] = *(_QWORD *)(v3 + 8);
  v10 = 0;
  *(_QWORD *)v3 = 0;
  LODWORD(v11) = 0;
  *(_DWORD *)(v3 + 8) = 0;
  HIDWORD(v11) = 0;
  *(_DWORD *)(v3 + 12) = 0;
  objc_msgSend(Weak, "_removeTemporaryDirectoriesWhenDeallocated:", v12, v10, v11);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v4);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v5);
  v6 = objc_msgSend((id)objc_msgSend(*(id *)(a1[1] + 1040), "configuration"), "preferredAssetRepresentationMode");
  v7 = (void *)a1[1];
  v8 = a1[3];
  if (v6 == 2)
    return objc_msgSend(v7, "_chooseMediaItems:", v8);
  else
    return objc_msgSend(v7, "_uploadMediaItemsTranscodingVideo:", v8);
}

void sub_1972B6E30(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v12;

  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v12);
  _Unwind_Resume(a1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZ45__WKFileUploadPanel_picker_didFinishPicking__EUb0_E3__8vJEED1Ev(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E34CEE40;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ45__WKFileUploadPanel_picker_didFinishPicking__EUb0_E3__8vJEED0Ev(WTF *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = &off_1E34CEE40;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ45__WKFileUploadPanel_picker_didFinishPicking__EUb0_E3__8vJEE4callEv(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 8), "_dismissDisplayAnimated:", 1);
  return objc_msgSend(*(id *)(a1 + 8), "_cancel");
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZ73__WKFileUploadPanel_imagePickerController_didFinishPickingMediaWithInfo__EUb1_E3__9vJEED1Ev(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  *a1 = &off_1E34CEE68;
  v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ73__WKFileUploadPanel_imagePickerController_didFinishPickingMediaWithInfo__EUb1_E3__9vJEED0Ev(WTF *this, void *a2)
{
  const void *v3;
  const void *v4;

  *(_QWORD *)this = &off_1E34CEE68;
  v3 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(v4);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ73__WKFileUploadPanel_imagePickerController_didFinishPickingMediaWithInfo__EUb1_E3__9vJEE4callEv(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "_chooseMediaItems:", *(_QWORD *)(a1 + 24));
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZ73__WKFileUploadPanel_imagePickerController_didFinishPickingMediaWithInfo__EUb2_E4__10vJEED1Ev(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E34CEE90;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ73__WKFileUploadPanel_imagePickerController_didFinishPickingMediaWithInfo__EUb2_E4__10vJEED0Ev(WTF *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = &off_1E34CEE90;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ73__WKFileUploadPanel_imagePickerController_didFinishPickingMediaWithInfo__EUb2_E4__10vJEE4callEv(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 8), "_dismissDisplayAnimated:", 1);
  return objc_msgSend(*(id *)(a1 + 8), "_cancel");
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZ81__WKFileUploadPanel_imagePickerController_didFinishPickingMultipleMediaWithInfo__EUb3_E4__11vJEED1Ev(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E34CEEB8;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ81__WKFileUploadPanel_imagePickerController_didFinishPickingMultipleMediaWithInfo__EUb3_E4__11vJEED0Ev(WTF *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = &off_1E34CEEB8;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ81__WKFileUploadPanel_imagePickerController_didFinishPickingMultipleMediaWithInfo__EUb3_E4__11vJEE4callEv(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 8), "_dismissDisplayAnimated:", 1);
  return objc_msgSend(*(id *)(a1 + 8), "_cancel");
}

void sub_1972B7280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  objc_destroyWeak((id *)&a9);
  _Unwind_Resume(a1);
}

void sub_1972B7368(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict> const&)::$_0,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  _BYTE v4[16];
  int v5;
  char v6;

  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4, a1);
  v5 = 0;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
  *(_BYTE *)(a2 + 24) = 1;
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34CEF58[v5])(&v6, v4);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict> const&)::$_0,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict> const&>@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD v4[2];
  int v5;
  char v6;

  v4[0] = *a1;
  v5 = 1;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
  *(_BYTE *)(a2 + 24) = 1;
  if (v5 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34CEF58[v5])(&v6, v4);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&)::$_0,WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  _BYTE v4[16];
  int v5;
  char v6;

  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4, a1);
  v5 = 0;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
  *(_BYTE *)(a2 + 24) = 1;
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34CEF78[v5])(&v6, v4);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&)::$_0,WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict> const&>@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD v4[2];
  int v5;
  char v6;

  v4[0] = *a1;
  v5 = 1;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
  *(_BYTE *)(a2 + 24) = 1;
  if (v5 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34CEF78[v5])(&v6, v4);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict> const&)::$_0,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  _BYTE v4[16];
  int v5;
  char v6;

  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4, a1);
  v5 = 0;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
  *(_BYTE *)(a2 + 24) = 1;
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34CEF98[v5])(&v6, v4);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict> const&)::$_0,WebKit::WebGPU::ConvertToBackingContext::convertToBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict> const&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  char v8;

  v3 = *((_DWORD *)a1 + 2);
  v5 = *a1;
  v6 = v3;
  v7 = 1;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)&v5);
  *(_BYTE *)(a2 + 24) = 1;
  if (v7 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E34CEF98[v7])(&v8, &v5);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&)::$_0,WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  _BYTE v4[16];
  int v5;
  char v6;

  WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v4, a1);
  v5 = 0;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v4);
  *(_BYTE *)(a2 + 24) = 1;
  if (v5 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34CEFB8[v5])(&v6, v4);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&)::$_0,WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict> const&>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  char v8;

  v3 = *((_DWORD *)a1 + 2);
  v5 = *a1;
  v6 = v3;
  v7 = 1;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)&v5);
  *(_BYTE *)(a2 + 24) = 1;
  if (v7 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E34CEFB8[v7])(&v8, &v5);
  return result;
}

double adjustedFontSize(uint64_t a1, uint64_t a2, double a3, double a4)
{
  unint64_t v5;
  uint64_t v9;
  unint64_t v10;
  double v11;
  uint64_t v12;
  double v15;

  v5 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v5)
    return a4;
  v9 = 0;
  v10 = 0;
  v11 = a4;
  do
  {
    v12 = *(_QWORD *)(*(_QWORD *)a2 + v9);
    if (v12 && *(_DWORD *)(v12 + 4))
    {
      v15 = a4;
      objc_msgSend((id)WTF::StringImpl::operator NSString *(), "_legacy_sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:", a1, &v15, 0, 12.0, a3);
      if (v15 < v11 && v15 > 0.0)
        v11 = v15;
      v5 = *(unsigned int *)(a2 + 12);
    }
    ++v10;
    v9 += 16;
  }
  while (v10 < v5);
  return v11;
}

void sub_1972B804C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1972B8340(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972B8430(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972B89E0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972B90A8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972B984C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1972B9B8C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c85_ZTSKZ72__WKSelectPicker_contextMenuInteraction_configurationForMenuAtLocation__E3__0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c85_ZTSKZ72__WKSelectPicker_contextMenuInteraction_configurationForMenuAtLocation__E3__0(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1972B9C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_1972B9CF4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c95_ZTSKZ82__WKSelectPicker_contextMenuInteraction_willDisplayMenuForConfiguration_animator__E3__1(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c95_ZTSKZ82__WKSelectPicker_contextMenuInteraction_willDisplayMenuForConfiguration_animator__E3__1(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1972B9DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_1972B9E34(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c87_ZTSKZ74__WKSelectPicker_contextMenuInteraction_willEndForConfiguration_animator__E3__2(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c87_ZTSKZ74__WKSelectPicker_contextMenuInteraction_willEndForConfiguration_animator__E3__2(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1972B9F30(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1972BA634(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972BA7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf)
{
  const void *v19;

  if (cf)
    CFRelease(cf);
  CFRelease(v19);
  _Unwind_Resume(a1);
}

void sub_1972BACC0(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972BB0C8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972BB5F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1972BB8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_1972BB950(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c55_ZTSKZ42__WKSelectPickerTableViewController_next__E3__4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c55_ZTSKZ42__WKSelectPickerTableViewController_next__E3__4(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1972BBA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_1972BBA84(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c59_ZTSKZ46__WKSelectPickerTableViewController_previous__E3__5(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c59_ZTSKZ46__WKSelectPickerTableViewController_previous__E3__5(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1972BBB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_1972BBBB4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c56_ZTSKZ43__WKSelectPickerTableViewController_close__E3__6(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_e8_32c56_ZTSKZ43__WKSelectPickerTableViewController_close__E3__6(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1972BC9C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1972BCE34(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZ55__WKSelectPickerGroupHeaderView_setCollapsed_animated__ENK3__3cvU13block_pointerFvvEEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  void *v5;
  CGAffineTransform v7;
  CGAffineTransform v8;

  v2 = objc_msgSend(MEMORY[0x1E0CEABB0], "userInterfaceLayoutDirectionForSemanticContentAttribute:", objc_msgSend(*(id *)(a1 + 32), "semanticContentAttribute"));
  memset(&v8, 0, sizeof(v8));
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v3 + 440))
  {
    CGAffineTransformMakeRotation(&v8, dbl_1978D0430[v2 == 0]);
  }
  else
  {
    v4 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)&v8.a = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)&v8.c = v4;
    *(_OWORD *)&v8.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  }
  v5 = *(void **)(v3 + 424);
  v7 = v8;
  return objc_msgSend(v5, "setTransform:", &v7);
}

CFTypeRef __copy_helper_block_e8_32c68_ZTSKZ55__WKSelectPickerGroupHeaderView_setCollapsed_animated__E3__3(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c68_ZTSKZ55__WKSelectPickerGroupHeaderView_setCollapsed_animated__E3__3(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

WTF *WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(WTF *result@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WTF *v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;

  v4 = result;
  v6 = *a2;
  if (*a2)
    *(_DWORD *)v6 += 2;
  v17 = 0;
  v18 = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v7 = *((unsigned int *)a2 + 5);
    if (!(_DWORD)v7)
      goto LABEL_20;
    if (v7 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      result = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
      LODWORD(v18) = v7;
      v17 = result;
      if (*((_BYTE *)a2 + 24))
      {
        v8 = *((unsigned int *)a2 + 5);
        if ((_DWORD)v8)
        {
          v9 = a2[1];
          v10 = 8 * v8;
          do
          {
            result = (WTF *)(*(uint64_t (**)(WTF *, _QWORD))(*(_QWORD *)v4 + 32))(v4, *(_QWORD *)v9);
            v16 = result;
            if (!result)
            {
              *(_BYTE *)a3 = 0;
              *(_BYTE *)(a3 + 32) = 0;
              goto LABEL_25;
            }
            if (HIDWORD(v18) == (_DWORD)v18)
            {
              result = (WTF *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v17, HIDWORD(v18) + 1, (unint64_t)&v16);
              *((_QWORD *)v17 + HIDWORD(v18)) = *(_QWORD *)result;
            }
            else
            {
              *((_QWORD *)v17 + HIDWORD(v18)) = result;
            }
            v11 = ++HIDWORD(v18);
            v9 = (WTF::StringImpl *)((char *)v9 + 8);
            v10 -= 8;
          }
          while (v10);
          if (!(_DWORD)v11)
            goto LABEL_21;
          if (!(v11 >> 29))
          {
            v12 = WTF::fastMalloc((WTF *)(8 * v11));
            if (HIDWORD(v18))
            {
              v13 = 0;
              v14 = v17;
              v15 = 8 * HIDWORD(v18);
              do
              {
                *(_QWORD *)(v12 + v13) = *(_QWORD *)((char *)v14 + v13);
                v13 += 8;
              }
              while (v15 != v13);
            }
LABEL_22:
            *(_QWORD *)a3 = v6;
            *(_QWORD *)(a3 + 8) = v12;
            *(_DWORD *)(a3 + 16) = v11;
            *(_DWORD *)(a3 + 20) = v11;
            *(_BYTE *)(a3 + 24) = 1;
            goto LABEL_24;
          }
LABEL_35:
          __break(0xC471u);
          return result;
        }
LABEL_20:
        LODWORD(v11) = 0;
LABEL_21:
        v12 = 0;
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
LABEL_24:
  *(_BYTE *)(a3 + 32) = 1;
  v6 = 0;
LABEL_25:
  result = v17;
  if (v17)
  {
    v17 = 0;
    LODWORD(v18) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return (WTF *)WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

WTF *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(WTF *result@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  WTF *v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  WTF *v19;
  uint64_t v20;

  v4 = result;
  v6 = *a2;
  if (*a2)
    *(_DWORD *)v6 += 2;
  v20 = 0;
  if (!*((_BYTE *)a2 + 24))
  {
    *(_QWORD *)a3 = v6;
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 1;
    return result;
  }
  v7 = *((unsigned int *)a2 + 5);
  if (!(_DWORD)v7)
  {
    v8 = 0;
LABEL_28:
    result = 0;
    goto LABEL_29;
  }
  if (v7 >> 29)
  {
    __break(0xC471u);
    goto LABEL_39;
  }
  result = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
  LODWORD(v20) = v7;
  v19 = result;
  if (!*((_BYTE *)a2 + 24))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(0xC471u);
    return result;
  }
  v8 = result;
  v9 = *((unsigned int *)a2 + 5);
  if (!(_DWORD)v9)
  {
    LODWORD(v7) = 0;
    goto LABEL_28;
  }
  LODWORD(v7) = 0;
  v10 = a2[1];
  v11 = 8 * v9;
  do
  {
    result = (WTF *)(*(uint64_t (**)(WTF *, _QWORD))(*(_QWORD *)v4 + 32))(v4, *(_QWORD *)v10);
    if (!result)
    {
      v18 = 0;
      *(_BYTE *)a3 = 0;
      goto LABEL_30;
    }
    v12 = result;
    if ((_DWORD)v7 == (_DWORD)v20)
    {
      v13 = v7 + ((unint64_t)v7 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)v7 + 1)
        v15 = v7 + 1;
      else
        v15 = v14;
      result = (WTF *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)&v19, v15);
      LODWORD(v7) = HIDWORD(v20);
      v8 = v19;
      v16 = (char *)v19 + 8 * HIDWORD(v20);
    }
    else
    {
      v16 = (char *)v8 + 8 * v7;
    }
    *(_QWORD *)v16 = v12;
    v7 = (v7 + 1);
    HIDWORD(v20) = v7;
    v10 = (WTF::StringImpl *)((char *)v10 + 8);
    v11 -= 8;
  }
  while (v11);
  if (!(_DWORD)v7)
    goto LABEL_28;
  if (v7 >> 29)
    goto LABEL_40;
  result = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
  v17 = 0;
  do
  {
    *(_QWORD *)((char *)result + v17) = *(_QWORD *)((char *)v8 + v17);
    v17 += 8;
  }
  while (8 * v7 != v17);
LABEL_29:
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = result;
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v7;
  v18 = 1;
  *(_BYTE *)(a3 + 24) = 1;
  v6 = 0;
LABEL_30:
  *(_BYTE *)(a3 + 32) = v18;
  if (v8)
    result = (WTF *)WTF::fastFree(v8, a2);
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return (WTF *)WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

unsigned int *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned int *result;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  int v20;
  char v21;
  WTF *v22;
  _BYTE v23[8];
  int v24;
  char v25;
  int v26;
  char v27;
  __int16 v28;
  _BYTE v29[32];
  int v30;
  char v31;
  uint64_t v32;

  result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 192))(a1, *(_QWORD *)a2);
  if (!result)
    goto LABEL_18;
  v7 = (uint64_t)result;
  if (*(_BYTE *)(a2 + 24))
  {
    result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 192))(a1, *(_QWORD *)(a2 + 16));
    v8 = (uint64_t)result;
    if (!result)
    {
LABEL_18:
      *a3 = 0;
      a3[80] = 0;
      return result;
    }
  }
  else
  {
    v8 = 0;
  }
  v29[0] = 0;
  v31 = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    result = (unsigned int *)WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2 + 32);
    if (v31 != v25)
    {
      v29[0] = 0;
      v30 = -1;
      result = (unsigned int *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v29, (uint64_t)&v19);
      v31 = 1;
      if (v25)
      {
        if (v24 != -1)
          result = (unsigned int *)((uint64_t (*)(uint64_t *, WTF **))off_1E34CF1A0[v24])(&v32, &v19);
      }
    }
    if (!v31)
      goto LABEL_18;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 16), v7);
  v9 = *(unsigned int **)(v7 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v19 = (WTF *)v9;
  v20 = *(_DWORD *)(a2 + 8);
  v21 = *(_BYTE *)(a2 + 12);
  if (v8)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 16), v8);
    v11 = *(unsigned int **)(v8 + 16);
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
  }
  else
  {
    v11 = 0;
  }
  v22 = (WTF *)v11;
  v23[0] = 0;
  v27 = 0;
  if (v31)
  {
    v26 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v23, (uint64_t)v29);
    v27 = 1;
  }
  v28 = *(_WORD *)(a2 + 80);
  std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::RenderPassColorAttachment>((uint64_t)a3, (uint64_t *)&v19);
  if (v27)
  {
    if (v26 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E34CF1A0[v26])(&v32, v23);
    v26 = -1;
  }
  v14 = (unsigned int *)v22;
  v22 = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v13);
    }
  }
  result = (unsigned int *)v19;
  v19 = 0;
  if (result)
  {
    do
    {
      v17 = __ldaxr(result);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, result));
    if (!v18)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v13);
    }
  }
  if (v31)
  {
    if (v30 != -1)
      return (unsigned int *)((uint64_t (*)(WTF **, _BYTE *))off_1E34CF1A0[v30])(&v19, v29);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::RenderPassLayout,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF **)(a1 + 8);
    if (v3)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit6WebGPU9ColorDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(WTF *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
      return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2, a3);
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E34CF180[v5])(&v7, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)v4 = v6;
  LODWORD(v6) = a3[2];
  a3[2] = 0;
  *(_DWORD *)(v4 + 8) = v6;
  LODWORD(v6) = a3[3];
  a3[3] = 0;
  *(_DWORD *)(v4 + 12) = v6;
  *(_DWORD *)(v4 + 32) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit6WebGPU9ColorDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *(__n128 *)a3;
      v7 = *(_OWORD *)(a3 + 16);
      *a2 = *(_OWORD *)a3;
      a2[1] = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E34CF180[v5])(&v9, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  result = *(__n128 *)a3;
  v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v8;
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::RenderPassColorAttachment>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 32) = 0;
  v5 = a1 + 32;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    *(_DWORD *)(a1 + 64) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)(a2 + 2));
    *(_BYTE *)(a1 + 72) = 1;
  }
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  *(_BYTE *)(a1 + 88) = 1;
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(WTF *result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
      return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a2, a3);
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E34CF1A0[v5])(&v7, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)v4 = v6;
  LODWORD(v6) = a3[2];
  a3[2] = 0;
  *(_DWORD *)(v4 + 8) = v6;
  LODWORD(v6) = a3[3];
  a3[3] = 0;
  *(_DWORD *)(v4 + 12) = v6;
  *(_DWORD *)(v4 + 32) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore6WebGPU9ColorDictEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSC_SF_EEEOSU_EEEDcSM_DpT0_(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *(__n128 *)a3;
      v7 = *(_OWORD *)(a3 + 16);
      *a2 = *(_OWORD *)a3;
      a2[1] = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E34CF1A0[v5])(&v9, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  result = *(__n128 *)a3;
  v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v8;
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::RenderPassColorAttachment>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = a2[1];
  v5 = a2[2];
  a2[2] = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v6 = a1 + 24;
  *(_QWORD *)(v6 - 8) = v5;
  *(_BYTE *)(v6 + 40) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    *(_DWORD *)(a1 + 56) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(v6, (uint64_t)(a2 + 3));
    *(_BYTE *)(a1 + 64) = 1;
  }
  *(_WORD *)(a1 + 72) = *((_WORD *)a2 + 36);
  *(_BYTE *)(a1 + 80) = 1;
  return a1;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,double>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 28))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = *a2;
      v8 = *a2 + 16 * v6;
      do
      {
        v9 = *(_DWORD **)v7;
        if (*(_QWORD *)v7)
          *v9 += 2;
        *v5 = v9;
        v5[1] = *(_QWORD *)(v7 + 8);
        v7 += 16;
        v5 += 2;
      }
      while (v7 != v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

WebCore::PlaybackSessionInterfaceIOS *WKFullScreenViewControllerPlaybackSessionModelClient::setInterface(WKFullScreenViewControllerPlaybackSessionModelClient *this, PlaybackSessionInterfaceIOS *a2)
{
  WebCore::PlaybackSessionInterfaceIOS *result;
  PlaybackSessionInterfaceIOS *m_ptr;
  uint64_t v5;
  uint64_t v6;

  result = (WebCore::PlaybackSessionInterfaceIOS *)this->m_interface.m_ptr;
  if (result != (WebCore::PlaybackSessionInterfaceIOS *)a2)
  {
    m_ptr = a2;
    if (result && WebCore::PlaybackSessionInterfaceIOS::playbackSessionModel(result))
    {
      v5 = WebCore::PlaybackSessionInterfaceIOS::playbackSessionModel((WebCore::PlaybackSessionInterfaceIOS *)this->m_interface.m_ptr);
      (*(void (**)(uint64_t, WKFullScreenViewControllerPlaybackSessionModelClient *))(*(_QWORD *)v5 + 24))(v5, this);
    }
    if (m_ptr)
      ++*((_DWORD *)m_ptr + 4);
    result = (WebCore::PlaybackSessionInterfaceIOS *)this->m_interface.m_ptr;
    this->m_interface.m_ptr = m_ptr;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
      {
        result = (WebCore::PlaybackSessionInterfaceIOS *)(*(uint64_t (**)(WebCore::PlaybackSessionInterfaceIOS *))(*(_QWORD *)result + 8))(result);
        m_ptr = this->m_interface.m_ptr;
        if (!m_ptr)
          return result;
LABEL_13:
        result = (WebCore::PlaybackSessionInterfaceIOS *)WebCore::PlaybackSessionInterfaceIOS::playbackSessionModel((WebCore::PlaybackSessionInterfaceIOS *)m_ptr);
        if (result)
        {
          v6 = WebCore::PlaybackSessionInterfaceIOS::playbackSessionModel((WebCore::PlaybackSessionInterfaceIOS *)this->m_interface.m_ptr);
          return (WebCore::PlaybackSessionInterfaceIOS *)(*(uint64_t (**)(uint64_t, WKFullScreenViewControllerPlaybackSessionModelClient *))(*(_QWORD *)v6 + 16))(v6, this);
        }
        return result;
      }
      --*((_DWORD *)result + 4);
    }
    if (!m_ptr)
      return result;
    goto LABEL_13;
  }
  return result;
}

void sub_1972BEF14(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

void sub_1972BF364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_1972BFBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1972C0058(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[4];
  _Unwind_Resume(exception_object);
}

void sub_1972C0490(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 - 72);
  *(_QWORD *)(v1 - 72) = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void WKFullScreenViewControllerPlaybackSessionModelClient::~WKFullScreenViewControllerPlaybackSessionModelClient(WKFullScreenViewControllerPlaybackSessionModelClient *this)
{
  PlaybackSessionInterfaceIOS *m_ptr;
  void *v3;

  m_ptr = this->m_interface.m_ptr;
  this->m_interface.m_ptr = 0;
  if (m_ptr)
  {
    if (*((_DWORD *)m_ptr + 4) == 1)
      (*(void (**)(PlaybackSessionInterfaceIOS *))(*(_QWORD *)m_ptr + 8))(m_ptr);
    else
      --*((_DWORD *)m_ptr + 4);
  }
  objc_destroyWeak(&this->m_parent.m_weakReference);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)&this->m_weakPtrFactory, v3);
}

{
  PlaybackSessionInterfaceIOS *m_ptr;
  void *v3;
  void *v4;

  m_ptr = this->m_interface.m_ptr;
  this->m_interface.m_ptr = 0;
  if (m_ptr)
  {
    if (*((_DWORD *)m_ptr + 4) == 1)
      (*(void (**)(PlaybackSessionInterfaceIOS *))(*(_QWORD *)m_ptr + 8))(m_ptr);
    else
      --*((_DWORD *)m_ptr + 4);
  }
  objc_destroyWeak(&this->m_parent.m_weakReference);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)&this->m_weakPtrFactory, v3);
  if (this->m_count.m_value)
  {
    this->m_interface.m_ptr = 0;
    *(_OWORD *)&this->_vptr$PlaybackSessionModelClient = 0u;
    *(_OWORD *)&this->m_count.m_value = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)this, v4);
  }
}

void sub_1972C1B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;
  uint64_t v19;

  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  CFRelease(*(CFTypeRef *)(v19 + 8));
  _Unwind_Resume(a1);
}

void sub_1972C2134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  const void *v15;

  if (v15)
    CFRelease(v15);
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1972C2790(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, char a17, WTF::StringImpl *a18)
{
  const void *v18;
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a16)
      {
        if (*(_DWORD *)a16 == 2)
          WTF::StringImpl::destroy(a16, a2);
        else
          *(_DWORD *)a16 -= 2;
      }
      if (v18)
        CFRelease(v18);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WebKit::WKWebViewState::applyTo(WebKit::WKWebViewState *this, WKWebView *a2)
{
  UIScrollView *v4;
  UIScrollView *v5;
  WebKit::WebPageProxy *v7;

  -[WKWebView _setPageScale:withOrigin:](a2, "_setPageScale:withOrigin:", *((double *)this + 1), 0.0, 0.0);
  if (*((_BYTE *)this + 80))
    -[WKWebView _setObscuredInsets:](a2, "_setObscuredInsets:", *((double *)this + 11), *((double *)this + 12), *((double *)this + 13), *((double *)this + 14));
  else
    -[WKWebView _resetObscuredInsets](a2, "_resetObscuredInsets");
  -[WKWebView _setObscuredInsetEdgesAffectedBySafeArea:](a2, "_setObscuredInsetEdgesAffectedBySafeArea:", *((_QWORD *)this + 15));
  v4 = -[WKWebView scrollView](a2, "scrollView");
  v5 = v4;
  if (*((_BYTE *)this + 40))
    -[UIScrollView setContentInset:](v4, "setContentInset:", *((double *)this + 6), *((double *)this + 7), *((double *)this + 8), *((double *)this + 9));
  else
    -[UIScrollView _resetContentInset](v4, "_resetContentInset");
  -[UIScrollView setContentOffset:](v5, "setContentOffset:", *((double *)this + 22), *((double *)this + 23));
  -[UIScrollView setScrollIndicatorInsets:](v5, "setScrollIndicatorInsets:", *((double *)this + 16), *((double *)this + 17), *((double *)this + 18), *((double *)this + 19));
  if (*((_BYTE *)this + 160))
    -[UIScrollView setContentInsetAdjustmentBehavior:](v5, "setContentInsetAdjustmentBehavior:", *((_QWORD *)this + 21));
  else
    -[WKWebView _resetScrollViewInsetAdjustmentBehavior](a2, "_resetScrollViewInsetAdjustmentBehavior");
  if (*((_BYTE *)this + 208))
    -[WKWebView _setUnobscuredSafeAreaInsets:](a2, "_setUnobscuredSafeAreaInsets:", *((double *)this + 27), *((double *)this + 28), *((double *)this + 29), *((double *)this + 30));
  else
    -[WKWebView _resetUnobscuredSafeAreaInsets](a2, "_resetUnobscuredSafeAreaInsets");
  if (*((_BYTE *)this + 248))
  {
    -[WKWebView _overrideLayoutParametersWithMinimumLayoutSize:minimumUnobscuredSizeOverride:maximumUnobscuredSizeOverride:](a2, "_overrideLayoutParametersWithMinimumLayoutSize:minimumUnobscuredSizeOverride:maximumUnobscuredSizeOverride:", *((double *)this + 32), *((double *)this + 33), *((double *)this + 32), *((double *)this + 33), *((double *)this + 34), *((double *)this + 35));
    if (!a2)
      goto LABEL_19;
  }
  else
  {
    -[WKWebView _clearOverrideLayoutParameters](a2, "_clearOverrideLayoutParameters");
    if (!a2)
      goto LABEL_19;
  }
  -[WKWebView _page](a2, "_page");
  if (v7)
  {
    WebKit::WebPageProxy::setTopContentInset(v7, *(float *)this);
    WebKit::WebPageProxy::setForceAlwaysUserScalable((uint64_t)v7, *((unsigned __int8 *)this + 193));
  }
LABEL_19:
  -[WKWebView _setViewScale:](a2, "_setViewScale:", *((double *)this + 2));
  -[UIScrollView setZoomScale:](v5, "setZoomScale:", *((double *)this + 3));
  -[UIScrollView setBouncesZoom:](v5, "setBouncesZoom:", *((unsigned __int8 *)this + 192));
  return -[WKWebView _setMinimumEffectiveDeviceWidth:](a2, "_setMinimumEffectiveDeviceWidth:", *((double *)this + 25));
}

void sub_1972C3024(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35)
{
  unsigned __int8 *v35;
  uint64_t v36;
  int v38;
  WTF::StringImpl *v39;

  v38 = __ldxr(v35);
  if (v38 == 1)
  {
    if (!__stlxr(0, v35))
    {
LABEL_6:
      v39 = *(WTF::StringImpl **)(v36 - 200);
      *(_QWORD *)(v36 - 200) = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, a2);
        else
          *(_DWORD *)v39 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1972C3C80(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18)
{
  unsigned __int8 *v18;
  int v20;

  v20 = __ldxr(v18);
  if (v20 == 1)
  {
    if (!__stlxr(0, v18))
    {
LABEL_6:
      if (a16)
      {
        if (*(_DWORD *)a16 == 2)
          WTF::StringImpl::destroy(a16, a2);
        else
          *(_DWORD *)a16 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1972C4598(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22)
{
  unsigned __int8 *v22;
  int v24;

  v24 = __ldxr(v22);
  if (v24 == 1)
  {
    if (!__stlxr(0, v22))
    {
LABEL_6:
      if (a20)
      {
        if (*(_DWORD *)a20 == 2)
          WTF::StringImpl::destroy(a20, a2);
        else
          *(_DWORD *)a20 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1972C4C00(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21)
{
  unsigned __int8 *v21;
  int v23;

  v23 = __ldxr(v21);
  if (v23 == 1)
  {
    if (!__stlxr(0, v21))
    {
LABEL_6:
      if (a20)
      {
        if (*(_DWORD *)a20 == 2)
          WTF::StringImpl::destroy(a20, a2);
        else
          *(_DWORD *)a20 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1972C526C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,WTF::StringImpl *a22,char a23)
{
  unsigned __int8 *v23;
  int v25;

  v25 = __ldxr(v23);
  if (v25 == 1)
  {
    if (!__stlxr(0, v23))
    {
LABEL_6:
      if (a22)
      {
        if (*(_DWORD *)a22 == 2)
          WTF::StringImpl::destroy(a22, a2);
        else
          *(_DWORD *)a22 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1972C58C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30)
{
  unsigned __int8 *v30;
  int v32;

  v32 = __ldxr(v30);
  if (v32 == 1)
  {
    if (!__stlxr(0, v30))
    {
LABEL_6:
      if (a30)
      {
        if (*(_DWORD *)a30 == 2)
          WTF::StringImpl::destroy(a30, a2);
        else
          *(_DWORD *)a30 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1972C5B60(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1972C613C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21)
{
  unsigned __int8 *v21;
  int v23;

  v23 = __ldxr(v21);
  if (v23 == 1)
  {
    if (!__stlxr(0, v21))
    {
LABEL_6:
      if (a20)
      {
        if (*(_DWORD *)a20 == 2)
          WTF::StringImpl::destroy(a20, a2);
        else
          *(_DWORD *)a20 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1972C64E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1972C6784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoPresentationInterfaceIOS,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v10 + 64));
  _Unwind_Resume(a1);
}

void sub_1972C684C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972C6938(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972C6E1C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1972C7410(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,char a25,WTF::StringImpl *a26)
{
  unsigned __int8 *v26;
  int v28;

  v28 = __ldxr(v26);
  if (v28 == 1)
  {
    if (!__stlxr(0, v26))
    {
LABEL_6:
      if (a24)
      {
        if (*(_DWORD *)a24 == 2)
          WTF::StringImpl::destroy(a24, a2);
        else
          *(_DWORD *)a24 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1972C7A5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, char a19, WTF::StringImpl *a20)
{
  unsigned __int8 *v20;
  int v22;

  v22 = __ldxr(v20);
  if (v22 == 1)
  {
    if (!__stlxr(0, v20))
    {
LABEL_6:
      if (a18)
      {
        if (*(_DWORD *)a18 == 2)
          WTF::StringImpl::destroy(a18, a2);
        else
          *(_DWORD *)a18 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WebKit::DisplayCaptureSessionManager::deviceSelectedForTesting@<X0>(WebCore::RealtimeMediaSourceCenter *a1@<X0>, int a2@<W1>, int a3@<W2>, _BYTE *a4@<X8>)
{
  WebCore::RealtimeMediaSourceCenter *v7;
  uint64_t v8;
  uint64_t (***v9)(_QWORD);
  uint64_t result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v7 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(a1);
  v8 = WebCore::RealtimeMediaSourceCenter::displayCaptureFactory(v7);
  v9 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  result = (**v9)(v9);
  v11 = *(unsigned int *)(result + 12);
  if (!(_DWORD)v11)
  {
LABEL_8:
    *a4 = 0;
    a4[40] = 0;
    return result;
  }
  v12 = 0;
  v13 = *(_QWORD *)result;
  v14 = 40 * v11;
  while (1)
  {
    if (!*(_BYTE *)(v13 + 32) || *(unsigned __int8 *)(v13 + 8) != a2)
      goto LABEL_7;
    if (v12 == a3)
      return std::__optional_destruct_base<WebCore::CaptureDevice,false>::__optional_destruct_base[abi:sn180100]<WebCore::CaptureDevice const&>((uint64_t)a4, v13);
    ++v12;
LABEL_7:
    v13 += 40;
    v14 -= 40;
    if (!v14)
      goto LABEL_8;
  }
}

uint64_t WebKit::DisplayCaptureSessionManager::showWindowPicker(WebCore::MockRealtimeMediaSourceCenter *a1, uint64_t a2, uint64_t *a3)
{
  WebCore::MockRealtimeMediaSourceCenter *v4;
  int v5;
  _BYTE *v6;
  WTF::StringImpl *v7;
  _BYTE v9[48];
  _BYTE v10[48];

  v4 = a1;
  if (*((_BYTE *)a1 + 4))
    goto LABEL_2;
  a1 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(a1);
  if (!(_DWORD)a1)
  {
    v9[0] = 0;
    v9[40] = 0;
    v6 = v9;
    WTF::CompletionHandler<void ()(std::optional<WebCore::CaptureDevice>)>::operator()(a3, (uint64_t)v9);
    return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v7);
  }
  if (*((_BYTE *)v4 + 4))
LABEL_2:
    v5 = *(_DWORD *)v4;
  else
    v5 = 0;
  v6 = v10;
  WebKit::DisplayCaptureSessionManager::deviceSelectedForTesting(a1, 5, v5, v10);
  WTF::CompletionHandler<void ()(std::optional<WebCore::CaptureDevice>)>::operator()(a3, (uint64_t)v10);
  return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v7);
}

void sub_1972C8064(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebCore::CaptureDevice>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  WTF::StringImpl *v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  __int128 v8;
  int v9;
  char v10;
  uint64_t v11;

  v11 = *a1;
  *a1 = 0;
  LOBYTE(v6) = 0;
  v10 = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    v2 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v6 = v2;
    v7 = *(_BYTE *)(a2 + 8);
    v3 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v8 = v3;
    v9 = *(_DWORD *)(a2 + 32);
    v10 = 1;
  }
  WTF::Function<void ()(std::optional<WebCore::CaptureDevice>)>::operator()(&v11, &v6);
  std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v6, v4);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1972C811C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  v5 = *(_QWORD *)(v3 - 24);
  *(_QWORD *)(v3 - 24) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

uint64_t WebKit::DisplayCaptureSessionManager::showScreenPicker(WebCore::MockRealtimeMediaSourceCenter *a1, uint64_t a2, uint64_t *a3)
{
  WebCore::MockRealtimeMediaSourceCenter *v4;
  int v5;
  _BYTE *v6;
  WTF::StringImpl *v7;
  _BYTE v9[48];
  _BYTE v10[48];

  v4 = a1;
  if (*((_BYTE *)a1 + 4))
    goto LABEL_2;
  a1 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(a1);
  if (!(_DWORD)a1)
  {
    v9[0] = 0;
    v9[40] = 0;
    v6 = v9;
    WTF::CompletionHandler<void ()(std::optional<WebCore::CaptureDevice>)>::operator()(a3, (uint64_t)v9);
    return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v7);
  }
  if (*((_BYTE *)v4 + 4))
LABEL_2:
    v5 = *(_DWORD *)v4;
  else
    v5 = 0;
  v6 = v10;
  WebKit::DisplayCaptureSessionManager::deviceSelectedForTesting(a1, 4, v5, v10);
  WTF::CompletionHandler<void ()(std::optional<WebCore::CaptureDevice>)>::operator()(a3, (uint64_t)v10);
  return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v7);
}

void sub_1972C81D4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::DisplayCaptureSessionManager::promptForGetDisplayMedia(WebCore::MockRealtimeMediaSourceCenter *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v6;
  uint64_t result;

  v6 = a2;
  if (*((_BYTE *)a1 + 4)
    || (result = WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(a1), (_DWORD)result))
  {
    if (v6)
      return WebKit::DisplayCaptureSessionManager::showScreenPicker(a1, a2, a5);
    else
      return WebKit::DisplayCaptureSessionManager::showWindowPicker(a1, a2, a5);
  }
  return result;
}

uint64_t WKFullScreenViewControllerPlaybackSessionModelClient::ptrCount(WKFullScreenViewControllerPlaybackSessionModelClient *this)
{
  return this->m_count.m_value;
}

uint64_t WKFullScreenViewControllerPlaybackSessionModelClient::ptrCountWithoutThreadCheck(WKFullScreenViewControllerPlaybackSessionModelClient *this)
{
  return this->m_count.m_value;
}

WKFullScreenViewControllerPlaybackSessionModelClient *WKFullScreenViewControllerPlaybackSessionModelClient::incrementPtrCount(WKFullScreenViewControllerPlaybackSessionModelClient *this)
{
  ++this->m_count.m_value;
  return this;
}

WKFullScreenViewControllerPlaybackSessionModelClient *WKFullScreenViewControllerPlaybackSessionModelClient::decrementPtrCount(WKFullScreenViewControllerPlaybackSessionModelClient *this)
{
  unsigned int m_value;

  m_value = this->m_count.m_value;
  if (m_value)
  {
    this->m_count.m_value = m_value - 1;
  }
  else
  {
    this = (WKFullScreenViewControllerPlaybackSessionModelClient *)286;
    __break(0xC471u);
  }
  return this;
}

id WKFullScreenViewControllerPlaybackSessionModelClient::rateChanged(uint64_t a1, char a2)
{
  id result;

  result = objc_loadWeak((id *)(a1 + 24));
  if (result)
    return (id)objc_msgSend(result, "setPlaying:", a2 & 1);
  return result;
}

id WKFullScreenViewControllerPlaybackSessionModelClient::pictureInPictureActiveChanged(WKFullScreenViewControllerPlaybackSessionModelClient *this, uint64_t a2)
{
  id result;

  result = objc_loadWeak(&this->m_parent.m_weakReference);
  if (result)
    return (id)objc_msgSend(result, "setPictureInPictureActive:", a2);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ80__WKFullScreenWindowController_beganEnterFullScreenWithInitialFrame_finalFrame__EUb2_E3__4vJbEE4callEb(uint64_t a1, int a2)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (a2)
    return objc_msgSend(v2, "didEnterPictureInPicture");
  else
    return objc_msgSend(v2, "didExitPictureInPicture");
}

uint64_t std::default_delete<WTF::Observer<void ()(BOOL)>>::operator()[abi:sn180100](WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v4 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return WTF::fastFree(this, a2);
}

Class initAVBackgroundView(void)
{
  Class result;

  if ((_MergedGlobals_132_0 & 1) == 0)
  {
    qword_1ECE72CD0 = (uint64_t)dlopen("/System/Library/Frameworks/AVKit.framework/AVKit", 2);
    _MergedGlobals_132_0 = 1;
  }
  result = objc_getClass("AVBackgroundView");
  qword_1ECE72CC8 = (uint64_t)result;
  getAVBackgroundViewClass = AVBackgroundViewFunction;
  return result;
}

uint64_t AVBackgroundViewFunction(void)
{
  return qword_1ECE72CC8;
}

uint64_t std::__optional_destruct_base<WebCore::CaptureDevice,false>::__optional_destruct_base[abi:sn180100]<WebCore::CaptureDevice const&>(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  *(_QWORD *)result = v2;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_DWORD **)(a2 + 16);
  if (v3)
    *v3 += 2;
  *(_QWORD *)(result + 16) = v3;
  v4 = *(_DWORD **)(a2 + 24);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(result + 24) = v4;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(result + 40) = 1;
  return result;
}

void sub_1972C91C0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, char a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21,WTF::StringImpl *a22)
{
  unsigned __int8 *v22;
  int v24;

  v24 = __ldxr(v22);
  if (v24 == 1)
  {
    if (!__stlxr(0, v22))
    {
LABEL_6:
      if (a20)
      {
        if (*(_DWORD *)a20 == 2)
          WTF::StringImpl::destroy(a20, a2);
        else
          *(_DWORD *)a20 -= 2;
      }
      CFRelease(cf);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  WTF *v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t i;
  WTF::StringImpl *v24;
  int v25;
  WTF *v26[2];
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint8_t buf[16];
  int v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v27, a3);
  *(_QWORD *)buf = v28;
  v26[0] = v27;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v26, &v29);
  if (v29)
  {
    v8 = v27;
    v27 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v28;
    v28 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = *(NSObject **)(a1 + 32);
    v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v11)
    {
      WTF::String::utf8();
      v13 = v26[0] ? (char *)v26[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v11 = v26[0];
      v26[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
          v11 = (WTF *)WTF::fastFree(v11, v12);
        else
          --*(_DWORD *)v11;
      }
    }
    if (*(_BYTE *)a1)
    {
      v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v15 = *v14;
        if ((v15 & 1) != 0)
          break;
        v16 = __ldaxr(v14);
        if (v16 == v15)
        {
          if (!__stxr(v15 | 1, v14))
          {
            v17 = WTF::Logger::observers(v11);
            v18 = *(unsigned int *)(v17 + 12);
            if ((_DWORD)v18)
            {
              v19 = *(uint64_t **)v17;
              v20 = *(_QWORD *)v17 + 8 * v18;
              do
              {
                v21 = *v19;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v31 = 0;
                WTF::String::String((WTF::String *)v32, a3);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v26, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v21 + 16))(v21, a1, 0, v26);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v22);
                for (i = 24; i != -8; i -= 16)
                {
                  v24 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v24)
                  {
                    if (*(_DWORD *)v24 == 2)
                      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
                    else
                      *(_DWORD *)v24 -= 2;
                  }
                }
                ++v19;
              }
              while (v19 != (uint64_t *)v20);
            }
            v25 = __ldxr(v14);
            if (v25 == 1)
            {
              if (!__stlxr(0, v14))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1972C978C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  unsigned __int8 *v16;
  int v18;

  v18 = __ldxr(v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, v16))
    {
LABEL_6:
      if (a14)
      {
        if (*(_DWORD *)a14 == 2)
          WTF::StringImpl::destroy(a14, a2);
        else
          *(_DWORD *)a14 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZ61__WKFullScreenWindowController__enterFullScreen_windowScene__EUb1_E3__3vJEED1Ev(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[1];
  *a1 = &off_1E34CF440;
  a1[1] = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ61__WKFullScreenWindowController__enterFullScreen_windowScene__EUb1_E3__3vJEED0Ev(WTF *this, void *a2)
{
  const void *v3;

  v3 = (const void *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CF440;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(v3);
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZ61__WKFullScreenWindowController__enterFullScreen_windowScene__EUb1_E3__3vJEE4callEv(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  WTF *v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t i;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  NSObject *v39;
  WTF *v40;
  char *v41;
  int v42;
  int v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t j;
  WTF::StringImpl *v52;
  int8x16_t v53;
  WTF *v54[2];
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint8_t buf[16];
  int8x16_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE **)(a1 + 16);
  if (v2[474])
  {
    v2[474] = 0;
    if (objc_msgSend(v2, "loggerPtr"))
    {
      if (objc_msgSend(*(id *)(a1 + 16), "logChannel"))
      {
        v3 = objc_msgSend(*(id *)(a1 + 16), "loggerPtr");
        v4 = objc_msgSend(*(id *)(a1 + 16), "logChannel");
        if (*(_BYTE *)(v3 + 12))
        {
          v5 = v4;
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
          WTF::String::String((WTF::String *)&v55, "repaint completed, but exit requested");
          *(_QWORD *)buf = v56;
          v54[0] = v55;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v54, &v57);
          if (v57)
          {
            v7 = v55;
            v55 = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy(v7, v6);
              else
                *(_DWORD *)v7 -= 2;
            }
            v21 = v56;
            v56 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v6);
              else
                *(_DWORD *)v21 -= 2;
            }
            v22 = *(NSObject **)(v5 + 32);
            v23 = (WTF *)os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v23)
            {
              WTF::String::utf8();
              v25 = v54[0] ? (char *)v54[0] + 16 : 0;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v25;
              _os_log_impl(&dword_196BCC000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              v23 = v54[0];
              v54[0] = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 1)
                  v23 = (WTF *)WTF::fastFree(v23, v24);
                else
                  --*(_DWORD *)v23;
              }
            }
            if (*(_BYTE *)v5 && *(_BYTE *)(v5 + 16))
            {
              v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v27 = *v26;
                if ((v27 & 1) != 0)
                  break;
                v28 = __ldaxr(v26);
                if (v28 == v27)
                {
                  if (!__stxr(v27 | 1, v26))
                  {
                    v29 = WTF::Logger::observers(v23);
                    v30 = *(unsigned int *)(v29 + 12);
                    if ((_DWORD)v30)
                    {
                      v31 = *(uint64_t **)v29;
                      v32 = *(_QWORD *)v29 + 8 * v30;
                      do
                      {
                        v33 = *v31;
                        *(_DWORD *)buf = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                        v59.i32[0] = 0;
                        WTF::String::String((WTF::String *)&v59.u64[1], "repaint completed, but exit requested");
                        WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v54, (uint64_t)buf, 2uLL);
                        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v33 + 16))(v33, v5, 1, v54);
                        WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v54, v34);
                        for (i = 24; i != -8; i -= 16)
                        {
                          v36 = *(WTF::StringImpl **)&buf[i];
                          *(_QWORD *)&buf[i] = 0;
                          if (v36)
                          {
                            if (*(_DWORD *)v36 == 2)
                              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v24);
                            else
                              *(_DWORD *)v36 -= 2;
                          }
                        }
                        ++v31;
                      }
                      while (v31 != (uint64_t *)v32);
                    }
                    goto LABEL_50;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
LABEL_76:
            v44 = v57;
            v57 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
                WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v24);
              else
                *(_DWORD *)v44 -= 2;
            }
            goto LABEL_80;
          }
          goto LABEL_91;
        }
      }
    }
    goto LABEL_80;
  }
  v8 = objc_msgSend(*(id *)(a1 + 8), "_manager");
  v9 = *(void **)(a1 + 16);
  if (!v8)
  {
    if (objc_msgSend(v9, "loggerPtr"))
    {
      if (objc_msgSend(*(id *)(a1 + 16), "logChannel"))
      {
        v16 = objc_msgSend(*(id *)(a1 + 16), "loggerPtr");
        v17 = objc_msgSend(*(id *)(a1 + 16), "logChannel");
        if (*(_BYTE *)(v16 + 12))
        {
          v18 = v17;
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
          WTF::String::String((WTF::String *)&v55, "repaint completed, but manager missing");
          *(_QWORD *)buf = v56;
          v54[0] = v55;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v54, &v57);
          if (v57)
          {
            v20 = v55;
            v55 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v19);
              else
                *(_DWORD *)v20 -= 2;
            }
            v38 = v56;
            v56 = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2)
                WTF::StringImpl::destroy(v38, v19);
              else
                *(_DWORD *)v38 -= 2;
            }
            v39 = *(NSObject **)(v18 + 32);
            v40 = (WTF *)os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v40)
            {
              WTF::String::utf8();
              v41 = v54[0] ? (char *)v54[0] + 16 : 0;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v41;
              _os_log_impl(&dword_196BCC000, v39, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              v40 = v54[0];
              v54[0] = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 1)
                  v40 = (WTF *)WTF::fastFree(v40, v24);
                else
                  --*(_DWORD *)v40;
              }
            }
            if (*(_BYTE *)v18 && *(_BYTE *)(v18 + 16))
            {
              v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v42 = *v26;
                if ((v42 & 1) != 0)
                  break;
                v43 = __ldaxr(v26);
                if (v43 == v42)
                {
                  if (!__stxr(v42 | 1, v26))
                  {
                    v45 = WTF::Logger::observers(v40);
                    v46 = *(unsigned int *)(v45 + 12);
                    if ((_DWORD)v46)
                    {
                      v47 = *(uint64_t **)v45;
                      v48 = *(_QWORD *)v45 + 8 * v46;
                      do
                      {
                        v49 = *v47;
                        *(_DWORD *)buf = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                        v59.i32[0] = 0;
                        WTF::String::String((WTF::String *)&v59.u64[1], "repaint completed, but manager missing");
                        WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v54, (uint64_t)buf, 2uLL);
                        (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v49 + 16))(v49, v18, 1, v54);
                        WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v54, v50);
                        for (j = 24; j != -8; j -= 16)
                        {
                          v52 = *(WTF::StringImpl **)&buf[j];
                          *(_QWORD *)&buf[j] = 0;
                          if (v52)
                          {
                            if (*(_DWORD *)v52 == 2)
                              WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v24);
                            else
                              *(_DWORD *)v52 -= 2;
                          }
                        }
                        ++v47;
                      }
                      while (v47 != (uint64_t *)v48);
                    }
LABEL_50:
                    v37 = __ldxr(v26);
                    if (v37 == 1)
                    {
                      if (!__stlxr(0, v26))
                        goto LABEL_76;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    goto LABEL_76;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            goto LABEL_76;
          }
LABEL_91:
          __break(0xC471u);
          JUMPOUT(0x1972C9F84);
        }
      }
    }
LABEL_80:
    objc_msgSend(*(id *)(a1 + 16), "_exitFullscreenImmediately");
    return;
  }
  v10 = (void *)objc_msgSend(v9, "_webView");
  v11 = *(int8x16_t *)(a1 + 8);
  v53 = v11;
  if (v11.i64[0])
    CFRetain((CFTypeRef)v11.i64[0]);
  v12 = *(int8x16_t *)(a1 + 40);
  *(_OWORD *)buf = *(_OWORD *)(a1 + 24);
  v59 = v12;
  v13 = (int8x16_t *)malloc_type_malloc(0x50uLL, 0x10F00405A05B92CuLL);
  v13->i64[0] = MEMORY[0x1E0C809A0];
  v13->i64[1] = 50331650;
  v13[1].i64[0] = (uint64_t)_ZZN3WTF8BlockPtrIFvvEE12fromCallableIZZZ61__WKFullScreenWindowController__enterFullScreen_windowScene__EUb1_ENK3__3clEvEUlvE_EES2_T_ENUlPvE_8__invokeES7_;
  v13[1].i64[1] = (uint64_t)&_ZZN3WTF8BlockPtrIFvvEE12fromCallableIZZZ61__WKFullScreenWindowController__enterFullScreen_windowScene__EUb1_ENK3__3clEvEUlvE_EES2_T_E10descriptor;
  v14 = *(int8x16_t *)buf;
  v15 = v59;
  v13[2] = vextq_s8(v53, v53, 8uLL);
  v13[3] = v14;
  v13[4] = v15;
  objc_msgSend(v10, "_doAfterNextVisibleContentRectAndPresentationUpdate:", v13);
  _Block_release(v13);
}

void sub_1972C9F90(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16, char a17, WTF::StringImpl *a18)
{
  unsigned __int8 *v18;
  int v20;

  v20 = __ldxr(v18);
  if (v20 == 1)
  {
    if (!__stlxr(0, v18))
    {
LABEL_6:
      if (a16)
      {
        if (*(_DWORD *)a16 == 2)
          WTF::StringImpl::destroy(a16, a2);
        else
          *(_DWORD *)a16 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void _ZZN3WTF8BlockPtrIFvvEE12fromCallableIZZZ61__WKFullScreenWindowController__enterFullScreen_windowScene__EUb1_ENK3__3clEvEUlvE_EES2_T_ENUlPKvE_8__invokeES8_(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t _ZZN3WTF8BlockPtrIFvvEE12fromCallableIZZZ61__WKFullScreenWindowController__enterFullScreen_windowScene__EUb1_ENK3__3clEvEUlvE_EES2_T_ENUlPvE_8__invokeES7_(id *a1)
{
  WebKit::WebFullScreenManagerProxy *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  WTF *v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t i;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  WTF *v30[2];
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint8_t buf[16];
  int v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x1E0C80C00];
  v2 = (WebKit::WebFullScreenManagerProxy *)objc_msgSend(a1[5], "_manager");
  v3 = objc_msgSend(a1[4], "loggerPtr");
  if (!v2)
  {
    if (v3)
    {
      if (objc_msgSend(a1[4], "logChannel"))
      {
        v7 = objc_msgSend(a1[4], "loggerPtr");
        v8 = objc_msgSend(a1[4], "logChannel");
        if (*(_BYTE *)(v7 + 12))
        {
          v9 = v8;
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 6));
          WTF::String::String((WTF::String *)&v31, "presentation updated, but manager missing");
          *(_QWORD *)buf = v32;
          v30[0] = v31;
          result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v30, &v33);
          if (!v33)
          {
            __break(0xC471u);
            return result;
          }
          v11 = v31;
          v31 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v32;
          v32 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v10);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = *(NSObject **)(v9 + 32);
          v14 = (WTF *)os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v14)
          {
            WTF::String::utf8();
            v16 = v30[0] ? (char *)v30[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v16;
            _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v14 = v30[0];
            v30[0] = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                v14 = (WTF *)WTF::fastFree(v14, v15);
              else
                --*(_DWORD *)v14;
            }
          }
          if (*(_BYTE *)v9 && *(_BYTE *)(v9 + 16))
          {
            v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v18 = *v17;
              if ((v18 & 1) != 0)
                break;
              v19 = __ldaxr(v17);
              if (v19 == v18)
              {
                if (!__stxr(v18 | 1, v17))
                {
                  v20 = WTF::Logger::observers(v14);
                  v21 = *(unsigned int *)(v20 + 12);
                  if ((_DWORD)v21)
                  {
                    v22 = *(uint64_t **)v20;
                    v23 = *(_QWORD *)v20 + 8 * v21;
                    do
                    {
                      v24 = *v22;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 6));
                      v35 = 0;
                      WTF::String::String((WTF::String *)v36, "presentation updated, but manager missing");
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v30, (uint64_t)buf, 2uLL);
                      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v24 + 16))(v24, v9, 1, v30);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v25);
                      for (i = 24; i != -8; i -= 16)
                      {
                        v27 = *(WTF::StringImpl **)&buf[i];
                        *(_QWORD *)&buf[i] = 0;
                        if (v27)
                        {
                          if (*(_DWORD *)v27 == 2)
                            WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v15);
                          else
                            *(_DWORD *)v27 -= 2;
                        }
                      }
                      ++v22;
                    }
                    while (v22 != (uint64_t *)v23);
                  }
                  v28 = __ldxr(v17);
                  if (v28 == 1)
                  {
                    if (!__stlxr(0, v17))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v29 = v33;
          v33 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)v29 -= 2;
          }
        }
      }
    }
    return objc_msgSend(a1[5], "_exitFullscreenImmediately");
  }
  if (v3 && objc_msgSend(a1[4], "logChannel"))
  {
    v4 = objc_msgSend(a1[4], "loggerPtr");
    v5 = objc_msgSend(a1[4], "logChannel");
    if (*(_BYTE *)(v4 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>(v5, (WTF::Logger::LogSiteIdentifier *)(a1 + 6), "presentation updated");
  }
  return WebKit::WebFullScreenManagerProxy::willEnterFullScreen(v2, 1);
}

void sub_1972CA504(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  unsigned __int8 *v16;
  int v18;

  v18 = __ldxr(v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, v16))
    {
LABEL_6:
      if (a14)
      {
        if (*(_DWORD *)a14 == 2)
          WTF::StringImpl::destroy(a14, a2);
        else
          *(_DWORD *)a14 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void WTF::LogArgument<WebKit::FullScreenState>::toString(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1972CA658()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *v0 = v2;
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::FloatRect,char [3],WebCore::FloatRect>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, WebCore::FloatRect *a3, WebCore::FloatRect *a4)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  WTF *v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *result;
  uint64_t v26;
  WTF *v30[2];
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint8_t buf[4];
  char *v37;
  int v38;
  int v39;
  _DWORD v40[6];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WebCore::FloatRect::toJSONString(a3);
  WTF::String::String((WTF::String *)&v32, ", ");
  WebCore::FloatRect::toJSONString(a4);
  WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v34, (uint64_t *)&v33, (uint64_t *)&v32, (uint64_t *)&v31, &v35);
  v6 = v31;
  v31 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v32;
  v32 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v33;
  v33 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v34;
  v34 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(NSObject **)(a1 + 32);
  v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v11)
  {
    WTF::String::utf8();
    v13 = v30[0] ? (char *)v30[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    v37 = v13;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v11 = v30[0];
    v30[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        v11 = (WTF *)WTF::fastFree(v11, v12);
      else
        --*(_DWORD *)v11;
    }
  }
  if (*(_BYTE *)a1)
  {
    v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v15 = *v14;
      if ((v15 & 1) != 0)
        break;
      v16 = __ldaxr(v14);
      if (v16 == v15)
      {
        if (!__stxr(v15 | 1, v14))
        {
          v17 = WTF::Logger::observers(v11);
          v18 = *(unsigned int *)(v17 + 12);
          if ((_DWORD)v18)
          {
            v19 = *(uint64_t **)v17;
            v26 = *(_QWORD *)v17 + 8 * v18;
            do
            {
              v20 = *v19;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v38 = 1;
              WebCore::FloatRect::toJSONString(a3);
              v39 = 0;
              WTF::String::String((WTF::String *)v40, ", ");
              v40[2] = 1;
              WebCore::FloatRect::toJSONString(a4);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v30, (uint64_t)buf, 4uLL);
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v20 + 16))(v20, a1, 0, v30);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v21);
              for (i = 56; i != -8; i -= 16)
              {
                v23 = *(WTF::StringImpl **)&buf[i];
                *(_QWORD *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2)
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v12);
                  else
                    *(_DWORD *)v23 -= 2;
                }
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v26);
          }
          v24 = __ldxr(v14);
          if (v24 == 1)
          {
            if (!__stlxr(0, v14))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1972CAA5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, WTF::StringImpl *a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,WTF::StringImpl *a22,char a23)
{
  unsigned __int8 *v23;
  int v25;

  v25 = __ldxr(v23);
  if (v25 == 1)
  {
    if (!__stlxr(0, v23))
    {
LABEL_6:
      if (a22)
      {
        if (*(_DWORD *)a22 == 2)
          WTF::StringImpl::destroy(a22, a2);
        else
          *(_DWORD *)a22 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [16]>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  NSObject *v8;
  WTF *v9;
  void *v10;
  char *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t i;
  WTF::StringImpl *v22;
  int v23;
  WTF *v24[2];
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint8_t buf[16];
  int v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v25, "manager missing");
  *(_QWORD *)buf = v26;
  v24[0] = v25;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v24, &v27);
  if (v27)
  {
    v6 = v25;
    v25 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v26;
    v26 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *(NSObject **)(a1 + 32);
    v9 = (WTF *)os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v9)
    {
      WTF::String::utf8();
      v11 = v24[0] ? (char *)v24[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v9 = v24[0];
      v24[0] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
          v9 = (WTF *)WTF::fastFree(v9, v10);
        else
          --*(_DWORD *)v9;
      }
    }
    if (*(_BYTE *)a1 && *(_BYTE *)(a1 + 16))
    {
      v12 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v13 = *v12;
        if ((v13 & 1) != 0)
          break;
        v14 = __ldaxr(v12);
        if (v14 == v13)
        {
          if (!__stxr(v13 | 1, v12))
          {
            v15 = WTF::Logger::observers(v9);
            v16 = *(unsigned int *)(v15 + 12);
            if ((_DWORD)v16)
            {
              v17 = *(uint64_t **)v15;
              v18 = *(_QWORD *)v15 + 8 * v16;
              do
              {
                v19 = *v17;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v29 = 0;
                WTF::String::String((WTF::String *)v30, "manager missing");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v24, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v19 + 16))(v19, a1, 1, v24);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, v20);
                for (i = 24; i != -8; i -= 16)
                {
                  v22 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v22)
                  {
                    if (*(_DWORD *)v22 == 2)
                      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v10);
                    else
                      *(_DWORD *)v22 -= 2;
                  }
                }
                ++v17;
              }
              while (v17 != (uint64_t *)v18);
            }
            v23 = __ldxr(v12);
            if (v23 == 1)
            {
              if (!__stlxr(0, v12))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v27;
    v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1972CAEE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  unsigned __int8 *v16;
  int v18;

  v18 = __ldxr(v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, v16))
    {
LABEL_6:
      if (a14)
      {
        if (*(_DWORD *)a14 == 2)
          WTF::StringImpl::destroy(a14, a2);
        else
          *(_DWORD *)a14 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebKit::FullScreenState,char [11]>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, uint64_t *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  NSObject *v8;
  WTF *v9;
  void *v10;
  char *v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *result;
  WTF *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint8_t buf[4];
  char *v34;
  int v35;
  _DWORD v36[4];
  _QWORD v37[3];

  v37[2] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::LogArgument<WebKit::FullScreenState>::toString((uint64_t)&v30, *a3);
  WTF::String::String((WTF::String *)&v29, ", dropping");
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v31, (uint64_t *)&v30, (uint64_t *)&v29, &v32);
  v5 = v29;
  v29 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v30;
  v30 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v31;
  v31 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(NSObject **)(a1 + 32);
  v9 = (WTF *)os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v9)
  {
    WTF::String::utf8();
    v11 = v28[0] ? (char *)v28[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    v34 = v11;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v9 = v28[0];
    v28[0] = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        v9 = (WTF *)WTF::fastFree(v9, v10);
      else
        --*(_DWORD *)v9;
    }
  }
  if (*(_BYTE *)a1)
  {
    v12 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v13 = *v12;
      if ((v13 & 1) != 0)
        break;
      v14 = __ldaxr(v12);
      if (v14 == v13)
      {
        if (!__stxr(v13 | 1, v12))
        {
          v15 = WTF::Logger::observers(v9);
          v16 = *(unsigned int *)(v15 + 12);
          if ((_DWORD)v16)
          {
            v17 = *(uint64_t **)v15;
            v18 = *(_QWORD *)v15 + 8 * v16;
            do
            {
              v19 = *v17;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v20 = *a3;
              v35 = 0;
              WTF::LogArgument<WebKit::FullScreenState>::toString((uint64_t)v36, v20);
              v36[2] = 0;
              WTF::String::String((WTF::String *)v37, ", dropping");
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v19 + 16))(v19, a1, 0, v28);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v21);
              for (i = 40; i != -8; i -= 16)
              {
                v23 = *(WTF::StringImpl **)&buf[i];
                *(_QWORD *)&buf[i] = 0;
                if (v23)
                {
                  if (*(_DWORD *)v23 == 2)
                    WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v10);
                  else
                    *(_DWORD *)v23 -= 2;
                }
              }
              ++v17;
            }
            while (v17 != (uint64_t *)v18);
          }
          v24 = __ldxr(v12);
          if (v24 == 1)
          {
            if (!__stlxr(0, v12))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v32;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1972CB328(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, WTF::StringImpl *a18, char a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a18)
      {
        if (*(_DWORD *)a18 == 2)
          WTF::StringImpl::destroy(a18, a2);
        else
          *(_DWORD *)a18 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18]>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, const char *a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  WTF *v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t i;
  WTF::StringImpl *v24;
  int v25;
  WTF *v26[2];
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint8_t buf[16];
  int v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v27, a3);
  *(_QWORD *)buf = v28;
  v26[0] = v27;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v26, &v29);
  if (v29)
  {
    v8 = v27;
    v27 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v28;
    v28 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = *(NSObject **)(a1 + 32);
    v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v11)
    {
      WTF::String::utf8();
      v13 = v26[0] ? (char *)v26[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v11 = v26[0];
      v26[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
          v11 = (WTF *)WTF::fastFree(v11, v12);
        else
          --*(_DWORD *)v11;
      }
    }
    if (*(_BYTE *)a1)
    {
      v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v15 = *v14;
        if ((v15 & 1) != 0)
          break;
        v16 = __ldaxr(v14);
        if (v16 == v15)
        {
          if (!__stxr(v15 | 1, v14))
          {
            v17 = WTF::Logger::observers(v11);
            v18 = *(unsigned int *)(v17 + 12);
            if ((_DWORD)v18)
            {
              v19 = *(uint64_t **)v17;
              v20 = *(_QWORD *)v17 + 8 * v18;
              do
              {
                v21 = *v19;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v31 = 0;
                WTF::String::String((WTF::String *)v32, a3);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v26, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v21 + 16))(v21, a1, 0, v26);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v22);
                for (i = 24; i != -8; i -= 16)
                {
                  v24 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v24)
                  {
                    if (*(_DWORD *)v24 == 2)
                      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v12);
                    else
                      *(_DWORD *)v24 -= 2;
                  }
                }
                ++v19;
              }
              while (v19 != (uint64_t *)v20);
            }
            v25 = __ldxr(v14);
            if (v25 == 1)
            {
              if (!__stlxr(0, v14))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1972CB844(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  unsigned __int8 *v16;
  int v18;

  v18 = __ldxr(v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, v16))
    {
LABEL_6:
      if (a14)
      {
        if (*(_DWORD *)a14 == 2)
          WTF::StringImpl::destroy(a14, a2);
        else
          *(_DWORD *)a14 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_1972CBDF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, WTF::StringImpl *a16)
{
  unsigned __int8 *v16;
  int v18;

  v18 = __ldxr(v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, v16))
    {
LABEL_6:
      if (a14)
      {
        if (*(_DWORD *)a14 == 2)
          WTF::StringImpl::destroy(a14, a2);
        else
          *(_DWORD *)a14 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebKit::FullScreenState>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, uint64_t *a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  WTF *v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t i;
  WTF::StringImpl *v25;
  int v26;
  WTF *v27[2];
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint8_t buf[16];
  int v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::LogArgument<WebKit::FullScreenState>::toString((uint64_t)&v28, *a3);
  v6 = v28;
  *(_QWORD *)buf = v29;
  v27[0] = v28;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v27, &v30);
  if (v30)
  {
    v28 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v8);
      else
        *(_DWORD *)v6 -= 2;
    }
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = *(NSObject **)(a1 + 32);
    v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v11)
    {
      WTF::String::utf8();
      v13 = v27[0] ? (char *)v27[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v11 = v27[0];
      v27[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
          v11 = (WTF *)WTF::fastFree(v11, v12);
        else
          --*(_DWORD *)v11;
      }
    }
    if (*(_BYTE *)a1)
    {
      v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v15 = *v14;
        if ((v15 & 1) != 0)
          break;
        v16 = __ldaxr(v14);
        if (v16 == v15)
        {
          if (!__stxr(v15 | 1, v14))
          {
            v17 = WTF::Logger::observers(v11);
            v18 = *(unsigned int *)(v17 + 12);
            if ((_DWORD)v18)
            {
              v19 = *(uint64_t **)v17;
              v20 = *(_QWORD *)v17 + 8 * v18;
              do
              {
                v21 = *v19;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v22 = *a3;
                v32 = 0;
                WTF::LogArgument<WebKit::FullScreenState>::toString((uint64_t)v33, v22);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v27, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v21 + 16))(v21, a1, 0, v27);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v23);
                for (i = 24; i != -8; i -= 16)
                {
                  v25 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v12);
                    else
                      *(_DWORD *)v25 -= 2;
                  }
                }
                ++v19;
              }
              while (v19 != (uint64_t *)v20);
            }
            v26 = __ldxr(v14);
            if (v26 == 1)
            {
              if (!__stlxr(0, v14))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v30;
    v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1972CC210(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  unsigned __int8 *v16;
  int v18;

  v18 = __ldxr(v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, v16))
    {
LABEL_6:
      if (a14)
      {
        if (*(_DWORD *)a14 == 2)
          WTF::StringImpl::destroy(a14, a2);
        else
          *(_DWORD *)a14 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Function<void ()(std::optional<WebCore::CaptureDevice>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  WTF::StringImpl *v5;
  uint64_t v7;
  char v8;
  __int128 v9;
  int v10;
  char v11;

  v2 = *a1;
  LOBYTE(v7) = 0;
  v11 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v3 = *a2;
    *a2 = 0;
    v7 = v3;
    v8 = *((_BYTE *)a2 + 8);
    v4 = *((_OWORD *)a2 + 1);
    a2[2] = 0;
    a2[3] = 0;
    v9 = v4;
    v10 = *((_DWORD *)a2 + 8);
    v11 = 1;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v7);
  return std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v7, v5);
}

void sub_1972CC500(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t result@<X0>, WTF::StringImpl **a2@<X1>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>)
{
  __int16 v5;
  int v6;
  char v7;
  __int16 v8;
  uint64_t i;
  int v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  WTF::StringImpl *v32;
  __int16 v33;
  int v34;
  char v35;
  __int16 v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  __int16 v60;
  __int16 v61;
  char v62;
  char v63;
  __int16 v64;
  int v65;
  WTF::StringImpl *v66;
  __int16 v67;
  WTF::StringImpl *v68[3];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[25];
  uint64_t v74;
  uint64_t v75;
  char v76[9];

  v12 = a2;
  v13 = result;
  v15 = *a2;
  if (*a2)
    *(_DWORD *)v15 += 2;
  v74 = 0;
  v75 = 0;
  v16 = *((unsigned int *)a2 + 5);
  if ((_DWORD)v16)
  {
    if (v16 >= 0x2AAAAAB)
    {
      __break(0xC471u);
      return result;
    }
    LODWORD(v75) = 96 * (int)v16 / 0x60u;
    v74 = WTF::fastMalloc((WTF *)(96 * v16));
    v17 = *((_DWORD *)v12 + 5);
    if (v17)
    {
      v18 = (uint64_t)v12[1];
      for (i = 88 * v17; i; i -= 88)
      {
        if (*(_BYTE *)(v18 + 80))
        {
          WebKit::WebGPU::ConvertToBackingContext::convertToBacking(v13, v18, v68);
          v10 = v73[0];
          if (v73[0])
          {
            v19 = HIDWORD(v75);
            if (HIDWORD(v75) == (_DWORD)v75)
            {
              v20 = HIDWORD(v75) + ((unint64_t)HIDWORD(v75) >> 2);
              if (v20 >= 0x10)
                v21 = v20 + 1;
              else
                v21 = 16;
              if (v21 <= (unint64_t)HIDWORD(v75) + 1)
                v22 = HIDWORD(v75) + 1;
              else
                v22 = v21;
              WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v74, v22);
              v19 = HIDWORD(v75);
            }
            std::__optional_destruct_base<WebKit::WebGPU::RenderPassColorAttachment,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::RenderPassColorAttachment>(v74 + 96 * v19, (__int128 *)v68);
            ++HIDWORD(v75);
          }
          else
          {
            *(_BYTE *)a4 = 0;
            *(_BYTE *)(a4 + 120) = 0;
          }
          if (v73[0] && (_BYTE)v72 && DWORD2(v71) != -1)
            ((void (*)(char *, char *))off_1E34CF518[DWORD2(v71)])(v76, (char *)&v69 + 8);
          if (!v10)
            goto LABEL_50;
        }
        else
        {
          v23 = HIDWORD(v75);
          if (HIDWORD(v75) == (_DWORD)v75)
          {
            v24 = HIDWORD(v75) + ((unint64_t)HIDWORD(v75) >> 2);
            if (v24 >= 0x10)
              v25 = v24 + 1;
            else
              v25 = 16;
            if (v25 <= (unint64_t)HIDWORD(v75) + 1)
              v26 = HIDWORD(v75) + 1;
            else
              v26 = v25;
            WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v74, v26);
            v23 = HIDWORD(v75);
          }
          v27 = (_BYTE *)(v74 + 96 * v23);
          *v27 = 0;
          v27[88] = 0;
          ++HIDWORD(v75);
        }
        v18 += 88;
      }
    }
  }
  if (!*((_BYTE *)v12 + 56))
  {
    v31 = 0;
    v30 = 0;
    v29 = 0;
    goto LABEL_38;
  }
  v28 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 208))(v13, *((_QWORD *)v12[3] + 1));
  if (v28)
  {
    v11 = *((_DWORD *)v12 + 8);
    LOWORD(v10) = *((_WORD *)v12 + 18);
    v8 = *((_WORD *)v12 + 19);
    v7 = *((_BYTE *)v12 + 40);
    v6 = *((_DWORD *)v12 + 11);
    v5 = *((_WORD *)v12 + 24);
    LOWORD(i) = *((_WORD *)v12 + 25);
    v29 = v28 & 0xFFFFFFFFFFFFFF00;
    v30 = v28;
    v31 = 1;
    a3 = *((_BYTE *)v12 + 52);
LABEL_38:
    v32 = v12[8];
    if (v32 && (a2 = (WTF::StringImpl **)*((_QWORD *)v32 + 1)) != 0)
    {
      v33 = v5;
      v34 = v6;
      v35 = v7;
      v66 = v15;
      v62 = v31;
      v64 = i;
      v60 = v10;
      v36 = v8;
      v37 = v29;
      i = v30;
      v38 = a3;
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 136))(v13);
      a3 = v38;
      v30 = i;
      v29 = v37;
      v8 = v36;
      LOWORD(v10) = v60;
      v31 = v62;
      LOWORD(i) = v64;
      v15 = v66;
      v7 = v35;
      v6 = v34;
      v5 = v33;
      v40 = v39 & 0xFFFFFFFFFFFFFF00;
      v41 = v39;
      v42 = 1;
    }
    else
    {
      v40 = 0;
      v41 = 0;
      v42 = 0;
    }
    if (*((_BYTE *)v12 + 88))
    {
      v43 = (unint64_t)v12[9];
      if (!v43)
      {
LABEL_48:
        v45 = 0;
        v46 = 0;
        goto LABEL_56;
      }
      a2 = *(WTF::StringImpl ***)(v43 + 8);
      if (a2)
      {
        v57 = a3;
        v58 = v30;
        v59 = v29;
        v61 = v8;
        v63 = v7;
        v65 = v6;
        v67 = v5;
        v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 136))(v13);
        if (v44)
        {
          a5 = *((double *)v12 + 10);
          v43 = v44 & 0xFFFFFFFFFFFFFF00;
          v45 = v44;
          v46 = 1;
        }
        else
        {
          v43 = 0;
          v45 = 0;
          v46 = 0;
        }
        v6 = v65;
        v5 = v67;
        v8 = v61;
        v7 = v63;
        v30 = v58;
        v29 = v59;
        a3 = v57;
LABEL_56:
        v48 = v74;
        v74 = 0;
        *(_QWORD *)&v69 = v29 | v30;
        DWORD2(v69) = v11;
        WORD6(v69) = v10;
        HIWORD(v69) = v8;
        LOBYTE(v70) = v7;
        DWORD1(v70) = v6;
        WORD4(v70) = v5;
        WORD5(v70) = i;
        BYTE12(v70) = a3;
        LOBYTE(v71) = v31;
        *((_QWORD *)&v71 + 1) = v41 | v40;
        LOBYTE(v72) = v42;
        *((_QWORD *)&v72 + 1) = v45 | v43;
        *(double *)v73 = a5;
        v73[8] = v46;
        v49 = v12[12];
        v73[24] = *((_BYTE *)v12 + 104);
        *(_QWORD *)&v73[16] = v49;
        v68[0] = 0;
        v68[1] = 0;
        *(_QWORD *)a4 = v15;
        *(_QWORD *)(a4 + 8) = v48;
        v68[2] = 0;
        v50 = v75;
        v75 = 0;
        *(_QWORD *)(a4 + 16) = v50;
        v51 = v69;
        *(_OWORD *)(a4 + 40) = v70;
        *(_OWORD *)(a4 + 24) = v51;
        v52 = v71;
        v53 = v72;
        v54 = *(_OWORD *)v73;
        *(_OWORD *)(a4 + 97) = *(_OWORD *)&v73[9];
        *(_OWORD *)(a4 + 88) = v54;
        *(_OWORD *)(a4 + 72) = v53;
        *(_OWORD *)(a4 + 56) = v52;
        *(_BYTE *)(a4 + 120) = 1;
        WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68[1], a2);
        v56 = v68[0];
        v68[0] = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
            WTF::StringImpl::destroy(v56, v55);
          else
            *(_DWORD *)v56 -= 2;
        }
        return WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v55);
      }
    }
    v43 = 0;
    goto LABEL_48;
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 120) = 0;
LABEL_50:
  result = WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, a2);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      return WTF::StringImpl::destroy(v15, v47);
    else
      *(_DWORD *)v15 -= 2;
  }
  return result;
}

uint64_t WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  WTF::StringImpl *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  __int128 v42;
  int v43;
  WTF *v44;
  uint64_t v45;
  unsigned int *v46;
  WTF::StringImpl *v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  char v52;
  WTF::StringImpl *v53;
  unsigned int v54;
  unsigned int v55;
  __int16 v56;
  char v57;
  int v58;
  __int16 v59;
  __int16 v60;
  char v61;
  WTF::StringImpl *v62[2];
  uint64_t v63;
  WTF *v64;
  _BYTE v65[21];
  unsigned __int8 v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  __int16 v72;
  char v73;
  WTF::StringImpl *v74;
  uint64_t v75;

  v7 = result;
  v9 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v9 += 2;
  v74 = 0;
  v75 = 0;
  v10 = *(_DWORD *)(a2 + 20);
  if (v10)
  {
    if (v10 >= 0x2E8BA2F)
    {
      __break(0xC471u);
      return result;
    }
    v11 = 88 * v10;
    v12 = WTF::fastMalloc((WTF *)(88 * v10));
    LODWORD(v75) = (v11 & 0xFFFFFFF8) / 0x58;
    v74 = (WTF::StringImpl *)v12;
    v13 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v13)
    {
      v14 = v12;
      LODWORD(v4) = 0;
      v15 = *(_QWORD *)(a2 + 8);
      v16 = 96 * v13;
      v3 = 88;
      do
      {
        if (*(_BYTE *)(v15 + 88))
        {
          WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(v7, v15, v62);
          if (!(_BYTE)v69)
          {
            *(_BYTE *)a3 = 0;
            *(_BYTE *)(a3 + 112) = 0;
            std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62, v17);
            goto LABEL_84;
          }
          if ((_DWORD)v4 == (_DWORD)v75)
          {
            v18 = v4 + ((unint64_t)v4 >> 2);
            if (v18 >= 0x10)
              v19 = v18 + 1;
            else
              v19 = 16;
            if (v19 <= (unint64_t)v4 + 1)
              v20 = v4 + 1;
            else
              v20 = v19;
            WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v74, v20);
            v21 = HIDWORD(v75);
            v14 = (uint64_t)v74;
            std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::RenderPassColorAttachment>((uint64_t)v74 + 88 * HIDWORD(v75), (uint64_t *)v62);
          }
          else
          {
            std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::__optional_destruct_base[abi:sn180100]<WebCore::WebGPU::RenderPassColorAttachment>(v14 + 88 * v4, (uint64_t *)v62);
            v21 = HIDWORD(v75);
          }
          v4 = (v21 + 1);
          HIDWORD(v75) = v4;
          std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62, v22);
        }
        else
        {
          if ((_DWORD)v4 == (_DWORD)v75)
          {
            v23 = v4 + ((unint64_t)v4 >> 2);
            if (v23 >= 0x10)
              v24 = v23 + 1;
            else
              v24 = 16;
            if (v24 <= (unint64_t)v4 + 1)
              v25 = v4 + 1;
            else
              v25 = v24;
            WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v74, v25);
            v26 = HIDWORD(v75);
            v14 = (uint64_t)v74;
            v27 = (char *)v74 + 88 * HIDWORD(v75);
            *v27 = 0;
            v27[80] = 0;
            v4 = (v26 + 1);
          }
          else
          {
            v28 = (_BYTE *)(v14 + 88 * v4);
            *v28 = 0;
            v28[80] = 0;
            v4 = (HIDWORD(v75) + 1);
          }
          HIDWORD(v75) = v4;
        }
        v15 += 96;
        v16 -= 96;
      }
      while (v16);
    }
  }
  if (!*(_BYTE *)(a2 + 56))
    goto LABEL_37;
  v29 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 192))(v7, *(_QWORD *)(a2 + 24));
  if (v29)
  {
    v30 = v29;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v29 + 16), v29);
    v31 = *(unsigned int **)(v30 + 16);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
    v33 = 0;
    v5 = *(_DWORD *)(a2 + 32);
    v3 = *(_WORD *)(a2 + 36);
    v56 = *(_WORD *)(a2 + 38);
    v57 = *(_BYTE *)(a2 + 40);
    v58 = *(_DWORD *)(a2 + 44);
    v59 = *(_WORD *)(a2 + 48);
    v60 = *(_WORD *)(a2 + 50);
    v61 = *(_BYTE *)(a2 + 52);
    v72 = (__int16)v62[0];
    v73 = BYTE2(v62[0]);
LABEL_38:
    if (*(_BYTE *)(a2 + 72))
    {
      v34 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 112))(v7, *(_QWORD *)(a2 + 64));
      if (!v34)
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 112) = 0;
LABEL_80:
        if (v31)
          v52 = v33;
        else
          v52 = 1;
        if ((v52 & 1) == 0)
        {
          do
          {
            v54 = __ldaxr(v31);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v31));
          if (!v55)
          {
            atomic_store(1u, v31);
            WTF::fastFree((WTF *)v31, (void *)a2);
          }
        }
        goto LABEL_84;
      }
    }
    else
    {
      v34 = 0;
    }
    if (*(_BYTE *)(a2 + 96))
    {
      v35 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 112))(v7, *(_QWORD *)(a2 + 80));
      v36 = v35;
      if (v35)
      {
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v35 + 16), v35);
        v36 = *(_QWORD *)(v36 + 16);
        if (v36)
        {
          do
            v37 = __ldaxr((unsigned int *)v36);
          while (__stlxr(v37 + 1, (unsigned int *)v36));
        }
        v38 = 0;
        v4 = *(_QWORD *)(a2 + 88);
        goto LABEL_49;
      }
    }
    else
    {
      v36 = 0;
    }
    v38 = 1;
LABEL_49:
    v62[0] = v9;
    v62[1] = v74;
    v39 = v75;
    v74 = 0;
    v75 = 0;
    v63 = v39;
    LOBYTE(v64) = 0;
    v66 = 0;
    if ((v33 & 1) == 0)
    {
      v64 = (WTF *)v31;
      *(_DWORD *)v65 = v5;
      *(_WORD *)&v65[4] = v3;
      *(_WORD *)&v65[6] = v56;
      v65[8] = v57;
      *(_WORD *)&v65[9] = v72;
      v65[11] = v73;
      *(_DWORD *)&v65[12] = v58;
      *(_WORD *)&v65[16] = v59;
      *(_WORD *)&v65[18] = v60;
      v65[20] = v61;
      v66 = 1;
      v31 = 0;
    }
    if (v34)
    {
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v34 + 16), v34);
      v40 = *(unsigned int **)(v34 + 16);
      if (v40)
      {
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 + 1, v40));
      }
    }
    else
    {
      v40 = 0;
    }
    v67 = v40;
    LOBYTE(v68) = 0;
    v70 = 0;
    if ((v38 & 1) == 0)
    {
      v68 = v36;
      v69 = v4;
      v70 = 1;
      v36 = 0;
    }
    *(_QWORD *)&v71 = *(_QWORD *)(a2 + 104);
    BYTE8(v71) = *(_BYTE *)(a2 + 112);
    v42 = *(_OWORD *)v62;
    v62[0] = 0;
    v62[1] = 0;
    *(_OWORD *)a3 = v42;
    *(_QWORD *)&v42 = v63;
    v63 = 0;
    *(_QWORD *)(a3 + 16) = v42;
    *(_BYTE *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 56) = 0;
    v43 = v66;
    if (v66)
    {
      v44 = v64;
      v64 = 0;
      *(_QWORD *)(a3 + 24) = v44;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v65;
      *(_QWORD *)(a3 + 45) = *(_QWORD *)&v65[13];
      *(_BYTE *)(a3 + 56) = 1;
    }
    *(_QWORD *)(a3 + 64) = v40;
    *(_BYTE *)(a3 + 72) = 0;
    *(_BYTE *)(a3 + 88) = 0;
    if (v38)
    {
      *(_OWORD *)(a3 + 96) = v71;
      *(_BYTE *)(a3 + 112) = 1;
    }
    else
    {
      v45 = v69;
      *(_QWORD *)(a3 + 72) = v68;
      *(_QWORD *)(a3 + 80) = v45;
      *(_BYTE *)(a3 + 88) = 1;
      *(_OWORD *)(a3 + 96) = v71;
      *(_BYTE *)(a3 + 112) = 1;
      v68 = 0;
    }
    v67 = 0;
    if (v43)
    {
      v46 = (unsigned int *)v64;
      v64 = 0;
      if (v46)
      {
        do
        {
          v48 = __ldaxr(v46);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v46));
        if (!v49)
        {
          atomic_store(1u, v46);
          WTF::fastFree((WTF *)v46, (void *)a2);
        }
      }
    }
    WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62[1], (void *)a2);
    v47 = v62[0];
    v62[0] = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v47 -= 2;
    }
    if (v36)
      v50 = v38;
    else
      v50 = 1;
    if ((v50 & 1) == 0)
    {
      do
        v51 = __ldaxr((unsigned int *)v36);
      while (__stlxr(v51 - 1, (unsigned int *)v36));
      if (v51 == 1)
      {
        atomic_store(1u, (unsigned int *)v36);
        WTF::fastFree((WTF *)v36, (void *)a2);
      }
    }
    v9 = 0;
    goto LABEL_80;
  }
  if (!*(_BYTE *)(a2 + 56))
  {
LABEL_37:
    v31 = 0;
    v33 = 1;
    goto LABEL_38;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 112) = 0;
LABEL_84:
  result = WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, (void *)a2);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      return WTF::StringImpl::destroy(v9, v53);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

{
  uint64_t v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;

  v4 = result;
  v6 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v6 += 2;
  v31 = 0;
  v32 = 0;
  v7 = *(unsigned int *)(a2 + 28);
  if (!(_DWORD)v7)
    goto LABEL_18;
  if (v7 >> 28)
  {
    __break(0xC471u);
    return result;
  }
  LODWORD(v32) = *(_DWORD *)(a2 + 28);
  v31 = WTF::fastMalloc((WTF *)(16 * v7));
  v8 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v8)
  {
    v9 = 16 * v8;
    v10 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v11 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 104))(v4, *v10);
      if (!v11)
        break;
      v12 = (WTF::StringImpl *)*(v10 - 1);
      if (v12)
        *(_DWORD *)v12 += 2;
      v28 = v12;
      v29 = v11;
      v13 = HIDWORD(v32);
      if (HIDWORD(v32) == (_DWORD)v32)
      {
        v14 = (_QWORD *)WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v31, HIDWORD(v32) + 1, (unint64_t)&v28);
        v13 = HIDWORD(v32);
        v15 = (_QWORD *)(v31 + 16 * HIDWORD(v32));
        v16 = *v14;
        *v14 = 0;
        v17 = (WTF::StringImpl **)(v14 + 1);
        *v15 = v16;
        v18 = (WTF::StringImpl **)(v15 + 1);
      }
      else
      {
        v19 = (WTF::StringImpl **)(v31 + 16 * HIDWORD(v32));
        v28 = 0;
        *v19 = v12;
        v18 = v19 + 1;
        v17 = &v29;
      }
      *v18 = *v17;
      HIDWORD(v32) = v13 + 1;
      v20 = v28;
      v28 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v20 -= 2;
      }
      v10 += 2;
      v9 -= 16;
      if (!v9)
        goto LABEL_18;
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    result = WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, (void *)a2);
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        return WTF::StringImpl::destroy(v6, v27);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  else
  {
LABEL_18:
    v21 = *(_DWORD **)(a2 + 8);
    if (v21)
      *v21 += 2;
    v22 = v31;
    v31 = 0;
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v21;
    v29 = 0;
    v30[0] = 0;
    v28 = 0;
    *(_QWORD *)(a3 + 16) = v22;
    v30[1] = 0;
    v23 = v32;
    v32 = 0;
    *(_QWORD *)(a3 + 24) = v23;
    *(_BYTE *)(a3 + 32) = 1;
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, (void *)a2);
    v25 = v29;
    v29 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v28;
    v28 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v24);
      else
        *(_DWORD *)v26 -= 2;
    }
    return WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v24);
  }
  return result;
}

double WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  double result;
  __int128 v6;
  double v7;
  uint64_t v8;

  v4 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v4 += 2;
  *(_QWORD *)&v6 = v4;
  WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v6 + 8, a1 + 8);
  LOWORD(v8) = *(_WORD *)(a1 + 24);
  HIDWORD(v8) = *(_DWORD *)(a1 + 28);
  *(_OWORD *)a2 = v6;
  result = v7;
  *(double *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

WTF::StringImpl *WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(WebKit::WebGPU::ConvertToBackingContext *this@<X0>, const WebCore::WebGPU::RenderPipelineDescriptor *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *result;
  void *v10;
  __int16 v11;
  __int16 v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  unint64_t v28;
  WTF *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF *v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  int v40;
  WTF::StringImpl *v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  unint64_t v53;
  WTF::StringImpl *v54;
  __int128 v55;
  __int128 v56;
  WTF::StringImpl *v57;
  WTF *v58;
  uint64_t v59;
  WTF *v60;
  unint64_t v61;
  void *v62;
  void *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  char v70;
  __int16 v71;
  __int16 v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  WTF *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE v82[69];
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  char v85;
  WTF *v86;
  uint64_t v87;
  WTF *v88;
  unint64_t v89;
  char v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  char v93;
  WTF *v94;
  uint64_t v95;
  WTF *v96;
  unint64_t v97;
  unsigned __int8 v98;
  __int16 v99;
  char v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  unsigned __int8 v103;
  WTF *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;

  result = (WTF::StringImpl *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking((uint64_t)this, (uint64_t)a2, (uint64_t)&v109);
  if (!v111)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 208) = 0;
    return result;
  }
  result = WebKit::WebGPU::ConvertToBackingContext::convertToBacking((uint64_t)this, (uint64_t)a2 + 16, (uint64_t)&v101);
  if (v108)
  {
    if (*((_BYTE *)a2 + 78))
    {
      v16 = *((_BYTE *)a2 + 72);
      v3 = *(unsigned int *)((char *)a2 + 73) | ((unint64_t)*((unsigned __int8 *)a2 + 77) << 32);
      v17 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    if (*((_BYTE *)a2 + 124))
    {
      v4 = *(_QWORD *)((char *)a2 + 85);
      v18 = *((_BYTE *)a2 + 80);
      v11 = *(_WORD *)((char *)a2 + 81);
      v12 = *(_WORD *)((char *)a2 + 83);
      v13 = ((unint64_t)*((unsigned int *)a2 + 24) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 100) << 56);
      v15 = ((unint64_t)*((unsigned int *)a2 + 26) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 108) << 56);
      v14 = *((_DWORD *)a2 + 28);
      v5 = *(_QWORD *)((char *)a2 + 116);
      v19 = 1;
    }
    else
    {
      v19 = 0;
      v18 = 0;
    }
    v20 = *((unsigned __int8 *)a2 + 140);
    v21 = *((_QWORD *)a2 + 16);
    if (*((_BYTE *)a2 + 140))
      v22 = *((unsigned __int8 *)a2 + 136) | 0x100000000;
    else
      v22 = 0;
    LOBYTE(v91) = 0;
    v98 = 0;
    v23 = *((unsigned __int8 *)a2 + 200);
    if (!*((_BYTE *)a2 + 200))
      goto LABEL_37;
    v67 = v15;
    v68 = v14;
    v69 = v13;
    v70 = v19;
    v71 = v12;
    v72 = v11;
    WebKit::WebGPU::ConvertToBackingContext::convertToBacking((uint64_t)this, (uint64_t)a2 + 144, (uint64_t)&v73);
    if (v98 == v80)
    {
      if (v98)
      {
        v91 = v73;
        std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::String,false>>((uint64_t)&v92, (uint64_t)&v74);
        if (HIDWORD(v95))
          WTF::VectorDestructor<true,WebCore::SpeechRecognitionAlternativeData>::destruct(v94, (WTF *)((char *)v94 + 16 * HIDWORD(v95)));
        v25 = v94;
        if (v94)
        {
          v94 = 0;
          LODWORD(v95) = 0;
          WTF::fastFree(v25, v24);
        }
        v94 = v76;
        v26 = v77;
        v76 = 0;
        v77 = 0;
        v95 = v26;
        v27 = v96;
        if (v96)
        {
          v96 = 0;
          LODWORD(v97) = 0;
          WTF::fastFree(v27, v24);
        }
        v96 = v78;
        v28 = v79;
        v78 = 0;
        v79 = 0;
        v97 = v28;
      }
    }
    else if (v98)
    {
      v29 = v96;
      if (v96)
      {
        v96 = 0;
        LODWORD(v97) = 0;
        WTF::fastFree(v29, v24);
      }
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v94, v24);
      if (v93)
      {
        v30 = v92;
        v92 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v24);
          else
            *(_DWORD *)v30 -= 2;
        }
      }
      v98 = 0;
    }
    else
    {
      v91 = v73;
      LOBYTE(v92) = 0;
      v93 = 0;
      if ((_BYTE)v75)
      {
        v31 = v74;
        v74 = 0;
        v92 = v31;
        v93 = 1;
      }
      v32 = v76;
      v76 = 0;
      v94 = v32;
      v33 = v77;
      v77 = 0;
      v95 = v33;
      v34 = v78;
      v78 = 0;
      v96 = v34;
      v35 = v79;
      v79 = 0;
      v97 = v35;
      v98 = 1;
    }
    result = (WTF::StringImpl *)std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v73, v24);
    v12 = v71;
    v11 = v72;
    v19 = v70;
    v13 = v69;
    v14 = v68;
    v15 = v67;
    if (!v98)
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 208) = 0;
    }
    else
    {
LABEL_37:
      v37 = v109;
      v38 = v110;
      v109 = 0;
      v73 = v37;
      v74 = v110;
      if (!v108)
      {
        __break(1u);
        return result;
      }
      v39 = v101;
      v75 = v101;
      LOBYTE(v76) = 0;
      LOBYTE(v77) = 0;
      v40 = v103;
      if (v103)
      {
        v41 = v102;
        v102 = 0;
        v76 = v41;
        LOBYTE(v77) = 1;
      }
      v42 = v104;
      v104 = 0;
      v78 = v42;
      v43 = v105;
      v44 = HIDWORD(v105);
      v105 = 0;
      v79 = __PAIR64__(v44, v43);
      v45 = v106;
      v106 = 0;
      v80 = v45;
      v46 = v107;
      v47 = HIDWORD(v107);
      v107 = 0;
      v81 = __PAIR64__(v47, v46);
      v82[0] = v16;
      *(_DWORD *)&v82[1] = v3;
      v82[5] = BYTE4(v3);
      v82[6] = v17;
      v82[8] = v18;
      *(_WORD *)&v82[9] = v11;
      *(_WORD *)&v82[11] = v12;
      *(_QWORD *)&v82[13] = v4;
      *(_QWORD *)&v82[21] = v13;
      *(_QWORD *)&v82[29] = v15;
      *(_WORD *)&v82[37] = v99;
      v82[39] = v100;
      *(_DWORD *)&v82[40] = v14;
      *(_QWORD *)&v82[44] = v5;
      v82[52] = v19;
      if (v20)
        v48 = v21;
      else
        v48 = 0;
      *(_QWORD *)&v82[56] = v48;
      v82[68] = BYTE4(v22);
      *(_DWORD *)&v82[64] = v22;
      LOBYTE(v83) = 0;
      v90 = 0;
      if (v23)
      {
        v83 = v91;
        LOBYTE(v84) = 0;
        v85 = 0;
        if (v93)
        {
          v49 = v92;
          v92 = 0;
          v84 = v49;
          v85 = 1;
        }
        v50 = v94;
        v94 = 0;
        v86 = v50;
        v51 = v95;
        v95 = 0;
        v87 = v51;
        v52 = v96;
        v96 = 0;
        v88 = v52;
        v53 = v97;
        v97 = 0;
        v89 = v53;
        v90 = 1;
      }
      v73 = 0;
      *(_QWORD *)a3 = v37;
      *(_QWORD *)(a3 + 8) = v38;
      *(_QWORD *)(a3 + 16) = v39;
      *(_BYTE *)(a3 + 24) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      if (v40)
      {
        v54 = v76;
        v76 = 0;
        *(_QWORD *)(a3 + 24) = v54;
        *(_BYTE *)(a3 + 32) = 1;
      }
      v79 = 0;
      v81 = 0;
      v55 = *(_OWORD *)v82;
      *(_OWORD *)(a3 + 88) = *(_OWORD *)&v82[16];
      v56 = *(_OWORD *)&v82[48];
      *(_OWORD *)(a3 + 104) = *(_OWORD *)&v82[32];
      *(_OWORD *)(a3 + 120) = v56;
      v78 = 0;
      *(_QWORD *)(a3 + 40) = v42;
      *(_DWORD *)(a3 + 48) = v43;
      *(_DWORD *)(a3 + 52) = v44;
      v80 = 0;
      *(_QWORD *)(a3 + 56) = v45;
      *(_DWORD *)(a3 + 64) = v46;
      *(_DWORD *)(a3 + 68) = v47;
      *(_QWORD *)(a3 + 133) = *(_QWORD *)&v82[61];
      *(_OWORD *)(a3 + 72) = v55;
      *(_BYTE *)(a3 + 144) = 0;
      *(_BYTE *)(a3 + 200) = 0;
      if (v23)
      {
        *(_QWORD *)(a3 + 144) = v83;
        *(_BYTE *)(a3 + 152) = 0;
        *(_BYTE *)(a3 + 160) = 0;
        if (v85)
        {
          v57 = v84;
          v84 = 0;
          *(_QWORD *)(a3 + 152) = v57;
          *(_BYTE *)(a3 + 160) = 1;
        }
        v58 = v86;
        v86 = 0;
        *(_QWORD *)(a3 + 168) = v58;
        v59 = v87;
        v87 = 0;
        *(_QWORD *)(a3 + 176) = v59;
        v60 = v88;
        v88 = 0;
        *(_QWORD *)(a3 + 184) = v60;
        v61 = v89;
        v89 = 0;
        *(_QWORD *)(a3 + 192) = v61;
        *(_BYTE *)(a3 + 200) = 1;
      }
      *(_BYTE *)(a3 + 208) = 1;
      std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v83, v82);
      WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v80, v62);
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, v63);
      if ((_BYTE)v77)
      {
        v64 = v76;
        v76 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, v36);
          else
            *(_DWORD *)v64 -= 2;
        }
      }
      v65 = v73;
      v73 = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, v36);
        else
          *(_DWORD *)v65 -= 2;
      }
    }
    std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v91, v36);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 208) = 0;
  }
  std::__optional_destruct_base<WebKit::WebGPU::VertexState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v101, v10);
  result = v109;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v109, v66);
    else
      *(_DWORD *)v109 -= 2;
  }
  return result;
}

uint64_t WTF::Vector<std::optional<WebCore::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x2E8BA2F)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 88 * a2;
      result = WTF::fastMalloc((WTF *)(88 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x58;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = 0;
        v9 = 88 * v4;
        do
        {
          v10 = (char *)v3 + v8;
          v11 = v7 + v8;
          *(_BYTE *)v11 = 0;
          *(_BYTE *)(v11 + 80) = 0;
          if (*((_BYTE *)v3 + v8 + 80))
          {
            v12 = *(_QWORD *)v10;
            *(_QWORD *)v10 = 0;
            *(_QWORD *)v11 = v12;
            *(_QWORD *)(v11 + 8) = *((_QWORD *)v10 + 1);
            v13 = *((_QWORD *)v10 + 2);
            *((_QWORD *)v10 + 2) = 0;
            *(_QWORD *)(v11 + 16) = v13;
            *(_BYTE *)(v11 + 24) = 0;
            *(_BYTE *)(v11 + 64) = 0;
            if (v10[64])
            {
              *(_DWORD *)(v7 + v8 + 56) = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::ColorDict>,(std::__variant_detail::_Trait)1>>(v11 + 24, (uint64_t)v3 + v8 + 24);
              *(_BYTE *)(v11 + 64) = 1;
            }
            *(_WORD *)(v7 + v8 + 72) = *(_WORD *)((char *)v3 + v8 + 72);
            *(_BYTE *)(v11 + 80) = 1;
          }
          result = std::__optional_destruct_base<WebCore::WebGPU::RenderPassColorAttachment,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v3 + v8, v6);
          v8 += 88;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<std::optional<WebCore::WebGPU::TextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _WORD *v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  __int16 v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if ((v3 & 0x80000000) == 0)
  {
    v5 = (_WORD *)WTF::fastMalloc((WTF *)(2 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(__int16 **)a2;
      v8 = 2 * v6;
      do
      {
        v9 = *v7++;
        *v5++ = v9;
        v8 -= 2;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void WebKit::UserMediaPermissionRequestProxy::~UserMediaPermissionRequestProxy(WebKit::UserMediaPermissionRequestProxy *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)this = &off_1E34D26F0;
  v3 = *((_QWORD *)this + 262);
  *((_QWORD *)this + 262) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 261);
  *((_QWORD *)this + 261) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 2032, a2);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1816, v6);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1760, v7);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1704, v8);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 1648, v9);
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 1064, v10);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 848, v11);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 792, v12);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 736, v13);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 680, v14);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, v15);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, v16);
  v18 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v18)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v18, v17);
  v19 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v19)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v19, v17);
}

{
  WebKit::UserMediaPermissionRequestProxy::~UserMediaPermissionRequestProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::UserMediaPermissionRequestProxyMac::~UserMediaPermissionRequestProxyMac(WebKit::UserMediaPermissionRequestProxyMac *this, WTF::StringImpl *a2)
{
  WebKit::UserMediaPermissionRequestProxy::~UserMediaPermissionRequestProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::UserMediaPermissionRequestProxyMac::invalidate(WebKit::UserMediaPermissionRequestProxyMac *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_BYTE *)this + 2104))
  {
    {
      LOBYTE(WebKit::DisplayCaptureSessionManager::singleton(void)::manager) = 0;
      byte_1EE341DD0 = 0;
      dword_1EE341DD4 = 0;
    }
    v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 64) + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    CFRelease(*(CFTypeRef *)(v3 + 8));
    *((_BYTE *)this + 2104) = 0;
  }
  *((_QWORD *)this + 2) = 0;
  v4 = *((_QWORD *)this + 262);
  if (v4)
  {
    *((_QWORD *)this + 262) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

void WebKit::UserMediaPermissionRequestProxyMac::promptForGetDisplayMedia(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    *(_BYTE *)(a1 + 2104) = 1;
    {
      LOBYTE(WebKit::DisplayCaptureSessionManager::singleton(void)::manager) = 0;
      byte_1EE341DD0 = 0;
      dword_1EE341DD4 = 0;
    }
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8);
    if (v5)
      v6 = v5 - 16;
    else
      v6 = 0;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v7 = *(_QWORD *)(a1 + 72);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E34CF578;
    v8[1] = a1;
    v10 = v8;
    WebKit::DisplayCaptureSessionManager::promptForGetDisplayMedia((WebCore::MockRealtimeMediaSourceCenter *)&WebKit::DisplayCaptureSessionManager::singleton(void)::manager, a2, v6, v7 + 8, (uint64_t *)&v10);
    v9 = (uint64_t)v10;
    v10 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
}

void sub_1972CDEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  CFRelease(*(CFTypeRef *)(v10 + 8));
  _Unwind_Resume(a1);
}

uint64_t WebKit::UserMediaPermissionRequestProxyMac::canRequestDisplayCapturePermission(WebKit::UserMediaPermissionRequestProxyMac *this, uint64_t a2, const WTF::StringImpl *a3)
{
  WebKit::UserMediaPermissionRequestProxyMac *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = this;
  {
    if (byte_1EE341DD0)
    {
      v4 = *((_QWORD *)this + 2);
      if (!v4)
        return 0;
LABEL_8:
      if (dword_1EE341DD4)
        goto LABEL_18;
      goto LABEL_11;
    }
  }
  else
  {
    LOBYTE(WebKit::DisplayCaptureSessionManager::singleton(void)::manager) = 0;
    byte_1EE341DD0 = 0;
    dword_1EE341DD4 = 0;
  }
  this = (WebKit::UserMediaPermissionRequestProxyMac *)WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(this);
  v4 = *((_QWORD *)v3 + 2);
  if ((_DWORD)this)
  {
    if (v4)
      goto LABEL_8;
    return 0;
  }
  if (!v4)
    return 0;
LABEL_11:
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 224);
  {
    WebKit::WebPreferencesKey::requireUAGetDisplayMediaPromptKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requireUAGetDisplayMediaPromptKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requireUAGetDisplayMediaPromptKey(void)::$_0::operator() const(void)::impl;
  }
  this = (WebKit::UserMediaPermissionRequestProxyMac *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requireUAGetDisplayMediaPromptKey(void)::key, a3);
  if ((this & 1) != 0)
    return 0;
LABEL_18:
  {
    LOBYTE(WebKit::DisplayCaptureSessionManager::singleton(void)::manager) = 0;
    byte_1EE341DD0 = 0;
    dword_1EE341DD4 = 0;
LABEL_20:
    result = WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(this);
    if (!(_DWORD)result)
      return result;
    return dword_1EE341DD4 == 1;
  }
  if (!byte_1EE341DD0)
    goto LABEL_20;
  return dword_1EE341DD4 == 1;
}

WebCore::IOSurface *WebKit::ViewSnapshot::create@<X0>(WebCore::IOSurface **a1@<X0>, WebKit::ViewSnapshot **a2@<X8>)
{
  WebKit::ViewSnapshot *v4;
  WebCore::IOSurface *v5;
  WebCore::IOSurface *result;
  WTF *v7;
  void *v8;
  WebCore::IOSurface *v9;

  v4 = (WebKit::ViewSnapshot *)WTF::fastMalloc((WTF *)0x58);
  v5 = *a1;
  *a1 = 0;
  v9 = v5;
  *a2 = WebKit::ViewSnapshot::ViewSnapshot(v4, (uint64_t *)&v9);
  result = v9;
  if (v9)
  {
    WebCore::IOSurface::~IOSurface(v9);
    return (WebCore::IOSurface *)WTF::fastFree(v7, v8);
  }
  return result;
}

WebKit::ViewSnapshot *WebKit::ViewSnapshot::ViewSnapshot(WebKit::ViewSnapshot *a1, uint64_t *a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = 1;
  *((_QWORD *)a1 + 1) = 0;
  v3 = *a2;
  *a2 = 0;
  *((_QWORD *)a1 + 2) = v3;
  *(_OWORD *)((char *)a1 + 40) = 0u;
  *(_OWORD *)((char *)a1 + 56) = 0u;
  *(_OWORD *)((char *)a1 + 68) = 0u;
  if (v3)
  {
    {
      byte_1ECE738C8 = 0;
      WebKit::ViewSnapshotStore::singleton(void)::store = 0uLL;
      *(_OWORD *)&qword_1ECE738B8 = 0uLL;
    }
    WebKit::ViewSnapshotStore::didAddImageToSnapshot((WebKit::ViewSnapshotStore *)&WebKit::ViewSnapshotStore::singleton(void)::store, a1);
  }
  return a1;
}

unsigned int *WebKit::ViewSnapshot::setSurface(WebCore::IOSurface **this, WebCore::IOSurface **a2)
{
  WebCore::IOSurface *v4;

  v4 = *a2;
  if (!v4)
    return (unsigned int *)WebKit::ViewSnapshot::clearImage((WebCore::IOSurface *)this);
  *a2 = 0;
  std::unique_ptr<WebCore::IOSurface>::reset[abi:sn180100](this + 2, v4);
  {
    byte_1ECE738C8 = 0;
    WebKit::ViewSnapshotStore::singleton(void)::store = 0u;
    *(_OWORD *)&qword_1ECE738B8 = 0u;
  }
  return WebKit::ViewSnapshotStore::didAddImageToSnapshot((WebKit::ViewSnapshotStore *)&WebKit::ViewSnapshotStore::singleton(void)::store, (WebKit::ViewSnapshot *)this);
}

WebCore::IOSurface *WebKit::ViewSnapshot::clearImage(WebCore::IOSurface *this)
{
  WebCore::IOSurface **v1;

  v1 = (WebCore::IOSurface **)((char *)this + 16);
  if (*((_QWORD *)this + 2))
  {
    {
      byte_1ECE738C8 = 0;
      WebKit::ViewSnapshotStore::singleton(void)::store = 0u;
      *(_OWORD *)&qword_1ECE738B8 = 0u;
    }
    WebKit::ViewSnapshotStore::willRemoveImageFromSnapshot((WebKit::ViewSnapshotStore *)&WebKit::ViewSnapshotStore::singleton(void)::store, this);
    return std::unique_ptr<WebCore::IOSurface>::reset[abi:sn180100](v1, 0);
  }
  return this;
}

uint64_t WebKit::ViewSnapshot::setVolatile(WebKit::ViewSnapshot *this)
{
  WebCore::IOSurface *v2;

  {
    if (byte_1ECE738C8)
      return 0;
  }
  else
  {
    byte_1ECE738C8 = 0;
    WebKit::ViewSnapshotStore::singleton(void)::store = 0u;
    *(_OWORD *)&qword_1ECE738B8 = 0u;
  }
  v2 = (WebCore::IOSurface *)*((_QWORD *)this + 2);
  if (v2)
    return WebCore::IOSurface::setVolatile(v2);
  else
    return 1;
}

uint64_t WebKit::ViewSnapshot::asLayerContents(WebKit::ViewSnapshot *this)
{
  if (!*((_QWORD *)this + 2))
    return 0;
  if (WebKit::ViewSnapshot::setVolatile(this))
  {
    WebKit::ViewSnapshot::clearImage(this);
    return 0;
  }
  return *(_QWORD *)(*((_QWORD *)this + 2) + 48);
}

void WebKit::ViewSnapshot::asImageForTesting(WebKit::ViewSnapshot *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::IOSurface *v3;
  CGContext *cf;

  v3 = (WebCore::IOSurface *)*((_QWORD *)this + 2);
  if (v3)
  {
    WebCore::IOSurface::createPlatformContext(v3);
    WebCore::IOSurface::createImage(*((WebCore::IOSurface **)this + 2), cf);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1972CE2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t API::ObjectImpl<(API::Object::Type)107>::type()
{
  return 107;
}

uint64_t WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::CaptureDevice>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 40 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::CaptureDevice>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[3];
      v3[3] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = v3[2];
      v3[2] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 5;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

WebCore::IOSurface *std::unique_ptr<WebCore::IOSurface>::reset[abi:sn180100](WebCore::IOSurface **a1, WebCore::IOSurface *a2)
{
  WebCore::IOSurface *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebCore::IOSurface::~IOSurface(result);
    return (WebCore::IOSurface *)WTF::fastFree(v4, v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxyMac::promptForGetDisplayMedia(WebKit::UserMediaPermissionRequestProxy::UserMediaDisplayCapturePromptType)::$_0,void,std::optional<WebCore::CaptureDevice>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CF578;
  a1[1] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxyMac::promptForGetDisplayMedia(WebKit::UserMediaPermissionRequestProxy::UserMediaDisplayCapturePromptType)::$_0,void,std::optional<WebCore::CaptureDevice>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CF578;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

id WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxyMac::promptForGetDisplayMedia(WebKit::UserMediaPermissionRequestProxy::UserMediaDisplayCapturePromptType)::$_0,void,std::optional<WebCore::CaptureDevice>>::call(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  char v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebKit::UserMediaPermissionRequestProxy *v15;
  id result;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  char v22;
  uint64_t v23[2];
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  LOBYTE(v17) = 0;
  v22 = 0;
  if (!*(_BYTE *)(a2 + 40))
  {
    v11 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)(v11 + 2104) = 0;
    WebKit::UserMediaPermissionRequestProxy::deny((_QWORD *)v11, 5);
    return (id)std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17, v12);
  }
  v3 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v17 = v3;
  v4 = *(_BYTE *)(a2 + 8);
  v18 = v4;
  v6 = *(WTF::StringImpl **)(a2 + 16);
  v5 = *(WTF::StringImpl **)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v19 = v6;
  v20 = v5;
  v21 = *(_DWORD *)(a2 + 32);
  v22 = 1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 2104) = 0;
  if (v3)
    *(_DWORD *)v3 += 2;
  v24 = v3;
  v25 = v4;
  if (v6)
    *(_DWORD *)v6 += 2;
  v26 = v6;
  if (v5)
    *(_DWORD *)v5 += 2;
  v27 = v5;
  v28 = v21;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v23, (uint64_t)&v24, 1uLL);
  WebKit::UserMediaPermissionRequestProxy::setEligibleVideoDeviceUIDs(v7, v23);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v8);
  v10 = v27;
  v27 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v13 = v26;
  v26 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v24;
  v24 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v9);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(WebKit::UserMediaPermissionRequestProxy **)(a1 + 8);
  v24 = 0;
  if (v22)
  {
    WebKit::UserMediaPermissionRequestProxy::allow(v15, &v24, (const WTF::String *)&v17);
    return (id)std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v17, v12);
  }
  result = std::__throw_bad_optional_access[abi:sn180100]();
  __break(1u);
  return result;
}

void sub_1972CE664(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20)
{
  std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

WTF *WebKit::UserMediaPermissionRequestProxy::setEligibleVideoDeviceUIDs(uint64_t a1, _DWORD *a2)
{
  WTF::StringImpl **v3;
  unsigned int v4;

  v3 = (WTF::StringImpl **)(a1 + 80);
  v4 = *(_DWORD *)(a1 + 92);
  if (v4)
    WTF::VectorDestructor<true,WebCore::CaptureDevice>::destruct(*v3, (WTF::StringImpl *)((char *)*v3 + 40 * v4));
  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v3, a2);
}

uint64_t *WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  if (a3 < 0x6666667)
  {
    v6 = 40 * a3;
    v7 = WTF::fastMalloc((WTF *)(40 * a3));
    *((_DWORD *)v3 + 2) = v6 / 0x28;
    *v3 = v7;
    v8 = a2 + 40 * a3;
    v9 = *((_DWORD *)v3 + 3);
    do
    {
      v10 = *v3;
      v11 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v11 += 2;
      v12 = v9;
      *(_QWORD *)(v10 + 40 * v9) = v11;
      v13 = v10 + 40 * v9;
      *(_BYTE *)(v13 + 8) = *(_BYTE *)(a2 + 8);
      v14 = *(_DWORD **)(a2 + 16);
      if (v14)
        *v14 += 2;
      *(_QWORD *)(v13 + 16) = v14;
      v15 = *(_DWORD **)(a2 + 24);
      if (v15)
        *v15 += 2;
      v16 = v10 + 40 * v12;
      *(_QWORD *)(v16 + 24) = v15;
      *(_DWORD *)(v16 + 32) = *(_DWORD *)(a2 + 32);
      v9 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v9;
      a2 += 40;
    }
    while (a2 != v8);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_1972CE848(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v4 = result;
  v6 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v6 += 2;
  v25 = 0;
  v26 = 0;
  v7 = *(unsigned int *)(a2 + 28);
  if (!(_DWORD)v7)
    goto LABEL_18;
  if (v7 >> 28)
  {
    __break(0xC471u);
    return result;
  }
  LODWORD(v26) = *(_DWORD *)(a2 + 28);
  v25 = WTF::fastMalloc((WTF *)(16 * v7));
  v8 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v8)
  {
    v9 = 16 * v8;
    v10 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v11 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 120))(v4, *v10);
      if (!v11)
        break;
      v12 = (WTF::StringImpl *)*(v10 - 1);
      if (v12)
        *(_DWORD *)v12 += 2;
      v22 = v12;
      v23 = v11;
      if (HIDWORD(v26) == (_DWORD)v26)
      {
        WTF::Vector<WebKit::OptionItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::OptionItem>((uint64_t)&v25, (unint64_t)&v22);
      }
      else
      {
        v13 = (WTF::StringImpl **)(v25 + 16 * HIDWORD(v26));
        v22 = 0;
        *v13 = v12;
        v13[1] = v23;
        ++HIDWORD(v26);
      }
      v14 = v22;
      v22 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v10 += 2;
      v9 -= 16;
      if (!v9)
        goto LABEL_18;
    }
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    result = WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, (void *)a2);
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        return WTF::StringImpl::destroy(v6, v21);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  else
  {
LABEL_18:
    v15 = *(_DWORD **)(a2 + 8);
    if (v15)
      *v15 += 2;
    v16 = v25;
    v25 = 0;
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v15;
    v23 = 0;
    v24[0] = 0;
    v22 = 0;
    *(_QWORD *)(a3 + 16) = v16;
    v24[1] = 0;
    v17 = v26;
    v26 = 0;
    *(_QWORD *)(a3 + 24) = v17;
    *(_BYTE *)(a3 + 32) = 1;
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v24, (void *)a2);
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v22;
    v22 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
    return WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v18);
  }
  return result;
}

WTF::StringImpl *WebKit::WebGPU::ConvertToBackingContext::convertToBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  _BYTE v13[16];
  int v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  WTF *v18;
  int v19;
  int v20;
  _BYTE v21[16];
  int v22;
  char v23;
  char v24;

  v5 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v5 += 2;
  result = (WTF::StringImpl *)WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a1, a2 + 8);
  if (v23)
  {
    v12 = v5;
    v13[0] = 0;
    v14 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v13, (uint64_t)v21);
    v15 = *(_QWORD *)(a2 + 32);
    v16 = *(_BYTE *)(a2 + 40);
    v17 = *(_WORD *)(a2 + 41);
    v8 = (WTF *)*(unsigned int *)(a2 + 60);
    v18 = 0;
    v19 = 0;
    v20 = (int)v8;
    if ((_DWORD)v8)
    {
      v9 = (WTF *)WTF::fastMalloc(v8);
      v19 = (int)v8;
      v18 = v9;
      memcpy(v9, *(const void **)(a2 + 48), *(unsigned int *)(a2 + 60));
    }
    std::__optional_destruct_base<WebKit::WebGPU::TextureDescriptor,false>::__optional_destruct_base[abi:sn180100]<WebKit::WebGPU::TextureDescriptor>((uint64_t)a3, (uint64_t *)&v12);
    v11 = v18;
    if (v18)
    {
      v18 = 0;
      v19 = 0;
      WTF::fastFree(v11, v10);
    }
    if (v14 != -1)
      ((void (*)(char *, _BYTE *))off_1E34CF590[v14])(&v24, v13);
    v14 = -1;
    result = v12;
    v12 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)result -= 2;
    }
    if (v23)
    {
      if (v22 != -1)
        return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34CF590[v22])(&v12, v21);
    }
  }
  else
  {
    *a3 = 0;
    a3[64] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v7);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF *v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _BYTE v14[16];
  int v15;
  _BYTE v16[11];
  void *v17;
  uint64_t v18;
  _BYTE v19[16];
  int v20;
  char v21;
  char v22;

  v5 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v5 += 2;
  result = (WTF::StringImpl *)WebKit::WebGPU::ConvertFromBackingContext::convertFromBacking(a1, a2 + 8);
  if (v21)
  {
    v13 = v5;
    v14[0] = 0;
    v15 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v14, (uint64_t)v19);
    *(_QWORD *)v16 = *(_QWORD *)(a2 + 32);
    v16[8] = *(_BYTE *)(a2 + 40);
    *(_WORD *)&v16[9] = *(_WORD *)(a2 + 41);
    v8 = (WTF *)*(unsigned int *)(a2 + 60);
    v17 = 0;
    LODWORD(v18) = 0;
    HIDWORD(v18) = (_DWORD)v8;
    if ((_DWORD)v8)
    {
      v9 = (void *)WTF::fastMalloc(v8);
      LODWORD(v18) = (_DWORD)v8;
      v17 = v9;
      memcpy(v9, *(const void **)(a2 + 48), *(unsigned int *)(a2 + 60));
    }
    v10 = v13;
    v13 = 0;
    *(_QWORD *)a3 = v10;
    *(_BYTE *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>(a3 + 8, (uint64_t)v14);
    *(_QWORD *)(a3 + 32) = *(_QWORD *)v16;
    *(_DWORD *)(a3 + 39) = *(_DWORD *)&v16[7];
    *(_QWORD *)(a3 + 48) = v17;
    v12 = v18;
    v17 = 0;
    v18 = 0;
    *(_QWORD *)(a3 + 56) = v12;
    *(_BYTE *)(a3 + 64) = 1;
    if (v15 != -1)
      ((void (*)(char *, _BYTE *))off_1E34CF5A0[v15])(&v22, v14);
    v15 = -1;
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
    if (v21)
    {
      if (v20 != -1)
        return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _BYTE *))off_1E34CF5A0[v20])(&v13, v19);
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 64) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v7);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return result;
}

unint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::WebGPU::ShaderModuleCompilationHint>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int *v10;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (unsigned int **)((char *)v4 + 16 * v5);
        v9 = (unsigned int **)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *(_QWORD *)v7 = v10;
          *((_QWORD *)v7 + 1) = v9[1];
          result = *v9;
          *v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 += 2;
          v7 += 4;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebsiteData::ownerProcess(int a1)
{
  uint64_t result;

  result = 0;
  if (a1 > 1023)
  {
    if (a1 >= 0x10000)
    {
      if (a1 < 0x40000)
      {
        if (a1 == 0x10000)
          return 1;
        if (a1 == 0x20000)
          return result;
      }
      else if (a1 == 0x40000 || a1 == 0x80000 || a1 == 0x100000)
      {
        return result;
      }
    }
    else if (a1 < 0x2000)
    {
      if (a1 == 1024)
        return 1;
      if (a1 == 4096)
        return result;
    }
    else if (a1 == 0x2000 || a1 == 0x4000 || a1 == 0x8000)
    {
      return result;
    }
    goto LABEL_36;
  }
  if (a1 > 31)
  {
    if (a1 > 127)
    {
      if (a1 == 128)
        return result;
      if (a1 != 256)
      {
        if (a1 == 512)
          return result;
        goto LABEL_36;
      }
      return 1;
    }
    if (a1 == 32)
      return result;
    if (a1 == 64)
      return 1;
LABEL_36:
    result = 84;
    __break(0xC471u);
    return result;
  }
  if (a1 > 7)
  {
    if (a1 != 8)
    {
      if (a1 == 16)
        return result;
      goto LABEL_36;
    }
    return 1;
  }
  if ((a1 - 1) >= 2)
  {
    if (a1 == 4)
      return 2;
    goto LABEL_36;
  }
  return result;
}

uint64_t WebKit::WebsiteData::filter(int a1, int a2)
{
  int v2;
  uint64_t v4;
  int v5;

  v2 = a1;
  if (!a1)
    return 0;
  LODWORD(v4) = 0;
  do
  {
    if (WebKit::WebsiteData::ownerProcess(v2 & -v2) == a2)
      v5 = v2 & -v2;
    else
      v5 = 0;
    v4 = v5 | v4;
    v2 &= v2 - 1;
  }
  while (v2);
  return v4;
}

uint64_t WebKit::WebsiteData::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const WTF::StringImpl *v5;

  *a2 = 0;
  a2[1] = 0;
  _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN6WebKit11WebsiteData5EntryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS8_EUlRT_E_S8_SB_vE3mapERS8_SB_RKSE_((uint64_t)a2, a1);
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((_QWORD **)(a1 + 16), a2 + 2);
  WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy((_QWORD **)(a1 + 24), a2 + 3);
  return WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::copy((uint64_t *)(a1 + 32), v4, v5, a2 + 4);
}

uint64_t WebKit::WebsiteData::Entry::Entry(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint8x8_t v7;
  uint64_t result;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  *(_QWORD *)(a1 + 40) = a4;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)*a3);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.i32[0] == 1)
  {
    *(_DWORD *)(a1 + 32) = *a3;
    return a1;
  }
  else
  {
    result = 129;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebsiteData::Entry::isolatedCopy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  char v7;
  _BYTE v8[24];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  WebCore::SecurityOriginData::isolatedCopy();
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 24) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a2, (uint64_t)v8);
  *(_DWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v5;
  if (v9 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_6[v9])(&v7, v8);
  return result;
}

{
  int v4;
  uint64_t v5;
  uint64_t result;
  char v7;
  _BYTE v8[24];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  WebCore::SecurityOriginData::isolatedCopy();
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 24) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(a2, (uint64_t)v8);
  *(_DWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v5;
  if (v9 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_6[v9])(&v7, v8);
  return result;
}

uint64_t WebKit::currentHardwareKeyboardState(WebKit *this)
{
  _BOOL4 v1;
  int HardwareKeyboardCountry;

  v1 = GSEventIsHardwareKeyboardAttached() != 0;
  HardwareKeyboardCountry = GSEventGetHardwareKeyboardCountry();
  return (HardwareKeyboardCountry << 8) | (GSEventGetHardwareKeyboardType() << 16) | v1;
}

uint64_t _ZN3WTF6MapperIZNS_21CrossThreadCopierBaseILb0ELb0ENS_6VectorIN6WebKit11WebsiteData5EntryELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE4copyERKS8_EUlRT_E_S8_SB_vE3mapERS8_SB_RKSE_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[24];
  int v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    if (v2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      v5 = 48 * v2;
      result = WTF::fastMalloc((WTF *)(48 * v2));
      *(_DWORD *)(v4 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v4 = result;
      v6 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)a2;
        v8 = 48 * v6;
        do
        {
          WebKit::WebsiteData::Entry::isolatedCopy(v7, (uint64_t)v11);
          v9 = *(_QWORD *)v4 + 48 * *(unsigned int *)(v4 + 12);
          *(_BYTE *)v9 = 0;
          *(_DWORD *)(v9 + 24) = -1;
          result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v9, (uint64_t)v11);
          *(_OWORD *)(v9 + 32) = v13;
          ++*(_DWORD *)(v4 + 12);
          if (v12 != -1)
            result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_6[v12])(&v10, v11);
          v7 += 48;
          v8 -= 48;
        }
        while (v8);
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  *a2 = 0;
  result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a1);
  v5 = result;
  v7 = v6;
  if (*a1)
    v8 = (uint64_t)&(*a1)[*((unsigned int *)*a1 - 1)];
  else
    v8 = 0;
  if ((WTF::StringImpl *)v8 != result)
  {
    do
    {
      WTF::String::isolatedCopy();
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v12, v9, (uint64_t)&v11);
      result = v12;
      v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
      while (1)
      {
        v5 = (WTF::StringImpl *)((char *)v5 + 8);
        if (v5 == v7)
          break;
        if ((unint64_t)(*(_QWORD *)v5 + 1) > 1)
          goto LABEL_12;
      }
      v5 = v7;
LABEL_12:
      ;
    }
    while (v5 != (WTF::StringImpl *)v8);
  }
  return result;
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>::copy@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4;
  WTF::StringImpl *result;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _BYTE v13[24];
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  *a2 = 0;
  if (*a1)
    v4 = *(_DWORD *)(*a1 - 12);
  else
    v4 = 0;
  result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::reserveInitialCapacity(a2, v4);
  while (*a1 && *(_DWORD *)(*a1 - 12))
  {
    v6 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a1);
    v7 = (WTF::StringImpl **)*a1;
    if (*a1)
      v7 += *((unsigned int *)v7 - 1);
    if (v7 == v6)
    {
      v8 = 0;
      goto LABEL_11;
    }
    v8 = *v6;
    *v6 = 0;
    if (*a1)
    {
      v12 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
      if ((WTF::StringImpl **)v12 == v6)
        goto LABEL_11;
    }
    else
    {
      if (!v6)
        goto LABEL_11;
      v12 = 0;
    }
    if ((WTF::StringImpl **)v12 != v6)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(a1, v6);
LABEL_11:
    v14 = v8;
    WTF::String::isolatedCopy();
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v15, v9, (uint64_t)v13);
    v11 = v15;
    v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WTF::Vector<std::optional<WebCore::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 0;
        v9 = 40 * v4;
        do
        {
          v10 = &v7[v8 / 4];
          v11 = (char *)v3 + v8;
          *(_BYTE *)v10 = 0;
          *((_BYTE *)v10 + 32) = 0;
          if (*((_BYTE *)v3 + v8 + 32))
          {
            v12 = *(_QWORD *)v11;
            *((_BYTE *)v10 + 8) = v11[8];
            *(_QWORD *)v10 = v12;
            *((_QWORD *)v10 + 2) = 0;
            *((_QWORD *)v10 + 3) = 0;
            v13 = *((_QWORD *)v11 + 2);
            *((_QWORD *)v11 + 2) = 0;
            *((_QWORD *)v10 + 2) = v13;
            LODWORD(v13) = *((_DWORD *)v11 + 6);
            *((_DWORD *)v11 + 6) = 0;
            v10[6] = v13;
            LODWORD(v13) = *((_DWORD *)v11 + 7);
            *((_DWORD *)v11 + 7) = 0;
            v10[7] = v13;
            *((_BYTE *)v10 + 32) = 1;
            if (v11[32])
            {
              result = (unsigned int *)*((_QWORD *)v11 + 2);
              if (result)
              {
                *((_QWORD *)v11 + 2) = 0;
                *((_DWORD *)v11 + 6) = 0;
                result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
              }
            }
          }
          v8 += 40;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

BOOL WebKit::InteractionInformationRequest::isValidForRequest(int32x2_t *this, const InteractionInformationRequest *a2, int a3)
{
  int32x2_t v3;
  int32x2_t v4;

  if (a2->includeSnapshot && !this[1].i8[0]
    || a2->includeLinkIndicator && !this[1].i8[1]
    || a2->includeCaretContext && !this[1].i8[2]
    || a2->includeHasDoubleClickHandler && !this[1].i8[3]
    || a2->includeImageData && !this[1].i8[4]
    || a2->gatherAnimations && !this[1].i8[5]
    || a2->linkIndicatorShouldHaveLegacyMargins != this[1].u8[6])
  {
    return 0;
  }
  v3 = vsub_s32((int32x2_t)a2->point, *this);
  v4 = vmul_s32(v3, v3);
  return vadd_s32(vdup_lane_s32(v4, 1), v4).u32[0] <= a3 * a3;
}

uint64_t WebKit::AuxiliaryProcessProxy::AuxiliaryProcessProxy(uint64_t a1, char a2, char a3, double a4)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_1E34CF5D0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = &unk_1E34CF6B0;
  *(_QWORD *)(a1 + 32) = &unk_1E34CF708;
  *(_QWORD *)(a1 + 40) = 0;
  WebKit::ResponsivenessTimer::ResponsivenessTimer(a1 + 56, a1, a4);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 168) = a3;
  *(_WORD *)(a1 + 169) = 0;
  *(_QWORD *)(a1 + 176) = WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_WORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  WebKit::ProcessThrottler::ProcessThrottler((WebKit::ProcessThrottler *)(a1 + 200), (WebKit::AuxiliaryProcessProxy *)a1, a2);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  return a1;
}

uint64_t WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate()
{
  uint64_t result;

  if (!WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    return WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  result = 142;
  __break(0xC471u);
  return result;
}

void WebKit::AuxiliaryProcessProxy::terminate(WebKit::AuxiliaryProcessProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  unsigned __int8 **v4;
  void *v5;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 17);
    if (v3)
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "AuxiliaryProcessProxy::terminate: PID=%d", (uint8_t *)v6, 8u);
  }
  v4 = (unsigned __int8 **)*((_QWORD *)this + 17);
  if (v4)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v4 + 1);
    WebKit::ProcessLauncher::terminateProcess((WebKit::ProcessLauncher *)v4);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(v4[1], v5);
  }
}

void `non-virtual thunk to'WebKit::AuxiliaryProcessProxy::didFinishLaunching(uint64_t a1, uint64_t a2, int *a3)
{
  WebKit::AuxiliaryProcessProxy::didFinishLaunching(a1 - 24, a2, a3);
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(WebKit::AuxiliaryProcessProxy *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  _QWORD v10[2];
  char v11;
  IPC::Encoder *v12;

  v2 = (char *)this + 200;
  v3 = WTF::fastMalloc((WTF *)0x28);
  WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v3, (uint64_t)v2, "IPC sending due to large outgoing queue", 40, 0, 0);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 3;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v12 = (IPC::Encoder *)v4;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34CF9E0;
  v5[1] = v3;
  v10[0] = v5;
  v10[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v11 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)this, &v12, 0, (uint64_t)v10, 0);
  if (v11 && v10[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v10[0] + 8))(v10[0]);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::fromConnection(WebKit::AuxiliaryProcessProxy *this, const IPC::Connection *a2)
{
  void *v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  WTF *v9;

  {
    WebKit::connectionToProcessMap(void)::map = 0;
  }
  v8 = *((_QWORD *)this + 3);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::FileSystemStorageHandle,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((unsigned int **)&WebKit::connectionToProcessMap(void)::map, &v8, (unsigned int **)&v9);
  v3 = (unsigned int *)v9;
  if (!v9)
    return 0;
  v4 = *((_QWORD *)v9 + 1);
  v9 = 0;
  do
  {
    v5 = __ldaxr(v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v3));
  if (!v6)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  return v4;
}

void WebKit::AuxiliaryProcessProxy::logInvalidMessage(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  NSObject *v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    if (a3 >= 0xE98)
      v6 = 3736;
    else
      v6 = a3;
    v7 = (&IPC::Detail::messageDescriptions)[3 * v6];
    v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1);
    v9 = a1[17];
    if (v9)
      LODWORD(v9) = *(_DWORD *)(v9 + 108);
    v10 = 136446722;
    v11 = v7;
    v12 = 2082;
    v13 = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_fault_impl(&dword_196BCC000, v5, OS_LOG_TYPE_FAULT, "Received an invalid message '%{public}s' from the %{public}s process with PID %d", (uint8_t *)&v10, 0x1Cu);
  }
}

BOOL WebKit::AuxiliaryProcessProxy::mayBecomeUnresponsive(WebKit::AuxiliaryProcessProxy *this)
{
  uint64_t v2;
  size_t v4;
  int v5[2];
  int v6;
  int v7;
  _BYTE v8[32];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  getpid();
  if (!sandbox_check() || (getpid(), !sandbox_check()))
  {
    *(_QWORD *)v5 = 0xE00000001;
    v6 = 1;
    v2 = *((_QWORD *)this + 17);
    if (v2)
      LODWORD(v2) = *(_DWORD *)(v2 + 108);
    v7 = v2;
    v4 = 648;
    if (sysctl(v5, 4u, v8, &v4, 0, 0) != -1 && (v9 & 0x800) != 0)
      return 0;
  }
  if (*((_BYTE *)this + 389))
    return *((_QWORD *)this + 28) != 0;
  return 1;
}

void WebKit::AuxiliaryProcessProxy::didBecomeUnresponsive(WebKit::AuxiliaryProcessProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    v3 = (*(uint64_t (**)(WebKit::AuxiliaryProcessProxy *))(*(_QWORD *)this + 152))(this);
    v4 = *((_QWORD *)this + 17);
    if (v4)
      LODWORD(v4) = *(_DWORD *)(v4 + 108);
    v5 = 136446466;
    v6 = v3;
    v7 = 1024;
    v8 = v4;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "AuxiliaryProcessProxy::didBecomeUnresponsive: %{public}s process with PID %d became unresponsive", (uint8_t *)&v5, 0x12u);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::requestRemoteProcessTermination(WebKit::AuxiliaryProcessProxy *this)
{
  return (*(uint64_t (**)(WebKit::AuxiliaryProcessProxy *))(*(_QWORD *)this + 80))(this);
}

uint64_t `non-virtual thunk to'WebKit::AuxiliaryProcessProxy::requestRemoteProcessTermination(WebKit::AuxiliaryProcessProxy *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 4) + 80))((char *)this - 32);
}

uint64_t WebKit::AuxiliaryProcessProxy::didChangeThrottleState(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v2 = a2 == 0;
  if (*(unsigned __int8 *)(result + 170) != v2)
  {
    *(_BYTE *)(result + 170) = v2;
    if (a2)
    {
      v3 = *(_QWORD *)(result + 400);
      if (v3 && *(_DWORD *)(v3 - 12))
      {
        v4 = *(_QWORD *)(result + 408);
      }
      else
      {
        v4 = *(_QWORD *)(result + 408);
        if (!v4 || !*(_DWORD *)(v4 - 12))
          return result;
      }
      v6 = v4;
      v7 = v3;
      *(_QWORD *)(result + 400) = 0;
      *(_QWORD *)(result + 408) = 0;
      v8[0] = &v7;
      v8[1] = &v6;
      WebKit::AuxiliaryProcessProxy::send<Messages::AuxiliaryProcess::PreferencesDidUpdate>(result, (uint64_t)v8, 0, 0);
      if (v6)
        WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::deallocateTable(v6, v5);
      result = v7;
      if (v7)
        return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::optional<WTF::String>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v5);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::AuxiliaryProcess::PreferencesDidUpdate>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 5;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v17 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> const&>(v8, *(_QWORD ***)a2);
  IPC::ArgumentCoder<WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> const&>(v8, *(uint64_t **)(a2 + 8));
  LOBYTE(v15) = 0;
  v16 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16 && v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v12, v13);
  }
  return v10;
}

unsigned int *WebKit::BackgroundProcessResponsivenessTimer::responsivenessCheckTimerFired(WebKit::BackgroundProcessResponsivenessTimer *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  unsigned int *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  char v11;
  IPC::Encoder *v12;

  WTF::RunLoop::TimerBase::start();
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  v3 = (unsigned int *)(v2 + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2570;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v12 = (IPC::Encoder *)v5;
  LOBYTE(v10) = 0;
  v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v2, &v12, 0, (uint64_t)&v10, 1);
  if (v11 && v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = (unsigned int *)v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v6);
    result = (unsigned int *)WTF::fastFree(v8, v9);
  }
  if (v2)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  return result;
}

unsigned __int8 *WebKit::BackgroundProcessResponsivenessTimer::timeoutTimerFired(WebKit::BackgroundProcessResponsivenessTimer *this)
{
  double v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *result;

  v2 = *((double *)this + 1) + *((double *)this + 1);
  if (v2 > 28800.0)
    v2 = 28800.0;
  *((double *)this + 1) = v2;
  WTF::RunLoop::TimerBase::start();
  v3 = *(_QWORD *)(*(_QWORD *)this + 8);
  v4 = (unsigned int *)(v3 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  if (*(_BYTE *)(v3 + 389))
  {
    v6 = *(_QWORD *)(v3 + 224);
    result = (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
    if (!v6)
      return result;
  }
  else
  {
    result = (unsigned __int8 *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
  }
  if (*((_BYTE *)this + 80))
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8) + 48))(*(_QWORD *)(*(_QWORD *)this + 8));
    if ((_DWORD)result)
      return WebKit::BackgroundProcessResponsivenessTimer::setResponsive((unsigned __int8 *)this, 0);
  }
  return result;
}

unsigned __int8 *WebKit::BackgroundProcessResponsivenessTimer::didReceiveBackgroundResponsivenessPong(WebKit::BackgroundProcessResponsivenessTimer *this)
{
  WTF::RunLoop::TimerBase *v2;
  unsigned __int8 *result;
  double v4;

  v2 = (WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 48);
  result = (unsigned __int8 *)WTF::RunLoop::TimerBase::isActive((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 48));
  if ((_DWORD)result)
  {
    WTF::RunLoop::TimerBase::stop(v2);
    v4 = *((double *)this + 1) + *((double *)this + 1);
    if (v4 > 28800.0)
      v4 = 28800.0;
    *((double *)this + 1) = v4;
    WTF::RunLoop::TimerBase::start();
    return WebKit::BackgroundProcessResponsivenessTimer::setResponsive((unsigned __int8 *)this, 1);
  }
  return result;
}

unsigned __int8 *WebKit::BackgroundProcessResponsivenessTimer::setResponsive(unsigned __int8 *this, int a2)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (this[80] != a2)
  {
    v2 = a2;
    v3 = this;
    v4 = *(_QWORD *)(*(_QWORD *)this + 8);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v3 + 8) + 32))(*(_QWORD *)(*(_QWORD *)v3 + 8));
    v3[80] = v2;
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v3 + 8) + 40))(*(_QWORD *)(*(_QWORD *)v3 + 8));
    v5 = v3[80];
    v6 = qword_1ECE71578;
    v7 = os_log_type_enabled((os_log_t)qword_1ECE71578, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v7)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 136);
        if (v9)
          LODWORD(v9) = *(_DWORD *)(v9 + 108);
        v11 = 67109120;
        v12 = v9;
        _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "Notifying the client that background WebProcess with pid %d has become responsive again", (uint8_t *)&v11, 8u);
      }
      v8 = 3;
    }
    else
    {
      if (v7)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 136);
        if (v10)
          LODWORD(v10) = *(_DWORD *)(v10 + 108);
        v11 = 67109120;
        v12 = v10;
        _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "Notifying the client that background WebProcess with pid %d has become unresponsive", (uint8_t *)&v11, 8u);
      }
      v8 = 2;
    }
    (*(void (**)(void))(**(_QWORD **)(*(_QWORD *)v3 + 8) + 8 * v8))();
    return (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
  }
  return this;
}

unsigned __int8 *WebKit::BackgroundProcessResponsivenessTimer::processTerminated(WebKit::BackgroundProcessResponsivenessTimer *this)
{
  WTF::RunLoop::TimerBase::stop((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 48));
  WTF::RunLoop::TimerBase::stop((WebKit::BackgroundProcessResponsivenessTimer *)((char *)this + 16));
  return WebKit::BackgroundProcessResponsivenessTimer::setResponsive((unsigned __int8 *)this, 1);
}

void WebKit::BrowsingContextGroup::~BrowsingContextGroup(WebKit::BrowsingContextGroup *this, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *((_QWORD *)this + 7);
  if (v3)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteAllNodes((uint64_t)this + 24, a2);
  v5 = *((_QWORD *)this + 3);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), v4);
  v6 = *((_QWORD *)this + 2);
  if (v6)
    WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::deallocateTable(v6, v4);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

uint64_t WebKit::BrowsingContextGroup::ensureProcessForSite@<X0>(WebKit::BrowsingContextGroup *this@<X0>, const WebKit::Site *a2@<X1>, WebKit::WebProcessProxy *a3@<X2>, const WebKit::WebPreferences *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t result;
  WebKit::FrameProcess *v13;

  v10 = *((_QWORD *)a2 + 1);
  if (!v10 || !*(_DWORD *)(v10 + 4) || (MEMORY[0x19AEABBCC]() & 1) != 0)
    goto LABEL_10;
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((const WebKit::WebPreferences *)((char *)a4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v11)&& (result = WebKit::BrowsingContextGroup::processForSite(this, (const WTF::StringImpl **)a2)) != 0&& *(_QWORD *)(*(_QWORD *)(result + 16) + 176) == *((_QWORD *)a3 + 22))
  {
    ++*(_DWORD *)result;
  }
  else
  {
LABEL_10:
    v13 = (WebKit::FrameProcess *)WTF::fastMalloc((WTF *)0x30);
    result = (uint64_t)WebKit::FrameProcess::FrameProcess(v13, a3, this, a2, a4);
  }
  *a5 = result;
  return result;
}

uint64_t WebKit::BrowsingContextGroup::processForSite(WebKit::BrowsingContextGroup *this, const WTF::StringImpl **a2)
{
  void *v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v10;

  WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::Site>>,WebKit::Site>(a2, (uint64_t)this + 16, (unsigned int **)&v10);
  v3 = (unsigned int *)v10;
  if (!v10)
    return 0;
  v4 = *((_QWORD *)v10 + 1);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 16);
    v6 = *(_QWORD *)(v5 + 136);
    if ((!v6 || !*(_BYTE *)(v6 + 104)) && !*(_QWORD *)(v5 + 144))
      v4 = 0;
  }
  v10 = 0;
  do
  {
    v7 = __ldaxr(v3);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v3));
  if (!v8)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  return v4;
}

uint64_t WebKit::BrowsingContextGroup::ensureProcessForConnection@<X0>(WebKit::BrowsingContextGroup *this@<X0>, IPC::Connection *a2@<X1>, WebKit::WebProcessProxy **a3@<X2>, const WebKit::WebPreferences *a4@<X3>, WebKit::FrameProcess **a5@<X8>)
{
  uint64_t result;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF **v13;
  uint64_t v14;
  WTF **v15;
  uint64_t v16;
  WTF **v17;
  WTF *v18;
  WebKit::FrameProcess *v19;
  WTF **v20;
  WebKit::WebProcessProxy *v21;
  WebKit::FrameProcess *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[5];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::getBoolValueForKey((const WebKit::WebPreferences *)((char *)a4 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_29;
  v13 = (WTF **)*((_QWORD *)this + 2);
  if (!v13)
  {
    v17 = 0;
    LODWORD(v14) = 0;
    goto LABEL_16;
  }
  v14 = *((unsigned int *)v13 - 1);
  v15 = &v13[3 * v14];
  if (!*((_DWORD *)v13 - 3))
  {
    v17 = &v13[3 * v14];
LABEL_16:
    v15 = &v13[3 * v14];
    if (!v13)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (!(_DWORD)v14)
  {
    v17 = (WTF **)*((_QWORD *)this + 2);
LABEL_17:
    v13 += 3 * *((unsigned int *)v13 - 1);
    goto LABEL_18;
  }
  v16 = 24 * v14;
  while (1)
  {
    result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(v13, v11, v12);
    if ((result & 1) == 0 && *v13 != (WTF *)-1)
      break;
    v13 += 3;
    v16 -= 24;
    if (!v16)
    {
      v13 = v15;
      break;
    }
  }
  v17 = v13;
  v13 = (WTF **)*((_QWORD *)this + 2);
  if (v13)
    goto LABEL_17;
LABEL_18:
  if (v13 == v17)
  {
LABEL_29:
    v21 = a3[26];
    WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)a3, &v27);
    MEMORY[0x19AEABB0C](v28, &v27, 0);
    WebKit::Site::Site(&v29, (const WTF::URL *)v28);
    v22 = (WebKit::FrameProcess *)WTF::fastMalloc((WTF *)0x30);
    *a5 = WebKit::FrameProcess::FrameProcess(v22, v21, this, (const WebKit::Site *)&v29, a4);
    v24 = v30;
    v30 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v29;
    v29 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v23);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = v28[0];
    v28[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v23);
      else
        *(_DWORD *)v26 -= 2;
    }
    result = (uint64_t)v27;
    v27 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  while (1)
  {
    v18 = v17[2];
    if (v18)
    {
      v19 = (WebKit::FrameProcess *)*((_QWORD *)v18 + 1);
      if (v19)
      {
        if (*(IPC::Connection **)(*((_QWORD *)v19 + 2) + 144) == a2)
          break;
      }
    }
    v20 = v17 + 3;
    v17 = v15;
    if (v20 != v15)
    {
      v17 = v20;
      while (1)
      {
        result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(v17, v11, v12);
        if ((result & 1) == 0 && *v17 != (WTF *)-1)
          break;
        v17 += 3;
        if (v17 == v15)
        {
          v17 = v15;
          break;
        }
      }
    }
    if (v17 == v13)
      goto LABEL_29;
  }
  ++*(_DWORD *)v19;
  *a5 = v19;
  return result;
}

void WebKit::BrowsingContextGroup::addFrameProcess(WebKit::BrowsingContextGroup *this, WebKit::FrameProcess *a2)
{
  WebKit::BrowsingContextGroup *v3;
  WTF::StringImpl **v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  _QWORD *v14;
  int v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  WebKit::WebPageProxy *v37;
  const WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  char v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  char v49;
  int v50;
  _QWORD *v51;
  unsigned int *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  int i;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  WebKit::BrowsingContextGroup *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t *v79;
  WebKit::WebProcessProxy *v80;
  WebKit::RemotePageProxy *v81;
  WebKit::BrowsingContextGroup *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;

  v3 = this;
  v4 = (WTF::StringImpl **)((char *)a2 + 32);
  v5 = (uint64_t *)((char *)this + 16);
  v6 = *((_QWORD *)this + 2);
  if (v6
    || (WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::expand((uint64_t *)this + 2),
        (v6 = *v5) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WebKit::Site::hash(v4) & v7;
  v9 = (_QWORD *)(v6 + 24 * v8);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>((WTF **)v9, v10, v11) & 1) == 0)
  {
    v82 = v3;
    v14 = 0;
    v15 = 1;
    do
    {
      if (*v9 == -1)
      {
        v14 = v9;
      }
      else if (WebKit::Site::operator==((WTF **)v9, v4, v13))
      {
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
        v29 = (unsigned int *)*((_QWORD *)a2 + 1);
        if (v29)
        {
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 + 1, v29));
        }
        v31 = (unsigned int *)v9[2];
        v9[2] = v29;
        v3 = v82;
        if (v31)
        {
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            atomic_store(1u, v31);
            WTF::fastFree((WTF *)v31, v28);
          }
        }
        goto LABEL_34;
      }
      v8 = (v8 + v15) & v7;
      v9 = (_QWORD *)(v6 + 24 * v8);
      ++v15;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>((WTF **)v9, v12, v13));
    v3 = v82;
    if (v14)
    {
      *v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      --*(_DWORD *)(*v5 - 16);
      v9 = v14;
    }
  }
  WTF::String::operator=((WTF::StringImpl **)v9, (WTF::StringImpl *)v4);
  WTF::String::operator=((WTF::StringImpl **)v9 + 1, (WebKit::FrameProcess *)((char *)a2 + 40));
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v17 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v19 = (unsigned int *)v9[2];
  v9[2] = v17;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v16);
    }
  }
  v22 = *v5;
  if (*v5)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v5;
  if (*v5)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 <= 0x400)
  {
    if (3 * v27 > 4 * v26)
      goto LABEL_34;
    goto LABEL_27;
  }
  if (v27 <= 2 * v26)
LABEL_27:
    WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::expand(v5);
LABEL_34:
  v34 = (_QWORD *)*((_QWORD *)v3 + 4);
  if (!v34)
    return;
  while (1)
  {
    v35 = *(_QWORD *)(*v34 + 8);
    if (v35)
      break;
    v34 = (_QWORD *)v34[2];
    if (!v34)
      return;
  }
  v36 = (uint64_t *)((char *)v3 + 56);
LABEL_39:
  v37 = (WebKit::WebPageProxy *)(v35 - 16);
  WebKit::WebPageProxy::currentURL((WebKit::WebPageProxy *)(v35 - 16), &v83);
  MEMORY[0x19AEABB0C](&v86, &v83, 0);
  WebKit::Site::Site(&v84, (const WTF::URL *)&v86);
  v40 = WebKit::Site::operator==(v4, &v84, v38);
  v41 = v85;
  v85 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v39);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = v84;
  v84 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v39);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = v86;
  v86 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v39);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = v83;
  v83 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::destroy(v44, v39);
      if ((v40 & 1) != 0)
        return;
      goto LABEL_57;
    }
    *(_DWORD *)v44 -= 2;
  }
  if ((v40 & 1) != 0)
    return;
LABEL_57:
  v45 = *((_DWORD *)v3 + 16);
  v46 = *((_DWORD *)v3 + 17);
  *((_DWORD *)v3 + 16) = v45 + 1;
  if (v45 > v46)
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)v36, v39);
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPageProxy>((unsigned int **)&v86, (uint64_t)v37);
  v48 = *v36;
  if (*v36
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v36, 0), (v48 = *v36) != 0))
  {
    v49 = 0;
    v50 = *(_DWORD *)(v48 - 8);
  }
  else
  {
    v50 = 0;
    v49 = 1;
  }
  v51 = 0;
  v52 = (unsigned int *)v86;
  v53 = ((unint64_t)v86 + ~((_QWORD)v86 << 32)) ^ (((unint64_t)v86 + ~((_QWORD)v86 << 32)) >> 22);
  v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
  v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
  v56 = (v55 >> 31) ^ v55;
  for (i = 1; ; ++i)
  {
    v58 = v56 & v50;
    v59 = v48 + 16 * v58;
    v60 = *(unsigned int **)v59;
    if (*(_QWORD *)v59 != -1)
      break;
    v51 = (_QWORD *)(v48 + 16 * v58);
LABEL_68:
    v56 = i + v58;
  }
  if (!v60)
  {
    if (v51)
    {
      *v51 = 0;
      v51[1] = 0;
      --*(_DWORD *)(*v36 - 16);
      v59 = (uint64_t)v51;
    }
    v86 = 0;
    v61 = *(unsigned int **)v59;
    *(_QWORD *)v59 = v52;
    if (v61)
    {
      do
      {
        v65 = __ldaxr(v61);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v61));
      if (!v66)
      {
        atomic_store(1u, v61);
        WTF::fastFree((WTF *)v61, v47);
      }
    }
    v62 = *(uint64_t **)(v59 + 8);
    *(_QWORD *)(v59 + 8) = 0;
    if (v62)
      WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(v62, v47);
    v63 = *v36;
    if (*v36)
      v64 = *(_DWORD *)(v63 - 12) + 1;
    else
      v64 = 1;
    *(_DWORD *)(v63 - 12) = v64;
    v70 = *v36;
    if (*v36)
      v71 = *(_DWORD *)(v70 - 12);
    else
      v71 = 0;
    v72 = (*(_DWORD *)(v70 - 16) + v71);
    v73 = *(unsigned int *)(v70 - 4);
    if (v73 > 0x400)
    {
      if (v73 > 2 * v72)
        goto LABEL_89;
    }
    else if (3 * v73 > 4 * v72)
    {
LABEL_89:
      v67 = v3;
LABEL_95:
      v69 = v70 + 16 * v73;
      v52 = (unsigned int *)v86;
      goto LABEL_96;
    }
    v59 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v36, (unsigned int **)v59);
    v70 = *v36;
    v67 = v3;
    if (*v36)
      v73 = *(unsigned int *)(v70 - 4);
    else
      v73 = 0;
    goto LABEL_95;
  }
  if (v60 != (unsigned int *)v86)
    goto LABEL_68;
  v67 = v3;
  if ((v49 & 1) != 0)
    v68 = 0;
  else
    v68 = *(unsigned int *)(v48 - 4);
  v69 = v48 + 16 * v68;
LABEL_96:
  v86 = 0;
  if (v52)
  {
    do
    {
      v77 = __ldaxr(v52);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, v52));
    if (!v78)
    {
      atomic_store(1u, v52);
      WTF::fastFree((WTF *)v52, v47);
    }
  }
  v86 = (WTF::StringImpl *)v36;
  v87 = v59;
  v88 = v69;
  v74 = *v36;
  if (*v36)
  {
    v75 = *(unsigned int *)(v74 - 4);
    v76 = v74 + 16 * v75;
  }
  else
  {
    v76 = 0;
    v75 = 0;
  }
  v3 = v67;
  v89 = v76;
  v90 = v74 + 16 * v75;
  v91 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v86);
  v79 = (uint64_t *)(v87 + 8);
  v80 = (WebKit::WebProcessProxy *)*((_QWORD *)a2 + 2);
  v81 = (WebKit::RemotePageProxy *)WTF::fastMalloc((WTF *)0x60);
  v84 = WebKit::RemotePageProxy::RemotePageProxy(v81, v37, v80, (const WebKit::Site *)v4, 0);
  WebKit::RemotePageProxy::injectPageIntoNewProcess(v84);
  WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::add((uint64_t *)&v86, v79, (uint64_t *)&v84);
  if (v84)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v84 + 8))(v84);
  while (1)
  {
    v34 = (_QWORD *)v34[2];
    if (!v34)
      break;
    v35 = *(_QWORD *)(*v34 + 8);
    if (v35)
    {
      ++*((_DWORD *)v3 + 12);
      goto LABEL_39;
    }
  }
  ++*((_DWORD *)v3 + 12);
}

uint64_t WebKit::Site::operator==(WTF **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;

  result = WTF::equal(*a1, *a2, a3);
  if ((_DWORD)result)
    return WTF::equal(a1[1], a2[1], v6);
  return result;
}

void WebKit::BrowsingContextGroup::removeFrameProcess(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  const WTF::StringImpl **v5;
  int v6;
  unsigned int v7;
  WTF **v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  double v41;
  double v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;

  v2 = a1;
  v4 = (uint64_t *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    goto LABEL_23;
  v5 = (const WTF::StringImpl **)(a2 + 32);
  v6 = *(_DWORD *)(v3 - 8);
  v7 = WebKit::Site::hash((WTF::StringImpl **)(a2 + 32)) & v6;
  v8 = (WTF **)(v3 + 24 * v7);
  if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(v8, v9, v10) & 1) != 0)
  {
LABEL_7:
    v13 = *v4;
    if (!*v4)
      goto LABEL_23;
    v8 = (WTF **)(v13 + 24 * *(unsigned int *)(v13 - 4));
  }
  else
  {
    v12 = 1;
    while (*v8 == (WTF *)-1 || (WebKit::Site::operator==(v8, v5, v11) & 1) == 0)
    {
      v7 = (v7 + v12) & v6;
      v8 = (WTF **)(v3 + 24 * v7);
      ++v12;
      if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(v8, a2, v11))goto LABEL_7;
    }
    v13 = *v4;
    if (!*v4)
      goto LABEL_10;
  }
  v13 += 24 * *(unsigned int *)(v13 - 4);
  if ((WTF **)v13 != v8)
  {
LABEL_10:
    if ((WTF **)v13 != v8)
    {
      WTF::KeyValuePairHashTraits<WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket((uint64_t)v8, (WTF::StringImpl *)a2);
      ++*(_DWORD *)(*v4 - 16);
      v14 = *v4;
      v15 = *v4 ? *(_DWORD *)(v14 - 12) - 1 : -1;
      *(_DWORD *)(v14 - 12) = v15;
      v16 = *v4;
      if (*v4)
      {
        v17 = 6 * *(_DWORD *)(v16 - 12);
        v18 = *(_DWORD *)(v16 - 4);
        if (v17 < v18 && v18 >= 9)
          WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::rehash(v4, v18 >> 1);
      }
    }
  }
LABEL_23:
  v20 = *(_QWORD *)(v2 + 56);
  if (!v20)
  {
LABEL_75:
    v48 = 0;
    *(_DWORD *)(v2 + 64) = 0;
    goto LABEL_76;
  }
  v21 = *(_DWORD *)(v20 - 4);
  if (!v21)
  {
LABEL_72:
    *(_DWORD *)(v2 + 64) = 0;
    goto LABEL_73;
  }
  v50 = v2;
  v51 = (uint64_t *)(v2 + 56);
  v22 = 0;
  do
  {
    v23 = v20 + 16 * --v21;
    if ((unint64_t)(*(_QWORD *)v23 + 1) < 2)
      continue;
    if (!*(_QWORD *)(*(_QWORD *)v23 + 8))
      goto LABEL_59;
    v24 = v20 + 16 * v21;
    v27 = *(_QWORD *)(v24 + 8);
    v26 = (uint64_t *)(v24 + 8);
    v25 = v27;
    if (!v27)
      goto LABEL_59;
    v28 = *(_DWORD *)(v25 - 4);
    if (!v28)
      goto LABEL_58;
    v29 = 0;
    v30 = v28 - 1;
    do
    {
      v31 = v30;
      v32 = *(_QWORD **)(v25 + 8 * v30);
      if ((unint64_t)v32 + 1 >= 2 && *(_QWORD *)(v32[3] + 176) == *(_QWORD *)(*(_QWORD *)(a2 + 16) + 176))
      {
        *(_QWORD *)(v25 + 8 * v30) = -1;
        (*(void (**)(_QWORD *))(*v32 + 8))(v32);
        ++v29;
      }
      --v30;
    }
    while (v31);
    v25 = *v26;
    if (v29)
    {
      *(_DWORD *)(v25 - 16) += v29;
      v33 = *v26;
      if (*v26)
        v34 = *(_DWORD *)(v33 - 12);
      else
        v34 = 0;
      *(_DWORD *)(v33 - 12) = v34 - v29;
      v25 = *v26;
    }
    if (!v25)
      goto LABEL_59;
    v35 = *(_DWORD *)(v25 - 4);
    v36 = *(unsigned int *)(v25 - 12);
    if (v35 < 9 || 6 * (int)v36 >= v35)
      goto LABEL_58;
    v38 = (v36 - 1) | ((v36 - 1) >> 1) | ((((_DWORD)v36 - 1) | ((v36 - 1) >> 1)) >> 2);
    v39 = v38 | (v38 >> 4) | ((v38 | (v38 >> 4)) >> 8);
    v40 = (v39 | HIWORD(v39)) + 1;
    if (v40 > 0x400)
    {
      if (v40 > 2 * v36)
        goto LABEL_51;
    }
    else if (3 * v40 > 4 * v36)
    {
      goto LABEL_49;
    }
    LODWORD(v40) = 2 * v40;
    if (v40 <= 0x400)
    {
LABEL_49:
      v41 = (double)v36;
      v42 = (double)v40 * 0.604166667;
      goto LABEL_52;
    }
LABEL_51:
    v41 = (double)v36;
    v42 = (double)v40 * 0.416666667;
LABEL_52:
    if (v42 <= v41)
      LODWORD(v40) = 2 * v40;
    if (v40 <= 8)
      v43 = 8;
    else
      v43 = v40;
    WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::rehash(v26, v43, 0);
    v25 = *v26;
    if (*v26)
    {
LABEL_58:
      if (*(_DWORD *)(v25 - 12))
        continue;
    }
LABEL_59:
    WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>::customDeleteBucket(v20 + 16 * v21, (void *)a2);
    ++v22;
  }
  while (v21);
  v20 = *v51;
  if (v22)
  {
    *(_DWORD *)(v20 - 16) += v22;
    v44 = *v51;
    if (*v51)
      v45 = *(_DWORD *)(v44 - 12);
    else
      v45 = 0;
    *(_DWORD *)(v44 - 12) = v45 - v22;
    v20 = *v51;
  }
  v2 = v50;
  if (!v20)
    goto LABEL_75;
  v46 = *(_DWORD *)(v20 - 4);
  if (v46 < 9 || 6 * *(_DWORD *)(v20 - 12) >= v46)
    goto LABEL_72;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v51);
  v20 = *(_QWORD *)(v50 + 56);
  *(_DWORD *)(v50 + 64) = 0;
  if (v20)
  {
LABEL_73:
    v48 = *(_DWORD *)(v20 - 12);
    v49 = 0x7FFFFFFF;
    if (v48 < 0x7FFFFFFF)
      goto LABEL_76;
    goto LABEL_77;
  }
  v48 = 0;
LABEL_76:
  v49 = v48;
LABEL_77:
  *(_DWORD *)(v2 + 68) = 2 * v49;
}

void WebKit::BrowsingContextGroup::addPage(WebKit::BrowsingContextGroup *this, WebKit::WebPageProxy *a2)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  char v19;
  int v20;
  _QWORD *v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int i;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  WTF::StringImpl *v50;
  const WTF::StringImpl *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WebKit::WebProcessProxy *v62;
  WebKit::RemotePageProxy *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  double v73;
  double v74;
  double v75;
  unsigned int v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  WTF *v83;

  v4 = (uint64_t *)((char *)this + 24);
  v5 = *((_DWORD *)this + 13);
  v6 = *((_DWORD *)this + 12) + 1;
  *((_DWORD *)this + 12) = v6;
  if (v6 > v5)
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)this + 24);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v7 = (unsigned int *)*((_QWORD *)a2 + 3);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + 1, v7));
  v83 = (WTF *)v7;
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v4, (uint64_t *)&v83, (uint64_t)&v77);
  v11 = (unsigned int *)v83;
  v83 = 0;
  if (v11)
  {
    do
    {
      v31 = __ldaxr(v11);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v11));
    if (!v32)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
  }
  if (v7)
  {
    do
    {
      v12 = __ldaxr(v7);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v7));
    if (!v13)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v10);
    }
  }
  v14 = (uint64_t *)((char *)this + 56);
  v15 = *((_DWORD *)this + 16);
  v16 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 16) = v15 + 1;
  if (v15 > v16)
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 56, v10);
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPageProxy>((unsigned int **)&v77, (uint64_t)a2);
  v18 = *v14;
  if (*v14
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)this + 7, 0), (v18 = *v14) != 0))
  {
    v19 = 0;
    v20 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v20 = 0;
    v19 = 1;
  }
  v21 = 0;
  v22 = (unsigned int *)v77;
  v23 = ((unint64_t)v77 + ~((_QWORD)v77 << 32)) ^ (((unint64_t)v77 + ~((_QWORD)v77 << 32)) >> 22);
  v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
  v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
  v26 = (v25 >> 31) ^ v25;
  for (i = 1; ; ++i)
  {
    v28 = v26 & v20;
    v29 = v18 + 16 * v28;
    v30 = *(unsigned int **)v29;
    if (*(_QWORD *)v29 != -1)
      break;
    v21 = (_QWORD *)(v18 + 16 * v28);
LABEL_22:
    v26 = i + v28;
  }
  if (!v30)
  {
    if (v21)
    {
      *v21 = 0;
      v21[1] = 0;
      --*(_DWORD *)(*v14 - 16);
      v29 = (uint64_t)v21;
    }
    v77 = 0;
    v33 = *(unsigned int **)v29;
    *(_QWORD *)v29 = v22;
    if (v33)
    {
      do
      {
        v37 = __ldaxr(v33);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v33));
      if (!v38)
      {
        atomic_store(1u, v33);
        WTF::fastFree((WTF *)v33, v17);
      }
    }
    v34 = *(uint64_t **)(v29 + 8);
    *(_QWORD *)(v29 + 8) = 0;
    if (v34)
      WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(v34, v17);
    v35 = *v14;
    if (*v14)
      v36 = *(_DWORD *)(v35 - 12) + 1;
    else
      v36 = 1;
    *(_DWORD *)(v35 - 12) = v36;
    v41 = *v14;
    if (*v14)
      v42 = *(_DWORD *)(v41 - 12);
    else
      v42 = 0;
    v43 = (*(_DWORD *)(v41 - 16) + v42);
    v44 = *(unsigned int *)(v41 - 4);
    if (v44 > 0x400)
    {
      if (v44 <= 2 * v43)
      {
LABEL_46:
        v29 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand((uint64_t *)this + 7, (unsigned int **)v29);
        v41 = *v14;
        if (*v14)
          v44 = *(unsigned int *)(v41 - 4);
        else
          v44 = 0;
      }
    }
    else if (3 * v44 <= 4 * v43)
    {
      goto LABEL_46;
    }
    v40 = v41 + 16 * v44;
    v22 = (unsigned int *)v77;
    goto LABEL_51;
  }
  if (v30 != (unsigned int *)v77)
    goto LABEL_22;
  if ((v19 & 1) != 0)
    v39 = 0;
  else
    v39 = *(unsigned int *)(v18 - 4);
  v40 = v18 + 16 * v39;
LABEL_51:
  v77 = 0;
  if (v22)
  {
    do
    {
      v48 = __ldaxr(v22);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v22));
    if (!v49)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v17);
    }
  }
  v77 = (WebKit::BrowsingContextGroup *)((char *)this + 56);
  v78 = v29;
  v79 = v40;
  v45 = *v14;
  if (*v14)
  {
    v46 = *(unsigned int *)(v45 - 4);
    v47 = v45 + 16 * v46;
  }
  else
  {
    v47 = 0;
    v46 = 0;
  }
  v80 = v47;
  v81 = v45 + 16 * v46;
  v82 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v77);
  v54 = *((_QWORD *)this + 2);
  v52 = (uint64_t *)((char *)this + 16);
  v53 = v54;
  if (v54)
  {
    v55 = *(_DWORD *)(v53 - 4);
    if (v55)
    {
      v56 = 0;
      v57 = (uint64_t *)(v78 + 8);
      v58 = v55 - 1;
      do
      {
        v59 = v58;
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>((WTF **)(v53 + 24 * v58), (uint64_t)v50, v51) & 1) == 0&& *(_QWORD *)(v53 + 24 * v58) != -1)
        {
          v60 = *(_QWORD *)(v53 + 24 * v58 + 16);
          if (v60 && (v61 = *(_QWORD *)(v60 + 8)) != 0)
          {
            v62 = *(WebKit::WebProcessProxy **)(v61 + 16);
            if (*((_QWORD *)v62 + 22) != *(_QWORD *)(*((_QWORD *)a2 + 26) + 176))
            {
              v63 = (WebKit::RemotePageProxy *)WTF::fastMalloc((WTF *)0x60);
              v83 = WebKit::RemotePageProxy::RemotePageProxy(v63, a2, v62, (const WebKit::Site *)(v53 + 24 * v58), 0);
              WebKit::RemotePageProxy::injectPageIntoNewProcess(v83);
              WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::add((uint64_t *)&v77, v57, (uint64_t *)&v83);
              if (v83)
                (*(void (**)(WTF *))(*(_QWORD *)v83 + 8))(v83);
            }
          }
          else
          {
            WTF::KeyValuePairHashTraits<WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(v53 + 24 * v58, v50);
            ++v56;
          }
        }
        --v58;
      }
      while (v59);
      v64 = *v52;
      if (v56)
      {
        *(_DWORD *)(v64 - 16) += v56;
        v65 = *v52;
        if (*v52)
          v66 = *(_DWORD *)(v65 - 12);
        else
          v66 = 0;
        *(_DWORD *)(v65 - 12) = v66 - v56;
        v64 = *v52;
      }
      if (v64)
      {
        v67 = *(_DWORD *)(v64 - 4);
        v68 = *(unsigned int *)(v64 - 12);
        if (v67 >= 9 && 6 * (int)v68 < v67)
        {
          v70 = (v68 - 1) | ((v68 - 1) >> 1) | ((((_DWORD)v68 - 1) | ((v68 - 1) >> 1)) >> 2);
          v71 = v70 | (v70 >> 4) | ((v70 | (v70 >> 4)) >> 8);
          v72 = (v71 | HIWORD(v71)) + 1;
          if (v72 > 0x400)
          {
            if (v72 <= 2 * v68)
            {
LABEL_82:
              LODWORD(v72) = 2 * v72;
              if (v72 <= 0x400)
                goto LABEL_83;
            }
            v73 = (double)v68;
            v74 = (double)v72;
            v75 = 0.416666667;
          }
          else
          {
            if (3 * v72 <= 4 * v68)
              goto LABEL_82;
LABEL_83:
            v73 = (double)v68;
            v74 = (double)v72;
            v75 = 0.604166667;
          }
          if (v74 * v75 <= v73)
            LODWORD(v72) = 2 * v72;
          if (v72 <= 8)
            v76 = 8;
          else
            v76 = v72;
          WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::rehash(v52, v76);
        }
      }
    }
  }
}

uint64_t *WebKit::BrowsingContextGroup::removePage(WebKit::BrowsingContextGroup *this, WebKit::WebPageProxy *a2)
{
  void *v4;
  uint64_t *result;
  uint64_t *v6;

  WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 24, (uint64_t)a2);
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::take((uint64_t)this + 56, a2, &v6);
  result = v6;
  if (v6)
    return (uint64_t *)WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(v6, v4);
  return result;
}

uint64_t WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;

  v4 = *(_DWORD *)(a1 + 28);
  v5 = *(_DWORD *)(a1 + 24) + 1;
  *(_DWORD *)(a1 + 24) = v5;
  if (v5 > v4)
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a1);
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    return 0;
  v13 = *(uint64_t **)(a2 + 24);
  v7 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v13);
  v8 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v8 += 8 * *(unsigned int *)(v8 - 4);
  if ((uint64_t **)v8 == v7)
    return 0;
  v10 = *v7;
  if (!*v7)
    return 0;
  v13 = *v7;
  v11 = (_QWORD *)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>>,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>((uint64_t *)a1, &v13);
  v12 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v12 += 8 * *(unsigned int *)(v12 - 4);
  if ((_QWORD *)v12 != v11)
    WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove((uint64_t *)a1, v11);
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete(a1, (WTF *)v10);
  return 1;
}

uint64_t WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::take@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (uint64_t *)result;
  v6 = *(_DWORD *)(result + 8);
  v7 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 8) = v6 + 1;
  if (v6 > v7)
    result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences(result, a2);
  v8 = a2[3];
  if (!v8 || !*(_QWORD *)(v8 + 8))
    goto LABEL_11;
  v12 = a2[3];
  result = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v4, &v12);
  v9 = *v4;
  if (*v4)
    v9 += 16 * *(unsigned int *)(v9 - 4);
  if (v9 == result)
  {
LABEL_11:
    *a3 = 0;
    return result;
  }
  v10 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *a3 = v10;
  if (*v4)
  {
    v11 = *v4 + 16 * *(unsigned int *)(*v4 - 4);
    if (v11 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v11 = 0;
  }
  if (v11 != result)
    return (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v4, (void *)result);
  return result;
}

_QWORD *WebKit::BrowsingContextGroup::forEachRemotePage(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22[8];
  uint64_t v23;

  v5 = a1 + 56;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find(a1 + 56, a2, (uint64_t)v22);
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = v6 + 16 * v7;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v16 = v5;
  v17 = v8;
  v18 = v8;
  v19 = v8;
  v20 = v6 + 16 * v7;
  v21 = 0;
  result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v16);
  v10 = v23;
  if (v23 != v17)
  {
    result = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)(v23 + 8));
    v11 = result;
    v13 = v12;
    v14 = *(_QWORD *)(v10 + 8);
    v15 = v14 ? v14 + 8 * *(unsigned int *)(v14 - 4) : 0;
    if ((_QWORD *)v15 != result)
    {
      do
      {
        if (*v11)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
        while (++v11 != v13)
        {
          if ((unint64_t)(*v11 + 1) > 1)
            goto LABEL_15;
        }
        v11 = v13;
LABEL_15:
        ;
      }
      while (v11 != (_QWORD *)v15);
    }
  }
  return result;
}

_QWORD *WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  ++*(_DWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  if (v5 && *(_QWORD *)(v5 + 8))
  {
    v15 = *(_QWORD *)(a2 + 24);
    v6 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v15);
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 16) = v7;
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v9 = *(unsigned int *)(v8 - 4);
      v10 = v8 + 16 * v9;
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    *(_QWORD *)(a3 + 24) = v10;
    *(_QWORD *)(a3 + 32) = v8 + 16 * v9;
    *(_DWORD *)(a3 + 40) = 0;
    return WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((_QWORD *)a3);
  }
  else
  {
    v11 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v12 = *(unsigned int *)(v11 - 4);
      v13 = v11 + 16 * v12;
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v13;
    *(_QWORD *)(a3 + 16) = v13;
    *(_QWORD *)(a3 + 24) = v13;
    *(_QWORD *)(a3 + 32) = v11 + 16 * v12;
    *(_DWORD *)(a3 + 40) = 0;
    return WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((_QWORD *)a3);
  }
}

uint64_t WebKit::BrowsingContextGroup::remotePageInProcess(WebKit::BrowsingContextGroup *this, const WebKit::WebPageProxy *a2, const WebKit::WebProcessProxy *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE v22[8];
  uint64_t v23;

  v5 = (char *)this + 56;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find((uint64_t)this + 56, (uint64_t)a2, (uint64_t)v22);
  v6 = *((_QWORD *)this + 7);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = v6 + 16 * v7;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v16 = v5;
  v17 = v8;
  v18 = v8;
  v19 = v8;
  v20 = v6 + 16 * v7;
  v21 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v16);
  v9 = v23;
  if (v23 == v17)
    return 0;
  v10 = WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin((_QWORD **)(v23 + 8));
  v12 = *(_QWORD *)(v9 + 8);
  v13 = v12 ? v12 + 8 * *(unsigned int *)(v12 - 4) : 0;
  if ((_QWORD *)v13 == v10)
    return 0;
  while (1)
  {
    v14 = *v10;
    if (*(_QWORD *)(*(_QWORD *)(*v10 + 24) + 176) == *((_QWORD *)a3 + 22))
      return v14;
    while (++v10 != v11)
    {
      if ((unint64_t)(*v10 + 1) > 1)
        goto LABEL_14;
    }
    v10 = v11;
LABEL_14:
    if (v10 == (_QWORD *)v13)
      return 0;
  }
}

_QWORD *WebKit::BrowsingContextGroup::takeRemotePageInProcessForProvisionalPage@<X0>(WebKit::BrowsingContextGroup *this@<X0>, const WebKit::WebPageProxy *a2@<X1>, const WebKit::WebProcessProxy *a3@<X2>, _QWORD *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE v24[8];
  uint64_t v25;

  v8 = (char *)this + 56;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find((uint64_t)this + 56, (uint64_t)a2, (uint64_t)v24);
  v9 = *((_QWORD *)this + 7);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    v11 = v9 + 16 * v10;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v18 = v8;
  v19 = v11;
  v20 = v11;
  v21 = v11;
  v22 = v9 + 16 * v10;
  v23 = 0;
  result = WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v18);
  if (v25 == v19)
    goto LABEL_12;
  result = (_QWORD *)WebKit::BrowsingContextGroup::remotePageInProcess(this, a2, a3);
  if (!result)
    goto LABEL_12;
  v13 = v25;
  v14 = (uint64_t *)(v25 + 8);
  v18 = result;
  result = (_QWORD *)WTF::HashTable<WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::RetainPtr<WKDeferringGestureRecognizer>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::RetainPtr<WKDeferringGestureRecognizer>>,WTF::DefaultHash<WTF::RetainPtr<WKDeferringGestureRecognizer>>>,WKDeferringGestureRecognizer const*>((uint64_t *)(v25 + 8), &v18);
  v15 = *(_QWORD **)(v13 + 8);
  if (v15)
    v15 += *((unsigned int *)v15 - 1);
  if (v15 == result)
  {
LABEL_12:
    *a4 = 0;
    return result;
  }
  v16 = (_QWORD *)*result;
  *result = 0;
  *a4 = v16;
  if (*v14)
  {
    v17 = *v14 + 8 * *(unsigned int *)(*v14 - 4);
    if ((_QWORD *)v17 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v17 = 0;
  }
  if ((_QWORD *)v17 != result)
    return WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::remove(v14, (_QWORD **)result);
  return result;
}

WebKit::RemotePageProxy *WebKit::BrowsingContextGroup::transitionPageToRemotePage(WebKit::BrowsingContextGroup *this, WebKit::WebProcessProxy **a2, const WebKit::Site *a3)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  char v10;
  int v11;
  _QWORD *v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t *v39;
  WebKit::WebProcessProxy *v40;
  WebKit::WebPageProxyMessageReceiverRegistration *v41;
  WebKit::RemotePageProxy *v42;
  WebKit::RemotePageProxy *result;
  WebKit::RemotePageProxy *v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;

  v5 = (uint64_t *)((char *)this + 56);
  v6 = *((_DWORD *)this + 16);
  v7 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 16) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 56, a2);
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPageProxy>((unsigned int **)&v45, (uint64_t)a2);
  v9 = *v5;
  if (*v5
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v5, 0), (v9 = *v5) != 0))
  {
    v10 = 0;
    v11 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v11 = 0;
    v10 = 1;
  }
  v12 = 0;
  v13 = (unsigned int *)v45;
  v14 = ((unint64_t)v45 + ~((_QWORD)v45 << 32)) ^ (((unint64_t)v45 + ~((_QWORD)v45 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v11;
    v20 = v9 + 16 * v19;
    v21 = *(unsigned int **)v20;
    if (*(_QWORD *)v20 != -1)
      break;
    v12 = (_QWORD *)(v9 + 16 * v19);
LABEL_12:
    v17 = i + v19;
  }
  if (!v21)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*v5 - 16);
      v20 = (uint64_t)v12;
    }
    v45 = 0;
    v22 = *(unsigned int **)v20;
    *(_QWORD *)v20 = v13;
    if (v22)
    {
      do
      {
        v26 = __ldaxr(v22);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v22));
      if (!v27)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v8);
      }
    }
    v23 = *(uint64_t **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = 0;
    if (v23)
      WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(v23, v8);
    v24 = *v5;
    if (*v5)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v30 = *v5;
    if (*v5)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 <= 2 * v32)
      {
LABEL_33:
        v20 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v5, (unsigned int **)v20);
        v30 = *v5;
        if (*v5)
          v33 = *(unsigned int *)(v30 - 4);
        else
          v33 = 0;
      }
    }
    else if (3 * v33 <= 4 * v32)
    {
      goto LABEL_33;
    }
    v29 = v30 + 16 * v33;
    v13 = (unsigned int *)v45;
    goto LABEL_38;
  }
  if (v21 != (unsigned int *)v45)
    goto LABEL_12;
  if ((v10 & 1) != 0)
    v28 = 0;
  else
    v28 = *(unsigned int *)(v9 - 4);
  v29 = v9 + 16 * v28;
LABEL_38:
  v45 = 0;
  if (v13)
  {
    do
    {
      v37 = __ldaxr(v13);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v13));
    if (!v38)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v8);
    }
  }
  v45 = (WTF *)v5;
  v46 = v20;
  v47 = v29;
  v34 = *v5;
  if (*v5)
  {
    v35 = *(unsigned int *)(v34 - 4);
    v36 = v34 + 16 * v35;
  }
  else
  {
    v36 = 0;
    v35 = 0;
  }
  v48 = v36;
  v49 = v34 + 16 * v35;
  v50 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v45);
  v39 = (uint64_t *)(v46 + 8);
  v40 = a2[26];
  v41 = (WebKit::WebProcessProxy *)((char *)a2[4] + 1928);
  v42 = (WebKit::RemotePageProxy *)WTF::fastMalloc((WTF *)0x60);
  v44 = WebKit::RemotePageProxy::RemotePageProxy(v42, (WebKit::WebPageProxy *)a2, v40, a3, v41);
  WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::add((uint64_t *)&v45, v39, (uint64_t *)&v44);
  result = v44;
  if (v44)
    return (WebKit::RemotePageProxy *)(*(uint64_t (**)(WebKit::RemotePageProxy *))(*(_QWORD *)v44 + 8))(v44);
  return result;
}

WebKit::RemotePageProxy *WebKit::BrowsingContextGroup::transitionProvisionalPageToRemotePage(WebKit::BrowsingContextGroup *this, WebKit::ProvisionalPageProxy *a2, const WebKit::Site *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  char v12;
  int v13;
  _QWORD *v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  WebKit::WebPageProxy *v43;
  WebKit::WebProcessProxy *v44;
  WebKit::RemotePageProxy *v45;
  WebKit::RemotePageProxy *result;
  WebKit::RemotePageProxy *v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;

  v5 = (uint64_t *)((char *)this + 56);
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if (v6)
    v7 = v6 - 16;
  else
    v7 = 0;
  v8 = *((_DWORD *)this + 16);
  v9 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 16) = v8 + 1;
  if (v8 > v9)
    WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 56, a2);
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPageProxy>((unsigned int **)&v48, v7);
  v11 = *v5;
  if (*v5
    || (WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v5, 0), (v11 = *v5) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = 0;
  v15 = (unsigned int *)v48;
  v16 = ((unint64_t)v48 + ~((_QWORD)v48 << 32)) ^ (((unint64_t)v48 + ~((_QWORD)v48 << 32)) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = (v18 >> 31) ^ v18;
  for (i = 1; ; ++i)
  {
    v21 = v19 & v13;
    v22 = v11 + 16 * v21;
    v23 = *(unsigned int **)v22;
    if (*(_QWORD *)v22 != -1)
      break;
    v14 = (_QWORD *)(v11 + 16 * v21);
LABEL_15:
    v19 = i + v21;
  }
  if (!v23)
  {
    if (v14)
    {
      *v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*v5 - 16);
      v22 = (uint64_t)v14;
    }
    v48 = 0;
    v24 = *(unsigned int **)v22;
    *(_QWORD *)v22 = v15;
    if (v24)
    {
      do
      {
        v28 = __ldaxr(v24);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v24));
      if (!v29)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, v10);
      }
    }
    v25 = *(uint64_t **)(v22 + 8);
    *(_QWORD *)(v22 + 8) = 0;
    if (v25)
      WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(v25, v10);
    v26 = *v5;
    if (*v5)
      v27 = *(_DWORD *)(v26 - 12) + 1;
    else
      v27 = 1;
    *(_DWORD *)(v26 - 12) = v27;
    v32 = *v5;
    if (*v5)
      v33 = *(_DWORD *)(v32 - 12);
    else
      v33 = 0;
    v34 = (*(_DWORD *)(v32 - 16) + v33);
    v35 = *(unsigned int *)(v32 - 4);
    if (v35 > 0x400)
    {
      if (v35 <= 2 * v34)
      {
LABEL_36:
        v22 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(v5, (unsigned int **)v22);
        v32 = *v5;
        if (*v5)
          v35 = *(unsigned int *)(v32 - 4);
        else
          v35 = 0;
      }
    }
    else if (3 * v35 <= 4 * v34)
    {
      goto LABEL_36;
    }
    v31 = v32 + 16 * v35;
    v15 = (unsigned int *)v48;
    goto LABEL_41;
  }
  if (v23 != (unsigned int *)v48)
    goto LABEL_15;
  if ((v12 & 1) != 0)
    v30 = 0;
  else
    v30 = *(unsigned int *)(v11 - 4);
  v31 = v11 + 16 * v30;
LABEL_41:
  v48 = 0;
  if (v15)
  {
    do
    {
      v39 = __ldaxr(v15);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v15));
    if (!v40)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v10);
    }
  }
  v48 = (WTF *)v5;
  v49 = v22;
  v50 = v31;
  v36 = *v5;
  if (*v5)
  {
    v37 = *(unsigned int *)(v36 - 4);
    v38 = v36 + 16 * v37;
  }
  else
  {
    v38 = 0;
    v37 = 0;
  }
  v51 = v38;
  v52 = v36 + 16 * v37;
  v53 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v48);
  v41 = (uint64_t *)(v49 + 8);
  v42 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if (v42)
    v43 = (WebKit::WebPageProxy *)(v42 - 16);
  else
    v43 = 0;
  v44 = *(WebKit::WebProcessProxy **)(*((_QWORD *)a2 + 5) + 16);
  v45 = (WebKit::RemotePageProxy *)WTF::fastMalloc((WTF *)0x60);
  v47 = WebKit::RemotePageProxy::RemotePageProxy(v45, v43, v44, a3, (WebKit::ProvisionalPageProxy *)((char *)a2 + 352));
  WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::add((uint64_t *)&v48, v41, (uint64_t *)&v47);
  result = v47;
  if (v47)
    return (WebKit::RemotePageProxy *)(*(uint64_t (**)(WebKit::RemotePageProxy *))(*(_QWORD *)v47 + 8))(v47);
  return result;
}

BOOL WebKit::BrowsingContextGroup::hasRemotePages(WebKit::BrowsingContextGroup *this, const WebKit::WebPageProxy *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v3 = (char *)this + 56;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::find((uint64_t)this + 56, (uint64_t)a2, (uint64_t)v15);
  v4 = *((_QWORD *)this + 7);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = v4 + 16 * v5;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v9 = v3;
  v10 = v6;
  v11 = v6;
  v12 = v6;
  v13 = v4 + 16 * v5;
  v14 = 0;
  WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v9);
  if (v16 == v10)
    return 0;
  v7 = *(_QWORD *)(v16 + 8);
  return v7 && *(_DWORD *)(v7 - 12) != 0;
}

WebCore::SecurityOriginData *WebKit::DeviceIdHashSaltStorage::completePendingHandler(WTF::RunLoop *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  WebCore::SecurityOriginData *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  WebCore::SecurityOriginData *result;
  _QWORD v16[3];
  WebCore::SecurityOriginData *v17;

  v17 = 0;
  v3 = *((_QWORD *)a1 + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = (_QWORD *)(v3 + 16 * v4);
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = (_QWORD *)*((_QWORD *)a1 + 2);
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = (_QWORD *)*((_QWORD *)a1 + 2);
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = (_QWORD *)(v3 + 16 * v4);
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (v3)
  {
LABEL_8:
    v8 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  while (v6 != v8)
  {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v17, v6[1], (uint64_t)v16);
    a1 = (WTF::RunLoop *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)&v17, v6[1] + 32, (uint64_t)v16);
    v9 = v6 + 2;
    v6 = v5;
    if (v9 != v5)
    {
      v6 = v9;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  WTF::RunLoop::main(a1);
  v10 = v17;
  v17 = 0;
  v11 = *a2;
  *a2 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = &off_1E34CFAD0;
  v12[1] = v10;
  v12[2] = v11;
  v16[0] = v12;
  WTF::RunLoop::dispatch();
  v14 = v16[0];
  v16[0] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  result = v17;
  if (v17)
    return (WebCore::SecurityOriginData *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v17, v13);
  return result;
}

void WebKit::DeviceIdHashSaltStorage::~DeviceIdHashSaltStorage(WebKit::DeviceIdHashSaltStorage *this, void *a2)
{
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;

  *((_BYTE *)this + 25) = 1;
  v3 = (char *)this + 32;
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v14 = v4;
  v6 = *((_DWORD *)this + 10);
  v5 = *((unsigned int *)this + 11);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v15 = v6;
  v16 = v5;
  if ((_DWORD)v5)
  {
    v7 = 8 * v5;
    do
    {
      v8 = *v4;
      *v4++ = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v7 -= 8;
    }
    while (v7);
  }
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, a2);
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v9);
  v12 = *((_QWORD *)this + 2);
  if (v12)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v11);
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
}

WTF::StringImpl *WebKit::getSecurityOriginData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD v14[3];
  int v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  if (a3)
  {
    if (a3 == 1)
    {
      v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = (WTF::StringImpl *)v14[0];
    }
    v12 = v6;
  }
  else
  {
    v12 = 0;
  }
  v8 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)a4 + 80))(a4, &v12, &v13);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v7);
      if ((v8 & 1) != 0)
        goto LABEL_9;
LABEL_14:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 32) = 0;
      goto LABEL_15;
    }
    *(_DWORD *)v9 -= 2;
  }
  if ((v8 & 1) == 0)
    goto LABEL_14;
LABEL_9:
  WebCore::SecurityOriginData::fromDatabaseIdentifier();
  v10 = v16;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (v10)
  {
    *(_DWORD *)(a1 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v14);
    *(_BYTE *)(a1 + 32) = 1;
    if (v16)
    {
      if (v15 != -1)
        ((void (*)(WTF::StringImpl **, _QWORD *))off_1E34CF8F8[v15])(&v12, v14);
    }
  }
LABEL_15:
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::DeviceIdHashSaltStorage::completeDeviceIdHashSaltForOriginCall(uint64_t *a1, WebCore::SecurityOriginData *this, WebCore::SecurityOriginData *a3, uint64_t *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  WTF **v16;
  int i;
  unsigned int v18;
  WTF **v19;
  WTF *v20;
  uint64_t v21;
  uint64_t j;
  int v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF **v30;
  WTF *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  unsigned int *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  _QWORD *v58;
  _QWORD v59[2];
  int v60;
  WTF::StringImpl *v61;
  unsigned int *v62;
  char v63[8];
  int v64;
  char v65[8];
  int v66;
  char v67[8];
  int v68;
  int v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  char v75;
  int v76;
  uint64_t v77[3];
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  WebCore::SecurityOriginData::toString(this);
  WebCore::SecurityOriginData::toString(a3);
  v61 = v56;
  v77[0] = (uint64_t)v55;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v61, v77, &v57);
  if (!v57)
  {
    __break(0xC471u);
    return result;
  }
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v9);
    else
      *(_DWORD *)v55 -= 2;
  }
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v9);
    else
      *(_DWORD *)v56 -= 2;
  }
  LOBYTE(v61) = 0;
  v64 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v61, (uint64_t)this);
  v65[0] = 0;
  v68 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v65, (uint64_t)a3);
  v11 = a1 + 2;
  v12 = a1[2];
  if (v12
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1 + 2, 0), (v12 = *v11) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_DWORD *)v57 + 4);
  if (v14 >= 0x100)
    v15 = v14 >> 8;
  else
    v15 = WTF::StringImpl::hashSlowCase(v57);
  v16 = 0;
  for (i = 1; ; ++i)
  {
    v18 = v15 & v13;
    v19 = (WTF **)(v12 + 16 * (v15 & v13));
    v20 = *v19;
    if (*v19 == (WTF *)-1)
    {
      v16 = (WTF **)(v12 + 16 * v18);
      goto LABEL_22;
    }
    if (!v20)
      break;
    v21 = WTF::equal(v20, v57, v10);
    if ((v21 & 1) != 0)
      goto LABEL_49;
LABEL_22:
    v15 = i + v18;
  }
  if (v16)
  {
    *v16 = 0;
    v16[1] = 0;
    --*(_DWORD *)(*v11 - 16);
    v19 = v16;
  }
  WTF::String::operator=(v19, (WTF::StringImpl *)&v57);
  WTF::cryptographicallyRandomValues();
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v72);
  for (j = 0; j != 24; j += 8)
  {
    WTF::Internal::appendHex();
    v60 = v23;
    v58 = v59;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((WTF::StringBuilder *)&v72, (uint64_t *)&v58);
  }
  v24 = v72;
  if (v72
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v72),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v72),
        (v24 = v72) != 0))
  {
    *(_DWORD *)v24 += 2;
  }
  v25 = WTF::fastMalloc((WTF *)0x50);
  WTF::WallTime::now((WTF::WallTime *)v25);
  v27 = v26;
  *(_BYTE *)v25 = 0;
  *(_DWORD *)(v25 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v25, (uint64_t)&v61);
  *(_BYTE *)(v25 + 32) = 0;
  *(_DWORD *)(v25 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v25 + 32, (uint64_t)v65);
  *(_QWORD *)(v25 + 64) = v24;
  *(_QWORD *)(v25 + 72) = v27;
  v29 = v73;
  v73 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v28);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = v19 + 1;
  v21 = (uint64_t)v72;
  v72 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      v21 = WTF::StringImpl::destroy((WTF::StringImpl *)v21, v28);
    else
      *(_DWORD *)v21 -= 2;
  }
  v31 = *v30;
  *v30 = (WTF *)v25;
  if (v31)
    std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100]((_DWORD)v19 + 8, v31);
  v32 = *v11;
  if (*v11)
    v33 = *(_DWORD *)(v32 - 12) + 1;
  else
    v33 = 1;
  *(_DWORD *)(v32 - 12) = v33;
  v34 = *v11;
  if (*v11)
    v35 = *(_DWORD *)(v34 - 12);
  else
    v35 = 0;
  v36 = (*(_DWORD *)(v34 - 16) + v35);
  v37 = *(unsigned int *)(v34 - 4);
  if (v37 > 0x400)
  {
    if (v37 <= 2 * v36)
    {
LABEL_48:
      v21 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1 + 2, v19);
      v19 = (WTF **)v21;
    }
  }
  else if (3 * v37 <= 4 * v36)
  {
    goto LABEL_48;
  }
LABEL_49:
  if (v68 != -1)
    v21 = ((uint64_t (*)(uint64_t *, char *))off_1E34CF8F8[v68])(v77, v65);
  v68 = -1;
  if (v64 != -1)
    v21 = ((uint64_t (*)(uint64_t *, WTF::StringImpl **))off_1E34CF8F8[v64])(v77, &v61);
  WTF::WallTime::now((WTF::WallTime *)v21);
  *((_QWORD *)v19[1] + 9) = v38;
  v39 = v19[1];
  v40 = a1[6];
  if (v40 && *(_DWORD *)(v40 + 4))
  {
    v41 = a1[1];
    v61 = (WTF::StringImpl *)a1;
    do
      v42 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v42 + 1, (unsigned int *)a1));
    v62 = (unsigned int *)a1;
    WebCore::SecurityOriginData::isolatedCopy();
    WebCore::SecurityOriginData::isolatedCopy();
    WTF::String::isolatedCopy();
    v43 = *((_QWORD *)v39 + 9);
    v63[0] = 0;
    v66 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v63, (uint64_t)v77);
    v67[0] = 0;
    v69 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v67, (uint64_t)&v72);
    v70 = (WTF::StringImpl *)v59[0];
    v71 = v43;
    if (v76 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E34CF8F8[v76])(v59, &v72);
    if (v78 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E34CF8F8[v78])(&v72, v77);
    v44 = WTF::fastMalloc((WTF *)0x68);
    *(_QWORD *)v44 = &off_1E34CFB70;
    *(_QWORD *)(v44 + 8) = v61;
    v45 = v62;
    v62 = 0;
    *(_QWORD *)(v44 + 16) = v45;
    *(_BYTE *)(v44 + 24) = 0;
    *(_DWORD *)(v44 + 48) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v44 + 24, (uint64_t)v63);
    *(_BYTE *)(v44 + 56) = 0;
    *(_DWORD *)(v44 + 80) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v44 + 56, (uint64_t)v67);
    v46 = v70;
    v70 = 0;
    *(_QWORD *)(v44 + 88) = v46;
    *(_QWORD *)(v44 + 96) = v71;
    v77[0] = v44;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v41 + 32))(v41, v77);
    v48 = v77[0];
    v77[0] = 0;
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    v49 = v70;
    v70 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v47);
      else
        *(_DWORD *)v49 -= 2;
    }
    if (v69 != -1)
      ((void (*)(WTF::StringImpl **, char *))off_1E34CF8F8[v69])(&v72, v67);
    v69 = -1;
    if (v66 != -1)
      ((void (*)(WTF::StringImpl **, char *))off_1E34CF8F8[v66])(&v72, v63);
    v66 = -1;
    v50 = v62;
    v62 = 0;
    if (v50)
      WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v50);
    v39 = v19[1];
  }
  v51 = (WTF::StringImpl *)*((_QWORD *)v39 + 8);
  if (v51)
    *(_DWORD *)v51 += 2;
  v61 = v51;
  v52 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v52 + 16))(v52, &v61);
  (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v54 = v61;
  v61 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v53);
    else
      *(_DWORD *)v54 -= 2;
  }
  result = v57;
  v57 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v53);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  WTF::StringImpl *result;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  _BYTE v16[24];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a3 + 8;
  if (*(_BYTE *)(a1 + 24))
  {
    LOBYTE(v18) = 0;
    v20 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v18, a2 + 8);
    v16[0] = 0;
    v17 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v16, v6);
    result = WebKit::DeviceIdHashSaltStorage::completeDeviceIdHashSaltForOriginCall((uint64_t *)a1, (WebCore::SecurityOriginData *)&v18, (WebCore::SecurityOriginData *)v16, a4);
    if (v17 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E34CF8F8[v17])(&v15, v16);
    if (v20 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(_BYTE *, uint64_t *))off_1E34CF8F8[v20])(v16, &v18);
  }
  else
  {
    v8 = (uint64_t *)(a1 + 32);
    v18 = a1;
    WebCore::SecurityOriginData::isolatedCopy();
    WebCore::SecurityOriginData::isolatedCopy();
    v9 = *a4;
    *a4 = 0;
    v24 = (WTF::StringImpl *)v9;
    v10 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 40))
    {
      v11 = v10 + (v10 >> 2);
      if (v11 >= 0x10)
        v12 = v11 + 1;
      else
        v12 = 16;
      if (v12 <= v10 + 1)
        v13 = v10 + 1;
      else
        v13 = v12;
      WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 32, v13);
      v10 = *(unsigned int *)(a1 + 44);
      v14 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      v14 = *v8;
    }
    WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin(WebCore::SecurityOrigin const&,WebCore::SecurityOrigin const&,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>((uint64_t *)(v14 + 8 * v10), &v18);
    ++*(_DWORD *)(a1 + 44);
    result = v24;
    v24 = 0;
    if (result)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    if (v23 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(_BYTE *, uint64_t *))off_1E34CF8F8[v23])(v16, &v22);
    v23 = -1;
    if (v21 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(_BYTE *, uint64_t *))off_1E34CF8F8[v21])(v16, &v19);
  }
  return result;
}

WebCore::SecurityOriginData *WebKit::DeviceIdHashSaltStorage::getDeviceIdHashSaltOrigins(uint64_t a1, uint64_t *a2)
{
  WebCore::SecurityOriginData *result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 24))
    return WebKit::DeviceIdHashSaltStorage::completePendingHandler((WTF::RunLoop *)a1, a2);
  v4 = *a2;
  *a2 = 0;
  v5 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 40))
  {
    v6 = a1 + 32;
    v7 = v5 + (v5 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 <= v5 + 1)
      v9 = v5 + 1;
    else
      v9 = v8;
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v6, v9);
    v5 = *(unsigned int *)(a1 + 44);
  }
  v10 = *(_QWORD *)(a1 + 32);
  result = (WebCore::SecurityOriginData *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)result = &off_1E34CFBC0;
  *((_QWORD *)result + 1) = a1;
  *((_QWORD *)result + 2) = v4;
  *(_QWORD *)(v10 + 8 * v5) = result;
  ++*(_DWORD *)(a1 + 44);
  return result;
}

uint64_t WebKit::DeviceIdHashSaltStorage::deleteHashSaltFromDisk(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  WTF::StringImpl *v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 8);
  do
    v2 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v2 + 1, (unsigned int *)a1));
  WTF::String::isolatedCopy();
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v3 = &off_1E34CFBE8;
  v3[1] = a1;
  v3[2] = a1;
  v3[3] = v8;
  v9 = v3;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v1 + 32))(v1, &v9);
  v4 = v9;
  v9 = 0;
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  return 0;
}

uint64_t WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltForOrigins(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  unsigned int v36;
  unsigned int v37;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _BYTE v44[16];
  uint64_t v45;

  v3 = a3;
  v5 = a1;
  if (*(_BYTE *)(a1 + 24))
  {
    v6 = *(_QWORD *)(a1 + 16);
    v40 = (uint64_t *)(a1 + 16);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 - 4);
      if (v7)
      {
        v42 = 0;
        v41 = a1;
        do
        {
          if ((unint64_t)(*(_QWORD *)(v6 + 16 * --v7) + 1) >= 2)
          {
            if (a2[3])
            {
              v8 = 0;
              v9 = 0;
              do
              {
                if ((WebCore::operator==() & 1) != 0)
                {
                  v13 = 1;
                  goto LABEL_17;
                }
                ++v9;
                v10 = a2[3];
                v8 += 32;
              }
              while (v9 < v10);
              if (!(_DWORD)v10)
                goto LABEL_15;
              v11 = 0;
              v12 = 0;
              do
              {
                v13 = WebCore::operator==();
                if ((v13 & 1) != 0)
                  break;
                ++v12;
                v11 += 32;
              }
              while (v12 < a2[3]);
            }
            else
            {
LABEL_15:
              v13 = 0;
            }
LABEL_17:
            a1 = v41;
            v14 = *(_QWORD *)(v41 + 48);
            if (v14)
            {
              v15 = *(_DWORD *)(v14 + 4) == 0;
              v16 = v13 ^ 1;
              if (v15)
                v16 = 1;
              if ((v16 & 1) == 0)
                a1 = WebKit::DeviceIdHashSaltStorage::deleteHashSaltFromDisk(v41);
            }
            if (v13)
            {
              WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>::customDeleteBucket((WTF::StringImpl **)(v6 + 16 * v7), (WTF::StringImpl *)a2);
              ++v42;
            }
          }
        }
        while (v7);
        v17 = *v40;
        if (v42)
        {
          *(_DWORD *)(v17 - 16) += v42;
          v18 = *v40;
          if (*v40)
            v19 = *(_DWORD *)(v18 - 12);
          else
            v19 = 0;
          v3 = a3;
          *(_DWORD *)(v18 - 12) = v19 - v42;
          v17 = *v40;
          if (!*v40)
            goto LABEL_50;
          goto LABEL_45;
        }
        v3 = a3;
        if (v17)
        {
LABEL_45:
          v36 = *(_DWORD *)(v17 - 4);
          v37 = 6 * *(_DWORD *)(v17 - 12);
          if (v36 >= 9 && v37 < v36)
            a1 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::shrinkToBestSize(v40);
        }
      }
    }
LABEL_50:
    WTF::RunLoop::main((WTF::RunLoop *)a1);
    WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v43, v3);
    WTF::RunLoop::dispatch();
    result = v43;
    v43 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return result;
  }
  v20 = (uint64_t *)(a1 + 32);
  v43 = a1;
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v44, (uint64_t)a2);
  v21 = *v3;
  *v3 = 0;
  v45 = v21;
  v22 = *(unsigned int *)(v5 + 44);
  if ((_DWORD)v22 == *(_DWORD *)(v5 + 40))
  {
    v23 = v22 + (v22 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 <= v22 + 1)
      v25 = v22 + 1;
    else
      v25 = v24;
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v5 + 32, v25);
    v26 = *(unsigned int *)(v5 + 44);
    v27 = *(_QWORD *)(v5 + 32);
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v28 = off_1E34CFC10;
    v28[1] = v43;
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v28 + 2), (uint64_t)v44);
    v30 = v45;
    v45 = 0;
    v28[4] = v30;
    *(_QWORD *)(v27 + 8 * v26) = v28;
  }
  else
  {
    v31 = *v20;
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v32 = off_1E34CFC10;
    v32[1] = v43;
    WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v32 + 2), (uint64_t)v44);
    v33 = v45;
    v45 = 0;
    v32[4] = v33;
    *(_QWORD *)(v31 + 8 * v22) = v32;
  }
  ++*(_DWORD *)(v5 + 44);
  v34 = v45;
  v45 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  return WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v44, v29);
}

uint64_t WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltOriginsModifiedSince(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  double *v12;
  double v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  unsigned int v27;
  unsigned int v28;
  uint64_t v30;

  v5 = a1;
  if (*(_BYTE *)(a1 + 24))
  {
    v6 = (uint64_t *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      v8 = *(_DWORD *)(v7 - 4);
      if (v8)
      {
        v9 = 0;
        v10 = v8 - 1;
        do
        {
          v11 = v10;
          if ((unint64_t)(*(_QWORD *)(v7 + 16 * v10) + 1) >= 2)
          {
            v12 = *(double **)(v7 + 16 * v10 + 8);
            v13 = v12[9];
            v14 = *(_QWORD *)(v5 + 48);
            if (v14)
            {
              if (*(_DWORD *)(v14 + 4) && v13 > a3)
                a1 = WebKit::DeviceIdHashSaltStorage::deleteHashSaltFromDisk(v5);
            }
            if (v13 > a3)
            {
              WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>::customDeleteBucket((WTF::StringImpl **)(v7 + 16 * v10), (WTF::StringImpl *)v12);
              ++v9;
            }
          }
          --v10;
        }
        while (v11);
        v16 = *v6;
        if (v9)
        {
          *(_DWORD *)(v16 - 16) += v9;
          v17 = *v6;
          if (*v6)
            v18 = *(_DWORD *)(v17 - 12);
          else
            v18 = 0;
          *(_DWORD *)(v17 - 12) = v18 - v9;
          v16 = *v6;
        }
        if (v16)
        {
          v27 = *(_DWORD *)(v16 - 4);
          v28 = 6 * *(_DWORD *)(v16 - 12);
          if (v27 >= 9 && v28 < v27)
            a1 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::shrinkToBestSize((uint64_t *)(v5 + 16));
        }
      }
    }
    WTF::RunLoop::main((WTF::RunLoop *)a1);
    WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v30, a2);
    WTF::RunLoop::dispatch();
    result = v30;
    v30 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v19 = *a2;
    *a2 = 0;
    v20 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v20 == *(_DWORD *)(a1 + 40))
    {
      v21 = a1 + 32;
      v22 = v20 + (v20 >> 2);
      if (v22 >= 0x10)
        v23 = v22 + 1;
      else
        v23 = 16;
      if (v23 <= v20 + 1)
        v24 = v20 + 1;
      else
        v24 = v23;
      WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v21, v24);
      v20 = *(unsigned int *)(v5 + 44);
    }
    v25 = *(_QWORD *)(v5 + 32);
    result = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)result = &off_1E34CFC38;
    *(_QWORD *)(result + 8) = v5;
    *(double *)(result + 16) = a3;
    *(_QWORD *)(result + 24) = v19;
    *(_QWORD *)(v25 + 8 * v20) = result;
    ++*(_DWORD *)(v5 + 44);
  }
  return result;
}

void *WebKit::DrawingAreaProxy::messageReceiverNames(WebKit::DrawingAreaProxy *this)
{
  if ((byte_1ECE72CD9 & 1) == 0)
    _MergedGlobals_86 = 262;
  return &_MergedGlobals_86;
}

uint64_t WebKit::DrawingAreaProxy::messageSenderConnection(WebKit::DrawingAreaProxy *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 6) + 144);
}

uint64_t `non-virtual thunk to'WebKit::DrawingAreaProxy::messageSenderConnection(WebKit::DrawingAreaProxy *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 4) + 144);
}

uint64_t WebKit::DrawingAreaProxy::messageSenderDestinationID(WebKit::DrawingAreaProxy *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t WebKit::DrawingAreaProxy::delegatedScrollingMode(WebKit::DrawingAreaProxy *this)
{
  return 0;
}

void WebKit::DrawingAreaProxy::createFence(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::FindStringCallbackAggregator::foundString(uint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v4;
  char v5;

  v5 = a4;
  if (*(_BYTE *)(a2 + 16))
  {
    *(_DWORD *)(result + 32) += a3;
    return WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,BOOL,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,BOOL &>((uint64_t *)(result + 48), (_QWORD *)a2, &v5, (uint64_t)&v4);
  }
  return result;
}

void WebKit::FindStringCallbackAggregator::incrementFrame(WebKit::FindStringCallbackAggregator *this, WebKit::WebFrameProxy *a2, WebKit::WebFrameProxy *a3)
{
  _QWORD v4[2];

  if ((a2 & 8) != 0)
    WebKit::WebFrameProxy::traversePrevious(a3, (a2 >> 4) & 1, (uint64_t)v4);
  else
    WebKit::WebFrameProxy::traverseNext((uint64_t)a3, (a2 >> 4) & 1, (uint64_t)v4);
  *(_QWORD *)this = v4[0];
}

void WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator(WebKit::FindStringCallbackAggregator *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  IPC::Encoder *v34;
  WTF *v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 v47;
  char v48;
  _QWORD v49[3];
  __int128 v50;
  char v51;
  IPC::Encoder *v52;

  v2 = *((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD **)(v2 + 8)) == 0)
  {
    v20 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    goto LABEL_59;
  }
  CFRetain((CFTypeRef)*(v3 - 1));
  v4 = v3[35];
  if (!v4)
  {
    v4 = v3[33];
    if (!v4)
    {
      v44 = *((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 16))(v44, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      goto LABEL_58;
    }
  }
  v46 = (uint64_t)(v3 - 2);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v5 = (unsigned __int16 *)((char *)this + 24);
  v6 = v4;
  while (1)
  {
    v50 = *(_OWORD *)(v6 + 272);
    v7 = *((_QWORD *)this + 6);
    if (!v7)
      goto LABEL_34;
    v8 = *(_DWORD *)(v7 - 8);
    LODWORD(v49[0]) = -1640531527;
    WORD2(v49[0]) = 0;
    BYTE6(v49[0]) = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)v49, &v50);
    v9 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v49) & v8;
    v10 = (uint64_t *)(v7 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == (_QWORD)v50 && v12 == *((_QWORD *)&v50 + 1))
    {
LABEL_18:
      v16 = (uint64_t *)*((_QWORD *)this + 6);
      if (!v16)
        goto LABEL_23;
    }
    else
    {
      v14 = 1;
      while (v11 | v12)
      {
        v9 = (v9 + v14) & v8;
        v10 = (uint64_t *)(v7 + 24 * v9);
        v11 = *v10;
        v12 = v10[1];
        ++v14;
        if (*v10 == (_QWORD)v50 && v12 == *((_QWORD *)&v50 + 1))
          goto LABEL_18;
      }
      v16 = (uint64_t *)*((_QWORD *)this + 6);
      if (!v16)
        goto LABEL_34;
      v10 = &v16[3 * *((unsigned int *)v16 - 1)];
    }
    v16 += 3 * *((unsigned int *)v16 - 1);
LABEL_23:
    if (v16 != v10)
    {
      if (!*((_BYTE *)v10 + 16) || *(_QWORD *)(*(_QWORD *)(v6 + 32) + 16) != *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16))
        goto LABEL_40;
      WebKit::FindStringCallbackAggregator::incrementFrame((WebKit::FindStringCallbackAggregator *)&v50, (WebKit::WebFrameProxy *)*v5, (WebKit::WebFrameProxy *)v4);
      v17 = v50;
      if ((_QWORD)v50)
        break;
    }
LABEL_34:
    WebKit::FindStringCallbackAggregator::incrementFrame((WebKit::FindStringCallbackAggregator *)&v50, (WebKit::WebFrameProxy *)*v5, (WebKit::WebFrameProxy *)v6);
    v19 = v50;
    CFRelease(*(CFTypeRef *)(v6 + 8));
    if (!v19)
    {
      v6 = 0;
      goto LABEL_40;
    }
    v6 = v19;
    if (v19 == v4)
    {
      v6 = v4;
      goto LABEL_40;
    }
  }
  while (1)
  {
    if (v17 == v4)
    {
      v17 = v4;
LABEL_33:
      CFRelease(*(CFTypeRef *)(v17 + 8));
      goto LABEL_34;
    }
    if (*(_QWORD *)(*(_QWORD *)(v17 + 32) + 16) != *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16))
      goto LABEL_33;
    if (v17 == v6)
      break;
    WebKit::FindStringCallbackAggregator::incrementFrame((WebKit::FindStringCallbackAggregator *)v49, (WebKit::WebFrameProxy *)*v5, (WebKit::WebFrameProxy *)v17);
    v18 = v49[0];
    CFRelease(*(CFTypeRef *)(v17 + 8));
    v17 = v18;
    if (!v18)
      goto LABEL_34;
  }
  CFRelease(*(CFTypeRef *)(v6 + 8));
LABEL_40:
  v49[0] = (char *)this + 16;
  v49[1] = (char *)this + 24;
  v49[2] = (char *)this + 28;
  CFRetain((CFTypeRef)*(v3 - 1));
  v22 = (_DWORD *)*((_QWORD *)this + 2);
  if (v22)
    *v22 += 2;
  v23 = *((_DWORD *)this + 8);
  v24 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    v25 = v6;
  else
    v25 = v4;
  CFRetain(*(CFTypeRef *)(v25 + 8));
  v26 = *(_QWORD *)(*(_QWORD *)(v25 + 32) + 16);
  v27 = (unsigned int *)(v26 + 16);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  v45 = v3;
  v29 = *(_QWORD *)(v3[2] + 1896);
  v30 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v30 = 2203;
  *(_QWORD *)(v30 + 8) = v29;
  *(_QWORD *)(v30 + 528) = v30 + 16;
  *(_QWORD *)(v30 + 536) = v30 + 16;
  *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v30 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
  v52 = (IPC::Encoder *)v30;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(v30, (uint64_t)v49);
  v31 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v31 = &off_1E34CFC60;
  *(_QWORD *)(v31 + 8) = v46;
  *(_QWORD *)(v31 + 16) = v22;
  *(_DWORD *)(v31 + 24) = v23;
  *(_QWORD *)(v31 + 32) = v24;
  v32 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)&v50 = v31;
  *((_QWORD *)&v50 + 1) = v32;
  v51 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v26, &v52, 0, (uint64_t)&v50, 1);
  if (v51 && (_QWORD)v50)
    (*(void (**)(_QWORD))(*(_QWORD *)v50 + 8))(v50);
  v34 = v52;
  v52 = 0;
  if (v34)
  {
    IPC::Encoder::~Encoder(v34, v33);
    WTF::fastFree(v35, v36);
  }
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v26 + 16));
  v3 = v45;
  if (v6)
  {
    if (*(_QWORD *)(*(_QWORD *)(v4 + 32) + 16) != *(_QWORD *)(*(_QWORD *)(v6 + 32) + 16))
    {
      v47 = *(_OWORD *)(v4 + 272);
      v48 = 1;
      WebKit::WebPageProxy::clearSelection(v46, &v47);
    }
    CFRelease(*(CFTypeRef *)(v6 + 8));
    v37 = *(const void **)(v6 + 8);
  }
  else
  {
    v37 = *(const void **)(v4 + 8);
  }
  CFRelease(v37);
  CFRelease(*(CFTypeRef *)(v4 + 8));
LABEL_58:
  CFRelease((CFTypeRef)*(v3 - 1));
LABEL_59:
  v38 = *((_QWORD *)this + 6);
  if (v38)
    WTF::fastFree((WTF *)(v38 - 16), v21);
  v39 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v41)
  {
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, v21);
    }
  }
}

uint64_t WebKit::FindStringCallbackAggregator::FindStringCallbackAggregator(uint64_t a1, uint64_t a2, _DWORD **a3, __int16 a4, int a5, uint64_t *a6)
{
  unsigned int *v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;

  *(_DWORD *)a1 = 1;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v12 = *(unsigned int **)(a2 + 24);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  *(_QWORD *)(a1 + 8) = v12;
  v14 = *a3;
  if (*a3)
    *v14 += 2;
  *(_QWORD *)(a1 + 16) = v14;
  *(_WORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = 0;
  v15 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t WebKit::AuxiliaryProcessProxy::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 16);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

unsigned int *WebKit::AuxiliaryProcessProxy::deref(WebKit::AuxiliaryProcessProxy *this)
{
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)this + 4);
}

void WebKit::AuxiliaryProcessProxy::environmentIdentifier(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebKit::AuxiliaryProcessProxy::prepareToDropLastAssertion(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebKit::ProcessLauncher::Client::shouldDisableJITCage(WebKit::ProcessLauncher::Client *this)
{
  return 0;
}

uint64_t WebKit::DrawingAreaProxy::hasVisibleContent(WebKit::DrawingAreaProxy *this)
{
  return 1;
}

uint64_t WebKit::DrawingAreaProxy::shouldCoalesceVisualEditorStateUpdates(WebKit::DrawingAreaProxy *this)
{
  return 0;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebKit::ExtensionCapabilityGrant *v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebKit::ExtensionCapabilityGrant *)(a1 + 8);
    do
    {
      if (*((_QWORD *)v4 - 1) != -1)
      {
        WebKit::ExtensionCapabilityGrant::~ExtensionCapabilityGrant(v4);
        v5 = (WTF::StringImpl *)*((_QWORD *)v4 - 1);
        *((_QWORD *)v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 = (WebKit::ExtensionCapabilityGrant *)((char *)v4 + 24);
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + 16 * i;
      v6 = *(unsigned int **)v5;
      if (*(_QWORD *)v5 != -1)
      {
        if (*(_QWORD *)(v5 + 8))
        {
          WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(*(uint64_t **)(v5 + 8), a2);
          v6 = *(unsigned int **)v5;
        }
        *(_QWORD *)v5 = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  WTF::StringImpl **v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WTF::StringImpl **)(a1 + 24 * i);
      if (*v5 != (WTF::StringImpl *)-1)
      {
        v6 = a1 + 24 * i;
        v7 = *(unsigned int **)(v6 + 16);
        *(_QWORD *)(v6 + 16) = 0;
        if (v7)
        {
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v7);
            WTF::fastFree((WTF *)v7, a2);
          }
        }
        v10 = v5[1];
        v5[1] = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v10 -= 2;
        }
        v11 = *v5;
        *v5 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v11 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != -1)
      {
        *v4 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, WTF *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)(a1 + 8);
    do
    {
      v5 = *(v4 - 1);
      if (v5 != (WTF::StringImpl *)-1)
      {
        a2 = *v4;
        *v4 = 0;
        if (a2)
        {
          std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100]((int)v4, a2);
          v5 = *(v4 - 1);
        }
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100](int a1, WTF *this)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  if (this)
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, this);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *((unsigned int *)this + 14);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, char *))off_1E34CF8F8[v4])(&v6, (char *)this + 32);
    *((_DWORD *)this + 14) = -1;
    v5 = *((unsigned int *)this + 6);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, WTF *))off_1E34CF8F8[v5])(&v7, this);
    *((_DWORD *)this + 6) = -1;
    WTF::fastFree(this, this);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;

  v3 = (unsigned int *)a1[1];
  *a1 = -1;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  ++*(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 16);
  if (WebKit::connectionToProcessMap(void)::map)
    v6 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12) = v6;
  if (WebKit::connectionToProcessMap(void)::map)
  {
    v7 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 4);
    if (6 * *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12) < v7 && v7 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v7 >> 1);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;

  v2 = WebKit::connectionToProcessMap(void)::map;
  if (WebKit::connectionToProcessMap(void)::map)
  {
    v3 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 4);
    v4 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = WTF::fastMalloc((WTF *)(16 * a1 + 16));
  v7 = v5;
  v8 = v5 + 16;
  if (a1)
    bzero((void *)(v5 + 16), 16 * a1);
  WebKit::connectionToProcessMap(void)::map = v8;
  *(_DWORD *)(v7 + 12) = a1;
  *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 8) = a1 - 1;
  *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 16) = 0;
  *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12) = v4;
  if (v3)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v2 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          if (WebKit::connectionToProcessMap(void)::map)
            v16 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 8);
          else
            v16 = 0;
          v17 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(WebKit::connectionToProcessMap(void)::map + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (uint64_t *)(WebKit::connectionToProcessMap(void)::map + 16 * v22);
          v25 = (unsigned int *)v24[1];
          v24[1] = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, v6);
            }
          }
          *v24 = *v10;
          v28 = v2 + 16 * v9;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v24[1] = v29;
          v13 = *(unsigned int **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (!v13)
            goto LABEL_27;
          do
          {
            v30 = __ldaxr(v13);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v13));
          if (v31)
            goto LABEL_27;
        }
        else
        {
          v12 = v2 + 16 * v9;
          v13 = *(unsigned int **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (!v13)
            goto LABEL_27;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (v15)
            goto LABEL_27;
        }
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v6);
      }
LABEL_27:
      if (++v9 == v3)
        goto LABEL_30;
    }
  }
  if (v2)
LABEL_30:
    WTF::fastFree((WTF *)(v2 - 16), v6);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(uint64_t a1)
{
  unsigned int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (!WebKit::connectionToProcessMap(void)::map)
    return 0;
  v1 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 8);
  v2 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  v5 = v1 & ((v4 >> 31) ^ v4);
  v6 = *(_QWORD *)(WebKit::connectionToProcessMap(void)::map + 16 * v5);
  if (v6 == a1)
    return WebKit::connectionToProcessMap(void)::map + 16 * v5;
  v7 = 1;
  while (v6)
  {
    v5 = ((_DWORD)v5 + v7) & v1;
    v6 = *(_QWORD *)(WebKit::connectionToProcessMap(void)::map + 16 * v5);
    ++v7;
    if (v6 == a1)
      return WebKit::connectionToProcessMap(void)::map + 16 * v5;
  }
  return WebKit::connectionToProcessMap(void)::map
       + 16 * *(unsigned int *)(WebKit::connectionToProcessMap(void)::map - 4);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::addPassingHashCode<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral,WTF::String&>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  WTF::StringImpl **v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;

  v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v7 = *a1) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = WTF::HashTranslatorASCIILiteral::hash(*a2, a2[1]);
  v10 = 0;
  v11 = 0;
  for (i = v9; ; i = v10 + v13)
  {
    v13 = i & v8;
    v14 = (WTF::StringImpl **)(v7 + 16 * (i & v8));
    if (*v14 != (WTF::StringImpl *)-1)
      break;
    v11 = (WTF::StringImpl **)(v7 + 16 * v13);
LABEL_10:
    ++v10;
  }
  if (!*v14)
  {
    if (v11)
      v14 = v11;
    if (*v14 == (WTF::StringImpl *)-1)
    {
      *v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*a1 - 16);
    }
    WTF::HashTranslatorASCIILiteral::translate(v14, (WTF::StringImpl *)*a2, a2[1], v9);
    result = (uint64_t)WTF::String::operator=(v14 + 1, a3);
    v16 = *a1;
    if (*a1)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 <= 2 * v22)
      {
LABEL_25:
        result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v14);
        v14 = (WTF::StringImpl **)result;
        v20 = *a1;
        if (*a1)
          v23 = *(unsigned int *)(v20 - 4);
        else
          v23 = 0;
      }
    }
    else if (3 * v23 <= 4 * v22)
    {
      goto LABEL_25;
    }
    v24 = v20 + 16 * v23;
    v25 = 1;
    goto LABEL_30;
  }
  result = MEMORY[0x19AEABBCC]();
  if ((result & 1) == 0)
    goto LABEL_10;
  v18 = *a1;
  if (*a1)
    v19 = *(unsigned int *)(v18 - 4);
  else
    v19 = 0;
  v25 = 0;
  v24 = v18 + 16 * v19;
LABEL_30:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v25;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::sendMessage(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<IPC::ConnectionAsyncReplyHandler>,WebKit::AuxiliaryProcessProxy::ShouldStartProcessThrottlerActivity)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34CF918;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 16), 0);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34CF918;
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 16), 0);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::sendMessage(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<IPC::ConnectionAsyncReplyHandler>,WebKit::AuxiliaryProcessProxy::ShouldStartProcessThrottlerActivity)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  char v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 24);
  LOBYTE(v7[0]) = 0;
  v8 = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    v7[0] = v4;
    v7[1] = v5;
    v8 = 1;
  }
  result = WebKit::AuxiliaryProcessProxy::sendMessage(v2, (IPC::Encoder **)(a1 + 16), v3, (uint64_t)v7, *(unsigned __int8 *)(a1 + 56));
  if (v8)
  {
    result = v7[0];
    if (v7[0])
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v7[0] + 8))(v7[0]);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::sendMessage(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<IPC::ConnectionAsyncReplyHandler>,WebKit::AuxiliaryProcessProxy::ShouldStartProcessThrottlerActivity)::$_2,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34CF968;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::sendMessage(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<IPC::ConnectionAsyncReplyHandler>,WebKit::AuxiliaryProcessProxy::ShouldStartProcessThrottlerActivity)::$_2,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CF968;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::sendMessage(WTF::UniqueRef<IPC::Encoder> &&,WTF::OptionSet<IPC::SendOption>,std::optional<IPC::ConnectionAsyncReplyHandler>,WebKit::AuxiliaryProcessProxy::ShouldStartProcessThrottlerActivity)::$_2,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand()
{
  int v0;

  if (WebKit::connectionToProcessMap(void)::map
    && (v0 = *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 4)) != 0)
  {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v0 << (6 * *(_DWORD *)(WebKit::connectionToProcessMap(void)::map - 12) >= (2 * v0)));
  }
  else
  {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::AuxiliaryProcessProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(8u);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::didFinishLaunching(WebKit::ProcessLauncher *,IPC::Connection::Identifier)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CF990;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::didFinishLaunching(WebKit::ProcessLauncher *,IPC::Connection::Identifier)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CF990;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::didFinishLaunching(WebKit::ProcessLauncher *,IPC::Connection::Identifier)::$_0,void>::call(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v1 = *(unsigned int **)(a1 + 8);
  if (v1)
  {
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
  }
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = &off_1E34CF9B8;
  v3[1] = v1;
  v5 = v3;
  WTF::ensureOnMainRunLoop();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::didFinishLaunching(WebKit::ProcessLauncher *,IPC::Connection::Identifier)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34CF9B8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::didFinishLaunching(WebKit::ProcessLauncher *,IPC::Connection::Identifier)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34CF9B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::didFinishLaunching(WebKit::ProcessLauncher *,IPC::Connection::Identifier)::$_0::operator() const(void)::{lambda(void)#1},void>::call(unsigned int *result)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    result = *(unsigned int **)(v1 + 8);
    if (result)
    {
      v2 = result + 4;
      do
        v3 = __ldaxr(v2);
      while (__stlxr(v3 + 1, v2));
      WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC((WebKit::AuxiliaryProcessProxy *)result);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0>(WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34CF9E0;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0>(WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WebKit::ProcessThrottlerActivity **a1)
{
  void *v2;

  *a1 = (WebKit::ProcessThrottlerActivity *)off_1E34CF9E0;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0>(WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(WTF::RunLoop *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  WTF::RunLoop::TimerBase *v5;
  unsigned int *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t result;
  uint64_t v14;
  WTF *v15;
  void *v16;
  _QWORD *v17;
  WTF::RunLoop::TimerBase *v18;

  if (a2 && *a2)
  {
    WTF::RunLoop::main(a1);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E34CFA08;
    v4[1] = v3;
    v17 = v4;
    WTF::RunLoop::dispatchAfter();
    v5 = v18;
    if (!v18)
      goto LABEL_11;
    v6 = (unsigned int *)((char *)v18 + 24);
    do
    {
      v7 = __ldaxr(v6);
      v8 = --v7 == 0;
    }
    while (__stlxr(v7, v6));
  }
  else
  {
    WTF::RunLoop::main(a1);
    v9 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E34CFA08;
    v10[1] = v9;
    v17 = v10;
    WTF::RunLoop::dispatchAfter();
    v5 = v18;
    if (!v18)
      goto LABEL_11;
    v11 = (unsigned int *)((char *)v18 + 24);
    do
    {
      v12 = __ldaxr(v11);
      v8 = --v12 == 0;
    }
    while (__stlxr(v12, v11));
  }
  if (v8)
  {
    atomic_store(1u, (unsigned int *)v5 + 6);
    v14 = *((_QWORD *)v5 + 4);
    *((_QWORD *)v5 + 4) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    WTF::RunLoop::TimerBase::~TimerBase(v5);
    WTF::fastFree(v15, v16);
  }
LABEL_11:
  result = (uint64_t)v17;
  if (v17)
    return (*(uint64_t (**)(_QWORD *))(*v17 + 8))(v17);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34CFA08;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 8), 0);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WebKit::ProcessThrottlerActivity **a1)
{
  void *v2;

  *a1 = (WebKit::ProcessThrottlerActivity *)off_1E34CFA08;
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](a1 + 1, 0);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0>(WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34CFA30;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0>(WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34CFA30;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::AuxiliaryProcess::MainThreadPing,WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0>(WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;

  WTF::RunLoop::main((WTF::RunLoop *)a1);
  v4 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v2 = &off_1E34CFA58;
  *(_OWORD *)(v2 + 8) = v4;
  v5 = v2;
  WTF::RunLoop::dispatch();
  result = v5;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34CFA58;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34CFA58;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::AuxiliaryProcessProxy::checkForResponsiveness(WTF::CompletionHandler<void ()(void)> &&,WebKit::AuxiliaryProcessProxy::UseLazyStop)::$_0::operator()(void)::{lambda(void)#1},void>::call(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  v1 = result;
  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = (unsigned int *)(v3 + 16);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      WebKit::ResponsivenessTimer::stop((_BYTE *)(v3 + 56));
      result = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
    }
  }
  v6 = *((_QWORD *)v1 + 2);
  if (v6)
  {
    *((_QWORD *)v1 + 2) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

void IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::optional<WTF::String>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> const&>(uint64_t a1, _QWORD **a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  void *v19;

  if (*a2)
    v4 = *((_DWORD *)*a2 - 3);
  else
    v4 = 0;
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 + 4;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 < v6 + 4)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    v18 = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (v18 == (char *)-1)
    {
      __break(0xC471u);
      return;
    }
    v9 = v18;
    memcpy(v18, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v19 = *(void **)(a1 + 528);
    if (v19 != (void *)(a1 + 16))
      munmap(v19, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v17;
    v5 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v9 = *(char **)(a1 + 528);
  }
  bzero(&v9[v5], v6 - v5);
  *(_QWORD *)(a1 + 544) = v7;
  v10 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v6);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  v11 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
  v12 = v11;
  v14 = v13;
  if (*a2)
    v15 = (uint64_t)&(*a2)[3 * *((unsigned int *)*a2 - 1)];
  else
    v15 = 0;
  if ((uint64_t *)v15 != v11)
  {
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v12);
      IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, (uint64_t)(v12 + 1));
      while (1)
      {
        v12 += 3;
        if (v12 == v14)
          break;
        if ((unint64_t)(*v12 + 1) > 1)
          goto LABEL_15;
      }
      v12 = v14;
LABEL_15:
      ;
    }
    while (v12 != (uint64_t *)v15);
  }
}

void IPC::ArgumentCoder<WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits> const&>(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  WTF **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  void *v23;

  if (*a2)
    v4 = *(_DWORD *)(*a2 - 12);
  else
    v4 = 0;
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v6 + 4;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 < v6 + 4)
  {
    v20 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v21 = v20;
      v20 *= 2;
    }
    while (v21 < v7);
    v22 = (char *)mmap(0, v21, 3, 4098, -1, 0);
    if (v22 == (char *)-1)
    {
      __break(0xC471u);
      return;
    }
    v9 = v22;
    memcpy(v22, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v23 = *(void **)(a1 + 528);
    if (v23 != (void *)(a1 + 16))
      munmap(v23, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v21;
    v5 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v9 = *(char **)(a1 + 528);
  }
  bzero(&v9[v5], v6 - v5);
  *(_QWORD *)(a1 + 544) = v7;
  v10 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v6);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  v13 = WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::begin(a2, v11, v12);
  v14 = (uint64_t *)v13;
  v16 = v15;
  if (*a2)
    v17 = *a2 + 32 * *(unsigned int *)(*a2 - 4);
  else
    v17 = 0;
  if ((WTF **)v17 != v13)
  {
    do
    {
      IPC::ArgumentCoder<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,void>::encode<IPC::Encoder,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>> const&>(a1, v14);
      while (1)
      {
        v14 += 4;
        if (v14 == v16)
          break;
        if ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>((WTF **)v14, v18, v19) & 1) == 0&& *v14 != -1)
        {
          goto LABEL_16;
        }
      }
      v14 = v16;
LABEL_16:
      ;
    }
    while (v14 != (uint64_t *)v17);
  }
}

WTF **WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::begin(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;

  v3 = *a1;
  if (!*a1)
    return 0;
  if (*(_DWORD *)(v3 - 12))
    return WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::makeConstIterator(a1, v3, a3);
  return (WTF **)(v3 + 32 * *(unsigned int *)(v3 - 4));
}

WTF **WTF::HashTable<std::pair<WTF::String,WTF::String>,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashMap<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>,WTF::DefaultHash<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::pair<WTF::String,WTF::String>>,WTF::HashTraits<std::optional<WTF::String>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WTF::String>>>::makeConstIterator(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  WTF **v6;

  v3 = (WTF **)a2;
  v4 = *a1;
  if (*a1)
    v5 = *(unsigned int *)(v4 - 4);
  else
    v5 = 0;
  v6 = (WTF **)(v4 + 32 * v5);
  if (v6 != (WTF **)a2)
  {
    while ((WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WTF::String>>,false>::isEmptyValue<std::pair<WTF::String,WTF::String>>(v3, a2, a3) & 1) != 0|| *v3 == (WTF *)-1)
    {
      v3 += 4;
      if (v3 == v6)
        return v6;
    }
  }
  return v3;
}

void IPC::ArgumentCoder<WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>>,void>::encode<IPC::Encoder,WTF::KeyValuePair<std::pair<WTF::String,WTF::String>,std::optional<WTF::String>> const&>(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2 + 1);
  IPC::ArgumentCoder<std::optional<WTF::String>,void>::encode<IPC::Encoder,std::optional<WTF::String> const&>(a1, (uint64_t)(a2 + 2));
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::BackgroundProcessResponsivenessTimer::*&)(void),WebKit::BackgroundProcessResponsivenessTimer*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(WTF **a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v8 = 0;
  v9 = 0;
  v4 = WebKit::Site::operator==(a1, &v8, a3);
  v5 = v9;
  v9 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

uint64_t WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::Site>>,WebKit::Site>@<X0>(const WTF::StringImpl **this@<X1>, uint64_t result@<X0>, unsigned int **a3@<X8>)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  WTF **v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;

  v4 = *(_QWORD *)result;
  if (!*(_QWORD *)result
    || (v6 = *(_DWORD *)(v4 - 8),
        v7 = WebKit::Site::hash(this) & v6,
        v8 = (WTF **)(v4 + 24 * v7),
        result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(v8, v9, v10), (result & 1) != 0))
  {
LABEL_7:
    v14 = 0;
  }
  else
  {
    v13 = 1;
    while (1)
    {
      if (*v8 != (WTF *)-1)
      {
        result = WebKit::Site::operator==(v8, this, v12);
        if ((result & 1) != 0)
          break;
      }
      v7 = ((_DWORD)v7 + v13) & v6;
      v8 = (WTF **)(v4 + 24 * v7);
      result = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(v8, v11, v12);
      ++v13;
      if ((result & 1) != 0)
        goto LABEL_7;
    }
    v14 = *(unsigned int **)(v4 + 24 * v7 + 16);
    if (v14)
    {
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }
  *a3 = v14;
  return result;
}

void WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::rehash(a1, v3);
}

void WTF::HashTable<WebKit::Site,WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::Site>,WTF::HashMap<WebKit::Site,WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::Site>,WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::Site>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  WTF **v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  uint64_t v43;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v6;
  v10 = v6 + 16;
  if (a2)
    bzero((void *)(v6 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v11 = 0;
    v12 = v4;
    v43 = v4;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v3 + 24 * v11);
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>((WTF **)(v3 + 24 * v11), (uint64_t)v7, v8))
        {
          v14 = v3 + 24 * v11;
          v15 = *(unsigned int **)(v14 + 16);
          *(_QWORD *)(v14 + 16) = 0;
          if (v15)
          {
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              atomic_store(1u, v15);
              WTF::fastFree((WTF *)v15, v7);
            }
          }
          v18 = v13[1];
          v13[1] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v7);
            else
              *(_DWORD *)v18 -= 2;
          }
          v33 = *v13;
          *v13 = 0;
          if (!v33)
            goto LABEL_55;
          if (*(_DWORD *)v33 == 2)
          {
LABEL_54:
            WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v7);
            goto LABEL_55;
          }
          *(_DWORD *)v33 -= 2;
        }
        else
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = WebKit::Site::hash((WTF::StringImpl **)(v3 + 24 * v11));
          v22 = 0;
          do
          {
            v23 = v21 & v20;
            v24 = (WTF **)(v19 + 24 * (v21 & v20));
            v25 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<WebKit::Site>,false>::isEmptyValue<WebKit::Site>(v24, (uint64_t)v7, v8);
            v21 = ++v22 + v23;
          }
          while (!v25);
          v26 = v19 + 24 * v23;
          v29 = *(unsigned int **)(v26 + 16);
          v28 = (_QWORD *)(v26 + 16);
          v27 = v29;
          *v28 = 0;
          if (v29)
          {
            do
            {
              v30 = __ldaxr(v27);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v27));
            if (!v31)
            {
              atomic_store(1u, v27);
              WTF::fastFree((WTF *)v27, v7);
            }
          }
          v32 = v24[1];
          v24[1] = 0;
          v12 = v43;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v7);
            else
              *(_DWORD *)v32 -= 2;
          }
          v34 = *v24;
          *v24 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v7);
            else
              *(_DWORD *)v34 -= 2;
          }
          v35 = *v13;
          if (*v13)
            *(_DWORD *)v35 += 2;
          *v24 = v35;
          v36 = v13[1];
          if (v36)
            *(_DWORD *)v36 += 2;
          v24[1] = v36;
          v37 = v3 + 24 * v11;
          v38 = *(_QWORD *)(v37 + 16);
          *(_QWORD *)(v37 + 16) = 0;
          *v28 = v38;
          v39 = *(unsigned int **)(v37 + 16);
          *(_QWORD *)(v37 + 16) = 0;
          if (v39)
          {
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
            {
              atomic_store(1u, v39);
              WTF::fastFree((WTF *)v39, v7);
            }
          }
          v42 = v13[1];
          v13[1] = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v7);
            else
              *(_DWORD *)v42 -= 2;
          }
          v33 = *v13;
          *v13 = 0;
          if (!v33)
            goto LABEL_55;
          if (*(_DWORD *)v33 == 2)
            goto LABEL_54;
          *(_DWORD *)v33 -= 2;
        }
      }
LABEL_55:
      if (++v11 == v12)
        goto LABEL_58;
    }
  }
  if (v3)
LABEL_58:
    WTF::fastFree((WTF *)(v3 - 16), v7);
}

unsigned int *WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::makeKeyImpl<WebKit::WebPageProxy>(unsigned int **a1, uint64_t a2)
{
  void *v4;
  unsigned int *result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  result = *(unsigned int **)(a2 + 24);
  do
    v6 = __ldaxr(result);
  while (__stlxr(v6 + 1, result));
  do
    v7 = __ldaxr(result);
  while (__stlxr(v7 + 1, result));
  *a1 = result;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v4);
    }
  }
  return result;
}

BOOL WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _BOOL8 v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v14;
  int v15;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
    {
      v9 = 0;
      goto LABEL_21;
    }
    v5 = 0;
    v6 = v4 - 1;
    do
    {
      v7 = v3 + 16 * v6;
      if ((unint64_t)(*(_QWORD *)v7 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v7 + 8))
      {
        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>::customDeleteBucket(v7, a2);
        ++v5;
      }
    }
    while ((unint64_t)v6--);
    v3 = *(_QWORD *)a1;
    v9 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v11 = *(_DWORD *)(v10 - 12);
      else
        v11 = 0;
      *(_DWORD *)(v10 - 12) = v11 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v12 = *(_DWORD *)(v3 - 4);
      if (v12 >= 9 && 6 * *(_DWORD *)(v3 - 12) < v12)
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v14 = 0;
          goto LABEL_25;
        }
LABEL_22:
        v14 = *(_DWORD *)(v3 - 12);
        v15 = 0x7FFFFFFF;
        if (v14 >= 0x7FFFFFFF)
          goto LABEL_26;
        goto LABEL_25;
      }
LABEL_21:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_22;
    }
  }
  else
  {
    v9 = 0;
  }
  v14 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_25:
  v15 = v14;
LABEL_26:
  *(_DWORD *)(a1 + 12) = 2 * v15;
  return v9;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_9;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_7:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_7;
LABEL_9:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_10:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v8, 0);
}

uint64_t *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>::customDeleteBucket(uint64_t a1, void *a2)
{
  unsigned int *v2;
  uint64_t *result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    do
    {
      v4 = __ldaxr(v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v2));
    if (!v5)
    {
      atomic_store(1u, v2);
      v6 = a1;
      WTF::fastFree((WTF *)v2, a2);
      a1 = v6;
    }
  }
  *(_QWORD *)a1 = -1;
  result = *(uint64_t **)(a1 + 8);
  if (result)
    return (uint64_t *)WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(result, a2);
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unsigned int **)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15 != (unsigned int *)-1)
      {
        if (v16)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = ((unint64_t)v16 + ~((_QWORD)v16 << 32)) ^ (((unint64_t)v16 + ~((_QWORD)v16 << 32)) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = v19 + 16 * v26;
          v30 = (_QWORD *)(v28 + 8);
          v29 = *(uint64_t **)(v28 + 8);
          if (v29)
          {
            WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(v29, v10);
            v31 = *(unsigned int **)v28;
            *(_QWORD *)v28 = 0;
            if (v31)
            {
              do
              {
                v32 = __ldaxr(v31);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, v31));
              if (!v33)
              {
                atomic_store(1u, v31);
                WTF::fastFree((WTF *)v31, v10);
              }
            }
          }
          else
          {
            *(_QWORD *)v28 = 0;
          }
          v34 = *v15;
          *v15 = 0;
          *(_QWORD *)v28 = v34;
          v35 = v6 + 16 * v13;
          *v30 = 0;
          v36 = *(_QWORD *)(v35 + 8);
          *(_QWORD *)(v35 + 8) = 0;
          *v30 = v36;
          v37 = *(uint64_t **)(v35 + 8);
          if (v37)
            WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(v37, v10);
          v38 = *v15;
          *v15 = 0;
          if (v38)
          {
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              atomic_store(1u, v38);
              WTF::fastFree((WTF *)v38, v10);
            }
          }
          if (v15 == a3)
            v14 = v28;
        }
        else
        {
          if (*(_QWORD *)(v6 + 16 * v13 + 8))
          {
            WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::deallocateTable(*(uint64_t **)(v6 + 16 * v13 + 8), v10);
            v16 = *v15;
          }
          *v15 = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, v10);
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v2 += 16;
    result[1] = v2;
    v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 16;
        result[1] = v2;
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v26 = v6 + 8 * v20;
        goto LABEL_31;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v16;
    }
  }
  *a3 = 0;
  result = (uint64_t *)*v14;
  *v14 = v9;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_24:
      result = WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::expand(a2, v14);
      v14 = result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_24;
  }
  v26 = v21 + 8 * v24;
  v25 = 1;
LABEL_31:
  *v5 = (uint64_t)v14;
  v5[1] = v26;
  *((_BYTE *)v5 + 16) = v25;
  return result;
}

_QWORD *WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int *WTF::KeyValuePairHashTraits<WTF::HashTraits<WebKit::Site>,WTF::HashTraits<WTF::WeakPtr<WebKit::FrameProcess,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int *result;
  unsigned int v6;
  unsigned int v7;

  v3 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = *(unsigned int **)(a1 + 16);
  *(_QWORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
  {
    do
    {
      v6 = __ldaxr(result);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, result));
    if (!v7)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  for (i = 1; ; ++i)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return v2 + 16 * *(unsigned int *)(v2 - 4);
      if (v10 == *a2)
        break;
    }
    v7 = (v9 + i) & v3;
  }
  return v2 + 16 * v9;
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::remove(uint64_t *a1, _QWORD **a2)
{
  _QWORD *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = *a2;
  *a2 = (_QWORD *)-1;
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<std::unique_ptr<WebKit::RemotePageProxy>,std::unique_ptr<WebKit::RemotePageProxy>,WTF::IdentityExtractor,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

WebKit::DeviceIdHashSaltStorage *WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  WebKit::DeviceIdHashSaltStorage *result;
  WTF *v3;
  void *v4;

  result = *(WebKit::DeviceIdHashSaltStorage **)(a1 + 8);
  if (result)
  {
    WebKit::DeviceIdHashSaltStorage::~DeviceIdHashSaltStorage(result, a2);
    return (WebKit::DeviceIdHashSaltStorage *)WTF::fastFree(v3, v4);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::completePendingHandler(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WebCore::SecurityOriginData *v4;

  *a1 = &off_1E34CFAD0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebCore::SecurityOriginData *)a1[1];
  if (v4)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::completePendingHandler(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WebCore::SecurityOriginData *v4;

  *(_QWORD *)this = &off_1E34CFAD0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebCore::SecurityOriginData *)*((_QWORD *)this + 1);
  if (v4)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::completePendingHandler(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::DeviceIdHashSaltStorage(WTF::String const&)::$_0,void,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  *a1 = &off_1E34CFAF8;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::DeviceIdHashSaltStorage(WTF::String const&)::$_0,void,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  *(_QWORD *)this = &off_1E34CFAF8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::DeviceIdHashSaltStorage(WTF::String const&)::$_0,void,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&>::call(uint64_t a1, WTF *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  int v12;
  int v13;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v3;
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  *(_BYTE *)(v2 + 24) = 1;
  v5 = *(_QWORD **)(v2 + 32);
  v11 = v5;
  v7 = *(_DWORD *)(v2 + 40);
  v6 = *(unsigned int *)(v2 + 44);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  v12 = v7;
  v13 = v6;
  if ((_DWORD)v6)
  {
    v8 = 8 * v6;
    do
    {
      v9 = *v5;
      *v5++ = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v8 -= 8;
    }
    while (v8);
  }
  return WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::loadStorageFromDisk(WTF::CompletionHandler<void ()(WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;

  *a1 = &off_1E34CFB20;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::loadStorageFromDisk(WTF::CompletionHandler<void ()(WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  *(_QWORD *)this = &off_1E34CFB20;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::loadStorageFromDisk(WTF::CompletionHandler<void ()(WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&)> &&)::$_0,void>::call(uint64_t a1, const WTF::String *a2)
{
  WTF::FileSystemImpl *v3;
  const WTF::String *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  const WTF::String *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  char v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  WTF *v22;
  NSObject *v23;
  uint64_t v24;
  WTF *v25;
  NSObject *v26;
  NSObject *v27;
  char *v28;
  WTF::StringImpl *v29;
  NSObject *v30;
  uint64_t result;
  WTF::StringImpl *v32;
  const WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  WTF **v41;
  int i;
  unsigned int v43;
  WTF **v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  WTF *v53;
  NSObject *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  WTF *v62;
  char *v63;
  uint64_t v64;
  WTF::RunLoop *v65;
  uint64_t v66;
  _QWORD *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  WTF *v76;
  WTF::StringImpl *v77;
  _BYTE v78[12];
  _BYTE v79[24];
  int v80;
  char v81;
  _BYTE buf[14];
  int v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v3 = (WTF::FileSystemImpl *)(*(_QWORD *)(a1 + 8) + 48);
  WTF::FileSystemImpl::makeAllDirectories(v3, a2);
  v75 = 0;
  WTF::FileSystemImpl::listDirectory(v3, v4);
  if (!v74)
  {
    v64 = 0;
LABEL_141:
    v65 = (WTF::RunLoop *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v73, v5);
    WTF::RunLoop::main(v65);
    v66 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    v67 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v67 = &off_1E34CFB48;
    v67[1] = v64;
    v67[2] = v66;
    *(_QWORD *)buf = v67;
    WTF::RunLoop::dispatch();
    result = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return result;
  }
  v6 = v73;
  v7 = v73 + 8 * v74;
  while (1)
  {
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::URL::fileURLWithFileSystemPath();
    WTF::URL::lastPathComponent((WTF::URL *)buf);
    if ((v8 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    v10 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (v71)
      break;
    v19 = qword_1ECE71050;
    if (os_log_type_enabled((os_log_t)qword_1ECE71050, OS_LOG_TYPE_ERROR))
    {
      v11 = 0;
      goto LABEL_23;
    }
LABEL_105:
    v58 = v72;
    v72 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v58 -= 2;
    }
    v6 += 8;
    if (v6 == v7)
    {
      v64 = v75;
      goto LABEL_141;
    }
  }
  v11 = *((_DWORD *)v71 + 1);
  if (v11 != 48)
  {
    v19 = qword_1ECE71050;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71050, OS_LOG_TYPE_ERROR))
      goto LABEL_101;
LABEL_23:
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v11;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = 48;
    _os_log_error_impl(&dword_196BCC000, v19, OS_LOG_TYPE_ERROR, "DeviceIdHashSaltStorage: The length of the hash salt (%d) is different to the length of the hash salts defined in WebKit (%d)", buf, 0xEu);
    goto LABEL_101;
  }
  WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)&v72, v9);
  if (!(_BYTE)v12)
  {
    v20 = qword_1ECE71050;
    if (os_log_type_enabled((os_log_t)qword_1ECE71050, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      v21 = *(_QWORD *)v79 ? *(_QWORD *)v79 + 16 : 0;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v21;
      _os_log_error_impl(&dword_196BCC000, v20, OS_LOG_TYPE_ERROR, "DeviceIdHashSaltStorage: Impossible to get the file size of: '%s'", buf, 0xCu);
      v22 = *(WTF **)v79;
      *(_QWORD *)v79 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          WTF::fastFree(v22, v5);
        else
          --*(_DWORD *)v22;
      }
    }
    goto LABEL_101;
  }
  WebKit::createForFile((WebKit *)&v72, v12, &v70);
  v13 = v70;
  if (!v70)
  {
    v23 = qword_1ECE71050;
    if (os_log_type_enabled((os_log_t)qword_1ECE71050, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      if (*(_QWORD *)v79)
        v24 = *(_QWORD *)v79 + 16;
      else
        v24 = 0;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v24;
      _os_log_error_impl(&dword_196BCC000, v23, OS_LOG_TYPE_ERROR, "DeviceIdHashSaltStorage: Impossible to access the file to restore the hash salt: '%s'", buf, 0xCu);
      v25 = *(WTF **)v79;
      *(_QWORD *)v79 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1)
          WTF::fastFree(v25, v5);
        else
          --*(_DWORD *)v25;
      }
      goto LABEL_99;
    }
LABEL_101:
    v57 = v71;
    v71 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)v57 -= 2;
    }
    goto LABEL_105;
  }
  WebKit::getSecurityOriginData((uint64_t)buf, (uint64_t)"origin", 7, v70);
  if (!v84)
  {
    v26 = qword_1ECE71050;
    if (os_log_type_enabled((os_log_t)qword_1ECE71050, OS_LOG_TYPE_ERROR))
    {
      WTF::String::utf8();
      v59 = *(_QWORD *)v78 ? *(_QWORD *)v78 + 16 : 0;
      *(_DWORD *)v79 = 136315138;
      *(_QWORD *)&v79[4] = v59;
      _os_log_error_impl(&dword_196BCC000, v26, OS_LOG_TYPE_ERROR, "DeviceIdHashSaltStorage: The security origin data in the file is not correct: '%s'", v79, 0xCu);
      v60 = *(WTF **)v78;
      *(_QWORD *)v78 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 1)
          WTF::fastFree(v60, v5);
        else
          --*(_DWORD *)v60;
      }
    }
    *(_QWORD *)v78 = 0;
    goto LABEL_52;
  }
  WebKit::getSecurityOriginData((uint64_t)v79, (uint64_t)"parentOrigin", 13, v13);
  if (!v81)
  {
    v27 = qword_1ECE71050;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71050, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    WTF::String::utf8();
    v28 = v77 ? (char *)v77 + 16 : 0;
    *(_DWORD *)v78 = 136315138;
    *(_QWORD *)&v78[4] = v28;
    _os_log_error_impl(&dword_196BCC000, v27, OS_LOG_TYPE_ERROR, "DeviceIdHashSaltStorage: The parent security origin data in the file is not correct: '%s'", v78, 0xCu);
    v29 = v77;
    v77 = 0;
    if (!v29)
      goto LABEL_48;
LABEL_130:
    if (*(_DWORD *)v29 == 1)
      WTF::fastFree(v29, v5);
    else
      --*(_DWORD *)v29;
LABEL_48:
    *(_QWORD *)v78 = 0;
    goto LABEL_49;
  }
  v77 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = (*(uint64_t (**)(uint64_t, _BYTE *, WTF::StringImpl **))(*(_QWORD *)v13 + 72))(v13, v78, &v77);
  v16 = *(WTF::StringImpl **)v78;
  *(_QWORD *)v78 = 0;
  if (!v16)
    goto LABEL_18;
  if (*(_DWORD *)v16 == 2)
  {
    WTF::StringImpl::destroy(v16, v14);
    if ((v15 & 1) != 0)
      goto LABEL_19;
LABEL_47:
    v30 = qword_1ECE71050;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71050, OS_LOG_TYPE_ERROR))
      goto LABEL_48;
    WTF::String::utf8();
    v63 = v76 ? (char *)v76 + 16 : 0;
    *(_DWORD *)v78 = 136315138;
    *(_QWORD *)&v78[4] = v63;
    _os_log_error_impl(&dword_196BCC000, v30, OS_LOG_TYPE_ERROR, "DeviceIdHashSaltStorage: The last time used was not correctly restored for: '%s'", v78, 0xCu);
    v29 = v76;
    v76 = 0;
    if (!v29)
      goto LABEL_48;
    goto LABEL_130;
  }
  *(_DWORD *)v16 -= 2;
LABEL_18:
  if ((v15 & 1) == 0)
    goto LABEL_47;
LABEL_19:
  if (!v84 || !v81)
    std::__throw_bad_optional_access[abi:sn180100]();
  v17 = WTF::fastMalloc((WTF *)0x50);
  WTF::WallTime::now((WTF::WallTime *)v17);
  *(_BYTE *)v17 = 0;
  *(_DWORD *)(v17 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v17, (uint64_t)buf);
  *(_BYTE *)(v17 + 32) = 0;
  *(_DWORD *)(v17 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v17 + 32, (uint64_t)v79);
  v18 = v71;
  v71 = 0;
  *(_QWORD *)(v17 + 64) = v18;
  *(_QWORD *)v78 = v17;
  *(_QWORD *)(v17 + 72) = v77;
LABEL_49:
  if (v81 && v80 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E34CF8F8[v80])(&v77, v79);
LABEL_52:
  if (v84 && v83 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E34CF8F8[v83])(v79, buf);
  if (!*(_QWORD *)v78)
    goto LABEL_99;
  WebCore::SecurityOriginData::toString(*(WebCore::SecurityOriginData **)v78);
  WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(*(_QWORD *)v78 + 32));
  *(_QWORD *)buf = v69;
  *(_QWORD *)v79 = v68;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v79, &v77);
  if (v77)
  {
    v34 = v68;
    v68 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v32);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = v69;
    v69 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v32);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = *(_QWORD *)v78;
    *(_QWORD *)v78 = 0;
    *(_QWORD *)buf = v36;
    v37 = v75;
    if (v75
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v75, 0), (v37 = v75) != 0))
    {
      v38 = *(_DWORD *)(v37 - 8);
    }
    else
    {
      v38 = 0;
    }
    v39 = *((_DWORD *)v77 + 4);
    if (v39 >= 0x100)
      v40 = v39 >> 8;
    else
      v40 = WTF::StringImpl::hashSlowCase(v77);
    v41 = 0;
    for (i = 1; ; ++i)
    {
      v43 = v40 & v38;
      v44 = (WTF **)(v37 + 16 * (v40 & v38));
      v45 = *v44;
      if (*v44 == (WTF *)-1)
      {
        v41 = (WTF **)(v37 + 16 * v43);
      }
      else
      {
        if (!v45)
        {
          if (v41)
          {
            *v41 = 0;
            v41[1] = 0;
            --*(_DWORD *)(v37 - 16);
            v44 = v41;
          }
          WTF::String::operator=(v44, (WTF::StringImpl *)&v77);
          v46 = v44[1];
          v47 = *(WTF **)buf;
          *(_QWORD *)buf = 0;
          v44[1] = v47;
          if (v46)
            std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100]((_DWORD)v44 + 8, v46);
          v48 = v75;
          if (v75)
            v49 = *(_DWORD *)(v75 - 12) + 1;
          else
            v49 = 1;
          *(_DWORD *)(v75 - 12) = v49;
          v51 = (*(_DWORD *)(v48 - 16) + v49);
          v52 = *(unsigned int *)(v48 - 4);
          if (v52 > 0x400)
          {
            if (v52 <= 2 * v51)
LABEL_87:
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v75, v44);
          }
          else if (3 * v52 <= 4 * v51)
          {
            goto LABEL_87;
          }
          v50 = 0;
LABEL_89:
          v53 = *(WTF **)buf;
          *(_QWORD *)buf = 0;
          if (v53)
            std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100]((int)buf, v53);
          if (v50)
          {
            v54 = qword_1ECE71050;
            if (os_log_type_enabled((os_log_t)qword_1ECE71050, OS_LOG_TYPE_ERROR))
            {
              WTF::String::utf8();
              v61 = *(_QWORD *)v79 ? *(_QWORD *)v79 + 16 : 0;
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v61;
              _os_log_error_impl(&dword_196BCC000, v54, OS_LOG_TYPE_ERROR, "DeviceIdHashSaltStorage: There are two files with different hash salts for the same origin: '%s'", buf, 0xCu);
              v62 = *(WTF **)v79;
              *(_QWORD *)v79 = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 1)
                  WTF::fastFree(v62, v53);
                else
                  --*(_DWORD *)v62;
              }
            }
          }
          v55 = v77;
          v77 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, v53);
            else
              *(_DWORD *)v55 -= 2;
          }
          v5 = *(void **)v78;
          *(_QWORD *)v78 = 0;
          if (v5)
            std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100]((int)v78, (WTF *)v5);
LABEL_99:
          v56 = v70;
          v70 = 0;
          if (v56)
            (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
          goto LABEL_101;
        }
        if ((WTF::equal(v45, v77, v33) & 1) != 0)
        {
          v50 = 1;
          goto LABEL_89;
        }
      }
      v40 = i + v43;
    }
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _QWORD *v16;
  WTF *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  _QWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF **v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = *((_DWORD *)v14 + 4);
          if (v20 >= 0x100)
            v21 = v20 >> 8;
          else
            v21 = WTF::StringImpl::hashSlowCase(v14);
          v22 = 0;
          do
          {
            v23 = v21 & v19;
            v21 = ++v22 + v23;
          }
          while (*(_QWORD *)(v18 + 16 * v23));
          v24 = v18 + 16 * v23;
          v26 = (_QWORD *)(v24 + 8);
          v25 = *(WTF **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v25)
          {
            std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100]((int)v26, v25);
            v28 = *(WTF::StringImpl **)v24;
            *(_QWORD *)v24 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v27);
              else
                *(_DWORD *)v28 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v24 = 0;
          }
          v29 = *v13;
          *v13 = 0;
          *(_QWORD *)v24 = v29;
          v30 = v6 + 16 * v11;
          v32 = *(_QWORD *)(v30 + 8);
          v31 = (WTF **)(v30 + 8);
          *v31 = 0;
          *v26 = v32;
          v10 = *v31;
          *v31 = 0;
          if (v10)
            std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100]((int)v31, v10);
          v33 = *v13;
          *v13 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v10);
            else
              *(_DWORD *)v33 -= 2;
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v17 = *(WTF **)(v15 + 8);
          v16 = (_QWORD *)(v15 + 8);
          v10 = v17;
          *v16 = 0;
          if (v17)
          {
            std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100]((int)v16, v10);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v10);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::loadStorageFromDisk(WTF::CompletionHandler<void ()(WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1, WTF *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E34CFB48;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::loadStorageFromDisk(WTF::CompletionHandler<void ()(WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, WTF *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34CFB48;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::loadStorageFromDisk(WTF::CompletionHandler<void ()(WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(void)::{lambda(void)#2},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::storeHashSaltToDisk(WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin const&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  char v8;
  char v9;

  *(_QWORD *)a1 = &off_1E34CFB70;
  v3 = *(WTF::StringImpl **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E34CF8F8[v4])(&v8, a1 + 56);
  *(_DWORD *)(a1 + 80) = -1;
  v5 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))off_1E34CF8F8[v5])(&v9, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  v6 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::storeHashSaltToDisk(WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  char v8;
  char v9;

  *(_QWORD *)this = &off_1E34CFB70;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 20);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34CF8F8[v4])(&v8, (char *)this + 56);
  *((_DWORD *)this + 20) = -1;
  v5 = *((unsigned int *)this + 12);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E34CF8F8[v5])(&v9, (char *)this + 24);
  *((_DWORD *)this + 12) = -1;
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v6);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::storeHashSaltToDisk(WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin const&)::$_0,void>::call(double *a1)
{
  WebCore::SecurityOriginData *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t result;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v2 = (WebCore::SecurityOriginData *)(a1 + 3);
  WebCore::KeyedEncoder::encoder((WebCore::KeyedEncoder *)a1);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::SecurityOriginData::databaseIdentifier(v2);
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v14 + 80))(v14, &v16, &v15);
  v4 = v15;
  v15 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v16;
  v16 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::SecurityOriginData::databaseIdentifier((WebCore::SecurityOriginData *)(a1 + 7));
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v14 + 80))(v14, &v16, &v15);
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v16;
  v16 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **, double))(*(_QWORD *)v14 + 72))(v14, &v16, a1[12]);
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  WebKit::writeToDisk((uint64_t)&v14);
  v12 = v16;
  v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(WTF::StringBuilder *a1, uint64_t *a2)
{
  uint64_t v3;
  char *result;
  size_t v5;
  char *v6;
  uint64_t v7;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 || (v3 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v3 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v7 = *a2;
      return (char *)WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>::writeTo<char16_t>((uint64_t)&v7, result);
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEAB398]();
    if (result)
    {
      v5 = *(unsigned int *)(*a2 + 16);
      if ((_DWORD)v5)
      {
        v6 = (char *)(*a2 + 16 - v5);
        if ((_DWORD)v5 == 1)
          *result = *v6;
        else
          return (char *)memcpy(result, v6, v5);
      }
    }
  }
  return result;
}

uint64_t *WTF::CompletionHandler<void ()(void)>::CompletionHandler<WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin(WebCore::SecurityOrigin const&,WebCore::SecurityOrigin const&,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = *a2;
  *(_QWORD *)v4 = &off_1E34CFB98;
  *(_QWORD *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v4 + 16, (uint64_t)(a2 + 1));
  *(_BYTE *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 72) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v4 + 48, (uint64_t)(a2 + 5));
  v6 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(v4 + 80) = v6;
  *a1 = v4;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin(WebCore::SecurityOrigin const&,WebCore::SecurityOrigin const&,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  char v7;

  *(_QWORD *)a1 = &off_1E34CFB98;
  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E34CF8F8[v3])(&v6, a1 + 48);
  *(_DWORD *)(a1 + 72) = -1;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E34CF8F8[v4])(&v7, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin(WebCore::SecurityOrigin const&,WebCore::SecurityOrigin const&,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;

  *(_QWORD *)this = &off_1E34CFB98;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 18);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34CF8F8[v4])(&v7, (char *)this + 48);
  *((_DWORD *)this + 18) = -1;
  v5 = *((unsigned int *)this + 10);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E34CF8F8[v5])(&v8, (char *)this + 16);
  *((_DWORD *)this + 10) = -1;
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin(WebCore::SecurityOrigin const&,WebCore::SecurityOrigin const&,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::DeviceIdHashSaltStorage::completeDeviceIdHashSaltForOriginCall(*(uint64_t **)(a1 + 8), (WebCore::SecurityOriginData *)(a1 + 16), (WebCore::SecurityOriginData *)(a1 + 48), (uint64_t *)(a1 + 80));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::getDeviceIdHashSaltOrigins(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34CFBC0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::getDeviceIdHashSaltOrigins(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34CFBC0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WebCore::SecurityOriginData *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::getDeviceIdHashSaltOrigins(WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::DeviceIdHashSaltStorage::completePendingHandler(*(WTF::RunLoop **)(a1 + 8), (uint64_t *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteHashSaltFromDisk(WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;

  *a1 = &off_1E34CFBE8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteHashSaltFromDisk(WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin const&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;

  *(_QWORD *)this = &off_1E34CFBE8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v4);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteHashSaltFromDisk(WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin const&)::$_0,void>::call()
{
  const WTF::String *v0;
  WTF::StringImpl *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;

  WTF::FileSystemImpl::pathByAppendingComponent();
  WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)&v3, v0);
  result = v3;
  v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 27))
  {
    v5 = WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = v5;
      v8 = *(_QWORD *)a2;
      v9 = 32 * v6;
      do
      {
        *(_BYTE *)v7 = 0;
        *(_DWORD *)(v7 + 24) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v7, v8);
        v8 += 32;
        v7 += 32;
        v9 -= 32;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltForOrigins(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34CFC10;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltForOrigins(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E34CFC10;
  v3 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 16, a2);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltForOrigins(WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 25))
    return WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltForOrigins(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16), (uint64_t *)(a1 + 32));
  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_9;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_7:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_7;
LABEL_9:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_10:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8, 0);
}

void WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>>>::customDeleteBucket(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF *v3;
  _QWORD *v4;
  WTF *v5;

  WTF::HashTraits<WTF::String>::customDeleteBucket(a1, a2);
  v5 = a1[1];
  v4 = a1 + 1;
  v3 = v5;
  *v4 = 0;
  if (v5)
    std::default_delete<WebKit::DeviceIdHashSaltStorage::HashSaltForOrigin>::operator()[abi:sn180100]((int)v4, v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltOriginsModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34CFC38;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltOriginsModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34CFC38;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltOriginsModifiedSince(WTF::WallTime,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 25))
    return WebKit::DeviceIdHashSaltStorage::deleteDeviceIdHashSaltOriginsModifiedSince(*(_QWORD *)(a1 + 8), (uint64_t *)(a1 + 24), *(double *)(a1 + 16));
  v1 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,BOOL,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::inlineSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> const&,BOOL &>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  __int16 v26;
  char v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,BOOL>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,BOOL,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v25 = -1640531527;
  v26 = 0;
  v27 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v25, a2);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v25);
  v11 = result & v9;
  v12 = (_QWORD *)(v8 + 24 * (result & v9));
  v14 = *v12;
  v13 = v12[1];
  if (*(_OWORD *)v12 != 0)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == *a2 && v13 == a2[1])
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 4);
        else
          v24 = 0;
        *(_QWORD *)a4 = v12;
        *(_QWORD *)(a4 + 8) = v23 + 24 * v24;
        *(_BYTE *)(a4 + 16) = 0;
        *((_BYTE *)v12 + 16) = *a3;
        return result;
      }
      if (v13 == -1)
        v15 = v12;
      v11 = (v11 + v16) & v9;
      v12 = (_QWORD *)(v8 + 24 * v11);
      v14 = *v12;
      v13 = v12[1];
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v12 = v15;
    }
  }
  *(_OWORD *)v12 = *(_OWORD *)a2;
  *((_BYTE *)v12 + 16) = *a3;
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_21:
      result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,BOOL>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,BOOL,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, (__int128 *)v12);
      v12 = (_QWORD *)result;
      v19 = *a1;
      if (*a1)
        LODWORD(v22) = *(_DWORD *)(v19 - 4);
      else
        LODWORD(v22) = 0;
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_21;
  }
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v19 + 24 * v22;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,BOOL>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,BOOL,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t result;
  unsigned int v21;
  __int16 v22;
  char v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= 2 * v5);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    v12 = v5;
    do
    {
      v13 = (__int128 *)(v4 + 24 * v10);
      if (*((_QWORD *)v13 + 1) != -1 && *v13 != 0)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v21 = -1640531527;
        v22 = 0;
        v23 = 0;
        WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v21, (_QWORD *)(v4 + 24 * v10));
        v16 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v21);
        v17 = 0;
        do
        {
          v18 = v14 + 24 * (v16 & v15);
          v16 = ++v17 + (v16 & v15);
        }
        while (*(_OWORD *)v18 != 0);
        v19 = *v13;
        *(_QWORD *)(v18 + 16) = *((_QWORD *)v13 + 2);
        *(_OWORD *)v18 = v19;
        if (v13 == a2)
          v11 = v18;
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

void IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::OptionSet<WebKit::FindOptions> const&,unsigned int const&>,0ul,1ul,2ul>(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  _WORD *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  _DWORD *v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  char *v24;
  void *v25;

  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  v4 = **(_WORD **)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = (v5 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v7 = v6 + 2;
  v8 = *(_QWORD *)(a1 + 552);
  if (v8 < v6 + 2)
  {
    v18 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v7);
    v20 = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (v20 == (char *)-1)
      goto LABEL_18;
    v9 = v20;
    memcpy(v20, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v21 = *(void **)(a1 + 528);
    if (v21 != (void *)(a1 + 16))
      munmap(v21, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v9;
    *(_QWORD *)(a1 + 552) = v19;
    v5 = *(_QWORD *)(a1 + 544);
  }
  else
  {
    v9 = *(char **)(a1 + 528);
  }
  bzero(&v9[v5], v6 - v5);
  *(_QWORD *)(a1 + 544) = v7;
  v10 = (_WORD *)(*(_QWORD *)(a1 + 528) + v6);
  *(_QWORD *)(a1 + 536) = v10 + 1;
  *v10 = v4;
  v11 = **(_DWORD **)(a2 + 16);
  v12 = *(_QWORD *)(a1 + 544);
  v13 = (v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13 + 4;
  v15 = *(_QWORD *)(a1 + 552);
  if (v15 >= v13 + 4)
  {
    v16 = *(char **)(a1 + 528);
    goto LABEL_5;
  }
  v22 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v23 = v22;
    v22 *= 2;
  }
  while (v23 < v14);
  v24 = (char *)mmap(0, v23, 3, 4098, -1, 0);
  if (v24 == (char *)-1)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1972D8F38);
  }
  v16 = v24;
  memcpy(v24, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
  v25 = *(void **)(a1 + 528);
  if (v25 != (void *)(a1 + 16))
    munmap(v25, *(_QWORD *)(a1 + 552));
  *(_QWORD *)(a1 + 528) = v16;
  *(_QWORD *)(a1 + 552) = v23;
  v12 = *(_QWORD *)(a1 + 544);
LABEL_5:
  bzero(&v16[v12], v13 - v12);
  *(_QWORD *)(a1 + 544) = v14;
  v17 = (_DWORD *)(*(_QWORD *)(a1 + 528) + v13);
  *(_QWORD *)(a1 + 536) = v17 + 1;
  *v17 = v11;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindString,WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0>(WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34CFC60;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindString,WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0>(WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34CFC60;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::FindString,WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0>(WebKit::FindStringCallbackAggregator::~FindStringCallbackAggregator()::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  WTF *result;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  void *v10;
  _BYTE v11[16];
  unsigned __int8 v12;
  WTF *v13;
  int v14;
  char v15;

  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>>(a2, v11);
    if (v15)
    {
      v3 = v12;
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      v8 = v3 != 0;
      v9 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v9 + 16))(v9, v8);
      result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (v15)
      {
        result = v13;
        if (v13)
        {
          v13 = 0;
          v14 = 0;
          return (WTF *)WTF::fastFree(result, v10);
        }
      }
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112), *(_QWORD *)(a1 + 8), a1 + 16);
      v7 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 112) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112), *(_QWORD *)(a1 + 8), a1 + 16);
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[56])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v4[32];

  IPC::Decoder::decode<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(a1, (uint64_t)v4);
  if (v4[24])
  {
    IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((unint64_t *)a1, v4, a2);
  }
  else
  {
    *a2 = 0;
    a2[56] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>(unint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  void *v6;
  WTF *v7;
  WTF *v8;
  int v9;
  char v10;

  IPC::Decoder::decode<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  if (v10)
  {
    IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)a2, (uint64_t *)&v8, a3);
    if (v10)
    {
      v7 = v8;
      if (v8)
      {
        v8 = 0;
        v9 = 0;
        WTF::fastFree(v7, v6);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[56] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _BYTE *a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    v8 = (unsigned int *)(v5 + v6);
    a1[2] = v8 + 1;
    if (v5)
    {
      v16 = *v8 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>(a1, a2, a3, (uint64_t)&v16, a4);
      return;
    }
    v9 = v4;
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v13 = a1;
      v15 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v5, v4);
        a1 = v13;
        a4 = v15;
        v10 = *v13;
        v9 = v13[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v12 = a1[3];
  if (v12)
  {
    if (v9)
    {
      v14 = a4;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, v10);
      a4 = v14;
    }
  }
  *a4 = 0;
  a4[56] = 0;
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v5 >= v7 && v5 - v7 > 3)
  {
    v9 = (unsigned int *)(v6 + v7);
    a1[2] = v9 + 1;
    if (v6)
    {
      v17 = *v9 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int>(a1, a2, a3, a4, (uint64_t)&v17, a5);
      return;
    }
    v10 = v5;
    v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v14 = a1;
      v16 = a5;
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v6, v5);
        a1 = v14;
        a5 = v16;
        v11 = *v14;
        v10 = v14[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13)
  {
    if (v10)
    {
      v15 = a5;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
      a5 = v15;
    }
  }
  *a5 = 0;
  a5[56] = 0;
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  __int16 v23;

  v8 = a1[1];
  v9 = *a1;
  v10 = a1[2] - *a1;
  if (v8 <= v10)
  {
    v13 = 0;
    v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      v19 = a1;
      v22 = a6;
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        a1 = v19;
        a6 = v22;
        v14 = *v19;
        v13 = v19[1];
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_7;
  }
  v11 = (unsigned __int8 *)(v9 + v10);
  a1[2] = v11 + 1;
  if (!v9)
  {
    v13 = v8;
    v14 = 0;
LABEL_7:
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      v18 = a1;
      v21 = a6;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v14, v13);
        a1 = v18;
        a6 = v21;
        v9 = *v18;
        v8 = v18[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    goto LABEL_8;
  }
  v12 = *v11;
  if (v12 < 2)
  {
    v23 = (v12 != 0) | 0x100;
    IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>(a2, a3, a4, a5, &v23, (uint64_t)a6);
    return;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  v17 = a1[3];
  if (v17)
  {
    if (v8)
    {
      v20 = a6;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v9);
      a6 = v20;
    }
  }
  *a6 = 0;
  a6[56] = 0;
}

void IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>,void>::decode<IPC::Decoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,int,BOOL>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _BYTE *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 24) && *((_BYTE *)a2 + 16) && *(_BYTE *)(a3 + 4) && *(_BYTE *)(a4 + 4) && a5[1])
  {
    *(_OWORD *)a6 = *(_OWORD *)a1;
    v6 = *a2;
    *(_QWORD *)(a6 + 16) = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a6 + 24) = v6;
    v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    *(_QWORD *)(a6 + 32) = v7;
    LODWORD(v6) = *(_DWORD *)a4;
    *(_DWORD *)(a6 + 40) = *(_DWORD *)a3;
    *(_DWORD *)(a6 + 44) = v6;
    *(_BYTE *)(a6 + 48) = *a5;
    *(_BYTE *)(a6 + 56) = 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t WebKit::WebPaymentCoordinator::platformAvailablePaymentNetworks@<X0>(WebKit::WebPaymentCoordinator *this@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = (void *)objc_msgSend((id)((uint64_t (*)(WebKit::WebPaymentCoordinator *))*MEMORY[0x1E0DCE020])(this), "availableNetworks");
  result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  v5 = result;
  if (result)
  {
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        MEMORY[0x19AEABCC8](&v11, *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v7));
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v11, (uint64_t)&v10);
        v9 = v11;
        v11 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, v8);
          else
            *(_DWORD *)v9 -= 2;
        }
        ++v7;
      }
      while (v5 != v7);
      result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_1972D9790(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  WTF::StringImpl ***v12;

  if (*v12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v12, a2);
  _Unwind_Resume(exception_object);
}

double WebKit::RemoteGraphicsContextGLProxy::platformCreate@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v6 = WTF::fastMalloc((WTF *)0xE0);
  v7 = WebKit::RemoteGraphicsContextGLProxy::RemoteGraphicsContextGLProxy(v6, a1, a2);
  *(_QWORD *)v7 = off_1E34CFCB0;
  *(_QWORD *)(v7 + 16) = &unk_1E34D0608;
  *(_QWORD *)(v7 + 64) = &off_1E34CFCB0[591];
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 200) = 0u;
  LOBYTE(a1) = *(_BYTE *)a1;
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E34D0F58;
  *(_QWORD *)&result = 1;
  *(_QWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 24) = a1 ^ 1;
  *(_QWORD *)(v6 + 216) = v8;
  *a3 = v6;
  return result;
}

void sub_1972D9898(_Unwind_Exception *a1)
{
  WebKit::RemoteGraphicsContextGLProxy *v1;
  _QWORD *v2;
  _QWORD *v3;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  void *v11;

  while (1)
  {
    v6 = (unsigned int *)*--v3;
    v5 = v6;
    *v3 = 0;
    if (v6)
    {
      v7 = v5 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
    if (v3 == v2)
    {
      WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy(v1);
      WTF::fastFree(v10, v11);
      _Unwind_Resume(a1);
    }
  }
}

id WebKit::MediaPlayerPrivateRemote::createVideoFullscreenLayer@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_alloc_init(MEMORY[0x1E0CD27A8]);
  *a1 = result;
  return result;
}

uint64_t WebKit::MediaPlayerPrivateRemote::pushVideoFrameMetadata(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 **v7;
  WebKit::GPUProcessConnection *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t result;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  BOOL v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 **v33;
  uint64_t v34;

  v6 = WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v33, (uint64_t **)(v6 + 24));
  v7 = v33;
  v8 = (WebKit::GPUProcessConnection *)WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168));
  v9 = (unsigned int *)WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v8);
  v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x88);
  result = WebKit::RemoteVideoFrameProxy::RemoteVideoFrameProxy((uint64_t)v10, v7, v9, a3);
  v12 = v33;
  v33 = 0;
  if (!v12)
    goto LABEL_16;
  v13 = *v12;
  if (__ldaxr(*v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEABB3C](v13);
LABEL_6:
  v15 = *((_QWORD *)v13 + 1);
  v16 = v15 - 1;
  *((_QWORD *)v13 + 1) = v15 - 1;
  if (v15 == 1)
  {
    v32 = *((_QWORD *)v13 + 2);
    v17 = *((_QWORD *)v13 + 3);
    *((_QWORD *)v13 + 3) = 0;
    v18 = v32 == 0;
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  v19 = __ldxr(v13);
  if (v19 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (__stlxr(0, v13))
    goto LABEL_13;
  if (v16)
    goto LABEL_16;
LABEL_14:
  v20 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v20 = off_1E34ACA48;
  *(_QWORD *)(v20 + 8) = v13;
  *(_QWORD *)(v20 + 16) = v17;
  *(_BYTE *)(v20 + 24) = v18;
  v34 = v20;
  WTF::ensureOnMainRunLoop();
  result = v34;
  v34 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
LABEL_16:
  if (!*(_BYTE *)(a1 + 864))
  {
    v30 = v10 + 2;
    do
    {
      v31 = __ldaxr(v30);
      v29 = --v31 == 0;
    }
    while (__stlxr(v31, v30));
    goto LABEL_25;
  }
  v21 = *(unsigned __int8 *)(a1 + 856);
  v22 = a2[1];
  *(_OWORD *)(a1 + 760) = *a2;
  *(_OWORD *)(a1 + 776) = v22;
  v23 = a2[5];
  v25 = a2[2];
  v24 = a2[3];
  *(_OWORD *)(a1 + 824) = a2[4];
  *(_OWORD *)(a1 + 840) = v23;
  *(_OWORD *)(a1 + 792) = v25;
  *(_OWORD *)(a1 + 808) = v24;
  if (!v21)
    *(_BYTE *)(a1 + 856) = 1;
  v26 = *(unsigned int **)(a1 + 728);
  *(_QWORD *)(a1 + 728) = v10;
  if (v26)
  {
    v10 = v26;
    v27 = v26 + 2;
    do
    {
      v28 = __ldaxr(v27);
      v29 = --v28 == 0;
    }
    while (__stlxr(v28, v27));
LABEL_25:
    if (v29)
    {
      atomic_store(1u, v10 + 2);
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  return result;
}

void sub_1972D9B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::MediaPlayerPrivateRemote::nativeImageForCurrentTime@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::VideoFrame *v3;
  unsigned int *v4;
  unsigned int v5;
  WebKit::WebProcess *v6;
  WebKit::GPUProcessConnection *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WebKit::WebProcess *v12;
  WebCore::VideoFrame *v13;

  if (*(unsigned __int8 *)(this + 680) <= 1u)
    goto LABEL_2;
  v3 = *(WebCore::VideoFrame **)(this + 728);
  if (v3)
  {
    v4 = (unsigned int *)((char *)v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v13 = v3;
  }
  else
  {
    this = WebKit::MediaPlayerPrivateRemote::videoFrameForCurrentTime(this, &v13);
    if (!v13)
    {
LABEL_2:
      *a2 = 0;
      return this;
    }
  }
  {
    v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v6 = WebKit::WebProcess::WebProcess(v12);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v6;
  }
  v7 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection(v6);
  v8 = WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v7);
  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getNativeImage(*(IPC::Semaphore ***)(v8 + 8), v13, a2);
  this = (uint64_t)v13;
  v13 = 0;
  if (this)
  {
    v9 = (unsigned int *)(this + 8);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)(this + 8));
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

void sub_1972D9C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, a10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::MediaPlayerPrivateRemote::colorSpace(WebKit::RemoteMediaPlayerManager **this@<X0>, _QWORD *a2@<X8>)
{
  const void *v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  CFTypeRef *v13;
  int v14;
  CFTypeRef v15;
  uint64_t *v16;
  const void *v17;
  int v18;
  const void *v19;
  char v20;
  uint64_t *v21;
  int v22;
  IPC::Encoder *v23;
  uint64_t v24;

  if (*((unsigned __int8 *)this + 680) > 1u)
  {
    v5 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(this[21]) + 24);
    v6 = (uint64_t)this[23];
    v24 = 0;
    IPC::Connection::createSyncMessageEncoder(3634, v6, &v24, (uint64_t *)&v23);
    IPC::Connection::sendSyncMessage(v5, v24, (uint64_t *)&v23, 0, (uint64_t)&v21, INFINITY);
    if (v22)
    {
      if (v22 == 1)
      {
        LOBYTE(v16) = (_BYTE)v21;
        v7 = 1;
        v18 = 1;
        goto LABEL_11;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      LOBYTE(v19) = 0;
      v20 = 0;
      IPC::Decoder::operator>><std::tuple<WebCore::DestinationColorSpace>>(v21, (uint64_t)&v19);
      if (!v20)
      {
        LOBYTE(v16) = 13;
        v18 = 1;
        v7 = v22;
        if (v22 == -1)
        {
LABEL_12:
          v10 = v23;
          v23 = 0;
          if (v10)
          {
            IPC::Encoder::~Encoder(v10, v8);
            v10 = (IPC::Encoder *)WTF::fastFree(v11, v12);
          }
          v13 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(v10);
          v14 = v18;
          if (v18)
          {
            v15 = *v13;
            if (!*v13)
            {
              *a2 = 0;
LABEL_19:
              if (v14 == -1)
                return;
              goto LABEL_20;
            }
            CFRetain(*v13);
            *a2 = v15;
LABEL_18:
            CFRetain(v15);
            CFRelease(v15);
            v14 = v18;
            goto LABEL_19;
          }
          v15 = v17;
          v17 = 0;
          *a2 = v15;
          if (v15)
            goto LABEL_18;
LABEL_26:
          v14 = 0;
LABEL_20:
          ((void (*)(uint64_t **, uint64_t **))off_1E34D0FC8[v14])(&v21, &v16);
          return;
        }
LABEL_11:
        ((void (*)(const void **, uint64_t **))off_1E34D0F80[v7])(&v19, &v21);
        goto LABEL_12;
      }
      v7 = v22;
      if (!v22)
      {
        v9 = v21;
        v21 = 0;
        v16 = v9;
        v17 = v19;
        v18 = 0;
        goto LABEL_11;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    __break(1u);
    goto LABEL_26;
  }
  v3 = *(const void **)WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)this);
  *a2 = v3;
  if (v3)
    CFRetain(v3);
}

void sub_1972D9E58(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, CFTypeRef cf, char a14, int a15, __int16 a16, char a17, char a18, int a19, int a20)
{
  uint64_t v20;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;

  if (a20 != -1)
    ((void (*)(CFTypeRef *, __int16 *))off_1E34D0F80[a20])(&cf, &a16);
  v22 = *(IPC::Encoder **)(v20 - 48);
  *(_QWORD *)(v20 - 48) = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, a2);
    WTF::fastFree(v23, v24);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::MediaPlayerPrivateRemote::layerHostingContextIdChanged(uint64_t a1, unsigned int *a2, const FloatSize *a3)
{
  unsigned __int8 *result;
  const void *v7;
  unsigned __int8 **v8;
  WebCore::MediaPlayer *v9;

  result = *(unsigned __int8 **)(a1 + 128);
  if (result)
  {
    result = WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(result, *(_QWORD *)(a1 + 136), &v9);
    if (v9)
    {
      if (*((_BYTE *)a2 + 4))
      {
        WebKit::MediaPlayerPrivateRemote::setLayerHostingContextID(a1, (void *)*a2);
        result = (unsigned __int8 *)WebCore::MediaPlayer::videoLayerSizeDidChange(v9, a3);
      }
      else
      {
        v7 = *(const void **)(a1 + 160);
        *(_QWORD *)(a1 + 160) = 0;
        if (v7)
          CFRelease(v7);
        result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152));
      }
      v8 = (unsigned __int8 **)v9;
      v9 = 0;
      if (v8)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v8);
    }
  }
  return result;
}

void sub_1972D9FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 **a10)
{
  if (a10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*a10);
  _Unwind_Resume(exception_object);
}

float WebKit::MediaPlayerPrivateRemote::videoLayerSize(WebKit::MediaPlayerPrivateRemote *this)
{
  unsigned __int8 *v2;
  float v3;
  float v4;
  unsigned __int8 **v5;
  WebCore::MediaPlayer *v7;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 16);
  if (!v2)
    return 0.0;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>(v2, *((_QWORD *)this + 17), &v7);
  if (!v7)
    return 0.0;
  WebCore::MediaPlayer::videoLayerSize(v7);
  v4 = v3;
  v5 = (unsigned __int8 **)v7;
  v7 = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v5);
  return v4;
}

void sub_1972DA03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 **a10)
{
  if (a10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*a10);
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::MediaPlayerPrivateRemote::setVideoLayerSizeFenced(uint64_t a1, int *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  IPC::Encoder *v13;

  v6 = *(_QWORD *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)(a1 + 168))
                 + 24);
  v7 = *(_QWORD *)(a1 + 184);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1168;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v13 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v8, a2);
  IPC::Encoder::addAttachment(v8, a3);
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
  result = v13;
  v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void sub_1972DA124(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder *v2;
  WTF *v4;
  void *v5;

  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

void sub_1972DA224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  WTF *v10;
  uint64_t v11;
  void *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WTF::fastFree(v10, v13);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t WTF::ThreadSafeWeakPtr<WebKit::MediaPlayerPrivateRemote>::operator=<WebKit::MediaPlayerPrivateRemote,(void *)0>(uint64_t a1, _QWORD *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  unsigned __int8 *v5;

  v4 = (WTF::ThreadSafeWeakPtrControlBlock *)a2[6];
  if (v4)
    v4 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v4);
  v5 = *(unsigned __int8 **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  *(_QWORD *)(a1 + 8) = a2;
  return a1;
}

void sub_1972DA990(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::createVideoLayerRemote@<X0>(uint64_t a1@<X0>, WebKit::LayerHostingContext *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WKVideoLayerRemote **a5@<X8>)
{
  WKVideoLayerRemote *v10;
  void *v11;
  uint64_t result;
  CFTypeRef cf;

  v10 = objc_alloc_init(WKVideoLayerRemote);
  -[WKVideoLayerRemote setName:](v10, "setName:", CFSTR("WKVideoLayerRemote"));
  -[WKVideoLayerRemote setVideoGravity:](v10, "setVideoGravity:", a3);
  -[WKVideoLayerRemote setMediaPlayerPrivateRemote:](v10, "setMediaPlayerPrivateRemote:", a1);
  WebKit::LayerHostingContext::createPlatformLayerForHostingContext(a2, &cf);
  v11 = (void *)cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  -[WKVideoLayerRemote setVideoLayerFrame:](v10, "setVideoLayerFrame:", 0.0, 0.0, (double)(int)a4, (double)SHIDWORD(a4));
  objc_msgSend(v11, "setFrame:", 0.0, 0.0, (double)(int)a4, (double)SHIDWORD(a4));
  result = -[WKVideoLayerRemote addSublayer:](v10, "addSublayer:", v11);
  *a5 = v10;
  return result;
}

void sub_1972DAB74(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972DAD70(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1972DAE2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1972DAEC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1972DB050(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1972DB0F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1972DB374(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1972DB410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

void sub_1972DB4F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1972DB5A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef collectIcons(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef result;
  const void *v10;
  uint64_t v11;
  unsigned int v12;

  if (a2 && (v3 = *(_QWORD *)(a2 + 296)) != 0)
  {
    *(_DWORD *)(v3 + 24) += 2;
    WebCore::LinkIconCollector::iconsOfTypes();
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v12);
    if (v12)
    {
      v6 = v11;
      v7 = 80 * v12;
      do
      {
        v8 = WTF::URL::operator NSURL *();
        if (v8)
          objc_msgSend(v5, "addObject:", v8);
        v6 += 80;
        v7 -= 80;
      }
      while (v7);
    }
    *a1 = v5;
    result = (CFTypeRef)WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v4);
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        return (CFTypeRef)WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  else
  {
    v10 = (const void *)MEMORY[0x1E0C9AA60];
    *a1 = MEMORY[0x1E0C9AA60];
    return CFRetain(v10);
  }
  return result;
}

void sub_1972DB724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1972DB82C(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1972DB93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1972DBA18(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebKit::`anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::~RemoteGraphicsContextGLProxyCocoa(WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *this)
{
  _DWORD *v2;
  WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *)((char *)this + 216);
  v2 = (_DWORD *)*((_QWORD *)this + 27);
  *(_QWORD *)v3 = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  do
  {
    v5 = (unsigned int *)*((_QWORD *)v3 - 1);
    v3 = (WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *)((char *)v3 - 8);
    v4 = v5;
    *(_QWORD *)v3 = 0;
    if (v5)
    {
      v6 = v4 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
  }
  while (v3 != (WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *)((char *)this + 192));
  WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy(this);
}

{
  _DWORD *v2;
  WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  v3 = (WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *)((char *)this + 216);
  v2 = (_DWORD *)*((_QWORD *)this + 27);
  *(_QWORD *)v3 = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  do
  {
    v5 = (unsigned int *)*((_QWORD *)v3 - 1);
    v3 = (WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *)((char *)v3 - 8);
    v4 = v5;
    *(_QWORD *)v3 = 0;
    if (v5)
    {
      v6 = v4 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
  }
  while (v3 != (WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *)((char *)this + 192));
  WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy(this);
  WTF::fastFree(v9, v10);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::dispatch(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isCurrent(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10));
}

uint64_t WebKit::`anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::layerContentsDisplayDelegate@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 216);
  ++*(_DWORD *)(v2 + 8);
  *a2 = v2;
  return this;
}

void WebKit::`anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::prepareForDisplay(WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *this)
{
  WTF::ApproximateTime *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t *v16;
  int v17;
  IPC::Decoder *v18;
  void *v19;
  int v20;
  char v21;
  IPC::Decoder *v22;
  IPC::Decoder *v23;
  IPC::Decoder *v24;
  WTF *v25;
  void *v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  unsigned __int8 **v30;
  unsigned __int8 *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  IPC::Decoder *v39;
  uint64_t v40;
  int v41;
  unsigned int *v42;
  unsigned int v43;
  unint64_t v44;
  char *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  IPC::Decoder *v84;
  int v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  char v90;
  _BYTE v91[4];
  unsigned __int8 v92;
  IPC::Decoder *v93;
  int v94;
  IPC::Encoder *v95;
  uint64_t v96;
  char v97[4];
  unsigned __int8 v98;
  IPC::Decoder *v99;
  uint64_t v100;

  if (!*((_QWORD *)this + 12))
    return;
  v86 = 0;
  v2 = (WTF::ApproximateTime *)semaphore_create(*MEMORY[0x1E0C83DA0], (semaphore_t *)&v86 + 1, 0, 0);
  v3 = *((_QWORD *)this + 9);
  v4 = *((_QWORD *)this + 12);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(v2);
    v6 = v5 + v7;
  }
  if (*(_QWORD *)(v4 + 48) != v3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v88, v6);
    if (!v90)
    {
LABEL_133:
      v71 = 15;
LABEL_134:
      LOBYTE(v84) = v71;
      goto LABEL_22;
    }
    v63 = v88;
    v64 = v89;
    v65 = (v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v66 = v65 - v88;
    if (v65 < v88)
    {
      v68 = 0;
      v67 = v89;
    }
    else
    {
      v67 = 0;
      if (v66 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v68 = 0;
      }
      else
      {
        v68 = 0;
        if (v66 + 2 <= v89)
        {
          *(_WORD *)(v88 + v66) = 2822;
          v67 = v64;
          v68 = v66 + 2;
        }
      }
    }
    v69 = (v63 + v68 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v69 >= v63 + v68)
    {
      v70 = v69 - v63;
      v71 = 17;
      if (v70 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_134;
      v68 = v70 + 8;
      if (v70 + 8 > v67)
        goto LABEL_134;
      *(_QWORD *)(v63 + v70) = v3;
    }
    if (!v67)
    {
      v71 = 17;
      goto LABEL_134;
    }
    v72 = *(_QWORD *)(v4 + 64);
    v73 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v74 = *(_QWORD *)(v4 + 56);
    if (v73 + 16 >= v74)
      v73 = 0;
    if (v68 <= 0x10)
      v68 = 16;
    v75 = v73 + v68;
    if (v74 <= v75)
      v75 = 0;
    *(_QWORD *)(v4 + 72) = v75;
    v76 = (unint64_t *)(*(_QWORD *)(v72 + 16) + 128);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v75, v76));
    v78 = *(_DWORD *)(v4 + 108);
    if (v77 == 0x80000000 || v78 != 0)
    {
      v80 = v78 + 1;
      *(_DWORD *)(v4 + 108) = v80;
      if (v80 >= *(_DWORD *)(v4 + 104))
      {
        if (*(_BYTE *)(v4 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
        *(_DWORD *)(v4 + 108) = 0;
      }
    }
    *(_QWORD *)(v4 + 48) = v3;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v88, v6);
  if (v90)
  {
    v8 = (v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v9 = v8 - v88;
    if (v8 < v88)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      if (v9 <= 0xFFFFFFFFFFFFFFFDLL && v9 + 2 <= v89)
      {
        *(_WORD *)(v88 + v9) = 2821;
        v10 = v9 + 2;
      }
    }
    v11 = *(_QWORD *)(v4 + 64);
    v12 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(_QWORD *)(v4 + 56);
    if (v12 + 16 >= v13)
      v12 = 0;
    if (v10 <= 0x10)
      v10 = 16;
    v14 = v12 + v10;
    if (v13 <= v14)
      v14 = 0;
    *(_QWORD *)(v4 + 72) = v14;
    v15 = (unint64_t *)(*(_QWORD *)(v11 + 16) + 128);
    do
      __ldaxr(v15);
    while (__stlxr(v14, v15));
    *(_DWORD *)(v4 + 108) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v87, (uint64_t **)(v4 + 8));
    v16 = v87;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3611, v3, &v96, (uint64_t *)&v95);
    IPC::ArgumentCoder<IPC::Semaphore,void>::encode((uint64_t)v95, (IPC::Semaphore *)&v86);
    IPC::Connection::sendSyncMessage((uint64_t)v16, v96, (uint64_t *)&v95, 0, (uint64_t)&v93, v6);
    if (v94)
    {
      if (v94 == 1)
      {
        LOBYTE(v84) = (_BYTE)v93;
        v17 = 1;
        v85 = 1;
LABEL_44:
        ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1E34D0F80[v17])(&v99, &v93);
LABEL_45:
        v27 = v95;
        v95 = 0;
        if (v27)
        {
          IPC::Encoder::~Encoder(v27, v19);
          WTF::fastFree(v28, v29);
        }
        v30 = (unsigned __int8 **)v87;
        v87 = 0;
        if (!v30)
        {
LABEL_62:
          if (v85)
            goto LABEL_63;
          WTF::MachSendRight::MachSendRight();
          if ((_DWORD)v99)
          {
            v40 = WTF::fastMalloc((WTF *)0x18);
            WebCore::PlatformCALayerDelegatedContentsFence::PlatformCALayerDelegatedContentsFence((WebCore::PlatformCALayerDelegatedContentsFence *)v40);
            *(_QWORD *)v40 = off_1E34D0FA0;
            *(_WORD *)(v40 + 12) = 0;
            WTF::MachSendRight::MachSendRight();
            v41 = HIDWORD(v86);
            HIDWORD(v86) = 0;
            *(_DWORD *)(v40 + 20) = v41;
            v42 = (unsigned int *)(v40 + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 + 1, v42));
            v44 = *((_QWORD *)this + 23);
            *((_QWORD *)this + 23) = v44 + 1;
            v45 = (char *)this + 8 * (v44 % 3);
            v46 = (unsigned int *)*((_QWORD *)v45 + 24);
            *((_QWORD *)v45 + 24) = v40;
            if (v46)
            {
              v47 = v46 + 2;
              do
              {
                v48 = __ldaxr(v47);
                v49 = v48 - 1;
              }
              while (__stlxr(v49, v47));
              if (!v49)
              {
                atomic_store(1u, v46 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
              }
            }
            v50 = *((_QWORD *)this + 27);
            if ((_DWORD)v99)
            {
              v51 = *(_DWORD *)(v50 + 12);
              if (v51)
                v52 = (_DWORD)v99 == v51;
              else
                v52 = 0;
              if (!v52)
              {
                v53 = *(unsigned int **)(v50 + 16);
                *(_QWORD *)(v50 + 16) = v40;
                if (v53)
                {
                  v54 = v53 + 2;
                  do
                  {
                    v55 = __ldaxr(v54);
                    v56 = v55 - 1;
                  }
                  while (__stlxr(v56, v54));
                  if (!v56)
                  {
                    atomic_store(1u, v53 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 8))(v53);
                  }
                }
                WTF::MachSendRight::operator=();
                goto LABEL_92;
              }
            }
            else
            {
              v57 = *(unsigned int **)(v50 + 16);
              *(_QWORD *)(v50 + 16) = 0;
              if (v57)
              {
                v58 = v57 + 2;
                do
                {
                  v59 = __ldaxr(v58);
                  v60 = v59 - 1;
                }
                while (__stlxr(v60, v58));
                if (!v60)
                {
                  atomic_store(1u, v57 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v57 + 8))(v57);
                }
              }
              LODWORD(v88) = 0;
              WTF::MachSendRight::operator=();
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v88);
            }
            do
            {
              v61 = __ldaxr(v42);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v42));
            if (!v62)
            {
              atomic_store(1u, (unsigned int *)(v40 + 8));
              (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
            }
          }
LABEL_92:
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v99);
          goto LABEL_93;
        }
        v31 = *v30;
        if (__ldaxr(*v30))
        {
          __clrex();
        }
        else if (!__stxr(1u, v31))
        {
          goto LABEL_52;
        }
        MEMORY[0x19AEABB3C](v31);
LABEL_52:
        v33 = *((_QWORD *)v31 + 1);
        v34 = v33 - 1;
        *((_QWORD *)v31 + 1) = v33 - 1;
        if (v33 == 1)
        {
          v81 = *((_QWORD *)v31 + 2);
          v35 = *((_QWORD *)v31 + 3);
          *((_QWORD *)v31 + 3) = 0;
          v36 = v81 == 0;
        }
        else
        {
          v35 = 0;
          v36 = 0;
        }
        v37 = __ldxr(v31);
        if (v37 == 1)
        {
          if (!__stlxr(0, v31))
          {
            if (v34)
              goto LABEL_62;
LABEL_60:
            v38 = WTF::fastMalloc((WTF *)0x20);
            *(_QWORD *)v38 = off_1E34ACA48;
            *(_QWORD *)(v38 + 8) = v31;
            *(_QWORD *)(v38 + 16) = v35;
            *(_BYTE *)(v38 + 24) = v36;
            v99 = (IPC::Decoder *)v38;
            WTF::ensureOnMainRunLoop();
            v39 = v99;
            v99 = 0;
            if (v39)
              (*(void (**)(IPC::Decoder *))(*(_QWORD *)v39 + 8))(v39);
            goto LABEL_62;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v31);
        if (v34)
          goto LABEL_62;
        goto LABEL_60;
      }
      goto LABEL_132;
    }
    v91[0] = 0;
    v92 = 0;
    v18 = v93;
    IPC::Decoder::takeLastAttachment(v93, &v99);
    if (BYTE4(v99))
    {
      WTF::MachSendRight::MachSendRight();
      v98 = 1;
      if (!BYTE4(v99) || (WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v99), v98))
      {
        v20 = 1;
        goto LABEL_27;
      }
    }
    else
    {
      v97[0] = 0;
      v98 = 0;
    }
    v19 = *(void **)v18;
    v82 = *((_QWORD *)v18 + 1);
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    v83 = *((_QWORD *)v18 + 3);
    if (v83 && v82)
    {
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v83 + 16))(v83, v19);
      v20 = v98;
    }
    else
    {
      v20 = 0;
    }
LABEL_27:
    if (v92 == v20)
    {
      if (!v92)
        goto LABEL_42;
      WTF::MachSendRight::operator=();
    }
    else
    {
      if (v92)
      {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v91);
        v21 = 0;
      }
      else
      {
        WTF::MachSendRight::MachSendRight();
        v21 = 1;
      }
      v92 = v21;
    }
    if (v98)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v97);
    if (v92)
    {
      if (v94)
      {
LABEL_132:
        std::__throw_bad_variant_access[abi:sn180100]();
        __break(1u);
        goto LABEL_133;
      }
      v22 = v93;
      v93 = 0;
      v99 = v22;
      WTF::MachSendRight::MachSendRight();
      v23 = v99;
      v99 = 0;
      v84 = v23;
      WTF::MachSendRight::MachSendRight();
      v85 = 0;
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v100);
      v24 = v99;
      v99 = 0;
      if (v24)
      {
        IPC::Decoder::~Decoder(v24);
        WTF::fastFree(v25, v26);
      }
      if (v92)
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v91);
LABEL_43:
      v17 = v94;
      if (v94 == -1)
        goto LABEL_45;
      goto LABEL_44;
    }
LABEL_42:
    LOBYTE(v84) = 13;
    v85 = 1;
    goto LABEL_43;
  }
  LOBYTE(v84) = 15;
LABEL_22:
  v85 = 1;
LABEL_63:
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
LABEL_93:
  if (v85 != -1)
    ((void (*)(unint64_t *, IPC::Decoder **))off_1E34D0FB8[v85])(&v88, &v84);
  IPC::Semaphore::destroy((IPC::Semaphore *)&v86);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v86);
}

void sub_1972DC3B8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, IPC::Decoder *a9, uint64_t a10, int a11, int a12, char a13, unsigned __int8 **a14, char a15, uint64_t a16, uint64_t a17, char a18, __int16 a19, char a20,char a21,__int16 a22,char a23,char a24,int a25,int a26,IPC::Encoder *a27)
{
  uint64_t v27;
  IPC::Encoder *v29;
  WTF *v30;
  void *v31;
  unsigned __int8 **v32;
  unsigned __int8 *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (*(_BYTE *)(v27 - 84))
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v27 - 88));
  if (a20)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a18);
  if (a26 != -1)
    ((void (*)(uint64_t, char *))off_1E34D0F80[a26])(v27 - 80, &a23);
  v29 = a27;
  a27 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, a2);
    WTF::fastFree(v30, v31);
  }
  v32 = a14;
  a14 = 0;
  if (!v32)
  {
LABEL_27:
    IPC::Semaphore::destroy((IPC::Semaphore *)&a13);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a13);
    _Unwind_Resume(a1);
  }
  v33 = *v32;
  if (__ldaxr(*v32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v33))
  {
LABEL_15:
    v35 = *((_QWORD *)v33 + 1);
    v36 = v35 - 1;
    *((_QWORD *)v33 + 1) = v35 - 1;
    if (v35 == 1)
    {
      v41 = *((_QWORD *)v33 + 2);
      v37 = *((_QWORD *)v33 + 3);
      *((_QWORD *)v33 + 3) = 0;
      v38 = v41 == 0;
    }
    else
    {
      v37 = 0;
      v38 = 0;
    }
    v39 = __ldxr(v33);
    if (v39 == 1)
    {
      if (!__stlxr(0, v33))
      {
LABEL_22:
        if (!v36)
        {
          v40 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v40 = off_1E34ACA48;
          *(_QWORD *)(v40 + 8) = v33;
          *(_QWORD *)(v40 + 16) = v37;
          *(_BYTE *)(v40 + 24) = v38;
          *(_QWORD *)(v27 - 80) = v40;
          WTF::ensureOnMainRunLoop();
          v42 = *(_QWORD *)(v27 - 80);
          *(_QWORD *)(v27 - 80) = 0;
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        }
        goto LABEL_27;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
    goto LABEL_22;
  }
  MEMORY[0x19AEABB3C](v33);
  goto LABEL_15;
}

uint64_t WebKit::`anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::forceContextLost(WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *this)
{
  uint64_t *v2;
  char *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v9;
  unsigned int v10;
  unsigned int v11;

  v2 = (uint64_t *)((char *)this + 192);
  v3 = (char *)this + 216;
  do
  {
    v4 = *v2;
    if (!*v2)
      goto LABEL_19;
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = (unsigned __int8 *)(v4 + 12);
    if (__ldaxr((unsigned __int8 *)(v4 + 12)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEABB3C](v4 + 12);
LABEL_9:
    if (!*(_BYTE *)(v4 + 13))
    {
      *(_BYTE *)(v4 + 13) = 1;
      MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 20));
    }
    v9 = __ldxr(v7);
    if (v9 == 1)
    {
      if (!__stlxr(0, v7))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 12));
    do
    {
LABEL_16:
      v10 = __ldaxr(v5);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v5));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)(v4 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
LABEL_19:
    ++v2;
  }
  while (v2 != (uint64_t *)v3);
  return WebCore::GraphicsContextGL::forceContextLost((WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *)((char *)this + 16));
}

void sub_1972DC708(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  do
  {
    v4 = __ldaxr(v2);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v2));
  if (!v5)
  {
    atomic_store(1u, v1 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::`anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::asCV(WebKit::_anonymous_namespace_::RemoteGraphicsContextGLProxyCocoa *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::`anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::layerContentsDisplayDelegate@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 200);
  ++*(_DWORD *)(v2 + 8);
  *a2 = v2;
  return result;
}

void `non-virtual thunk to'WebKit::`anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::~RemoteGraphicsContextGLProxyCocoa(uint64_t a1)
{
  _DWORD *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (_QWORD *)(a1 + 200);
  v2 = *(_DWORD **)(a1 + 200);
  *v3 = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  do
  {
    v5 = (unsigned int *)*--v3;
    v4 = v5;
    *v3 = 0;
    if (v5)
    {
      v6 = v4 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
  }
  while (v3 != (_QWORD *)(a1 + 176));
  WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16));
}

{
  _DWORD *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (_QWORD *)(a1 + 152);
  v2 = *(_DWORD **)(a1 + 152);
  *v3 = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  do
  {
    v5 = (unsigned int *)*--v3;
    v4 = v5;
    *v3 = 0;
    if (v5)
    {
      v6 = v4 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
  }
  while (v3 != (_QWORD *)(a1 + 128));
  WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 64));
}

uint64_t `non-virtual thunk to'WebKit::`anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::~RemoteGraphicsContextGLProxyCocoa(uint64_t a1)
{
  _DWORD *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  v3 = (_QWORD *)(a1 + 200);
  v2 = *(_DWORD **)(a1 + 200);
  *v3 = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  do
  {
    v5 = (unsigned int *)*--v3;
    v4 = v5;
    *v3 = 0;
    if (v5)
    {
      v6 = v4 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
  }
  while (v3 != (_QWORD *)(a1 + 176));
  WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16));
  return WTF::fastFree(v9, v10);
}

{
  _DWORD *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  v3 = (_QWORD *)(a1 + 152);
  v2 = *(_DWORD **)(a1 + 152);
  *v3 = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  do
  {
    v5 = (unsigned int *)*--v3;
    v4 = v5;
    *v3 = 0;
    if (v5)
    {
      v6 = v4 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
  }
  while (v3 != (_QWORD *)(a1 + 128));
  WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 64));
  return WTF::fastFree(v9, v10);
}

void `non-virtual thunk to'WebKit::`anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::prepareForDisplay(uint64_t a1)
{
}

uint64_t `non-virtual thunk to'WebKit::`anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::asCV()
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::`anonymous namespace'::RemoteGraphicsContextGLProxyCocoa::forceContextLost(uint64_t a1)
{
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::dispatch(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isCurrent(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
}

void WebKit::`anonymous namespace'::DisplayBufferDisplayDelegate::~DisplayBufferDisplayDelegate(WebKit::_anonymous_namespace_::DisplayBufferDisplayDelegate *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  WTF::MachSendRight::~MachSendRight((WebKit::_anonymous_namespace_::DisplayBufferDisplayDelegate *)((char *)this + 12));
  WebCore::GraphicsLayerContentsDisplayDelegate::~GraphicsLayerContentsDisplayDelegate(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  void *v7;

  v2 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  WTF::MachSendRight::~MachSendRight((WebKit::_anonymous_namespace_::DisplayBufferDisplayDelegate *)((char *)this + 12));
  WebCore::GraphicsLayerContentsDisplayDelegate::~GraphicsLayerContentsDisplayDelegate(this);
  WTF::fastFree(v6, v7);
}

uint64_t WebKit::`anonymous namespace'::DisplayBufferDisplayDelegate::prepareToDelegateDisplay(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 240))(a2, *(unsigned __int8 *)(a1 + 24));
}

void WebKit::`anonymous namespace'::DisplayBufferDisplayDelegate::display(WebKit::_anonymous_namespace_::DisplayBufferDisplayDelegate *this, WebCore::PlatformCALayer *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  char v13;
  char v14;

  if (*((_DWORD *)this + 3))
  {
    WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v11, (WebKit::_anonymous_namespace_::DisplayBufferDisplayDelegate *)((char *)this + 12));
    v4 = (unsigned int *)*((_QWORD *)this + 2);
    if (v4)
    {
      v5 = v4 + 2;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    v12 = v4;
    v13 = 0;
    v14 = 0;
    (*(void (**)(WebCore::PlatformCALayer *, uint64_t *))(*(_QWORD *)a2 + 512))(a2, &v11);
    v7 = v12;
    v12 = 0;
    if (v7)
    {
      v8 = v7 + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v7 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
      }
    }
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v11);
  }
  else
  {
    (*(void (**)(WebCore::PlatformCALayer *))(*(_QWORD *)a2 + 504))(a2);
  }
}

void sub_1972DCC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v11 = a10;
  a10 = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a9);
  _Unwind_Resume(a1);
}

uint64_t WebKit::`anonymous namespace'::DisplayBufferDisplayDelegate::orientation(WebKit::_anonymous_namespace_::DisplayBufferDisplayDelegate *this)
{
  return 1;
}

uint64_t IPC::StreamClientConnectionBuffer::tryAcquire@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>, double a3@<D0>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  double v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  BOOL v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;

  v3 = atomic_load(*(unint64_t **)(*(_QWORD *)(result + 8) + 16));
  do
  {
LABEL_2:
    if (v3 == 0x80000000)
      goto LABEL_30;
    v4 = *(_QWORD *)(result + 16);
    v5 = (v4 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_QWORD *)result;
    if (v5 + 16 >= *(_QWORD *)result)
      v5 = 0;
    if (v4 >= v3)
    {
      if (v5 < v4)
      {
        if (v5 >= v3)
        {
          v6 = 0;
          goto LABEL_10;
        }
      }
      else if (!v3)
      {
        goto LABEL_27;
      }
      v6 -= v5;
      if (v5 < v3)
        v6 = v3 + ~v5;
      goto LABEL_10;
    }
    v13 = v5 < v4 || v5 >= v3;
    v6 = v3 + ~v5;
    if (v13)
      v6 = 0;
    while (1)
    {
LABEL_10:
      v7 = *(_QWORD *)(result + 8);
      v8 = *(_QWORD *)(v7 + 8);
      if (v8 <= 0xFF)
        goto LABEL_26;
      v9 = v8 - 256;
      v13 = v9 >= v5;
      v10 = v9 - v5;
      if (!v13)
        goto LABEL_26;
      v11 = *(_QWORD *)(v7 + 16);
      if (v6 == -1)
        break;
      if (v10 >= v6)
        goto LABEL_15;
LABEL_26:
      __break(1u);
LABEL_27:
      v6 += ~v5;
    }
    v6 = v10;
LABEL_15:
    if (v6 >= 0x10)
    {
      *(_QWORD *)a2 = v11 + v5 + 256;
      *((_QWORD *)a2 + 1) = v6;
      v12 = 1;
      goto LABEL_19;
    }
LABEL_30:
    v20 = result;
    v21 = v3;
    v19 = a2;
    v14 = a3;
    result = WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    if (v15 >= v14)
      goto LABEL_41;
    v16 = *(unint64_t **)(*(_QWORD *)(v20 + 8) + 16);
    while (1)
    {
      v17 = __ldaxr(v16);
      if (v17 != v21)
        break;
      if (!__stlxr(0x80000000uLL, v16))
        goto LABEL_36;
    }
    __clrex();
LABEL_36:
    result = v20;
    v18 = v21 == v17;
    v3 = v17;
    a2 = v19;
    a3 = v14;
  }
  while (!v18);
  if (*(_BYTE *)(v20 + 40))
  {
    result = IPC::Semaphore::waitFor((semaphore_t *)(v20 + 32), v14);
    if ((result & 1) != 0)
    {
      result = v20;
      v3 = atomic_load(*(unint64_t **)(*(_QWORD *)(v20 + 8) + 16));
      a2 = v19;
      a3 = v14;
      goto LABEL_2;
    }
  }
LABEL_41:
  v12 = 0;
  a2 = v19;
  *v19 = 0;
LABEL_19:
  a2[16] = v12;
  return result;
}

void WebKit::`anonymous namespace'::DisplayBufferFence::~DisplayBufferFence(WebKit::_anonymous_namespace_::DisplayBufferFence *this)
{
  WTF::MachSendRight *v2;

  v2 = (WebKit::_anonymous_namespace_::DisplayBufferFence *)((char *)this + 16);
  IPC::Semaphore::destroy((WebKit::_anonymous_namespace_::DisplayBufferFence *)((char *)this + 16));
  WTF::MachSendRight::~MachSendRight(v2);
  WebCore::PlatformCALayerDelegatedContentsFence::~PlatformCALayerDelegatedContentsFence(this);
}

{
  WTF::MachSendRight *v2;
  WTF *v3;
  void *v4;

  v2 = (WebKit::_anonymous_namespace_::DisplayBufferFence *)((char *)this + 16);
  IPC::Semaphore::destroy((WebKit::_anonymous_namespace_::DisplayBufferFence *)((char *)this + 16));
  WTF::MachSendRight::~MachSendRight(v2);
  WebCore::PlatformCALayerDelegatedContentsFence::~PlatformCALayerDelegatedContentsFence(this);
  WTF::fastFree(v3, v4);
}

BOOL WebKit::`anonymous namespace'::DisplayBufferFence::waitFor(unsigned __int8 *a1, double a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _BOOL8 v6;
  double v7;
  double v8;
  int v9;

  v3 = a1;
  v4 = a1 + 12;
  if (__ldaxr(a1 + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEABB3C](a1 + 12);
LABEL_5:
  if (v3[13])
  {
    v6 = 1;
  }
  else
  {
    v7 = INFINITY;
    if (fabs(a2) != INFINITY)
    {
      WTF::ApproximateTime::now((WTF::ApproximateTime *)a1);
      v7 = a2 + v8;
    }
    v6 = IPC::Semaphore::waitFor((semaphore_t *)v3 + 4, v7);
    v3[13] = v6;
  }
  v9 = __ldxr(v4);
  if (v9 == 1)
  {
    if (!__stlxr(0, v4))
      return v6;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return v6;
}

void sub_1972DCF50(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17PrepareForDisplayEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a2 + 1));
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteMediaPlayerProxy10ColorSpaceEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  const void *v3;

  v3 = *(const void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

void sub_1972DD084(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = 80 * v3;
    v5 = *(_QWORD *)a1 + 64;
    do
    {
      WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      v6 = *(WTF::StringImpl **)(v5 - 16);
      *(_QWORD *)(v5 - 16) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(WTF::StringImpl **)(v5 - 64);
      *(_QWORD *)(v5 - 64) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 80;
      v4 -= 80;
    }
    while (v4);
  }
  v8 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

uint64_t *IPC::Decoder::operator>><std::tuple<WebCore::DestinationColorSpace>>(uint64_t *a1, uint64_t a2)
{
  CFTypeRef v4;
  CFTypeRef cf;
  char v7;

  IPC::Decoder::decode<std::tuple<WebCore::DestinationColorSpace>>(a1, (uint64_t)&cf);
  std::__optional_storage_base<WebCore::DestinationColorSpace,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::DestinationColorSpace,false>>(a2, (uint64_t *)&cf);
  if (v7)
  {
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
  }
  return a1;
}

void sub_1972DD1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v5 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v6 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E34D1010;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 24) = v6;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

void sub_1972DD2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WebKit::MediaPlayerPrivateRemote *WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::MediaPlayerPrivateRemote,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  WebKit::MediaPlayerPrivateRemote *result;
  WTF *v4;
  WTF *v5;
  void *v6;
  BOOL v7;

  v4 = *(WTF **)(a1 + 8);
  result = *(WebKit::MediaPlayerPrivateRemote **)(a1 + 16);
  if (result)
  {
    WebKit::MediaPlayerPrivateRemote::~MediaPlayerPrivateRemote(result);
    result = (WebKit::MediaPlayerPrivateRemote *)WTF::fastFree(v5, v6);
  }
  if (*(_BYTE *)(a1 + 24))
    v7 = v4 == 0;
  else
    v7 = 1;
  if (!v7)
    return (WebKit::MediaPlayerPrivateRemote *)WTF::fastFree(v4, a2);
  return result;
}

void WebKit::FrameLoadState::~FrameLoadState(WebKit::FrameLoadState *this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = *((_QWORD *)this + 21);
  if (v3)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

unsigned int *WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  unsigned int *result;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_31;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_26;
  v9 = *(_DWORD *)(v8 - 4);
  if (!v9)
  {
LABEL_25:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_28;
  }
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = *(_QWORD *)(v8 + 8 * --v9);
      if ((unint64_t)(v11 + 1) >= 2 && !*(_QWORD *)(v11 + 8))
        break;
      if (!v9)
        goto LABEL_14;
    }
    *(_QWORD *)(v8 + 8 * v9) = 0;
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      WTF::fastFree((WTF *)v11, a2);
    }
    *(_QWORD *)(v8 + 8 * v9) = -1;
    ++v10;
  }
  while (v9);
LABEL_14:
  v8 = *(_QWORD *)a1;
  if (v10)
  {
    *(_DWORD *)(v8 - 16) += v10;
    v14 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v10;
    v8 = *(_QWORD *)a1;
  }
  if (!v8)
  {
LABEL_26:
    v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_29:
    v19 = v18;
    goto LABEL_30;
  }
  v16 = *(_DWORD *)(v8 - 4);
  if (v16 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v16)
    goto LABEL_25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  v8 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v8)
  {
    v18 = 0;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *(_DWORD *)(v8 - 12);
  v19 = 0x7FFFFFFF;
  if (v18 < 0x7FFFFFFF)
    goto LABEL_29;
LABEL_30:
  *(_DWORD *)(a1 + 12) = 2 * v19;
LABEL_31:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
  v20 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 + 1, v20));
  v29 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v29, a3);
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    do
    {
      v27 = __ldaxr(result);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, result));
    if (!v28)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v23);
    }
  }
  if (v20)
  {
    do
    {
      v25 = __ldaxr(v20);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v20));
    if (!v26)
    {
      atomic_store(1u, v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v23);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::FrameLoadState::didSuspend(WebKit::FrameLoadState *this)
{
  char *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7[5];

  *(_DWORD *)this = 2;
  v2 = (char *)this + 48;
  v7[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v7);
  WTF::URL::operator=((uint64_t)v2, (WTF::StringImpl *)v7);
  v4 = v7[0];
  v7[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E34D1060;
  v7[0] = v5;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)this + 21, v7);
  result = v7[0];
  v7[0] = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::FrameLoadState::didExplicitOpen(WebKit::FrameLoadState *this, const WTF::URL *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7[5];

  v7[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v7);
  WTF::URL::operator=((uint64_t)this + 48, (WTF::StringImpl *)v7);
  v5 = v7[0];
  v7[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return WebKit::FrameLoadState::setURL(this, a2);
}

uint64_t WebKit::FrameLoadState::setURL(WebKit::FrameLoadState *this, const WTF::URL *a2)
{
  __int128 v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  WTF::String::operator=((WTF::StringImpl **)this + 1, a2);
  v4 = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 1) = *(_OWORD *)((char *)a2 + 8);
  *((_OWORD *)this + 2) = v4;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34D1128;
  v5[1] = a2;
  v7 = (uint64_t)v5;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)this + 21, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::FrameLoadState::didReceiveServerRedirectForProvisionalLoad(WebKit::FrameLoadState *this, const WTF::URL *a2)
{
  __int128 v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  WTF::String::operator=((WTF::StringImpl **)this + 6, a2);
  v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 72) = v4;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E34D1088;
  v5[1] = a2;
  v7 = (uint64_t)v5;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)this + 21, &v7);
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebKit::FrameLoadState::didFailProvisionalLoad(WebKit::FrameLoadState *this)
{
  char *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  __int128 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8[5];

  *(_DWORD *)this = 2;
  v2 = (char *)this + 48;
  v8[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v8);
  WTF::URL::operator=((uint64_t)v2, (WTF::StringImpl *)v8);
  v4 = v8[0];
  v8[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::String::operator=((WTF::StringImpl **)this + 11, (WebKit::FrameLoadState *)((char *)this + 128));
  v5 = *(_OWORD *)((char *)this + 152);
  *((_OWORD *)this + 6) = *(_OWORD *)((char *)this + 136);
  *((_OWORD *)this + 7) = v5;
  v6 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E34D10B0;
  v8[0] = v6;
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t *)this + 21, v8);
  result = v8[0];
  v8[0] = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

WebKit::FrameProcess *WebKit::FrameProcess::FrameProcess(WebKit::FrameProcess *this, WebKit::WebProcessProxy *a2, WebKit::BrowsingContextGroup *a3, const WebKit::Site *a4, const WebKit::WebPreferences *a5)
{
  unsigned int *v9;
  unsigned int v10;
  const WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  v9 = (unsigned int *)((char *)a2 + 16);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *((_QWORD *)this + 2) = a2;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 2, (uint64_t)a3);
  v12 = (unsigned int *)*((_QWORD *)a3 + 1);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  *((_QWORD *)this + 3) = v12;
  v14 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v14 += 2;
  *((_QWORD *)this + 4) = v14;
  v15 = (_DWORD *)*((_QWORD *)a4 + 1);
  if (v15)
    *v15 += 2;
  *((_QWORD *)this + 5) = v15;
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((const WebKit::WebPreferences *)((char *)a5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v11))
  {
    WebKit::BrowsingContextGroup::addFrameProcess(a3, this);
  }
  else
  {
    v17 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v16);
      }
    }
  }
  return this;
}

void WebKit::FrameProcess::~FrameProcess(WebKit::FrameProcess *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      WebKit::BrowsingContextGroup::removeFrameProcess(v4, (uint64_t)this);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

uint64_t *WebKit::GeolocationPermissionRequestManagerProxy::createRequest@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _BYTE v7[24];
  _DWORD *v8;
  uint64_t v9;

  v9 = a2;
  WebKit::GeolocationPermissionRequestProxy::create((uint64_t)a1, a2, a3, a4);
  v8 = (_DWORD *)*a4;
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::add<WebKit::GeolocationPermissionRequestProxy*>(a1, &v9, &v8, (uint64_t)v7);
}

unsigned int *WebKit::GeolocationPermissionRequestProxy::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  unsigned int *result;
  unsigned int *v10;
  unsigned int v11;

  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = a1;
  *(_QWORD *)(v8 + 16) = a2;
  result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v10 = *(unsigned int **)(a3 + 8);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(v8 + 24) = v10;
  *a4 = v8;
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::add<WebKit::GeolocationPermissionRequestProxy*>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v23;
        goto LABEL_33;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  if (*a3)
    ++*v20;
  result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v20;
  if (result)
    result = (uint64_t *)WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref((unsigned int **)result, a2);
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_26:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v24 = *v6;
      if (*v6)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_26;
  }
  v29 = v24 + 16 * v27;
  v28 = 1;
LABEL_33:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

WTF::StringImpl *WebKit::GeolocationPermissionRequestManagerProxy::didReceiveGeolocationPermissionDecision(WTF::StringImpl *result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int ***v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int **v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  _QWORD v38[2];
  char v39;
  IPC::Encoder *v40;

  v37 = a2;
  v3 = *((_QWORD *)result + 2);
  if (!*(_BYTE *)(v3 + 729))
  {
    if (*(_BYTE *)(v3 + 728))
    {
      v4 = (uint64_t *)result;
      v5 = *(_QWORD *)result;
      if (*(_QWORD *)result)
      {
        v6 = *(_DWORD *)(v5 - 8);
        v7 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
        v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
        v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
        v10 = v6 & ((v9 >> 31) ^ v9);
        v11 = *(_QWORD *)(v5 + 16 * v10);
        if (v11 != a2)
        {
          v12 = 1;
          while (v11)
          {
            v10 = ((_DWORD)v10 + v12) & v6;
            v11 = *(_QWORD *)(v5 + 16 * v10);
            ++v12;
            if (v11 == a2)
              goto LABEL_11;
          }
          v10 = *(unsigned int *)(v5 - 4);
        }
LABEL_11:
        if (v10 != *(_DWORD *)(v5 - 4))
        {
          if ((a3 & 1) != 0)
          {
            WTF::createVersion4UUIDString(result);
            if (v36)
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v4 + 1, &v36, v13, (uint64_t)v38);
          }
          else
          {
            v36 = 0;
          }
          v14 = v5 + 16 * v10;
          v16 = *(_QWORD *)(v14 + 8);
          v15 = (unsigned int ***)(v14 + 8);
          v17 = *(_QWORD *)(v16 + 24);
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 8);
            if (v18)
            {
              v19 = (unsigned int *)(v18 + 16);
              do
                v20 = __ldaxr(v19);
              while (__stlxr(v20 + 1, v19));
              v21 = *(_QWORD *)(*(_QWORD *)(v4[2] + 32) + 1896);
              v22 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v22 = 2173;
              *(_QWORD *)(v22 + 8) = v21;
              *(_QWORD *)(v22 + 528) = v22 + 16;
              *(_QWORD *)(v22 + 536) = v22 + 16;
              *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v22 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
              v40 = (IPC::Encoder *)v22;
              IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v22, &v37);
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v22, (uint64_t *)&v36);
              LOBYTE(v38[0]) = 0;
              v39 = 0;
              WebKit::AuxiliaryProcessProxy::sendMessage(v18, &v40, 0, (uint64_t)v38, 1);
              if (v39)
              {
                v24 = v38[0];
                v38[0] = 0;
                if (v24)
                  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
              }
              v25 = v40;
              v40 = 0;
              if (v25)
              {
                IPC::Encoder::~Encoder(v25, v23);
                WTF::fastFree(v26, v27);
              }
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v18 + 16));
            }
          }
          v28 = (_QWORD *)(v5 + 16 * v10);
          v29 = *v4;
          if (!*v4 || (v29 += 16 * *(unsigned int *)(v29 - 4), (_QWORD *)v29 != v28))
          {
            if ((_QWORD *)v29 != v28)
            {
              *v28 = -1;
              v30 = *v15;
              *v15 = 0;
              if (v30)
                WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v30, (void *)a2);
              ++*(_DWORD *)(*v4 - 16);
              v31 = *v4;
              if (*v4)
                v32 = *(_DWORD *)(v31 - 12) - 1;
              else
                v32 = -1;
              *(_DWORD *)(v31 - 12) = v32;
              v33 = *v4;
              if (*v4)
              {
                v34 = 6 * *(_DWORD *)(v33 - 12);
                v35 = *(_DWORD *)(v33 - 4);
                if (v34 < v35 && v35 >= 9)
                  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v4, v35 >> 1, 0);
              }
            }
          }
          result = v36;
          v36 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::GeolocationPermissionRequestManagerProxy::isValidAuthorizationToken(WebKit::GeolocationPermissionRequestManagerProxy *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  int v11;

  result = (uint64_t)*a2;
  if (*a2)
  {
    v5 = *((_QWORD *)this + 1);
    if (v5)
    {
      v7 = *(_DWORD *)(v5 - 8);
      v8 = *(_DWORD *)(result + 16);
      if (v8 >= 0x100)
        v9 = v8 >> 8;
      else
        v9 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)result);
      for (i = 0; ; v9 = i + v11)
      {
        v11 = v9 & v7;
        result = *(_QWORD *)(v5 + 8 * (v9 & v7));
        if (result != -1)
        {
          if (!result)
            return result;
          if ((WTF::equal((WTF *)result, *a2, a3) & 1) != 0)
            break;
        }
        ++i;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

WTF::StringImpl **WebKit::GeolocationPermissionRequestManagerProxy::revokeAuthorizationToken(WebKit::GeolocationPermissionRequestManagerProxy *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **result;
  const WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl **v8;

  result = (WTF::StringImpl **)WebKit::GeolocationPermissionRequestManagerProxy::isValidAuthorizationToken(this, a2, a3);
  if ((_DWORD)result)
  {
    result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 1, a2, v6);
    v7 = *((_QWORD *)this + 1);
    if (v7)
    {
      v8 = (WTF::StringImpl **)(v7 + 8 * *(unsigned int *)(v7 - 4));
      if (v8 == result)
        return result;
    }
    else
    {
      if (!result)
        return result;
      v8 = 0;
    }
    if (v8 != result)
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove((uint64_t *)this + 1, result);
  }
  return result;
}

uint64_t WebKit::LegacyGlobalSettings::setCacheModel(char *a1, char a2)
{
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  unsigned int v9;

  *a1 = a2;
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v8);
  if (v9)
  {
    v4 = v8;
    v5 = 8 * v9;
    do
    {
      v6 = *v4++;
      WebKit::WebProcessPool::setCacheModel(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v3);
}

void WebKit::MediaKeySystemPermissionRequestManagerProxy::~MediaKeySystemPermissionRequestManagerProxy(WebKit::MediaKeySystemPermissionRequestManagerProxy *this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  uint64_t v5;

  WebKit::MediaKeySystemPermissionRequestManagerProxy::invalidatePendingRequests(this, a2);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 3);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  v5 = *((_QWORD *)this + 2);
  if (v5)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, v3);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, v3);
}

_QWORD *WebKit::MediaKeySystemPermissionRequestManagerProxy::invalidatePendingRequests(WebKit::MediaKeySystemPermissionRequestManagerProxy *this, void *a2)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;

  result = (_QWORD *)*((_QWORD *)this + 2);
  if (result)
  {
    v4 = *((unsigned int *)result - 1);
    v5 = &result[2 * v4];
    if (*((_DWORD *)result - 3))
    {
      v6 = result;
      if ((_DWORD)v4)
      {
        v7 = 16 * v4;
        v6 = result;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          v7 -= 16;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = &result[2 * v4];
  }
  else
  {
    v6 = 0;
    v4 = 0;
  }
  v5 = &result[2 * v4];
  if (result)
  {
LABEL_8:
    v8 = &result[2 * *((unsigned int *)result - 1)];
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  if (v8 != v6)
  {
    do
    {
      v9 = v6[1];
      v10 = *(unsigned int **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      v13 = v6 + 2;
      v6 = v5;
      if (v13 != v5)
      {
        v6 = v13;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v8);
    result = (_QWORD *)*((_QWORD *)this + 2);
  }
  if (result)
  {
    *((_QWORD *)this + 2) = 0;
    return (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable((uint64_t)result, (WTF::StringImpl *)a2);
  }
  return result;
}

WebKit::WebPageProxy *WebKit::MediaKeySystemPermissionRequestManagerProxy::denyRequest(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  WebKit::WebPageProxy *result;
  uint64_t v7;
  uint64_t v8;
  WTF::String *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::String *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;

  result = *(WebKit::WebPageProxy **)(a1 + 8);
  if (!*((_BYTE *)result + 729) && *((_BYTE *)result + 728))
  {
    v7 = WebKit::WebPageProxy::logger(result);
    v8 = *(_QWORD *)(a1 + 32);
    v13 = "MediaKeySystemPermissionRequestManagerProxy";
    v14 = 44;
    v15 = "denyRequest";
    v16 = v8;
    v9 = *(WTF::String **)(a2 + 16);
    v12 = v9;
    if (*(_BYTE *)(v7 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long,char [11],WTF::String>((uint64_t)&WebKit2LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v13, &v12, ", reason: ", a3);
      v9 = *(WTF::String **)(a2 + 16);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(v10 + 208);
    v12 = v9;
    v13 = (const char *)&v12;
    v14 = (uint64_t)a3;
    return (WebKit::WebPageProxy *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::MediaKeySystemWasDenied>(v11, (uint64_t **)&v13, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 1896), 0);
  }
  return result;
}

WebKit::WebPageProxy *WebKit::MediaKeySystemPermissionRequestManagerProxy::grantRequest(uint64_t a1, uint64_t a2)
{
  WebKit::WebPageProxy *result;
  uint64_t v5;
  uint64_t *v6;
  WTF::String *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::String *v10;
  uint64_t *v11[4];

  result = *(WebKit::WebPageProxy **)(a1 + 8);
  if (!*((_BYTE *)result + 729) && *((_BYTE *)result + 728))
  {
    v5 = WebKit::WebPageProxy::logger(result);
    v6 = *(uint64_t **)(a1 + 32);
    v11[0] = (uint64_t *)"MediaKeySystemPermissionRequestManagerProxy";
    v11[1] = (uint64_t *)44;
    v11[2] = (uint64_t *)"grantRequest";
    v11[3] = v6;
    v7 = *(WTF::String **)(a2 + 16);
    v10 = v7;
    if (*(_BYTE *)(v5 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long,char [11],WTF::String>((uint64_t)&WebKit2LogEME, 0, (WTF::Logger::LogSiteIdentifier *)v11, &v10, ", keySystem: ", (WTF::StringImpl **)(a2 + 64));
      v7 = *(WTF::String **)(a2 + 16);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(v8 + 208);
    v10 = v7;
    v11[0] = (uint64_t *)&v10;
    return (WebKit::WebPageProxy *)WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::MediaKeySystemWasGranted>(v9, v11, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 1896), 0);
  }
  return result;
}

uint64_t *WebKit::MediaKeySystemPermissionRequestManagerProxy::createRequestForFrame@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _DWORD **a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v22;
  _QWORD v23[4];
  _DWORD *v24;

  v24 = a2;
  v14 = WebKit::WebPageProxy::logger(*(WebKit::WebPageProxy **)(a1 + 8));
  v15 = *(_QWORD *)(a1 + 32);
  v23[0] = "MediaKeySystemPermissionRequestManagerProxy";
  v23[1] = 44;
  v23[2] = "createRequestForFrame";
  v23[3] = v15;
  v22 = a2;
  if (*(_BYTE *)(v14 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogEME, 0, (WTF::Logger::LogSiteIdentifier *)v23, (WTF::String **)&v22);
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 280);
  v17 = *(_QWORD *)(v16 + 272);
  v18 = *(_QWORD *)(v16 + 280);
  v19 = WTF::fastMalloc((WTF *)0x48);
  v20 = (_DWORD *)WebKit::MediaKeySystemPermissionRequestProxy::MediaKeySystemPermissionRequestProxy(v19, (unsigned int *)a1, (uint64_t)a2, v17, v18, a3, a4, a5, a6);
  *a7 = v20;
  v22 = v20;
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::add<WebKit::MediaKeySystemPermissionRequestProxy*>((uint64_t *)(a1 + 16), (WTF::StringImpl *)&v24, &v22, (uint64_t)v23);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::add<WebKit::MediaKeySystemPermissionRequestProxy*>@<X0>(uint64_t *result@<X0>, WTF::StringImpl *a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)a2 + ~(*(_QWORD *)a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v23;
        goto LABEL_33;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *(_QWORD *)a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  if (*a3)
    ++*v20;
  result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v20;
  if (result)
    result = (uint64_t *)WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref((WTF::StringImpl **)result, a2);
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_26:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v24 = *v6;
      if (*v6)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_26;
  }
  v29 = v24 + 16 * v27;
  v28 = 1;
LABEL_33:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

uint64_t WebKit::MediaKeySystemPermissionRequestProxy::MediaKeySystemPermissionRequestProxy(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, _DWORD **a9)
{
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  _DWORD *v20;

  *(_DWORD *)a1 = 1;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2, (uint64_t)a2);
  v17 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 8) = v17;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a7;
  v19 = *a8;
  *a8 = 0;
  *(_QWORD *)(a1 + 56) = v19;
  v20 = *a9;
  if (*a9)
    *v20 += 2;
  *(_QWORD *)(a1 + 64) = v20;
  return a1;
}

uint64_t WebKit::MediaKeySystemPermissionRequestProxy::allow(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *(_QWORD *)(this + 8);
  if (v1)
  {
    v2 = this;
    this = *(_QWORD *)(v1 + 8);
    if (this)
    {
      WebKit::MediaKeySystemPermissionRequestManagerProxy::grantRequest(this, v2);
      this = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (this)
      {
        do
        {
          v4 = __ldaxr((unsigned int *)this);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, (unsigned int *)this));
        if (!v5)
        {
          atomic_store(1u, (unsigned int *)this);
          return WTF::fastFree((WTF *)this, v3);
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::MediaKeySystemPermissionRequestProxy::deny(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;

  v1 = *(_QWORD *)(this + 8);
  if (v1)
  {
    v2 = this;
    this = *(_QWORD *)(v1 + 8);
    if (this)
    {
      v7 = 0;
      WebKit::MediaKeySystemPermissionRequestManagerProxy::denyRequest(this, v2, &v7);
      v4 = v7;
      v7 = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v3);
        else
          *(_DWORD *)v4 -= 2;
      }
      this = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (this)
      {
        do
        {
          v5 = __ldaxr((unsigned int *)this);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, (unsigned int *)this));
        if (!v6)
        {
          atomic_store(1u, (unsigned int *)this);
          return WTF::fastFree((WTF *)this, v3);
        }
      }
    }
  }
  return this;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl ***v4;
  WTF::StringImpl **v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl ***)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WTF::StringImpl **)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref(v5, a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl **WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[8];
    *((_QWORD *)v2 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *((_QWORD *)v2 + 7);
    *((_QWORD *)v2 + 7) = 0;
    if (v4)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
    v5 = (unsigned int *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
    return (WTF::StringImpl **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FrameLoadState::didStartProvisionalLoad(WTF::URL const&)::$_0,void,WebKit::FrameLoadStateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FrameLoadState::didSuspend(void)::$_0,void,WebKit::FrameLoadStateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FrameLoadState::didReceiveServerRedirectForProvisionalLoad(WTF::URL const&)::$_0,void,WebKit::FrameLoadStateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FrameLoadState::didFailProvisionalLoad(void)::$_0,void,WebKit::FrameLoadStateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FrameLoadState::didCommitLoad(void)::$_0,void,WebKit::FrameLoadStateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FrameLoadState::didFinishLoad(void)::$_0,void,WebKit::FrameLoadStateObserver &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::FrameLoadState::setURL(WTF::URL const&)::$_0,void,WebKit::FrameLoadStateObserver &>::call(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
}

unsigned int **WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(unsigned int **this, void *a2)
{
  WTF *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (WTF *)this;
  if (*(_DWORD *)this == 1)
  {
    v3 = this[3];
    *((_QWORD *)v2 + 3) = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
    return (unsigned int **)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int ***v4;
  unsigned int **v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (unsigned int ***)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (unsigned int **)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v5, a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy,WTF::RawPtrTraits<WebKit::GeolocationPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::GeolocationPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::GeolocationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int **v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int **v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (unsigned int **)v26[1];
          v26[1] = 0;
          if (v27)
            WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v27, v10);
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(unsigned int ***)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v30, v10);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(unsigned int ***)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            WTF::RefCounted<WebKit::GeolocationPermissionRequestProxy>::deref(v16, v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long,char [11],WTF::String>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, WTF::String **a4, const char *a5, WTF::StringImpl **a6)
{
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  WTF *v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::String *v29;
  WTF::StringImpl *v30;
  void *v31;
  uint64_t i;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *result;
  char *v36;
  WTF::StringImpl **v37;
  WTF *v39[2];
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint8_t buf[4];
  char *v46;
  int v47;
  int v48;
  _DWORD v49[4];
  WTF::StringImpl *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::number(*a4);
  v36 = (char *)a5;
  WTF::String::String((WTF::String *)&v41, a5);
  v37 = a6;
  v11 = *a6;
  if (*a6)
    *(_DWORD *)v11 += 2;
  v40 = v11;
  WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v43, (uint64_t *)&v42, (uint64_t *)&v41, (uint64_t *)&v40, &v44);
  v13 = v40;
  v40 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v41;
  v41 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v42;
  v42 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v43;
  v43 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(NSObject **)(a1 + 32);
  v18 = (WTF *)os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v18)
  {
    WTF::String::utf8();
    v20 = v39[0] ? (char *)v39[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    v46 = v20;
    _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v18 = v39[0];
    v39[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        v18 = (WTF *)WTF::fastFree(v18, v19);
      else
        --*(_DWORD *)v18;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v22 = *v21;
      if ((v22 & 1) != 0)
        break;
      v23 = __ldaxr(v21);
      if (v23 == v22)
      {
        if (!__stxr(v22 | 1, v21))
        {
          v24 = WTF::Logger::observers(v18);
          v25 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v25)
          {
            v26 = *(uint64_t **)v24;
            v27 = *(_QWORD *)v24 + 8 * v25;
            do
            {
              v28 = *v26;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v29 = *a4;
              v47 = 0;
              WTF::String::number(v29);
              v48 = 0;
              WTF::String::String((WTF::String *)v49, v36);
              v49[2] = 0;
              v30 = *v37;
              if (*v37)
                *(_DWORD *)v30 += 2;
              v50 = v30;
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v39, (uint64_t)buf, 4uLL);
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v28 + 16))(v28, a1, a2, v39);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v39, v31);
              for (i = 56; i != -8; i -= 16)
              {
                v33 = *(WTF::StringImpl **)&buf[i];
                *(_QWORD *)&buf[i] = 0;
                if (v33)
                {
                  if (*(_DWORD *)v33 == 2)
                    WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v33 -= 2;
                }
              }
              ++v26;
            }
            while (v26 != (uint64_t *)v27);
          }
          v34 = __ldxr(v21);
          if (v34 == 1)
          {
            if (!__stlxr(0, v21))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::MediaKeySystemWasDenied>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2277;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::MediaKeySystemWasGranted>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2278;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::MediaKeySystemPermissionRequestProxy,WTF::RawPtrTraits<WebKit::MediaKeySystemPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::MediaKeySystemPermissionRequestProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaKeySystemRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  uint64_t *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (uint64_t *)(v4 + 16 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 16 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = (uint64_t *)(v16 + 16 * v23);
          v26 = (WTF::StringImpl **)v25[1];
          v25[1] = 0;
          if (v26)
            WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref(v26, v9);
          *v25 = *v12;
          v27 = v4 + 16 * v10;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          v25[1] = v28;
          v29 = *(WTF::StringImpl ***)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
            WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref(v29, v9);
          if (v12 == a2)
            v11 = v25;
        }
        else
        {
          v14 = v4 + 16 * v10;
          v15 = *(WTF::StringImpl ***)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
            WTF::RefCounted<WebKit::MediaKeySystemPermissionRequestProxy>::deref(v15, v9);
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

void sub_1972DF5EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1972DF700(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1972DF79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  _Unwind_Resume(a1);
}

void sub_1972DF980(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;

  if (!a10)
    goto LABEL_19;
  v12 = *(_QWORD *)(a10 + 8);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
LABEL_7:
    v14 = *(_QWORD *)(v12 + 8);
    v15 = v14 - 1;
    *(_QWORD *)(v12 + 8) = v14 - 1;
    if (v14 == 1)
    {
      v19 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v19 != 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = __ldxr((unsigned __int8 *)v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
LABEL_14:
        if (!v15)
        {
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          if (!v17)
            WTF::fastFree((WTF *)v12, a2);
        }
LABEL_19:
        if (a11)
          CFRelease(*(CFTypeRef *)(a11 + 8));
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](v12);
  goto LABEL_7;
}

void sub_1972DFBE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1972DFCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  CFRelease(*(CFTypeRef *)(v10 + 8));
  if (a9)
    CFRelease(*(CFTypeRef *)(a9 + 8));
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  _Unwind_Resume(a1);
}

void sub_1972DFDFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1972DFECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  CFRelease(*(CFTypeRef *)(v11 + 8));
  if (a10)
    CFRelease(*(CFTypeRef *)(a10 + 8));
  if (v10)
    CFRelease(*(CFTypeRef *)(v10 + 8));
  _Unwind_Resume(a1);
}

void sub_1972DFF7C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1972E0024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v9 + 16));
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1972E00AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

WKWebProcessBundleParameters *WKBundleGetParameters(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::InjectedBundle::bundleParameters((WebKit::InjectedBundle *)a1);
}

void sub_1972E0218(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1972E0324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, int a12)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&a9);
  if (a12 != -1)
    ((void (*)(WTF::StringImpl **, char *))off_1E34D1140[a12])(&a9, &a10);
  _Unwind_Resume(a1);
}

void sub_1972E0434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10)
{
  WTF::StringImpl *v11;

  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v11);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1972E05AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12)
{
  WTF::StringImpl *v13;

  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a12);
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v13);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, v13);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(a1);
}

void sub_1972E06E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;

  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v12 - 24));
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v14);
    else
      *(_DWORD *)a9 -= 2;
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a12);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<WebCore::DocumentParserYieldToken>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    v4 = (WTF *)MEMORY[0x19AEB29DC]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore7ElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore7ElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WebKit::setOverrideLanguages(_DWORD *a1)
{
  {
    if (dword_1EE341DEC)
      WTF::VectorDestructor<true,WTF::String>::destruct((WTF::StringImpl *)WebKit::overrideLanguagesStorage(void)::storage, (WTF::StringImpl *)(WebKit::overrideLanguagesStorage(void)::storage + 8 * dword_1EE341DEC));
  }
  else
  {
    WebKit::overrideLanguagesStorage(void)::storage = 0;
    unk_1EE341DE8 = 0;
  }
  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)&WebKit::overrideLanguagesStorage(void)::storage, a1);
}

WTF::StringImpl *WebKit::PageLoadState::reset(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_WORD *)(a1 + 192) = 2;
  v3 = *(WTF::StringImpl **)(a1 + 208);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v12 = 0u;
  v13 = 0u;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 232, (uint64_t)&v12);
  if (DWORD2(v13) != -1)
    ((void (*)(char *, __int128 *))off_1E34D1268[DWORD2(v13)])(&v11, &v12);
  v7 = *(WTF::StringImpl **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)(a1 + 360);
  *(_QWORD *)(a1 + 360) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = *(WTF::StringImpl **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  return result;
}

WTF::StringImpl *WebKit::PageLoadState::didExplicitOpen(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  WTF::String::operator=((WTF::StringImpl **)(a1 + 224), a3);
  result = *(WTF::StringImpl **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WebKit::PageLoadState::didFailProvisionalLoad(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_BYTE *)(a1 + 192) = 2;
  v3 = *(WTF::StringImpl **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::String::operator=((WTF::StringImpl **)(a1 + 264), (WTF::StringImpl *)(a1 + 360));
}

WebKit::ProcessThrottler *WebKit::ProcessThrottler::ProcessThrottler(WebKit::ProcessThrottler *this, WebKit::AuxiliaryProcessProxy *a2, char a3)
{
  _QWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  WTF::RunLoop *v10;
  _QWORD *v11;
  WTF::RunLoop *v12;
  WTF::RunLoop *v13;
  _QWORD *v14;
  WTF::RunLoop *v15;
  WTF::RunLoop *v16;
  _QWORD *v17;

  *(_QWORD *)this = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *((_BYTE *)v6 + 16) = 1;
  *((_QWORD *)this + 1) = v6;
  v7 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v8 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = v8;
  v10 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v7);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E34D12E0;
  v11[1] = WebKit::ProcessThrottler::prepareToSuspendTimeoutTimerFired;
  v11[2] = 0;
  v11[3] = this;
  v12 = (WTF::RunLoop *)WTF::RunLoop::TimerBase::TimerBase((WebKit::ProcessThrottler *)((char *)this + 40), v10);
  *((_QWORD *)this + 5) = off_1E34ABE00;
  *((_QWORD *)this + 8) = v11;
  v13 = (WTF::RunLoop *)WTF::RunLoop::main(v12);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v14 = off_1E34D12E0;
  v14[1] = WebKit::ProcessThrottler::dropNearSuspendedAssertionTimerFired;
  v14[2] = 0;
  v14[3] = this;
  v15 = (WTF::RunLoop *)WTF::RunLoop::TimerBase::TimerBase((WebKit::ProcessThrottler *)((char *)this + 72), v13);
  *((_QWORD *)this + 9) = off_1E34ABE00;
  *((_QWORD *)this + 12) = v14;
  v16 = (WTF::RunLoop *)WTF::RunLoop::main(v15);
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v17 = off_1E34D12E0;
  v17[1] = WebKit::ProcessThrottler::prepareToDropLastAssertionTimeoutTimerFired;
  v17[2] = 0;
  v17[3] = this;
  WTF::RunLoop::TimerBase::TimerBase((WebKit::ProcessThrottler *)((char *)this + 104), v16);
  *((_QWORD *)this + 13) = off_1E34ABE00;
  *((_QWORD *)this + 16) = v17;
  *((_BYTE *)this + 176) = 0;
  *((_WORD *)this + 92) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_BYTE *)this + 168) = 0;
  *((_BYTE *)this + 186) = a3;
  *(_WORD *)((char *)this + 187) = 257;
  *((_BYTE *)this + 189) = 0;
  return this;
}

unsigned int *WebKit::ProcessThrottler::prepareToSuspendTimeoutTimerFired(WebKit::ProcessThrottler *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  WebKit::ProcessThrottler *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 136);
    if (v3)
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    v6 = 134218240;
    v7 = this;
    v8 = 1024;
    v9 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::prepareToSuspendTimeoutTimerFired: Updating process assertion to allow suspension", (uint8_t *)&v6, 0x12u);
  }
  if (!*((_BYTE *)this + 176))
  {
    __break(0xC471u);
    JUMPOUT(0x1972E0D00);
  }
  v4 = WebKit::ProcessThrottler::expectedThrottleState(this);
  return WebKit::ProcessThrottler::setThrottleState((unsigned int *)this, v4);
}

unsigned int *WebKit::ProcessThrottler::dropNearSuspendedAssertionTimerFired(WebKit::ProcessThrottler *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  WebKit::ProcessThrottler *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 136);
    if (v3)
      LODWORD(v3) = *(_DWORD *)(v3 + 108);
    v6 = 134218240;
    v7 = this;
    v8 = 1024;
    v9 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::dropNearSuspendedAssertionTimerFired: Removing near-suspended process assertion", (uint8_t *)&v6, 0x12u);
  }
  v4 = *((_QWORD *)this + 3);
  if (!v4 || *(_BYTE *)(v4 + 16))
  {
    __break(0xC471u);
    JUMPOUT(0x1972E0DF4);
  }
  return WebKit::ProcessThrottler::clearAssertion((unsigned int *)this);
}

void WebKit::ProcessThrottler::prepareToDropLastAssertionTimeoutTimerFired(WebKit::ProcessThrottler *this)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebKit::ProcessThrottler *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 136);
    if (v4)
      LODWORD(v4) = *(_DWORD *)(v4 + 108);
    v6 = 134218240;
    v7 = this;
    v8 = 1024;
    v9 = v4;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::prepareToDropLastAssertionTimeoutTimerFired:", (uint8_t *)&v6, 0x12u);
  }
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 8), v3);
}

unsigned int *WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::ProcessThrottlerActivity>(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  int v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  unsigned int *result;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;

  v6 = a2[3];
  v7 = a2[2] + 1;
  a2[2] = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v9 = *(_DWORD *)(v8 - 4);
      if (!v9)
        goto LABEL_25;
      v10 = 0;
      do
      {
        while (1)
        {
          v11 = *(_QWORD *)(v8 + 8 * --v9);
          if ((unint64_t)(v11 + 1) >= 2 && !*(_QWORD *)(v11 + 8))
            break;
          if (!v9)
            goto LABEL_14;
        }
        *(_QWORD *)(v8 + 8 * v9) = 0;
        do
        {
          v12 = __ldaxr((unsigned int *)v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, (unsigned int *)v11));
        if (!v13)
        {
          atomic_store(1u, (unsigned int *)v11);
          WTF::fastFree((WTF *)v11, a2);
        }
        *(_QWORD *)(v8 + 8 * v9) = -1;
        ++v10;
      }
      while (v9);
LABEL_14:
      v8 = *(_QWORD *)a2;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        v14 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
          v15 = *(_DWORD *)(v14 - 12);
        else
          v15 = 0;
        *(_DWORD *)(v14 - 12) = v15 - v10;
        v8 = *(_QWORD *)a2;
      }
      if (v8)
      {
        v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
          v8 = *(_QWORD *)a2;
          a2[2] = 0;
          if (!v8)
          {
            v18 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        a2[2] = 0;
LABEL_28:
        v18 = *(_DWORD *)(v8 - 12);
        v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_30:
          a2[3] = 2 * v19;
          goto LABEL_31;
        }
LABEL_29:
        v19 = v18;
        goto LABEL_30;
      }
    }
    v18 = 0;
    a2[2] = 0;
    goto LABEL_29;
  }
LABEL_31:
  v20 = *a3;
  if (!*a3)
  {
    v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = a3;
    v22 = (unsigned int *)*a3;
    *a3 = v20;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
      v20 = *a3;
    }
  }
  do
    v25 = __ldaxr((unsigned int *)v20);
  while (__stlxr(v25 + 1, (unsigned int *)v20));
  do
    v26 = __ldaxr((unsigned int *)v20);
  while (__stlxr(v26 + 1, (unsigned int *)v20));
  v33 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a2, &v33, a1);
  result = (unsigned int *)v33;
  v33 = 0;
  if (result)
  {
    do
    {
      v31 = __ldaxr(result);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, result));
    if (!v32)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v27);
    }
  }
  if (v20)
  {
    do
    {
      v29 = __ldaxr((unsigned int *)v20);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, (unsigned int *)v20));
    if (!v30)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v27);
    }
  }
  return result;
}

unsigned int *WebKit::ProcessThrottlerActivity::invalidate(uint64_t a1, int a2)
{
  BOOL v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  void *v13;
  unsigned int *result;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 33))
    v3 = a2 == 0;
  else
    v3 = 0;
  if (!v3)
  {
    v4 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 8);
      if (v5 && (v5 = *(_QWORD *)(v5 + 8)) != 0)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 136);
        if (v6)
          LODWORD(v6) = *(_DWORD *)(v6 + 108);
      }
      else
      {
        LODWORD(v6) = 0;
      }
      v7 = "foreground";
      v8 = *(_QWORD *)(a1 + 16);
      if (!*(_BYTE *)(a1 + 32))
        v7 = "background";
      v17 = 134219010;
      v18 = a1;
      v19 = 1024;
      v20 = v6;
      v21 = 2048;
      v22 = v5;
      v23 = 2082;
      v24 = v7;
      v25 = 2082;
      v26 = v8;
      _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d, throttler=%p] ProcessThrottler::Activity::invalidate: Ending %{public}s activity / '%{public}s'", (uint8_t *)&v17, 0x30u);
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  v11 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  if (*(_BYTE *)(v10 + 188))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      if ((WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::ProcessThrottlerActivity>(v10 + 136, (uint64_t *)a1) & 1) == 0)goto LABEL_23;
      goto LABEL_22;
    }
    if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::ProcessThrottlerActivity>(v10 + 152, (uint64_t *)a1))LABEL_22:WebKit::ProcessThrottler::updateThrottleStateIfNeeded((unsigned int *)v10);
  }
LABEL_23:
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) + 16));
  result = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
  {
    do
    {
      v15 = __ldaxr(result);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, result));
    if (!v16)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v13);
    }
  }
  return result;
}

unsigned int *WebKit::ProcessThrottler::clearAssertion(unsigned int *this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v14[12];
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 3))
  {
    v1 = (uint64_t)this;
    v2 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 8) + 136);
      if (v3)
        LODWORD(v3) = *(_DWORD *)(v3 + 108);
      *(_DWORD *)v14 = 134218240;
      *(_QWORD *)&v14[4] = v1;
      v15 = 1024;
      v16 = v3;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::clearAssertion:", v14, 0x12u);
    }
    if ((WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v1 + 104)) & 1) == 0)
      WTF::RunLoop::TimerBase::start();
    v6 = *(_QWORD *)(v1 + 24);
    v5 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = v6;
    if (v5)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 8), v4);
    v7 = *(unsigned int **)(*(_QWORD *)(v1 + 16) + 8);
    v8 = v7 + 4;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)v1, v1);
    v10 = *(unsigned int **)v1;
    if (*(_QWORD *)v1)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v12 = &off_1E34D13D0;
    v12[1] = v1;
    v12[2] = v10;
    *(_QWORD *)v14 = v12;
    (*(void (**)(unsigned int *, _BYTE *))(*(_QWORD *)v7 + 128))(v7, v14);
    v13 = *(_QWORD *)v14;
    *(_QWORD *)v14 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v7 + 4);
  }
  return this;
}

uint64_t WebKit::ProcessThrottlerTimedActivity::activityTimedOut(WebKit::ProcessThrottlerTimedActivity *this)
{
  NSObject *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  char v7;
  uint8_t buf[4];
  WebKit::ProcessThrottlerTimedActivity *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    v9 = this;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "%p - ProcessThrottlerTimedActivity::activityTimedOut:", buf, 0xCu);
  }
  v5 = 0;
  v6 = 0;
  v3 = *((_DWORD *)this + 12);
  if (!v3)
  {
    *((_QWORD *)this + 5) = 0;
    return ((uint64_t (*)(uint8_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v3])(buf, &v5);
  }
  buf[0] = 0;
  HIDWORD(v9) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v5);
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>((uint64_t)&v5, (uint64_t)this + 40);
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>((uint64_t)this + 40, (uint64_t)buf);
  if (HIDWORD(v9) != -1)
    result = ((uint64_t (*)(char *, uint8_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[HIDWORD(v9)])(&v7, buf);
  v3 = v6;
  if (v6 != -1)
    return ((uint64_t (*)(uint8_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v3])(buf, &v5);
  return result;
}

uint64_t WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, int a5, char a6)
{
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  _DWORD *v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  unsigned int v19;
  unsigned int v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  int v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2, a2);
  v13 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 32) = a5;
  *(_BYTE *)(a1 + 33) = a6;
  if (*(_BYTE *)(a2 + 188))
  {
    if (a5)
      v15 = (_DWORD *)(a2 + 136);
    else
      v15 = (_DWORD *)(a2 + 152);
    WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::ProcessThrottlerActivity>((uint64_t)&v27, v15, (uint64_t *)a1);
    WebKit::ProcessThrottler::updateThrottleStateIfNeeded((unsigned int *)a2);
    if (!*(_BYTE *)(a1 + 33))
    {
      v21 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *(_QWORD *)(a1 + 8);
        if (v22 && (v22 = *(_QWORD *)(v22 + 8)) != 0)
        {
          v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 16) + 8) + 136);
          if (v23)
            LODWORD(v23) = *(_DWORD *)(v23 + 108);
        }
        else
        {
          LODWORD(v23) = 0;
        }
        v24 = "background";
        v25 = *(_QWORD *)(a1 + 16);
        v27 = 134219010;
        if (a5)
          v24 = "foreground";
        v28 = a1;
        v29 = 1024;
        v30 = v23;
        v31 = 2048;
        v32 = (const char *)v22;
        v33 = 2082;
        v34 = v24;
        v35 = 2082;
        v36 = v25;
        _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d, throttler=%p] ProcessThrottler::Activity::Activity: Starting %{public}s activity / '%{public}s'", (uint8_t *)&v27, 0x30u);
      }
    }
  }
  else
  {
    if ((a6 & 1) == 0)
    {
      v16 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) + 136);
        if (v17)
          LODWORD(v17) = *(_DWORD *)(v17 + 108);
        v18 = "background";
        v27 = 134218754;
        v28 = a2;
        v29 = 1024;
        if (a5)
          v18 = "foreground";
        v30 = v17;
        v31 = 2080;
        v32 = v18;
        v33 = 2080;
        v34 = a3;
        _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::addActivity: not allowed to add %s activity %s", (uint8_t *)&v27, 0x26u);
        v13 = *(unsigned int **)(a1 + 8);
      }
    }
    *(_QWORD *)(a1 + 8) = 0;
    if (v13)
    {
      do
      {
        v19 = __ldaxr(v13);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v13));
      if (!v20)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
    }
  }
  return a1;
}

uint64_t WebKit::operator<<(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  char v7;

  v7 = 0;
  WebKit::logActivityNames<WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(a1, (uint64_t)"foreground_activities", 22, (_QWORD **)(a2 + 136), &v7);
  WebKit::logActivityNames<WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(a1, (uint64_t)"background_activities", 22, (_QWORD **)(a2 + 152), &v7);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v4 + 8));
    if (!*(_BYTE *)(v4 + 48))
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WebKit::ProcessAssertion::remainingRunTimeInSeconds((WebKit::ProcessAssertion *)*(unsigned int *)(v4 + 20));
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      v7 = 1;
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), v5);
  }
  if (v7)
    return a1;
  else
    return WTF::TextStream::operator<<();
}

{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[4];
  char v10;

  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v5 = *(_QWORD *)(a2 + 552);
  if (v5 && *(_DWORD *)(v5 - 12))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(_DWORD *)(*(_QWORD *)(a2 + 744) + 8))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(a2 + 576, v4))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize(a2 + 592, v6))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(_BYTE *)(a2 + 778))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(_BYTE *)(a2 + 712))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(_BYTE *)(a2 + 872))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(_BYTE *)(a2 + 952))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  if (*(_BYTE *)(a2 + 760))
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
  }
  v7 = WTF::TextStream::operator<<();
  WebKit::operator<<(v7, a2 + 200);
  WebKit::AuxiliaryProcessProxy::taskInfo(a2, (uint64_t)v9);
  if (!v10)
    return a1;
  result = WTF::TextStream::operator<<();
  if (v10)
  {
    WTF::TextStream::operator<<();
    result = WTF::TextStream::operator<<();
    if (v10)
    {
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      return a1;
    }
  }
  __break(1u);
  return result;
}

_QWORD *WebKit::logActivityNames<WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4, _BYTE *a5)
{
  _QWORD *result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  _QWORD **v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  result = (_QWORD *)WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(a4);
  if ((result & 1) == 0)
  {
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    WTF::TextStream::operator<<();
    *a5 = 1;
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(a4, &v19);
    v8 = *a4;
    if (*a4)
    {
      v9 = *((unsigned int *)v8 - 1);
      v10 = &v8[v9];
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    v14 = a4;
    v15 = v10;
    v16 = v10;
    v17 = v10;
    v18 = &v8[v9];
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
    v11 = v20;
    if (v20 != v15)
    {
      v12 = 1;
      do
      {
        if (!*(_BYTE *)(*(_QWORD *)(*v11 + 8) + 33))
        {
          if ((v12 & 1) == 0)
            WTF::TextStream::operator<<();
          WTF::TextStream::operator<<();
          v12 = 0;
          v11 = v20;
        }
        v13 = v11 + 1;
        v20 = v13;
        while (v13 != v21 && (unint64_t)(*v13 + 1) <= 1)
          v20 = ++v13;
        result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v19);
        ++*(_DWORD *)(v19 + 8);
        v11 = v20;
      }
      while (v20 != v15);
    }
  }
  return result;
}

unsigned int **WebKit::ProvisionalFrameProxy::ProvisionalFrameProxy(unsigned int **a1, uint64_t a2, unsigned int **a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const WebKit::WebProcessProxy *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  __int128 v20;
  uint64_t v21;
  char v22;
  uint64_t *v23[2];

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 16), a2);
  v6 = *(unsigned int **)(a2 + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *a1 = v6;
  v8 = *a3;
  *a3 = 0;
  a1[1] = v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (v9)
    v10 = v9 - 16;
  else
    v10 = 0;
  v11 = *(_QWORD *)(v10 + 256);
  CFRetain(*(CFTypeRef *)(v11 + 8));
  a1[2] = (unsigned int *)v11;
  v12 = *((_QWORD *)a1[1] + 2);
  {
    WebKit::liveProcessesLRU(void)::processes = 0u;
    unk_1ECE73890 = 0u;
  }
  WTF::WeakListHashSet<WebKit::WebProcessProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::moveToLastIfPresent<WebKit::WebProcessProxy>((uint64_t)&WebKit::liveProcessesLRU(void)::processes, v12);
  v13 = (const WebKit::WebProcessProxy *)*((_QWORD *)a1[1] + 2);
  v21 = *(_QWORD *)(a2 + 432);
  v22 = 1;
  v20 = *(_OWORD *)(a2 + 272);
  v23[0] = &v21;
  v23[1] = (uint64_t *)&v20;
  v14 = *(_QWORD *)(a2 + 24);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
      v16 = v15 - 16;
    else
      v16 = 0;
  }
  else
  {
    v16 = 0;
  }
  v17 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(v16 + 1344), (const WebKit::WebPageProxy *)v16, v13);
  if (v17)
    v18 = (uint64_t *)(v17 + 16);
  else
    v18 = (uint64_t *)(*(_QWORD *)(v16 + 32) + 1896);
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CreateProvisionalFrame>((uint64_t)v13, v23, *v18, 0);
  return a1;
}

void WebKit::ProvisionalFrameProxy::~ProvisionalFrameProxy(WebKit::ProvisionalFrameProxy *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const WebKit::WebProcessProxy *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  WebKit::FrameProcess *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  __int128 v15;
  __int128 *v16;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 8);
    v5 = *(_QWORD *)(v4 + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(const WebKit::WebProcessProxy **)(v3 + 16);
        v15 = *(_OWORD *)(v4 + 272);
        v16 = &v15;
        v8 = WebKit::BrowsingContextGroup::remotePageInProcess(*(WebKit::BrowsingContextGroup **)(v6 + 1328), (const WebKit::WebPageProxy *)(v6 - 16), v7);
        if (v8)
          v9 = (uint64_t *)(v8 + 16);
        else
          v9 = (uint64_t *)(*(_QWORD *)(v6 + 16) + 1896);
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DestroyProvisionalFrame>((uint64_t)v7, (uint64_t **)&v16, *v9, 0);
      }
    }
  }
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
    CFRelease(*(CFTypeRef *)(v10 + 8));
  v11 = (WebKit::FrameProcess *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
    WTF::RefCounted<WebKit::FrameProcess>::deref(v11, a2);
  v12 = *(unsigned int **)this;
  *(_QWORD *)this = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
}

uint64_t WebKit::ProvisionalPageProxy::ProvisionalPageProxy(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4, uint64_t *a5, uint64_t a6, char a7, const WebCore::ResourceRequest *a8, char a9, char a10, CFTypeRef *a11, uint64_t a12)
{
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  WebKit::WebsiteDataStore **v23;
  uint64_t v24;
  _DWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CFTypeRef *v38;
  WebKit::WebsiteDataStore *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WebKit::WebProcessPool *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  const WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const WTF::URL *v75;
  uint64_t v76;
  const WebKit::WebPageProxy *v77;
  uint64_t v78;
  IPC::Encoder *v79;
  WTF::StringImpl *v80;
  _QWORD *v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  IPC::Encoder *v90;
  WTF *v91;
  void *v92;
  WTF::StringImpl *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  WebKit::WebProcessProxy *v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  IPC::Encoder *v107;
  WTF *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  API::WebsitePolicies *v115;
  IPC::Encoder *v116[2];
  char v117;
  _BYTE v118[7];
  _QWORD *v119;
  WTF::StringImpl *v120;
  uint64_t v121[25];
  char v122;
  _BYTE buf[24];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  __int16 v129;
  char v130;
  char v131;
  uint64_t v132;
  _QWORD v133[178];

  v133[175] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 16) = &unk_1E34D11B8;
  v113 = a1 + 16;
  *(_QWORD *)a1 = off_1E34D1160;
  *(_QWORD *)(a1 + 8) = 0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v19 = *(unsigned int **)(a2 + 24);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  *(_QWORD *)(a1 + 24) = v19;
  if (*a5)
    v21 = *(_QWORD *)(*a5 + 32);
  else
    v21 = WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)(a1 + 32) = v21;
  v22 = *a3;
  *a3 = 0;
  ++*a4;
  *(_QWORD *)(a1 + 56) = 0;
  v23 = (WebKit::WebsiteDataStore **)(a1 + 56);
  *(_QWORD *)(a1 + 40) = v22;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (a12)
    CFRetain(*(CFTypeRef *)(a12 + 8));
  *(_QWORD *)(a1 + 80) = a12;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a6 + 16);
  *(_BYTE *)(a1 + 96) = a7;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 104), a8);
  *(_BYTE *)(a1 + 304) = a9;
  *(_BYTE *)(a1 + 305) = 0;
  *(_BYTE *)(a1 + 306) = a10;
  *(_WORD *)(a1 + 307) = 256;
  *(_BYTE *)(a1 + 309) = 1;
  if (a10)
  {
    v24 = WebCore::ResourceRequestBase::url(a8);
    v25 = *(_DWORD **)v24;
    if (*(_QWORD *)v24)
      *v25 += 2;
    *(_QWORD *)(a1 + 312) = v25;
    v26 = *(_OWORD *)(v24 + 24);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(v24 + 8);
    *(_OWORD *)(a1 + 336) = v26;
  }
  else
  {
    *(_QWORD *)(a1 + 312) = 0;
    WTF::URL::invalidate((WTF::URL *)(a1 + 312));
  }
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 200;
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)(a1 + 400) = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v28, v27, "Provisional Load", 17, 1, 0);
  if (*a5)
    v29 = *(_QWORD *)(*a5 + 144);
  else
    v29 = 0;
  *(_QWORD *)(a1 + 408) = v29;
  v30 = qword_1ECE71668;
  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
  {
    v31 = *(_QWORD *)(a1 + 32);
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (v32)
      v33 = v32 - 16;
    else
      v33 = 0;
    v34 = *(_QWORD *)(*(_QWORD *)(v33 + 32) + 744);
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 136);
    if (v35)
      LODWORD(v35) = *(_DWORD *)(v35 + 108);
    v36 = *(_QWORD *)(a1 + 88);
    v37 = *a5;
    *(_DWORD *)buf = 134219264;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v34;
    *(_WORD *)&buf[22] = 2048;
    v124 = v31;
    LOWORD(v125) = 1024;
    *(_DWORD *)((char *)&v125 + 2) = v35;
    HIWORD(v125) = 2048;
    v126 = v36;
    LOWORD(v127) = 2048;
    *(_QWORD *)((char *)&v127 + 2) = v37;
    _os_log_impl(&dword_196BCC000, v30, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::ProvisionalPageProxy: suspendedPage=%p", buf, 0x3Au);
  }
  WebKit::WebPageProxyMessageReceiverRegistration::startReceivingMessages((unsigned __int8 *)(a1 + 352), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), *(unsigned int **)(a1 + 32), a1);
  WebKit::WebProcessProxy::addProvisionalPageProxy(*(WebKit::WebProcessProxy **)(*(_QWORD *)(a1 + 40) + 16), (WebKit::ProvisionalPageProxy *)a1);
  v38 = *(CFTypeRef **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 752);
  if (v38)
    CFRetain(v38[1]);
  v39 = *v23;
  *v23 = (WebKit::WebsiteDataStore *)v38;
  if (v39)
  {
    CFRelease(*((CFTypeRef *)v39 + 1));
    v38 = (CFTypeRef *)*v23;
  }
  if (v38)
  {
    v40 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v41 = v40 ? v40 - 16 : 0;
    if (v38 != *(CFTypeRef **)(v41 + 264))
    {
      v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 512);
      if (v42)
      {
        v43 = *(_QWORD *)(v42 + 8);
        if (v43)
          v44 = (WebKit::WebProcessPool *)(v43 - 16);
        else
          v44 = 0;
      }
      else
      {
        v44 = 0;
      }
      CFRetain(*(CFTypeRef *)(v41 + 8));
      WebKit::WebProcessPool::pageBeginUsingWebsiteDataStore(v44, (WebKit::WebPageProxy *)v41, *v23);
      CFRelease(*(CFTypeRef *)(v41 + 8));
    }
  }
  v45 = *a5;
  if (*a5)
  {
    *(_BYTE *)(v45 + 91) = 3;
    buf[0] = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsSuspended>(*(_QWORD *)(v45 + 40), buf, *(_QWORD *)(v45 + 32), 0);
    v46 = *(_QWORD *)(*a5 + 48);
    if (v46)
      CFRetain(*(CFTypeRef *)(v46 + 8));
    v47 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v46;
    if (v47)
      CFRelease(*(CFTypeRef *)(v47 + 8));
  }
  if (a11)
    CFRetain(a11[1]);
  v115 = (API::WebsitePolicies *)a11;
  v48 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (v48)
    v49 = v48 - 16;
  else
    v49 = 0;
  v50 = *(_QWORD *)(*(_QWORD *)(v49 + 40) + 8);
  v51 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  v52 = (unsigned int *)(v51 + 16);
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 + 1, v52));
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v50 + 16))(buf, v50, v51);
  v55 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v56 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v55;
  if (v56)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    v57 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  }
  if (v51)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v51 + 16));
  if (v115)
  {
    API::WebsitePolicies::data(v115, (uint64_t)buf);
    v58 = WTF::fastMalloc((WTF *)0x70);
    *(_QWORD *)v58 = 0;
    *(_QWORD *)(v58 + 8) = 0;
    v59 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)v58 = v59;
    *(_QWORD *)(v58 + 16) = 0;
    *(_QWORD *)(v58 + 24) = 0;
    v60 = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)(v58 + 8) = v60;
    LODWORD(v60) = *(_DWORD *)&buf[16];
    *(_DWORD *)&buf[16] = 0;
    *(_DWORD *)(v58 + 16) = v60;
    LODWORD(v60) = *(_DWORD *)&buf[20];
    *(_DWORD *)&buf[20] = 0;
    *(_DWORD *)(v58 + 20) = v60;
    *(_QWORD *)(v58 + 32) = 0;
    v61 = v124;
    v124 = 0;
    *(_QWORD *)(v58 + 24) = v61;
    LODWORD(v61) = v125;
    LODWORD(v125) = 0;
    *(_DWORD *)(v58 + 32) = v61;
    LODWORD(v61) = HIDWORD(v125);
    HIDWORD(v125) = 0;
    *(_DWORD *)(v58 + 36) = v61;
    v62 = v126;
    v126 = 0;
    *(_QWORD *)(v58 + 40) = v62;
    v63 = v127;
    *(_QWORD *)&v127 = 0;
    *(_QWORD *)(v58 + 48) = v63;
    v64 = *((_QWORD *)&v127 + 1);
    *((_QWORD *)&v127 + 1) = 0;
    *(_QWORD *)(v58 + 56) = v64;
    v65 = v128;
    v128 = 0;
    *(_QWORD *)(v58 + 64) = v65;
    LOWORD(v65) = v129;
    *(_BYTE *)(v58 + 74) = v130;
    *(_WORD *)(v58 + 72) = v65;
    *(_BYTE *)(v58 + 80) = v131;
    *(_QWORD *)(v58 + 88) = 0;
    v66 = v132;
    v132 = 0;
    *(_QWORD *)(v58 + 88) = v66;
    v67 = v133[0];
    *(_QWORD *)(v58 + 103) = *(_QWORD *)((char *)v133 + 7);
    *(_QWORD *)(v58 + 96) = v67;
    std::unique_ptr<WebKit::WebsitePoliciesData>::reset[abi:sn180100]((WebKit::WebsitePoliciesData **)(a1 + 376), (WTF::StringImpl *)v58);
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)buf, v68);
  }
  v69 = *(unsigned int **)(*(_QWORD *)(a1 + 40) + 16);
  v70 = v69 + 4;
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v71 + 1, v70));
  v72 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (v72)
    v73 = v72 - 16;
  else
    v73 = 0;
  v74 = *(_QWORD *)(v73 + 224);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v74 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v54))
  {
    v75 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 104));
    WebCore::RegistrableDomain::RegistrableDomain(&v120, v75);
    v76 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (v76)
      v77 = (const WebKit::WebPageProxy *)(v76 - 16);
    else
      v77 = 0;
    v78 = *((_QWORD *)v77 + 35);
    v79 = *(IPC::Encoder **)(v78 + 272);
    v23 = *(WebKit::WebsiteDataStore ***)(v78 + 280);
    WebKit::BrowsingContextGroup::takeRemotePageInProcessForProvisionalPage(*(WebKit::BrowsingContextGroup **)(a1 + 48), v77, (const WebKit::WebProcessProxy *)v69, &v119);
    v81 = v119;
    v82 = v119 == 0;
    if (v119)
    {
      *(_QWORD *)(a1 + 32) = v119[2];
      v83 = *(_QWORD *)(v81[4] + 8);
      if (v83)
        v84 = v83 - 16;
      else
        v84 = 0;
      v85 = *(_QWORD *)(v84 + 280);
      if (v85)
        CFRetain(*(CFTypeRef *)(v85 + 8));
      v86 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v85;
      if (v86)
        CFRelease(*(CFTypeRef *)(v86 + 8));
      WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages((unsigned __int8 *)(a1 + 352));
      WebKit::WebPageProxyMessageReceiverRegistration::transferMessageReceivingFrom((WebKit::WebPageProxyMessageReceiverRegistration *)(a1 + 352), (WebKit::WebPageProxyMessageReceiverRegistration *)(v81 + 9), (IPC::MessageReceiver *)a1);
      buf[0] = 0;
      buf[8] = 0;
      *(_OWORD *)v121 = *(_OWORD *)(*(_QWORD *)(a1 + 72) + 272);
      v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(v113);
      v88 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v88 = 2148;
      *(_QWORD *)(v88 + 8) = v87;
      *(_QWORD *)(v88 + 528) = v88 + 16;
      *(_QWORD *)(v88 + 536) = v88 + 16;
      *(_OWORD *)(v88 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v88 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v88);
      v116[0] = (IPC::Encoder *)v88;
      IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v88, (uint64_t *)buf);
      IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v88, v121);
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(a1 + 16) + 32))(v113, v116, 0);
      v90 = v116[0];
      v116[0] = 0;
      if (v90)
      {
        IPC::Encoder::~Encoder(v90, v89);
        WTF::fastFree(v91, v92);
      }
      *(_BYTE *)(a1 + 307) = 1;
      (*(void (**)(_QWORD *))(*v81 + 8))(v81);
    }
    *(_BYTE *)(a1 + 308) = 0;
    v93 = v120;
    v120 = 0;
    if (v93)
    {
      if (*(_DWORD *)v93 == 2)
        WTF::StringImpl::destroy(v93, v80);
      else
        *(_DWORD *)v93 -= 2;
    }
    v94 = 1;
  }
  else
  {
    v94 = 0;
    v79 = 0;
    v82 = 1;
  }
  v95 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (v95)
    v96 = v95 - 16;
  else
    v96 = 0;
  v97 = *(WebKit::WebProcessProxy **)(*(_QWORD *)(a1 + 40) + 16);
  v98 = *(_QWORD *)(a1 + 64);
  v116[0] = v79;
  v116[1] = (IPC::Encoder *)v23;
  v117 = v94;
  *(_DWORD *)v118 = (_DWORD)v120;
  *(_DWORD *)&v118[3] = *(_DWORD *)((char *)&v120 + 3);
  LOBYTE(v121[0]) = 0;
  v122 = 0;
  WebKit::WebPageProxy::creationParameters(v96, v97, v98, (uint64_t)v121, 1, (uint64_t)&v115, (uint64_t)v116, (uint64_t)buf);
  std::__optional_destruct_base<WebKit::RemotePageParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v121, v99);
  v121[0] = a1 + 32;
  v121[1] = (uint64_t)buf;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::CreateWebPage>((uint64_t)v69, (uint64_t)v121, 0, 0);
  WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)buf);
  v100 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (v100)
    v101 = v100 - 16;
  else
    v101 = 0;
  WebKit::WebProcessProxy::addVisitedLinkStoreUser((uint64_t *)v69, *(unsigned int **)(v101 + 256), *(_QWORD *)(*(_QWORD *)(v101 + 32) + 744));
  v102 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (v102)
    v103 = v102 - 16;
  else
    v103 = 0;
  if (*(_BYTE *)(v103 + 1194))
  {
    v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v113 + 56))(v113);
    v105 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v105 = 2464;
    *(_QWORD *)(v105 + 8) = v104;
    *(_QWORD *)(v105 + 528) = v105 + 16;
    *(_QWORD *)(v105 + 536) = v105 + 16;
    *(_OWORD *)(v105 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v105 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v105);
    *(_QWORD *)buf = v105;
    (*(void (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v113 + 32))(v113, buf, 0);
    v107 = *(IPC::Encoder **)buf;
    *(_QWORD *)buf = 0;
    if (v107)
    {
      IPC::Encoder::~Encoder(v107, v106);
      WTF::fastFree(v108, v109);
    }
  }
  if (v82)
  {
    v110 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (v110)
      v111 = v110 - 16;
    else
      v111 = 0;
    WebKit::WebPageInspectorController::didCreateProvisionalPage(*(WebKit::WebPageInspectorController **)(v111 + 1072), (WebKit::ProvisionalPageProxy *)a1);
  }
  if (v69)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v69 + 4);
  if (v115)
    CFRelease(*((CFTypeRef *)v115 + 1));
  return a1;
}

uint64_t WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate()
{
  uint64_t result;

  if (!WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    return WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  result = 142;
  __break(0xC471u);
  return result;
}

void WebKit::ProvisionalPageProxy::~ProvisionalPageProxy(WebKit::ProvisionalPageProxy *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  WebKit::WebsiteDataStore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::WebProcessPool *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  IPC::Encoder *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  const void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebKit::BrowsingContextGroup *v30;
  WebKit::FrameProcess *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  IPC::Encoder *v35;

  *(_QWORD *)this = off_1E34D1160;
  *((_QWORD *)this + 2) = &unk_1E34D11B8;
  v2 = (char *)this + 16;
  if (!*((_BYTE *)this + 305))
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v3)
      v4 = v3 - 16;
    else
      v4 = 0;
    WebKit::WebPageInspectorController::willDestroyProvisionalPage(*(WebKit::WebPageInspectorController **)(v4 + 1072), this);
    v5 = *(uint64_t **)(*((_QWORD *)this + 5) + 16);
    v6 = (WebKit::WebsiteDataStore *)v5[94];
    if (v6)
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      v8 = v7 ? v7 - 16 : 0;
      if (v6 != *(WebKit::WebsiteDataStore **)(v8 + 264))
      {
        v9 = v5[64];
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
            v11 = (WebKit::WebProcessPool *)(v10 - 16);
          else
            v11 = 0;
        }
        else
        {
          v11 = 0;
        }
        CFRetain(*(CFTypeRef *)(v8 + 8));
        WebKit::WebProcessPool::pageEndUsingWebsiteDataStore(v11, (WebKit::WebPageProxy *)v8, v6);
        CFRelease(*(CFTypeRef *)(v8 + 8));
        v5 = *(uint64_t **)(*((_QWORD *)this + 5) + 16);
      }
    }
    if (v5[18] && *((_BYTE *)this + 309))
    {
      v12 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 56))(v2);
      v13 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v13 = 2135;
      *(_QWORD *)(v13 + 8) = v12;
      *(_QWORD *)(v13 + 528) = v13 + 16;
      *(_QWORD *)(v13 + 536) = v13 + 16;
      *(_OWORD *)(v13 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v13 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v13);
      v35 = (IPC::Encoder *)v13;
      (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v2 + 32))(v2, &v35, 0);
      v15 = v35;
      v35 = 0;
      if (v15)
      {
        IPC::Encoder::~Encoder(v15, v14);
        WTF::fastFree(v16, v17);
      }
      v5 = *(uint64_t **)(*((_QWORD *)this + 5) + 16);
    }
    v18 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v18)
      v19 = v18 - 16;
    else
      v19 = 0;
    WebKit::WebProcessProxy::removeVisitedLinkStoreUser(v5, *(WebKit::VisitedLinkStore **)(v19 + 256), *(_QWORD *)(*(_QWORD *)(v19 + 32) + 744));
  }
  WebKit::WebProcessProxy::removeProvisionalPageProxy(*(WebKit::WebProcessProxy **)(*((_QWORD *)this + 5) + 16), this);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 50, 0);
  v21 = (WTF *)*((_QWORD *)this + 48);
  if (v21)
  {
    *((_QWORD *)this + 48) = 0;
    *((_DWORD *)this + 98) = 0;
    WTF::fastFree(v21, v20);
  }
  std::unique_ptr<WebKit::WebsitePoliciesData>::reset[abi:sn180100]((WebKit::WebsitePoliciesData **)this + 47, 0);
  WebKit::WebPageProxyMessageReceiverRegistration::~WebPageProxyMessageReceiverRegistration((WebKit::ProvisionalPageProxy *)((char *)this + 352));
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (const void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v24)
    CFRelease(v24);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::ProvisionalPageProxy *)((char *)this + 104));
  v26 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v26)
    CFRelease(*(CFTypeRef *)(v26 + 8));
  v27 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v27)
    CFRelease(*(CFTypeRef *)(v27 + 8));
  v28 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v29)
    CFRelease(*(CFTypeRef *)(v29 + 8));
  v30 = (WebKit::BrowsingContextGroup *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v30)
    WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v30, v25);
  v31 = (WebKit::FrameProcess *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v31)
    WTF::RefCounted<WebKit::FrameProcess>::deref(v31, (WTF::StringImpl *)v25);
  v32 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      WTF::fastFree((WTF *)v32, v25);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v25);
}

{
  WTF *v1;
  void *v2;

  WebKit::ProvisionalPageProxy::~ProvisionalPageProxy(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebKit::ProvisionalPageProxy::~ProvisionalPageProxy(WebKit::ProvisionalPageProxy *this)
{
  WebKit::ProvisionalPageProxy::~ProvisionalPageProxy((WebKit::ProvisionalPageProxy *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  WebKit::ProvisionalPageProxy::~ProvisionalPageProxy((WebKit::ProvisionalPageProxy *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::ProvisionalPageProxy::processDidTerminate(WebKit::ProvisionalPageProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WebKit::ProvisionalPageProxy *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71668;
  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_ERROR))
  {
    v6 = *((_QWORD *)this + 4);
    v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v7)
      v8 = v7 - 16;
    else
      v8 = 0;
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 744);
    v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 16) + 136);
    if (v10)
      LODWORD(v10) = *(_DWORD *)(v10 + 108);
    v11 = *((_QWORD *)this + 11);
    v12 = 134219008;
    v13 = this;
    v14 = 2048;
    v15 = v9;
    v16 = 2048;
    v17 = v6;
    v18 = 1024;
    v19 = v10;
    v20 = 2048;
    v21 = v11;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::processDidTerminate:", (uint8_t *)&v12, 0x30u);
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  result = *(_QWORD *)(v4 + 1120);
  *(_QWORD *)(v4 + 1120) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebKit::ProvisionalPageProxy::cancel(WTF::StringImpl *this)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::SecurityOriginData *v10;
  const WTF::URL *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  CFTypeRef *v18;
  CFTypeRef v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  CFTypeRef v22;
  WTF::StringImpl *v23;
  CFTypeRef v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  CFTypeRef *v27;
  CFTypeRef v28[24];
  CFTypeRef cf;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  CFTypeRef v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  CFTypeRef v44;
  uint64_t v45;
  int v46;
  WTF::StringImpl *v47;
  __int128 v48;
  char v49;
  char v50;
  int v51;
  BOOL v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 39);
  if (v1)
  {
    if (*(_DWORD *)(v1 + 4))
    {
      v2 = (uint64_t)this;
      if (*((_QWORD *)this + 9))
      {
        v3 = qword_1ECE71668;
        if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
        {
          v4 = *(_QWORD *)(v2 + 32);
          v5 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8);
          if (v5)
            v6 = v5 - 16;
          else
            v6 = 0;
          v7 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 744);
          v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 16) + 136);
          if (v8)
            LODWORD(v8) = *(_DWORD *)(v8 + 108);
          v9 = *(_QWORD *)(v2 + 88);
          *(_DWORD *)buf = 134219008;
          v35 = v2;
          v36 = 2048;
          v37 = v7;
          v38 = 2048;
          v39 = v4;
          v40 = 1024;
          v41 = v8;
          v42 = 2048;
          v43 = v9;
          _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::cancel: Simulating a didFailProvisionalLoadForFrame", buf, 0x30u);
        }
        WebKit::cancelledError((WebKit *)(v2 + 104), (uint64_t)&v30);
        WebCore::ResourceErrorBase::setType();
        *(_WORD *)buf = 1;
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)((char *)&v35 + 4), (const WebCore::ResourceRequest *)(v2 + 104));
        v10 = (WebCore::SecurityOriginData *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v2 + 104));
        WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(v10, v11);
        v47 = 0;
        v12 = *(_QWORD *)(v2 + 72);
        v48 = *(_OWORD *)(v12 + 272);
        v49 = 0;
        v50 = 0;
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 16) + 136);
        if (v13)
          LODWORD(v13) = *(_DWORD *)(v13 + 108);
        v51 = v13;
        v14 = *(_QWORD *)(v12 + 24);
        v16 = v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0 && *(_QWORD *)(v15 + 280) == v12;
        v52 = v16;
        v53 = 0;
        WebCore::ResourceRequest::ResourceRequest(v28, (const WebCore::ResourceRequest *)(v2 + 104));
        v17 = *(_QWORD *)(v2 + 88);
        v27 = 0;
        WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame(v2, (uint64_t)buf, (WebCore::ResourceRequestBase *)v28, v17, (WTF::StringImpl **)(v2 + 312), (const WebCore::ResourceError *)&v30, 0, &v27, 0);
        v18 = v27;
        v27 = 0;
        if (v18)
          CFRelease(v18[1]);
        v19 = cf;
        cf = 0;
        if (v19)
          CFRelease(v19);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v28);
        v21 = v47;
        v47 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v20);
          else
            *(_DWORD *)v21 -= 2;
        }
        if (v46 != -1)
          ((void (*)(CFTypeRef *, uint64_t *))off_1E34D1268[v46])(v28, &v45);
        v46 = -1;
        v22 = v44;
        v44 = 0;
        if (v22)
          CFRelease(v22);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)((char *)&v35 + 4));
        v24 = v33;
        v33 = 0;
        if (v24)
          CFRelease(v24);
        v25 = v32;
        v32 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v23);
          else
            *(_DWORD *)v25 -= 2;
        }
        v26 = v31;
        v31 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v23);
          else
            *(_DWORD *)v26 -= 2;
        }
        this = v30;
        v30 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v23);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
  }
  return this;
}

void WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, uint64_t a4, WTF::StringImpl **a5, const WebCore::ResourceError *a6, char a7, CFTypeRef **a8, unsigned __int8 a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  NSObject *v22;
  WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebKit::BrowsingContextGroup *v29;
  const WTF::URL *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WebKit::WebFrameProxy *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  _BYTE buf[22];
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  int v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
  {
    v11 = *(_QWORD *)(a2 + 248);
    v13 = *(_QWORD *)(v9 + 272);
    v12 = *(_QWORD *)(v9 + 280);
    v14 = v13 == v11 && v12 == *(_QWORD *)(a2 + 256);
    if (v14 && (!a4 || *(_QWORD *)(a1 + 88) == a4))
    {
      v22 = qword_1ECE71668;
      if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_ERROR))
      {
        v45 = *(_QWORD *)(a1 + 32);
        v46 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        if (v46)
          v47 = v46 - 16;
        else
          v47 = 0;
        v48 = *(_QWORD *)(*(_QWORD *)(v47 + 32) + 744);
        v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 136);
        if (v49)
          LODWORD(v49) = *(_DWORD *)(v49 + 108);
        v50 = *(_QWORD *)(a1 + 88);
        *(_DWORD *)buf = 134219264;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v48;
        v53 = 2048;
        v54 = v45;
        v55 = 1024;
        v56 = v49;
        v57 = 2048;
        v58 = v50;
        v59 = 2048;
        v60 = v11;
        _os_log_error_impl(&dword_196BCC000, v22, OS_LOG_TYPE_ERROR, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::didFailProvisionalLoadForFrame: frameID=%llu", buf, 0x3Au);
      }
      *(_QWORD *)buf = 0;
      WTF::URL::invalidate((WTF::URL *)buf);
      WTF::URL::operator=(a1 + 312, (WTF::StringImpl *)buf);
      v25 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v23);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      if (v26)
        v27 = v26 - 16;
      else
        v27 = 0;
      v28 = *(_QWORD *)(v27 + 224);
      {
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v28 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v24))
      {
        v29 = *(WebKit::BrowsingContextGroup **)(a1 + 48);
        v30 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a3);
        WebKit::Site::Site((WTF::StringImpl **)buf, v30);
        WebKit::BrowsingContextGroup::transitionProvisionalPageToRemotePage(v29, (WebKit::ProvisionalPageProxy *)a1, (const WebKit::Site *)buf);
        v32 = *(WTF::StringImpl **)&buf[8];
        *(_QWORD *)&buf[8] = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v31);
          else
            *(_DWORD *)v32 -= 2;
        }
        v36 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v31);
          else
            *(_DWORD *)v36 -= 2;
        }
        *(_BYTE *)(a1 + 309) = 0;
      }
      else
      {
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        if (v33)
          v34 = v33 - 16;
        else
          v34 = 0;
        v35 = *(WebKit::WebFrameProxy **)(v34 + 280);
        if (v35)
          WebKit::WebFrameProxy::didFailProvisionalLoad(v35);
      }
      v37 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256));
      if (v37)
      {
        v38 = v37;
        CFRetain(*(CFTypeRef *)(v37 + 8));
        v39 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        if (v39)
          v40 = v39 - 16;
        else
          v40 = 0;
        v41 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
        v42 = (unsigned int *)(v41 + 16);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 + 1, v42));
        *(_QWORD *)buf = v41;
        WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(v40, (WebKit::WebProcessProxy **)buf, v38, a2, a3, a4, a5, a6, a7, a8, a9);
        v44 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v44)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v44 + 16));
        CFRelease(*(CFTypeRef *)(v38 + 8));
      }
      else
      {
        v51 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "void WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame(FrameInfoData &&, Resou"
                               "rceRequest &&, uint64_t, const String &, const WebCore::ResourceError &, WebCore::WillCon"
                               "tinueLoading, const UserData &, WebCore::WillInternallyHandleFailure)";
          _os_log_fault_impl(&dword_196BCC000, v51, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/ProvisionalPageProxy.cpp 391: Invalid message dispatched %s", buf, 0xCu);
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 144) + 98) = 1;
      }
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::CreateWebPage>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2577;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::WebPageCreationParameters,void>::encode((IPC::Encoder *)v8, *(_QWORD *)(a2 + 8));
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void WebKit::ProvisionalPageProxy::loadData(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl *a5, WTF::StringImpl *a6, WTF::StringImpl *a7, const void *a8, char a9, int a10, __int16 a11, uint64_t a12, char a13)
{
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  _BYTE buf[12];
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v21 = qword_1ECE71668;
  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
  {
    v22 = a1[4];
    v23 = *(_QWORD *)(a1[3] + 8);
    if (v23)
      v24 = v23 - 16;
    else
      v24 = 0;
    v25 = *(_QWORD *)(*(_QWORD *)(v24 + 32) + 744);
    v26 = *(_QWORD *)(*(_QWORD *)(a1[5] + 16) + 136);
    if (v26)
      LODWORD(v26) = *(_DWORD *)(v26 + 108);
    v27 = a1[11];
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a1;
    v36 = 2048;
    v37 = v25;
    v38 = 2048;
    v39 = v22;
    v40 = 1024;
    v41 = v26;
    v42 = 2048;
    v43 = v27;
    _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::loadData:", buf, 0x30u);
  }
  v28 = *(_QWORD *)(a1[3] + 8);
  if (v28)
    v29 = v28 - 16;
  else
    v29 = 0;
  v30 = *(_QWORD *)(a1[5] + 16);
  v31 = (unsigned int *)(v30 + 16);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 + 1, v31));
  *(_QWORD *)buf = v30;
  WebKit::WebPageProxy::loadDataWithNavigationShared(v29, (WebKit::WebProcessProxy **)buf, a1[4], a2, a3, a4, a5, a6, a7, a8, a9, v34, a11, a12, *(_BYTE *)(a2 + 577), a13);
  v33 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v33)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v33 + 16));
}

void WebKit::ProvisionalPageProxy::loadRequest(_QWORD *a1, uint64_t a2, uint64_t a3, const void *a4, int a5, __int16 a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  WebKit::WebPageProxy *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v17 = qword_1ECE71668;
  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_QWORD *)(a1[3] + 8);
    if (v18)
      v19 = v18 - 16;
    else
      v19 = 0;
    v20 = *(_QWORD *)(v19 + 32);
    v21 = *(_QWORD *)(*(_QWORD *)(a1[5] + 16) + 136);
    if (v21)
      LODWORD(v21) = *(_DWORD *)(v21 + 108);
    v22 = *(_QWORD *)(v20 + 744);
    v23 = a1[4];
    v24 = a1[11];
    if (a10)
      v25 = a9;
    else
      v25 = 0;
    *(_DWORD *)buf = 134219264;
    *(_QWORD *)&buf[4] = a1;
    v35 = 2048;
    v36 = v22;
    v37 = 2048;
    v38 = v23;
    v39 = 1024;
    v40 = v21;
    v41 = 2048;
    v42 = v24;
    v43 = 2048;
    v44 = v25;
    _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::loadRequest: existingNetworkResourceLoadIdentifierToResume=%llu", buf, 0x3Au);
  }
  v26 = *(_QWORD *)(a2 + 472);
  if (v26)
    v27 = *(_BYTE *)(a2 + 977) == 0;
  else
    v27 = 1;
  if (!v27)
    *(_QWORD *)(v26 + 392) = *(_QWORD *)(*(_QWORD *)(a1[5] + 16) + 176);
  v28 = *(_QWORD *)(a1[3] + 8);
  if (v28)
    v29 = (WebKit::WebPageProxy *)(v28 - 16);
  else
    v29 = 0;
  v30 = *(_QWORD *)(a1[5] + 16);
  v31 = (unsigned int *)(v30 + 16);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 + 1, v31));
  *(_QWORD *)buf = v30;
  WebKit::WebPageProxy::loadRequestWithNavigationShared(v29, (WebKit::WebProcessProxy **)buf, a1[4], a2, a3, *(_BYTE *)(a2 + 577), a4, a5, a6, a7, a9, a10);
  v33 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v33)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v33 + 16));
}

uint64_t WebKit::ProvisionalPageProxy::goToBackForwardItem(_QWORD *a1, uint64_t a2, uint64_t a3, API::WebsitePolicies **a4, char a5, uint64_t a6, char a7)
{
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  IPC::Encoder *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  WebKit::WebPageProxy *v36;
  WebCore::PublicSuffixStore *v37;
  WebCore::PublicSuffixStore *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  API::WebsitePolicies *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  IPC::Encoder *v59;
  WTF *v60;
  void *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69[5];
  const char **v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int16 v77;
  char v78;
  char v79;
  uint64_t v80;
  _QWORD v81[2];
  char v82;
  _BYTE v83[16];
  IPC::Encoder *v84;
  _BYTE buf[24];
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int16 v92;
  char v93;
  char v94;
  uint64_t v95;
  _QWORD v96[2];
  char v97;
  char v98;
  uint64_t v99;
  char v100;
  WTF::StringImpl *v101;
  const char **v102[5];

  v102[2] = *(const char ***)MEMORY[0x1E0C80C00];
  v14 = qword_1ECE71668;
  if (!os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
    goto LABEL_10;
  v15 = *(_QWORD *)(a1[3] + 8);
  if (v15)
    v16 = v15 - 16;
  else
    v16 = 0;
  v17 = *(_QWORD *)(v16 + 32);
  v18 = *(_QWORD *)(*(_QWORD *)(a1[5] + 16) + 136);
  if (v18)
    LODWORD(v18) = *(_DWORD *)(v18 + 108);
  v19 = *(_QWORD *)(v17 + 744);
  v20 = a1[4];
  v21 = a1[11];
  if (a7)
    goto LABEL_60;
  for (i = 0; ; i = a6)
  {
    *(_DWORD *)buf = 134219264;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v19;
    *(_WORD *)&buf[22] = 2048;
    v86 = v20;
    LOWORD(v87) = 1024;
    *(_DWORD *)((char *)&v87 + 2) = v18;
    WORD3(v87) = 2048;
    *((_QWORD *)&v87 + 1) = v21;
    LOWORD(v88) = 2048;
    *(_QWORD *)((char *)&v88 + 2) = i;
    _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::goToBackForwardItem: existingNetworkResourceLoadIdentifierToResume=%llu", buf, 0x3Au);
LABEL_10:
    v23 = *(_QWORD *)(a1[3] + 8);
    if (v23)
      v24 = v23 - 16;
    else
      v24 = 0;
    v25 = *(_QWORD *)(v24 + 592);
    CFRetain(*(CFTypeRef *)(a3 + 8));
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v26 = &off_1E34D1430;
    v26[1] = a1;
    v26[2] = a3;
    *(_QWORD *)buf = v26;
    WebKit::WebBackForwardList::filteredItemStates(v25, buf, (uint64_t)v83);
    v27 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    LOBYTE(v71) = 0;
    v82 = 0;
    if (*a4)
    {
      API::WebsitePolicies::data(*a4, (uint64_t)buf);
      std::optional<WebKit::WebsitePoliciesData>::operator=[abi:sn180100]<WebKit::WebsitePoliciesData,void>((uint64_t)&v71, (uint64_t *)buf);
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)buf, v28);
    }
    a4 = (API::WebsitePolicies **)(a1 + 2);
    v29 = (*(uint64_t (**)(_QWORD *))(a1[2] + 56))(a1 + 2);
    v30 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v30 = 2482;
    *(_QWORD *)(v30 + 8) = v29;
    *(_QWORD *)(v30 + 528) = v30 + 16;
    *(_QWORD *)(v30 + 536) = v30 + 16;
    *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v30 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
    *(_QWORD *)buf = v30;
    IPC::VectorArgumentCoder<false,WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v30, (uint64_t)v83);
    (*(void (**)(_QWORD *, _BYTE *, _QWORD))(a1[2] + 32))(a1 + 2, buf, 0);
    v32 = *(IPC::Encoder **)buf;
    *(_QWORD *)buf = 0;
    if (v32)
    {
      IPC::Encoder::~Encoder(v32, v31);
      WTF::fastFree(v33, v34);
    }
    v70 = 0;
    v14 = (a3 + 56);
    WTF::URL::URL((uint64_t)v69, (WTF::StringImpl **)(a3 + 56));
    v35 = *(_QWORD *)(a1[3] + 8);
    if (v35)
      v36 = (WebKit::WebPageProxy *)(v35 - 16);
    else
      v36 = 0;
    WebKit::WebPageProxy::maybeInitializeSandboxExtensionHandle(v36, *(WebKit::WebProcessProxy **)(a1[5] + 16), (const WTF::URL *)v69, (const WTF::URL *)(a3 + 344), &v70, 1);
    v38 = (WebCore::PublicSuffixStore *)WebCore::PublicSuffixStore::singleton(v37);
    WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(a3 + 56));
    WebCore::PublicSuffixStore::publicSuffix(v38, (const WTF::URL *)buf);
    v40 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v39);
      else
        *(_DWORD *)v40 -= 2;
    }
    *(_QWORD *)buf = *(_QWORD *)(a2 + 16);
    *(_OWORD *)&buf[8] = *(_OWORD *)(a3 + 32);
    LODWORD(v18) = *(unsigned __int16 *)(a2 + 488);
    if (v18 > 0xFF)
      break;
    __break(1u);
LABEL_60:
    ;
  }
  LOBYTE(v86) = *(_WORD *)(a2 + 488);
  BYTE1(v86) = a5;
  LOBYTE(v87) = 0;
  v97 = 0;
  if (v82)
  {
    v41 = v71;
    v71 = 0u;
    v87 = v41;
    *(_QWORD *)&v41 = v72;
    v72 = 0;
    *(_QWORD *)&v88 = v41;
    v42 = v73;
    v73 = 0;
    *((_QWORD *)&v88 + 1) = v42;
    *(_QWORD *)&v41 = v74;
    v74 = 0;
    v89 = v41;
    v43 = v75;
    v75 = 0u;
    v90 = v43;
    v44 = v76;
    v76 = 0u;
    v91 = v44;
    v93 = v78;
    v92 = v77;
    v94 = v79;
    v45 = v80;
    v80 = 0;
    *(_QWORD *)((char *)v96 + 7) = *(_QWORD *)((char *)v81 + 7);
    v95 = v45;
    v96[0] = v81[0];
    v97 = 1;
  }
  v46 = *(_QWORD *)(a1[3] + 8);
  if (v46)
    v47 = v46 - 16;
  else
    v47 = 0;
  v98 = *(_BYTE *)(v47 + 1288);
  v99 = a6;
  v100 = a7;
  v48 = v70;
  v70 = 0;
  v101 = v68;
  v102[0] = v48;
  v49 = *(_QWORD *)(*(_QWORD *)(a1[5] + 16) + 136);
  if (v49 && *(_BYTE *)(v49 + 104) && (WTF::URL::protocolIs() & 1) != 0)
  {
    v50 = *(_QWORD *)(a1[3] + 8);
    if (v50)
      v51 = v50 - 16;
    else
      v51 = 0;
    v52 = *(_QWORD *)(*(_QWORD *)(v51 + 32) + 744);
    v53 = (*(uint64_t (**)(_QWORD *))(a1[2] + 56))(a1 + 2);
    v54 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v54 = 2244;
    *(_QWORD *)(v54 + 8) = v53;
    *(_QWORD *)(v54 + 528) = v54 + 16;
    *(_QWORD *)(v54 + 536) = v54 + 16;
    *(_OWORD *)(v54 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v54 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v54);
    v84 = (IPC::Encoder *)v54;
    IPC::ArgumentCoder<WebKit::GoToBackForwardItemParameters,void>::encode((IPC::Encoder *)v54, (uint64_t *)buf);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v54, 8uLL, 8) = v52;
    v55 = (API::WebsitePolicies *)a1[2];
  }
  else
  {
    v56 = (*((uint64_t (**)(_QWORD *))*a4 + 7))(a1 + 2);
    v57 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v57 = 2243;
    *(_QWORD *)(v57 + 8) = v56;
    *(_QWORD *)(v57 + 528) = v57 + 16;
    *(_QWORD *)(v57 + 536) = v57 + 16;
    *(_OWORD *)(v57 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v57 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v57);
    v84 = (IPC::Encoder *)v57;
    IPC::ArgumentCoder<WebKit::GoToBackForwardItemParameters,void>::encode((IPC::Encoder *)v57, (uint64_t *)buf);
    v55 = *a4;
  }
  (*((void (**)(_QWORD *, IPC::Encoder **, _QWORD))v55 + 4))(a1 + 2, &v84, 0);
  v59 = v84;
  v84 = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v58);
    WTF::fastFree(v60, v61);
  }
  v62 = *(_QWORD *)(a1[5] + 16);
  if (*(_BYTE *)(v62 + 169))
  {
    WebKit::ResponsivenessTimer::start(v62 + 56);
  }
  else if (!*(_BYTE *)(v62 + 185))
  {
    *(_WORD *)(v62 + 184) = 256;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v102);
  v64 = v101;
  v101 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v63);
    else
      *(_DWORD *)v64 -= 2;
  }
  if (v97)
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v87, v63);
  v65 = v69[0];
  v69[0] = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v63);
    else
      *(_DWORD *)v65 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v70);
  if (v82)
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v71, v66);
  return WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v83, v66);
}

uint64_t std::optional<WebKit::WebsitePoliciesData>::operator=[abi:sn180100]<WebKit::WebsitePoliciesData,void>(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 112))
  {
    WebKit::WebsitePoliciesData::operator=(a1, a2);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData*>(a1, a2);
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

void WebKit::ProvisionalPageProxy::didCreateMainFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int BoolValueForKey;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  WebKit::FrameLoadState *v41;
  const WTF::URL *v42;
  WebKit::FrameLoadState *v43;
  const WTF::URL *v44;
  uint64_t v45;
  WebKit::WebPageProxy *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  CFTypeRef *v50;
  uint64_t v51;
  uint64_t v52;
  CFTypeRef *v53;
  _BYTE buf[12];
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  int v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE71668;
  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (v9)
      v10 = v9 - 16;
    else
      v10 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 744);
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 136);
    if (v12)
      LODWORD(v12) = *(_DWORD *)(v12 + 108);
    v13 = *(_QWORD *)(a1 + 88);
    *(_DWORD *)buf = 134219264;
    *(_QWORD *)&buf[4] = a1;
    v55 = 2048;
    v56 = v11;
    v57 = 2048;
    v58 = v8;
    v59 = 1024;
    v60 = v12;
    v61 = 2048;
    v62 = v13;
    v63 = 2048;
    v64 = a2;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::didCreateMainFrame: frameID=%llu", buf, 0x3Au);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v15 = v14 - 16;
  if (!v14)
    v15 = 0;
  v16 = *(_QWORD *)(v15 + 280);
  if (v16)
  {
    CFRetain(*(CFTypeRef *)(v16 + 8));
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  }
  if (v14)
    v17 = v14 - 16;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v17 + 224);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v18 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v7);
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v21 = v20 - 16;
  if (v20)
    v22 = v20 - 16;
  else
    v22 = 0;
  if (!BoolValueForKey)
  {
    CFRetain(*(CFTypeRef *)(v22 + 8));
    v24 = *(_DWORD **)(a1 + 40);
    v25 = API::Object::newObject(0x1C8uLL, 59);
    v26 = WebKit::WebFrameProxy::WebFrameProxy(v25, v22, v24, a2, a3);
    v27 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v26;
    if (v27)
      CFRelease(*(CFTypeRef *)(v27 + 8));
    goto LABEL_27;
  }
  v23 = *(_QWORD *)(v22 + 280);
  if (v23)
    CFRetain(*(CFTypeRef *)(v23 + 8));
  v21 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v23;
  if (v21)
LABEL_27:
    CFRelease(*(CFTypeRef *)(v21 + 8));
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (v28)
    v29 = v28 - 16;
  else
    v29 = 0;
  v30 = *(_QWORD *)(v29 + 160);
  *(_QWORD *)buf = *(_QWORD *)(a1 + 88);
  if (!WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageDecoderAVFObjC,WTF::RawPtrTraits<WebCore::ImageDecoderAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::ImageDecoderAVFObjC>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ImageDecoderIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v30 + 8), buf))goto LABEL_56;
  v32 = *(_QWORD *)(a1 + 72);
  if (v32)
  {
    CFRetain(*(CFTypeRef *)(v32 + 8));
    WebKit::FrameLoadState::setURL((WebKit::FrameLoadState *)(v32 + 40), (const WTF::URL *)(v16 + 48));
    v33 = *(_QWORD *)(v16 + 424);
    *(_QWORD *)(v16 + 424) = 0;
    v34 = *(_QWORD *)(v32 + 424);
    *(_QWORD *)(v32 + 424) = v33;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    CFRelease(*(CFTypeRef *)(v32 + 8));
  }
  if (*(_BYTE *)(a1 + 96))
  {
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (v35)
      v36 = v35 - 16;
    else
      v36 = 0;
    v37 = *(_QWORD *)(v36 + 224);
    {
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    v38 = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v37 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v31);
    v39 = *(_QWORD *)(a1 + 72);
    if (v38 && (v40 = *(_QWORD *)(v39 + 88)) != 0 && *(_DWORD *)(v40 + 4))
    {
      v41 = (WebKit::FrameLoadState *)(v39 + 40);
      v42 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 104));
      WebKit::FrameLoadState::didReceiveServerRedirectForProvisionalLoad(v41, v42);
    }
    else
    {
      v43 = (WebKit::FrameLoadState *)(v39 + 40);
      v44 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 104));
      WebKit::FrameLoadState::didStartProvisionalLoad(v43, v44);
    }
    v45 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (v45)
      v46 = (WebKit::WebPageProxy *)(v45 - 16);
    else
      v46 = 0;
    v47 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
    v48 = (unsigned int *)(v47 + 16);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
    v53 = 0;
    *(_QWORD *)buf = v47;
    WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrameShared(v46, (WebKit::WebProcessProxy **)buf, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 272), *(_QWORD *)(*(_QWORD *)(a1 + 72) + 280), *(CFTypeRef **)(a1 + 88), (WebCore::ResourceRequestBase *)(a1 + 104), &v53);
    v50 = v53;
    v53 = 0;
    if (v50)
      CFRelease(v50[1]);
    v51 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v51)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v51 + 16));
LABEL_56:
    if (!v16)
      return;
    goto LABEL_57;
  }
  if (v16)
  {
    v52 = *(_QWORD *)(v16 + 88);
    if (v52 && *(_DWORD *)(v52 + 4))
      WebKit::FrameLoadState::didStartProvisionalLoad((WebKit::FrameLoadState *)(*(_QWORD *)(a1 + 72) + 40), (const WTF::URL *)(v16 + 88));
LABEL_57:
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
}

void WebKit::ProvisionalPageProxy::didCreateContextInGPUProcessForVisibilityPropagation(WebKit::ProvisionalPageProxy *this, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WebKit::ProvisionalPageProxy *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71668;
  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 4);
    v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v6)
      v7 = v6 - 16;
    else
      v7 = 0;
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 744);
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 16) + 136);
    if (v9)
      LODWORD(v9) = *(_DWORD *)(v9 + 108);
    v10 = *((_QWORD *)this + 11);
    v11 = 134219264;
    v12 = this;
    v13 = 2048;
    v14 = v8;
    v15 = 2048;
    v16 = v5;
    v17 = 1024;
    v18 = v9;
    v19 = 2048;
    v20 = v10;
    v21 = 1024;
    v22 = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::didCreateContextInGPUProcessForVisibilityPropagation: contextID=%u", (uint8_t *)&v11, 0x36u);
  }
  *((_DWORD *)this + 103) = a2;
}

IPC::Encoder *WebKit::ProvisionalPageProxy::swipeAnimationDidEnd(WebKit::ProvisionalPageProxy *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *result;
  WTF *v6;
  void *v7;
  IPC::Encoder *v8;

  v1 = (char *)this + 16;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 2463;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v8 = (IPC::Encoder *)v3;
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v1 + 32))(v1, &v8, 0);
  result = v8;
  v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void WebKit::ProvisionalPageProxy::didReceiveMessage(WebKit::ProvisionalPageProxy *this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  unsigned int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  WebKit::WebPageProxy *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  uint64_t v37;
  WTF *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  int v49;
  uint64_t v50;
  WTF *v51;
  unint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WebKit::WebPageProxy *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v104;
  int v105;
  int v106;
  NSObject *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const WTF::StringImpl *v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  _DWORD *v124;
  WebKit::FrameProcess *v125;
  uint64_t v126;
  uint64_t v127;
  const WTF::URL *v128;
  const WTF::StringImpl *v129;
  const WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  unint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  NSObject *v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  WTF::StringImpl *v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int *v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  CFTypeRef *v182;
  uint64_t v183;
  WebKit::WebPageProxy *v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  WTF *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  WTF *v198;
  WTF::StringImpl *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int *v203;
  unsigned int v204;
  uint64_t v205;
  WTF::StringImpl *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  NSObject *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  WebCore::DiagnosticLoggingKeys *v222;
  uint64_t v223;
  unsigned int *v224;
  unsigned int v225;
  uint64_t v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  NSObject *v235;
  NSObject *v236;
  const char *v237;
  uint64_t v238;
  _DWORD *v239;
  WebKit::FrameProcess *v240;
  __int16 v241;
  uint64_t v242;
  __int16 v243;
  uint64_t v244;
  int v245;
  int v246;
  unsigned __int8 v247;
  char v248;
  uint64_t v249;
  _BYTE v250[16];
  __int128 v251;
  uint64_t *v252[2];
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  _BYTE v255[24];
  WTF::StringImpl *v256;
  __int16 v257;
  int v258;
  __int16 v259;
  uint64_t v260;
  __int16 v261;
  int v262;
  char v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  CFTypeRef *v267;
  char v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _BYTE v273[160];
  uint64_t v274;
  uint64_t v275;
  char v276;
  uint64_t v277;
  WTF::StringImpl *v278;
  uint64_t v279;
  uint64_t v280;
  __int128 v281;
  __int128 v282;
  _BYTE v283[40];
  CFTypeRef *v284;
  unsigned __int8 v285;
  char v286;
  unsigned __int8 v287;
  _DWORD *v288;
  unsigned __int8 v289;
  char v290;
  char v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char v295;
  _BYTE buf[22];
  __int16 v297;
  uint64_t v298;
  __int16 v299;
  int v300;
  __int16 v301;
  uint64_t v302;
  __int16 v303;
  uint64_t v304;
  char v305;
  const char **v306;
  char v307;
  char v308;
  WTF::StringImpl *v309;
  char v310;
  uint64_t v311;

  v311 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 <= 0x76B)
  {
    if (*((unsigned __int16 *)a3 + 25) <= 0x74Au)
    {
      switch(*((_WORD *)a3 + 25))
      {
        case 0x73A:
          IPC::Decoder::decode<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)a3, v255);
          if (v266)
          {
            v40 = v264;
            v41 = v265;
            v42 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
            v43 = v42 ? v42 - 16 : 0;
            v44 = *(_QWORD *)(*((_QWORD *)this + 5) + 16);
            v45 = (unsigned int *)(v44 + 16);
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 + 1, v45));
            *(_QWORD *)buf = v44;
            WebKit::WebPageProxy::contentFilterDidBlockLoadForFrameShared(v43, (uint64_t)buf, (uint64_t)v255, v40, v41);
            v47 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v47)
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v47 + 16));
          }
          std::__optional_destruct_base<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v255, v39);
          return;
        case 0x73B:
        case 0x73C:
        case 0x73F:
          return;
        case 0x73D:
        case 0x741:
          goto LABEL_94;
        case 0x73E:
          IPC::Decoder::decode<std::tuple<WebKit::NavigationActionData>>((uint64_t *)a3, v255);
          if (!v295)
            return;
          v68 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          if (!v69)
            goto LABEL_312;
          *(_QWORD *)buf = v68;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&buf[8], a2);
          v70 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v70 = off_1E34D1458;
          *((_QWORD *)v70 + 1) = *(_QWORD *)buf;
          v71 = *(_QWORD *)&buf[8];
          *(_QWORD *)&buf[8] = 0;
          *((_QWORD *)v70 + 2) = v71;
          v253 = v70;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&buf[8]);
          if (!v295)
            goto LABEL_358;
          v72 = *((_QWORD *)this + 9);
          if (v72
            && *(_QWORD *)(v72 + 272) == v292
            && *(_QWORD *)(v72 + 280) == v293
            && (!v294 || v294 == *((_QWORD *)this + 11)))
          {
            v73 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
            if (v73)
              v74 = v73 - 16;
            else
              v74 = 0;
            v75 = *(_QWORD *)(*((_QWORD *)this + 5) + 16);
            v76 = (unsigned int *)(v75 + 16);
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 + 1, v76));
            *(_QWORD *)buf = v75;
            WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(v74, (WebKit::WebProcessProxy **)buf, (uint64_t *)v255, (uint64_t *)&v253);
            v78 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v78)
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v78 + 16));
            v79 = v253;
            v253 = 0;
            if (v79)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v79 + 8))(v79);
          }
          else
          {
            *(_WORD *)buf = 0;
            buf[2] = 2;
            *(_QWORD *)&buf[8] = 0;
            buf[16] = 0;
            LOBYTE(v298) = 0;
            LOBYTE(v299) = 0;
            v305 = 0;
            LOBYTE(v306) = 0;
            v307 = 0;
            v308 = 0;
            v310 = 0;
            (*(void (**)(WTF::StringImpl *, _BYTE *))(*(_QWORD *)v70 + 16))(v70, buf);
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v70 + 8))(v70);
            if (v310)
            {
              v228 = v309;
              v309 = 0;
              if (v228)
              {
                if (*(_DWORD *)v228 == 2)
                  WTF::StringImpl::destroy(v228, v227);
                else
                  *(_DWORD *)v228 -= 2;
              }
            }
            if (v307)
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v306);
            if (v305)
              WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v299, v227);
          }
LABEL_312:
          if (v295)
            WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v255);
          break;
        case 0x740:
          IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>>((uint64_t *)a3, v255);
          if (!v291)
            return;
          v80 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
          if (!(_BYTE)v81)
            goto LABEL_319;
          *(_QWORD *)buf = v80;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&buf[8], a2);
          v82 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v82 = off_1E34D1480;
          *((_QWORD *)v82 + 1) = *(_QWORD *)buf;
          v83 = *(_QWORD *)&buf[8];
          *(_QWORD *)&buf[8] = 0;
          *((_QWORD *)v82 + 2) = v83;
          v253 = v82;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&buf[8]);
          if (!v291)
            goto LABEL_358;
          v84 = *((_QWORD *)this + 9);
          if (v84
            && *(_QWORD *)(v84 + 272) == v269
            && *(_QWORD *)(v84 + 280) == v270
            && ((v85 = v271, v86 = v287, v87 = v289, v88 = v290, !v271) || *((_QWORD *)this + 11) == v271))
          {
            v89 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
            if (v89)
              v90 = v89 - 16;
            else
              v90 = 0;
            v91 = *(_QWORD *)(*((_QWORD *)this + 5) + 16);
            v92 = (unsigned int *)(v91 + 16);
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 + 1, v92));
            *(_QWORD *)buf = v91;
            BYTE1(v242) = v88;
            LOBYTE(v242) = v87 != 0;
            WebKit::WebPageProxy::decidePolicyForResponseShared(v90, (WebKit::WebProcessProxy **)buf, *((_QWORD *)this + 4), (uint64_t *)v255, v85, (uint64_t)&v272, (WebCore::ResourceRequestBase *)v283, v86 != 0, &v288, v242, (uint64_t *)&v253);
            v94 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v94)
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v94 + 16));
            v95 = v253;
            v253 = 0;
            if (v95)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v95 + 8))(v95);
          }
          else
          {
            *(_WORD *)buf = 0;
            buf[2] = 2;
            *(_QWORD *)&buf[8] = 0;
            buf[16] = 0;
            LOBYTE(v298) = 0;
            LOBYTE(v299) = 0;
            v305 = 0;
            LOBYTE(v306) = 0;
            v307 = 0;
            v308 = 0;
            v310 = 0;
            (*(void (**)(WTF::StringImpl *, _BYTE *))(*(_QWORD *)v82 + 16))(v82, buf);
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v82 + 8))(v82);
            if (v310)
            {
              v229 = v309;
              v309 = 0;
              if (v229)
              {
                if (*(_DWORD *)v229 == 2)
                  WTF::StringImpl::destroy(v229, v81);
                else
                  *(_DWORD *)v229 -= 2;
              }
            }
            if (v307)
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v306);
            if (v305)
              WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v299, v81);
          }
LABEL_319:
          if (v291)
            std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>::~__tuple_impl((uint64_t)v255, v81);
          break;
        default:
          if (v6 == 1836)
          {
            IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::BackForwardListItemState>>((uint64_t *)a3, v255);
            if (v273[16])
            {
              v60 = *(_QWORD *)v255;
              v61 = *(_QWORD *)&v255[8];
              v62 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
              v63 = v62 ? v62 - 16 : 0;
              v64 = *(_QWORD *)(*((_QWORD *)this + 5) + 16);
              v65 = (unsigned int *)(v64 + 16);
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 + 1, v65));
              *(_QWORD *)buf = v64;
              WebKit::WebPageProxy::backForwardAddItemShared(v63, (WebKit::WebProcessProxy **)buf, v60, v61, (WTF::StringImpl **)&v255[16], *((_QWORD *)this + 10) != 0);
              v67 = *(_QWORD *)buf;
              *(_QWORD *)buf = 0;
              if (v67)
                WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v67 + 16));
            }
            std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::BackForwardListItemState>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v255);
          }
          return;
      }
    }
    else
    {
      switch(*((_WORD *)a3 + 25))
      {
        case 0x74B:
          goto LABEL_94;
        case 0x74C:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WTF::URL>>((uint64_t *)a3, v255);
          if (v263)
          {
            v21 = *((_QWORD *)this + 9);
            if (!v21)
              goto LABEL_39;
            v22 = *(_QWORD *)v255;
            v23 = *(_QWORD *)&v255[8];
            v25 = *(_QWORD *)(v21 + 272);
            v24 = *(_QWORD *)(v21 + 280);
            if (v25 != *(_QWORD *)v255 || v24 != *(_QWORD *)&v255[8])
              goto LABEL_39;
            v27 = *(_QWORD *)&v255[16];
            if (*(_QWORD *)&v255[16])
            {
              if (*((_QWORD *)this + 11) != *(_QWORD *)&v255[16])
                goto LABEL_39;
            }
            v28 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
            if (v28)
              v29 = (WebKit::WebPageProxy *)(v28 - 16);
            else
              v29 = 0;
            v30 = *(_QWORD *)(*((_QWORD *)this + 5) + 16);
            v31 = (unsigned int *)(v30 + 16);
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 + 1, v31));
            *(_QWORD *)buf = v30;
            WebKit::WebPageProxy::didChangeProvisionalURLForFrameShared(v29, (WebKit::WebProcessProxy **)buf, v22, v23, v27, (WTF::StringImpl *)&v256);
            v33 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v33)
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v33 + 16));
            if (v263)
            {
LABEL_39:
              v34 = v256;
              v256 = 0;
              if (v34)
                goto LABEL_90;
            }
          }
          break;
        case 0x74D:
        case 0x74E:
        case 0x74F:
        case 0x751:
        case 0x754:
        case 0x755:
        case 0x757:
        case 0x758:
        case 0x759:
        case 0x75A:
          return;
        case 0x750:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>>((uint64_t *)a3, v255);
          if (v283[0])
          {
            v98 = *((_QWORD *)this + 9);
            if (v98)
            {
              v99 = *(_QWORD *)v255;
              v100 = *(_QWORD *)&v255[8];
              v102 = *(_QWORD *)(v98 + 272);
              v101 = *(_QWORD *)(v98 + 280);
              if (v102 == *(_QWORD *)v255 && v101 == *(_QWORD *)&v255[8])
              {
                v104 = v281;
                v105 = v282;
                v106 = BYTE1(v282);
                if (!v279 || *((_QWORD *)this + 11) == v279)
                {
                  v245 = BYTE3(v282);
                  v246 = BYTE2(v282);
                  v247 = BYTE4(v282);
                  v248 = BYTE1(v281);
                  v249 = v279;
                  v107 = qword_1ECE71668;
                  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
                  {
                    v108 = *((_QWORD *)this + 4);
                    v109 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                    if (v109)
                      v110 = v109 - 16;
                    else
                      v110 = 0;
                    v111 = *(_QWORD *)(*(_QWORD *)(v110 + 32) + 744);
                    v112 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 16) + 136);
                    if (v112)
                      LODWORD(v112) = *(_DWORD *)(v112 + 108);
                    v113 = *((_QWORD *)this + 11);
                    *(_DWORD *)buf = 134219264;
                    *(_QWORD *)&buf[4] = this;
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v111;
                    v297 = 2048;
                    v298 = v108;
                    v299 = 1024;
                    v300 = v112;
                    v301 = 2048;
                    v302 = v113;
                    v303 = 2048;
                    v304 = v99;
                    _os_log_impl(&dword_196BCC000, v107, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::didCommitLoadForFrame: frameID=%llu", buf, 0x3Au);
                  }
                  v114 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                  v244 = v114;
                  if (v114)
                    v115 = v114 - 16;
                  else
                    v115 = 0;
                  CFRetain(*(CFTypeRef *)(v115 + 8));
                  v117 = *(_QWORD *)(v115 + 224);
                  {
                    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
                    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
                  }
                  if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v117 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v116))
                  {
                    v119 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                    if (v119)
                      v120 = v119 - 16;
                    else
                      v120 = 0;
                    v121 = *(_QWORD *)(v120 + 288);
                    if (v121)
                    {
                      CFRetain(*(CFTypeRef *)(v121 + 8));
                      v123 = *(_QWORD *)(v115 + 280);
                      v124 = (_DWORD *)*((_QWORD *)this + 5);
                      ++*v124;
                      v125 = *(WebKit::FrameProcess **)(v123 + 32);
                      *(_QWORD *)(v123 + 32) = v124;
                      if (v125)
                        WTF::RefCounted<WebKit::FrameProcess>::deref(v125, v122);
                      v126 = *(_QWORD *)(v121 + 24);
                      if (v126)
                      {
                        v127 = *(_QWORD *)(v126 + 8);
                        if (v127)
                        {
                          CFRetain(*(CFTypeRef *)(v127 - 8));
                          WebKit::Site::Site((WTF::StringImpl **)buf, (const WTF::URL *)(v121 + 48));
                          v128 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)v273);
                          WebKit::Site::Site(&v253, v128);
                          if (!WTF::equal(*(WTF **)buf, v253, v129)
                            || (WTF::equal(*(WTF **)&buf[8], v254, v130) & 1) == 0)
                          {
                            v132 = *(_QWORD *)(v115 + 208);
                            v251 = *(_OWORD *)(*(_QWORD *)(v115 + 280) + 272);
                            v250[0] = 0;
                            v250[8] = 0;
                            v252[0] = (uint64_t *)&v251;
                            v252[1] = (uint64_t *)v250;
                            WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadDidCommitInAnotherProcess>(v132, v252, *(_QWORD *)(*(_QWORD *)(v115 + 32) + 1896), 0);
                            WebKit::BrowsingContextGroup::transitionPageToRemotePage(*((WebKit::BrowsingContextGroup **)this + 6), (WebKit::WebProcessProxy **)v115, (const WebKit::Site *)buf);
                          }
                          v133 = v254;
                          v254 = 0;
                          if (v133)
                          {
                            if (*(_DWORD *)v133 == 2)
                              WTF::StringImpl::destroy(v133, v131);
                            else
                              *(_DWORD *)v133 -= 2;
                          }
                          v230 = v253;
                          v253 = 0;
                          if (v230)
                          {
                            if (*(_DWORD *)v230 == 2)
                              WTF::StringImpl::destroy(v230, v131);
                            else
                              *(_DWORD *)v230 -= 2;
                          }
                          v231 = *(WTF::StringImpl **)&buf[8];
                          *(_QWORD *)&buf[8] = 0;
                          if (v231)
                          {
                            if (*(_DWORD *)v231 == 2)
                              WTF::StringImpl::destroy(v231, v131);
                            else
                              *(_DWORD *)v231 -= 2;
                          }
                          v232 = *(WTF::StringImpl **)buf;
                          *(_QWORD *)buf = 0;
                          if (v232)
                          {
                            if (*(_DWORD *)v232 == 2)
                              WTF::StringImpl::destroy(v232, v131);
                            else
                              *(_DWORD *)v232 -= 2;
                          }
                          CFRelease(*(CFTypeRef *)(v127 - 8));
                        }
                      }
                      CFRelease(*(CFTypeRef *)(v121 + 8));
                    }
                    else
                    {
                      v238 = *(_QWORD *)(v115 + 280);
                      v239 = (_DWORD *)*((_QWORD *)this + 5);
                      ++*v239;
                      v240 = *(WebKit::FrameProcess **)(v238 + 32);
                      *(_QWORD *)(v238 + 32) = v239;
                      if (v240)
                        WTF::RefCounted<WebKit::FrameProcess>::deref(v240, v118);
                    }
                  }
                  *(_QWORD *)buf = 0;
                  WTF::URL::invalidate((WTF::URL *)buf);
                  WTF::URL::operator=((uint64_t)this + 312, (WTF::StringImpl *)buf);
                  v234 = *(WTF::StringImpl **)buf;
                  *(_QWORD *)buf = 0;
                  if (v234)
                  {
                    if (*(_DWORD *)v234 == 2)
                      WTF::StringImpl::destroy(v234, v233);
                    else
                      *(_DWORD *)v234 -= 2;
                  }
                  WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages((unsigned __int8 *)this + 352);
                  *((_BYTE *)this + 305) = 1;
                  HIBYTE(v243) = v106 != 0;
                  LOBYTE(v243) = v105 != 0;
                  HIBYTE(v241) = v248;
                  LOBYTE(v241) = v104 != 0;
                  WebKit::WebPageProxy::commitProvisionalPage(v115, (uint64_t)a2, v99, v100, (uint64_t)&v255[16], (WebCore::ResourceRequestBase *)v273, v249, (const WTF::String *)&v280, v241, (const void **)&v281 + 1, v243, v246 != 0, v245 != 0, v247, (CFTypeRef **)&v282 + 1);
                  if (v244)
                    CFRelease(*(CFTypeRef *)(v244 - 8));
                }
              }
            }
            if (v283[0])
              std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>::~__tuple_impl((uint64_t)v255, v97);
          }
          break;
        case 0x752:
          v143 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
          if ((v143 & 0xFF00000000) != 0)
          {
            v144 = v143;
            v145 = qword_1ECE71668;
            if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
            {
              v146 = (WTF::StringImpl *)*((_QWORD *)this + 4);
              v147 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
              if (v147)
                v148 = v147 - 16;
              else
                v148 = 0;
              v149 = *(_QWORD *)(*(_QWORD *)(v148 + 32) + 744);
              v150 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 16) + 136);
              if (v150)
                LODWORD(v150) = *(_DWORD *)(v150 + 108);
              v151 = *((_QWORD *)this + 11);
              *(_DWORD *)v255 = 134219264;
              *(_QWORD *)&v255[4] = this;
              *(_WORD *)&v255[12] = 2048;
              *(_QWORD *)&v255[14] = v149;
              *(_WORD *)&v255[22] = 2048;
              v256 = v146;
              v257 = 1024;
              v258 = v150;
              v259 = 2048;
              v260 = v151;
              v261 = 1024;
              v262 = v144;
              _os_log_impl(&dword_196BCC000, v145, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::didCreateContextInWebProcessForVisibilityPropagation: contextID=%u", v255, 0x36u);
            }
            *((_DWORD *)this + 102) = v144;
          }
          break;
        case 0x753:
          IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)a3, (uint64_t)v255);
          if (v255[16])
            WebKit::ProvisionalPageProxy::didCreateMainFrame((uint64_t)this, *(uint64_t *)v255, *(uint64_t *)&v255[8]);
          break;
        case 0x756:
          v134 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
          if (v135)
          {
            v136 = v134;
            v137 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
            v138 = *(_QWORD *)(*((_QWORD *)this + 5) + 16);
            v139 = v137 ? v137 - 16 : 0;
            v140 = (unsigned int *)(v138 + 16);
            do
              v141 = __ldaxr(v140);
            while (__stlxr(v141 + 1, v140));
            *(_QWORD *)v255 = v138;
            WebKit::WebPageProxy::didDestroyNavigationShared(v139, (uint64_t)v255, v136);
            v142 = *(_QWORD *)v255;
            *(_QWORD *)v255 = 0;
            if (v142)
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v142 + 16));
          }
          break;
        case 0x75B:
          IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>>((uint64_t *)a3, v255);
          if (v286)
          {
            WebKit::ProvisionalPageProxy::didFailProvisionalLoadForFrame((uint64_t)this, (uint64_t)v255, (WebCore::ResourceRequestBase *)&v271, v277, &v278, (const WebCore::ResourceError *)&v279, v283[32], &v284, v285);
            if (v286)
              std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>::~__tuple_impl((uint64_t)v255, v96);
          }
          break;
        default:
          if (v6 == 1888 || v6 == 1890)
            goto LABEL_94;
          break;
      }
    }
    return;
  }
  if (*((unsigned __int16 *)a3 + 25) <= 0x7ABu)
  {
    if (*((unsigned __int16 *)a3 + 25) <= 0x77Cu)
    {
      switch(*((_WORD *)a3 + 25))
      {
        case 0x76C:
          IPC::Decoder::decode<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)a3, v255);
          if (v276)
          {
            v8 = *((_QWORD *)this + 9);
            if (v8)
            {
              v9 = v274;
              v10 = v275;
              v12 = *(_QWORD *)(v8 + 272);
              v11 = *(_QWORD *)(v8 + 280);
              if (v12 == v274 && v11 == v275)
              {
                v14 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                if (v14)
                  v15 = v14 - 16;
                else
                  v15 = 0;
                v16 = *(_QWORD *)(*((_QWORD *)this + 5) + 16);
                v17 = (unsigned int *)(v16 + 16);
                do
                  v18 = __ldaxr(v17);
                while (__stlxr(v18 + 1, v17));
                *(_QWORD *)buf = v16;
                WebKit::WebPageProxy::didNavigateWithNavigationDataShared(v15, (uint64_t)buf, (uint64_t)v255, v9, v10);
                v19 = *(_QWORD *)buf;
                *(_QWORD *)buf = 0;
                if (v19)
                  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v19 + 16));
              }
            }
          }
          std::__optional_destruct_base<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v255, v7);
          break;
        case 0x76E:
          IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)a3, v255);
          if (!(_BYTE)v257)
            goto LABEL_228;
          v153 = *((_QWORD *)this + 9);
          if (!v153)
            goto LABEL_228;
          v154 = *(_QWORD *)&v255[16];
          v155 = (uint64_t)v256;
          v157 = *(_QWORD *)(v153 + 272);
          v156 = *(WTF::StringImpl **)(v153 + 280);
          if (v157 != *(_QWORD *)&v255[16] || v156 != v256)
            goto LABEL_228;
          v159 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
          if (v159)
            v160 = v159 - 16;
          else
            v160 = 0;
          v161 = *(_QWORD *)(*((_QWORD *)this + 5) + 16);
          v162 = (unsigned int *)(v161 + 16);
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 + 1, v162));
          *(_QWORD *)buf = v161;
          WebKit::WebPageProxy::didPerformClientRedirectShared(v160, (WebKit::WebProcessProxy **)buf, (WTF::StringImpl **)v255, (WTF::StringImpl **)&v255[8], v154, v155);
          goto LABEL_226;
        case 0x770:
          IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)a3, v255);
          if ((_BYTE)v257)
          {
            v164 = *((_QWORD *)this + 9);
            if (v164)
            {
              v165 = *(_QWORD *)&v255[16];
              v166 = (uint64_t)v256;
              v168 = *(_QWORD *)(v164 + 272);
              v167 = *(WTF::StringImpl **)(v164 + 280);
              if (v168 == *(_QWORD *)&v255[16] && v167 == v256)
              {
                v170 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                if (v170)
                  v171 = v170 - 16;
                else
                  v171 = 0;
                v172 = *(_QWORD *)(*((_QWORD *)this + 5) + 16);
                v173 = (unsigned int *)(v172 + 16);
                do
                  v174 = __ldaxr(v173);
                while (__stlxr(v174 + 1, v173));
                *(_QWORD *)buf = v172;
                WebKit::WebPageProxy::didPerformServerRedirectShared(v171, (WebKit::WebProcessProxy **)buf, (WTF::StringImpl **)v255, (WTF::StringImpl **)&v255[8], v165, v166);
LABEL_226:
                v175 = *(_QWORD *)buf;
                *(_QWORD *)buf = 0;
                if (v175)
                  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v175 + 16));
              }
            }
          }
LABEL_228:
          std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v255, v152);
          break;
        case 0x775:
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>>((uint64_t *)a3, v255);
          if (v268)
          {
            v176 = *((_QWORD *)this + 9);
            if (v176)
            {
              v177 = *(_QWORD *)v255;
              v178 = *(_QWORD *)&v255[8];
              v180 = *(_QWORD *)(v176 + 272);
              v179 = *(_QWORD *)(v176 + 280);
              if (v180 == *(_QWORD *)v255 && v179 == *(_QWORD *)&v255[8])
              {
                v182 = *(CFTypeRef **)&v255[16];
                if (!*(_QWORD *)&v255[16] || *((_QWORD *)this + 11) == *(_QWORD *)&v255[16])
                {
                  v183 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                  v184 = v183 ? (WebKit::WebPageProxy *)(v183 - 16) : 0;
                  v185 = *(_QWORD *)(*((_QWORD *)this + 5) + 16);
                  v186 = (unsigned int *)(v185 + 16);
                  do
                    v187 = __ldaxr(v186);
                  while (__stlxr(v187 + 1, v186));
                  *(_QWORD *)buf = v185;
                  WebKit::WebPageProxy::didReceiveServerRedirectForProvisionalLoadForFrameShared(v184, (WebKit::WebProcessProxy **)buf, v177, v178, v182, (WebCore::ResourceRequestBase *)&v256, &v267);
                  v188 = *(_QWORD *)buf;
                  *(_QWORD *)buf = 0;
                  if (v188)
                    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v188 + 16));
                }
              }
            }
          }
          std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v255);
          break;
        default:
          return;
      }
      return;
    }
    if (v6 - 1917 >= 2)
    {
      if (v6 != 1919)
      {
        if (v6 != 1962)
          return;
        IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>>((uint64_t *)a3, v255);
        if ((_BYTE)v256)
        {
          v49 = v255[16];
          if (WTF::String::containsOnlyASCII((WTF::String *)v255))
          {
            v50 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
            if (v50)
              v51 = (WTF *)(v50 - 16);
            else
              v51 = 0;
            WebKit::WebPageProxy::logDiagnosticMessage(v51, (uint64_t)v255, (uint64_t)&v255[8], v49 != 0);
            goto LABEL_252;
          }
          v236 = off_1ECE71C40;
          if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
            goto LABEL_352;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "void WebKit::ProvisionalPageProxy::logDiagnosticMessageFromWebProcess(const String &, con"
                               "st String &, WebCore::ShouldSample)";
          v237 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/ProvisionalPageProxy.cpp 499: Inva"
                 "lid message dispatched %s";
          goto LABEL_356;
        }
        goto LABEL_252;
      }
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>>((uint64_t *)a3, v255);
      if (v285)
      {
        v207 = *((_QWORD *)this + 9);
        if (v207)
        {
          v208 = *(_QWORD *)v255;
          if (*(_QWORD *)(v207 + 272) == *(_QWORD *)v255)
          {
            v209 = *(_QWORD *)&v255[8];
            if (*(_QWORD *)(v207 + 280) == *(_QWORD *)&v255[8])
            {
              v210 = v279;
              if (!v279 || *((_QWORD *)this + 11) == v279)
              {
                v211 = qword_1ECE71668;
                if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
                {
                  v212 = *((_QWORD *)this + 4);
                  v213 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                  if (v213)
                    v214 = v213 - 16;
                  else
                    v214 = 0;
                  v215 = *(_QWORD *)(*(_QWORD *)(v214 + 32) + 744);
                  v216 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 16) + 136);
                  if (v216)
                    LODWORD(v216) = *(_DWORD *)(v216 + 108);
                  v217 = *((_QWORD *)this + 11);
                  *(_DWORD *)buf = 134219264;
                  *(_QWORD *)&buf[4] = this;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v215;
                  v297 = 2048;
                  v298 = v212;
                  v299 = 1024;
                  v300 = v216;
                  v301 = 2048;
                  v302 = v217;
                  v303 = 2048;
                  v304 = v208;
                  _os_log_impl(&dword_196BCC000, v211, OS_LOG_TYPE_DEFAULT, "%p - [pageProxyID=%llu, webPageID=%llu, PID=%i, navigationID=%llu] ProvisionalPageProxy::didStartProvisionalLoadForFrame: frameID=%llu", buf, 0x3Au);
                }
                WTF::String::operator=((WTF::StringImpl **)this + 39, (WTF::StringImpl *)&v280);
                v218 = v282;
                *((_OWORD *)this + 20) = v281;
                *((_OWORD *)this + 21) = v218;
                if (!*((_BYTE *)this + 96))
                {
                  v219 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                  v220 = v219 - 16;
                  if (!v219)
                    v220 = 0;
                  v221 = *(_QWORD *)(v220 + 280);
                  if (v221 && *((_BYTE *)this + 308))
                  {
                    WebKit::FrameLoadState::didStartProvisionalLoad((WebKit::FrameLoadState *)(v221 + 40), (const WTF::URL *)&v280);
                    v219 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                  }
                  if (v219)
                    v222 = (WebCore::DiagnosticLoggingKeys *)(v219 - 16);
                  else
                    v222 = 0;
                  v223 = *(_QWORD *)(*((_QWORD *)this + 5) + 16);
                  v224 = (unsigned int *)(v223 + 16);
                  do
                    v225 = __ldaxr(v224);
                  while (__stlxr(v225 + 1, v224));
                  *(_QWORD *)buf = v223;
                  WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(v222, (WebKit::WebProcessProxy **)buf, v208, v209, &v255[16], (uint64_t)v273, v210, (const WTF::URL *)&v280, (WTF::URL *)v283, &v284);
                  v226 = *(_QWORD *)buf;
                  *(_QWORD *)buf = 0;
                  if (v226)
                    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v226 + 16));
                }
              }
            }
          }
        }
        if (v285)
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>::~__tuple_impl((uint64_t)v255, v206);
      }
      return;
    }
LABEL_94:
    v58 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v58)
      v59 = (WebKit::WebPageProxy *)(v58 - 16);
    else
      v59 = 0;
    WebKit::WebPageProxy::didReceiveMessage(v59, (IPC::Connection *)a2, a3);
    return;
  }
  if (*((unsigned __int16 *)a3 + 25) > 0x7EBu)
  {
    if (*((unsigned __int16 *)a3 + 25) > 0x81Au)
    {
      if (v6 == 2075)
      {
        IPC::Decoder::decode<std::tuple<WebKit::URLSchemeTaskParameters>>((uint64_t *)a3, v255);
        if ((_BYTE)v279)
        {
          v200 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
          v201 = v200 ? v200 - 16 : 0;
          v202 = *(_QWORD *)(*((_QWORD *)this + 5) + 16);
          v203 = (unsigned int *)(v202 + 16);
          do
            v204 = __ldaxr(v203);
          while (__stlxr(v204 + 1, v203));
          *(_QWORD *)buf = v202;
          WebKit::WebPageProxy::startURLSchemeTaskShared(v201, (uint64_t)a2, (uint64_t *)buf, *((_QWORD *)this + 4), (uint64_t *)v255);
          v205 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v205)
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v205 + 16));
        }
        std::__optional_destruct_base<WebKit::URLSchemeTaskParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v255, v199);
        return;
      }
      if (v6 != 2089)
        return;
    }
    else if (v6 != 2028 && v6 != 2043)
    {
      return;
    }
    goto LABEL_94;
  }
  if (*((unsigned __int16 *)a3 + 25) > 0x7D2u)
  {
    if (v6 != 2003)
    {
      if (v6 != 2013)
        return;
      IPC::Decoder::decode<std::tuple<WTF::String>>((uint64_t *)a3, (uint64_t)v255);
      if (!v255[8])
        return;
      v52 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v20)
        goto LABEL_88;
      *(_QWORD *)buf = v52;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&buf[8], a2);
      v53 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v53 = off_1E34D14A8;
      *((_QWORD *)v53 + 1) = *(_QWORD *)buf;
      v54 = *(_QWORD *)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      *((_QWORD *)v53 + 2) = v54;
      v253 = v53;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&buf[8]);
      if (v255[8])
      {
        v55 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if (v55)
          v56 = v55 - 16;
        else
          v56 = 0;
        WebKit::WebPageProxy::requestPasswordForQuickLookDocumentInMainFrameShared(v56, (uint64_t)v255, (uint64_t *)&v253);
        v57 = v253;
        v253 = 0;
        if (v57)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v57 + 8))(v57);
LABEL_88:
        if (v255[8])
        {
          v34 = *(WTF::StringImpl **)v255;
          *(_QWORD *)v255 = 0;
          if (v34)
          {
LABEL_90:
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v20);
            else
              *(_DWORD *)v34 -= 2;
          }
        }
        return;
      }
LABEL_358:
      __break(1u);
      JUMPOUT(0x1972E58F0);
    }
    IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>((uint64_t *)a3, v255);
    if (!(_BYTE)v257)
      return;
    v193 = *(_QWORD *)&v255[8];
    if (*(_QWORD *)&v255[8])
    {
      if (HIDWORD(*(_QWORD *)&v255[8]))
      {
        __break(0xC471u);
        goto LABEL_358;
      }
      v194 = *(_QWORD *)v255;
      v195 = WTF::fastMalloc(*(WTF **)&v255[8]);
      v196 = v195;
      v197 = 0;
      do
      {
        *(_BYTE *)(v195 + v197) = *(_BYTE *)(v194 + v197);
        ++v197;
      }
      while (v193 != v197);
    }
    else
    {
      v196 = 0;
    }
    v198 = (WTF *)*((_QWORD *)this + 48);
    if (v198)
    {
      *((_QWORD *)this + 48) = 0;
      *((_DWORD *)this + 98) = 0;
      WTF::fastFree(v198, v192);
    }
    *((_QWORD *)this + 48) = v196;
    *((_DWORD *)this + 98) = v193;
    *((_DWORD *)this + 99) = v193;
    return;
  }
  if (v6 == 1964)
  {
    IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>>((uint64_t *)a3, v255);
    if ((_BYTE)v256)
    {
      v189 = v255[16];
      if (WTF::String::containsOnlyASCII((WTF::String *)v255))
      {
        v190 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if (v190)
          v191 = (WTF *)(v190 - 16);
        else
          v191 = 0;
        WebKit::WebPageProxy::logDiagnosticMessageWithEnhancedPrivacy(v191, (uint64_t)v255, (uint64_t)&v255[8], v189 != 0);
        goto LABEL_252;
      }
      v236 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        goto LABEL_352;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::ProvisionalPageProxy::logDiagnosticMessageWithEnhancedPrivacyFromWebProcess(cons"
                           "t String &, const String &, WebCore::ShouldSample)";
      v237 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/ProvisionalPageProxy.cpp 506: Invalid "
             "message dispatched %s";
LABEL_356:
      _os_log_fault_impl(&dword_196BCC000, v236, OS_LOG_TYPE_FAULT, v237, buf, 0xCu);
LABEL_352:
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 16) + 144) + 98) = 1;
    }
LABEL_252:
    std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v255, v48);
    return;
  }
  if (v6 == 1966)
  {
    IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>>((uint64_t *)a3, v255);
    if ((_BYTE)v257)
    {
      v36 = v256;
      if (WTF::String::containsOnlyASCII((WTF::String *)v255))
      {
        v37 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if (v37)
          v38 = (WTF *)(v37 - 16);
        else
          v38 = 0;
        WebKit::WebPageProxy::logDiagnosticMessageWithValueDictionary(v38, (uint64_t)v255, (uint64_t)&v255[8], (_QWORD **)&v255[16], v36 != 0);
      }
      else
      {
        v235 = off_1ECE71C40;
        if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "void WebKit::ProvisionalPageProxy::logDiagnosticMessageWithValueDictionaryFromWebProcess("
                               "const String &, const String &, const WebCore::DiagnosticLoggingClient::ValueDictionary &"
                               ", WebCore::ShouldSample)";
          _os_log_fault_impl(&dword_196BCC000, v235, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/ProvisionalPageProxy.cpp 513: Invalid message dispatched %s", buf, 0xCu);
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 16) + 144) + 98) = 1;
      }
    }
    std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v255, v35);
  }
}

uint64_t WebKit::ProvisionalPageProxy::didReceiveSyncMessage(_QWORD *a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  int v7;
  _BOOL8 v8;
  IPC::Encoder *v9;
  _QWORD *v10;
  unsigned __int8 **v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  IPC::Encoder *v19;
  _QWORD *v20;
  unsigned __int8 **v21;
  void *v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  IPC::Encoder *v32;
  unsigned int *v33;
  unsigned int v34;
  IPC::Encoder *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  IPC::Encoder *v40;
  unsigned __int8 **v41;
  char v42;
  char v43;
  _BYTE v44[112];
  char v45;
  const char **v46;
  char v47;
  char v48;
  WTF::StringImpl *v49;
  char v50;
  uint64_t v51[2];
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 **v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int16 *)(a3 + 50);
  if (v7 == 3660)
  {
    IPC::Decoder::decode<std::tuple<WebKit::NavigationActionData>>((uint64_t *)a3, v51);
    v8 = v57 != 0;
    if (!v57)
      return v8;
    v19 = *a4;
    *a4 = 0;
    v40 = v19;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v41, a2);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v20 = off_1E34D14F8;
    v20[1] = v40;
    v21 = v41;
    v40 = 0;
    v41 = 0;
    v20[2] = v21;
    v39 = v20;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v41);
    v23 = v40;
    v40 = 0;
    if (v23)
    {
      IPC::Encoder::~Encoder(v23, v22);
      WTF::fastFree(v24, v25);
    }
    if (!v57)
      goto LABEL_49;
    if (!v53)
      goto LABEL_37;
    v26 = a1[9];
    if (v26)
    {
      if (*(_QWORD *)(v26 + 272) != v54 || *(_QWORD *)(v26 + 280) != v55 || v56 != (unsigned __int8 **)a1[11])
        goto LABEL_37;
    }
    else
    {
      if (v56 != (unsigned __int8 **)a1[11])
      {
LABEL_37:
        LOWORD(v40) = 0;
        BYTE2(v40) = 2;
        v41 = v56;
        v42 = 0;
        v43 = 0;
        v44[0] = 0;
        v45 = 0;
        LOBYTE(v46) = 0;
        v47 = 0;
        v48 = 0;
        v50 = 0;
        (*(void (**)(_QWORD *, IPC::Encoder **))(*v20 + 16))(v20, &v40);
        (*(void (**)(_QWORD *))(*v20 + 8))(v20);
        if (v50)
        {
          v38 = v49;
          v49 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v37);
            else
              *(_DWORD *)v38 -= 2;
          }
        }
        if (v47)
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v46);
        if (v45)
          WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v44, v37);
LABEL_46:
        if (v57)
          WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v51);
        return v8;
      }
      WebKit::ProvisionalPageProxy::didCreateMainFrame((uint64_t)a1, v54, v55);
    }
    v30 = *(_QWORD *)(a1[3] + 8);
    if (v30)
      v31 = v30 - 16;
    else
      v31 = 0;
    v32 = *(IPC::Encoder **)(a1[5] + 16);
    v33 = (unsigned int *)((char *)v32 + 16);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    v40 = v32;
    WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(v31, &v40, v51, (uint64_t *)&v39);
    v35 = v40;
    v40 = 0;
    if (v35)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v35 + 4);
    v36 = (uint64_t)v39;
    v39 = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    goto LABEL_46;
  }
  if (v7 == 3650)
  {
    IPC::Decoder::decode<std::tuple<WebCore::MessagePortIdentifier>>((uint64_t *)a3, (uint64_t)v51);
    v8 = v52 != 0;
    if (v52)
    {
      v9 = *a4;
      *a4 = 0;
      v40 = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v41, a2);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E34D14D0;
      v10[1] = v40;
      v11 = v41;
      v40 = 0;
      v41 = 0;
      v10[2] = v11;
      v39 = v10;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v41);
      v13 = v40;
      v40 = 0;
      if (v13)
      {
        IPC::Encoder::~Encoder(v13, v12);
        WTF::fastFree(v14, v15);
      }
      if (v52)
      {
        v16 = *(_QWORD *)(a1[3] + 8);
        if (v16)
          v17 = v16 - 16;
        else
          v17 = 0;
        WebKit::WebPageProxy::backForwardGoToItemShared(v17, v51, (uint64_t *)&v39);
        v18 = (uint64_t)v39;
        v39 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        return v8;
      }
LABEL_49:
      __break(1u);
    }
    return v8;
  }
  v27 = *(_QWORD *)(a1[3] + 8);
  if (v27)
    v28 = v27 - 16;
  else
    v28 = 0;
  return WebKit::WebPageProxy::didReceiveSyncMessage(v28, a2, a3, a4);
}

uint64_t WebKit::ProvisionalPageProxy::messageSenderConnection(WebKit::ProvisionalPageProxy *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 16) + 144);
}

uint64_t `non-virtual thunk to'WebKit::ProvisionalPageProxy::messageSenderConnection(WebKit::ProvisionalPageProxy *this)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16) + 144);
}

uint64_t WebKit::ProvisionalPageProxy::messageSenderDestinationID(WebKit::ProvisionalPageProxy *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t `non-virtual thunk to'WebKit::ProvisionalPageProxy::messageSenderDestinationID(WebKit::ProvisionalPageProxy *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t WebKit::ProvisionalPageProxy::sendMessage(uint64_t a1, IPC::Encoder **a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  LOBYTE(v7) = 0;
  v8 = 0;
  v4 = WebKit::AuxiliaryProcessProxy::sendMessage(v3, a2, a3, (uint64_t)&v7, 1);
  if (v8)
  {
    v5 = v7;
    v7 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v4;
}

uint64_t `non-virtual thunk to'WebKit::ProvisionalPageProxy::sendMessage(uint64_t a1, IPC::Encoder **a2, char a3)
{
  return WebKit::ProvisionalPageProxy::sendMessage(a1 - 16, a2, a3);
}

uint64_t WebKit::ProvisionalPageProxy::sendMessageWithAsyncReply(uint64_t a1, IPC::Encoder **a2, uint64_t *a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  v5 = *a3;
  v6 = a3[1];
  *a3 = 0;
  v10[0] = v5;
  v10[1] = v6;
  v11 = 1;
  v7 = WebKit::AuxiliaryProcessProxy::sendMessage(v4, a2, a4, (uint64_t)v10, 1);
  if (v11)
  {
    v8 = v10[0];
    v10[0] = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return v7;
}

uint64_t `non-virtual thunk to'WebKit::ProvisionalPageProxy::sendMessageWithAsyncReply(uint64_t a1, IPC::Encoder **a2, uint64_t *a3, char a4)
{
  return WebKit::ProvisionalPageProxy::sendMessageWithAsyncReply(a1 - 16, a2, a3, a4);
}

void WebKit::RemotePageDrawingAreaProxy::~RemotePageDrawingAreaProxy(WebKit::RemotePageDrawingAreaProxy *this, void *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = off_1E34D1208;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = (unsigned __int8 *)*((_QWORD *)this + 4);
    do
    {
      v5 = *v4++;
      IPC::MessageReceiverMap::removeMessageReceiver(*((_QWORD *)this + 6) + 152, v5, *((_QWORD *)this + 3));
      --v3;
    }
    while (v3);
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      (*(void (**)(uint64_t, WebKit::RemotePageDrawingAreaProxy *))(*(_QWORD *)v7 + 288))(v7, this);
  }
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v8 + 16));
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::RemotePageDrawingAreaProxy::~RemotePageDrawingAreaProxy(this, a2);
  WTF::fastFree(v2, v3);
}

_QWORD *WebKit::RemotePageDrawingAreaProxy::didReceiveMessage(_QWORD *result)
{
  uint64_t v1;

  v1 = result[2];
  if (v1)
  {
    result = *(_QWORD **)(v1 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  return result;
}

uint64_t WebKit::RemotePageDrawingAreaProxy::didReceiveSyncMessage(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  else
    return 0;
}

WebKit::RemotePageProxy *WebKit::RemotePageProxy::RemotePageProxy(WebKit::RemotePageProxy *this, WebKit::WebPageProxy *a2, WebKit::WebProcessProxy *a3, const WebKit::Site *a4, WebKit::WebPageProxyMessageReceiverRegistration *a5)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;
  WebKit::WebPageProxyMessageReceiverRegistration *v15;

  v9 = (unsigned int *)((char *)a3 + 16);
  *(_QWORD *)this = off_1E34D1240;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = *(_QWORD *)(*((_QWORD *)a2 + 4) + 1896);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *((_QWORD *)this + 3) = a3;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v11 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *((_QWORD *)this + 4) = v11;
  v13 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
    *v13 += 2;
  *((_QWORD *)this + 5) = v13;
  v14 = (_DWORD *)*((_QWORD *)a4 + 1);
  if (v14)
    *v14 += 2;
  *((_BYTE *)this + 72) = 0;
  v15 = (WebKit::RemotePageProxy *)((char *)this + 72);
  *((_BYTE *)this + 88) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = v14;
  if (a5)
    WebKit::WebPageProxyMessageReceiverRegistration::transferMessageReceivingFrom(v15, a5, this);
  else
    WebKit::WebPageProxyMessageReceiverRegistration::startReceivingMessages((unsigned __int8 *)v15, *((_QWORD *)this + 3), *((unsigned int **)this + 2), (uint64_t)this);
  WebKit::WebProcessProxy::addRemotePageProxy(*((WebKit::WebProcessProxy **)this + 3), this);
  return this;
}

void WebKit::RemotePageProxy::injectPageIntoNewProcess(WebKit::RemotePageProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t *v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  WebKit::WebProcessProxy *v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  char v30;
  uint64_t v31;
  char v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37[5];
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[6];
  __int16 v44;
  char v45;
  char v46;
  uint64_t v47;
  _BYTE v48[15];
  char v49;
  unsigned int *v50[186];
  _QWORD v51[2];

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      if (*(_QWORD *)(v2 + 264))
      {
        v4 = *(_QWORD *)(v2 + 168);
        if (!v4)
        {
          __break(0xC471u);
          return;
        }
        v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
        v6 = *((_QWORD *)this + 3);
        *v5 = off_1E34D1208;
        v5[1] = 0;
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
        v7 = *(unsigned int **)(v4 + 8);
        if (v7)
        {
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 + 1, v7));
        }
        v5[2] = v7;
        v5[3] = *(_QWORD *)(v4 + 24);
        v5[4] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        v5[5] = v9;
        v10 = (unsigned int *)(v6 + 16);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
        v5[6] = v6;
        v12 = v5[5];
        if (v12)
        {
          v13 = (unsigned __int8 *)v5[4];
          v14 = (uint64_t *)(v6 + 160);
          do
          {
            v15 = *v13++;
            v16 = (WTF::StringImpl *)v5[3];
            v37[0] = (WTF::StringImpl *)v15;
            v37[1] = v16;
            WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v14, (unsigned __int8 *)v37, (uint64_t)v5, v50);
            --v12;
          }
          while (v12);
        }
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 280))(v4, v5);
        v17 = *((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = v5;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        v18 = WTF::fastMalloc((WTF *)0x10);
        v19 = (uint64_t *)*((_QWORD *)this + 3);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v2 + 8), v2);
        v20 = *(unsigned int **)(v2 + 8);
        if (v20)
        {
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        *(_QWORD *)v18 = v20;
        v22 = (unsigned int *)(v19 + 2);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 + 1, v22));
        *(_QWORD *)(v18 + 8) = v19;
        WebKit::WebProcessProxy::addVisitedLinkStoreUser(v19, *(unsigned int **)(v2 + 240), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 744));
        std::unique_ptr<WebKit::RemotePageVisitedLinkStoreRegistration>::reset[abi:sn180100]((uint64_t ***)this + 8, (uint64_t **)v18);
        v24 = (WebKit::WebProcessProxy *)*((_QWORD *)this + 3);
        WTF::URL::URL((uint64_t)v37, (WTF::StringImpl **)(*(_QWORD *)(v2 + 16) + 1000));
        WebKit::WebFrameProxy::frameTreeCreationParameters(*(_QWORD *)(v2 + 264), (uint64_t)&v38);
        v25 = *(_QWORD *)(v2 + 1336);
        if (v25)
        {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v41, *(_QWORD ***)(v2 + 1336));
          WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v42, v25 + 8);
          WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v43, v25 + 24);
          v26 = *(_DWORD **)(v25 + 40);
          if (v26)
            *v26 += 2;
          v43[2] = v26;
          v27 = *(_DWORD **)(v25 + 48);
          if (v27)
            *v27 += 2;
          v43[3] = v27;
          v28 = *(_DWORD **)(v25 + 56);
          if (v28)
            *v28 += 2;
          v43[4] = v28;
          v29 = *(_DWORD **)(v25 + 64);
          if (v29)
            *v29 += 2;
          v43[5] = v29;
          v30 = *(_BYTE *)(v25 + 74);
          v44 = *(_WORD *)(v25 + 72);
          v45 = v30;
          v46 = *(_BYTE *)(v25 + 80);
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(&v47, (_QWORD **)(v25 + 88));
          v31 = *(_QWORD *)(v25 + 96);
          *(_QWORD *)&v48[7] = *(_QWORD *)(v25 + 103);
          *(_QWORD *)v48 = v31;
          v32 = 1;
        }
        else
        {
          v32 = 0;
          LOBYTE(v41) = 0;
        }
        v49 = v32;
        WebKit::WebPageProxy::creationParametersForRemotePage(v2 - 16, v24, v4, (uint64_t)v37, (uint64_t)v50);
        v51[0] = (char *)this + 16;
        v51[1] = v50;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::CreateWebPage>((uint64_t)v24, (uint64_t)v51, 0, 0);
        WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)v50);
        if (v49)
          WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)&v41, v33);
        WTF::Vector<WebKit::FrameTreeCreationParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v33);
        v35 = v39;
        v39 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v34);
          else
            *(_DWORD *)v35 -= 2;
        }
        v36 = v37[0];
        v37[0] = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v34);
          else
            *(_DWORD *)v36 -= 2;
        }
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void WebKit::RemotePageProxy::processDidTerminate(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef *v6;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 168);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 296))(v4);
        v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      }
      if (v2)
        v5 = v2 - 16;
      else
        v5 = 0;
      v6 = *(CFTypeRef **)(v5 + 280);
      if (v6)
      {
        CFRetain(v6[1]);
        WebKit::WebFrameProxy::remoteProcessDidTerminate((WebKit::WebFrameProxy *)v6, *(WebKit::WebProcessProxy **)(a1 + 24));
        CFRelease(v6[1]);
      }
    }
  }
}

void WebKit::RemotePageProxy::~RemotePageProxy(WebKit::RemotePageProxy *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E34D1240;
  WebKit::WebProcessProxy::removeRemotePageProxy(*((WebKit::WebProcessProxy **)this + 3), this);
  WebKit::WebPageProxyMessageReceiverRegistration::~WebPageProxyMessageReceiverRegistration((WebKit::RemotePageProxy *)((char *)this + 72));
  std::unique_ptr<WebKit::RemotePageVisitedLinkStoreRegistration>::reset[abi:sn180100]((uint64_t ***)this + 8, 0);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v2);
    }
  }
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v9 + 16));
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v2);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemotePageProxy::~RemotePageProxy(this);
  WTF::fastFree(v1, v2);
}

void WebKit::RemotePageProxy::didReceiveMessage(WebKit::RemotePageProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  CFTypeRef *v21;
  uint64_t v22;
  WebKit::WebPageProxy *v23;
  WebKit::WebProcessProxy *v24;
  unsigned int *v25;
  unsigned int v26;
  WebKit::WebProcessProxy *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  CFTypeRef *v34;
  uint64_t v35;
  int v36;
  char v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  WebKit::WebProcessProxy *v45;
  char v46;
  _QWORD *v47;
  unsigned __int8 **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WebKit::WebProcessProxy *v52;
  unsigned int *v53;
  unsigned int v54;
  WebKit::WebProcessProxy *v55;
  uint64_t v56;
  WebKit::WebProcessProxy *v57;
  WTF::StringImpl *v58;
  _QWORD *v59;
  unsigned __int8 **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  char v66;
  uint64_t v67;
  WebKit::WebProcessProxy *v68;
  unsigned int *v69;
  unsigned int v70;
  BOOL v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  WebKit::WebProcessProxy *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  CFTypeRef *v81;
  uint64_t v82;
  WebCore::DiagnosticLoggingKeys *v83;
  WebKit::WebProcessProxy *v84;
  unsigned int *v85;
  unsigned int v86;
  WebKit::WebProcessProxy *v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WebKit::WebProcessProxy *v94;
  unsigned int *v95;
  unsigned int v96;
  WebKit::WebProcessProxy *v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  _QWORD *v101;
  WebKit::WebProcessProxy *v102;
  unsigned __int8 **v103;
  char v104;
  char v105;
  _BYTE v106[112];
  char v107;
  const char **v108;
  char v109;
  char v110;
  WTF::StringImpl *v111;
  char v112;
  WTF::StringImpl *v113;
  CFTypeRef *v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD v122[24];
  WTF::StringImpl *v123;
  int v124[2];
  _BYTE v125[16];
  const void *v126;
  unsigned __int8 v127;
  unsigned __int8 v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  CFTypeRef *v132;
  _BYTE v133[40];
  CFTypeRef *v134;
  unsigned __int8 v135;
  char v136;
  unsigned __int8 v137;
  _DWORD *v138;
  unsigned __int8 v139;
  char v140;
  char v141;
  char v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 <= 0x74F)
  {
    if (v6 != 1854)
    {
      if (v6 != 1856)
      {
        if (v6 == 1868)
        {
          IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WTF::URL>>((uint64_t *)a3, &v113);
          if (v117)
          {
            v18 = *((_QWORD *)this + 4);
            if (!v18)
              goto LABEL_24;
            v19 = *(_QWORD *)(v18 + 8);
            if (!v19)
              goto LABEL_24;
            v20 = v113;
            v21 = v114;
            v22 = v115;
            v23 = (WebKit::WebPageProxy *)(v19 - 16);
            v24 = (WebKit::WebProcessProxy *)*((_QWORD *)this + 3);
            v25 = (unsigned int *)((char *)v24 + 16);
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 + 1, v25));
            v102 = v24;
            WebKit::WebPageProxy::didChangeProvisionalURLForFrameShared(v23, &v102, (uint64_t)v20, (uint64_t)v21, v22, (WTF::StringImpl *)&v116);
            v27 = v102;
            v102 = 0;
            if (v27)
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v27 + 4);
            if (v117)
            {
LABEL_24:
              v28 = v116;
              v116 = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2)
                  WTF::StringImpl::destroy(v28, v17);
                else
                  *(_DWORD *)v28 -= 2;
              }
            }
          }
          return;
        }
LABEL_73:
        v88 = *((_QWORD *)this + 4);
        if (v88)
        {
          v89 = *(_QWORD *)(v88 + 8);
          if (v89)
            WebKit::WebPageProxy::didReceiveMessage((WebKit::WebPageProxy *)(v89 - 16), a2, a3);
        }
        return;
      }
      IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>>((uint64_t *)a3, &v113);
      if (!v141)
        return;
      v57 = (WebKit::WebProcessProxy *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
      if (!(_BYTE)v58)
      {
LABEL_108:
        if (v141)
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>::~__tuple_impl((uint64_t)&v113, v58);
        return;
      }
      v102 = v57;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v103, (unsigned __int8 **)a2);
      v59 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v59 = off_1E34D1520;
      v59[1] = v102;
      v60 = v103;
      v103 = 0;
      v59[2] = v60;
      v101 = v59;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v103);
      if (v141)
      {
        v61 = *((_QWORD *)this + 4);
        if (v61 && (v62 = *(_QWORD *)(v61 + 8)) != 0)
        {
          v63 = v120;
          v64 = v137;
          v65 = v139;
          v66 = v140;
          v67 = v62 - 16;
          v68 = (WebKit::WebProcessProxy *)*((_QWORD *)this + 3);
          v69 = (unsigned int *)((char *)v68 + 16);
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 + 1, v69));
          v71 = v65 != 0;
          v72 = v64 != 0;
          v102 = v68;
          v73 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
          if (v73)
            v74 = v73 - 16;
          else
            v74 = 0;
          BYTE1(v99) = v66;
          LOBYTE(v99) = v71;
          WebKit::WebPageProxy::decidePolicyForResponseShared(v67, &v102, *(_QWORD *)(*(_QWORD *)(v74 + 32) + 1896), (uint64_t *)&v113, v63, (uint64_t)&v121, (WebCore::ResourceRequestBase *)v133, v72, &v138, v99, (uint64_t *)&v101);
          v75 = v102;
          v102 = 0;
          if (v75)
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v75 + 4);
          v76 = (uint64_t)v101;
          v101 = 0;
          if (v76)
            (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
        }
        else
        {
          LOWORD(v102) = 0;
          BYTE2(v102) = 2;
          v103 = 0;
          v104 = 0;
          v105 = 0;
          v106[0] = 0;
          v107 = 0;
          LOBYTE(v108) = 0;
          v109 = 0;
          v110 = 0;
          v112 = 0;
          (*(void (**)(_QWORD *, WebKit::WebProcessProxy **))(*v59 + 16))(v59, &v102);
          (*(void (**)(_QWORD *))(*v59 + 8))(v59);
          if (v112)
          {
            v92 = v111;
            v111 = 0;
            if (v92)
            {
              if (*(_DWORD *)v92 == 2)
                WTF::StringImpl::destroy(v92, v58);
              else
                *(_DWORD *)v92 -= 2;
            }
          }
          if (v109)
            WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v108);
          if (v107)
            WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v106, v58);
        }
        goto LABEL_108;
      }
LABEL_111:
      __break(1u);
    }
    IPC::Decoder::decode<std::tuple<WebKit::NavigationActionData>>((uint64_t *)a3, &v113);
    if (!v142)
      return;
    v45 = (WebKit::WebProcessProxy *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)a3);
    if (v46)
    {
      v102 = v45;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v103, (unsigned __int8 **)a2);
      v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v47 = off_1E34D1548;
      v47[1] = v102;
      v48 = v103;
      v103 = 0;
      v47[2] = v48;
      v101 = v47;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v103);
      if (!v142)
        goto LABEL_111;
      v49 = *((_QWORD *)this + 4);
      if (v49 && (v50 = *(_QWORD *)(v49 + 8)) != 0)
      {
        v51 = v50 - 16;
        v52 = (WebKit::WebProcessProxy *)*((_QWORD *)this + 3);
        v53 = (unsigned int *)((char *)v52 + 16);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 + 1, v53));
        v102 = v52;
        WebKit::WebPageProxy::decidePolicyForNavigationActionAsyncShared(v51, &v102, (uint64_t *)&v113, (uint64_t *)&v101);
        v55 = v102;
        v102 = 0;
        if (v55)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v55 + 4);
        v56 = (uint64_t)v101;
        v101 = 0;
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      }
      else
      {
        LOWORD(v102) = 0;
        BYTE2(v102) = 2;
        v103 = 0;
        v104 = 0;
        v105 = 0;
        v106[0] = 0;
        v107 = 0;
        LOBYTE(v108) = 0;
        v109 = 0;
        v110 = 0;
        v112 = 0;
        (*(void (**)(_QWORD *, WebKit::WebProcessProxy **))(*v47 + 16))(v47, &v102);
        (*(void (**)(_QWORD *))(*v47 + 8))(v47);
        if (v112)
        {
          v91 = v111;
          v111 = 0;
          if (v91)
          {
            if (*(_DWORD *)v91 == 2)
              WTF::StringImpl::destroy(v91, v90);
            else
              *(_DWORD *)v91 -= 2;
          }
        }
        if (v109)
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v108);
        if (v107)
          WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v106, v90);
      }
    }
    if (v142)
      WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&v113);
    return;
  }
  if (*((unsigned __int16 *)a3 + 25) > 0x77Eu)
  {
    if (v6 == 1919)
    {
      IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>>((uint64_t *)a3, &v113);
      if (v135)
      {
        v78 = *((_QWORD *)this + 4);
        if (!v78)
          goto LABEL_72;
        v79 = *(_QWORD *)(v78 + 8);
        if (!v79)
          goto LABEL_72;
        v80 = v113;
        v81 = v114;
        v82 = *(_QWORD *)v124;
        v83 = (WebCore::DiagnosticLoggingKeys *)(v79 - 16);
        v84 = (WebKit::WebProcessProxy *)*((_QWORD *)this + 3);
        v85 = (unsigned int *)((char *)v84 + 16);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 + 1, v85));
        v102 = v84;
        WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared(v83, &v102, (uint64_t)v80, (uint64_t)v81, &v115, (uint64_t)v122, v82, (const WTF::URL *)v125, (WTF::URL *)v133, &v134);
        v87 = v102;
        v102 = 0;
        if (v87)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v87 + 4);
        if (v135)
LABEL_72:
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>::~__tuple_impl((uint64_t)&v113, v77);
      }
      return;
    }
    if (v6 == 1949)
    {
      IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>((uint64_t *)a3, &v113);
      if ((_BYTE)v115)
      {
        v30 = *((_QWORD *)this + 4);
        if (v30)
        {
          v31 = *(_QWORD *)(v30 + 8);
          if (v31)
            WebKit::WebPageProxy::handleMessageShared((WebKit::WebPageProxy *)(v31 - 16), (WebKit::WebProcessProxy **)this + 3, &v113, &v114);
        }
      }
      std::__optional_destruct_base<std::tuple<WTF::String,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v113, v29);
      return;
    }
    goto LABEL_73;
  }
  if (v6 != 1872)
  {
    if (v6 == 1883)
    {
      IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>>((uint64_t *)a3, &v113);
      if (v136)
      {
        v8 = *((_QWORD *)this + 4);
        if (v8)
        {
          if (*(_QWORD *)(v8 + 8))
          {
            v9 = v122[23];
            v10 = v133[32];
            v11 = v135;
            v12 = WebKit::WebFrameProxy::webFrame(v118, v119);
            if (v12)
            {
              v13 = v12;
              CFRetain(*(CFTypeRef *)(v12 + 8));
              v14 = *((_QWORD *)this + 4);
              if (v14)
              {
                v15 = *(_QWORD *)(v14 + 8);
                if (v15)
                  v16 = v15 - 16;
                else
                  v16 = 0;
              }
              else
              {
                v16 = 0;
              }
              v94 = (WebKit::WebProcessProxy *)*((_QWORD *)this + 3);
              v95 = (unsigned int *)((char *)v94 + 16);
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 + 1, v95));
              v102 = v94;
              WebKit::WebPageProxy::didFailProvisionalLoadForFrameShared(v16, &v102, v13, (uint64_t)&v113, (WebCore::ResourceRequestBase *)&v120, v9, &v123, (const WebCore::ResourceError *)v124, v10 != 0, &v134, v11 != 0);
              v97 = v102;
              v102 = 0;
              if (v97)
                WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v97 + 4);
              CFRelease(*(CFTypeRef *)(v13 + 8));
            }
          }
        }
        if (v136)
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>::~__tuple_impl((uint64_t)&v113, v7);
      }
      return;
    }
    goto LABEL_73;
  }
  IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>>((uint64_t *)a3, &v113);
  if (v133[0])
  {
    v32 = *((_QWORD *)this + 4);
    v33 = v113;
    v34 = v114;
    v35 = *(_QWORD *)v124;
    v36 = v125[8];
    v37 = v125[9];
    v38 = v127;
    v39 = v128;
    v40 = v129;
    v41 = v130;
    v42 = v131;
    *(_BYTE *)(*((_QWORD *)this + 3) + 776) = 1;
    if (v32)
    {
      v43 = *(_QWORD *)(v32 + 8);
      v44 = v43 ? v43 - 16 : 0;
    }
    else
    {
      v44 = 0;
    }
    HIBYTE(v98) = v37;
    HIBYTE(v100) = v39 != 0;
    LOBYTE(v100) = v38 != 0;
    LOBYTE(v98) = v36 != 0;
    WebKit::WebPageProxy::didCommitLoadForFrame(v44, (uint64_t)a2, (uint64_t)v33, (uint64_t)v34, (uint64_t)&v115, (WebCore::ResourceRequestBase *)v122, v35, (const WTF::String *)v125, v98, &v126, v100, v40 != 0, v41 != 0, v42, &v132);
    if (v133[0])
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>::~__tuple_impl((uint64_t)&v113, v93);
  }
}

uint64_t WebKit::RemotePageProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  _BOOL8 v7;
  IPC::Encoder *v8;
  _QWORD *v9;
  unsigned __int8 **v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  IPC::Encoder *v18;
  unsigned int *v19;
  unsigned int v20;
  IPC::Encoder *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _QWORD *v28;
  IPC::Encoder *v29;
  unsigned __int8 **v30;
  char v31;
  char v32;
  _BYTE v33[112];
  char v34;
  const char **v35;
  char v36;
  char v37;
  WTF::StringImpl *v38;
  char v39;
  uint64_t v40[320];
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(a3 + 50) == 3660)
  {
    IPC::Decoder::decode<std::tuple<WebKit::NavigationActionData>>((uint64_t *)a3, v40);
    v7 = v41 != 0;
    if (v41)
    {
      v8 = *a4;
      *a4 = 0;
      v29 = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v30, a2);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v9 = off_1E34D1570;
      v9[1] = v29;
      v10 = v30;
      v29 = 0;
      v30 = 0;
      v9[2] = v10;
      v28 = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v30);
      v12 = v29;
      v29 = 0;
      if (v12)
      {
        IPC::Encoder::~Encoder(v12, v11);
        WTF::fastFree(v13, v14);
      }
      if (!v41)
        __break(1u);
      v15 = *(_QWORD *)(a1 + 32);
      if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
      {
        v17 = v16 - 16;
        v18 = *(IPC::Encoder **)(a1 + 24);
        v19 = (unsigned int *)((char *)v18 + 16);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 + 1, v19));
        v29 = v18;
        WebKit::WebPageProxy::decidePolicyForNavigationActionSyncShared(v17, &v29, v40, (uint64_t *)&v28);
        v21 = v29;
        v29 = 0;
        if (v21)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v21 + 4);
        v22 = (uint64_t)v28;
        v28 = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
      else
      {
        LOWORD(v29) = 0;
        BYTE2(v29) = 2;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33[0] = 0;
        v34 = 0;
        LOBYTE(v35) = 0;
        v36 = 0;
        v37 = 0;
        v39 = 0;
        (*(void (**)(_QWORD *, IPC::Encoder **))(*v9 + 16))(v9, &v29);
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
        if (v39)
        {
          v27 = v38;
          v38 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v26);
            else
              *(_DWORD *)v27 -= 2;
          }
        }
        if (v36)
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v35);
        if (v34)
          WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v33, v26);
      }
      if (v41)
        WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v40);
    }
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 32);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 8);
      if (v24)
        return WebKit::WebPageProxy::didReceiveSyncMessage(v24 - 16, a2, a3, a4);
    }
    return 0;
  }
  return v7;
}

uint64_t WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*((unsigned __int8 *)v4 - 8) != 254)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100](v5);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100](uint64_t result)
{
  WTF *v1;
  WTF::RunLoop::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _DWORD *v6;

  if (result)
  {
    v1 = (WTF *)result;
    *(_QWORD *)(result + 16) = off_1E34ABE00;
    v2 = (WTF::RunLoop::TimerBase *)(result + 16);
    v3 = *(_QWORD *)(result + 40);
    *((_QWORD *)v2 + 3) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WTF::RunLoop::TimerBase::~TimerBase(v2);
    v5 = *((_QWORD *)v1 + 1);
    *((_QWORD *)v1 + 1) = 0;
    if (v5)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 8), v4);
    v6 = *(_DWORD **)v1;
    *(_QWORD *)v1 = 0;
    if (!v6)
      return WTF::fastFree(v1, v4);
    if (*v6)
    {
      --*v6;
      return WTF::fastFree(v1, v4);
    }
    result = 286;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion::entryExpired(WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = (uint64_t *)(*(_QWORD *)this + 8);
  v2 = *v1;
  result = WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebKit::ProcessAssertionType>>,WebKit::ProcessAssertionType>(*v1, *(_BYTE *)(*((_QWORD *)this + 1) + 16));
  if (v2)
  {
    v4 = v2 + 16 * *(unsigned int *)(v2 - 4);
    if (v4 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v4 = 0;
  }
  if (v4 != result)
    return WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::remove(v1, result);
  return result;
}

uint64_t WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_BYTE *)a2 = -2;
  result = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
    result = std::default_delete<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>::operator()[abi:sn180100](result);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WebKit::ProcessAssertionType,WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::HashMap<WebKit::ProcessAssertionType,WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>,WTF::IntHash<WebKit::ProcessAssertionType>,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>,WTF::HashTraits<WTF::UniqueRef<WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebKit::ProcessAssertionType>>::rehash(a1, v8 >> 1);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion::*&)(void),WebKit::ProcessThrottler::ProcessAssertionCache::CachedAssertion*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JSH_SG_EEEDcmSJ_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

WebKit::ProcessThrottlerActivity *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJDnSC_EEEEEEDcSG_DpT0_(uint64_t a1, WebKit::ProcessThrottlerActivity **a2)
{
  return std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](a2, 0);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJDnSC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJDnSC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 8) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRSC_SG_EEEDcmSI_DpOT0____fdiagonal[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJDnSC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  return result;
}

WebKit::ProcessThrottlerActivity *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJDnSC_EEEOSR_EEEDcSJ_DpT0_(WebKit::ProcessThrottlerActivity **a1, WebKit::ProcessThrottlerActivity **a2, WebKit::ProcessThrottlerActivity **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__assign_alt[abi:sn180100]<1ul,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>(*a1, a2, a3);
}

WebKit::ProcessThrottlerActivity *std::__variant_detail::__assignment<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__assign_alt[abi:sn180100]<1ul,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>,WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>(WebKit::ProcessThrottlerActivity *result, WebKit::ProcessThrottlerActivity **a2, WebKit::ProcessThrottlerActivity **a3)
{
  WebKit::ProcessThrottlerActivity *v4;
  uint64_t v5;
  WebKit::ProcessThrottlerActivity *v6;
  WebKit::ProcessThrottlerActivity *v7;
  char v8;

  v4 = result;
  v5 = *((unsigned int *)result + 2);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      *a3 = 0;
      return std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100](a2, v6);
    }
    result = (WebKit::ProcessThrottlerActivity *)((uint64_t (*)(char *, WebKit::ProcessThrottlerActivity *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v5])(&v8, result);
  }
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)v4 = v7;
  *((_DWORD *)v4 + 2) = 1;
  return result;
}

WebKit::FrameProcess *WTF::RefCounted<WebKit::FrameProcess>::deref(WebKit::FrameProcess *result, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebKit::FrameProcess::~FrameProcess(result, a2);
    return (WebKit::FrameProcess *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebKit::WebsitePoliciesData *std::unique_ptr<WebKit::WebsitePoliciesData>::reset[abi:sn180100](WebKit::WebsitePoliciesData **a1, WTF::StringImpl *a2)
{
  WebKit::WebsitePoliciesData *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData(result, a2);
    return (WebKit::WebsitePoliciesData *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t WebKit::WebsitePoliciesData::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  *a2 = 0;
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  v6 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v6)
    WTF::VectorDestructor<true,WebCore::CustomHeaderFields>::destruct(*(_QWORD *)(a1 + 8), (void *)(*(_QWORD *)(a1 + 8) + 32 * v6));
  WTF::VectorBuffer<WebCore::TextList,0ul,WTF::FastMalloc>::adopt(a1 + 8, (_DWORD *)a2 + 2);
  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8)
  {
    v15 = *(_QWORD *)(a1 + 24);
    v16 = 16 * v8;
    do
    {
      v15 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, v7)+ 16;
      v16 -= 16;
    }
    while (v16);
  }
  WTF::VectorBuffer<WTF::Ref<WebCore::TransformOperation,WTF::RawPtrTraits<WebCore::TransformOperation>,WTF::DefaultRefDerefTraits<WebCore::TransformOperation>>,0ul,WTF::FastMalloc>::adopt(a1 + 24, (_DWORD *)a2 + 6);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 40), (WTF::StringImpl *)(a2 + 5));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 48), (WTF::StringImpl *)(a2 + 6));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 56), (WTF::StringImpl *)(a2 + 7));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 64), (WTF::StringImpl *)(a2 + 8));
  v10 = *((_BYTE *)a2 + 74);
  *(_WORD *)(a1 + 72) = *((_WORD *)a2 + 36);
  *(_BYTE *)(a1 + 74) = v10;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v11 = a2[11];
  a2[11] = 0;
  v12 = *(WTF::StringImpl ***)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v11;
  if (v12)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v9);
  v13 = a2[12];
  *(_QWORD *)(a1 + 103) = *(uint64_t *)((char *)a2 + 103);
  *(_QWORD *)(a1 + 96) = v13;
  return a1;
}

uint64_t ***std::unique_ptr<WebKit::RemotePageVisitedLinkStoreRegistration>::reset[abi:sn180100](uint64_t ***result, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
    {
      v3 = (*v2)[1];
      if (v3)
        WebKit::WebProcessProxy::removeVisitedLinkStoreUser(v2[1], *(WebKit::VisitedLinkStore **)(v3 + 240), *(_QWORD *)(*(_QWORD *)(v3 + 16) + 744));
    }
    v4 = v2[1];
    v2[1] = 0;
    if (v4)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)v4 + 4);
    v5 = (unsigned int *)*v2;
    *v2 = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
    return (uint64_t ***)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1972E7720);
    }
    v5 = WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(a1 + 8) = v3;
    *(_QWORD *)a1 = v5;
    WTF::VectorCopier<false,WebCore::CustomHeaderFields>::uninitializedCopy<WebCore::CustomHeaderFields>(*(_QWORD *)a2, (uint64_t *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 12)), v5);
  }
  return a1;
}

uint64_t WTF::VectorCopier<false,WebCore::CustomHeaderFields>::uninitializedCopy<WebCore::CustomHeaderFields>(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;

  if ((uint64_t *)result != a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a3, v5);
      result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a3 + 16, (uint64_t)(v5 + 2));
      a3 += 32;
      v5 += 4;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 28))
  {
    v5 = WTF::fastMalloc((WTF *)(16 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)a2;
      v8 = 16 * v6;
      do
      {
        v5 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5, v7)+ 16;
        v7 += 16;
        v8 -= 16;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD ***)a2;
      v8 = 8 * v6;
      do
      {
        v5 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v5, v7++)+ 1;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebKit::PageLoadStateObserverBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebKit::PageLoadStateObserverBase,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebKit::PageLoadStateObserverBase,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebKit::PageLoadStateObserverBase&)#1},WTF::Vector<WTF::WeakPtr<WebKit::PageLoadStateObserverBase,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebKit::PageLoadStateObserverBase,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  _DWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;

  v3 = result;
  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_25;
  v5 = *(_DWORD *)(v4 - 4);
  if (!v5)
    goto LABEL_24;
  v6 = 0;
  do
  {
    while (1)
    {
      result = *(_QWORD *)(v4 + 8 * --v5);
      if ((unint64_t)(result + 1) >= 2 && !*(_QWORD *)(result + 8))
        break;
      if (!v5)
        goto LABEL_13;
    }
    *(_QWORD *)(v4 + 8 * v5) = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)result));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
    }
    *(_QWORD *)(v4 + 8 * v5) = -1;
    ++v6;
  }
  while (v5);
LABEL_13:
  v4 = *(_QWORD *)a2;
  if (v6)
  {
    *(_DWORD *)(v4 - 16) += v6;
    v9 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v10 = *(_DWORD *)(v9 - 12);
    else
      v10 = 0;
    *(_DWORD *)(v9 - 12) = v10 - v6;
    v4 = *(_QWORD *)a2;
  }
  if (!v4)
  {
LABEL_25:
    a2[2] = 0;
    goto LABEL_26;
  }
  v11 = *(_DWORD *)(v4 - 4);
  if (v11 >= 9 && 6 * *(_DWORD *)(v4 - 12) < v11)
  {
    result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
    v4 = *(_QWORD *)a2;
    a2[2] = 0;
    if (v4)
      goto LABEL_28;
LABEL_26:
    a2[3] = 0;
    goto LABEL_34;
  }
LABEL_24:
  a2[2] = 0;
LABEL_28:
  v13 = *(_DWORD *)(v4 - 12);
  if (v13 >= 0x7FFFFFFF)
    v14 = -2;
  else
    v14 = 2 * v13;
  a2[3] = v14;
  v15 = *(unsigned int *)(v4 - 12);
  if ((_DWORD)v15)
  {
    if (v15 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v16 = WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(v3 + 8) = v15;
    *(_QWORD *)v3 = v16;
  }
LABEL_34:
  v32 = a2;
  v33 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a2);
  v34 = v17;
  v18 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v19 = *(unsigned int *)(v18 - 4);
    v20 = (_QWORD *)(v18 + 8 * v19);
    v35 = v20;
    v36 = v20;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v32);
  }
  else
  {
    v35 = 0;
    v36 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v32);
    v20 = 0;
    v19 = 0;
  }
  v27 = a2;
  v28 = v20;
  v29 = v20;
  v30 = v20;
  v31 = v18 + 8 * v19;
  result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v27);
  v21 = v33;
  while (v21 != v28)
  {
    v22 = *(_QWORD *)(*v21 + 8);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v22 + 8), v22);
    v23 = *(unsigned int **)(v22 + 8);
    if (v23)
    {
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      v21 = v33;
    }
    v25 = *(unsigned int *)(v3 + 12);
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v25) = v23;
    *(_DWORD *)(v3 + 12) = v25 + 1;
    v26 = v21 + 1;
    v33 = v21 + 1;
    if (v21 + 1 != v34)
    {
      while ((unint64_t)(*v26 + 1) <= 1)
      {
        if (++v26 == v34)
        {
          v26 = v34;
          break;
        }
      }
      v33 = v26;
    }
    result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v32);
    v21 = v33;
    ++v32[2];
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::ProcessThrottler::*&)(void),WebKit::ProcessThrottler*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34D1308;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1308;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_1,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D1330;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1330;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_1,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) + 136);
        if (v4)
          LODWORD(v4) = *(_DWORD *)(v4 + 108);
        v5 = 134218240;
        v6 = v2;
        v7 = 1024;
        v8 = v4;
        _os_log_impl(&dword_196BCC000, v3, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::uiAssertionWillExpireImminently:", (uint8_t *)&v5, 0x12u);
      }
      WebKit::ProcessThrottler::sendPrepareToSuspendIPC((unsigned int *)v2, 1);
      WebKit::ProcessThrottler::invalidateAllActivities((WebKit::ProcessThrottler *)v2);
      return WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v2 + 40));
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_2,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34D1358;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_3,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D1380;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1380;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::setThrottleState(WebKit::ProcessThrottleState)::$_3,void>::call(unsigned int *result)
{
  uint64_t v1;
  WebKit::ProcessThrottler *v2;
  unsigned int *v3;
  unsigned int v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  WebKit::ProcessThrottler *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(WebKit::ProcessThrottler **)(v1 + 8);
    if (v2)
    {
      v3 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 8) + 16);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      v5 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 8) + 136);
        if (v6)
          LODWORD(v6) = *(_DWORD *)(v6 + 108);
        v7 = 134218240;
        v8 = v2;
        v9 = 1024;
        v10 = v6;
        _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::assertionWasInvalidated:", (uint8_t *)&v7, 0x12u);
      }
      WebKit::ProcessThrottler::invalidateAllActivities(v2);
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 8) + 16));
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::sendPrepareToSuspendIPC(WebKit::IsSuspensionImminent)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34D13A8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::sendPrepareToSuspendIPC(WebKit::IsSuspensionImminent)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D13A8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::sendPrepareToSuspendIPC(WebKit::IsSuspensionImminent)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *((_QWORD *)result + 1);
      v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) + 16);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      if (*(_BYTE *)(v3 + 176) && *(_QWORD *)(v3 + 168) == *((_QWORD *)result + 3))
      {
        v6 = qword_1ECE71640;
        if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
        {
          v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8) + 136);
          if (v7)
            LODWORD(v7) = *(_DWORD *)(v7 + 108);
          v9 = 134218240;
          v10 = v3;
          v11 = 1024;
          v12 = v7;
          _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::processReadyToSuspend: Updating process assertion to allow suspension", (uint8_t *)&v9, 0x12u);
          if (!*(_BYTE *)(v3 + 176))
          {
            __break(0xC471u);
            JUMPOUT(0x1972E8188);
          }
        }
        WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v3 + 40));
        if (*(_BYTE *)(v3 + 176))
          *(_BYTE *)(v3 + 176) = 0;
        if (*(_BYTE *)(v3 + 184))
        {
          v8 = WebKit::ProcessThrottler::expectedThrottleState((WebKit::ProcessThrottler *)v3);
          WebKit::ProcessThrottler::setThrottleState((unsigned int *)v3, v8);
        }
      }
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) + 16));
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::clearAssertion(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34D13D0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::clearAssertion(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D13D0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::ProcessThrottler::clearAssertion(void)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  _QWORD *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (_QWORD *)*((_QWORD *)result + 1);
      v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) + 16);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v3[2] + 8) + 136);
        if (v7)
          LODWORD(v7) = *(_DWORD *)(v7 + 108);
        v13 = 134218240;
        v14 = v3;
        v15 = 1024;
        v16 = v7;
        _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%p - [PID=%d] ProcessThrottler::clearAssertion: Releasing near-suspended assertion", (uint8_t *)&v13, 0x12u);
      }
      WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v3 + 13));
      v9 = v3[4];
      v3[4] = 0;
      if (v9)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 8), v8);
      if (!v3[3])
      {
        v10 = *(unsigned int **)(v3[2] + 8);
        v11 = v10 + 4;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 136))(v10);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v11);
      }
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) + 16));
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::ProcessThrottlerTimedActivity::*&)(void),WebKit::ProcessThrottlerTimedActivity*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<decltype(nullptr),WTF::UniqueRef<WebKit::ProcessThrottlerActivity>>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34D1410[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE19__generic_constructB8sn180100INS0_6__implIJDnSC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJDnSC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF9UniqueRefIN6WebKit24ProcessThrottlerActivityEEEEEEE19__generic_constructB8sn180100INS0_6__implIJDnSC_EEEEEvRSE_OT_EUlRSJ_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJDnSC_EEEOSS_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::CreateProvisionalFrame>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2148;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v8, *a2);
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DestroyProvisionalFrame>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2152;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

WebKit::BrowsingContextGroup *WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(WebKit::BrowsingContextGroup *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebKit::BrowsingContextGroup::~BrowsingContextGroup(result, a2);
    return (WebKit::BrowsingContextGroup *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ProvisionalPageProxy::goToBackForwardItem(API::Navigation &,WebKit::WebBackForwardListItem &,WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,BOOL,WebKit::WebBackForwardListItem &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34D1430;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ProvisionalPageProxy::goToBackForwardItem(API::Navigation &,WebKit::WebBackForwardListItem &,WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,BOOL,WebKit::WebBackForwardListItem &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34D1430;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

BOOL WTF::Detail::CallableWrapper<WebKit::ProvisionalPageProxy::goToBackForwardItem(API::Navigation &,WebKit::WebBackForwardListItem &,WTF::RefPtr<API::WebsitePolicies,WTF::RawPtrTraits<API::WebsitePolicies>,WTF::DefaultRefDerefTraits<API::WebsitePolicies>> &&,WebCore::ShouldTreatAsContinuingLoad,std::optional<WTF::ObjectIdentifierGeneric<WebKit::NetworkResourceLoadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>)::$_0,BOOL,WebKit::WebBackForwardListItem &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 416);
  return (!v2 || *(_QWORD *)(v2 + 8) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 16) + 176))
      && *(_QWORD *)(a1 + 16) != a2;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::LoadDidCommitInAnotherProcess>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2271;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v8, *a2);
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v8, a2[1]);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

_QWORD *IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  _BYTE v5[24];

  result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v5);
  if (v5[16])
    return (_QWORD *)IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder,std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v5, (uint64_t)a2);
  *a2 = 0;
  a2[32] = 0;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder,std::span<unsigned char const,18446744073709551615ul>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  char v6;
  __int128 v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v8);
  v6 = v9;
  if (!v9)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v7 = v8;
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v7;
    v6 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 32) = v6;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::BackForwardListItemState>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::BackForwardListItemState>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[328])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::BackForwardListItemState>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  _BYTE v5[24];

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::BackForwardListItemState>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5, a2);
  *a2 = 0;
  a2[328] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::BackForwardListItemState>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  char v6;
  _BYTE v7[312];
  char v8;

  result = IPC::Decoder::decode<WebKit::BackForwardListItemState>(a1, (uint64_t)v7);
  v6 = v8;
  if (!v8)
  {
    *a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    std::__tuple_leaf<1ul,WebKit::BackForwardListItemState,false>::__tuple_leaf[abi:sn180100]<WebKit::BackForwardListItemState,void>((uint64_t)(a3 + 16), (uint64_t)v7);
    v6 = 1;
LABEL_5:
    a3[328] = v6;
    return std::__optional_destruct_base<WebKit::BackForwardListItemState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7);
  }
  __break(1u);
  return result;
}

uint64_t std::__tuple_leaf<1ul,WebKit::BackForwardListItemState,false>::__tuple_leaf[abi:sn180100]<WebKit::BackForwardListItemState,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  WebKit::FrameState::FrameState(a1 + 24, (uint64_t *)(a2 + 24));
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  v5 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a1 + 280) = v5;
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  v6 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a1 + 304) = v6;
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::BackForwardListItemState>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  WebKit::ViewSnapshot *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WebCore::SerializedScriptValue *v9;

  if (*(_BYTE *)(a1 + 328))
  {
    v2 = *(WebKit::ViewSnapshot **)(a1 + 320);
    *(_QWORD *)(a1 + 320) = 0;
    if (v2)
      WTF::RefCounted<WebKit::ViewSnapshot>::deref(v2);
    v3 = *(unsigned int **)(a1 + 296);
    *(_QWORD *)(a1 + 296) = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        v9 = (WebCore::SerializedScriptValue *)v3;
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v9);
      }
    }
    WebKit::FrameState::~FrameState((WTF::StringImpl **)(a1 + 40));
    v7 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (v7)
  {
    result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v8);
  if (v9)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String>(a1, a2, (uint64_t *)&v8, (uint64_t)a3);
    if (v9)
    {
      result = v8;
      v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;

  result = IPC::Decoder::decode<std::tuple<BOOL>>(a1);
  if ((unsigned __int16)result <= 0xFFu)
  {
    v8 = 0;
    *(_BYTE *)a4 = 0;
LABEL_6:
    *(_BYTE *)(a4 + 24) = v8;
    return result;
  }
  if (*((_BYTE *)a2 + 8) && *((_BYTE *)a3 + 8))
  {
    v9 = *a2;
    *a2 = 0;
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = v10;
    *(_BYTE *)(a4 + 16) = result;
    v8 = 1;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      v5 = v6;
      v6 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;

  IPC::Decoder::decode<WTF::String>(a1, &v8);
  if (v9)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String>(a1, a2, (uint64_t *)&v8, a3);
    if (v9)
    {
      v7 = v8;
      v8 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _BYTE *a4@<X8>)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;

  IPC::Decoder::decode<WebCore::DiagnosticLoggingDictionary>(a1, (uint64_t)&v9);
  if (v10)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary>(a1, a2, a3, &v9, a4);
    if (v10)
    {
      if (v9)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v8);
    }
  }
  else
  {
    *a4 = 0;
    a4[32] = 0;
  }
}

uint64_t IPC::Decoder::decode<WebCore::DiagnosticLoggingDictionary>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::DiagnosticLoggingDictionary,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 8))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned __int16 v9;

  v9 = IPC::Decoder::decode<std::tuple<BOOL>>(a1);
  if (v9 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>(a2, a3, a4, &v9, (uint64_t)a5);
  }
  else
  {
    *a5 = 0;
    a5[32] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,void>::decode<IPC::Decoder,WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _BYTE *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*((_BYTE *)a1 + 8) && *((_BYTE *)a2 + 8) && *((_BYTE *)a3 + 8) && a4[1])
  {
    v5 = *a1;
    *a1 = 0;
    v6 = *a2;
    *a2 = 0;
    *(_QWORD *)a5 = v5;
    *(_QWORD *)(a5 + 8) = v6;
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)(a5 + 16) = v7;
    *(_BYTE *)(a5 + 24) = *a4;
    *(_BYTE *)(a5 + 32) = 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::DiagnosticLoggingDictionary,WebCore::ShouldSample>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::URLSchemeTaskParameters>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebKit::URLSchemeTaskParameters>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[512])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::URLSchemeTaskParameters>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v3;
  char v4;
  _BYTE v6[512];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::URLSchemeTaskParameters>(a1, v6);
  v4 = v7;
  if (v7)
  {
    WebKit::URLSchemeTaskParameters::URLSchemeTaskParameters((uint64_t)a2, (uint64_t)v6);
    v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[512] = v4;
  return std::__optional_destruct_base<WebKit::URLSchemeTaskParameters,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v3);
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<WebKit::URLSchemeTaskParameters>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::URLSchemeTaskParameters,void>::decode(a1, a2);
  if (!a2[512])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WebCore::ResourceRequestBase *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceRequestBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::URLSchemeTaskParameters,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  char v8;

  if (*(_BYTE *)(a1 + 512))
  {
    v3 = *(WTF::StringImpl **)(a1 + 456);
    *(_QWORD *)(a1 + 456) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(unsigned int *)(a1 + 448);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E34D1268[v4])(&v8, a1 + 424);
    *(_DWORD *)(a1 + 448) = -1;
    v5 = *(const void **)(a1 + 416);
    *(_QWORD *)(a1 + 416) = 0;
    if (v5)
      CFRelease(v5);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 224));
    v6 = *(const void **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = 0;
    if (v6)
      CFRelease(v6);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 16));
  }
  return a1;
}

void IPC::Decoder::decode<std::tuple<WebKit::NavigationActionData>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebKit::NavigationActionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[2560])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::NavigationActionData>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  _BYTE v4[2560];
  unsigned __int8 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::NavigationActionData>(a1, (uint64_t)v4);
  if (v5)
  {
    WebKit::NavigationActionData::NavigationActionData((uint64_t)a2, (uint64_t)v4);
    v3 = v5;
    a2[2560] = 1;
    if (v3)
      WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v4);
  }
  else
  {
    *a2 = 0;
    a2[2560] = 0;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit20ProvisionalPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D1458;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit20ProvisionalPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34D1458;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit20ProvisionalPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3272;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[784])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  _BYTE v6[304];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::FrameInfoData>(a1, (uint64_t)v6);
  if (v6[296])
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData>(a1, (uint64_t)v6, a2);
  }
  else
  {
    *a2 = 0;
    a2[784] = 0;
  }
  return std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
}

WebCore::ResourceResponseBase *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v7;
  WebCore::ResourceResponseBase *result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _BYTE *v13;
  _BYTE *v14;
  _QWORD v15[2];

  v3 = a1[1];
  v4 = *a1;
  v5 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    v7 = (_QWORD *)(v4 + v5);
    a1[2] = (uint64_t)(v7 + 1);
    if (v4)
    {
      v15[0] = *v7;
      v15[1] = 1;
      return IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,unsigned long long>(a1, a2, (uint64_t)v15, a3);
    }
    v9 = v3;
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v12 = a1;
      v14 = a3;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v4, v3);
        a1 = v12;
        a3 = v14;
        v10 = *v12;
        v9 = v12[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  result = (WebCore::ResourceResponseBase *)a1[3];
  if (result)
  {
    if (v9)
    {
      v13 = a3;
      result = (WebCore::ResourceResponseBase *)(*(uint64_t (**)(WebCore::ResourceResponseBase *, uint64_t))(*(_QWORD *)result + 16))(result, v10);
      a3 = v13;
    }
  }
  *a3 = 0;
  a3[784] = 0;
  return result;
}

WebCore::ResourceResponseBase *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,unsigned long long>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  WTF::StringImpl *v8;
  _BYTE v10[264];

  IPC::Decoder::decode<WebCore::ResourceResponse>(a1, v10);
  if (v10[256])
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse>(a1, a2, a3, (uint64_t)v10, a4);
  }
  else
  {
    *a4 = 0;
    a4[784] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v10, v8);
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  _BYTE v11[208];

  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v11);
  if (v11[200])
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest>(a1, a2, a3, a4, (uint64_t)v11, a5);
  }
  else
  {
    *a5 = 0;
    a5[784] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v11);
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  WTF::StringImpl *result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  __int16 v23;

  v8 = a1[1];
  v9 = *a1;
  v10 = a1[2] - *a1;
  if (v8 <= v10)
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      v19 = a1;
      v22 = a6;
      if (v8)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        a1 = v19;
        a6 = v22;
        v15 = *v19;
        v14 = v19[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_7;
  }
  v11 = (unsigned __int8 *)(v9 + v10);
  a1[2] = (uint64_t)(v11 + 1);
  if (!v9)
  {
    v14 = v8;
    v15 = 0;
LABEL_7:
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      v18 = a1;
      v21 = a6;
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        a1 = v18;
        a6 = v21;
        v9 = *v18;
        v8 = v18[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    goto LABEL_8;
  }
  v12 = *v11;
  if (v12 < 2)
  {
    v23 = (v12 != 0) | 0x100;
    return IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL>(a1, a2, a3, a4, a5, &v23, a6);
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result)
  {
    if (v8)
    {
      v20 = a6;
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v9);
      a6 = v20;
    }
  }
  *a6 = 0;
  a6[784] = 0;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X5>, _BYTE *a7@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v16);
  if (v17)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String>(a1, a2, a3, a4, a5, a6, (uint64_t)&v16, a7);
    if (v17)
    {
      result = v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a7 = 0;
    a7[784] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  __int16 v25;

  v10 = a1[1];
  v11 = *a1;
  v12 = a1[2] - *a1;
  if (v10 <= v12)
  {
    v16 = 0;
    v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18)
    {
      v21 = a1;
      v24 = a8;
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        a1 = v21;
        a8 = v24;
        v17 = *v21;
        v16 = v21[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_7;
  }
  v13 = (unsigned __int8 *)(v11 + v12);
  a1[2] = (uint64_t)(v13 + 1);
  if (!v11)
  {
    v16 = v10;
    v17 = 0;
LABEL_7:
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      v20 = a1;
      v23 = a8;
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
        a1 = v20;
        a8 = v23;
        v11 = *v20;
        v10 = v20[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_8;
  }
  v14 = *v13;
  if (v14 < 2)
  {
    v25 = (v14 != 0) | 0x100;
    return IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL>(a1, a2, a3, a4, a5, a6, a7, &v25, a8);
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v10)
    {
      v22 = a8;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v11);
      a8 = v22;
    }
  }
  *a8 = 0;
  a8[784] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t result;
  __int16 v18;

  result = IPC::Decoder::decode<WebCore::ImageBufferPixelFormat>(a1);
  v18 = result;
  if ((unsigned __int16)result > 0xFFu)
    return IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>(a2, a3, a4, a5, a6, a7, a8, (uint64_t)a9, &v18);
  *a9 = 0;
  a9[784] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _BYTE *a5@<X5>, uint64_t a6@<X6>, _BYTE *a7@<X7>, uint64_t a8@<X8>, _BYTE *a9)
{
  uint64_t result;

  result = a8;
  if (*(_BYTE *)(a1 + 296)
    && *(_BYTE *)(a2 + 8)
    && *(_BYTE *)(a3 + 256)
    && *(_BYTE *)(a4 + 200)
    && a5[1]
    && *(_BYTE *)(a6 + 8)
    && a7[1]
    && a9[1])
  {
    result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEEJN6WebKit13FrameInfoDataEyN7WebCore16ResourceResponseENS5_15ResourceRequestEbN3WTF6StringEbNS5_28CrossOriginOpenerPolicyValueEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEJS4_yS6_S7_bS9_bSA_EJEJEJS4_yS6_S7_bS9_bSA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(a8, a1, (_QWORD *)a2, a3, a4, a5, (uint64_t *)a6, a7, a9);
    *(_BYTE *)(result + 784) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEEJN6WebKit13FrameInfoDataEyN7WebCore16ResourceResponseENS5_15ResourceRequestEbN3WTF6StringEbNS5_28CrossOriginOpenerPolicyValueEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEJS4_yS6_S7_bS9_bSA_EJEJEJS4_yS6_S7_bS9_bSA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _BYTE *a6, uint64_t *a7, _BYTE *a8, _BYTE *a9)
{
  uint64_t v16;
  uint64_t v17;

  v16 = std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>(a1, a2);
  *(_QWORD *)(v16 + 296) = *a3;
  std::__tuple_leaf<1ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(v16 + 304, a4);
  std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>(a1 + 560, a5);
  *(_BYTE *)(a1 + 760) = *a6;
  v17 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 768) = v17;
  *(_BYTE *)(a1 + 776) = *a8;
  *(_BYTE *)(a1 + 777) = *a9;
  return a1;
}

uint64_t std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  *(_WORD *)a1 = *(_WORD *)a2;
  WTF::URL::URL(a1 + 8, (uint64_t *)(a2 + 8));
  WTF::URL::URL(a1 + 48, (uint64_t *)(a2 + 48));
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = v4;
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 104) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 112) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a1 + 116) = v5;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v6 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_DWORD *)(a1 + 128) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_DWORD *)(a1 + 132) = v6;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v7 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 136) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(_DWORD *)(a1 + 144) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 148) = 0;
  *(_DWORD *)(a1 + 148) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
  *(_DWORD *)(a1 + 152) = v7;
  v8 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 160) = v8;
  v9 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 168) = v9;
  v10 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a1 + 176) = v10;
  v11 = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = v11;
  v12 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a1 + 200) = v12;
  *(_BYTE *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 232) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(a1 + 208, a2 + 208);
  v13 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 240) = v13;
  v14 = *(_OWORD *)(a2 + 248);
  v15 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 278) = *(_OWORD *)(a2 + 278);
  *(_OWORD *)(a1 + 264) = v15;
  *(_OWORD *)(a1 + 248) = v14;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit20ProvisionalPageProxyES8_FvONS7_13FrameInfoDataEyRKN7WebCore16ResourceResponseERKNSB_15ResourceRequestEbRKNS_6StringEbNSB_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D1480;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit20ProvisionalPageProxyES8_FvONS7_13FrameInfoDataEyRKN7WebCore16ResourceResponseERKNSB_15ResourceRequestEbRKNS_6StringEbNSB_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34D1480;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit20ProvisionalPageProxyES8_FvONS7_13FrameInfoDataEyRKN7WebCore16ResourceResponseERKNSB_15ResourceRequestEbRKNS_6StringEbNSB_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3274;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,unsigned long long,WebCore::ResourceResponse,WebCore::ResourceRequest,BOOL,WTF::String,BOOL,WebCore::CrossOriginOpenerPolicyValue>::~__tuple_impl(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  WTF::StringImpl *v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  const void *v10;
  char v12;

  v3 = *(WTF::StringImpl **)(a1 + 768);
  *(_QWORD *)(a1 + 768) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(const void **)(a1 + 752);
  *(_QWORD *)(a1 + 752) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 560));
  v6 = *(const void **)(a1 + 544);
  *(_QWORD *)(a1 + 544) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 304), v5);
  v8 = *(WTF::StringImpl **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(unsigned int *)(a1 + 232);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E34D1268[v9])(&v12, a1 + 208);
  *(_DWORD *)(a1 + 232) = -1;
  v10 = *(const void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v10)
    CFRelease(v10);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
  return a1;
}

void IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WTF::URL>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WTF::URL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[64])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WTF::URL>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE v4[24];

  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v4);
  if (v4[16])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WTF::URL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v4, a2);
  }
  else
  {
    *a2 = 0;
    a2[64] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WTF::URL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _BYTE *v13;
  _BYTE *v14;
  _QWORD v15[2];

  v3 = a1[1];
  v4 = *a1;
  v5 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    v7 = (_QWORD *)(v4 + v5);
    a1[2] = (uint64_t)(v7 + 1);
    if (v4)
    {
      v15[0] = *v7;
      v15[1] = 1;
      IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WTF::URL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long>(a1, a2, (uint64_t)v15, a3);
      return;
    }
    v8 = v3;
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v12 = a1;
      v14 = a3;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 16))(v10, v4, v3);
        a1 = v12;
        a3 = v14;
        v9 = *v12;
        v8 = v12[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v11 = a1[3];
  if (v11)
  {
    if (v8)
    {
      v13 = a3;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
      a3 = v13;
    }
  }
  *a3 = 0;
  a3[64] = 0;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WTF::URL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9[5];
  char v10;

  IPC::Decoder::decode<WTF::URL>(a1, v9);
  if (v10)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WTF::URL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WTF::URL>(a2, a3, (uint64_t)v9, (uint64_t)a4);
    if (v10)
    {
      v8 = v9[0];
      v9[0] = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[64] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WTF::URL>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WTF::URL>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (*(_BYTE *)(a1 + 16) && *(_BYTE *)(a2 + 8) && *(_BYTE *)(a3 + 40))
  {
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)a2;
    WTF::URL::URL(a4 + 24, (uint64_t *)a3);
    *(_BYTE *)(a4 + 64) = 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[488])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  _BYTE v6[480];

  IPC::Decoder::decode<WebKit::WebNavigationDataStore>(a1, v6);
  if (v6[472])
  {
    IPC::ArgumentCoder<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder,WebKit::WebNavigationDataStore>(a1, (uint64_t)v6, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[488] = 0;
  }
  return std::__optional_destruct_base<WebKit::WebNavigationDataStore,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder,WebKit::WebNavigationDataStore>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  char v6;
  __int128 v7;
  char v8;

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v7);
  v6 = v8;
  if (!v8)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 472))
  {
    result = WebKit::WebNavigationDataStore::WebNavigationDataStore(a3, (uint64_t *)a2);
    *(_OWORD *)(a3 + 472) = v7;
    v6 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 488) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebNavigationDataStore,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 472))
  {
    v3 = *(const void **)(a1 + 456);
    *(_QWORD *)(a1 + 456) = 0;
    if (v3)
      CFRelease(v3);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 216), a2);
    v4 = *(const void **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = 0;
    if (v4)
      CFRelease(v4);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 16));
    v6 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebKit::WebNavigationDataStore,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (*(_BYTE *)(a1 + 488))
  {
    v3 = *(const void **)(a1 + 456);
    *(_QWORD *)(a1 + 456) = 0;
    if (v3)
      CFRelease(v3);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 216), a2);
    v4 = *(const void **)(a1 + 208);
    *(_QWORD *)(a1 + 208) = 0;
    if (v4)
      CFRelease(v4);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 16));
    v6 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (v7)
  {
    result = IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      result = v6;
      v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[32] = 0;
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v8);
  if (v9)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder,WTF::String,WTF::String>(a1, a2, (uint64_t *)&v8, (uint64_t)a3);
    if (v9)
    {
      result = v8;
      v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder,WTF::String,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12;

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v11);
  v8 = v12;
  if (!v12)
  {
    *(_BYTE *)a4 = 0;
    goto LABEL_6;
  }
  if (*((_BYTE *)a2 + 8) && *((_BYTE *)a3 + 8))
  {
    v9 = *a2;
    *a2 = 0;
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = v10;
    *(_OWORD *)(a4 + 16) = v11;
    v8 = 1;
LABEL_6:
    *(_BYTE *)(a4 + 32) = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[608])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  _BYTE v5[24];

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5, a2);
  *a2 = 0;
  a2[608] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *v6;
  _BYTE v8[304];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::FrameInfoData>(a1, (uint64_t)v8);
  if (v8[296])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData>(a1, a2, (uint64_t)v8, a3);
  }
  else
  {
    *a3 = 0;
    a3[608] = 0;
  }
  return std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v6);
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v9[208];

  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v9);
  if (v9[200])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest>(a1, a2, a3, (uint64_t)v9, a4);
  }
  else
  {
    *a4 = 0;
    a4[608] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v9);
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _BYTE *v15;
  _BYTE *v16;
  _QWORD v17[2];

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    v9 = (_QWORD *)(v6 + v7);
    a1[2] = (uint64_t)(v9 + 1);
    if (v6)
    {
      v17[0] = *v9;
      v17[1] = 1;
      IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long>(a1, a2, a3, a4, (uint64_t)v17, a5);
      return;
    }
    v10 = v5;
    v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v14 = a1;
      v16 = a5;
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v6, v5);
        a1 = v14;
        a5 = v16;
        v11 = *v14;
        v10 = v14[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13)
  {
    if (v10)
    {
      v15 = a5;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
      a5 = v15;
    }
  }
  *a5 = 0;
  a5[608] = 0;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14[5];
  char v15;

  IPC::Decoder::decode<WTF::URL>(a1, v14);
  if (v15)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL>(a1, a2, a3, a4, a5, (uint64_t)v14, a6);
    if (v15)
    {
      v13 = v14[0];
      v14[0] = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
  }
  else
  {
    *a6 = 0;
    a6[608] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16[5];
  char v17;

  IPC::Decoder::decode<WTF::URL>(a1, v16);
  if (v17)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL>(a1, a2, a3, a4, a5, a6, (uint64_t)v16, a7);
    if (v17)
    {
      v15 = v16[0];
      v16[0] = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v14);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
  }
  else
  {
    *a7 = 0;
    a7[608] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  char v17;

  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v16);
  if (v17)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>(a2, a3, a4, a5, a6, a7, (uint64_t)&v16, (uint64_t)a8);
    if (v17)
    {
      v15 = v16;
      v16 = 0;
      if (v15)
        CFRelease(*(CFTypeRef *)(v15 + 8));
    }
  }
  else
  {
    *a8 = 0;
    a8[608] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t result;

  result = a8;
  if (*(_BYTE *)(a1 + 16)
    && *(_BYTE *)(a2 + 296)
    && *(_BYTE *)(a3 + 200)
    && *(_BYTE *)(a4 + 8)
    && *(_BYTE *)(a5 + 40)
    && *(_BYTE *)(a6 + 40)
    && *(_BYTE *)(a7 + 8))
  {
    result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEN6WebKit13FrameInfoDataENS3_15ResourceRequestEyNS5_3URLESF_NSC_8UserDataEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6EEJSB_SD_SE_ySF_SF_SG_EJEJEJSB_SD_SE_ySF_SF_SG_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(a8, (_OWORD *)a1, a2, a3, (_QWORD *)a4, (uint64_t *)a5, (uint64_t *)a6, (uint64_t *)a7);
    *(_BYTE *)(result + 608) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEN6WebKit13FrameInfoDataENS3_15ResourceRequestEyNS5_3URLESF_NSC_8UserDataEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6EEJSB_SD_SE_ySF_SF_SG_EJEJEJSB_SD_SE_ySF_SF_SG_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v14;

  *(_OWORD *)a1 = *a2;
  std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>(a1 + 16, a3);
  std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>(a1 + 312, a4);
  *(_QWORD *)(a1 + 512) = *a5;
  WTF::URL::URL(a1 + 520, a6);
  WTF::URL::URL(a1 + 560, a7);
  v14 = *a8;
  if (v14)
    CFRetain(*(CFTypeRef *)(v14 + 8));
  *(_QWORD *)(a1 + 600) = v14;
  return a1;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::URL,WTF::URL,WebKit::UserData>::~__tuple_impl(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  const void *v10;
  char v12;

  v3 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *(WTF::StringImpl **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 520);
  *(_QWORD *)(a1 + 520) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(const void **)(a1 + 504);
  *(_QWORD *)(a1 + 504) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 312));
  v8 = *(WTF::StringImpl **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(unsigned int *)(a1 + 248);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E34D1268[v9])(&v12, a1 + 224);
  *(_DWORD *)(a1 + 248) = -1;
  v10 = *(const void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v10)
    CFRelease(v10);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 24));
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[616])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  _BYTE v6[304];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::FrameInfoData>(a1, (uint64_t)v6);
  if (v6[296])
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData>(a1, (uint64_t)v6, a2);
  }
  else
  {
    *a2 = 0;
    a2[616] = 0;
  }
  return std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE v7[208];

  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v7);
  if (v7[200])
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest>(a1, a2, (uint64_t)v7, a3);
  }
  else
  {
    *a3 = 0;
    a3[616] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v7);
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v8;
  WTF::StringImpl *result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = (_QWORD *)(v5 + v6);
    a1[2] = (uint64_t)(v8 + 1);
    if (v5)
    {
      v16[0] = *v8;
      v16[1] = 1;
      return IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long>(a1, a2, a3, (uint64_t)v16, a4);
    }
    v10 = v4;
    v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v13 = a1;
      v15 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v5, v4);
        a1 = v13;
        a4 = v15;
        v11 = *v13;
        v10 = v13[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  result = (WTF::StringImpl *)a1[3];
  if (result)
  {
    if (v10)
    {
      v14 = a4;
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v11);
      a4 = v14;
    }
  }
  *a4 = 0;
  a4[616] = 0;
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;

  result = (WTF::StringImpl *)IPC::Decoder::decode<WTF::String>(a1, &v12);
  if (v13)
  {
    result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String>(a1, a2, a3, a4, (uint64_t)&v12, a5);
    if (v13)
    {
      result = v12;
      v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a5 = 0;
    a5[616] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  WTF::StringImpl *v12;
  _BYTE v14[88];

  IPC::Decoder::decode<WebCore::ResourceError>(a1, (uint64_t)v14);
  if (v14[80])
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError>(a1, a2, a3, a4, a5, (uint64_t)v14, a6);
  }
  else
  {
    *a6 = 0;
    a6[616] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v12);
}

void IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  unsigned __int16 v14;

  v14 = IPC::Decoder::decode<std::tuple<BOOL>>(a1);
  if (v14 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading>(a1, a2, a3, a4, a5, a6, &v14, a7);
  }
  else
  {
    *a7 = 0;
    a7[616] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  char v18;

  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v17);
  if (v18)
  {
    IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData>(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&v17, a8);
    if (v18)
    {
      v16 = v17;
      v17 = 0;
      if (v16)
        CFRelease(*(CFTypeRef *)(v16 + 8));
    }
  }
  else
  {
    *a8 = 0;
    a8[616] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t result;
  __int16 v18;

  result = IPC::Decoder::decode<std::tuple<BOOL>>(a1);
  v18 = result;
  if ((unsigned __int16)result > 0xFFu)
    return IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>(a2, a3, a4, a5, a6, a7, a8, (uint64_t)a9, &v18);
  *a9 = 0;
  a9[616] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>,void>::decode<IPC::Decoder,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _BYTE *a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, _BYTE *a9)
{
  uint64_t result;

  result = a8;
  if (*(_BYTE *)(a1 + 296)
    && *(_BYTE *)(a2 + 200)
    && *(_BYTE *)(a3 + 8)
    && *(_BYTE *)(a4 + 8)
    && *(_BYTE *)(a5 + 80)
    && a6[1]
    && *(_BYTE *)(a7 + 8)
    && a9[1])
  {
    result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEEJN6WebKit13FrameInfoDataEN7WebCore15ResourceRequestEyN3WTF6StringENS5_13ResourceErrorENS5_19WillContinueLoadingENS3_8UserDataENS5_27WillInternallyHandleFailureEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEJS4_S6_yS8_S9_SA_SB_SC_EJEJEJS4_S6_yS8_S9_SA_SB_SC_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(a8, a1, a2, (uint64_t *)a3, (uint64_t *)a4, (uint64_t *)a5, a6, (uint64_t *)a7, a9);
    *(_BYTE *)(result + 616) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEEJN6WebKit13FrameInfoDataEN7WebCore15ResourceRequestEyN3WTF6StringENS5_13ResourceErrorENS5_19WillContinueLoadingENS3_8UserDataENS5_27WillInternallyHandleFailureEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEJS4_S6_yS8_S9_SA_SB_SC_EJEJEJS4_S6_yS8_S9_SA_SB_SC_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _BYTE *a7, uint64_t *a8, _BYTE *a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v16 = std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>(a1, a2);
  std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>(v16 + 296, a3);
  v17 = *a4;
  v18 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 496) = v17;
  *(_QWORD *)(a1 + 504) = v18;
  v19 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 512) = v19;
  WTF::URL::URL(a1 + 520, a6 + 1);
  v20 = a6[6];
  a6[6] = 0;
  *(_QWORD *)(a1 + 560) = v20;
  LODWORD(v20) = *((_DWORD *)a6 + 14);
  *(_WORD *)(a1 + 572) = *((_WORD *)a6 + 30);
  *(_DWORD *)(a1 + 568) = v20;
  v21 = a6[8];
  a6[8] = 0;
  *(_QWORD *)(a1 + 576) = v21;
  *(_BYTE *)(a1 + 584) = *((_BYTE *)a6 + 72);
  *(_BYTE *)(a1 + 592) = *a7;
  v22 = *a8;
  if (v22)
    CFRetain(*(CFTypeRef *)(v22 + 8));
  *(_QWORD *)(a1 + 600) = v22;
  *(_BYTE *)(a1 + 608) = *a9;
  return a1;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,WebCore::ResourceError,WebCore::WillContinueLoading,WebKit::UserData,WebCore::WillInternallyHandleFailure>::~__tuple_impl(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  const void *v13;
  char v15;

  v3 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *(const void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(WTF::StringImpl **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(a1 + 520);
  *(_QWORD *)(a1 + 520) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)(a1 + 512);
  *(_QWORD *)(a1 + 512) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)(a1 + 504);
  *(_QWORD *)(a1 + 504) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(const void **)(a1 + 488);
  *(_QWORD *)(a1 + 488) = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 296));
  v11 = *(WTF::StringImpl **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(unsigned int *)(a1 + 232);
  if ((_DWORD)v12 != -1)
    ((void (*)(char *, uint64_t))off_1E34D1268[v12])(&v15, a1 + 208);
  *(_DWORD *)(a1 + 232) = -1;
  v13 = *(const void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v13)
    CFRelease(v13);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
  return a1;
}

unint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[560])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  _BYTE v5[24];

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5, a2);
  *a2 = 0;
  a2[560] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::StringImpl *v6;
  _BYTE v8[304];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebKit::FrameInfoData>(a1, (uint64_t)v8);
  if (v8[296])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData>(a1, a2, (uint64_t)v8, a3);
  }
  else
  {
    *a3 = 0;
    a3[560] = 0;
  }
  return std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v6);
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v9[208];

  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v9);
  if (v9[200])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest>(a1, a2, a3, (uint64_t)v9, a4);
  }
  else
  {
    *a4 = 0;
    a4[560] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v9);
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _BYTE *v15;
  _BYTE *v16;
  _QWORD v17[2];

  v5 = a1[1];
  v6 = *a1;
  v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 >= v7 && v5 - v7 > 7)
  {
    v9 = (_QWORD *)(v6 + v7);
    a1[2] = (uint64_t)(v9 + 1);
    if (v6)
    {
      v17[0] = *v9;
      v17[1] = 1;
      IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long>(a1, a2, a3, a4, (uint64_t)v17, a5);
      return;
    }
    v10 = v5;
    v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    v12 = a1[3];
    if (v12)
    {
      v14 = a1;
      v16 = a5;
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v6, v5);
        a1 = v14;
        a5 = v16;
        v11 = *v14;
        v10 = v14[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[3];
  if (v13)
  {
    if (v10)
    {
      v15 = a5;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
      a5 = v15;
    }
  }
  *a5 = 0;
  a5[560] = 0;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;

  IPC::Decoder::decode<WTF::String>(a1, &v14);
  if (v15)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String>(a1, a2, a3, a4, a5, (uint64_t)&v14, a6);
    if (v15)
    {
      v13 = v14;
      v14 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
  }
  else
  {
    *a6 = 0;
    a6[560] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  __int16 v24;

  v9 = a1[1];
  v10 = *a1;
  v11 = a1[2] - *a1;
  if (v9 <= v11)
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      v20 = a1;
      v23 = a7;
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        a1 = v20;
        a7 = v23;
        v15 = *v20;
        v14 = v20[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_7;
  }
  v12 = (unsigned __int8 *)(v10 + v11);
  a1[2] = (uint64_t)(v12 + 1);
  if (!v10)
  {
    v14 = v9;
    v15 = 0;
LABEL_7:
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      v19 = a1;
      v22 = a7;
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        a1 = v19;
        a7 = v22;
        v10 = *v19;
        v9 = v19[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
    goto LABEL_8;
  }
  v13 = *v12;
  if (v13 < 2)
  {
    v24 = (v13 != 0) | 0x100;
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL>(a1, a2, a3, a4, a5, a6, &v24, a7);
    return;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  v18 = a1[3];
  if (v18)
  {
    if (v9)
    {
      v21 = a7;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v10);
      a7 = v21;
    }
  }
  *a7 = 0;
  a7[560] = 0;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X8>)
{
  unsigned __int16 v16;

  v16 = IPC::Decoder::decode<WebCore::TextGranularity>(a1);
  if (v16 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType>(a1, a2, a3, a4, a5, a6, a7, &v16, a8);
  }
  else
  {
    *a8 = 0;
    a8[560] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X7>, _BYTE *a9@<X8>)
{
  CFTypeRef v18;
  CFTypeRef cf;
  char v20;

  IPC::Decoder::decode<WebCore::CertificateInfo>(a1, (uint64_t)&cf);
  if (v20)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo>(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&cf);
    if (v20)
    {
      v18 = cf;
      cf = 0;
      if (v18)
        CFRelease(v18);
    }
  }
  else
  {
    *a9 = 0;
    a9[560] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X7>, _BYTE *a9@<X8>, uint64_t a10)
{
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  __int16 v27;

  v12 = a1[1];
  v13 = *a1;
  v14 = a1[2] - *a1;
  if (v12 <= v14)
  {
    v17 = 0;
    v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    v19 = a1[3];
    if (v19)
    {
      v23 = a1;
      v26 = a9;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
        a1 = v23;
        v18 = *v23;
        v17 = v23[1];
        a9 = v26;
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
    }
    goto LABEL_7;
  }
  v15 = (unsigned __int8 *)(v13 + v14);
  a1[2] = (uint64_t)(v15 + 1);
  if (!v13)
  {
    v17 = v12;
    v18 = 0;
LABEL_7:
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      v22 = a1;
      v25 = a9;
      if (v17)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 16))(v20, v18, v17);
        a1 = v22;
        v13 = *v22;
        v12 = v22[1];
        a9 = v25;
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_8;
  }
  v16 = *v15;
  if (v16 < 2)
  {
    v27 = (v16 != 0) | 0x100;
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &v27);
    return;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  v21 = a1[3];
  if (v21)
  {
    if (v12)
    {
      v24 = a9;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v13);
      a9 = v24;
    }
  }
  *a9 = 0;
  a9[560] = 0;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, _BYTE *a11)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  __int16 v28;

  v13 = a1[1];
  v14 = *a1;
  v15 = a1[2] - *a1;
  if (v13 <= v15)
  {
    v18 = 0;
    v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    v20 = a1[3];
    if (v20)
    {
      v24 = a1;
      v27 = a9;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        a1 = v24;
        v19 = *v24;
        v18 = v24[1];
        a9 = v27;
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
    goto LABEL_7;
  }
  v16 = (unsigned __int8 *)(v14 + v15);
  a1[2] = (uint64_t)(v16 + 1);
  if (!v14)
  {
    v18 = v13;
    v19 = 0;
LABEL_7:
    v13 = 0;
    v14 = 0;
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
    {
      v23 = a1;
      v26 = a9;
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v19, v18);
        a1 = v23;
        v14 = *v23;
        v13 = v23[1];
        a9 = v26;
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
    }
    goto LABEL_8;
  }
  v17 = *v16;
  if (v17 < 2)
  {
    v28 = (v17 != 0) | 0x100;
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, &v28);
    return;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  v22 = a1[3];
  if (v22)
  {
    if (v13)
    {
      v25 = a9;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v14);
      a9 = v25;
    }
  }
  *a9 = 0;
  a9[560] = 0;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, _BYTE *a11, _BYTE *a12)
{
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  __int16 v29;

  v14 = a1[1];
  v15 = *a1;
  v16 = a1[2] - *a1;
  if (v14 <= v16)
  {
    v19 = 0;
    v20 = 0;
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
    {
      v25 = a1;
      v28 = a9;
      if (v14)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        a1 = v25;
        a9 = v28;
        v20 = *v25;
        v19 = v25[1];
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
    }
    goto LABEL_7;
  }
  v17 = (unsigned __int8 *)(v15 + v16);
  a1[2] = (uint64_t)(v17 + 1);
  if (!v15)
  {
    v19 = v14;
    v20 = 0;
LABEL_7:
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v22 = a1[3];
    if (v22)
    {
      v24 = a1;
      v27 = a9;
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v20, v19);
        a1 = v24;
        a9 = v27;
        v15 = *v24;
        v14 = v24[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_8;
  }
  v18 = *v17;
  if (v18 < 2)
  {
    v29 = (v18 != 0) | 0x100;
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, &v29);
    return;
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  v23 = a1[3];
  if (v23)
  {
    if (v14)
    {
      v26 = a9;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v15);
      a9 = v26;
    }
  }
  *a9 = 0;
  a9[560] = 0;
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, _BYTE *a11, _BYTE *a12, _BYTE *a13)
{
  unsigned __int16 v22;

  v22 = IPC::Decoder::decode<std::tuple<BOOL>>(a1);
  if (v22 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, &v22);
  }
  else
  {
    *a9 = 0;
    a9[560] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, _BYTE *a11, _BYTE *a12, _BYTE *a13, _BYTE *a14)
{
  unsigned __int16 v23;

  v23 = IPC::Decoder::decode<WebCore::PathRoundedRect::Strategy>(a1);
  if (v23 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy>(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, &v23);
  }
  else
  {
    *a9 = 0;
    a9[560] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, _BYTE *a11, _BYTE *a12, _BYTE *a13, _BYTE *a14, _BYTE *a15)
{
  uint64_t v23;
  uint64_t v24;
  char v25;

  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v24);
  if (v25)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>(a2, a3, a4, a5, a6, a7, a8, (uint64_t)a9, a10, a11, a12, a13, a14, a15, (uint64_t)&v24);
    if (v25)
    {
      v23 = v24;
      v24 = 0;
      if (v23)
        CFRelease(*(CFTypeRef *)(v23 + 8));
    }
  }
  else
  {
    *a9 = 0;
    a9[560] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _BYTE *a6@<X6>, _BYTE *a7@<X7>, uint64_t a8@<X8>, uint64_t a9, _BYTE *a10, _BYTE *a11, _BYTE *a12, _BYTE *a13, _BYTE *a14, uint64_t a15)
{
  uint64_t result;

  result = a8;
  if (*(_BYTE *)(a1 + 16)
    && *(_BYTE *)(a2 + 296)
    && *(_BYTE *)(a3 + 200)
    && *(_BYTE *)(a4 + 8)
    && *(_BYTE *)(a5 + 8)
    && a6[1]
    && a7[1]
    && *(_BYTE *)(a9 + 8)
    && a10[1]
    && a11[1]
    && a12[1]
    && a13[1]
    && a14[1]
    && *(_BYTE *)(a15 + 8))
  {
    result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEN6WebKit13FrameInfoDataENS3_15ResourceRequestEyNS5_6StringEbNS3_13FrameLoadTypeENS3_15CertificateInfoEbbbNS3_18HasInsecureContentENS3_16MouseEventPolicyENSC_8UserDataEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13EEJSB_SD_SE_ySF_bSG_SH_bbbSI_SJ_SK_EJEJEJSB_SD_SE_ySF_bSG_SH_bbbSI_SJ_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSO_IJDpT2_EEEDpOT3_(a8, (_OWORD *)a1, a2, a3, (_QWORD *)a4, (uint64_t *)a5, a6, a7, (uint64_t *)a9, a10, a11, a12, a13, a14, (uint64_t *)a15);
    *(_BYTE *)(result + 560) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEN6WebKit13FrameInfoDataENS3_15ResourceRequestEyNS5_6StringEbNS3_13FrameLoadTypeENS3_15CertificateInfoEbbbNS3_18HasInsecureContentENS3_16MouseEventPolicyENSC_8UserDataEEEC2B8sn180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13EEJSB_SD_SE_ySF_bSG_SH_bbbSI_SJ_SK_EJEJEJSB_SD_SE_ySF_bSG_SH_bbbSI_SJ_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSO_IJDpT2_EEEDpOT3_(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6, _BYTE *a7, _BYTE *a8, uint64_t *a9, _BYTE *a10, _BYTE *a11, _BYTE *a12, _BYTE *a13, _BYTE *a14, uint64_t *a15)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_OWORD *)a1 = *a2;
  std::__tuple_leaf<0ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>(a1 + 16, a3);
  std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>(a1 + 312, a4);
  *(_QWORD *)(a1 + 512) = *a5;
  v21 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 520) = v21;
  *(_BYTE *)(a1 + 528) = *a7;
  *(_BYTE *)(a1 + 529) = *a8;
  v22 = *a9;
  *a9 = 0;
  *(_QWORD *)(a1 + 536) = v22;
  *(_BYTE *)(a1 + 544) = *a10;
  *(_BYTE *)(a1 + 545) = *a11;
  *(_BYTE *)(a1 + 546) = *a12;
  *(_BYTE *)(a1 + 547) = *a13;
  *(_BYTE *)(a1 + 548) = *a14;
  v23 = *a15;
  if (*a15)
    CFRetain(*(CFTypeRef *)(v23 + 8));
  *(_QWORD *)(a1 + 552) = v23;
  return a1;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebKit::FrameInfoData,WebCore::ResourceRequest,unsigned long long,WTF::String,BOOL,WebCore::FrameLoadType,WebCore::CertificateInfo,BOOL,BOOL,BOOL,WebCore::HasInsecureContent,WebCore::MouseEventPolicy,WebKit::UserData>::~__tuple_impl(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  const void *v4;
  WTF::StringImpl *v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  const void *v10;
  char v12;

  v3 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 552) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = *(const void **)(a1 + 536);
  *(_QWORD *)(a1 + 536) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(WTF::StringImpl **)(a1 + 520);
  *(_QWORD *)(a1 + 520) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(const void **)(a1 + 504);
  *(_QWORD *)(a1 + 504) = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 312));
  v8 = *(WTF::StringImpl **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(unsigned int *)(a1 + 248);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, uint64_t))off_1E34D1268[v9])(&v12, a1 + 224);
  *(_DWORD *)(a1 + 248) = -1;
  v10 = *(const void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v10)
    CFRelease(v10);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 24));
  return a1;
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WebCore::ResourceRequestBase *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[232])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WebCore::ResourceRequestBase *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceRequestBase *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WebCore::ResourceRequestBase *result;
  _BYTE v5[24];

  result = (WebCore::ResourceRequestBase *)IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5);
  if (v5[16])
    return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)v5, a2);
  *a2 = 0;
  a2[232] = 0;
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v7;
  WebCore::ResourceRequestBase *result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _BYTE *v13;
  _BYTE *v14;
  _QWORD v15[2];

  v3 = a1[1];
  v4 = *a1;
  v5 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v3 >= v5 && v3 - v5 > 7)
  {
    v7 = (_QWORD *)(v4 + v5);
    a1[2] = (uint64_t)(v7 + 1);
    if (v4)
    {
      v15[0] = *v7;
      v15[1] = 1;
      return IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long>(a1, a2, (uint64_t)v15, a3);
    }
    v9 = v3;
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v12 = a1;
      v14 = a3;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v4, v3);
        a1 = v12;
        a3 = v14;
        v10 = *v12;
        v9 = v12[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  result = (WebCore::ResourceRequestBase *)a1[3];
  if (result)
  {
    if (v9)
    {
      v13 = a3;
      result = (WebCore::ResourceRequestBase *)(*(uint64_t (**)(WebCore::ResourceRequestBase *, uint64_t))(*(_QWORD *)result + 16))(result, v10);
      a3 = v13;
    }
  }
  *a3 = 0;
  a3[232] = 0;
  return result;
}

WebCore::ResourceRequestBase *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v9[208];

  IPC::Decoder::decode<WebCore::ResourceRequest>(a1, (uint64_t)v9);
  if (v9[200])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest>(a1, a2, a3, (uint64_t)v9, a4);
  }
  else
  {
    *a4 = 0;
    a4[232] = 0;
  }
  return std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v9);
}

void IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char v11;

  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v10);
  if (v11)
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>(a2, a3, a4, (uint64_t)&v10, (uint64_t)a5);
    if (v11)
    {
      v9 = v10;
      v10 = 0;
      if (v9)
        CFRelease(*(CFTypeRef *)(v9 + 8));
    }
  }
  else
  {
    *a5 = 0;
    a5[232] = 0;
  }
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>,void>::decode<IPC::Decoder,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result;

  result = a5;
  if (*(_BYTE *)(a1 + 16) && *(_BYTE *)(a2 + 8) && *(_BYTE *)(a3 + 200) && *(_BYTE *)(a4 + 8))
  {
    result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEyNS3_15ResourceRequestEN6WebKit8UserDataEEEC2B8sn180100IJLm0ELm1ELm2ELm3EEJSB_ySC_SE_EJEJEJSB_ySC_SE_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSI_IJDpT2_EEEDpOT3_(a5, (_OWORD *)a1, (_QWORD *)a2, a3, (uint64_t *)a4);
    *(_BYTE *)(result + 232) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJN7WebCore16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS3_19FrameIdentifierTypeENS5_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEyNS3_15ResourceRequestEN6WebKit8UserDataEEEC2B8sn180100IJLm0ELm1ELm2ELm3EEJSB_ySC_SE_EJEJEJSB_ySC_SE_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSI_IJDpT2_EEEDpOT3_(uint64_t a1, _OWORD *a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;

  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = *a3;
  std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>(a1 + 24, a4);
  v7 = *a5;
  if (v7)
    CFRetain(*(CFTypeRef *)(v7 + 8));
  *(_QWORD *)(a1 + 224) = v7;
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,unsigned long long,WebCore::ResourceRequest,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  if (*(_BYTE *)(a1 + 232))
  {
    v2 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 224) = 0;
    if (v2)
      CFRelease(*(CFTypeRef *)(v2 + 8));
    v3 = *(const void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;
    if (v3)
      CFRelease(v3);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 24));
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy46RequestPasswordForQuickLookDocumentInMainFrameEN6WebKit20ProvisionalPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D14A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy46RequestPasswordForQuickLookDocumentInMainFrameEN6WebKit20ProvisionalPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34D14A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy46RequestPasswordForQuickLookDocumentInMainFrameEN6WebKit20ProvisionalPageProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvSB_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3293;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[112])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  _BYTE v6[104];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  IPC::Decoder::decode<WebCore::ContentFilterUnblockHandler>(a1, (uint64_t)v6);
  if (v6[96])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder,WebCore::ContentFilterUnblockHandler>(a1, (uint64_t)v6, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[112] = 0;
  }
  return std::__optional_destruct_base<WebCore::ContentFilterUnblockHandler,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ContentFilterUnblockHandler>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ContentFilterUnblockHandler,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 96))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::decode<IPC::Decoder,WebCore::ContentFilterUnblockHandler>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  char v6;
  __int128 v7;
  char v8;

  result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(a1, (uint64_t)&v7);
  v6 = v8;
  if (!v8)
  {
    *(_BYTE *)a3 = 0;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a2 + 96))
  {
    result = std::__tuple_leaf<0ul,WebCore::ContentFilterUnblockHandler,false>::__tuple_leaf[abi:sn180100]<WebCore::ContentFilterUnblockHandler,void>(a3, (uint64_t *)a2);
    *(_OWORD *)(a3 + 96) = v7;
    v6 = 1;
LABEL_5:
    *(_BYTE *)(a3 + 112) = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t std::__tuple_leaf<0ul,WebCore::ContentFilterUnblockHandler,false>::__tuple_leaf[abi:sn180100]<WebCore::ContentFilterUnblockHandler,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  v5 = a1 + 48;
  v6 = WTF::URL::URL(a1 + 8, a2 + 1);
  v7 = (uint64_t *)a2[9];
  if (v7)
  {
    if (v7 == a2 + 6)
    {
      *(_QWORD *)(a1 + 72) = v5;
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)a2[9] + 24))(a2[9], v5, v6);
    }
    else
    {
      *(_QWORD *)(a1 + 72) = v7;
      a2[9] = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 72) = 0;
  }
  v8 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(a1 + 80) = v8;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::ContentFilterUnblockHandler,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  _QWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (!*(_BYTE *)(a1 + 96))
    return a1;
  v3 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(_QWORD **)(a1 + 72);
  if (v4 == (_QWORD *)(a1 + 48))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 48);
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  v6 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ContentFilterUnblockHandler,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  _QWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (!*(_BYTE *)(a1 + 112))
    return a1;
  v3 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(_QWORD **)(a1 + 72);
  if (v4 == (_QWORD *)(a1 + 48))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 48);
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  v6 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19BackForwardGoToItemEN6WebKit20ProvisionalPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D14D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19BackForwardGoToItemEN6WebKit20ProvisionalPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34D14D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy19BackForwardGoToItemEN6WebKit20ProvisionalPageProxyES8_FvRKN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_29BackForwardItemIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_17CompletionHandlerIFvRKNS7_24WebBackForwardListCountsEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSM_EE4callESM_(uint64_t a1, _DWORD *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit20ProvisionalPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D14F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit20ProvisionalPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34D14F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit20ProvisionalPageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit15RemotePageProxyES8_FvONS7_13FrameInfoDataEyRKN7WebCore16ResourceResponseERKNSB_15ResourceRequestEbRKNS_6StringEbNSB_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D1520;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit15RemotePageProxyES8_FvONS7_13FrameInfoDataEyRKN7WebCore16ResourceResponseERKNSB_15ResourceRequestEbRKNS_6StringEbNSB_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34D1520;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy23DecidePolicyForResponseEN6WebKit15RemotePageProxyES8_FvONS7_13FrameInfoDataEyRKN7WebCore16ResourceResponseERKNSB_15ResourceRequestEbRKNS_6StringEbNSB_28CrossOriginOpenerPolicyValueEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3274;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit15RemotePageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D1548;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit15RemotePageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(unsigned __int8 ***a1)
{
  void *v2;

  *a1 = (unsigned __int8 **)off_1E34D1548;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12WebPageProxy36DecidePolicyForNavigationActionAsyncEN6WebKit15RemotePageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 3272;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode((IPC::Encoder *)v5, a2);
  IPC::Connection::sendMessageImpl(*(_QWORD *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::String,WebKit::UserData>>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  IPC::ArgumentCoder<std::tuple<WTF::String,WebKit::UserData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    v4 = *a1;
    v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v6 = a1[3];
    if (v6)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v4);
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WebKit::UserData>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  IPC::Decoder::decode<WTF::String>(a1, &v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WebKit::UserData>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      v5 = v6;
      v6 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::String,WebKit::UserData>,void>::decode<IPC::Decoder,WTF::String>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;

  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v6);
  if (v7)
  {
    IPC::ArgumentCoder<std::tuple<WTF::String,WebKit::UserData>,void>::decode<IPC::Decoder,WTF::String,WebKit::UserData>(a2, &v6, (uint64_t)a3);
    if (v7)
    {
      v5 = v6;
      v6 = 0;
      if (v5)
        CFRelease(*(CFTypeRef *)(v5 + 8));
    }
  }
  else
  {
    *a3 = 0;
    a3[16] = 0;
  }
}

CFTypeRef IPC::ArgumentCoder<std::tuple<WTF::String,WebKit::UserData>,void>::decode<IPC::Decoder,WTF::String,WebKit::UserData>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef result;

  if (*((_BYTE *)a1 + 8) && *((_BYTE *)a2 + 8))
  {
    v4 = *a1;
    *a1 = 0;
    *(_QWORD *)a3 = v4;
    v5 = *a2;
    if (*a2)
      result = CFRetain(*(CFTypeRef *)(v5 + 8));
    *(_QWORD *)(a3 + 8) = v5;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::String,WebKit::UserData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      CFRelease(*(CFTypeRef *)(v3 + 8));
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit15RemotePageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D1570;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit15RemotePageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E34D1570;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(a1 + 8), 0);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEN6WebKit15RemotePageProxyES8_FvONS7_20NavigationActionDataEONS_17CompletionHandlerIFvONS7_14PolicyDecisionEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

void sub_1972ED4D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1972ED5B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1972ED6D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1972ED7D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::toWKDOMNode(WebKit *this, WebCore::Node *a2)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WebKit *v8;
  int v9;
  uint64_t v10;
  const void *v11;
  unsigned int v12;
  objc_class *v13;

  if ((_MergedGlobals_87 & 1) != 0)
  {
    if (!this)
      return 0;
  }
  else
  {
    qword_1ECE72CF0 = 0;
    _MergedGlobals_87 = 1;
    if (!this)
      return 0;
  }
  if (qword_1ECE72CF0)
  {
    v3 = *(_DWORD *)(qword_1ECE72CF0 - 8);
    v4 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(WebKit **)(qword_1ECE72CF0 + 16 * v7);
    if (v8 == this)
    {
LABEL_8:
      v10 = qword_1ECE72CF0 + 16 * v7;
      v11 = *(const void **)(v10 + 8);
      if (v11)
      {
        CFRetain(*(CFTypeRef *)(v10 + 8));
        return (id)CFMakeCollectable(v11);
      }
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(WebKit **)(qword_1ECE72CF0 + 16 * v7);
        ++v9;
        if (v8 == this)
          goto LABEL_8;
      }
    }
  }
  v12 = (*((unsigned __int16 *)this + 14) >> 12) - 1;
  if (v12 <= 0xA && ((0x7CFu >> v12) & 1) != 0)
    v13 = (objc_class *)objc_opt_class();
  else
    v13 = 0;
  v11 = (const void *)objc_msgSend([v13 alloc], "_initWithImpl:", this);
  if (v11)
    return (id)CFMakeCollectable(v11);
  return 0;
}

CFTypeRef WebKit::toWKDOMRange(WebKit *this, WebCore::Range *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WebKit *v7;
  int v8;
  uint64_t v9;
  id v10;

  if ((byte_1ECE72CE9 & 1) != 0)
  {
    if (!this)
      return 0;
  }
  else
  {
    qword_1ECE72CF8 = 0;
    byte_1ECE72CE9 = 1;
    if (!this)
      return 0;
  }
  if (qword_1ECE72CF8)
  {
    v2 = *(_DWORD *)(qword_1ECE72CF8 - 8);
    v3 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(WebKit **)(qword_1ECE72CF8 + 16 * v6);
    if (v7 == this)
    {
LABEL_8:
      v9 = qword_1ECE72CF8 + 16 * v6;
      v10 = *(id *)(v9 + 8);
      if (v10)
      {
        CFRetain(*(CFTypeRef *)(v9 + 8));
        return (id)CFMakeCollectable(v10);
      }
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(WebKit **)(qword_1ECE72CF8 + 16 * v6);
        ++v8;
        if (v7 == this)
          goto LABEL_8;
      }
    }
  }
  v10 = -[WKDOMRange _initWithImpl:]([WKDOMRange alloc], "_initWithImpl:", this);
  if (v10)
    return (id)CFMakeCollectable(v10);
  return 0;
}

void sub_1972EDC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void sub_1972EDDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9)
{
  if (a9)
  {
    if (*((_DWORD *)a9 + 6) == 2)
    {
      if ((*((_WORD *)a9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a9);
    }
    else
    {
      *((_DWORD *)a9 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1972EDFC8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15)
{
  WTF *v16;

  v16 = a14;
  if (a14)
  {
    a14 = 0;
    a15 = 0;
    WTF::fastFree(v16, a2);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a12);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a10);
  _Unwind_Resume(a1);
}

uint64_t WTF::createNSArray<WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  const IntRect *v5;
  uint64_t v6;
  void *v7;
  WebCore *v8;
  uint64_t v9;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a2 + 12));
  *a1 = result;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = (void *)result;
    v8 = *(WebCore **)a2;
    v9 = 16 * v6;
    do
    {
      result = WebCore::makeNSArrayElement(v8, v5);
      if (result)
        result = objc_msgSend(v7, "addObject:", result);
      v8 = (WebCore *)((char *)v8 + 16);
      v9 -= 16;
    }
    while (v9);
  }
  return result;
}

void sub_1972EE080(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void sub_1972EE34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10)
{
  if (a10)
  {
    if (a10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a10 + 8))(a10);
    else
      --a10[2];
  }
  _Unwind_Resume(exception_object);
}

void sub_1972EE404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void sub_1972EE4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1972EE568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1972EE718(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a13);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a11);
  _Unwind_Resume(a1);
}

void sub_1972EE828(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a10)
    WTF::fastFree(a10, a2);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a15);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a13);
  _Unwind_Resume(a1);
}

void sub_1972EE9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, uint64_t a10, WebCore::Node *a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t *v14;
  uint64_t v15;

  if (a11)
  {
    if (*((_DWORD *)a11 + 2) == 1)
      (*(void (**)(WebCore::Node *))(*(_QWORD *)a11 + 8))(a11);
    else
      --*((_DWORD *)a11 + 2);
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a14);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v14);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v15 - 64));
  _Unwind_Resume(a1);
}

void sub_1972EEBC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1972EEC94(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  WTF *v11;

  WTF::fastFree(v11, a2);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a11);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a9);
  _Unwind_Resume(a1);
}

void sub_1972EEDA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _DWORD *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v4 = *(_DWORD **)(v2 - 24);
  *(_QWORD *)(v2 - 24) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)va1);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1972EF0E4(_Unwind_Exception *a1, _DWORD *a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (a2)
  {
    if (a2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 8))(a2);
    else
      --a2[2];
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<WebCore::TextIterator>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    v4 = (WTF *)MEMORY[0x19AEAD924]();
    return WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t willDestroyPage(const OpaqueWKBundle *a1, OpaqueWKBundlePage *a2, _QWORD *a3)
{
  void *v5;
  uint64_t result;

  v5 = (void *)a3[9];
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return objc_msgSend(v5, "webProcessPlugIn:willDestroyBrowserContextController:", a3, *(_QWORD *)(-[OpaqueWKBundlePage _apiObject](a2, "_apiObject") + 8));
  return result;
}

void didStartProvisionalLoadForFrame(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didStartProvisionalLoadForFrame:", a4, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EF368(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didReceiveServerRedirectForProvisionalLoadForFrame(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didReceiveServerRedirectForProvisionalLoadForFrame:", a4, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EF3F4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didCommitLoadForFrame(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didCommitLoadForFrame:", a4, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EF480(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didFinishDocumentLoadForFrame(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didFinishDocumentLoadForFrame:", a4, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EF50C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didFailProvisionalLoadWithErrorForFrame(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a5 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didFailProvisionalLoadWithErrorForFrame:error:", a5, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8), *(_QWORD *)(objc_msgSend(a3, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EF5AC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didFailLoadWithErrorForFrame(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a5 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didFailLoadWithErrorForFrame:error:", a5, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8), *(_QWORD *)(objc_msgSend(a3, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EF64C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didSameDocumentNavigationForFrame(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  id WeakRetained;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  WeakRetained = objc_loadWeakRetained((id *)(a5 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v9 = objc_msgSend(a2, "_apiObject");
    v10 = (a3 - 1);
    if (v10 < 3)
      v11 = v10 + 1;
    else
      v11 = 0;
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didSameDocumentNavigation:forFrame:", a5, v11, *(_QWORD *)(v9 + 8));
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didSameDocumentNavigationForFrame:", a5, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8));
  }
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EF718(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didFinishLoadForFrame(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didFinishLoadForFrame:", a4, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EF7A4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didClearWindowObjectForFrame(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didClearWindowObjectForFrame:inScriptWorld:", a4, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8), *(_QWORD *)(objc_msgSend(a3, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EF844(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void globalObjectIsAvailableForFrame(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:globalObjectIsAvailableForFrame:inScriptWorld:", a4, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8), *(_QWORD *)(objc_msgSend(a3, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EF8E4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void serviceWorkerGlobalObjectIsAvailableForFrame(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:serviceWorkerGlobalObjectIsAvailableForFrame:inScriptWorld:", a4, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8), *(_QWORD *)(objc_msgSend(a3, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EF984(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void willInjectUserScriptForFrame(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:willInjectUserScriptForFrame:inScriptWorld:", a4, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8), *(_QWORD *)(objc_msgSend(a3, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EFA24(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didRemoveFrameFromHierarchy(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didRemoveFrameFromHierarchy:", a4, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EFAB0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didHandleOnloadEventsForFrame(uint64_t a1, void *a2, uint64_t a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a3 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didHandleOnloadEventsForFrame:", a3, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EFB3C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didFirstVisuallyNonEmptyLayoutForFrame(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:didFirstVisuallyNonEmptyLayoutForFrame:", a4, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EFBC8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didReachLayoutMilestone(const OpaqueWKBundlePage *a1, __int16 a2, const void **a3, id *a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(a4 + 313);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:renderingProgressDidChange:", a4, a2 & 0x1B7);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EFC50(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void *willSendRequestForFrame(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  id WeakRetained;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  WeakRetained = objc_loadWeakRetained((id *)(a6 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v12 = *(const void **)(objc_msgSend(a4, "_apiObject") + 8);
    v13 = *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8);
    if (a5)
      v14 = objc_msgSend(a5, "_apiObject");
    else
      v14 = 0;
    v15 = (void *)objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:frame:willSendRequestForResource:request:redirectResponse:", a6, v13, a3, v12, WebCore::ResourceResponse::nsURLResponse((WebCore::ResourceResponse *)(v14 + 16)));
    v16 = v15;
    if (v15)
    {
      CFRetain(v15);
      if (v16 != v12)
        goto LABEL_14;
LABEL_15:
      CFRelease(v12);
      goto LABEL_16;
    }
    goto LABEL_11;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v12 = *(const void **)(objc_msgSend(a4, "_apiObject") + 8);
    v17 = *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8);
    if (a5)
      v18 = objc_msgSend(a5, "_apiObject");
    else
      v18 = 0;
    v19 = (void *)objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:frame:willSendRequest:redirectResponse:", a6, v17, v12, WebCore::ResourceResponse::nsURLResponse((WebCore::ResourceResponse *)(v18 + 16)));
    v16 = v19;
    if (v19)
    {
      CFRetain(v19);
      if (v16 != v12)
      {
LABEL_14:
        a4 = (void *)WKURLRequestCreateWithNSURLRequest(v16);
        CFRelease(v16);
        goto LABEL_17;
      }
      goto LABEL_15;
    }
LABEL_11:
    if (v12)
    {
      a4 = 0;
      goto LABEL_17;
    }
  }
LABEL_16:
  CFRetain(*(CFTypeRef *)(objc_msgSend(a4, "_apiObject") + 8));
LABEL_17:
  if (WeakRetained)
    CFRelease(WeakRetained);
  return a4;
}

void sub_1972EFE00(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void didInitiateLoadForResource(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a6 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:frame:didInitiateLoadForResource:request:pageIsProvisionallyLoading:", a6, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8), a3, *(_QWORD *)(objc_msgSend(a4, "_apiObject") + 8), a5);
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:frame:didInitiateLoadForResource:request:", a6, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8), a3, *(_QWORD *)(objc_msgSend(a4, "_apiObject") + 8));
  }
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EFF24(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didReceiveResponseForResource(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id WeakRetained;
  uint64_t v10;
  uint64_t v11;

  WeakRetained = objc_loadWeakRetained((id *)(a5 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v10 = *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8);
    if (a4)
      v11 = objc_msgSend(a4, "_apiObject");
    else
      v11 = 0;
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:frame:didReceiveResponse:forResource:", a5, v10, WebCore::ResourceResponse::nsURLResponse((WebCore::ResourceResponse *)(v11 + 16)), a3);
  }
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972EFFEC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didFinishLoadForResource(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a4 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:frame:didFinishLoadForResource:", a4, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8), a3);
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972F0080(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void didFailLoadForResource(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a5 + 2504));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(WeakRetained, "webProcessPlugInBrowserContextController:frame:didFailLoadForResource:error:", a5, *(_QWORD *)(objc_msgSend(a2, "_apiObject") + 8), a3, *(_QWORD *)(objc_msgSend(a4, "_apiObject") + 8));
  if (WeakRetained)
    CFRelease(WeakRetained);
}

void sub_1972F0134(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972F0248(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  uint64_t v3;

  CFRelease(*(CFTypeRef *)(v3 + 8));
  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1972F0378(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  uint64_t v3;

  CFRelease(*(CFTypeRef *)(v3 + 8));
  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t API::InjectedBundle::FormClient::shouldPerformActionInTextField()
{
  return 0;
}

void sub_1972F0560(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  const void *v3;
  uint64_t v4;

  CFRelease(*(CFTypeRef *)(v4 + 8));
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1972F0720(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  const void *v3;
  uint64_t v4;

  CFRelease(*(CFTypeRef *)(v4 + 8));
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1972F0874(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  const void *v3;

  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1972F0940(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_1972F0AA4(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;
  uint64_t v3;

  CFRelease(*(CFTypeRef *)(v3 + 8));
  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t API::InjectedBundle::EditorClient::shouldBeginEditing()
{
  return 1;
}

uint64_t API::InjectedBundle::EditorClient::shouldEndEditing()
{
  return 1;
}

uint64_t API::InjectedBundle::EditorClient::shouldInsertNode()
{
  return 1;
}

void sub_1972F0BD4(_Unwind_Exception *a1)
{
  const void *v1;
  uint64_t v2;

  CFRelease(*(CFTypeRef *)(v2 + 8));
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t API::InjectedBundle::EditorClient::shouldDeleteRange()
{
  return 1;
}

void sub_1972F0D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;
  const void *v12;

  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t API::InjectedBundle::EditorClient::shouldApplyStyle()
{
  return 1;
}

void sub_1972F0E6C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972F0F28(_Unwind_Exception *exception_object)
{
  const void *v1;
  uint64_t v2;

  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972F1168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  uint64_t v11;

  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void sub_1972F11FC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1972F1308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  const void *v14;
  uint64_t v15;

  if (v14)
    CFRelease(v14);
  CFRelease(*(CFTypeRef *)(v15 + 8));
  if (a14)
    CFRelease(*(CFTypeRef *)(a14 + 8));
  _Unwind_Resume(a1);
}

unsigned int *WebCore::SharedBuffer::create<NSData *>@<X0>(WebCore::FragmentedSharedBuffer **a1@<X0>, NSData *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  void *v5;
  unsigned int *result;
  unsigned int *v7;

  WebCore::FragmentedSharedBuffer::create(*a1, a2);
  v4 = WTF::fastMalloc((WTF *)0x38);
  MEMORY[0x19AEAD8A0](v4, &v7);
  *a3 = v4;
  result = v7;
  v7 = 0;
  if (result)
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  return result;
}

void sub_1972F139C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  WTF *v10;
  void *v12;

  WTF::fastFree(v10, a2);
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, v12);
  _Unwind_Resume(a1);
}

_DWORD *WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WKDOMNode *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WKDOMNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::expand()
{
  int v0;

  if (qword_1ECE72CF0 && (v0 = *(_DWORD *)(qword_1ECE72CF0 - 4)) != 0)
    return WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WKDOMNode *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WKDOMNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(v0 << (6 * *(_DWORD *)(qword_1ECE72CF0 - 12) >= (2 * v0)));
  else
    return WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WKDOMNode *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WKDOMNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(8u);
}

_DWORD *WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WKDOMNode *>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WKDOMNode *,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WKDOMNode *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  v2 = qword_1ECE72CF0;
  if (qword_1ECE72CF0)
  {
    v3 = *(_DWORD *)(qword_1ECE72CF0 - 4);
    v4 = *(_DWORD *)(qword_1ECE72CF0 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE72CF0 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE72CF0 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    v8 = qword_1ECE72CF0;
    do
    {
      v9 = (_QWORD *)(v2 + 16 * v7);
      if ((unint64_t)(*v9 + 1) >= 2)
      {
        if (v8)
          v10 = *(_DWORD *)(v8 - 8);
        else
          v10 = 0;
        v11 = (~(*v9 << 32) + *v9) ^ ((~(*v9 << 32) + *v9) >> 22);
        v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((unint64_t)(v11 + ~(v11 << 13)) >> 8));
        v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
        v14 = v10 & ((v13 >> 31) ^ v13);
        v15 = 1;
        do
        {
          v16 = v14;
          v17 = *(_QWORD *)(v8 + 16 * v14);
          v14 = (v14 + v15++) & v10;
        }
        while (v17);
        *(_OWORD *)(v8 + 16 * v16) = *(_OWORD *)v9;
      }
      ++v7;
    }
    while (v7 != v3);
  }
  else if (!v2)
  {
    return result;
  }
  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

_DWORD *WTF::HashTable<WebCore::Range *,WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>>,WTF::DefaultHash<WebCore::Range *>,WTF::HashMap<WebCore::Range *,WKDOMRange *,WTF::DefaultHash<WebCore::Range *>,WTF::HashTraits<WebCore::Range *>,WTF::HashTraits<WKDOMRange *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Range *>>::expand()
{
  int v0;

  if (qword_1ECE72CF8 && (v0 = *(_DWORD *)(qword_1ECE72CF8 - 4)) != 0)
    return WTF::HashTable<WebCore::Range *,WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>>,WTF::DefaultHash<WebCore::Range *>,WTF::HashMap<WebCore::Range *,WKDOMRange *,WTF::DefaultHash<WebCore::Range *>,WTF::HashTraits<WebCore::Range *>,WTF::HashTraits<WKDOMRange *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Range *>>::rehash(v0 << (6 * *(_DWORD *)(qword_1ECE72CF8 - 12) >= (2 * v0)));
  else
    return WTF::HashTable<WebCore::Range *,WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>>,WTF::DefaultHash<WebCore::Range *>,WTF::HashMap<WebCore::Range *,WKDOMRange *,WTF::DefaultHash<WebCore::Range *>,WTF::HashTraits<WebCore::Range *>,WTF::HashTraits<WKDOMRange *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Range *>>::rehash(8u);
}

_DWORD *WTF::HashTable<WebCore::Range *,WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Range *,WKDOMRange *>>,WTF::DefaultHash<WebCore::Range *>,WTF::HashMap<WebCore::Range *,WKDOMRange *,WTF::DefaultHash<WebCore::Range *>,WTF::HashTraits<WebCore::Range *>,WTF::HashTraits<WKDOMRange *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Range *>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  v2 = qword_1ECE72CF8;
  if (qword_1ECE72CF8)
  {
    v3 = *(_DWORD *)(qword_1ECE72CF8 - 4);
    v4 = *(_DWORD *)(qword_1ECE72CF8 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE72CF8 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE72CF8 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    v8 = qword_1ECE72CF8;
    do
    {
      v9 = (_QWORD *)(v2 + 16 * v7);
      if ((unint64_t)(*v9 + 1) >= 2)
      {
        if (v8)
          v10 = *(_DWORD *)(v8 - 8);
        else
          v10 = 0;
        v11 = (~(*v9 << 32) + *v9) ^ ((~(*v9 << 32) + *v9) >> 22);
        v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((unint64_t)(v11 + ~(v11 << 13)) >> 8));
        v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
        v14 = v10 & ((v13 >> 31) ^ v13);
        v15 = 1;
        do
        {
          v16 = v14;
          v17 = *(_QWORD *)(v8 + 16 * v14);
          v14 = (v14 + v15++) & v10;
        }
        while (v17);
        *(_OWORD *)(v8 + 16 * v16) = *(_OWORD *)v9;
      }
      ++v7;
    }
    while (v7 != v3);
  }
  else if (!v2)
  {
    return result;
  }
  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
}

uint64_t WebKit::ResponsivenessTimer::ResponsivenessTimer(uint64_t a1, uint64_t a2, double a3)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  WTF::RunLoop *v9;
  _QWORD *v10;

  v6 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v7 = *(unsigned int **)(a2 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *(_QWORD *)a1 = v7;
  v9 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v6);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E34D19C8;
  v10[1] = WebKit::ResponsivenessTimer::timerFired;
  v10[2] = 0;
  v10[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 8), v9);
  *(_QWORD *)(a1 + 8) = off_1E34ABE00;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 50) = 0;
  *(double *)(a1 + 56) = a3;
  return a1;
}

uint64_t WebKit::ResponsivenessTimer::timerFired(uint64_t this)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  char *v5;
  _BOOL4 v6;

  if (*(_BYTE *)(this + 49))
  {
    v1 = this;
    if (*(double *)(this + 40) != 0.0)
    {
      this = WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
      v2 = *(double *)(v1 + 40);
      *(_QWORD *)(v1 + 40) = 0;
      if (v2 > v3)
        return WTF::RunLoop::TimerBase::start();
    }
    *(_WORD *)(v1 + 49) = 0;
    if (*(_BYTE *)(v1 + 48))
    {
      v4 = *(_QWORD *)(*(_QWORD *)v1 + 8);
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
      if ((byte_1ECE72D01 & 1) != 0)
      {
        if (_MergedGlobals_88)
          goto LABEL_15;
      }
      else
      {
        v5 = getenv("DYLD_INSERT_LIBRARIES");
        if (v5)
          v6 = strstr(v5, "libgmalloc") != 0;
        else
          v6 = 0;
        _MergedGlobals_88 = v6;
        byte_1ECE72D01 = 1;
        if (v6)
          goto LABEL_15;
      }
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v1 + 8) + 48))(*(_QWORD *)(*(_QWORD *)v1 + 8)) & 1) != 0)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
        *(_BYTE *)(v1 + 48) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
      }
LABEL_15:
      *(_BYTE *)(v1 + 49) = 1;
      WTF::RunLoop::TimerBase::start();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
    }
  }
  return this;
}

void WebKit::SpeechRecognitionPermissionManager::~SpeechRecognitionPermissionManager(WebKit::SpeechRecognitionPermissionManager *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  WebKit::SpeechRecognitionPermissionRequest *v20;
  WebKit::SpeechRecognitionPermissionRequest **v21;
  uint64_t v22;
  WebKit::SpeechRecognitionPermissionRequest *v23;
  WebKit::SpeechRecognitionPermissionRequest **v24;
  uint64_t v25;
  WebKit::SpeechRecognitionPermissionRequest *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  char v29;

  v4 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if (v4 == v3)
  {
LABEL_2:
    v5 = (WTF *)*((_QWORD *)this + 4);
    goto LABEL_3;
  }
  do
  {
    v12 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v4);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v27;
    LOBYTE(v27) = 4;
    v28 = v13;
    v29 = 1;
    v14 = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(v12 + 16) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v27);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v29)
    {
      v15 = v28;
      v28 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, a2);
        else
          *(_DWORD *)v15 -= 2;
      }
    }
    v16 = *((unsigned int *)this + 10);
    v4 += v16 + 1;
    do
      v4 -= v16;
    while (v4 >= v16);
  }
  while (v3 != v4);
  v17 = *((_QWORD *)this + 2);
  v18 = *((_QWORD *)this + 3);
  v5 = (WTF *)*((_QWORD *)this + 4);
  if (v17 > v18)
  {
    if (v18)
    {
      v19 = 8 * v18;
      do
      {
        v20 = *(WebKit::SpeechRecognitionPermissionRequest **)v5;
        *(_QWORD *)v5 = 0;
        if (v20)
          WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(v20, a2);
        v5 = (WTF *)((char *)v5 + 8);
        v19 -= 8;
      }
      while (v19);
      v5 = (WTF *)*((_QWORD *)this + 4);
      v17 = *((_QWORD *)this + 2);
      v16 = *((unsigned int *)this + 10);
    }
    if (v17 != v16)
    {
      v21 = (WebKit::SpeechRecognitionPermissionRequest **)((char *)v5 + 8 * v17);
      v22 = 8 * v16 - 8 * v17;
      do
      {
        v23 = *v21;
        *v21 = 0;
        if (v23)
          WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(v23, a2);
        ++v21;
        v22 -= 8;
      }
      while (v22);
    }
    goto LABEL_2;
  }
  if (v17 != v18)
  {
    v24 = (WebKit::SpeechRecognitionPermissionRequest **)((char *)v5 + 8 * v17);
    v25 = 8 * v18 - 8 * v17;
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
        WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(v26, a2);
      ++v24;
      v25 -= 8;
    }
    while (v25);
    goto LABEL_2;
  }
LABEL_3:
  if (v5)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v10 = __ldaxr(v6);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v6));
    if (!v11)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v7 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void WebKit::SpeechRecognitionPermissionManager::request(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t *v4;
  WTF::StringImpl *v5;
  WebKit::SpeechRecognitionPermissionRequest *v6;
  unint64_t v7;
  unint64_t v8;
  WebKit::SpeechRecognitionPermissionRequest *v9;

  v4 = (uint64_t *)(a1 + 16);
  WebKit::SpeechRecognitionPermissionRequest::create(a2, a3, (uint64_t *)&v9);
  WTF::Deque<WTF::Ref<WebKit::SpeechRecognitionPermissionRequest,WTF::RawPtrTraits<WebKit::SpeechRecognitionPermissionRequest>,WTF::DefaultRefDerefTraits<WebKit::SpeechRecognitionPermissionRequest>>,0ul>::append(v4, (uint64_t *)&v9);
  v6 = v9;
  v9 = 0;
  if (v6)
    WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(v6, v5);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  if (v7 > v8)
    v8 += *(unsigned int *)(a1 + 40);
  if (v8 - v7 == 1)
    WebKit::SpeechRecognitionPermissionManager::startNextRequest((WebKit::SpeechRecognitionPermissionManager *)a1, v5);
}

uint64_t *WTF::Deque<WTF::Ref<WebKit::SpeechRecognitionPermissionRequest,WTF::RawPtrTraits<WebKit::SpeechRecognitionPermissionRequest>,WTF::DefaultRefDerefTraits<WebKit::SpeechRecognitionPermissionRequest>>,0ul>::append(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = result[1];
  if (*result)
  {
    if (v4 + 1 != *result)
      goto LABEL_10;
    goto LABEL_9;
  }
  v5 = *((unsigned int *)result + 6);
  if (!v4)
  {
    if ((_DWORD)v5)
    {
      v4 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v4 == v5 - 1)
  {
LABEL_9:
    result = WTF::Deque<WTF::String,0ul>::expandCapacity(result);
    v4 = v3[1];
  }
LABEL_10:
  v6 = v3[2];
  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)(v6 + 8 * v4) = v7;
  if (v4 == *((unsigned int *)v3 + 6) - 1)
    v8 = 0;
  else
    v8 = v4 + 1;
  v3[1] = v8;
  return result;
}

unsigned int *WebKit::SpeechRecognitionPermissionRequest::create@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned int *result;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v6 = 1;
  result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1, (uint64_t)a1);
  v8 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)(v6 + 8) = v8;
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)(v6 + 16) = v10;
  *a3 = v6;
  return result;
}

void WebKit::SpeechRecognitionPermissionManager::startNextRequest(WebKit::SpeechRecognitionPermissionManager *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  WebKit::SpeechRecognitionPermissionRequest *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 2);
  if (v2 != *((_QWORD *)this + 3))
  {
    while (1)
    {
      v4 = *((_QWORD *)this + 4);
      v5 = *(WebKit::SpeechRecognitionPermissionRequest **)(v4 + 8 * v2);
      v6 = *((_QWORD *)v5 + 1);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 8))
          break;
      }
      *(_QWORD *)(v4 + 8 * v2) = 0;
      WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(v5, a2);
      v7 = *((_QWORD *)this + 2);
      v8 = *((_QWORD *)this + 3);
      if (v7 == *((unsigned int *)this + 10) - 1)
        v2 = 0;
      else
        v2 = v7 + 1;
      *((_QWORD *)this + 2) = v2;
      if (v2 == v8)
        return;
    }
    WebKit::SpeechRecognitionPermissionManager::startProcessingRequest(this);
  }
}

void WebKit::SpeechRecognitionPermissionManager::startProcessingRequest(WebKit::SpeechRecognitionPermissionManager *this)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::UserMediaPermissionRequestManagerProxy *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  PAL *BoolValueForKey;
  uint64_t AVFoundation_AVMediaTypeAudio;
  uint64_t v9;
  BOOL v10;
  WebKit *v11;
  const WTF::String *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char v18[8];
  WTF::StringImpl *v19;
  char v20;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  CFRetain(*(CFTypeRef *)(v3 + 8));
  v4 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)v3);
  WebKit::UserMediaPermissionRequestManagerProxy::syncWithWebCorePrefs(v4);
  v6 = *(_QWORD *)(v3 + 224);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = (PAL *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, v5);
  if ((_DWORD)BoolValueForKey)
  {
    *((_QWORD *)this + 6) = 0x100000001;
    goto LABEL_8;
  }
  AVFoundation_AVMediaTypeAudio = PAL::get_AVFoundation_AVMediaTypeAudio(BoolValueForKey);
  v9 = objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCDFD8])(), "authorizationStatusForMediaType:", AVFoundation_AVMediaTypeAudio);
  if (v9)
  {
    *((_DWORD *)this + 12) = (unint64_t)(v9 - 3) < 0xFFFFFFFFFFFFFFFELL;
    if ((unint64_t)(v9 - 3) >= 0xFFFFFFFFFFFFFFFELL)
      goto LABEL_28;
LABEL_17:
    v11 = (WebKit *)objc_msgSend((id)((uint64_t (*)(void))*MEMORY[0x1E0DCE068])(), "authorizationStatus");
    if ((unint64_t)v11 - 1 >= 3)
    {
      if (!WebKit::checkUsageDescriptionStringForSpeechRecognition(v11))
      {
        *((_DWORD *)this + 13) = 0;
        goto LABEL_30;
      }
      *((_DWORD *)this + 13) = 2;
    }
    else
    {
      *((_DWORD *)this + 13) = v11 == (WebKit *)3;
      if (v11 != (WebKit *)3)
        goto LABEL_30;
    }
    v13 = *((_QWORD *)this + 2);
    if (v13 == *((_QWORD *)this + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1972F22ECLL);
    }
    v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * v13) + 8);
    if (v14)
      v14 = *(_QWORD *)(v14 + 8);
    if ((WebKit::checkSpeechRecognitionServiceAvailability((WebKit *)(v14 + 16), v12) & 1) != 0)
    {
LABEL_8:
      if (*((_DWORD *)this + 14))
      {
        WebKit::SpeechRecognitionPermissionManager::continueProcessingRequest(this);
        if (!v2)
          return;
        goto LABEL_36;
      }
      goto LABEL_28;
    }
LABEL_30:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = 5;
    goto LABEL_31;
  }
  if (WebKit::checkUsageDescriptionStringForType((WebKit *)1, v10))
  {
    *((_DWORD *)this + 12) = 2;
    goto LABEL_17;
  }
  *((_DWORD *)this + 12) = 0;
LABEL_28:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = 4;
LABEL_31:
  v18[0] = v15;
  v20 = 1;
  WebKit::SpeechRecognitionPermissionManager::completeCurrentRequest(this, v18);
  if (!v20 || (v17 = v19, v19 = 0, !v17))
  {
LABEL_35:
    if (!v2)
      return;
    goto LABEL_36;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_35;
  }
  WTF::StringImpl::destroy(v17, v16);
  if (v2)
LABEL_36:
    CFRelease(*(CFTypeRef *)(v2 - 8));
}

uint64_t WebKit::SpeechRecognitionPermissionManager::completeCurrentRequest(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v5;
  WebKit::SpeechRecognitionPermissionRequest *v6;
  uint64_t v7;
  WebKit::SpeechRecognitionPermissionRequest *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a1 + 24))
  {
    result = 80;
    __break(0xC471u);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(WebKit::SpeechRecognitionPermissionRequest **)(v5 + 8 * v2);
    *(_QWORD *)(v5 + 8 * v2) = 0;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(WebKit::SpeechRecognitionPermissionRequest **)(v7 + 8 * v2);
    *(_QWORD *)(v7 + 8 * v2) = 0;
    if (v8)
    {
      WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(v8, a2);
      v2 = *(_QWORD *)(a1 + 16);
    }
    if (v2 == *(unsigned int *)(a1 + 40) - 1)
      v9 = 0;
    else
      v9 = v2 + 1;
    *(_QWORD *)(a1 + 16) = v9;
    v10 = *((_QWORD *)v6 + 2);
    *((_QWORD *)v6 + 2) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v10 + 16))(v10, a2);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    WebKit::SpeechRecognitionPermissionManager::startNextRequest((WebKit::SpeechRecognitionPermissionManager *)a1, v11);
    return (uint64_t)WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(v6, v12);
  }
  return result;
}

WTF::StringImpl *WebKit::SpeechRecognitionPermissionManager::continueProcessingRequest(WebKit::SpeechRecognitionPermissionManager *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  CFTypeRef *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  WTF::StringImpl *v27;
  _QWORD *v28;
  WTF *v29;
  WTF *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  char v33;
  int v34;
  _BYTE v35[24];
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 2);
  if (v1 == *((_QWORD *)this + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x1972F2764);
  }
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * v1) + 8);
  if (!v3)
    goto LABEL_39;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_39;
  if (*((_DWORD *)this + 13) == 2)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
    v5 = *(unsigned int **)this;
    if (*(_QWORD *)this)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v7 = &off_1E34D19F0;
    *((_QWORD *)v7 + 1) = this;
    *((_QWORD *)v7 + 2) = v5;
    v31 = v7;
    WebKit::requestSpeechRecognitionAccess((uint64_t *)&v31);
LABEL_12:
    result = v31;
    if (v31)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v31 + 8))(v31);
    return result;
  }
  if (*((_DWORD *)this + 12) == 2)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
    v8 = *(unsigned int **)this;
    if (*(_QWORD *)this)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v10 = &off_1E34D1A18;
    *((_QWORD *)v10 + 1) = this;
    *((_QWORD *)v10 + 2) = v8;
    v31 = v10;
    WebKit::requestAVCaptureAccessForType((PAL *)1, (uint64_t *)&v31);
    goto LABEL_12;
  }
  if (*((_DWORD *)this + 14) == 2)
  {
    LOBYTE(v31) = 0;
    v34 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&v31, v4 + 40);
    v35[0] = 0;
    v36 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v35, v4 + 72);
    WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)v35);
    WebCore::SecurityOriginData::securityOrigin((WebCore::SecurityOriginData *)&v31);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this, (uint64_t)this);
    v12 = *(unsigned int **)this;
    if (*(_QWORD *)this)
    {
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
    v14 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    if (v14)
      v15 = (CFTypeRef *)(v14 - 16);
    else
      v15 = 0;
    CFRetain(v15[1]);
    v16 = *(_QWORD *)(v4 + 104);
    v17 = *(_QWORD *)(v4 + 112);
    v19 = v29;
    v18 = v30;
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v20 = &off_1E34D1A40;
    v20[1] = this;
    v20[2] = v12;
    v28 = v20;
    WebKit::WebPageProxy::requestUserMediaPermissionForSpeechRecognition((WebCore::SpeechRecognitionCaptureSource *)v15, v16, v17, v18, (uint64_t)v19, (uint64_t *)&v28);
    v22 = (uint64_t)v28;
    v28 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if (v14)
      CFRelease(*(CFTypeRef *)(v14 - 8));
    v23 = v29;
    v29 = 0;
    if (v23)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v23, v21);
    result = v30;
    v30 = 0;
    if (result)
      result = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)result, v21);
    if (v36 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(WTF **, _BYTE *))off_1E34D1928[v36])(&v30, v35);
    v36 = -1;
    if (v34 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E34D1928[v34])(&v30, &v31);
    return result;
  }
  v24 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (v24)
    v25 = v24 - 16;
  else
    v25 = 0;
  CFRetain(*(CFTypeRef *)(v25 + 8));
  v26 = *(_WORD *)(*(_QWORD *)(v25 + 32) + 48);
  if (v24)
    CFRelease(*(CFTypeRef *)(v24 - 8));
  if ((v26 & 4) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v31) = 4;
    v33 = 1;
  }
  else
  {
LABEL_39:
    LOBYTE(v31) = 0;
    v33 = 0;
  }
  result = (WTF::StringImpl *)WebKit::SpeechRecognitionPermissionManager::completeCurrentRequest(this, &v31);
  if (v33)
  {
    result = v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::generate()
{
  uint64_t result;

  if (!WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    return WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  result = 142;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSource::SpeechRecognitionRemoteRealtimeMediaSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  WTF::ThreadSafeWeakPtrControlBlock *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  IPC::Encoder *v38;
  WTF *v39;
  void *v40;
  WTF::StringImpl *v42[2];
  uint64_t v43;
  uint64_t v44;

  WebCore::RealtimeMediaSource::RealtimeMediaSource();
  v42[1] = 0;
  v42[0] = 0;
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v8 = 0;
  *(_OWORD *)(v8 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)a1 = off_1E34D1750;
  *(_QWORD *)(a1 + 304) = v8;
  *(_QWORD *)(a1 + 312) = a2;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v10 = *(_QWORD *)(a3 + 8);
  if (v10)
  {
    do
      v11 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v11 + 1, (unsigned int *)v10));
  }
  *(_QWORD *)(a1 + 320) = v10;
  *(_BYTE *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_QWORD *)(a1 + 510) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 525) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_WORD *)(a1 + 584) = 4;
  *(_BYTE *)(a1 + 586) = 0;
  *(_QWORD *)(a1 + 592) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 614) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_BYTE *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  if (v10)
    v12 = *(_QWORD *)(v10 + 8);
  else
    v12 = 0;
  v13 = *(_QWORD *)(a1 + 312);
  v44 = v13;
  v15 = (uint64_t *)(v12 + 32);
  v14 = *(_QWORD *)(v12 + 32);
  if (v14
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(v12 + 32)),
        (v14 = *v15) != 0))
  {
    v16 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v16 & ((v19 >> 31) ^ v19);
  v21 = (uint64_t *)(v14 + 24 * v20);
  v22 = *v21;
  if (!*v21)
  {
LABEL_17:
    *v21 = v13;
    v25 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 304);
    if (v25)
      v25 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v25);
    v26 = (unsigned __int8 *)v21[1];
    v21[1] = (uint64_t)v25;
    if (v26)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v26, v9);
    v21[2] = a1;
    v27 = *v15;
    if (*v15)
      v28 = *(_DWORD *)(v27 - 12) + 1;
    else
      v28 = 1;
    *(_DWORD *)(v27 - 12) = v28;
    v29 = *v15;
    if (*v15)
      v30 = *(_DWORD *)(v29 - 12);
    else
      v30 = 0;
    v31 = (*(_DWORD *)(v29 - 16) + v30);
    v32 = *(unsigned int *)(v29 - 4);
    if (v32 > 0x400)
    {
      if (v32 > 2 * v31)
        goto LABEL_30;
    }
    else if (3 * v32 > 4 * v31)
    {
      goto LABEL_30;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(v12 + 32));
    goto LABEL_30;
  }
  v23 = 0;
  v24 = 1;
  while (v22 != v13)
  {
    if (v22 == -1)
      v23 = v21;
    v20 = (v20 + v24) & v16;
    v21 = (uint64_t *)(v14 + 24 * v20);
    v22 = *v21;
    ++v24;
    if (!*v21)
    {
      if (v23)
      {
        *v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
        --*(_DWORD *)(*v15 - 16);
        v21 = v23;
      }
      goto LABEL_17;
    }
  }
LABEL_30:
  v43 = *(_QWORD *)(a1 + 72);
  v34 = *(_QWORD *)(v12 + 16);
  v33 = v12 + 16;
  v35 = (*(uint64_t (**)(uint64_t))(v34 + 56))(v33);
  v36 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v36 = 1447;
  *(_QWORD *)(v36 + 8) = v35;
  *(_QWORD *)(v36 + 528) = v36 + 16;
  *(_QWORD *)(v36 + 536) = v36 + 16;
  *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v36 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
  v42[0] = (WTF::StringImpl *)v36;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v36, &v44);
  IPC::ArgumentCoder<WebCore::CaptureDevice,void>::encode((IPC::Encoder *)v36, a4);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v36, &v43);
  (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v33 + 32))(v33, v42, 0);
  v38 = v42[0];
  v42[0] = 0;
  if (v38)
  {
    IPC::Encoder::~Encoder(v38, v37);
    WTF::fastFree(v39, v40);
  }
  return a1;
}

void WebKit::SpeechRecognitionRemoteRealtimeMediaSource::~SpeechRecognitionRemoteRealtimeMediaSource(WebKit::SpeechRecognitionRemoteRealtimeMediaSource *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  IPC::Encoder *v28;
  WTF *v29;
  void *v30;
  WTF *v31;
  WebCore::CARingBuffer *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  void *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  IPC::Encoder *v41;

  *(_QWORD *)this = off_1E34D1750;
  v3 = *((_QWORD *)this + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *((_QWORD *)this + 39);
      v40 = v5;
      v7 = (uint64_t *)(v4 + 32);
      v6 = *(_QWORD *)(v4 + 32);
      if (v6)
      {
        v8 = *(_DWORD *)(v6 - 8);
        v9 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        v13 = (uint64_t *)(v6 + 24 * v12);
        v14 = *v13;
        if (*v13 != v5)
        {
          v15 = 1;
          while (v14)
          {
            v12 = (v12 + v15) & v8;
            v13 = (uint64_t *)(v6 + 24 * v12);
            v14 = *v13;
            ++v15;
            if (*v13 == v5)
              goto LABEL_10;
          }
          v13 = (uint64_t *)(v6 + 24 * *(unsigned int *)(v6 - 4));
        }
LABEL_10:
        if ((uint64_t *)(v6 + 24 * *(unsigned int *)(v6 - 4)) != v13)
        {
          v16 = (unsigned __int8 *)v13[1];
          *v13 = -1;
          v13[1] = 0;
          if (v16)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v16, a2);
          ++*(_DWORD *)(*v7 - 16);
          v17 = *v7;
          if (*v7)
            v18 = *(_DWORD *)(v17 - 12) - 1;
          else
            v18 = -1;
          *(_DWORD *)(v17 - 12) = v18;
          v19 = *v7;
          if (*v7)
          {
            v20 = 6 * *(_DWORD *)(v19 - 12);
            v21 = *(_DWORD *)(v19 - 4);
            if (v20 < v21 && v21 >= 9)
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(v4 + 32), v21 >> 1);
          }
        }
      }
      v24 = *(_QWORD *)(v4 + 16);
      v23 = v4 + 16;
      v25 = (*(uint64_t (**)(uint64_t))(v24 + 56))(v23);
      v26 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v26 = 1448;
      *(_QWORD *)(v26 + 8) = v25;
      *(_QWORD *)(v26 + 528) = v26 + 16;
      *(_QWORD *)(v26 + 536) = v26 + 16;
      *(_OWORD *)(v26 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v26 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v26);
      v41 = (IPC::Encoder *)v26;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v26, &v40);
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v23 + 32))(v23, &v41, 0);
      v28 = v41;
      v41 = 0;
      if (v28)
      {
        IPC::Encoder::~Encoder(v28, v27);
        WTF::fastFree(v29, v30);
      }
    }
  }
  v31 = (WTF *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v31)
    std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100]((_DWORD)this + 720, v31);
  v32 = (WebCore::CARingBuffer *)*((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v32)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((_DWORD)this + 712, v32);
  if (*((_BYTE *)this + 704))
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::SpeechRecognitionRemoteRealtimeMediaSource *)((char *)this + 624));
  v33 = (WTF::StringImpl *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v32);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = (WTF::StringImpl *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v32);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = (WTF::StringImpl *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v32);
    else
      *(_DWORD *)v35 -= 2;
  }
  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebKit::SpeechRecognitionRemoteRealtimeMediaSource *)((char *)this + 328), v32);
  v37 = (unsigned int *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v37)
  {
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v37);
      WTF::fastFree((WTF *)v37, v36);
    }
  }
  WebCore::RealtimeMediaSource::~RealtimeMediaSource(this);
}

{
  WTF *v2;
  void *v3;

  WebKit::SpeechRecognitionRemoteRealtimeMediaSource::~SpeechRecognitionRemoteRealtimeMediaSource(this, a2);
  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::SpeechRecognitionRemoteRealtimeMediaSource::startProducingData(IPC::Encoder *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v1 = *((_QWORD *)this + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (uint64_t *)((char *)this + 312);
      v5 = *(_QWORD *)(v2 + 16);
      v4 = v2 + 16;
      v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 1449;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v11 = (IPC::Encoder *)v7;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, v3);
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v11, 0);
      this = v11;
      v11 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder(this, v8);
        return (IPC::Encoder *)WTF::fastFree(v9, v10);
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::SpeechRecognitionRemoteRealtimeMediaSource::stopProducingData(IPC::Encoder *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v1 = *((_QWORD *)this + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (uint64_t *)((char *)this + 312);
      v5 = *(_QWORD *)(v2 + 16);
      v4 = v2 + 16;
      v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 1450;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v11 = (IPC::Encoder *)v7;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, v3);
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, &v11, 0);
      this = v11;
      v11 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder(this, v8);
        return (IPC::Encoder *)WTF::fastFree(v9, v10);
      }
    }
  }
  return this;
}

void WebKit::SpeechRecognitionRemoteRealtimeMediaSource::setStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF **v5;
  WTF *v6;
  WebCore::CARingBuffer *v7;
  WebCore::CARingBuffer *v8;
  WebCore::CARingBuffer *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WebCore::CARingBuffer *v19;

  v5 = (WTF **)(a1 + 720);
  v6 = *(WTF **)(a1 + 720);
  *(_QWORD *)(a1 + 720) = 0;
  if (v6)
    std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100](a1 + 720, v6);
  WebKit::ConsumerSharedCARingBuffer::map((WebCore::CAAudioStreamDescription *)a3, &v19);
  v7 = v19;
  v19 = 0;
  v8 = *(WebCore::CARingBuffer **)(a1 + 712);
  *(_QWORD *)(a1 + 712) = v7;
  if (v8)
  {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1 + 712, v8);
    v9 = v19;
    v19 = 0;
    if (v9)
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v19, v9);
    v7 = *(WebCore::CARingBuffer **)(a1 + 712);
  }
  if (v7)
  {
    if (*(_BYTE *)(a1 + 704))
    {
      v10 = *(_OWORD *)(a3 + 8);
      v11 = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a1 + 664) = *(_QWORD *)(a3 + 40);
      *(_OWORD *)(a1 + 648) = v11;
      *(_OWORD *)(a1 + 632) = v10;
      v12 = *(_OWORD *)(a3 + 48);
      *(_QWORD *)(a1 + 688) = *(_QWORD *)(a3 + 64);
      *(_OWORD *)(a1 + 672) = v12;
      *(_DWORD *)(a1 + 696) = *(_DWORD *)(a3 + 72);
    }
    else
    {
      *(_QWORD *)(a1 + 624) = MEMORY[0x1E0DD8FD8] + 16;
      *(_OWORD *)(a1 + 632) = *(_OWORD *)(a3 + 8);
      v13 = *(_OWORD *)(a3 + 24);
      v14 = *(_OWORD *)(a3 + 40);
      v15 = *(_OWORD *)(a3 + 56);
      *(_DWORD *)(a1 + 696) = *(_DWORD *)(a3 + 72);
      *(_OWORD *)(a1 + 680) = v15;
      *(_OWORD *)(a1 + 664) = v14;
      *(_OWORD *)(a1 + 648) = v13;
      *(_BYTE *)(a1 + 704) = 1;
    }
    v16 = WTF::fastMalloc((WTF *)0x48);
    v17 = MEMORY[0x19AEB018C](v16, a3);
    v18 = *v5;
    *v5 = (WTF *)v17;
    if (v18)
      std::default_delete<WebCore::WebAudioBufferList>::operator()[abi:sn180100]((int)v5, v18);
  }
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSource::remoteAudioSamplesAvailable(uint64_t a1)
{
  WebCore::WebAudioBufferList *v2;
  uint64_t result;

  v2 = *(WebCore::WebAudioBufferList **)(a1 + 720);
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  WebCore::WebAudioBufferList::setSampleCount(v2);
  result = WebCore::CARingBuffer::fetch();
  if (*(_BYTE *)(a1 + 704))
    return WebCore::RealtimeMediaSource::audioSamplesAvailable();
  __break(1u);
  return result;
}

unsigned __int8 *WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::remoteAudioSamplesAvailable(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *result;
  void *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  WTF::ThreadSafeWeakPtrControlBlock *v6[2];
  unsigned __int8 *v7;
  uint64_t v8;

  v8 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((WTF::ThreadSafeWeakPtrControlBlock *)(a1 + 32), &v8, v6);
  result = (unsigned __int8 *)v6[0];
  if (v6[0])
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>((unsigned __int8 *)v6[0], (uint64_t)v6[1], &v7);
    v4 = (unsigned __int8 *)v6[0];
    v6[0] = 0;
    if (v4)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
    result = v7;
    if (v7)
    {
      result = (unsigned __int8 *)WebKit::SpeechRecognitionRemoteRealtimeMediaSource::remoteAudioSamplesAvailable((uint64_t)v7);
      v5 = (uint64_t)v7;
      v7 = 0;
      if (v5)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SpeechRecognitionRemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v5 + 304));
    }
  }
  return result;
}

unsigned __int8 *WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::remoteCaptureFailed(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *result;
  void *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  WTF::ThreadSafeWeakPtrControlBlock *v6[2];
  unsigned __int8 *v7;
  uint64_t v8;

  v8 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((WTF::ThreadSafeWeakPtrControlBlock *)(a1 + 32), &v8, v6);
  result = (unsigned __int8 *)v6[0];
  if (v6[0])
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>((unsigned __int8 *)v6[0], (uint64_t)v6[1], &v7);
    v4 = (unsigned __int8 *)v6[0];
    v6[0] = 0;
    if (v4)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
    result = v7;
    if (v7)
    {
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v7 + 240))(v7);
      v5 = v7;
      v7 = 0;
      if (v5)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SpeechRecognitionRemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*((unsigned __int8 **)v5 + 38));
    }
  }
  return result;
}

unsigned __int8 *WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::remoteSourceStopped(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *result;
  void *v3;
  unsigned __int8 *v4;
  WebCore::RealtimeMediaSource *v5;
  WTF::ThreadSafeWeakPtrControlBlock *v6[2];
  WebCore::RealtimeMediaSource *v7;
  uint64_t v8;

  v8 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((WTF::ThreadSafeWeakPtrControlBlock *)(a1 + 32), &v8, v6);
  result = (unsigned __int8 *)v6[0];
  if (v6[0])
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>((unsigned __int8 *)v6[0], (uint64_t)v6[1], &v7);
    v4 = (unsigned __int8 *)v6[0];
    v6[0] = 0;
    if (v4)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v4, v3);
    result = (unsigned __int8 *)v7;
    if (v7)
    {
      result = (unsigned __int8 *)WebCore::RealtimeMediaSource::stop(v7);
      v5 = v7;
      v7 = 0;
      if (v5)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SpeechRecognitionRemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*((unsigned __int8 **)v5 + 38));
    }
  }
  return result;
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::messageSenderConnection(WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t `non-virtual thunk to'WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::messageSenderConnection(WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::messageSenderDestinationID(WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::messageSenderDestinationID(WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *this)
{
  return 0;
}

void WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::setStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  WTF::ThreadSafeWeakPtrControlBlock *v9[2];
  uint64_t v10;
  uint64_t v11;

  v11 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteMediaResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((WTF::ThreadSafeWeakPtrControlBlock *)(a1 + 32), &v11, v9);
  if (v9[0])
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::RemoteMediaResource>((unsigned __int8 *)v9[0], (uint64_t)v9[1], &v10);
    v7 = (unsigned __int8 *)v9[0];
    v9[0] = 0;
    if (v7)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v7, v6);
    if (v10)
    {
      WebKit::SpeechRecognitionRemoteRealtimeMediaSource::setStorage(v10, a3, a4);
      v8 = v10;
      v10 = 0;
      if (v8)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SpeechRecognitionRemoteRealtimeMediaSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v8 + 304));
    }
  }
}

void WebKit::SpeechRecognitionServer::start(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  _QWORD *v40;
  WTF::StringImpl *v41;
  _QWORD *v42;
  WTF::StringImpl *v43;
  NSObject *v44;
  _QWORD *v45;
  __int128 buf;
  char v47;
  char v48;
  uint64_t v49;
  _BYTE v50[24];
  int v51;
  _BYTE v52[24];
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v13 = *a3;
    *a3 = 0;
    *(_QWORD *)&buf = a2;
    *((_QWORD *)&buf + 1) = v13;
    v47 = a4;
    v48 = a5;
    v49 = a6;
    v50[0] = 0;
    v51 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v50, a7);
    v52[0] = 0;
    v53 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v52, a7 + 32);
    v54 = a9;
    v55 = a10;
    WTF::fastMalloc((WTF *)0x78);
    v14 = WebCore::SpeechRecognitionRequest::SpeechRecognitionRequest();
    v16 = (uint64_t *)(a1 + 40);
    v15 = *(_QWORD *)(a1 + 40);
    v45 = (_QWORD *)v14;
    if (v15
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 40), 0), (v15 = *v16) != 0))
    {
      v17 = *(_DWORD *)(v15 - 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = (uint64_t *)(v15 + 16 * v21);
    v23 = *v22;
    if (*v22)
    {
      v24 = 0;
      v25 = 1;
      while (v23 != a2)
      {
        if (v23 == -1)
          v24 = v22;
        v21 = (v21 + v25) & v17;
        v22 = (uint64_t *)(v15 + 16 * v21);
        v23 = *v22;
        ++v25;
        if (!*v22)
        {
          if (v24)
          {
            *v24 = 0;
            v24[1] = 0;
            --*(_DWORD *)(*v16 - 16);
            v22 = v24;
          }
          goto LABEL_13;
        }
      }
      goto LABEL_24;
    }
LABEL_13:
    *v22 = a2;
    v26 = v22[1];
    v27 = (uint64_t)v45;
    v45 = 0;
    v22[1] = v27;
    if (v26)
      std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)(v22 + 1), v26);
    v28 = *v16;
    if (*v16)
      v29 = *(_DWORD *)(v28 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(v28 - 12) = v29;
    v30 = *v16;
    if (*v16)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32)
        goto LABEL_24;
    }
    else if (3 * v33 > 4 * v32)
    {
LABEL_24:
      v34 = (uint64_t)v45;
      v45 = 0;
      if (v34)
        std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)&v45, v34);
      v35 = (unsigned int *)v22[1];
      WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
      v36 = *(unsigned int **)(a1 + 8);
      if (v36)
      {
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 + 1, v36));
      }
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v35, (uint64_t)v35);
      v38 = *(unsigned int **)v35;
      if (*(_QWORD *)v35)
      {
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 + 1, v38));
      }
      v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v40 = &off_1E34D1A68;
      v40[1] = a1;
      v40[2] = v36;
      v40[3] = v38;
      v45 = v40;
      (*(void (**)(_QWORD, unsigned int *, _QWORD **))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v35, &v45);
      v42 = v45;
      v45 = 0;
      if (v42)
        (*(void (**)(_QWORD *))(*v42 + 8))(v42);
      if (v53 != -1)
        ((void (*)(_QWORD **, _BYTE *))off_1E34D1928[v53])(&v45, v52);
      v53 = -1;
      if (v51 != -1)
        ((void (*)(_QWORD **, _BYTE *))off_1E34D1928[v51])(&v45, v50);
      v51 = -1;
      v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
      *((_QWORD *)&buf + 1) = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v41);
        else
          *(_DWORD *)v43 -= 2;
      }
      return;
    }
    v22 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 40), v22);
    goto LABEL_24;
  }
  v44 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "void WebKit::SpeechRecognitionServer::start(WebCore::SpeechRecognitionConnectionClie"
                                    "ntIdentifier, String &&, BOOL, BOOL, uint64_t, WebCore::ClientOrigin &&, WebCore::FrameIdentifier)";
    _os_log_fault_impl(&dword_196BCC000, v44, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/SpeechRecognitionServer.cpp 57: Invalid message dispatched %s", (uint8_t *)&buf, 0xCu);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + 98) = 1;
}

uint64_t WebKit::SpeechRecognitionServer::messageSenderConnection(WebKit::SpeechRecognitionServer *this)
{
  return *((_QWORD *)this + 3);
}

IPC::Encoder *WebKit::SpeechRecognitionServer::sendUpdate(WebKit::SpeechRecognitionServer *this, const WebCore::SpeechRecognitionUpdate *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v3 = (char *)this + 16;
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 56))((char *)this + 16);
  v5 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v5 = 2798;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 528) = v5 + 16;
  *(_QWORD *)(v5 + 536) = v5 + 16;
  *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v5 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
  v10 = (IPC::Encoder *)v5;
  IPC::ArgumentCoder<WebCore::SpeechRecognitionUpdate,void>::encode((IPC::Encoder *)v5, (uint64_t *)a2);
  (*(void (**)(char *, IPC::Encoder **, _QWORD))(*(_QWORD *)v3 + 32))(v3, &v10, 0);
  result = v10;
  v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::SpeechRecognitionServer::stop(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebCore::SpeechRecognizer *v9;
  NSObject *v10;
  _BYTE v11[8];
  WTF::StringImpl *v12;
  char v13;
  uint8_t buf[4];
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v4, a2);
    if (v4)
    {
      v6 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
      if (v6 == v5)
      {
LABEL_13:
        v9 = *(WebCore::SpeechRecognizer **)(a1 + 56);
        if (v9)
        {
          if (WebCore::SpeechRecognizer::clientIdentifier(v9) == a2)
            WebCore::SpeechRecognizer::stop(*(WebCore::SpeechRecognizer **)(a1 + 56));
        }
        return;
      }
    }
    else
    {
      if (!v5)
        goto LABEL_13;
      v6 = 0;
    }
    if (v6 != v5)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove((uint64_t *)(a1 + 40), v5);
    v11[0] = 0;
    v13 = 0;
    WebKit::SpeechRecognitionServer::sendUpdate((WebKit::SpeechRecognitionServer *)a1, a2, 10, (uint64_t)v11);
    if (v13)
    {
      v8 = v12;
      v12 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  else
  {
    v10 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v15 = "void WebKit::SpeechRecognitionServer::stop(WebCore::SpeechRecognitionConnectionClientIdentifier)";
      _os_log_fault_impl(&dword_196BCC000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/SpeechRecognitionServer.cpp 120: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + 98) = 1;
  }
}

uint64_t WebKit::SpeechRecognitionServer::sendUpdate(WebKit::SpeechRecognitionServer *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  _BYTE v14[16];
  int v15;
  _BYTE *v16;

  result = WebCore::SpeechRecognitionUpdate::create();
  if (a3 == 9)
  {
    if (!*(_BYTE *)(a4 + 16))
    {
      __break(1u);
      return result;
    }
    WebCore::SpeechRecognitionUpdate::createError();
    v12 = v8;
    v13 = v9;
    if (v15 != -1)
    {
      if (v11 == -1)
      {
        ((void (*)(_BYTE **, _BYTE *))off_1E34D1960[v15])(&v16, v14);
        v15 = -1;
        goto LABEL_8;
      }
LABEL_7:
      v16 = v14;
      ((void (*)(_BYTE **))off_1E34D1978[v11])(&v16);
LABEL_8:
      if (v11 != -1)
        ((void (*)(_BYTE **, uint64_t *))off_1E34D1960[v11])(&v16, &v10);
      goto LABEL_10;
    }
    if (v11 != -1)
      goto LABEL_7;
  }
LABEL_10:
  result = (uint64_t)WebKit::SpeechRecognitionServer::sendUpdate(a1, (const WebCore::SpeechRecognitionUpdate *)&v12);
  if (v15 != -1)
    return ((uint64_t (*)(uint64_t *, _BYTE *))off_1E34D1960[v15])(&v8, v14);
  return result;
}

void WebKit::SpeechRecognitionServer::abort(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebCore::SpeechRecognizer *v9;
  NSObject *v10;
  _BYTE v11[8];
  WTF::StringImpl *v12;
  char v13;
  uint8_t buf[4];
  const char *v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = a1[5];
    v5 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v4, a2);
    if (v4)
    {
      v6 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
      if (v6 == v5)
      {
LABEL_13:
        v9 = (WebCore::SpeechRecognizer *)a1[7];
        if (v9)
        {
          if (WebCore::SpeechRecognizer::clientIdentifier(v9) == a2)
          {
            buf[0] = 0;
            v16 = 0;
            WebCore::SpeechRecognizer::abort();
          }
        }
        return;
      }
    }
    else
    {
      if (!v5)
        goto LABEL_13;
      v6 = 0;
    }
    if (v6 != v5)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(a1 + 5, v5);
    v11[0] = 0;
    v13 = 0;
    WebKit::SpeechRecognitionServer::sendUpdate((WebKit::SpeechRecognitionServer *)a1, a2, 10, (uint64_t)v11);
    if (v13)
    {
      v8 = v12;
      v12 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  else
  {
    v10 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v15 = "void WebKit::SpeechRecognitionServer::abort(WebCore::SpeechRecognitionConnectionClientIdentifier)";
      _os_log_fault_impl(&dword_196BCC000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/SpeechRecognitionServer.cpp 133: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(a1[3] + 98) = 1;
  }
}

void WebKit::SpeechRecognitionServer::invalidate(uint64_t a1, uint64_t a2)
{
  WebCore::SpeechRecognizer *v3;
  NSObject *v4;
  int v5;
  const char *v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = *(WebCore::SpeechRecognizer **)(a1 + 56);
    if (v3)
    {
      if (WebCore::SpeechRecognizer::clientIdentifier(v3) == a2)
      {
        LOBYTE(v5) = 0;
        v7 = 0;
        WebCore::SpeechRecognizer::abort();
      }
    }
  }
  else
  {
    v4 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v5 = 136315138;
      v6 = "void WebKit::SpeechRecognitionServer::invalidate(WebCore::SpeechRecognitionConnectionClientIdentifier)";
      _os_log_fault_impl(&dword_196BCC000, v4, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/SpeechRecognitionServer.cpp 145: Invalid message dispatched %s", (uint8_t *)&v5, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + 98) = 1;
  }
}

uint64_t `non-virtual thunk to'WebKit::SpeechRecognitionServer::messageSenderConnection(WebKit::SpeechRecognitionServer *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t WebKit::SpeechRecognitionServer::messageSenderDestinationID(WebKit::SpeechRecognitionServer *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t `non-virtual thunk to'WebKit::SpeechRecognitionServer::messageSenderDestinationID(WebKit::SpeechRecognitionServer *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t WebKit::SuspendedPageProxy::findReusableSuspendedPageProcess@<X0>(uint64_t a1@<X0>, const WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, WebKit::WebPreferences **a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  const WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v22;
  WTF::StringImpl *v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if ((byte_1ECE72D02 & 1) == 0)
  {
    unk_1ECE72D10 = 0;
    qword_1ECE72D08 = 0;
    byte_1ECE72D02 = 1;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)&qword_1ECE72D08, &v30);
  if (qword_1ECE72D08)
  {
    v12 = *(unsigned int *)(qword_1ECE72D08 - 4);
    v13 = qword_1ECE72D08 + 8 * v12;
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  v25 = &qword_1ECE72D08;
  v26 = v13;
  v27 = v13;
  v28 = v13;
  v29 = qword_1ECE72D08 + 8 * v12;
  for (result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v25);
        ;
        result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v30))
  {
    if (v31 == v26)
    {
      *a6 = 0;
      return result;
    }
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v31 + 8) + 40);
    v17 = (unsigned int *)(v16 + 16);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = *(_QWORD *)(v16 + 512);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20 && v20 - 16 == a1)
        break;
    }
LABEL_30:
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v16 + 16));
  }
  if (*(_BYTE *)(v16 + 704))
  {
    v22 = *(WTF **)(v16 + 696);
    if (v22)
      *(_DWORD *)v22 += 2;
  }
  else
  {
    v22 = 0;
  }
  result = WTF::equal(v22, *a2, v15);
  if (!(_DWORD)result
    || *(_QWORD *)(v16 + 752) != a3
    || *(_BYTE *)(v16 + 780)
    || (((*(_BYTE *)(v16 + 779) != 0) ^ a4) & 1) != 0
    || (result = WebKit::AuxiliaryProcessProxy::wasTerminated((WebKit::AuxiliaryProcessProxy *)v16), (result & 1) != 0))
  {
    v24 = 0;
    if (!v22)
      goto LABEL_29;
  }
  else
  {
    result = WebKit::WebProcessProxy::hasSameGPUAndNetworkProcessPreferencesAs((WebKit::WebProcessProxy *)v16, a5);
    v24 = result;
    if (!v22)
      goto LABEL_29;
  }
  if (*(_DWORD *)v22 == 2)
    result = WTF::StringImpl::destroy(v22, v23);
  else
    *(_DWORD *)v22 -= 2;
LABEL_29:
  if ((v24 & 1) == 0)
    goto LABEL_30;
  *a6 = v16;
  return result;
}

uint64_t WebKit::SuspendedPageProxy::SuspendedPageProxy(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, char a6)
{
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::RunLoop *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[24];

  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E34D1900;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v13 = *(unsigned int **)(a2 + 24);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 1896);
  v15 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 40) = v15;
  v16 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 48) = v16;
  v17 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 56) = v17;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 89) = a6;
  *(_WORD *)(a1 + 90) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v18 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v12);
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v19 = off_1E34D1A90;
  v19[1] = WebKit::SuspendedPageProxy::suspensionTimedOut;
  v19[2] = 0;
  v19[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 104), v18);
  *(_QWORD *)(a1 + 104) = off_1E34ABE00;
  *(_QWORD *)(a1 + 128) = v19;
  v20 = *(_QWORD *)(a1 + 40) + 200;
  v21 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)(a1 + 136) = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v21, v20, "Page suspension for back/forward cache", 39, 0, 0);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 1152);
  if ((byte_1ECE72D02 & 1) == 0)
  {
    unk_1ECE72D10 = 0;
    qword_1ECE72D08 = 0;
    byte_1ECE72D02 = 1;
  }
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::RemoteAudioSessionProxy>((uint64_t)&qword_1ECE72D08, (unsigned int *)a1, (uint64_t)v23);
  WebKit::WebProcessProxy::addSuspendedPageProxy(*(WebKit::WebProcessProxy **)(a1 + 40), (WebKit::SuspendedPageProxy *)a1);
  WebKit::WebPageProxyMessageReceiverRegistration::startReceivingMessages((unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 40), *(unsigned int **)(a1 + 32), a1);
  WTF::RunLoop::TimerBase::start();
  v23[0] = 1;
  WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsSuspended>(*(_QWORD *)(a1 + 40), v23, *(_QWORD *)(a1 + 32), 0);
  return a1;
}

uint64_t WebKit::SuspendedPageProxy::suspensionTimedOut(WebKit::SuspendedPageProxy *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  WebKit::SuspendedPageProxy *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71668;
  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_ERROR))
  {
    v6 = 134217984;
    v7 = this;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "%p - SuspendedPageProxy::suspensionTimedOut() destroying the suspended page because it failed to suspend in time", (uint8_t *)&v6, 0xCu);
  }
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 512) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  return WebKit::WebBackForwardCache::removeEntry(*(WebKit::WebBackForwardCache **)(v4 + 760), this);
}

void WebKit::SuspendedPageProxy::~SuspendedPageProxy(WebKit::SuspendedPageProxy *this)
{
  WTF::RunLoop *State;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WebKit::BrowsingContextGroup *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;

  if ((byte_1ECE72D02 & 1) == 0)
  {
    unk_1ECE72D10 = 0;
    qword_1ECE72D08 = 0;
    byte_1ECE72D02 = 1;
  }
  State = (WTF::RunLoop *)WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)&qword_1ECE72D08, this);
  if (*((_QWORD *)this + 12))
  {
    WTF::RunLoop::main(State);
    v3 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E34D1AB8;
    v4[1] = v3;
    v14 = v4;
    WTF::RunLoop::dispatch();
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
  if (*((_BYTE *)this + 91) != 3)
    WebKit::SuspendedPageProxy::close((uint64_t)this);
  WebKit::WebProcessProxy::removeSuspendedPageProxy(*((WebKit::WebProcessProxy **)this + 5), this);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)this + 17, 0);
  *((_QWORD *)this + 13) = off_1E34ABE00;
  v5 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::SuspendedPageProxy *)((char *)this + 104));
  v6 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WebKit::WebPageProxyMessageReceiverRegistration::~WebPageProxyMessageReceiverRegistration((WebKit::SuspendedPageProxy *)((char *)this + 64));
  v8 = (WebKit::BrowsingContextGroup *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
    WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v8, v7);
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v7);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
}

{
  uint64_t v1;
  void *v2;

  WebKit::SuspendedPageProxy::~SuspendedPageProxy(this);
  if (*(_DWORD *)(v1 + 16))
  {
    *(_QWORD *)(v1 + 144) = 0;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

uint64_t WebKit::SuspendedPageProxy::close(uint64_t this)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(this + 88))
  {
    v1 = this;
    v2 = qword_1ECE71668;
    if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
    {
      v3 = 134217984;
      v4 = v1;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - SuspendedPageProxy::close()", (uint8_t *)&v3, 0xCu);
    }
    *(_BYTE *)(v1 + 88) = 1;
    LOBYTE(v3) = 0;
    return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::Close>(*(_QWORD *)(v1 + 40), (uint64_t)&v3, *(_QWORD *)(v1 + 32), 0);
  }
  return this;
}

uint64_t WebKit::SuspendedPageProxy::waitUntilReadyToUnsuspend(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD *)(result + 96);
  if (v4)
  {
    *(_QWORD *)(result + 96) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = *(unsigned __int8 *)(v3 + 91);
  if ((v5 - 1) < 2)
  {
    v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (v5 == 3)
  {
    v7 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (!*(_BYTE *)(v3 + 91))
  {
    v6 = *a2;
    *a2 = 0;
    v7 = *(_QWORD *)(v3 + 96);
    *(_QWORD *)(v3 + 96) = v6;
    if (v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

void WebKit::SuspendedPageProxy::didProcessRequestToSuspend(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  _BOOL4 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71668;
  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134218240;
    v9 = a1;
    v10 = 1024;
    v11 = a2 == 2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "%p - SuspendedPageProxy::didProcessRequestToSuspend() success? %d", (uint8_t *)&v8, 0x12u);
  }
  *(_BYTE *)(a1 + 91) = a2;
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(a1 + 104));
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 136), 0);
  WebKit::WebPageProxyMessageReceiverRegistration::stopReceivingMessages((unsigned __int8 *)(a1 + 64));
  if (*(_BYTE *)(a1 + 91) == 1)
  {
    v5 = qword_1ECE71668;
    if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(unsigned __int8 *)(a1 + 89);
      v8 = 134218240;
      v9 = a1;
      v10 = 1024;
      v11 = v6;
      _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "%p - SuspendedPageProxy::closeWithoutFlashing() shouldDelayClosingUntilFirstLayerFlush? %d", (uint8_t *)&v8, 0x12u);
    }
    if (*(_BYTE *)(a1 + 89))
      *(_BYTE *)(a1 + 90) = 1;
    else
      WebKit::SuspendedPageProxy::close(a1);
  }
  v7 = *(_QWORD *)(a1 + 96);
  if (v7)
  {
    *(_QWORD *)(a1 + 96) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

void WebKit::SuspendedPageProxy::didReceiveMessage(WebKit::SuspendedPageProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v4;
  int v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 1878:
      v6 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (v7)
      {
        v8 = v6;
        v9 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if (v9)
          v10 = v9 - 16;
        else
          v10 = 0;
        CFRetain(*(CFTypeRef *)(v10 + 8));
        v11 = *((_QWORD *)this + 5);
        v12 = (unsigned int *)(v11 + 16);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
        v15 = v11;
        WebKit::WebPageProxy::didDestroyNavigationShared(v10, (uint64_t)&v15, v8);
        v14 = v15;
        v15 = 0;
        if (v14)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v14 + 16));
        if (v9)
          CFRelease(*(CFTypeRef *)(v9 - 8));
      }
      break;
    case 1884:
      v5 = 1;
      goto LABEL_17;
    case 1920:
      v5 = 2;
LABEL_17:
      WebKit::SuspendedPageProxy::didProcessRequestToSuspend((uint64_t)this, v5);
      break;
  }
}

uint64_t WebKit::SuspendedPageProxy::didReceiveSyncMessage()
{
  return 0;
}

uint64_t WebCore::RealtimeMediaSource::logger(WebCore::RealtimeMediaSource *this)
{
  return *((_QWORD *)this + 5);
}

const char *WebCore::RealtimeMediaSource::logClassName(WebCore::RealtimeMediaSource *this)
{
  return "RealtimeMediaSource";
}

uint64_t WebCore::RealtimeMediaSource::logIdentifier(WebCore::RealtimeMediaSource *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t WebCore::RealtimeMediaSource::clone@<X0>(WebCore::RealtimeMediaSource *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 136))(this);
  *a2 = this;
  return result;
}

WTF::StringImpl *WebCore::RealtimeMediaSource::whenReady(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5[2];

  v5[0] = 0;
  v5[1] = 0;
  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 16))(v2, v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::RealtimeMediaSource::isProducingData(WebCore::RealtimeMediaSource *this)
{
  return *((unsigned __int8 *)this + 292);
}

uint64_t WebCore::RealtimeMediaSource::interrupted(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSource::capabilities(WebKit::SpeechRecognitionRemoteRealtimeMediaSource *this)
{
  return (uint64_t)this + 328;
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSource::settings(WebKit::SpeechRecognitionRemoteRealtimeMediaSource *this)
{
  return (uint64_t)this + 520;
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSource::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 304);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEABB3C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebKit::SpeechRecognitionRemoteRealtimeMediaSource::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SpeechRecognitionRemoteRealtimeMediaSource,(WTF::DestructionThread)2>(this[38]);
}

uint64_t WebKit::SpeechRecognitionRemoteRealtimeMediaSource::controlBlock(WebKit::SpeechRecognitionRemoteRealtimeMediaSource *this)
{
  return *((_QWORD *)this + 38);
}

uint64_t WebCore::RealtimeMediaSource::isMockSource(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeMediaSource::isCaptureSource(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeMediaSource::deviceType(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

BOOL WebCore::RealtimeMediaSource::isSameAs(WebCore::RealtimeMediaSource *this, WebCore::RealtimeMediaSource *a2)
{
  return this == a2;
}

uint64_t WebCore::RealtimeMediaSource::isIncomingAudioSource(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeMediaSource::isIncomingVideoSource(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeMediaSource::setShouldApplyRotation(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

double WebCore::RealtimeMediaSource::facingModeFitnessScoreAdjustment(WebCore::RealtimeMediaSource *this)
{
  return 0.0;
}

uint64_t WebCore::RealtimeMediaSource::isPowerEfficient(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

double WebCore::RealtimeMediaSource::observedFrameRate(WebCore::RealtimeMediaSource *this)
{
  return 0.0;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionServer::handleRequest(WTF::UniqueRef<WebCore::SpeechRecognitionRequest> &&)::$_0,void,WebCore::SpeechRecognitionUpdate const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34D1948;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionServer::handleRequest(WTF::UniqueRef<WebCore::SpeechRecognitionRequest> &&)::$_0,void,WebCore::SpeechRecognitionUpdate const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D1948;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionServer::handleRequest(WTF::UniqueRef<WebCore::SpeechRecognitionRequest> &&)::$_0,void,WebCore::SpeechRecognitionUpdate const&>::call(IPC::Encoder *result, unsigned __int8 *a2)
{
  uint64_t v2;
  WebKit::SpeechRecognitionServer *v4;
  int v5;

  v2 = *((_QWORD *)result + 2);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = (WebKit::SpeechRecognitionServer *)*((_QWORD *)result + 1);
    result = WebKit::SpeechRecognitionServer::sendUpdate(v4, (const WebCore::SpeechRecognitionUpdate *)a2);
    v5 = a2[8];
    if (v5 == 10)
    {
      *(_DWORD *)(*((_QWORD *)v4 + 7) + 32) = 0;
    }
    else if (v5 == 9)
    {
      return (IPC::Encoder *)WebCore::SpeechRecognizer::abort();
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS9_27SpeechRecognitionResultDataELm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SA_SG_EEEOSV_EEEDcSN_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34D1960[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS9_27SpeechRecognitionResultDataELm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SA_SG_EEEOSV_EEEDcSN_DpT0_(WTF::StringImpl **result, uint64_t a2, _BYTE *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *result;
  v5 = *((unsigned int *)*result + 4);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *(_BYTE *)a2 = *a3;
      return WTF::String::operator=((WTF::StringImpl **)(a2 + 8), (WTF::StringImpl *)(a3 + 8));
    }
    result = (WTF::StringImpl **)((uint64_t (*)(char *, WTF::StringImpl *))off_1E34D1960[v5])(&v7, v4);
  }
  *(_BYTE *)v4 = *a3;
  v6 = *((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)v4 + 1) = v6;
  *((_DWORD *)v4 + 4) = 1;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore22SpeechRecognitionErrorEN3WTF6VectorINS9_27SpeechRecognitionResultDataELm0ENSB_15CrashOnOverflowELm16ENSB_10FastMallocEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSL_1EJS8_SA_SG_EEEOSV_EEEDcSN_DpT0_(WTF *result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 2)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E34D1960[v5])(&v12, v4);
LABEL_10:
    *(_DWORD *)(v4 + 16) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v11 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v11;
    LODWORD(v11) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v11;
    LODWORD(v11) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v4 + 12) = v11;
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  v7 = a2[3];
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)a2;
    v9 = 24 * v7;
    do
    {
      v8 = WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v8, a2)+ 24;
      v9 -= 24;
    }
    while (v9);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v10 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v10;
  LODWORD(v10) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  a2[2] = v10;
  LODWORD(v10) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  a2[3] = v10;
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SpeechRecognitionRemoteRealtimeMediaSource,(WTF::DestructionThread)2>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E34D19A0;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::SpeechRecognitionRemoteRealtimeMediaSource,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::ResponsivenessTimer::*&)(void),WebKit::ResponsivenessTimer*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WebKit::SpeechRecognitionPermissionRequest *WTF::RefCounted<WebKit::SpeechRecognitionPermissionRequest>::deref(WebKit::SpeechRecognitionPermissionRequest *result, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebKit::SpeechRecognitionPermissionRequest::~SpeechRecognitionPermissionRequest(result, a2);
    return (WebKit::SpeechRecognitionPermissionRequest *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebKit::SpeechRecognitionPermissionRequest::~SpeechRecognitionPermissionRequest(WebKit::SpeechRecognitionPermissionRequest *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  char v9[8];
  WTF::StringImpl *v10;
  char v11;

  if (*((_QWORD *)this + 2))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9[0] = 4;
    v11 = 1;
    v3 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 16))(v3, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v11)
    {
      v4 = v10;
      v10 = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
    }
    v5 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestSpeechRecognitionServiceAccess(void)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34D19F0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestSpeechRecognitionServiceAccess(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D19F0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestSpeechRecognitionServiceAccess(void)::$_0,void,BOOL>::call(WTF::StringImpl *result, int a2)
{
  uint64_t v2;
  WebKit::SpeechRecognitionPermissionManager *v3;
  WTF::StringImpl *v4;
  char v5[8];
  WTF::StringImpl *v6;
  char v7;

  v2 = *((_QWORD *)result + 2);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = (WebKit::SpeechRecognitionPermissionManager *)*((_QWORD *)result + 1);
    *((_DWORD *)v3 + 13) = a2;
    if ((a2 & 1) != 0)
    {
      return WebKit::SpeechRecognitionPermissionManager::continueProcessingRequest(v3);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v5[0] = 5;
      v7 = 1;
      result = (WTF::StringImpl *)WebKit::SpeechRecognitionPermissionManager::completeCurrentRequest((uint64_t)v3, (WTF::StringImpl *)v5);
      if (v7)
      {
        result = v6;
        v6 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestMicrophoneAccess(void)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34D1A18;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestMicrophoneAccess(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D1A18;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestMicrophoneAccess(void)::$_0,void,BOOL>::call(WTF::StringImpl *result, int a2)
{
  uint64_t v2;
  WebKit::SpeechRecognitionPermissionManager *v3;
  WTF::StringImpl *v4;
  char v5[8];
  WTF::StringImpl *v6;
  char v7;

  v2 = *((_QWORD *)result + 2);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = (WebKit::SpeechRecognitionPermissionManager *)*((_QWORD *)result + 1);
    *((_DWORD *)v3 + 12) = a2;
    if ((a2 & 1) != 0)
    {
      return WebKit::SpeechRecognitionPermissionManager::continueProcessingRequest(v3);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v5[0] = 4;
      v7 = 1;
      result = (WTF::StringImpl *)WebKit::SpeechRecognitionPermissionManager::completeCurrentRequest((uint64_t)v3, (WTF::StringImpl *)v5);
      if (v7)
      {
        result = v6;
        v6 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestUserPermission(WebCore::SpeechRecognitionRequest &)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34D1A40;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestUserPermission(WebCore::SpeechRecognitionRequest &)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D1A40;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionPermissionManager::requestUserPermission(WebCore::SpeechRecognitionRequest &)::$_0,void,BOOL>::call(WTF::StringImpl *result, int a2)
{
  uint64_t v2;
  WebKit::SpeechRecognitionPermissionManager *v3;
  WTF::StringImpl *v4;
  char v5[8];
  WTF::StringImpl *v6;
  char v7;

  v2 = *((_QWORD *)result + 2);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = (WebKit::SpeechRecognitionPermissionManager *)*((_QWORD *)result + 1);
    *((_DWORD *)v3 + 14) = a2;
    if ((a2 & 1) != 0)
    {
      return WebKit::SpeechRecognitionPermissionManager::continueProcessingRequest(v3);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v5[0] = 4;
      v7 = 1;
      result = (WTF::StringImpl *)WebKit::SpeechRecognitionPermissionManager::completeCurrentRequest((uint64_t)v3, (WTF::StringImpl *)v5);
      if (v7)
      {
        result = v6;
        v6 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = (uint64_t *)(v18 + 16 * v25);
          v29 = v27 + 1;
          v28 = v27[1];
          v27[1] = 0;
          if (v28)
            std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)v29, v28);
          *v27 = *v13;
          v30 = v6 + 16 * v11;
          v32 = *(_QWORD *)(v30 + 8);
          v31 = (void **)(v30 + 8);
          *v31 = 0;
          *v29 = v32;
          v10 = *v31;
          *v31 = 0;
          if (v10)
            std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)v31, (uint64_t)v10);
          if (v13 == a3)
            v12 = v27;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v17 = *(void **)(v15 + 8);
          v16 = (_QWORD *)(v15 + 8);
          v10 = v17;
          *v16 = 0;
          if (v17)
            std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)v16, (uint64_t)v10);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionServer::requestPermissionForRequest(WebCore::SpeechRecognitionRequest &)::$_0,void,std::optional<WebCore::SpeechRecognitionError> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E34D1A68;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionServer::requestPermissionForRequest(WebCore::SpeechRecognitionRequest &)::$_0,void,std::optional<WebCore::SpeechRecognitionError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34D1A68;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::SpeechRecognitionServer::requestPermissionForRequest(WebCore::SpeechRecognitionRequest &)::$_0,void,std::optional<WebCore::SpeechRecognitionError> &&>::call(_QWORD *a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore::SpeechRecognizer **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  WebCore::SpeechRecognizer *v25;
  WTF::StringImpl *v26;
  _QWORD *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  WTF::StringImpl *v36;
  _QWORD *v37;
  WTF::StringImpl *v38;
  char v39[16];
  int v40;
  _QWORD *v41;
  WTF::StringImpl *v42;
  char v43;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a2 + 16))
  {
    v4 = *(_BYTE *)a2;
    v2 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    v4 = 0;
  }
  v5 = a1[2];
  if (!v5)
    goto LABEL_62;
  if (!*(_QWORD *)(v5 + 8))
    goto LABEL_62;
  v6 = a1[3];
  if (!v6)
    goto LABEL_62;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_62;
  v8 = a1[1];
  v9 = *(_QWORD *)(v7 + 8);
  v11 = (uint64_t *)(v8 + 40);
  v10 = *(_QWORD *)(v8 + 40);
  v12 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v10, v9);
  if (v10)
    v13 = (_QWORD *)(v10 + 16 * *(unsigned int *)(v10 - 4));
  else
    v13 = 0;
  if (v13 == v12)
  {
    v14 = 0;
    goto LABEL_20;
  }
  v14 = v12[1];
  v12[1] = 0;
  if (*v11)
  {
    v15 = *v11 + 16 * *(unsigned int *)(*v11 - 4);
    if ((_QWORD *)v15 == v12)
      goto LABEL_20;
  }
  else
  {
    if (!v12)
      goto LABEL_20;
    v15 = 0;
  }
  if ((_QWORD *)v15 != v12)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v11, v12);
LABEL_20:
  if (!v3)
  {
    v33 = v14;
    v34 = 0;
    v17 = (WebCore::SpeechRecognizer **)(v8 + 56);
    if (*(_QWORD *)(v8 + 56))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v37) = 1;
      v39[0] = 1;
      WebCore::SpeechRecognizer::abort();
      v19 = v38;
      v38 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
      WebCore::SpeechRecognizer::prepareForDestruction(*v17);
    }
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v8 + 8), v8);
    v20 = *(unsigned int **)(v8 + 8);
    if (v20)
    {
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
    v22 = WTF::fastMalloc((WTF *)0x48);
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v23 = &off_1E34D1948;
    v23[1] = v8;
    v23[2] = v20;
    v37 = v23;
    WebCore::SpeechRecognizer::SpeechRecognizer();
    v24 = v37;
    v37 = 0;
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
    v25 = *v17;
    *v17 = (WebCore::SpeechRecognizer *)v22;
    if (v25)
      std::default_delete<WebCore::SpeechRecognizer>::operator()[abi:sn180100](v8 + 56, (uint64_t)v25);
    (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v8 + 80) + 16))(&v41);
    if (v41)
    {
      WebKit::WebProcessProxy::muteCaptureInPagesExcept(*(_QWORD *)(v8 + 32));
      (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 64) + 16))(*(_QWORD *)(v8 + 64));
      v37 = v41;
      v41 = 0;
      WebCore::SpeechRecognizer::start();
      v27 = v37;
      v37 = 0;
      if (v27)
        (*(void (**)(_QWORD *))(*v27 + 144))(v27);
    }
    else
    {
      v35 = 2;
      v28 = v42;
      if (v42)
        *(_DWORD *)v42 += 2;
      v36 = v28;
      WebCore::SpeechRecognitionUpdate::createError();
      WebKit::SpeechRecognitionServer::sendUpdate((WebKit::SpeechRecognitionServer *)v8, (const WebCore::SpeechRecognitionUpdate *)&v37);
      if (v40 != -1)
        ((void (*)(char *, char *))off_1E34D1960[v40])(&v43, v39);
      v40 = -1;
      v29 = v36;
      v36 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v26);
        else
          *(_DWORD *)v29 -= 2;
      }
    }
    v30 = v42;
    v42 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v26);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = v41;
    v41 = 0;
    if (v31)
      (*(void (**)(_QWORD *))(*v31 + 144))(v31);
    a2 = v33;
    v33 = 0;
    if (a2)
      std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)&v33, a2);
    v14 = v34;
    goto LABEL_60;
  }
  LOBYTE(v37) = v4;
  v38 = v2;
  v39[0] = 1;
  WebKit::SpeechRecognitionServer::sendUpdate((WebKit::SpeechRecognitionServer *)v8, v9, 9, (uint64_t)&v37);
  if (v39[0])
  {
    v16 = v38;
    v38 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 != 2)
      {
        v2 = 0;
        *(_DWORD *)v16 -= 2;
        goto LABEL_60;
      }
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
    }
  }
  v2 = 0;
LABEL_60:
  v34 = 0;
  if (v14)
    std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)&v34, v14);
LABEL_62:
  if (v3)
    v32 = v2 == 0;
  else
    v32 = 1;
  if (!v32)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v2 -= 2;
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  *a2 = -1;
  v5 = a2[1];
  v3 = a2 + 1;
  v4 = v5;
  *v3 = 0;
  if (v5)
    std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)v3, v4);
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::SpeechRecognitionRequest>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::SpeechRecognitionRequest>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::SpeechRecognitionConnectionClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v10 >> 1, 0);
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::SuspendedPageProxy::*&)(void),WebKit::SuspendedPageProxy*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SetIsSuspended>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2398;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::SuspendedPageProxy::~SuspendedPageProxy()::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1AB8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SuspendedPageProxy::~SuspendedPageProxy()::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1AB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SuspendedPageProxy::~SuspendedPageProxy()::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void WebKit::InjectedBundle::setBundleParameter(WebKit::InjectedBundle *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  WKWebProcessBundleParameters *v9;
  WKWebProcessBundleParameters *v10;
  const void *v11;
  const __CFString *v12;
  id v13;

  WebKit::createUnarchiver(&v13, a3, a4);
  v6 = v13;
  v7 = objc_msgSend(v13, "decodeObjectOfClasses:forKey:", WebKit::InjectedBundle::classesForCoder(a1), CFSTR("parameter"));
  v8 = v7;
  v9 = (WKWebProcessBundleParameters *)*((_QWORD *)a1 + 6);
  if (!v9)
  {
    if (v7)
    {
      v10 = [WKWebProcessBundleParameters alloc];
      v9 = -[WKWebProcessBundleParameters initWithDictionary:](v10, "initWithDictionary:", MEMORY[0x1E0C9AA70]);
      v11 = (const void *)*((_QWORD *)a1 + 6);
      *((_QWORD *)a1 + 6) = v9;
      if (v11)
      {
        CFRelease(v11);
        v9 = (WKWebProcessBundleParameters *)*((_QWORD *)a1 + 6);
      }
    }
  }
  if (*a2)
    v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v12 = &stru_1E351F1B8;
  -[WKWebProcessBundleParameters setParameter:forKey:](v9, "setParameter:forKey:", v8, v12);
  if (v6)
    CFRelease(v6);
}

void sub_1972F5E30(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::createUnarchiver(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  void *v5;

  v4 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", a2, a3, 0);
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v4, 0);
  *a1 = v5;
  objc_msgSend(v5, "setDecodingFailurePolicy:", 0);
  if (v4)
    CFRelease(v4);
}

void sub_1972F5EF4(_Unwind_Exception *exception_object)
{
  const void *v1;
  _QWORD *v2;
  const void *v3;
  const void *v4;

  v4 = v3;
  *v2 = 0;
  if (v4)
    CFRelease(v4);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebKit::InjectedBundle::setBundleParameters(WebKit::InjectedBundle *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  WKWebProcessBundleParameters *v7;
  const void *v8;
  id v9;

  WebKit::createUnarchiver(&v9, a2, a3);
  v4 = v9;
  v5 = objc_msgSend(v9, "decodeObjectOfClasses:forKey:", WebKit::InjectedBundle::classesForCoder(a1), CFSTR("parameters"));
  if (v5)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      __break(0xC471u);
      return;
    }
    v6 = (void *)*((_QWORD *)a1 + 6);
    if (v6)
    {
      objc_msgSend(v6, "setParametersForKeyWithDictionary:", v5);
    }
    else
    {
      v7 = -[WKWebProcessBundleParameters initWithDictionary:]([WKWebProcessBundleParameters alloc], "initWithDictionary:", v5);
      v8 = (const void *)*((_QWORD *)a1 + 6);
      *((_QWORD *)a1 + 6) = v7;
      if (v8)
        CFRelease(v8);
    }
  }
  if (v4)
    CFRelease(v4);
}

void sub_1972F601C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::ARKitInlinePreviewModelPlayer::ARKitInlinePreviewModelPlayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;

  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34D1AE0;
  v5 = (unsigned int **)(a2 + 24);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v6 = *v5;
  if (*v5)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 24) = v6;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 8), a3);
  v8 = *(unsigned int **)(a3 + 8);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 32) = v8;
  return a1;
}

void sub_1972F60F4(_Unwind_Exception *a1, void *a2)
{
  WebCore::ModelPlayer *v2;
  unsigned int **v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v5 = (unsigned int *)*((_QWORD *)v2 + 3);
  *((_QWORD *)v2 + 3) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v3, a2);
  WebCore::ModelPlayer::~ModelPlayer(v2);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::~ARKitInlinePreviewModelPlayer(WebKit::ARKitInlinePreviewModelPlayer *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E34D1AE0;
  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
  WebCore::ModelPlayer::~ModelPlayer(this);
}

uint64_t WebKit::ARKitInlinePreviewModelPlayer::layer(WebKit::ARKitInlinePreviewModelPlayer *this)
{
  return 0;
}

uint64_t WebKit::ARKitInlinePreviewModelPlayer::layerHostingContextIdentifier(WebKit::ARKitInlinePreviewModelPlayer *this)
{
  return 0;
}

void WebKit::ARKitInlinePreviewModelPlayer::getCamera(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18[3];
  char v19;
  uint64_t v20[2];
  char v21;
  IPC::Encoder *v22;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v20);
  if (v21 && (v4 = a1[3]) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    v6 = *a2;
    *a2 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E34D1CF0;
    v7[1] = v6;
    if (v21)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 56))(v5 + 16);
      v9 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v9 = 1973;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 528) = v9 + 16;
      *(_QWORD *)(v9 + 536) = v9 + 16;
      *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v9 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
      v22 = (IPC::Encoder *)v9;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, v20);
      v18[0] = v20[1];
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, v18);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = &off_1E34D1D28;
      v10[1] = v7;
      v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v18[0] = (uint64_t)v10;
      v18[1] = v11;
      (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, _QWORD))(*(_QWORD *)(v5 + 16) + 40))(v5 + 16, &v22, v18, 0);
      v13 = v18[0];
      v18[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = v22;
      v22 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    LOBYTE(v18[0]) = 0;
    v19 = 0;
    v17 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 16))(v17, v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

void sub_1972F63D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::setCamera(_QWORD *a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21[2];
  char v22;
  uint64_t v23[3];
  uint64_t v24[2];
  IPC::Encoder *v25;

  *(double *)v23 = a3;
  *(double *)&v23[1] = a4;
  *(double *)&v23[2] = a5;
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v21);
  if (v22 && (v7 = a1[3]) != 0 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v8 - 8));
    v9 = *a2;
    *a2 = 0;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E34D1D50;
    v10[1] = v9;
    if (v22)
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 16) + 56))(v8 + 16);
      v12 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v12 = 1980;
      *(_QWORD *)(v12 + 8) = v11;
      *(_QWORD *)(v12 + 528) = v12 + 16;
      *(_QWORD *)(v12 + 536) = v12 + 16;
      *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v12 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
      v25 = (IPC::Encoder *)v12;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, v21);
      v24[0] = v21[1];
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, v24);
      IPC::ArgumentCoder<WebCore::HTMLModelElementCamera,void>::encode((IPC::Encoder *)v12, v23);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = &off_1E34D1D78;
      v13[1] = v10;
      v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v24[0] = (uint64_t)v13;
      v24[1] = v14;
      (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, _QWORD))(*(_QWORD *)(v8 + 16) + 40))(v8 + 16, &v25, v24, 0);
      v16 = v24[0];
      v24[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = v25;
      v25 = 0;
      if (v17)
      {
        IPC::Encoder::~Encoder(v17, v15);
        WTF::fastFree(v18, v19);
      }
      CFRelease(*(CFTypeRef *)(v8 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v20 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 16))(v20, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
}

void sub_1972F6668(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::isPlayingAnimation(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18[2];
  char v19;
  uint64_t v20[2];
  IPC::Encoder *v21;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v18);
  if (v19 && (v4 = a1[3]) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    v6 = *a2;
    *a2 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E34D1DA0;
    v7[1] = v6;
    if (v19)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 56))(v5 + 16);
      v9 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v9 = 1977;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 528) = v9 + 16;
      *(_QWORD *)(v9 + 536) = v9 + 16;
      *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v9 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
      v21 = (IPC::Encoder *)v9;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, v18);
      v20[0] = v18[1];
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, v20);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = &off_1E34D1DD8;
      v10[1] = v7;
      v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v20[0] = (uint64_t)v10;
      v20[1] = v11;
      (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, _QWORD))(*(_QWORD *)(v5 + 16) + 40))(v5 + 16, &v21, v20, 0);
      v13 = v20[0];
      v20[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = v21;
      v21 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    LOWORD(v20[0]) = 0;
    v17 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 16))(v17, v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

void sub_1972F68EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::setAnimationIsPlaying(_QWORD *a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  size_t v4;
  char *v5;
  uint64_t v6;
  size_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30[2];
  char v31;
  uint64_t v32[2];
  IPC::Encoder *v33;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v30);
  if (!v31 || (v11 = a1[3]) == 0 || (v12 = *(_QWORD *)(v11 + 8)) == 0)
  {
    v27 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 16))(v27, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    return;
  }
  CFRetain(*(CFTypeRef *)(v12 - 8));
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v15 = v14;
  *v14 = &off_1E34D1E00;
  v14[1] = v13;
  if (!v31)
  {
    __break(1u);
LABEL_19:
    munmap(v14, *(_QWORD *)(v3 + 552));
LABEL_17:
    *(_QWORD *)(v3 + 528) = v5;
    *(_QWORD *)(v3 + 552) = v4;
    v18 = *(_QWORD *)(v3 + 544);
    goto LABEL_7;
  }
  v13 = v12 + 16;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 16) + 56))(v12 + 16);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1979;
  *(_QWORD *)(v3 + 8) = v16;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v33 = (IPC::Encoder *)v3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, v30);
  v32[0] = v30[1];
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, v32);
  v6 = *(_QWORD *)(v3 + 544);
  v7 = v6 + 1;
  v17 = *(_QWORD *)(v3 + 552);
  if (v17 < v6 + 1)
  {
    v28 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v4 = v28;
      v28 *= 2;
    }
    while (v4 < v7);
    v29 = (char *)mmap(0, v4, 3, 4098, -1, 0);
    if (v29 == (char *)-1)
    {
      __break(0xC471u);
      return;
    }
    v5 = v29;
    memcpy(v29, *(const void **)(v3 + 528), *(_QWORD *)(v3 + 544));
    v14 = *(_QWORD **)(v3 + 528);
    if (v14 == (_QWORD *)(v3 + 16))
      goto LABEL_17;
    goto LABEL_19;
  }
  v5 = *(char **)(v3 + 528);
  v18 = *(_QWORD *)(v3 + 544);
LABEL_7:
  bzero(&v5[v18], v6 - v18);
  *(_QWORD *)(v3 + 544) = v7;
  v19 = (_BYTE *)(*(_QWORD *)(v3 + 528) + v6);
  *(_QWORD *)(v3 + 536) = v19 + 1;
  *v19 = a2;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v20 = &off_1E34D1E28;
  v20[1] = v15;
  v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v32[0] = (uint64_t)v20;
  v32[1] = v21;
  (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, _QWORD))(*(_QWORD *)v13 + 40))(v13, &v33, v32, 0);
  v23 = v32[0];
  v32[0] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, v22);
    WTF::fastFree(v25, v26);
  }
  CFRelease(*(CFTypeRef *)(v12 - 8));
}

void sub_1972F6C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::isLoopingAnimation(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18[2];
  char v19;
  uint64_t v20[2];
  IPC::Encoder *v21;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v18);
  if (v19 && (v4 = a1[3]) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    v6 = *a2;
    *a2 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E34D1E50;
    v7[1] = v6;
    if (v19)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 56))(v5 + 16);
      v9 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v9 = 1975;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 528) = v9 + 16;
      *(_QWORD *)(v9 + 536) = v9 + 16;
      *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v9 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
      v21 = (IPC::Encoder *)v9;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, v18);
      v20[0] = v18[1];
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, v20);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = &off_1E34D1E78;
      v10[1] = v7;
      v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v20[0] = (uint64_t)v10;
      v20[1] = v11;
      (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, _QWORD))(*(_QWORD *)(v5 + 16) + 40))(v5 + 16, &v21, v20, 0);
      v13 = v20[0];
      v20[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = v21;
      v21 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    LOWORD(v20[0]) = 0;
    v17 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 16))(v17, v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

void sub_1972F6EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::setIsLoopingAnimation(_QWORD *a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  size_t v4;
  char *v5;
  uint64_t v6;
  size_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30[2];
  char v31;
  uint64_t v32[2];
  IPC::Encoder *v33;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v30);
  if (!v31 || (v11 = a1[3]) == 0 || (v12 = *(_QWORD *)(v11 + 8)) == 0)
  {
    v27 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 16))(v27, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    return;
  }
  CFRetain(*(CFTypeRef *)(v12 - 8));
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v15 = v14;
  *v14 = &off_1E34D1EA0;
  v14[1] = v13;
  if (!v31)
  {
    __break(1u);
LABEL_19:
    munmap(v14, *(_QWORD *)(v3 + 552));
LABEL_17:
    *(_QWORD *)(v3 + 528) = v5;
    *(_QWORD *)(v3 + 552) = v4;
    v18 = *(_QWORD *)(v3 + 544);
    goto LABEL_7;
  }
  v13 = v12 + 16;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 16) + 56))(v12 + 16);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1982;
  *(_QWORD *)(v3 + 8) = v16;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v33 = (IPC::Encoder *)v3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, v30);
  v32[0] = v30[1];
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, v32);
  v6 = *(_QWORD *)(v3 + 544);
  v7 = v6 + 1;
  v17 = *(_QWORD *)(v3 + 552);
  if (v17 < v6 + 1)
  {
    v28 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v4 = v28;
      v28 *= 2;
    }
    while (v4 < v7);
    v29 = (char *)mmap(0, v4, 3, 4098, -1, 0);
    if (v29 == (char *)-1)
    {
      __break(0xC471u);
      return;
    }
    v5 = v29;
    memcpy(v29, *(const void **)(v3 + 528), *(_QWORD *)(v3 + 544));
    v14 = *(_QWORD **)(v3 + 528);
    if (v14 == (_QWORD *)(v3 + 16))
      goto LABEL_17;
    goto LABEL_19;
  }
  v5 = *(char **)(v3 + 528);
  v18 = *(_QWORD *)(v3 + 544);
LABEL_7:
  bzero(&v5[v18], v6 - v18);
  *(_QWORD *)(v3 + 544) = v7;
  v19 = (_BYTE *)(*(_QWORD *)(v3 + 528) + v6);
  *(_QWORD *)(v3 + 536) = v19 + 1;
  *v19 = a2;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v20 = &off_1E34D1EC8;
  v20[1] = v15;
  v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v32[0] = (uint64_t)v20;
  v32[1] = v21;
  (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, _QWORD))(*(_QWORD *)v13 + 40))(v13, &v33, v32, 0);
  v23 = v32[0];
  v32[0] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, v22);
    WTF::fastFree(v25, v26);
  }
  CFRelease(*(CFTypeRef *)(v12 - 8));
}

void sub_1972F7210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::animationDuration(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18[2];
  char v19;
  _QWORD *v20;
  uint64_t v21;
  IPC::Encoder *v22;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v18);
  if (v19 && (v4 = a1[3]) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    v6 = *a2;
    *a2 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E34D1EF0;
    v7[1] = v6;
    if (v19)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 56))(v5 + 16);
      v9 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v9 = 1972;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 528) = v9 + 16;
      *(_QWORD *)(v9 + 536) = v9 + 16;
      *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v9 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
      v22 = (IPC::Encoder *)v9;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, v18);
      v20 = (_QWORD *)v18[1];
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, (uint64_t *)&v20);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = &off_1E34D1F28;
      v10[1] = v7;
      v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v20 = v10;
      v21 = v11;
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD **, _QWORD))(*(_QWORD *)(v5 + 16) + 40))(v5 + 16, &v22, &v20, 0);
      v13 = (uint64_t)v20;
      v20 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = v22;
      v22 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    LOBYTE(v20) = 0;
    LOBYTE(v21) = 0;
    v17 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v17 + 16))(v17, &v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

void sub_1972F749C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::animationCurrentTime(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18[2];
  char v19;
  _QWORD *v20;
  uint64_t v21;
  IPC::Encoder *v22;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v18);
  if (v19 && (v4 = a1[3]) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    v6 = *a2;
    *a2 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E34D1F50;
    v7[1] = v6;
    if (v19)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 56))(v5 + 16);
      v9 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v9 = 1971;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 528) = v9 + 16;
      *(_QWORD *)(v9 + 536) = v9 + 16;
      *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v9 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
      v22 = (IPC::Encoder *)v9;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, v18);
      v20 = (_QWORD *)v18[1];
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, (uint64_t *)&v20);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = &off_1E34D1F78;
      v10[1] = v7;
      v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v20 = v10;
      v21 = v11;
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD **, _QWORD))(*(_QWORD *)(v5 + 16) + 40))(v5 + 16, &v22, &v20, 0);
      v13 = (uint64_t)v20;
      v20 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = v22;
      v22 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    LOBYTE(v20) = 0;
    LOBYTE(v21) = 0;
    v17 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v17 + 16))(v17, &v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

void sub_1972F7728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::setAnimationCurrentTime(_QWORD *a1, uint64_t *a2, double a3)
{
  size_t v3;
  char *v4;
  unint64_t v5;
  size_t v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29[2];
  char v30;
  uint64_t v31[2];
  IPC::Encoder *v32;

  v9 = a1;
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v29);
  if (!v30 || (v10 = v9[3]) == 0 || (v11 = *(_QWORD *)(v10 + 8)) == 0)
  {
    v26 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 16))(v26, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    return;
  }
  CFRetain(*(CFTypeRef *)(v11 - 8));
  v12 = *a2;
  *a2 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v14 = v13;
  *v13 = &off_1E34D1FA0;
  v13[1] = v12;
  if (!v30)
  {
    __break(1u);
LABEL_19:
    munmap(v13, *(_QWORD *)(v12 + 552));
LABEL_17:
    *(_QWORD *)(v12 + 528) = v4;
    *(_QWORD *)(v12 + 552) = v3;
    v16 = *(_QWORD *)(v12 + 544);
    goto LABEL_7;
  }
  v9 = (_QWORD *)(v11 + 16);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 16) + 56))(v11 + 16);
  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1978;
  *(_QWORD *)(v12 + 8) = v15;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v32 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, v29);
  v31[0] = v29[1];
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, v31);
  v16 = *(_QWORD *)(v12 + 544);
  v5 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 8;
  v17 = *(_QWORD *)(v12 + 552);
  if (v17 < v5 + 8)
  {
    v27 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v3 = v27;
      v27 *= 2;
    }
    while (v3 < v6);
    v28 = (char *)mmap(0, v3, 3, 4098, -1, 0);
    if (v28 == (char *)-1)
    {
      __break(0xC471u);
      return;
    }
    v4 = v28;
    memcpy(v28, *(const void **)(v12 + 528), *(_QWORD *)(v12 + 544));
    v13 = *(_QWORD **)(v12 + 528);
    if (v13 == (_QWORD *)(v12 + 16))
      goto LABEL_17;
    goto LABEL_19;
  }
  v4 = *(char **)(v12 + 528);
LABEL_7:
  bzero(&v4[v16], v5 - v16);
  *(_QWORD *)(v12 + 544) = v6;
  v18 = (double *)(*(_QWORD *)(v12 + 528) + v5);
  *(_QWORD *)(v12 + 536) = v18 + 1;
  *v18 = a3;
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v19 = &off_1E34D1FC8;
  v19[1] = v14;
  v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v31[0] = (uint64_t)v19;
  v31[1] = v20;
  (*(void (**)(_QWORD *, IPC::Encoder **, uint64_t *, _QWORD))(*v9 + 40))(v9, &v32, v31, 0);
  v22 = v31[0];
  v31[0] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v32;
  v32 = 0;
  if (v23)
  {
    IPC::Encoder::~Encoder(v23, v21);
    WTF::fastFree(v24, v25);
  }
  CFRelease(*(CFTypeRef *)(v11 - 8));
}

void sub_1972F7A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::hasAudio(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18[2];
  char v19;
  uint64_t v20[2];
  IPC::Encoder *v21;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v18);
  if (v19 && (v4 = a1[3]) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    v6 = *a2;
    *a2 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E34D1FF0;
    v7[1] = v6;
    if (v19)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 56))(v5 + 16);
      v9 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v9 = 1974;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 528) = v9 + 16;
      *(_QWORD *)(v9 + 536) = v9 + 16;
      *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v9 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
      v21 = (IPC::Encoder *)v9;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, v18);
      v20[0] = v18[1];
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, v20);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = &off_1E34D2018;
      v10[1] = v7;
      v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v20[0] = (uint64_t)v10;
      v20[1] = v11;
      (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, _QWORD))(*(_QWORD *)(v5 + 16) + 40))(v5 + 16, &v21, v20, 0);
      v13 = v20[0];
      v20[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = v21;
      v21 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    LOWORD(v20[0]) = 0;
    v17 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 16))(v17, v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

void sub_1972F7D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::isMuted(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18[2];
  char v19;
  uint64_t v20[2];
  IPC::Encoder *v21;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v18);
  if (v19 && (v4 = a1[3]) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    v6 = *a2;
    *a2 = 0;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E34D2040;
    v7[1] = v6;
    if (v19)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 56))(v5 + 16);
      v9 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v9 = 1976;
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 528) = v9 + 16;
      *(_QWORD *)(v9 + 536) = v9 + 16;
      *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v9 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
      v21 = (IPC::Encoder *)v9;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, v18);
      v20[0] = v18[1];
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, v20);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = &off_1E34D2068;
      v10[1] = v7;
      v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v20[0] = (uint64_t)v10;
      v20[1] = v11;
      (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, _QWORD))(*(_QWORD *)(v5 + 16) + 40))(v5 + 16, &v21, v20, 0);
      v13 = v20[0];
      v20[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = v21;
      v21 = 0;
      if (v14)
      {
        IPC::Encoder::~Encoder(v14, v12);
        WTF::fastFree(v15, v16);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    LOWORD(v20[0]) = 0;
    v17 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 16))(v17, v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
}

void sub_1972F7F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::setIsMuted(_QWORD *a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  size_t v4;
  char *v5;
  uint64_t v6;
  size_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30[2];
  char v31;
  uint64_t v32[2];
  IPC::Encoder *v33;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 240))(v30);
  if (!v31 || (v11 = a1[3]) == 0 || (v12 = *(_QWORD *)(v11 + 8)) == 0)
  {
    v27 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 16))(v27, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    return;
  }
  CFRetain(*(CFTypeRef *)(v12 - 8));
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v15 = v14;
  *v14 = &off_1E34D2090;
  v14[1] = v13;
  if (!v31)
  {
    __break(1u);
LABEL_19:
    munmap(v14, *(_QWORD *)(v3 + 552));
LABEL_17:
    *(_QWORD *)(v3 + 528) = v5;
    *(_QWORD *)(v3 + 552) = v4;
    v18 = *(_QWORD *)(v3 + 544);
    goto LABEL_7;
  }
  v13 = v12 + 16;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 16) + 56))(v12 + 16);
  v3 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v3 = 1983;
  *(_QWORD *)(v3 + 8) = v16;
  *(_QWORD *)(v3 + 528) = v3 + 16;
  *(_QWORD *)(v3 + 536) = v3 + 16;
  *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v3 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
  v33 = (IPC::Encoder *)v3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, v30);
  v32[0] = v30[1];
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, v32);
  v6 = *(_QWORD *)(v3 + 544);
  v7 = v6 + 1;
  v17 = *(_QWORD *)(v3 + 552);
  if (v17 < v6 + 1)
  {
    v28 = (2 * v17 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v4 = v28;
      v28 *= 2;
    }
    while (v4 < v7);
    v29 = (char *)mmap(0, v4, 3, 4098, -1, 0);
    if (v29 == (char *)-1)
    {
      __break(0xC471u);
      return;
    }
    v5 = v29;
    memcpy(v29, *(const void **)(v3 + 528), *(_QWORD *)(v3 + 544));
    v14 = *(_QWORD **)(v3 + 528);
    if (v14 == (_QWORD *)(v3 + 16))
      goto LABEL_17;
    goto LABEL_19;
  }
  v5 = *(char **)(v3 + 528);
  v18 = *(_QWORD *)(v3 + 544);
LABEL_7:
  bzero(&v5[v18], v6 - v18);
  *(_QWORD *)(v3 + 544) = v7;
  v19 = (_BYTE *)(*(_QWORD *)(v3 + 528) + v6);
  *(_QWORD *)(v3 + 536) = v19 + 1;
  *v19 = a2;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v20 = &off_1E34D20B8;
  v20[1] = v15;
  v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v32[0] = (uint64_t)v20;
  v32[1] = v21;
  (*(void (**)(uint64_t, IPC::Encoder **, uint64_t *, _QWORD))(*(_QWORD *)v13 + 40))(v13, &v33, v32, 0);
  v23 = v32[0];
  v32[0] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, v22);
    WTF::fastFree(v25, v26);
  }
  CFRelease(*(CFTypeRef *)(v12 - 8));
}

void sub_1972F82DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayer::accessibilityChildren(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

_QWORD *WebKit::ARKitInlinePreviewModelPlayerIOS::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  result = WebKit::ARKitInlinePreviewModelPlayerIOS::ARKitInlinePreviewModelPlayerIOS(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_1972F83E0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::ARKitInlinePreviewModelPlayerIOS::ARKitInlinePreviewModelPlayerIOS(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _BYTE v5[24];

  *(_QWORD *)WebKit::ARKitInlinePreviewModelPlayer::ARKitInlinePreviewModelPlayer((uint64_t)a1, a2, a3) = off_1E34D1BE8;
  {
    WebKit::instances(void)::instances = 0;
    *(_QWORD *)&dword_1EE341DF8 = 0;
  }
  WTF::WeakHashSet<WebKit::ARKitInlinePreviewModelPlayerIOS,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::ARKitInlinePreviewModelPlayerIOS>((uint64_t)&WebKit::instances(void)::instances, a1, (uint64_t)v5);
  return a1;
}

void sub_1972F8464(_Unwind_Exception *a1, void *a2)
{
  WebKit::ARKitInlinePreviewModelPlayer *v2;

  WebKit::ARKitInlinePreviewModelPlayer::~ARKitInlinePreviewModelPlayer(v2, a2);
  _Unwind_Resume(a1);
}

unsigned int *WTF::WeakHashSet<WebKit::ARKitInlinePreviewModelPlayerIOS,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::ARKitInlinePreviewModelPlayerIOS>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  int v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  unsigned int *result;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v9 = *(_DWORD *)(v8 - 4);
      if (!v9)
        goto LABEL_25;
      v10 = 0;
      do
      {
        while (1)
        {
          v11 = *(_QWORD *)(v8 + 8 * --v9);
          if ((unint64_t)(v11 + 1) >= 2 && !*(_QWORD *)(v11 + 8))
            break;
          if (!v9)
            goto LABEL_14;
        }
        *(_QWORD *)(v8 + 8 * v9) = 0;
        do
        {
          v12 = __ldaxr((unsigned int *)v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, (unsigned int *)v11));
        if (!v13)
        {
          atomic_store(1u, (unsigned int *)v11);
          WTF::fastFree((WTF *)v11, a2);
        }
        *(_QWORD *)(v8 + 8 * v9) = -1;
        ++v10;
      }
      while (v9);
LABEL_14:
      v8 = *(_QWORD *)a1;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        v14 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v15 = *(_DWORD *)(v14 - 12);
        else
          v15 = 0;
        *(_DWORD *)(v14 - 12) = v15 - v10;
        v8 = *(_QWORD *)a1;
      }
      if (v8)
      {
        v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          v8 = *(_QWORD *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8)
          {
            v18 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_28:
        v18 = *(_DWORD *)(v8 - 12);
        v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_30:
          *(_DWORD *)(a1 + 12) = 2 * v19;
          goto LABEL_31;
        }
LABEL_29:
        v19 = v18;
        goto LABEL_30;
      }
    }
    v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v20 = a2[2];
  if (!v20)
  {
    v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = a2;
    v22 = (unsigned int *)a2[2];
    a2[2] = v20;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
      v20 = a2[2];
    }
  }
  do
    v25 = __ldaxr((unsigned int *)v20);
  while (__stlxr(v25 + 1, (unsigned int *)v20));
  do
    v26 = __ldaxr((unsigned int *)v20);
  while (__stlxr(v26 + 1, (unsigned int *)v20));
  v33 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v33, a3);
  result = (unsigned int *)v33;
  v33 = 0;
  if (result)
  {
    do
    {
      v31 = __ldaxr(result);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, result));
    if (!v32)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v27);
    }
  }
  if (v20)
  {
    do
    {
      v29 = __ldaxr((unsigned int *)v20);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, (unsigned int *)v20));
    if (!v30)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v27);
    }
  }
  return result;
}

void sub_1972F86D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  if (a10)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)a10);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)a10));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)a10);
      WTF::fastFree(a10, a2);
    }
  }
  if (v10)
  {
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::ARKitInlinePreviewModelPlayerIOS::~ARKitInlinePreviewModelPlayerIOS(WebKit::ARKitInlinePreviewModelPlayerIOS *this, unsigned int **a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int **v15;
  uint64_t v16;
  uint64_t v17;

  {
    WebKit::instances(void)::instances = 0;
    *(_QWORD *)&dword_1EE341DF8 = 1;
    goto LABEL_32;
  }
  if (++dword_1EE341DF8 > dword_1EE341DFC)
  {
    v3 = WebKit::instances(void)::instances;
    if (WebKit::instances(void)::instances)
    {
      v4 = *(_DWORD *)(WebKit::instances(void)::instances - 4);
      if (!v4)
        goto LABEL_26;
      v5 = 0;
      do
      {
        while (1)
        {
          v6 = *(_QWORD *)(v3 + 8 * --v4);
          if ((unint64_t)(v6 + 1) >= 2 && !*(_QWORD *)(v6 + 8))
            break;
          if (!v4)
            goto LABEL_15;
        }
        *(_QWORD *)(v3 + 8 * v4) = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)v6));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)v6);
          WTF::fastFree((WTF *)v6, a2);
        }
        *(_QWORD *)(v3 + 8 * v4) = -1;
        ++v5;
      }
      while (v4);
LABEL_15:
      v3 = WebKit::instances(void)::instances;
      if (v5)
      {
        *(_DWORD *)(WebKit::instances(void)::instances - 16) += v5;
        if (WebKit::instances(void)::instances)
          v9 = *(_DWORD *)(WebKit::instances(void)::instances - 12);
        else
          v9 = 0;
        *(_DWORD *)(WebKit::instances(void)::instances - 12) = v9 - v5;
        v3 = WebKit::instances(void)::instances;
      }
      if (v3)
      {
        v10 = *(_DWORD *)(v3 - 4);
        if (v10 >= 9 && 6 * *(_DWORD *)(v3 - 12) < v10)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&WebKit::instances(void)::instances);
          v3 = WebKit::instances(void)::instances;
          dword_1EE341DF8 = 0;
          if (WebKit::instances(void)::instances)
          {
LABEL_28:
            v12 = *(_DWORD *)(v3 - 12);
            v13 = 0x7FFFFFFF;
            if (v12 >= 0x7FFFFFFF)
              goto LABEL_34;
            goto LABEL_33;
          }
          v12 = 0;
LABEL_33:
          v13 = v12;
LABEL_34:
          dword_1EE341DFC = 2 * v13;
          goto LABEL_35;
        }
LABEL_26:
        dword_1EE341DF8 = 0;
        goto LABEL_28;
      }
    }
LABEL_32:
    v12 = 0;
    dword_1EE341DF8 = 0;
    goto LABEL_33;
  }
LABEL_35:
  v14 = *((_QWORD *)this + 2);
  if (v14 && *(_QWORD *)(v14 + 8))
  {
    v17 = *((_QWORD *)this + 2);
    v15 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&WebKit::instances(void)::instances, &v17);
    a2 = v15;
    if (WebKit::instances(void)::instances)
    {
      v16 = WebKit::instances(void)::instances + 8 * *(unsigned int *)(WebKit::instances(void)::instances - 4);
      if ((unsigned int **)v16 == v15)
        goto LABEL_44;
    }
    else
    {
      if (!v15)
        goto LABEL_44;
      v16 = 0;
    }
    if ((unsigned int **)v16 != v15)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&WebKit::instances(void)::instances, v15);
  }
LABEL_44:
  WebKit::ARKitInlinePreviewModelPlayer::~ARKitInlinePreviewModelPlayer(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::ARKitInlinePreviewModelPlayerIOS::~ARKitInlinePreviewModelPlayerIOS(this, a2);
  WTF::fastFree(v2, v3);
}

void sub_1972F895C(_Unwind_Exception *a1, void *a2)
{
  WebKit::ARKitInlinePreviewModelPlayer *v2;

  WebKit::ARKitInlinePreviewModelPlayer::~ARKitInlinePreviewModelPlayer(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::ARKitInlinePreviewModelPlayerIOS::modelPlayerForPageAndLayerID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  {
    WebKit::instances(void)::instances = 0;
    *(_QWORD *)&dword_1EE341DF8 = 0;
  }
  v27 = &WebKit::instances(void)::instances;
  v28 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&WebKit::instances(void)::instances);
  v29 = v6;
  v7 = WebKit::instances(void)::instances;
  if (WebKit::instances(void)::instances)
  {
    v8 = *(unsigned int *)(WebKit::instances(void)::instances - 4);
    v9 = WebKit::instances(void)::instances + 8 * v8;
    v30 = v9;
    v31 = v9;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v27);
  }
  else
  {
    v30 = 0;
    v31 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v27);
    v9 = 0;
    v8 = 0;
  }
  v22 = &WebKit::instances(void)::instances;
  v23 = v9;
  v24 = v9;
  v25 = v9;
  v26 = v7 + 8 * v8;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v22);
  v10 = v28;
  v11 = (_QWORD *)v23;
  while (v10 != v11)
  {
    v12 = *(_QWORD *)(*v10 + 8);
    v13 = *(_QWORD *)(v12 + 32);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v15 = *(_QWORD *)(v12 + 24);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 8);
          if (v16
            && v16 - 16 == a1
            && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14) == a2
            && v18 == a3)
          {
            return v12;
          }
        }
      }
    }
    v20 = v10 + 1;
    v28 = v10 + 1;
    if (v10 + 1 != v29)
    {
      while ((unint64_t)(*v20 + 1) <= 1)
      {
        if (++v20 == v29)
        {
          v20 = v29;
          break;
        }
      }
      v28 = v20;
    }
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v27);
    v10 = v28;
    ++*((_DWORD *)v27 + 2);
  }
  return 0;
}

_QWORD *WebKit::ARKitInlinePreviewModelPlayerIOS::modelIdentifier@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = this[4];
  if (v3
    && (this = *(_QWORD **)(v3 + 8)) != 0
    && (this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 40))(this)) != 0)
  {
    *(_QWORD *)a2 = this;
    *(_QWORD *)(a2 + 8) = v4;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v5;
  return this;
}

void WebKit::ARKitInlinePreviewModelPlayerIOS::enterFullscreen(WebKit::ARKitInlinePreviewModelPlayerIOS *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v15[2];
  char v16;
  IPC::Encoder *v17;
  uint64_t v18;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      v4 = *((_QWORD *)this + 4);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
          if (v6)
          {
            v8 = v7;
            v15[0] = v6;
            v15[1] = v7;
            v16 = 1;
            v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 56))(v2 + 16);
            v10 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v10 = 2079;
            *(_QWORD *)(v10 + 8) = v9;
            *(_QWORD *)(v10 + 528) = v10 + 16;
            *(_QWORD *)(v10 + 536) = v10 + 16;
            *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v10 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
            v17 = (IPC::Encoder *)v10;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, v15);
            v18 = v8;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, &v18);
            (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v2 + 16) + 32))(v2 + 16, &v17, 0);
            v12 = v17;
            v17 = 0;
            if (v12)
            {
              IPC::Encoder::~Encoder(v12, v11);
              WTF::fastFree(v13, v14);
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void sub_1972F8C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, IPC::Encoder *a13)
{
  uint64_t v13;

  CFRelease(*(CFTypeRef *)(v13 - 8));
  _Unwind_Resume(a1);
}

void WebKit::ARKitInlinePreviewModelPlayerIOS::setInteractionEnabled(WebKit::ARKitInlinePreviewModelPlayerIOS *this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  unint64_t v23;
  size_t v24;
  char *v25;
  void *v26;
  uint64_t v27[2];
  char v28;
  IPC::Encoder *v29;
  uint64_t v30;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      v6 = *((_QWORD *)this + 4);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
          if (v8)
          {
            v10 = v9;
            v27[0] = v8;
            v27[1] = v9;
            v28 = 1;
            v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 56))(v3 + 16);
            v12 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v12 = 1981;
            *(_QWORD *)(v12 + 8) = v11;
            *(_QWORD *)(v12 + 528) = v12 + 16;
            *(_QWORD *)(v12 + 536) = v12 + 16;
            *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v12 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
            v29 = (IPC::Encoder *)v12;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, v27);
            v30 = v10;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, &v30);
            v13 = *(_QWORD *)(v12 + 544);
            v14 = v13 + 1;
            v15 = *(_QWORD *)(v12 + 552);
            if (v15 < v13 + 1)
            {
              v23 = (2 * v15 + 4095) & 0xFFFFFFFFFFFFF000;
              do
              {
                v24 = v23;
                v23 *= 2;
              }
              while (v24 < v14);
              v25 = (char *)mmap(0, v24, 3, 4098, -1, 0);
              if (v25 == (char *)-1)
              {
                __break(0xC471u);
                return;
              }
              v16 = v25;
              memcpy(v25, *(const void **)(v12 + 528), *(_QWORD *)(v12 + 544));
              v26 = *(void **)(v12 + 528);
              if (v26 != (void *)(v12 + 16))
                munmap(v26, *(_QWORD *)(v12 + 552));
              *(_QWORD *)(v12 + 528) = v16;
              *(_QWORD *)(v12 + 552) = v24;
              v17 = *(_QWORD *)(v12 + 544);
            }
            else
            {
              v16 = *(char **)(v12 + 528);
              v17 = *(_QWORD *)(v12 + 544);
            }
            bzero(&v16[v17], v13 - v17);
            *(_QWORD *)(v12 + 544) = v14;
            v18 = (_BYTE *)(*(_QWORD *)(v12 + 528) + v13);
            *(_QWORD *)(v12 + 536) = v18 + 1;
            *v18 = a2;
            (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v3 + 16) + 32))(v3 + 16, &v29, 0);
            v20 = v29;
            v29 = 0;
            if (v20)
            {
              IPC::Encoder::~Encoder(v20, v19);
              WTF::fastFree(v21, v22);
            }
          }
        }
      }
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void sub_1972F8EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, IPC::Encoder *a13)
{
  uint64_t v13;

  CFRelease(*(CFTypeRef *)(v13 - 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::getCamera(WTF::CompletionHandler<void ()(std::optional<WebCore::HTMLModelElementCamera> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1CF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::getCamera(WTF::CompletionHandler<void ()(std::optional<WebCore::HTMLModelElementCamera> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1CF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::getCamera(WTF::CompletionHandler<void ()(std::optional<WebCore::HTMLModelElementCamera> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v8, a2);
  if (v10)
  {
    LOBYTE(v5) = 0;
    v7 = 0;
  }
  else
  {
    v5 = v8;
    v6 = v9;
    v7 = 1;
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v3 + 16))(v3, &v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v10 != -1)
    return ((uint64_t (*)(__int128 *, __int128 *))off_1E34D1D08[v10])(&v5, &v8);
  return result;
}

void sub_1972F9050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28)
{
  uint64_t v28;

  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (a28 != -1)
    ((void (*)(char *, char *))off_1E34D1D08[a28])(&a17, &a18);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1D28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1D28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  uint64_t result;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  CFTypeRef cf;
  __int128 v32;
  uint64_t v33;
  unsigned __int8 v34;
  char v35;
  _BYTE v36[80];
  int v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>((uint64_t *)(a1 + 8));
  v4 = *a2;
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>((uint64_t *)(a1 + 8));
  v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    v15 = 0;
    v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v17 + 16))(v17, v4, v5);
        v15 = 0;
        v25 = *a2;
        v26 = a2[1];
        v27 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v16 = 0;
        if (v27 && v26)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25, v26);
          v16 = *a2;
          v15 = a2[1];
        }
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_39;
  }
  v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  v7 = *v6;
  if (v7 >= 2)
  {
    v15 = v5;
    v16 = v4;
LABEL_39:
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18 && v15)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v16);
    LOBYTE(v39) = 0;
    v42 = 0;
    goto LABEL_41;
  }
  if (v7)
  {
    IPC::Decoder::decode<WebCore::HTMLModelElementCamera>(a2, (uint64_t)&v32);
    v8 = v34;
    if (v34)
    {
      v39 = v32;
      v40 = v33;
      v41 = 0;
      v8 = 1;
    }
    else
    {
      LOBYTE(v39) = 0;
    }
    v42 = v8;
    if (!v8)
      goto LABEL_41;
LABEL_29:
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v36, (uint64_t)&v39);
    v38 = 1;
    if (!v42)
      goto LABEL_32;
    if (v41 == -1)
      goto LABEL_32;
    ((void (*)(__int128 *, __int128 *))off_1E34D1D08[v41])(&v32, &v39);
    if (v38)
      goto LABEL_32;
    goto LABEL_43;
  }
  IPC::Decoder::decode<WebCore::ResourceError>(a2, (uint64_t)&v32);
  if (v35)
  {
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v28, (uint64_t *)&v32);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)&v39, (uint64_t *)&v28);
    v41 = 1;
    v42 = 1;
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    v12 = v30;
    v30 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v29;
    v29 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    LOBYTE(v39) = 0;
    v42 = 0;
  }
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32, v10);
  if (v42)
    goto LABEL_29;
LABEL_41:
  v19 = *a2;
  v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v21 = a2[3];
  if (v21)
  {
    if (v20)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v19);
      if (v42)
        goto LABEL_29;
    }
  }
  v36[0] = 0;
  v38 = 0;
LABEL_43:
  v22 = *a2;
  v23 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v24 = a2[3];
  if (!v24)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(v2);
  if (!v23)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
  if (!v38)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(v2);
LABEL_32:
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::HTMLModelElementCamera,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&v39, (uint64_t)v36);
  result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()(v2, (uint64_t)&v39);
  if (v41 != -1)
    result = ((uint64_t (*)(__int128 *, __int128 *))off_1E34D1D08[v41])(&v32, &v39);
  if (v38)
  {
    if (v37 != -1)
      return ((uint64_t (*)(__int128 *, _BYTE *))off_1E34D1D08[v37])(&v39, v36);
  }
  return result;
}

void sub_1972F94B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, CFTypeRef cf, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,int a42,char a43)
{
  uint64_t v43;

  if (a43)
  {
    if (a41 != -1)
      ((void (*)(uint64_t, char *))off_1E34D1D08[a41])(v43 - 144, &a31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementGetCamera,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>>(uint64_t *a1)
{
  uint64_t result;
  char v2;
  _QWORD v3[10];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v3[1] = 0;
  v3[2] = 0x3FF0000000000000;
  v4 = 0;
  result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WebCore::HTMLModelElementCamera,WebCore::ResourceError>)>::operator()(a1, (uint64_t)v3);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34D1D08[v4])(&v2, v3);
  return result;
}

void sub_1972F96A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1)
    ((void (*)(char *, char *))off_1E34D1D08[a24])(&a13, &a14);
  _Unwind_Resume(exception_object);
}

_QWORD *IPC::Decoder::decode<WebCore::HTMLModelElementCamera>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::HTMLModelElementCamera,void>::decode(a1, a2);
  if (!*(_BYTE *)(a2 + 24))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (_QWORD *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setCamera(WebCore::HTMLModelElementCamera,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1D50;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setCamera(WebCore::HTMLModelElementCamera,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1D50;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setCamera(WebCore::HTMLModelElementCamera,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972F97E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetCamera,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1D78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetCamera,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1D78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetCamera,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v3;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetCamera,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetCamera,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v3 < 0x100u)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetCamera,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v5 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, v3 != 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1972F98F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetCamera,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972F9954(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isPlayingAnimation(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1DA0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isPlayingAnimation(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1DA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isPlayingAnimation(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[80];
  int v6;
  __int16 v7;

  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v5, a2);
  if (v6)
  {
    v7 = 0;
  }
  else
  {
    LOBYTE(v7) = v5[0];
    HIBYTE(v7) = 1;
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v3 + 16))(v3, &v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v6 != -1)
    return ((uint64_t (*)(__int16 *, _BYTE *))off_1E34D1DB8[v6])(&v7, v5);
  return result;
}

void sub_1972F9AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v19;
  uint64_t v20;

  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (a19 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D1DB8[a19])(v20 - 17, &a9);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsPlayingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1DD8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsPlayingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1DD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsPlayingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t result;
  _BYTE v4[80];
  int v5;
  char v6;
  _BYTE v7[80];
  int v8;
  char v9;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsPlayingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>>(v4, a2);
  if (!v6)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsPlayingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(v2);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v7, (uint64_t)v4);
  result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(v2, (uint64_t)v7);
  if (v8 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))off_1E34D1DB8[v8])(&v9, v7);
  if (v6)
  {
    if (v5 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34D1DB8[v5])(v7, v4);
  }
  return result;
}

void sub_1972F9C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  uint64_t v35;

  if (a35 != -1)
    ((void (*)(uint64_t, __int16 *))off_1E34D1DB8[a35])(v35 - 17, &a23);
  if (a21)
  {
    if (a19 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34D1DB8[a19])(v35 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsPlayingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(uint64_t *a1)
{
  uint64_t result;
  _BYTE v2[80];
  int v3;
  char v4;

  v2[0] = 0;
  v3 = 0;
  result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a1, (uint64_t)v2);
  if (v3 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34D1DB8[v3])(&v4, v2);
  return result;
}

void sub_1972F9CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v19;

  if (a19 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D1DB8[a19])(v19 - 17, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>>(_BYTE *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[80];
  int v34;
  char v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  CFTypeRef cf;
  uint64_t v40[10];
  char v41;

  v4 = a2[2];
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 <= v7)
  {
    v16 = 0;
    v17 = 0;
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
        v17 = *a2;
        v16 = a2[1];
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
    }
    goto LABEL_30;
  }
  v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    v16 = v6;
    v17 = 0;
LABEL_30:
    v6 = 0;
    v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    v19 = a2[3];
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v17, v16);
        v5 = *a2;
        v6 = a2[1];
      }
      else
      {
        v6 = 0;
        v5 = 0;
      }
    }
    goto LABEL_31;
  }
  if (*v8 >= 2u)
  {
LABEL_31:
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v5);
LABEL_36:
    v33[0] = 0;
    v35 = 0;
    goto LABEL_37;
  }
  if (*v8)
  {
    if (v6 <= (unint64_t)&v8[-v5 + 1])
    {
      v21 = 0;
      v22 = 0;
      *a2 = 0;
      a2[1] = 0;
      v23 = a2[3];
      if (v23)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
        v21 = 0;
        v30 = *a2;
        v31 = a2[1];
        v32 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v22 = 0;
        if (v32)
        {
          if (v31)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v30);
            v22 = *a2;
            v21 = a2[1];
          }
        }
      }
    }
    else
    {
      a2[2] = (uint64_t)(v8 + 2);
      v9 = v8[1];
      if (v9 < 2)
      {
        v33[0] = v9 != 0;
        v34 = 0;
        v35 = 1;
        goto LABEL_25;
      }
      v21 = v6;
      v22 = v5;
    }
    *a2 = 0;
    a2[1] = 0;
    v24 = a2[3];
    if (v24 && v21)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v24 + 16))(v24, v22, v21);
    goto LABEL_36;
  }
  IPC::Decoder::decode<WebCore::ResourceError>(a2, (uint64_t)v40);
  if (v41)
  {
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v36, v40);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v33, (uint64_t *)&v36);
    v34 = 1;
    v35 = 1;
    v11 = cf;
    cf = 0;
    if (v11)
      CFRelease(v11);
    v12 = v38;
    v38 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v37;
    v37 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v36;
    v36 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  else
  {
    v33[0] = 0;
    v35 = 0;
  }
  std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v40, v10);
  if (v35)
  {
LABEL_25:
    result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, (uint64_t)v33);
    a1[88] = 1;
    if (!v35)
      return result;
    if (v34 == -1)
      return result;
    result = ((uint64_t (*)(uint64_t *, _BYTE *))off_1E34D1DB8[v34])(v40, v33);
    if (a1[88])
      return result;
    goto LABEL_39;
  }
LABEL_37:
  v25 = *a2;
  v26 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v27 = a2[3];
  if (v27)
  {
    if (v26)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, v25);
      if (v35)
        goto LABEL_25;
    }
  }
  *a1 = 0;
  a1[88] = 0;
LABEL_39:
  v28 = *a2;
  v29 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (result)
  {
    if (v29)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v28);
  }
  return result;
}

void sub_1972FA064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,char a22,WTF::StringImpl *a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,CFTypeRef cf)
{
  uint64_t v31;

  if (a22)
  {
    if (a20 != -1)
      ((void (*)(uint64_t, char *))off_1E34D1DB8[a20])(v31 - 120, &a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setAnimationIsPlaying(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1E00;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setAnimationIsPlaying(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1E00;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setAnimationIsPlaying(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972FA230(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetAnimationIsPlaying,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1E28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetAnimationIsPlaying,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1E28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetAnimationIsPlaying,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v3;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetAnimationIsPlaying,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetAnimationIsPlaying,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v3 < 0x100u)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetAnimationIsPlaying,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v5 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, v3 != 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1972FA344(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetAnimationIsPlaying,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972FA3A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isLoopingAnimation(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1E50;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isLoopingAnimation(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1E50;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isLoopingAnimation(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[80];
  int v6;
  __int16 v7;

  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v5, a2);
  if (v6)
  {
    v7 = 0;
  }
  else
  {
    LOBYTE(v7) = v5[0];
    HIBYTE(v7) = 1;
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v3 + 16))(v3, &v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v6 != -1)
    return ((uint64_t (*)(__int16 *, _BYTE *))off_1E34D1DB8[v6])(&v7, v5);
  return result;
}

void sub_1972FA4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v19;
  uint64_t v20;

  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (a19 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D1DB8[a19])(v20 - 17, &a9);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsLoopingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1E78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsLoopingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1E78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsLoopingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t result;
  _BYTE v4[80];
  int v5;
  char v6;
  _BYTE v7[80];
  int v8;
  char v9;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsLoopingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>>(v4, a2);
  if (!v6)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsLoopingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(v2);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v7, (uint64_t)v4);
  result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(v2, (uint64_t)v7);
  if (v8 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))off_1E34D1DB8[v8])(&v9, v7);
  if (v6)
  {
    if (v5 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34D1DB8[v5])(v7, v4);
  }
  return result;
}

void sub_1972FA680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  uint64_t v35;

  if (a35 != -1)
    ((void (*)(uint64_t, __int16 *))off_1E34D1DB8[a35])(v35 - 17, &a23);
  if (a21)
  {
    if (a19 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34D1DB8[a19])(v35 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsLoopingAnimation,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(uint64_t *a1)
{
  uint64_t result;
  _BYTE v2[80];
  int v3;
  char v4;

  v2[0] = 0;
  v3 = 0;
  result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a1, (uint64_t)v2);
  if (v3 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34D1DB8[v3])(&v4, v2);
  return result;
}

void sub_1972FA738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v19;

  if (a19 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D1DB8[a19])(v19 - 17, &a9);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setIsLoopingAnimation(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1EA0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setIsLoopingAnimation(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1EA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setIsLoopingAnimation(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972FA824(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetIsLoopingAnimation,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1EC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetIsLoopingAnimation,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1EC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetIsLoopingAnimation,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v3;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetIsLoopingAnimation,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetIsLoopingAnimation,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v3 < 0x100u)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetIsLoopingAnimation,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v5 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, v3 != 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1972FA938(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetIsLoopingAnimation,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972FA994(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::animationDuration(WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1EF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::animationDuration(WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1EF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::animationDuration(WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  _QWORD v7[10];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v7, a2);
  if (v8)
  {
    LOBYTE(v5) = 0;
    v6 = 0;
  }
  else
  {
    v5 = v7[0];
    v6 = 1;
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 16))(v3, &v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8 != -1)
    return ((uint64_t (*)(uint64_t *, _QWORD *))off_1E34D1F08[v8])(&v5, v7);
  return result;
}

void sub_1972FAB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  uint64_t v26;

  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (a26 != -1)
    ((void (*)(char *, char *))off_1E34D1F08[a26])(&a15, &a16);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementAnimationDuration,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1F28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementAnimationDuration,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1F28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementAnimationDuration,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t result;
  char v4;
  _BYTE v5[80];
  int v6;
  char v7;
  _BYTE v8[80];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementAnimationDuration,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>>(a2, (uint64_t)v5);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementAnimationDuration,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(v2);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v8, (uint64_t)v5);
  result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(v2, (uint64_t)v8);
  if (v9 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))off_1E34D1F08[v9])(&v4, v8);
  if (v7)
  {
    if (v6 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34D1F08[v6])(v8, v5);
  }
  return result;
}

void sub_1972FACF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v32;

  v32 = *(unsigned int *)(v30 + 80);
  if ((_DWORD)v32 != -1)
    ((void (*)(char *, __int16 *))off_1E34D1F08[v32])(&a13, &a28);
  if (a26)
  {
    if (a24 != -1)
      ((void (*)(char *, char *))off_1E34D1F08[a24])(&a13, &a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementAnimationDuration,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(uint64_t *a1)
{
  uint64_t result;
  char v2;
  _QWORD v3[10];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v4 = 0;
  result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(a1, (uint64_t)v3);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34D1F08[v4])(&v2, v3);
  return result;
}

void sub_1972FADE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1)
    ((void (*)(char *, char *))off_1E34D1F08[a24])(&a13, &a14);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::animationCurrentTime(WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1F50;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::animationCurrentTime(WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1F50;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::animationCurrentTime(WTF::CompletionHandler<void ()(std::optional<WTF::Seconds> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  _QWORD v7[10];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v7, a2);
  if (v8)
  {
    LOBYTE(v5) = 0;
    v6 = 0;
  }
  else
  {
    v5 = v7[0];
    v6 = 1;
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 16))(v3, &v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8 != -1)
    return ((uint64_t (*)(uint64_t *, _QWORD *))off_1E34D1F08[v8])(&v5, v7);
  return result;
}

void sub_1972FAF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  uint64_t v26;

  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (a26 != -1)
    ((void (*)(char *, char *))off_1E34D1F08[a26])(&a15, &a16);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementAnimationCurrentTime,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1F78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementAnimationCurrentTime,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1F78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementAnimationCurrentTime,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t result;
  char v4;
  _BYTE v5[80];
  int v6;
  char v7;
  _BYTE v8[80];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementAnimationCurrentTime,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>>(a2, (uint64_t)v5);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementAnimationCurrentTime,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(v2);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Seconds,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v8, (uint64_t)v5);
  result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(v2, (uint64_t)v8);
  if (v9 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))off_1E34D1F08[v9])(&v4, v8);
  if (v7)
  {
    if (v6 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34D1F08[v6])(v8, v5);
  }
  return result;
}

void sub_1972FB15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v32;

  v32 = *(unsigned int *)(v30 + 80);
  if ((_DWORD)v32 != -1)
    ((void (*)(char *, __int16 *))off_1E34D1F08[v32])(&a13, &a28);
  if (a26)
  {
    if (a24 != -1)
      ((void (*)(char *, char *))off_1E34D1F08[a24])(&a13, &a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementAnimationCurrentTime,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>>(uint64_t *a1)
{
  uint64_t result;
  char v2;
  _QWORD v3[10];
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v4 = 0;
  result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>)>::operator()(a1, (uint64_t)v3);
  if (v4 != -1)
    return ((uint64_t (*)(char *, _QWORD *))off_1E34D1F08[v4])(&v2, v3);
  return result;
}

void sub_1972FB248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1)
    ((void (*)(char *, char *))off_1E34D1F08[a24])(&a13, &a14);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setAnimationCurrentTime(WTF::Seconds,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1FA0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setAnimationCurrentTime(WTF::Seconds,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1FA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setAnimationCurrentTime(WTF::Seconds,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972FB334(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetAnimationCurrentTime,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1FC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetAnimationCurrentTime,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1FC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetAnimationCurrentTime,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v3;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetAnimationCurrentTime,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetAnimationCurrentTime,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v3 < 0x100u)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetAnimationCurrentTime,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v5 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, v3 != 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1972FB448(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetAnimationCurrentTime,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972FB4A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::hasAudio(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D1FF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::hasAudio(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D1FF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::hasAudio(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[80];
  int v6;
  __int16 v7;

  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v5, a2);
  if (v6)
  {
    v7 = 0;
  }
  else
  {
    LOBYTE(v7) = v5[0];
    HIBYTE(v7) = 1;
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v3 + 16))(v3, &v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v6 != -1)
    return ((uint64_t (*)(__int16 *, _BYTE *))off_1E34D1DB8[v6])(&v7, v5);
  return result;
}

void sub_1972FB5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v19;
  uint64_t v20;

  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (a19 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D1DB8[a19])(v20 - 17, &a9);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementHasAudio,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D2018;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementHasAudio,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D2018;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementHasAudio,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t result;
  _BYTE v4[80];
  int v5;
  char v6;
  _BYTE v7[80];
  int v8;
  char v9;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementHasAudio,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>>(v4, a2);
  if (!v6)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementHasAudio,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(v2);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v7, (uint64_t)v4);
  result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(v2, (uint64_t)v7);
  if (v8 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))off_1E34D1DB8[v8])(&v9, v7);
  if (v6)
  {
    if (v5 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34D1DB8[v5])(v7, v4);
  }
  return result;
}

void sub_1972FB784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  uint64_t v35;

  if (a35 != -1)
    ((void (*)(uint64_t, __int16 *))off_1E34D1DB8[a35])(v35 - 17, &a23);
  if (a21)
  {
    if (a19 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34D1DB8[a19])(v35 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementHasAudio,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(uint64_t *a1)
{
  uint64_t result;
  _BYTE v2[80];
  int v3;
  char v4;

  v2[0] = 0;
  v3 = 0;
  result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a1, (uint64_t)v2);
  if (v3 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34D1DB8[v3])(&v4, v2);
  return result;
}

void sub_1972FB83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v19;

  if (a19 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D1DB8[a19])(v19 - 17, &a9);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isMuted(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D2040;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isMuted(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D2040;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::isMuted(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&)::$_0,void,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[80];
  int v6;
  __int16 v7;

  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v5, a2);
  if (v6)
  {
    v7 = 0;
  }
  else
  {
    LOBYTE(v7) = v5[0];
    HIBYTE(v7) = 1;
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v3 + 16))(v3, &v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v6 != -1)
    return ((uint64_t (*)(__int16 *, _BYTE *))off_1E34D1DB8[v6])(&v7, v5);
  return result;
}

void sub_1972FB9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v19;
  uint64_t v20;

  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (a19 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D1DB8[a19])(v20 - 17, &a9);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsMuted,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D2068;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsMuted,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D2068;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementIsMuted,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t result;
  _BYTE v4[80];
  int v5;
  char v6;
  _BYTE v7[80];
  int v8;
  char v9;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsMuted,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>>>(v4, a2);
  if (!v6)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsMuted,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(v2);
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<BOOL,WebCore::ResourceError>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v7, (uint64_t)v4);
  result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(v2, (uint64_t)v7);
  if (v8 != -1)
    result = ((uint64_t (*)(char *, _BYTE *))off_1E34D1DB8[v8])(&v9, v7);
  if (v6)
  {
    if (v5 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E34D1DB8[v5])(v7, v4);
  }
  return result;
}

void sub_1972FBB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  uint64_t v35;

  if (a35 != -1)
    ((void (*)(uint64_t, __int16 *))off_1E34D1DB8[a35])(v35 - 17, &a23);
  if (a21)
  {
    if (a19 != -1)
      ((void (*)(uint64_t, uint64_t *))off_1E34D1DB8[a19])(v35 - 17, &a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementIsMuted,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>>(uint64_t *a1)
{
  uint64_t result;
  _BYTE v2[80];
  int v3;
  char v4;

  v2[0] = 0;
  v3 = 0;
  result = WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<BOOL,WebCore::ResourceError>)>::operator()(a1, (uint64_t)v2);
  if (v3 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E34D1DB8[v3])(&v4, v2);
  return result;
}

void sub_1972FBBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v19;

  if (a19 != -1)
    ((void (*)(uint64_t, uint64_t *))off_1E34D1DB8[a19])(v19 - 17, &a9);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setIsMuted(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D2090;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setIsMuted(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D2090;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::ARKitInlinePreviewModelPlayer::setIsMuted(BOOL,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972FBCD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetIsMuted,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D20B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetIsMuted,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D20B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::ModelElementSetIsMuted,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int16 v3;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetIsMuted,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetIsMuted,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v3 < 0x100u)
    return IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetIsMuted,WTF::CompletionHandler<void ()(BOOL)>>(v2);
  v5 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v5 + 16))(v5, v3 != 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_1972FBDE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::WebPageProxy::ModelElementSetIsMuted,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1972FBE44(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::UserMediaPermissionCheckProxy::~UserMediaPermissionCheckProxy(WebKit::UserMediaPermissionCheckProxy *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E34D20E0;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

{
  WebKit::UserMediaPermissionCheckProxy::~UserMediaPermissionCheckProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

_QWORD *WebKit::UserMediaPermissionRequestManagerProxy::forEach(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  {
    WebKit::proxies(void)::set = 0;
    *(_QWORD *)&dword_1EE341E48 = 0;
  }
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)&WebKit::proxies(void)::set, &v10);
  if (WebKit::proxies(void)::set)
  {
    v2 = *(unsigned int *)(WebKit::proxies(void)::set - 4);
    v3 = WebKit::proxies(void)::set + 8 * v2;
  }
  else
  {
    v3 = 0;
    v2 = 0;
  }
  v5 = &WebKit::proxies(void)::set;
  v6 = v3;
  v7 = v3;
  v8 = v3;
  v9 = WebKit::proxies(void)::set + 8 * v2;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v5);
  while (v11 != v6)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 16))(*a1, *(_QWORD *)(*(_QWORD *)v11 + 8));
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v10);
  }
  return result;
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::UserMediaPermissionRequestManagerProxy::UserMediaPermissionRequestManagerProxy(WebKit::UserMediaPermissionRequestManagerProxy *this, WebKit::WebPageProxy *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  WTF::RunLoop *v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int *v12;
  WTF::RunLoop *v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  void *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  WTF *v43;

  *((_QWORD *)this + 1) = 0;
  v4 = (unsigned int *)((char *)this + 8);
  *(_QWORD *)this = off_1E34D2108;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  v5 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v6 = (unsigned int *)*((_QWORD *)a2 + 3);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *((_QWORD *)this + 8) = v6;
  v8 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v5);
  v9 = (unsigned int *)((char *)v8 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E34D2268;
  v11[1] = WebKit::UserMediaPermissionRequestManagerProxy::rejectionTimerFired;
  v11[2] = 0;
  v11[3] = this;
  WTF::RunLoop::TimerBase::TimerBase((WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 72), v8);
  *((_QWORD *)this + 9) = off_1E34ABE00;
  *((_QWORD *)this + 12) = v11;
  v12 = WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v9);
  *(_OWORD *)((char *)this + 180) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  v13 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v12);
  v14 = (unsigned int *)((char *)v13 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v16 = off_1E34D2268;
  v16[1] = WebKit::UserMediaPermissionRequestManagerProxy::watchdogTimerFired;
  v16[2] = 0;
  v16[3] = this;
  WTF::RunLoop::TimerBase::TimerBase((WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 200), v13);
  *((_QWORD *)this + 25) = off_1E34ABE00;
  *((_QWORD *)this + 28) = v16;
  WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v14);
  *((_QWORD *)this + 29) = 0;
  v17 = WebKit::WebPageProxy::logger(a2);
  v18 = (unsigned int *)(v17 + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  *((_QWORD *)this + 30) = v17;
  *((_QWORD *)this + 31) = WTF::cryptographicallyRandomNumber<unsigned long long>();
  *((_WORD *)this + 128) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_WORD *)this + 136) = 0;
  *((_QWORD *)this + 35) = 0;
  {
    WebKit::proxies(void)::set = 0;
    *(_QWORD *)&dword_1EE341E48 = 1;
    goto LABEL_40;
  }
  if (++dword_1EE341E48 <= dword_1EE341E4C)
    goto LABEL_43;
  v21 = WebKit::proxies(void)::set;
  if (!WebKit::proxies(void)::set)
    goto LABEL_40;
  v22 = *(_DWORD *)(WebKit::proxies(void)::set - 4);
  if (!v22)
  {
LABEL_34:
    dword_1EE341E48 = 0;
    goto LABEL_36;
  }
  v23 = 0;
  do
  {
    while (1)
    {
      v24 = *(_QWORD *)(v21 + 8 * --v22);
      if ((unint64_t)(v24 + 1) >= 2 && !*(_QWORD *)(v24 + 8))
        break;
      if (!v22)
        goto LABEL_23;
    }
    *(_QWORD *)(v21 + 8 * v22) = 0;
    do
    {
      v25 = __ldaxr((unsigned int *)v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v24));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v24);
      WTF::fastFree((WTF *)v24, v20);
    }
    *(_QWORD *)(v21 + 8 * v22) = -1;
    ++v23;
  }
  while (v22);
LABEL_23:
  v21 = WebKit::proxies(void)::set;
  if (v23)
  {
    *(_DWORD *)(WebKit::proxies(void)::set - 16) += v23;
    if (WebKit::proxies(void)::set)
      v27 = *(_DWORD *)(WebKit::proxies(void)::set - 12);
    else
      v27 = 0;
    *(_DWORD *)(WebKit::proxies(void)::set - 12) = v27 - v23;
    v21 = WebKit::proxies(void)::set;
  }
  if (!v21)
  {
LABEL_40:
    v30 = 0;
    dword_1EE341E48 = 0;
    goto LABEL_41;
  }
  v28 = *(_DWORD *)(v21 - 4);
  if (v28 < 9 || 6 * *(_DWORD *)(v21 - 12) >= v28)
    goto LABEL_34;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&WebKit::proxies(void)::set);
  v21 = WebKit::proxies(void)::set;
  dword_1EE341E48 = 0;
  if (WebKit::proxies(void)::set)
  {
LABEL_36:
    v30 = *(_DWORD *)(v21 - 12);
    v31 = 0x7FFFFFFF;
    if (v30 >= 0x7FFFFFFF)
      goto LABEL_42;
    goto LABEL_41;
  }
  v30 = 0;
LABEL_41:
  v31 = v30;
LABEL_42:
  dword_1EE341E4C = 2 * v31;
LABEL_43:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v4, (uint64_t)this);
  v32 = (unsigned int *)*((_QWORD *)this + 1);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 + 1, v32));
  do
    v34 = __ldaxr(v32);
  while (__stlxr(v34 + 1, v32));
  v43 = (WTF *)v32;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(&WebKit::proxies(void)::set, &v43, (uint64_t)&v42);
  v36 = (unsigned int *)v43;
  v43 = 0;
  if (v36)
  {
    do
    {
      v40 = __ldaxr(v36);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v36));
    if (!v41)
    {
      atomic_store(1u, v36);
      WTF::fastFree((WTF *)v36, v35);
    }
  }
  if (v32)
  {
    do
    {
      v37 = __ldaxr(v32);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v32));
    if (!v38)
    {
      atomic_store(1u, v32);
      WTF::fastFree((WTF *)v32, v35);
    }
  }
  WebKit::UserMediaPermissionRequestManagerProxy::syncWithWebCorePrefs(this);
  return this;
}

void WebKit::UserMediaPermissionRequestManagerProxy::rejectionTimerFired(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v1 = *((_QWORD *)this + 13);
  if (v1 == *((_QWORD *)this + 14))
  {
    __break(0xC471u);
  }
  else
  {
    v3 = *((_QWORD *)this + 15);
    v4 = *(_QWORD *)(v3 + 8 * v1);
    *(_QWORD *)(v3 + 8 * v1) = 0;
    v5 = *((_QWORD *)this + 15);
    v6 = *(_QWORD *)(v5 + 8 * v1);
    *(_QWORD *)(v5 + 8 * v1) = 0;
    if (v6)
    {
      CFRelease(*(CFTypeRef *)(v6 + 8));
      v1 = *((_QWORD *)this + 13);
    }
    if (v1 == *((unsigned int *)this + 32) - 1)
      v7 = 0;
    else
      v7 = v1 + 1;
    *((_QWORD *)this + 13) = v7;
    v10 = 0;
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(this, v4, 5, (uint64_t *)&v10, 0);
    v9 = v10;
    v10 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
    if (*((_QWORD *)this + 13) != *((_QWORD *)this + 14))
      WebKit::UserMediaPermissionRequestManagerProxy::scheduleNextRejection(this);
  }
}

WTF *WebKit::UserMediaPermissionRequestManagerProxy::watchdogTimerFired(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t v2;
  WebKit::WebPageProxy *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  WTF *result;
  _QWORD v10[4];

  v2 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v2)
    v3 = (WebKit::WebPageProxy *)(v2 - 16);
  else
    v3 = 0;
  v4 = WebKit::WebPageProxy::logger(v3);
  v5 = (*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(_QWORD *)this + 24))(this);
  v7 = *((_QWORD *)this + 31);
  v10[0] = v5;
  v10[1] = v6;
  v10[2] = "watchdogTimerFired";
  v10[3] = v7;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v10);
  WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 152), v6);
  result = WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 136), v8);
  *((_QWORD *)this + 29) = 0;
  *((_BYTE *)this + 256) = 0;
  return result;
}

void WebKit::UserMediaPermissionRequestManagerProxy::syncWithWebCorePrefs(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  const WTF::StringImpl *v4;
  uint64_t BoolValueForKey;
  uint64_t v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::MockRealtimeMediaSourceCenter *v10;
  uint64_t v11;
  CFTypeRef *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;

  v2 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  CFRetain(*(CFTypeRef *)(v3 + 8));
  if (*((_BYTE *)this + 273))
  {
    BoolValueForKey = *((_BYTE *)this + 272) != 0;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 224);
    {
      WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, v4);
  }
  v7 = *(_QWORD *)(v3 + 224);
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v4) & 1) != 0)goto LABEL_15;
  v9 = *(_QWORD *)(v3 + 224);
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  v10 = (WebCore::MockRealtimeMediaSourceCenter *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v9 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v8);
  if ((_DWORD)v10)
  {
LABEL_15:
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 208) + 512) + 8);
    if (v11)
      v12 = (CFTypeRef *)(v11 - 16);
    else
      v12 = 0;
    CFRetain(v12[1]);
    v13 = WebKit::WebProcessPool::ensureGPUProcess((WebKit::WebProcessPool *)v12);
    v14 = (unsigned int *)(v13 + 16);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    if (*(unsigned __int8 *)(v13 + 432) != (_DWORD)BoolValueForKey)
    {
      *(_BYTE *)(v13 + 432) = BoolValueForKey;
      v16 = BoolValueForKey;
      WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetMockCaptureDevicesEnabled>(v13, &v16, 0, 0);
    }
    v10 = (WebCore::MockRealtimeMediaSourceCenter *)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v14);
    if (v11)
      CFRelease(v12[1]);
  }
  if ((_DWORD)BoolValueForKey != WebCore::MockRealtimeMediaSourceCenter::mockRealtimeMediaSourceCenterEnabled(v10))
    WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled((WebCore::MockRealtimeMediaSourceCenter *)BoolValueForKey);
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 - 8));
}

void WebKit::UserMediaPermissionRequestManagerProxy::~UserMediaPermissionRequestManagerProxy(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WebKit::UserMediaProcessManager *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int **v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unsigned int **v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  unsigned int v45;
  WTF *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  unsigned int *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  _QWORD v85[2];
  char v86;
  IPC::Encoder *v87;

  *(_QWORD *)this = off_1E34D2108;
  v2 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  CFRetain(*(CFTypeRef *)(v3 + 8));
  v4 = *(_QWORD *)(v3 + 208);
  v5 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 1896);
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2457;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v87 = (IPC::Encoder *)v8;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = 4;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E34D2290;
  v85[0] = v9;
  v85[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v86 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v87, 0, (uint64_t)v85, 1);
  if (v86)
  {
    v11 = v85[0];
    v85[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v87;
  v87 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v13, v14);
  }
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 - 8));
  {
    WebKit::UserMediaProcessManager::singleton(void)::manager = (uint64_t)&off_1E34D2148;
    unk_1EE341E10 = 0;
    qword_1EE341E18 = 0;
    unk_1EE341E20 = 0;
    word_1EE341E28 = 1;
  }
  v15 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v15)
    v16 = v15 - 16;
  else
    v16 = 0;
  v17 = *(WebKit::UserMediaProcessManager **)(v16 + 208);
  v18 = (unsigned int *)((char *)v17 + 16);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  WebKit::UserMediaProcessManager::revokeSandboxExtensionsIfNeeded(v17, (WebKit::WebProcessProxy *)v10);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v18);
  {
    v22 = dword_1EE341E48;
    v21 = dword_1EE341E4C;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    WebKit::proxies(void)::set = 0;
    *(_QWORD *)&dword_1EE341E48 = 0;
  }
  dword_1EE341E48 = v22 + 1;
  if (v22 + 1 > v21)
  {
    v23 = WebKit::proxies(void)::set;
    if (WebKit::proxies(void)::set)
    {
      v24 = *(_DWORD *)(WebKit::proxies(void)::set - 4);
      if (!v24)
        goto LABEL_49;
      v25 = 0;
      do
      {
        while (1)
        {
          v26 = *(_QWORD *)(v23 + 8 * --v24);
          if ((unint64_t)(v26 + 1) >= 2 && !*(_QWORD *)(v26 + 8))
            break;
          if (!v24)
            goto LABEL_38;
        }
        *(_QWORD *)(v23 + 8 * v24) = 0;
        do
        {
          v27 = __ldaxr((unsigned int *)v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, (unsigned int *)v26));
        if (!v28)
        {
          atomic_store(1u, (unsigned int *)v26);
          WTF::fastFree((WTF *)v26, v20);
        }
        *(_QWORD *)(v23 + 8 * v24) = -1;
        ++v25;
      }
      while (v24);
LABEL_38:
      v23 = WebKit::proxies(void)::set;
      if (v25)
      {
        *(_DWORD *)(WebKit::proxies(void)::set - 16) += v25;
        if (WebKit::proxies(void)::set)
          v29 = *(_DWORD *)(WebKit::proxies(void)::set - 12);
        else
          v29 = 0;
        *(_DWORD *)(WebKit::proxies(void)::set - 12) = v29 - v25;
        v23 = WebKit::proxies(void)::set;
      }
      if (v23)
      {
        v30 = *(_DWORD *)(v23 - 4);
        if (v30 >= 9 && 6 * *(_DWORD *)(v23 - 12) < v30)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&WebKit::proxies(void)::set);
          v23 = WebKit::proxies(void)::set;
          dword_1EE341E48 = 0;
          if (!WebKit::proxies(void)::set)
          {
            v32 = 0;
            goto LABEL_53;
          }
          goto LABEL_52;
        }
LABEL_49:
        dword_1EE341E48 = 0;
LABEL_52:
        v32 = *(_DWORD *)(v23 - 12);
        v33 = 0x7FFFFFFF;
        if (v32 >= 0x7FFFFFFF)
        {
LABEL_54:
          dword_1EE341E4C = 2 * v33;
          goto LABEL_55;
        }
LABEL_53:
        v33 = v32;
        goto LABEL_54;
      }
    }
    v32 = 0;
    dword_1EE341E48 = 0;
    goto LABEL_53;
  }
LABEL_55:
  v34 = *((_QWORD *)this + 1);
  if (v34 && *(_QWORD *)(v34 + 8))
  {
    v85[0] = *((_QWORD *)this + 1);
    v35 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(&WebKit::proxies(void)::set, v85);
    v20 = v35;
    if (WebKit::proxies(void)::set)
    {
      v36 = WebKit::proxies(void)::set + 8 * *(unsigned int *)(WebKit::proxies(void)::set - 4);
      if ((unsigned int **)v36 == v35)
        goto LABEL_64;
    }
    else
    {
      if (!v35)
        goto LABEL_64;
      v36 = 0;
    }
    if ((unsigned int **)v36 != v35)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(&WebKit::proxies(void)::set, v35);
  }
LABEL_64:
  WebKit::UserMediaPermissionRequestManagerProxy::invalidatePendingRequests(this, v20);
  v38 = *((_QWORD *)this + 35);
  if (v38)
    WTF::fastFree((WTF *)(v38 - 16), v37);
  v39 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v39)
  {
    v40 = v39 + 2;
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v39 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 8))(v39);
    }
  }
  *((_QWORD *)this + 25) = off_1E34ABE00;
  v43 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 200));
  v45 = *((_DWORD *)this + 47);
  if (v45)
    WTF::VectorDestructor<true,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::destruct(*((_QWORD *)this + 22), (WTF::StringImpl *)(*((_QWORD *)this + 22) + 40 * v45));
  v46 = (WTF *)*((_QWORD *)this + 22);
  if (v46)
  {
    *((_QWORD *)this + 22) = 0;
    *((_DWORD *)this + 46) = 0;
    WTF::fastFree(v46, v44);
  }
  v47 = *((_QWORD *)this + 21);
  if (v47)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v47, (WTF::StringImpl *)v44);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 152, v44);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 136, v48);
  v50 = *((_QWORD *)this + 13);
  v51 = *((_QWORD *)this + 14);
  v52 = (WTF *)*((_QWORD *)this + 15);
  if (v50 <= v51)
  {
    if (v50 == v51)
      goto LABEL_98;
    v59 = (uint64_t *)((char *)v52 + 8 * v50);
    v60 = 8 * v51 - 8 * v50;
    do
    {
      v61 = *v59;
      *v59 = 0;
      if (v61)
        CFRelease(*(CFTypeRef *)(v61 + 8));
      ++v59;
      v60 -= 8;
    }
    while (v60);
  }
  else
  {
    if (v51)
    {
      v53 = 8 * v51;
      do
      {
        v54 = *(_QWORD *)v52;
        *(_QWORD *)v52 = 0;
        if (v54)
          CFRelease(*(CFTypeRef *)(v54 + 8));
        v52 = (WTF *)((char *)v52 + 8);
        v53 -= 8;
      }
      while (v53);
      v52 = (WTF *)*((_QWORD *)this + 15);
      v50 = *((_QWORD *)this + 13);
    }
    v55 = *((unsigned int *)this + 32);
    if (v50 != v55)
    {
      v56 = (uint64_t *)((char *)v52 + 8 * v50);
      v57 = 8 * v55 - 8 * v50;
      do
      {
        v58 = *v56;
        *v56 = 0;
        if (v58)
          CFRelease(*(CFTypeRef *)(v58 + 8));
        ++v56;
        v57 -= 8;
      }
      while (v57);
    }
  }
  v52 = (WTF *)*((_QWORD *)this + 15);
LABEL_98:
  if (v52)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v52, v49);
  }
  *((_QWORD *)this + 9) = off_1E34ABE00;
  v62 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 72));
  v64 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v64)
  {
    do
    {
      v75 = __ldaxr(v64);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v64));
    if (!v76)
    {
      atomic_store(1u, v64);
      WTF::fastFree((WTF *)v64, v63);
    }
  }
  v65 = *((_QWORD *)this + 7);
  if (v65)
    WTF::fastFree((WTF *)(v65 - 16), v63);
  v66 = *((_QWORD *)this + 3);
  v67 = *((_QWORD *)this + 4);
  v68 = (WTF *)*((_QWORD *)this + 5);
  if (v66 <= v67)
  {
    if (v66 == v67)
      goto LABEL_127;
    v77 = (uint64_t *)((char *)v68 + 8 * v66);
    v78 = 8 * v67 - 8 * v66;
    do
    {
      v79 = *v77;
      *v77 = 0;
      if (v79)
        CFRelease(*(CFTypeRef *)(v79 + 8));
      ++v77;
      v78 -= 8;
    }
    while (v78);
  }
  else
  {
    if (v67)
    {
      v69 = 8 * v67;
      do
      {
        v70 = *(_QWORD *)v68;
        *(_QWORD *)v68 = 0;
        if (v70)
          CFRelease(*(CFTypeRef *)(v70 + 8));
        v68 = (WTF *)((char *)v68 + 8);
        v69 -= 8;
      }
      while (v69);
      v68 = (WTF *)*((_QWORD *)this + 5);
      v66 = *((_QWORD *)this + 3);
    }
    v71 = *((unsigned int *)this + 12);
    if (v66 != v71)
    {
      v72 = (uint64_t *)((char *)v68 + 8 * v66);
      v73 = 8 * v71 - 8 * v66;
      do
      {
        v74 = *v72;
        *v72 = 0;
        if (v74)
          CFRelease(*(CFTypeRef *)(v74 + 8));
        ++v72;
        v73 -= 8;
      }
      while (v73);
    }
  }
  v68 = (WTF *)*((_QWORD *)this + 5);
LABEL_127:
  if (v68)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v68, v63);
  }
  v80 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v80)
    CFRelease(*(CFTypeRef *)(v80 + 8));
  v81 = *((_QWORD *)this + 1);
  if (v81)
  {
    *(_QWORD *)(v81 + 8) = 0;
    v82 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v82)
    {
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        atomic_store(1u, v82);
        WTF::fastFree((WTF *)v82, v63);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::UserMediaPermissionRequestManagerProxy::~UserMediaPermissionRequestManagerProxy(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::UserMediaProcessManager::revokeSandboxExtensionsIfNeeded(WebKit::UserMediaProcessManager *this, WebKit::WebProcessProxy *a2)
{
  _QWORD *v3;
  uint64_t result;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int16 v23;
  WTF *v24;
  uint8_t buf[16];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v22 = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v3 = off_1E34D2588;
  v3[1] = (char *)&v23 + 1;
  v3[2] = &v23;
  v3[3] = &v22;
  v3[4] = this;
  *(_QWORD *)buf = v3;
  WebKit::UserMediaPermissionRequestManagerProxy::forEach(buf);
  result = (*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
  if (!v22)
  {
    v6 = v23;
    if (!HIBYTE(v23) || !(_BYTE)v23)
    {
      v20 = 0;
      v21 = 0;
      if (!HIBYTE(v23) && (*((_BYTE *)this + 784) & 2) != 0)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral const&>((uint64_t)&v20, (uint64_t)&WebKit::audioExtensionPath);
        v6 = v23;
        *((_DWORD *)this + 196) &= ~2u;
      }
      if (!v6 && (*((_BYTE *)this + 784) & 1) != 0)
      {
        v7 = HIDWORD(v21);
        if (HIDWORD(v21) == (_DWORD)v21)
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral const&>((uint64_t)&v20, (uint64_t)&WebKit::videoExtensionPath);
        }
        else
        {
          v8 = v20;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_QWORD *)(v8 + 8 * v7) = *(_QWORD *)buf;
          ++HIDWORD(v21);
        }
        *((_DWORD *)this + 196) &= ~1u;
      }
      if (HIDWORD(v21))
      {
        v9 = v20;
        v10 = 8 * HIDWORD(v21);
        do
        {
          v11 = qword_1ECE71B18;
          if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            v12 = v24 ? (char *)v24 + 16 : 0;
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v12;
            _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "UserMediaProcessManager::endedCaptureSession - revoking extension %s", buf, 0xCu);
            v14 = v24;
            v24 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                WTF::fastFree(v14, v13);
              else
                --*(_DWORD *)v14;
            }
          }
          v9 += 8;
          v10 -= 8;
        }
        while (v10);
        v15 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v15 = 2621;
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 528) = v15 + 16;
        *(_QWORD *)(v15 + 536) = v15 + 16;
        *(_OWORD *)(v15 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v15 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v15);
        v24 = (WTF *)v15;
        IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v15, (uint64_t)&v20);
        buf[0] = 0;
        v26 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)this, &v24, 0, (uint64_t)buf, 1);
        if (v26)
        {
          v16 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
        v17 = v24;
        v24 = 0;
        if (v17)
        {
          IPC::Encoder::~Encoder(v17, v5);
          WTF::fastFree(v18, v19);
        }
      }
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v5);
    }
  }
  return result;
}

void WebKit::UserMediaPermissionRequestManagerProxy::invalidatePendingRequests(WebKit::UserMediaPermissionRequestManagerProxy *this, void *a2)
{
  CFTypeRef *v3;
  unint64_t v4;
  unint64_t v5;
  WTF *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  int v27;

  v3 = (CFTypeRef *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    (*((void (**)(CFTypeRef *))*v3 + 5))(v3);
    CFRelease(v3[1]);
  }
  v4 = *((_QWORD *)this + 3);
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v6 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  v7 = *((unsigned int *)this + 12);
  *((_DWORD *)this + 12) = 0;
  if (v4 != v5)
  {
    v8 = v4;
    do
    {
      (*(void (**)(_QWORD))(**((_QWORD **)v6 + v8) + 40))(*((_QWORD *)v6 + v8));
      v8 += v7 + 1;
      do
        v8 -= v7;
      while (v8 >= v7);
    }
    while (v5 != v8);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 17);
  v25 = v9;
  v11 = *((_DWORD *)this + 36);
  v10 = *((unsigned int *)this + 37);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  v26 = v11;
  v27 = v10;
  if ((_DWORD)v10)
  {
    v12 = 8 * v10;
    do
    {
      v13 = *v9++;
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
      v12 -= 8;
    }
    while (v12);
  }
  v14 = *((_QWORD *)this + 7);
  if (v14)
  {
    *((_QWORD *)this + 7) = 0;
    WTF::fastFree((WTF *)(v14 - 16), a2);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, a2);
  if (v4 <= v5)
  {
    if (v4 != v5)
    {
      v22 = (uint64_t *)((char *)v6 + 8 * v4);
      v23 = 8 * v5 - 8 * v4;
      do
      {
        v24 = *v22;
        *v22 = 0;
        if (v24)
          CFRelease(*(CFTypeRef *)(v24 + 8));
        ++v22;
        v23 -= 8;
      }
      while (v23);
    }
  }
  else
  {
    if (v5)
    {
      v16 = 8 * v5;
      v17 = v6;
      do
      {
        v18 = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0;
        if (v18)
          CFRelease(*(CFTypeRef *)(v18 + 8));
        v17 = (WTF *)((char *)v17 + 8);
        v16 -= 8;
      }
      while (v16);
    }
    if (v4 != v7)
    {
      v19 = (uint64_t *)((char *)v6 + 8 * v4);
      v20 = 8 * v7 - 8 * v4;
      do
      {
        v21 = *v19;
        *v19 = 0;
        if (v21)
          CFRelease(*(CFTypeRef *)(v21 + 8));
        ++v19;
        v20 -= 8;
      }
      while (v20);
    }
  }
  if (v6)
    WTF::fastFree(v6, v15);
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::logger(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v1)
    return WebKit::WebPageProxy::logger((WebKit::WebPageProxy *)(v1 - 16));
  else
    return WebKit::WebPageProxy::logger(0);
}

char *WebKit::UserMediaPermissionRequestManagerProxy::logChannel(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  return &WebKit2LogWebRTC;
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::logIdentifier(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  return *((_QWORD *)this + 31);
}

void WebKit::UserMediaPermissionRequestManagerProxy::getUserMediaPermissionInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const URL *v16;
  WTF::StringImpl *v17;
  int v18;
  StringImpl *m_ptr;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t IdentifierInternal;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  URL v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40[5];

  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (v12)
    v13 = v12 - 16;
  else
    v13 = 0;
  CFRetain(*(CFTypeRef *)(v13 + 8));
  v14 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v14)
  {
    v15 = v14;
    CFRetain(*(CFTypeRef *)(v14 + 8));
    WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(_QWORD *)(v13 + 32) + 968), &v39);
    MEMORY[0x19AEABB0C](v40, &v39, 0);
    WebCore::SecurityOriginData::toURL((WebCore::SecurityOriginData *)(*a5 + 8));
    v18 = WTF::protocolHostAndPortAreEqual((WTF *)v40, &v38, v16);
    m_ptr = v38.m_string.m_impl.m_ptr;
    v38.m_string.m_impl.m_ptr = 0;
    if (m_ptr)
    {
      if (*(_DWORD *)m_ptr == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v17);
      else
        *(_DWORD *)m_ptr -= 2;
    }
    v20 = v40[0];
    v40[0] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v39;
    v39 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, v17);
        if (v18)
          goto LABEL_17;
        goto LABEL_25;
      }
      *(_DWORD *)v21 -= 2;
    }
    if (v18)
    {
LABEL_17:
      v36 = a4;
      API::SecurityOrigin::create(&v38);
      API::SecurityOrigin::create(&v39);
      IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      v37 = IdentifierInternal;
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add((uint64_t *)v40, (uint64_t *)(a1 + 56), &v37);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
      v23 = *(unsigned int **)(a1 + 8);
      v35 = a2;
      if (v23)
      {
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 + 1, v23));
        v25 = a3;
        IdentifierInternal = v37;
      }
      else
      {
        v25 = a3;
      }
      v26 = *a6;
      *a6 = 0;
      v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v27 = &off_1E34D2448;
      v27[1] = a1;
      v27[2] = v23;
      v27[3] = IdentifierInternal;
      v27[4] = v26;
      v28 = API::Object::newObject(0x38uLL, 106);
      *(_QWORD *)v28 = off_1E34CC2A8;
      WebKit::InitializeWebKit2((WebKit *)v28);
      *(_QWORD *)v28 = &off_1E34D20E0;
      *(_QWORD *)(v28 + 16) = v35;
      *(_QWORD *)(v28 + 24) = v25;
      *(_QWORD *)(v28 + 32) = v27;
      v29 = *v36;
      *v36 = 0;
      *(_QWORD *)(v28 + 40) = v29;
      v30 = *a5;
      *a5 = 0;
      *(_QWORD *)(v28 + 48) = v30;
      (*(void (**)(_QWORD, uint64_t, uint64_t, StringImpl *, WTF::StringImpl *, uint64_t))(**(_QWORD **)(v13 + 104)
                                                                                                 + 320))(*(_QWORD *)(v13 + 104), v13, v15, v38.m_string.m_impl.m_ptr, v39, v28);
      CFRelease(*(CFTypeRef *)(v28 + 8));
      v31 = v39;
      v39 = 0;
      if (v31)
        CFRelease(*((CFTypeRef *)v31 + 1));
      v32 = v38.m_string.m_impl.m_ptr;
      v38.m_string.m_impl.m_ptr = 0;
      if (v32)
        CFRelease(*((CFTypeRef *)v32 + 1));
LABEL_26:
      CFRelease(*(CFTypeRef *)(v15 + 8));
      if (!v12)
        return;
      goto LABEL_27;
    }
LABEL_25:
    v33 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 16))(v33, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    goto LABEL_26;
  }
  v34 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 16))(v34, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if (v12)
LABEL_27:
    CFRelease(*(CFTypeRef *)(v12 - 8));
}

void WebKit::UserMediaPermissionRequestManagerProxy::captureDevicesChanged(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  if (a2 && (a2 != 1 || *(_DWORD *)(a1 + 164)))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    if (v2)
      v3 = v2 - 16;
    else
      v3 = 0;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    if (!*(_BYTE *)(v3 + 729) && *(_BYTE *)(v3 + 728))
    {
      v4 = *(_QWORD *)(v3 + 208);
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 1896);
      v6 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v6 = 2123;
      *(_QWORD *)(v6 + 8) = v5;
      *(_QWORD *)(v6 + 528) = v6 + 16;
      *(_QWORD *)(v6 + 536) = v6 + 16;
      *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v6 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
      v14 = (IPC::Encoder *)v6;
      LOBYTE(v12) = 0;
      v13 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v14, 0, (uint64_t)&v12, 1);
      if (v13)
      {
        v8 = v12;
        v12 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      v9 = v14;
      v14 = 0;
      if (v9)
      {
        IPC::Encoder::~Encoder(v9, v7);
        WTF::fastFree(v10, v11);
      }
    }
    if (v2)
      CFRelease(*(CFTypeRef *)(v2 - 8));
  }
}

void WebKit::UserMediaPermissionRequestManagerProxy::clearCachedState(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t v2;
  WebKit::WebPageProxy *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];

  v2 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v2)
    v3 = (WebKit::WebPageProxy *)(v2 - 16);
  else
    v3 = 0;
  v4 = WebKit::WebPageProxy::logger(v3);
  v5 = (*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(_QWORD *)this + 24))(this);
  v7 = *((_QWORD *)this + 31);
  v8[0] = v5;
  v8[1] = v6;
  v8[2] = "clearCachedState";
  v8[3] = v7;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  WebKit::UserMediaPermissionRequestManagerProxy::invalidatePendingRequests(this, v6);
}

void WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(WebKit::UserMediaPermissionRequestManagerProxy *a1, uint64_t a2, int a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebKit::WebPageProxy *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  IPC::Encoder *v16;
  IPC::Encoder *v17;
  WTF::String *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  NSObject *v24;
  WTF *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  uint64_t i;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  WTF *v54;
  __int16 v55;
  WTF *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  size_t v65;
  unint64_t v66;
  char v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  size_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  _BYTE *v75;
  void *v76;
  uint64_t v77;
  IPC::Encoder *v78;
  WTF *v79;
  void *v80;
  unint64_t v81;
  size_t v82;
  char *v83;
  void *v84;
  unint64_t v85;
  size_t v86;
  char *v87;
  void *v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  size_t v92;
  WTF::String *v93;
  WTF::String *v94;
  IPC::Encoder *v95[4];
  WTF *v96[2];
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  uint8_t buf[16];
  WTF *v103;
  WTF *v104;
  int v105;
  _DWORD v106[4];
  _QWORD v107[3];

  v107[1] = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(*((_QWORD *)a1 + 8) + 8);
  if (v10)
    v11 = v10 - 16;
  else
    v11 = 0;
  CFRetain(*(CFTypeRef *)(v11 + 8));
  if (*(_BYTE *)(v11 + 729) || !*(_BYTE *)(v11 + 728))
    goto LABEL_5;
  v12 = *(_QWORD *)(*((_QWORD *)a1 + 8) + 8);
  if (v12)
    v13 = (WebKit::WebPageProxy *)(v12 - 16);
  else
    v13 = 0;
  v14 = WebKit::WebPageProxy::logger(v13);
  v15 = (IPC::Encoder *)(*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(_QWORD *)a1 + 24))(a1);
  v17 = (IPC::Encoder *)*((_QWORD *)a1 + 31);
  v95[0] = v15;
  v95[1] = v16;
  v95[2] = (IPC::Encoder *)"denyRequest";
  v95[3] = v17;
  if (*(_BYTE *)(v14 + 12))
  {
    v18 = *(WTF::String **)(a2 + 24);
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v95);
    v93 = v18;
    WTF::String::number(v18);
    WTF::String::String((WTF::String *)&v98, ", reason: ");
    WebKit::convertEnumerationToString(&v97, a3);
    WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v100, (uint64_t *)&v99, (uint64_t *)&v98, (uint64_t *)&v97, &v101);
    v20 = v97;
    v97 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v98;
    v98 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v99;
    v99 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v19);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v100;
    v100 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v19);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = qword_1ECE71B18;
    v25 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v25)
    {
      WTF::String::utf8();
      v26 = v96[0] ? (char *)v96[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v26;
      _os_log_impl(&dword_196BCC000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v25 = v96[0];
      v96[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1)
          v25 = (WTF *)WTF::fastFree(v25, v16);
        else
          --*(_DWORD *)v25;
      }
    }
    if (WebKit2LogWebRTC)
    {
      v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v28 = *v27;
        if ((v28 & 1) != 0)
          break;
        v29 = __ldaxr(v27);
        if (v29 == v28)
        {
          if (!__stxr(v28 | 1, v27))
          {
            v89 = a2;
            v90 = a5;
            v30 = WTF::Logger::observers(v25);
            v31 = *(unsigned int *)(v30 + 12);
            if ((_DWORD)v31)
            {
              v32 = *(uint64_t **)v30;
              v91 = *(_QWORD *)v30 + 8 * v31;
              do
              {
                v33 = *v32;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v95);
                LODWORD(v103) = 0;
                WTF::String::number(v93);
                v105 = 0;
                WTF::String::String((WTF::String *)v106, ", reason: ");
                v106[2] = 0;
                WebKit::convertEnumerationToString(v107, a3);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v96, (uint64_t)buf, 4uLL);
                (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v33 + 16))(v33, &WebKit2LogWebRTC, 0, v96);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v96, v34);
                for (i = 56; i != -8; i -= 16)
                {
                  v36 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, v16);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
                }
                ++v32;
              }
              while (v32 != (uint64_t *)v91);
            }
            v37 = __ldxr(v27);
            if (v37 == 1)
            {
              a5 = v90;
              a2 = v89;
              if (!__stlxr(0, v27))
                break;
            }
            else
            {
              __clrex();
              a5 = v90;
              a2 = v89;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v38 = v101;
    v101 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v16);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  if (a3 == 5)
  {
    *(_OWORD *)buf = *(_OWORD *)(a2 + 32);
    v39 = *(unsigned int **)(a2 + 64);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    v103 = (WTF *)v39;
    v41 = *(unsigned int **)(a2 + 72);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
    v104 = (WTF *)v41;
    LOBYTE(v105) = *(_DWORD *)(a2 + 108) != 0;
    v43 = *(unsigned __int8 *)(a2 + 112) - 1;
    v44 = v43 < 2;
    v46 = v43 > 1 && *(_DWORD *)(a2 + 92) != 0;
    BYTE1(v105) = v46;
    BYTE2(v105) = v44;
    v47 = *((unsigned int *)a1 + 47);
    if ((_DWORD)v47 == *((_DWORD *)a1 + 46))
    {
      v48 = WTF::Vector<WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1 + 176, v47 + 1, (unint64_t)buf);
      v49 = *((_QWORD *)a1 + 22) + 40 * *((unsigned int *)a1 + 47);
      *(_OWORD *)v49 = *(_OWORD *)v48;
      v50 = *(_QWORD *)(v48 + 16);
      *(_QWORD *)(v48 + 16) = 0;
      *(_QWORD *)(v49 + 16) = v50;
      v51 = *(_QWORD *)(v48 + 24);
      *(_QWORD *)(v48 + 24) = 0;
      *(_QWORD *)(v49 + 24) = v51;
      LOWORD(v51) = *(_WORD *)(v48 + 32);
      *(_BYTE *)(v49 + 34) = *(_BYTE *)(v48 + 34);
      *(_WORD *)(v49 + 32) = v51;
      ++*((_DWORD *)a1 + 47);
      v52 = v104;
      v104 = 0;
      if (v52)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v52, v16);
    }
    else
    {
      v53 = *((_QWORD *)a1 + 22) + 40 * v47;
      *(_OWORD *)v53 = *(_OWORD *)buf;
      v54 = v103;
      v103 = 0;
      *(_QWORD *)(v53 + 16) = v54;
      *(_QWORD *)(v53 + 24) = v41;
      v55 = v105;
      *(_BYTE *)(v53 + 34) = BYTE2(v105);
      *(_WORD *)(v53 + 32) = v55;
      ++*((_DWORD *)a1 + 47);
      v104 = 0;
    }
    v56 = v103;
    v103 = 0;
    if (v56)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v56, v16);
  }
  v57 = *(_QWORD *)(a2 + 2096);
  *(_QWORD *)(a2 + 2096) = 0;
  if (v57)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 16))(v57, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    goto LABEL_5;
  }
  v94 = *(WTF::String **)(v11 + 208);
  v96[0] = *(WTF **)(a2 + 24);
  v58 = a4;
  if (a3 > 6)
    v59 = 8;
  else
    v59 = qword_1978D04B0[a3];
  v60 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 1896);
  v61 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v61 = 2495;
  *(_QWORD *)(v61 + 8) = v60;
  v62 = (void *)(v61 + 16);
  *(_QWORD *)(v61 + 528) = v61 + 16;
  *(_QWORD *)(v61 + 536) = v61 + 16;
  *(_OWORD *)(v61 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v61 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v61);
  v95[0] = (IPC::Encoder *)v61;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v61, (uint64_t *)v96);
  v63 = *(_QWORD *)(v61 + 544);
  v64 = (v63 + 7) & 0xFFFFFFFFFFFFFFF8;
  v65 = v64 + 8;
  v66 = *(_QWORD *)(v61 + 552);
  v67 = a5;
  if (v66 < v64 + 8)
  {
    v81 = (2 * v66 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v82 = v81;
      v81 *= 2;
    }
    while (v82 < v65);
    v92 = v82;
    v83 = (char *)mmap(0, v82, 3, 4098, -1, 0);
    if (v83 == (char *)-1)
      goto LABEL_106;
    v68 = v83;
    memcpy(v83, *(const void **)(v61 + 528), *(_QWORD *)(v61 + 544));
    v84 = *(void **)(v61 + 528);
    if (v84 != v62)
      munmap(v84, *(_QWORD *)(v61 + 552));
    *(_QWORD *)(v61 + 528) = v68;
    *(_QWORD *)(v61 + 552) = v92;
    v63 = *(_QWORD *)(v61 + 544);
  }
  else
  {
    v68 = *(char **)(v61 + 528);
  }
  bzero(&v68[v63], v64 - v63);
  *(_QWORD *)(v61 + 544) = v65;
  v69 = (uint64_t *)(*(_QWORD *)(v61 + 528) + v64);
  *(_QWORD *)(v61 + 536) = v69 + 1;
  *v69 = v59;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v61, v58);
  v70 = *(_QWORD *)(v61 + 544);
  v71 = v70 + 1;
  v72 = *(_QWORD *)(v61 + 552);
  if (v72 < v70 + 1)
  {
    v85 = (2 * v72 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v86 = v85;
      v85 *= 2;
    }
    while (v86 < v71);
    v87 = (char *)mmap(0, v86, 3, 4098, -1, 0);
    if (v87 != (char *)-1)
    {
      v73 = v87;
      memcpy(v87, *(const void **)(v61 + 528), *(_QWORD *)(v61 + 544));
      v88 = *(void **)(v61 + 528);
      if (v88 != v62)
        munmap(v88, *(_QWORD *)(v61 + 552));
      *(_QWORD *)(v61 + 528) = v73;
      *(_QWORD *)(v61 + 552) = v86;
      v74 = *(_QWORD *)(v61 + 544);
      goto LABEL_88;
    }
LABEL_106:
    __break(0xC471u);
    JUMPOUT(0x1972FDF44);
  }
  v73 = *(char **)(v61 + 528);
  v74 = *(_QWORD *)(v61 + 544);
LABEL_88:
  bzero(&v73[v74], v70 - v74);
  *(_QWORD *)(v61 + 544) = v71;
  v75 = (_BYTE *)(*(_QWORD *)(v61 + 528) + v70);
  *(_QWORD *)(v61 + 536) = v75 + 1;
  *v75 = v67;
  buf[0] = 0;
  LOBYTE(v103) = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)v94, v95, 0, (uint64_t)buf, 1);
  if ((_BYTE)v103)
  {
    v77 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v77)
      (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  }
  v78 = v95[0];
  v95[0] = 0;
  if (v78)
  {
    IPC::Encoder::~Encoder(v78, v76);
    WTF::fastFree(v79, v80);
  }
  WebKit::UserMediaPermissionRequestManagerProxy::processNextUserMediaRequestIfNeeded(a1);
LABEL_5:
  if (v10)
    CFRelease(*(CFTypeRef *)(v10 - 8));
}

void WebKit::UserMediaPermissionRequestManagerProxy::processNextUserMediaRequestIfNeeded(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 3);
  if (v2 == *((_QWORD *)this + 4))
  {
    v3 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v3)
      CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  else
  {
    v4 = *((_QWORD *)this + 5);
    v5 = *(_QWORD *)(v4 + 8 * v2);
    *(_QWORD *)(v4 + 8 * v2) = 0;
    v9 = v5;
    v6 = *((_QWORD *)this + 5);
    v7 = *(_QWORD *)(v6 + 8 * v2);
    *(_QWORD *)(v6 + 8 * v2) = 0;
    if (v7)
    {
      CFRelease(*(CFTypeRef *)(v7 + 8));
      v2 = *((_QWORD *)this + 3);
    }
    if (v2 == *((unsigned int *)this + 12) - 1)
      v8 = 0;
    else
      v8 = v2 + 1;
    *((_QWORD *)this + 3) = v8;
    WebKit::UserMediaPermissionRequestManagerProxy::startProcessingUserMediaPermissionRequest((uint64_t)this, &v9);
    if (v9)
      CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

void WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(WebKit::UserMediaPermissionRequestManagerProxy *this, WebKit::UserMediaPermissionRequestProxy *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebKit::WebPageProxy *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::String *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  WTF *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  void *v34;
  uint64_t i;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  WTF::String *v64;
  WTF::StringImpl **v65;
  WTF::StringImpl *v66[2];
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69[2];
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  _QWORD v72[4];
  WTF *v73[2];
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  _BYTE buf[12];
  int v84;
  int v85;
  _DWORD v86[4];
  WTF::StringImpl *v87;
  int v88;
  _DWORD v89[4];
  WTF::StringImpl *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  if (!*(_BYTE *)(v5 + 729) && *(_BYTE *)(v5 + 728))
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
    if (v6)
      v7 = (WebKit::WebPageProxy *)(v6 - 16);
    else
      v7 = 0;
    v8 = WebKit::WebPageProxy::logger(v7);
    v9 = (*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(_QWORD *)this + 24))(this);
    v10 = *((_QWORD *)this + 31);
    v72[0] = v9;
    v72[1] = v11;
    v72[2] = "grantRequest";
    v72[3] = v10;
    v12 = (WTF::String *)*((_QWORD *)a2 + 3);
    WebKit::UserMediaPermissionRequestProxy::videoDevice((WebKit::UserMediaPermissionRequestProxy *)v69, (uint64_t)a2);
    v13 = (WTF::StringImpl **)WebCore::CaptureDevice::label((WebCore::CaptureDevice *)v69);
    WebKit::UserMediaPermissionRequestProxy::audioDevice((WebKit::UserMediaPermissionRequestProxy *)v66, (uint64_t)a2);
    v65 = (WTF::StringImpl **)WebCore::CaptureDevice::label((WebCore::CaptureDevice *)v66);
    if (!*(_BYTE *)(v8 + 12))
    {
LABEL_80:
      v39 = v68;
      v68 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v14);
        else
          *(_DWORD *)v39 -= 2;
      }
      v40 = v67;
      v67 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v14);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v66[0];
      v66[0] = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v14);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = v71;
      v71 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v14);
        else
          *(_DWORD *)v42 -= 2;
      }
      v43 = v70;
      v70 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v14);
        else
          *(_DWORD *)v43 -= 2;
      }
      v44 = v69[0];
      v69[0] = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v14);
        else
          *(_DWORD *)v44 -= 2;
      }
      v45 = *((_QWORD *)a2 + 262);
      *((_QWORD *)a2 + 262) = 0;
      if (v45)
      {
        v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v46 = &off_1E34D22E0;
        v46[1] = v45;
        *(_QWORD *)buf = v46;
        WebKit::WebPageProxy::willStartCapture(v5, (uint64_t)a2, (uint64_t *)buf);
        v47 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        v48 = *((unsigned int *)this + 41);
        if ((_DWORD)v48 == *((_DWORD *)this + 40))
        {
          WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::UserMediaPermissionRequestProxy&>((uint64_t)this + 152, (uint64_t)a2);
        }
        else
        {
          v62 = *((_QWORD *)this + 19);
          CFRetain(*((CFTypeRef *)a2 + 1));
          *(_QWORD *)(v62 + 8 * v48) = a2;
          ++*((_DWORD *)this + 41);
        }
        *(_OWORD *)v69 = *((_OWORD *)a2 + 3);
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::add((uint64_t)buf, (uint64_t *)this + 35, v69);
      }
      else
      {
        v49 = (unsigned int *)*((_QWORD *)a2 + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 + 1, v49));
        v51 = (unsigned int *)*((_QWORD *)a2 + 9);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 + 1, v51));
        v53 = (unsigned int *)WebKit::WebsiteDataStore::ensureDeviceIdHashSaltStorage(*(WebKit::WebsiteDataStore **)(v5 + 264));
        v54 = v53;
        do
          v55 = __ldaxr(v53);
        while (__stlxr(v55 + 1, v53));
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
        v56 = (unsigned int *)*((_QWORD *)this + 1);
        if (v56)
        {
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 + 1, v56));
        }
        CFRetain(*((CFTypeRef *)a2 + 1));
        v58 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v58 = &off_1E34D2308;
        v58[1] = v56;
        v58[2] = a2;
        *(_QWORD *)buf = v58;
        WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin((uint64_t)v54, (uint64_t)v49, (uint64_t)v51, (uint64_t *)buf);
        v59 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v59)
          (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
        WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v54);
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v51, v60);
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v49, v61);
      }
      goto LABEL_5;
    }
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v72);
    WTF::String::number(v12);
    WTF::String::String((WTF::String *)&v75, ", video: ");
    v15 = *v13;
    if (*v13)
      *(_DWORD *)v15 += 2;
    WTF::String::String((WTF::String *)&v74, ", audio: ");
    v16 = *v65;
    if (*v65)
      *(_DWORD *)v16 += 2;
    v73[0] = v76;
    v82 = v75;
    *(_QWORD *)buf = v77;
    v80 = v74;
    v81 = v15;
    v79 = v16;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v73, (uint64_t *)&v82, (uint64_t *)&v81, (uint64_t *)&v80, (uint64_t *)&v79, &v78);
    if (!v78)
    {
      __break(0xC471u);
      return;
    }
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
    v18 = v74;
    v74 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v17);
        if (!v15)
        {
LABEL_31:
          v19 = v75;
          v75 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v17);
            else
              *(_DWORD *)v19 -= 2;
          }
          v20 = v76;
          v76 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v17);
            else
              *(_DWORD *)v20 -= 2;
          }
          v21 = v77;
          v77 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v17);
            else
              *(_DWORD *)v21 -= 2;
          }
          v22 = qword_1ECE71B18;
          v23 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v23)
          {
            WTF::String::utf8();
            v24 = v73[0] ? (char *)v73[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v24;
            _os_log_impl(&dword_196BCC000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v23 = v73[0];
            v73[0] = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 1)
                v23 = (WTF *)WTF::fastFree(v23, v14);
              else
                --*(_DWORD *)v23;
            }
          }
          if (WebKit2LogWebRTC)
          {
            v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v26 = *v25;
              if ((v26 & 1) != 0)
                break;
              v27 = __ldaxr(v25);
              if (v27 == v26)
              {
                if (!__stxr(v26 | 1, v25))
                {
                  v64 = v12;
                  v28 = WTF::Logger::observers(v23);
                  v29 = *(unsigned int *)(v28 + 12);
                  if ((_DWORD)v29)
                  {
                    v30 = *(uint64_t **)v28;
                    v63 = *(_QWORD *)v28 + 8 * v29;
                    do
                    {
                      v31 = *v30;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v72);
                      v84 = 0;
                      WTF::String::number(v64);
                      v85 = 0;
                      WTF::String::String((WTF::String *)v86, ", video: ");
                      v86[2] = 0;
                      v32 = *v13;
                      if (*v13)
                        *(_DWORD *)v32 += 2;
                      v87 = v32;
                      v88 = 0;
                      WTF::String::String((WTF::String *)v89, ", audio: ");
                      v89[2] = 0;
                      v33 = *v65;
                      if (*v65)
                        *(_DWORD *)v33 += 2;
                      v90 = v33;
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v73, (uint64_t)buf, 6uLL);
                      (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v31 + 16))(v31, &WebKit2LogWebRTC, 0, v73);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v73, v34);
                      for (i = 88; i != -8; i -= 16)
                      {
                        v36 = *(WTF::StringImpl **)&buf[i];
                        *(_QWORD *)&buf[i] = 0;
                        if (v36)
                        {
                          if (*(_DWORD *)v36 == 2)
                            WTF::StringImpl::destroy(v36, v14);
                          else
                            *(_DWORD *)v36 -= 2;
                        }
                      }
                      ++v30;
                    }
                    while (v30 != (uint64_t *)v63);
                  }
                  v37 = __ldxr(v25);
                  if (v37 == 1)
                  {
                    if (!__stlxr(0, v25))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v38 = v78;
          v78 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v14);
            else
              *(_DWORD *)v38 -= 2;
          }
          goto LABEL_80;
        }
LABEL_28:
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v17);
        else
          *(_DWORD *)v15 -= 2;
        goto LABEL_31;
      }
      *(_DWORD *)v18 -= 2;
    }
    if (!v15)
      goto LABEL_31;
    goto LABEL_28;
  }
LABEL_5:
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 - 8));
}

double WebKit::UserMediaPermissionRequestProxy::videoDevice(WebKit::UserMediaPermissionRequestProxy *this, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  double result;

  if (*(_DWORD *)(a2 + 92))
  {
    v2 = *(_QWORD *)(a2 + 80);
    v3 = *(_DWORD **)v2;
    if (*(_QWORD *)v2)
      *v3 += 2;
    *(_QWORD *)this = v3;
    *((_BYTE *)this + 8) = *(_BYTE *)(v2 + 8);
    v4 = *(_DWORD **)(v2 + 16);
    if (v4)
      *v4 += 2;
    *((_QWORD *)this + 2) = v4;
    v5 = *(_DWORD **)(v2 + 24);
    if (v5)
      *v5 += 2;
    *((_QWORD *)this + 3) = v5;
    *((_DWORD *)this + 8) = *(_DWORD *)(v2 + 32);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
    result = 0.0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  return result;
}

double WebKit::UserMediaPermissionRequestProxy::audioDevice(WebKit::UserMediaPermissionRequestProxy *this, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  double result;

  if (*(_DWORD *)(a2 + 108))
  {
    v2 = *(_QWORD *)(a2 + 96);
    v3 = *(_DWORD **)v2;
    if (*(_QWORD *)v2)
      *v3 += 2;
    *(_QWORD *)this = v3;
    *((_BYTE *)this + 8) = *(_BYTE *)(v2 + 8);
    v4 = *(_DWORD **)(v2 + 16);
    if (v4)
      *v4 += 2;
    *((_QWORD *)this + 2) = v4;
    v5 = *(_DWORD **)(v2 + 24);
    if (v5)
      *v5 += 2;
    *((_QWORD *)this + 3) = v5;
    *((_DWORD *)this + 8) = *(_DWORD *)(v2 + 32);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
    result = 0.0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  return result;
}

WTF::StringImpl *WebKit::UserMediaPermissionRequestManagerProxy::didCommitLoadForFrame(uint64_t *a1, WTF::String *a2, uint64_t a3)
{
  uint64_t v5;
  WebKit::WebPageProxy *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *result;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::String *v14;
  _QWORD v15[4];
  _QWORD v16[2];

  v16[0] = a2;
  v16[1] = a3;
  v5 = *(_QWORD *)(a1[8] + 8);
  if (v5)
    v6 = (WebKit::WebPageProxy *)(v5 - 16);
  else
    v6 = 0;
  v7 = WebKit::WebPageProxy::logger(v6);
  v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
  v9 = a1[31];
  v15[0] = v8;
  v15[1] = v10;
  v15[2] = "didCommitLoadForFrame";
  v15[3] = v9;
  v14 = a2;
  if (*(_BYTE *)(v7 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v15, &v14);
  result = (WTF::StringImpl *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>(a1 + 21, v16);
  v12 = a1[21];
  if (v12)
  {
    v13 = (WTF::StringImpl *)(v12 + 24 * *(unsigned int *)(v12 - 4));
    if (v13 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v13 = 0;
  }
  if (v13 != result)
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(a1 + 21, result);
  return result;
}

void WebKit::UserMediaPermissionRequestManagerProxy::resetAccess(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WebKit::WebPageProxy *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF::String *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  WTF::String *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v55;
  uint64_t *v56;
  _OWORD *v58;
  _OWORD *v59;
  _OWORD *v60;
  int v61;
  _OWORD *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  void *v69;
  unsigned int v70;
  WTF *v71;
  __int128 v72;
  uint64_t v73;
  WTF::String *v74;
  _QWORD v75[4];

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (v4)
    v5 = (WebKit::WebPageProxy *)(v4 - 16);
  else
    v5 = 0;
  v6 = WebKit::WebPageProxy::logger(v5);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v9 = *(_QWORD *)(a1 + 248);
  v75[0] = v7;
  v75[1] = v8;
  v75[2] = "resetAccess";
  v75[3] = v9;
  if (*(_BYTE *)(a2 + 16))
    v10 = *(WTF::String **)a2;
  else
    v10 = 0;
  v74 = v10;
  if (*(_BYTE *)(v6 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v75, &v74);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    CFRetain(*(CFTypeRef *)(v11 + 8));
    if (!*(_BYTE *)(a2 + 16)
      || (v12 = *(_QWORD *)(a1 + 16), *(_QWORD *)(v12 + 48) == *(_QWORD *)a2)
      && *(_QWORD *)(v12 + 56) == *(_QWORD *)(a2 + 8))
    {
      v72 = *(_OWORD *)(a1 + 24);
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_DWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      WebKit::UserMediaPermissionRequestProxy::deny((_QWORD *)v11, 6);
      v17 = *(_QWORD *)(a1 + 24);
      v16 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 24) = v72;
      v18 = *(WTF **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v13;
      v19 = *(unsigned int *)(a1 + 48);
      *(_DWORD *)(a1 + 48) = v14;
      if (v17 <= v16)
      {
        if (v17 != v16)
        {
          v26 = (uint64_t *)((char *)v18 + 8 * v17);
          v27 = 8 * v16 - 8 * v17;
          do
          {
            v28 = *v26;
            *v26 = 0;
            if (v28)
              CFRelease(*(CFTypeRef *)(v28 + 8));
            ++v26;
            v27 -= 8;
          }
          while (v27);
        }
      }
      else
      {
        if (v16)
        {
          v20 = 8 * v16;
          v21 = v18;
          do
          {
            v22 = *(_QWORD *)v21;
            *(_QWORD *)v21 = 0;
            if (v22)
              CFRelease(*(CFTypeRef *)(v22 + 8));
            v21 = (WTF *)((char *)v21 + 8);
            v20 -= 8;
          }
          while (v20);
        }
        if (v17 != v19)
        {
          v23 = (uint64_t *)((char *)v18 + 8 * v17);
          v24 = 8 * v19 - 8 * v17;
          do
          {
            v25 = *v23;
            *v23 = 0;
            if (v25)
              CFRelease(*(CFTypeRef *)(v25 + 8));
            ++v23;
            v24 -= 8;
          }
          while (v24);
        }
      }
      if (v18)
        WTF::fastFree(v18, v15);
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  if (!*(_BYTE *)(a2 + 16))
  {
    WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(a1 + 152), v8);
    v42 = *(_QWORD *)(a1 + 280);
    if (v42)
    {
      *(_QWORD *)(a1 + 280) = 0;
      WTF::fastFree((WTF *)(v42 - 16), v41);
    }
    v43 = *(_QWORD *)(a1 + 168);
    if (v43)
    {
      *(_QWORD *)(a1 + 168) = 0;
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v43, (WTF::StringImpl *)v41);
    }
    goto LABEL_95;
  }
  v29 = *(_QWORD *)(a1 + 152);
  v30 = *(unsigned int *)(a1 + 164);
  v31 = (char *)(v29 + 8 * v30);
  v32 = 0;
  if ((_DWORD)v30)
  {
    v73 = a2;
    v33 = *(WTF::String **)a2;
    v34 = *(_QWORD *)(a2 + 8);
    v35 = *(_QWORD *)(a1 + 152);
    v36 = (char *)(v29 + 8 * v30);
    v37 = v36;
    while (1)
    {
      v38 = *(_QWORD *)v29;
      if (*(WTF::String **)(*(_QWORD *)v29 + 32) != v33 || *(_QWORD *)(*(_QWORD *)v29 + 40) != v34)
        goto LABEL_49;
      v40 = (char *)v29;
      if (v37 != (char *)(*(_QWORD *)(a1 + 152) + 8 * *(unsigned int *)(a1 + 164)))
      {
        if ((char *)v29 != v36)
        {
          memmove(v37, v36, v35 - (_QWORD)v36);
          v40 = &v37[v35 - (_QWORD)v36];
          v38 = *(_QWORD *)v29;
          *(_QWORD *)v29 = 0;
          v36 = (char *)(v29 + 8);
          if (!v38)
            goto LABEL_48;
          goto LABEL_47;
        }
        v40 = v37;
      }
      *(_QWORD *)v29 = 0;
      v36 = (char *)(v29 + 8);
LABEL_47:
      CFRelease(*(CFTypeRef *)(v38 + 8));
LABEL_48:
      ++v32;
      v37 = v40;
LABEL_49:
      v29 += 8;
      v35 += 8;
      if (v29 >= (unint64_t)v31)
      {
        v29 = *(_QWORD *)(a1 + 152);
        LODWORD(v30) = *(_DWORD *)(a1 + 164);
        v31 = v37;
        a2 = v73;
        goto LABEL_56;
      }
    }
  }
  v36 = (char *)(v29 + 8 * v30);
LABEL_56:
  v44 = (char *)(v29 + 8 * v30);
  if (v36 != v44)
  {
    memmove(v31, v36, v44 - v36);
    LODWORD(v30) = *(_DWORD *)(a1 + 164);
  }
  *(_DWORD *)(a1 + 164) = v30 - v32;
  if (!*(_BYTE *)(a2 + 16))
  {
LABEL_101:
    __break(1u);
    return;
  }
  v45 = (_QWORD *)(a1 + 280);
  v46 = *(_QWORD *)(a1 + 280);
  if (!v46)
    goto LABEL_88;
  v47 = *(_DWORD *)(v46 - 8);
  LODWORD(v75[0]) = -1640531527;
  WORD2(v75[0]) = 0;
  BYTE6(v75[0]) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>((unsigned int *)v75, (_QWORD *)a2);
  v48 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v75);
  v49 = *(_QWORD *)(a2 + 8);
  v50 = v48 & v47;
  v51 = (uint64_t *)(v46 + 16 * v50);
  v52 = *v51;
  v53 = v51[1];
  if (*v51 == *(_QWORD *)a2 && v53 == v49)
  {
LABEL_71:
    v58 = (_OWORD *)(v46 + 16 * v50);
    v59 = (_OWORD *)*v45;
    if (!*v45)
    {
LABEL_76:
      if (v59 != v58)
      {
        *v58 = xmmword_1978CF7D0;
        ++*(_DWORD *)(*v45 - 16);
        v60 = (_OWORD *)*v45;
        v61 = *v45 ? *((_DWORD *)v60 - 3) - 1 : -1;
        *((_DWORD *)v60 - 3) = v61;
        v62 = (_OWORD *)*v45;
        if (*v45)
        {
          v63 = 6 * *((_DWORD *)v62 - 3);
          v64 = *((_DWORD *)v62 - 1);
          if (v63 < v64 && v64 >= 9)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::rehash((uint64_t *)(a1 + 280), v64 >> 1, 0);
        }
      }
      goto LABEL_87;
    }
LABEL_75:
    v59 += *((unsigned int *)v59 - 1);
    if (v59 == v58)
      goto LABEL_87;
    goto LABEL_76;
  }
  v55 = 1;
  while (v52 | v53)
  {
    v50 = ((_DWORD)v50 + v55) & v47;
    v56 = (uint64_t *)(v46 + 16 * v50);
    v52 = *v56;
    v53 = v56[1];
    ++v55;
    if (v52 == *(_QWORD *)a2 && v53 == v49)
      goto LABEL_71;
  }
  v59 = (_OWORD *)*v45;
  if (*v45)
  {
    v58 = &v59[*((unsigned int *)v59 - 1)];
    goto LABEL_75;
  }
LABEL_87:
  if (!*(_BYTE *)(a2 + 16))
    goto LABEL_101;
LABEL_88:
  v66 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a1 + 168), (_QWORD *)a2);
  v41 = v66;
  v67 = *(_QWORD *)(a1 + 168);
  if (v67)
  {
    v68 = (uint64_t *)(v67 + 24 * *(unsigned int *)(v67 - 4));
    if (v68 == v66)
      goto LABEL_95;
LABEL_93:
    if (v68 != v66)
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove((uint64_t *)(a1 + 168), (WTF::StringImpl *)v66);
    goto LABEL_95;
  }
  if (v66)
  {
    v68 = 0;
    goto LABEL_93;
  }
LABEL_95:
  WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(a1 + 136), v41);
  if (*(_DWORD *)(a1 + 184))
  {
    v70 = *(_DWORD *)(a1 + 188);
    if (v70)
    {
      WTF::VectorDestructor<true,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::destruct(*(_QWORD *)(a1 + 176), (WTF::StringImpl *)(*(_QWORD *)(a1 + 176) + 40 * v70));
      *(_DWORD *)(a1 + 188) = 0;
    }
    v71 = *(WTF **)(a1 + 176);
    if (v71)
    {
      *(_QWORD *)(a1 + 176) = 0;
      *(_DWORD *)(a1 + 184) = 0;
      WTF::fastFree(v71, v69);
    }
  }
  *(_BYTE *)(a1 + 256) = 0;
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::UserMediaPermissionRequestProxy::deny(_QWORD *a1, int a2)
{
  WebKit::UserMediaPermissionRequestManagerProxy *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  result = (WebKit::UserMediaPermissionRequestManagerProxy *)a1[2];
  if (result)
  {
    v6 = 0;
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(result, (uint64_t)a1, a2, (uint64_t *)&v6, 0);
    v5 = v6;
    v6 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  }
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::searchForGrantedRequest(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::SecurityOrigin *a4, const WebCore::SecurityOrigin *a5, char a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  int isSameSchemeHostPort;
  WTF::StringImpl *v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v32;

  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (v14)
    v15 = v14 - 16;
  else
    v15 = 0;
  CFRetain(*(CFTypeRef *)(v15 + 8));
  v16 = *(_BYTE *)(*(_QWORD *)(v15 + 32) + 872) & 0x1E;
  if (v14)
    CFRelease(*(CFTypeRef *)(v14 - 8));
  if (v16)
    return 0;
  v17 = *(unsigned int *)(a1 + 164);
  if (!(_DWORD)v17)
    return 0;
  v32 = a3;
  v18 = *(uint64_t **)(a1 + 152);
  v19 = &v18[v17];
  while (1)
  {
    v20 = *v18;
    CFRetain(*(CFTypeRef *)(*v18 + 8));
    if (*(unsigned __int8 *)(v20 + 112) - 1 < 2)
      goto LABEL_29;
    v21 = *(unsigned int **)(v20 + 64);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    isSameSchemeHostPort = WebCore::SecurityOrigin::isSameSchemeHostPort((WebCore::SecurityOrigin *)v21, a4);
    v25 = isSameSchemeHostPort;
    if (v21)
    {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v21, v24);
      if (!v25)
        goto LABEL_29;
    }
    else if (!isSameSchemeHostPort)
    {
      goto LABEL_29;
    }
    v26 = *(unsigned int **)(v20 + 72);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    v28 = WebCore::SecurityOrigin::isSameSchemeHostPort((WebCore::SecurityOrigin *)v26, a5);
    v30 = v28;
    if (v26)
      break;
    if (v28)
      goto LABEL_18;
LABEL_29:
    CFRelease(*(CFTypeRef *)(v20 + 8));
    if (++v18 == v19)
      return 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v26, v29);
  if (!v30)
    goto LABEL_29;
LABEL_18:
  if (a2 && (*(_QWORD *)(v20 + 48) != a2 || *(_QWORD *)(v20 + 56) != v32))
    goto LABEL_29;
  if (*(unsigned __int8 *)(v20 + 112) - 1 >= 2)
    a7 &= *(_DWORD *)(v20 + 92) == 0;
  a6 &= *(_DWORD *)(v20 + 108) == 0;
  if ((a7 & 1) != 0 || (a6 & 1) != 0)
    goto LABEL_29;
  CFRelease(*(CFTypeRef *)(v20 + 8));
  return v20;
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::wasRequestDenied(WebKit::UserMediaPermissionRequestManagerProxy *this, const WebKit::UserMediaPermissionRequestProxy *a2, _QWORD *a3, char a4, char a5, char a6)
{
  char v11;
  uint64_t v12;

  if (!(_DWORD)a2)
    return 0;
  v11 = a4 & a5;
  v12 = 40 * a2;
  while (1)
  {
    if (!WebKit::isMatchingDeniedRequest(a3, this))
      goto LABEL_14;
    if (*((_BYTE *)this + 34) && (a6 & 1) != 0)
      return 1;
    if (*((_BYTE *)this + 32))
    {
      if (*((_BYTE *)this + 33))
      {
        if ((v11 & 1) != 0)
          return 1;
      }
      else if ((a4 & 1) != 0)
      {
        return 1;
      }
    }
    else if (*((_BYTE *)this + 33) && (a5 & 1) != 0)
    {
      return 1;
    }
LABEL_14:
    this = (WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 40);
    v12 -= 40;
    if (!v12)
      return 0;
  }
}

uint64_t WebKit::isMatchingDeniedRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t isSameSchemeHostPort;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  if (*a2 != a1[4] || a2[1] != a1[5])
    return 0;
  v6 = (unsigned int *)a2[2];
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (unsigned int *)a1[8];
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  if (WebCore::SecurityOrigin::isSameSchemeHostPort((WebCore::SecurityOrigin *)v6, (const WebCore::SecurityOrigin *)v8))
  {
    v11 = (unsigned int *)a2[3];
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = (unsigned int *)a1[9];
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    isSameSchemeHostPort = WebCore::SecurityOrigin::isSameSchemeHostPort((WebCore::SecurityOrigin *)v11, (const WebCore::SecurityOrigin *)v13);
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v13, v15);
    if (v11)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v11, v10);
  }
  else
  {
    isSameSchemeHostPort = 0;
  }
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v8, v10);
  if (v6)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v6, v16);
  return isSameSchemeHostPort;
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::scheduleNextRejection(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  uint64_t result;

  result = WTF::RunLoop::TimerBase::isActive((WebKit::UserMediaPermissionRequestManagerProxy *)((char *)this + 72));
  if ((result & 1) == 0)
  {
    WTF::cryptographicallyRandomUnitInterval((WTF *)result);
    return WTF::RunLoop::TimerBase::start();
  }
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::getRequestAction(WebKit::UserMediaPermissionRequestManagerProxy **this, const WebKit::UserMediaPermissionRequestProxy *a2)
{
  int v4;
  uint64_t v5;
  char v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v4 = *((unsigned __int8 *)a2 + 112);
  if (v4 == 1)
  {
    v5 = 2;
    if (!*((_BYTE *)a2 + 2056))
    {
      if (WebKit::UserMediaPermissionRequestManagerProxy::wasRequestDenied(this[22], (const WebKit::UserMediaPermissionRequestProxy *)*((unsigned int *)this + 47), a2, *((_DWORD *)a2 + 27) != 0, 0, 1))return 0;
      else
        return 2;
    }
    return v5;
  }
  v7 = v4 != 2 && *((_DWORD *)a2 + 23) != 0;
  v8 = *((_DWORD *)a2 + 27);
  if (*((_BYTE *)a2 + 2056))
  {
    if (v4 == 2)
      return 2;
    goto LABEL_20;
  }
  v9 = WebKit::UserMediaPermissionRequestManagerProxy::wasRequestDenied(this[22], (const WebKit::UserMediaPermissionRequestProxy *)*((unsigned int *)this + 47), a2, v8 != 0, v7, v4 == 2);
  if (v9)
    v5 = 0;
  else
    v5 = 2;
  if (v4 != 2 && (v9 & 1) == 0)
  {
LABEL_20:
    v10 = *((_QWORD *)a2 + 6);
    v11 = *((_QWORD *)a2 + 7);
    v12 = (unsigned int *)*((_QWORD *)a2 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = (unsigned int *)*((_QWORD *)a2 + 9);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    if (WebKit::UserMediaPermissionRequestManagerProxy::searchForGrantedRequest((uint64_t)this, v10, v11, (const WebCore::SecurityOrigin *)v12, (const WebCore::SecurityOrigin *)v14, v8 != 0, v7))
    {
      v5 = 1;
    }
    else
    {
      v5 = 2;
    }
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v14, v16);
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v12, v17);
  }
  return v5;
}

void WebKit::UserMediaPermissionRequestManagerProxy::requestUserMediaPermissionForFrame(WebKit::UserMediaPermissionRequestManagerProxy *a1, WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebKit::WebPageProxy *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  WebKit::WebPageProxy *v30;
  uint64_t v31;
  WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  NSObject *v38;
  WTF *v39;
  void *v40;
  char *v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t i;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  WTF::String *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60[2];
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint8_t buf[16];
  const char *v65;
  _QWORD v66[3];

  v66[1] = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(*((_QWORD *)a1 + 8) + 8);
  if (v14)
    v15 = v14 - 16;
  else
    v15 = 0;
  CFRetain(*(CFTypeRef *)(v15 + 8));
  if (!*(_BYTE *)(v15 + 729) && *(_BYTE *)(v15 + 728))
  {
    v16 = *(_QWORD *)(*((_QWORD *)a1 + 8) + 8);
    if (v16)
      v17 = (WebKit::WebPageProxy *)(v16 - 16);
    else
      v17 = 0;
    v18 = WebKit::WebPageProxy::logger(v17);
    v19 = (*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(_QWORD *)a1 + 24))(a1);
    v20 = *((_QWORD *)a1 + 31);
    *(_QWORD *)buf = v19;
    *(_QWORD *)&buf[8] = v21;
    v65 = "requestUserMediaPermissionForFrame";
    v66[0] = v20;
    v55 = a2;
    if (*(_BYTE *)(v18 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)buf, &v55);
    v22 = *(_QWORD *)(v15 + 280);
    v23 = *(_QWORD *)(v22 + 272);
    v24 = *(_QWORD *)(v22 + 280);
    *(_OWORD *)buf = 0uLL;
    v55 = 0;
    v56 = 0;
    v60[0] = 0;
    v25 = API::Object::newObject(0x840uLL, 107);
    v26 = WebKit::UserMediaPermissionRequestProxy::UserMediaPermissionRequestProxy(v25, (uint64_t)a1, (uint64_t)a2, v23, v24, a3, a4, a5, a6, (uint64_t *)buf, (uint64_t *)&v55, a7, (uint64_t *)v60);
    *(_QWORD *)v26 = &off_1E34CF538;
    *(_BYTE *)(v26 + 2104) = 0;
    v59 = v26;
    if (v60[0])
      (*(void (**)(WTF *))(*(_QWORD *)v60[0] + 8))(v60[0]);
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v55, v27);
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v28);
    if (*((_QWORD *)a1 + 2))
    {
      WTF::Deque<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul>::append((uint64_t)a1 + 24, &v59);
    }
    else
    {
      {
        if (!(_BYTE)word_1EE341E28)
        {
          v29 = *(_QWORD *)(*((_QWORD *)a1 + 8) + 8);
          if (v29)
            v30 = (WebKit::WebPageProxy *)(v29 - 16);
          else
            v30 = 0;
          v31 = WebKit::WebPageProxy::logger(v30);
          v32 = (WTF::String *)(*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(_QWORD *)a1 + 24))(a1);
          v33 = *((_QWORD *)a1 + 31);
          v55 = v32;
          v56 = v34;
          v57 = "requestUserMediaPermissionForFrame";
          v58 = v33;
          if (*(_BYTE *)(v31 + 12))
          {
            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v55);
            WTF::String::String((WTF::String *)&v61, "capture disabled");
            *(_QWORD *)buf = v62;
            v60[0] = v61;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v60, &v63);
            if (!v63)
            {
              __break(0xC471u);
              return;
            }
            v36 = v61;
            v61 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v35);
              else
                *(_DWORD *)v36 -= 2;
            }
            v37 = v62;
            v62 = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, v35);
              else
                *(_DWORD *)v37 -= 2;
            }
            v38 = qword_1ECE71B18;
            v39 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v39)
            {
              WTF::String::utf8();
              v41 = v60[0] ? (char *)v60[0] + 16 : 0;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v41;
              _os_log_impl(&dword_196BCC000, v38, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              v39 = v60[0];
              v60[0] = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 1)
                  v39 = (WTF *)WTF::fastFree(v39, v40);
                else
                  --*(_DWORD *)v39;
              }
            }
            if (WebKit2LogWebRTC)
            {
              v42 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v43 = *v42;
                if ((v43 & 1) != 0)
                  break;
                v44 = __ldaxr(v42);
                if (v44 == v43)
                {
                  if (!__stxr(v43 | 1, v42))
                  {
                    v45 = WTF::Logger::observers(v39);
                    v46 = *(unsigned int *)(v45 + 12);
                    if ((_DWORD)v46)
                    {
                      v47 = *(uint64_t **)v45;
                      v48 = *(_QWORD *)v45 + 8 * v46;
                      do
                      {
                        v49 = *v47;
                        *(_DWORD *)buf = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v55);
                        LODWORD(v65) = 0;
                        WTF::String::String((WTF::String *)v66, "capture disabled");
                        WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v60, (uint64_t)buf, 2uLL);
                        (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v49 + 16))(v49, &WebKit2LogWebRTC, 0, v60);
                        WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v60, v50);
                        for (i = 24; i != -8; i -= 16)
                        {
                          v52 = *(WTF::StringImpl **)&buf[i];
                          *(_QWORD *)&buf[i] = 0;
                          if (v52)
                          {
                            if (*(_DWORD *)v52 == 2)
                              WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v40);
                            else
                              *(_DWORD *)v52 -= 2;
                          }
                        }
                        ++v47;
                      }
                      while (v47 != (uint64_t *)v48);
                    }
                    v53 = __ldxr(v42);
                    if (v53 == 1)
                    {
                      if (!__stlxr(0, v42))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v54 = v63;
            v63 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2)
                WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v40);
              else
                *(_DWORD *)v54 -= 2;
            }
          }
          WTF::Deque<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul>::append((uint64_t)a1 + 104, &v59);
          WebKit::UserMediaPermissionRequestManagerProxy::scheduleNextRejection(a1);
          goto LABEL_68;
        }
      }
      else
      {
        WebKit::UserMediaProcessManager::singleton(void)::manager = (uint64_t)&off_1E34D2148;
        unk_1EE341E10 = 0;
        qword_1EE341E18 = 0;
        unk_1EE341E20 = 0;
        word_1EE341E28 = 1;
      }
      WebKit::UserMediaPermissionRequestManagerProxy::startProcessingUserMediaPermissionRequest((uint64_t)a1, &v59);
    }
LABEL_68:
    if (v59)
      CFRelease(*(CFTypeRef *)(v59 + 8));
  }
  if (v14)
    CFRelease(*(CFTypeRef *)(v14 - 8));
}

uint64_t WTF::Deque<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul>::append(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (!*(_QWORD *)result)
  {
    v5 = *(unsigned int *)(result + 24);
    if (v4)
    {
      if (v4 != v5 - 1)
        goto LABEL_20;
    }
    else if ((_DWORD)v5)
    {
      v4 = 0;
      goto LABEL_20;
    }
LABEL_9:
    v6 = v5;
    v7 = ((unint64_t)v5 >> 2) + v5;
    if (v7 <= 0xF)
      v7 = 15;
    if (v7 >= 0x1FFFFFFF)
    {
      __break(0xC471u);
      return result;
    }
    v8 = *(char **)(result + 16);
    v9 = v7 + 1;
    v10 = (char *)WTF::fastMalloc((WTF *)(8 * (v7 + 1)));
    *(_DWORD *)(v3 + 24) = v9;
    *(_QWORD *)(v3 + 16) = v10;
    v11 = *(_QWORD *)(v3 + 8);
    if (*(_QWORD *)v3 <= v11)
    {
      result = (uint64_t)memcpy(&v10[8 * *(_QWORD *)v3], &v8[8 * *(_QWORD *)v3], 8 * v11 - 8 * *(_QWORD *)v3);
      if (!v8)
      {
LABEL_19:
        v4 = *(_QWORD *)(v3 + 8);
        goto LABEL_20;
      }
    }
    else
    {
      memcpy(v10, v8, 8 * v11);
      v12 = *(_QWORD *)v3 - v6 + *(unsigned int *)(v3 + 24);
      result = (uint64_t)memcpy((void *)(*(_QWORD *)(v3 + 16) + 8 * v12), &v8[8 * *(_QWORD *)v3], 8 * v6 - 8 * *(_QWORD *)v3);
      *(_QWORD *)v3 = v12;
      if (!v8)
        goto LABEL_19;
    }
    if (*(char **)(v3 + 16) == v8)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
    }
    result = WTF::fastFree((WTF *)v8, v13);
    goto LABEL_19;
  }
  if (v4 + 1 == *(_QWORD *)result)
  {
    LODWORD(v5) = *(_DWORD *)(result + 24);
    goto LABEL_9;
  }
LABEL_20:
  v14 = *(_QWORD *)(v3 + 16);
  v15 = *a2;
  *a2 = 0;
  *(_QWORD *)(v14 + 8 * v4) = v15;
  if (v4 == *(unsigned int *)(v3 + 24) - 1)
    v16 = 0;
  else
    v16 = v4 + 1;
  *(_QWORD *)(v3 + 8) = v16;
  return result;
}

WTF *WebKit::UserMediaPermissionRequestManagerProxy::startProcessingUserMediaPermissionRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  WTF *result;
  _QWORD *v18;
  WTF *v19;
  WTF *v20;

  v3 = *a2;
  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  if (v4)
  {
    CFRelease(*(CFTypeRef *)(v4 + 8));
    v3 = *(_QWORD *)(a1 + 16);
  }
  v5 = *(unsigned int **)(v3 + 64);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v20 = (WTF *)v5;
  v7 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 72);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v19 = (WTF *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 48);
  v11 = *(_QWORD *)(v9 + 56);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v12 = *(unsigned int **)(a1 + 8);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
    CFRetain(*(CFTypeRef *)(v14 + 8));
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v15 = &off_1E34D2380;
  v15[1] = a1;
  v15[2] = v12;
  v15[3] = v14;
  v18 = v15;
  WebKit::UserMediaPermissionRequestManagerProxy::getUserMediaPermissionInfo(a1, v10, v11, (uint64_t *)&v20, (uint64_t *)&v19, (uint64_t *)&v18);
  if (v18)
    (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  if (v19)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v19, v16);
  result = v20;
  if (v20)
    return (WTF *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v20, v16);
  return result;
}

WTF::StringImpl *WebKit::UserMediaPermissionRequestManagerProxy::ephemeralDeviceHashSaltForFrame(WTF::StringImpl *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t i;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  char v18;
  _QWORD v19[2];
  _BYTE *v20;
  _BYTE v21[16];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v19[0] = a3;
  v19[1] = a4;
  v6 = (uint64_t *)(a2 + 168);
  result = (WTF::StringImpl *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,std::unique_ptr<WebKit::CacheStorageCache>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<std::unique_ptr<WebKit::CacheStorageCache>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((uint64_t *)(a2 + 168), v19);
  v8 = *(WTF::StringImpl **)(a2 + 168);
  if (v8)
    v8 = (WTF::StringImpl *)((char *)v8 + 24 * *((unsigned int *)v8 - 1));
  if (v8 == result)
  {
    WTF::cryptographicallyRandomValues();
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 1;
    WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v15);
    for (i = 0; i != 24; i += 8)
    {
      WTF::Internal::appendHex();
      v22 = v11;
      v20 = v21;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((WTF::StringBuilder *)&v15, (uint64_t *)&v20);
    }
    v12 = v15;
    if (v15
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v15),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v15),
          (v12 = v15) != 0))
    {
      *(_DWORD *)v12 += 2;
    }
    *(_QWORD *)a1 = v12;
    WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(v6, v19, a1, (uint64_t)v21);
    if (!(_BYTE)v22)
    {
      __break(0xC471u);
      JUMPOUT(0x1972FFCF0);
    }
    v14 = v16;
    v16 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v9 = (_DWORD *)*((_QWORD *)result + 2);
    if (v9)
      *v9 += 2;
    *(_QWORD *)a1 = v9;
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  __int16 v28;
  char v29;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v27 = -1640531527;
  v28 = 0;
  v29 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v27, a2);
  result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v27);
  v11 = result & v9;
  v12 = (_QWORD *)(v8 + 24 * (result & v9));
  v14 = *v12;
  v13 = v12[1];
  if (*(_OWORD *)v12 != 0)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == *a2 && v13 == a2[1])
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 4);
        else
          v24 = 0;
        v26 = 0;
        v25 = v23 + 24 * v24;
        goto LABEL_30;
      }
      if (v13 == -1)
        v15 = v12;
      v11 = (v11 + v16) & v9;
      v12 = (_QWORD *)(v8 + 24 * v11);
      v14 = *v12;
      v13 = v12[1];
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v12 = v15;
    }
  }
  *(_OWORD *)v12 = *(_OWORD *)a2;
  result = (uint64_t)WTF::String::operator=((WTF::StringImpl **)v12 + 2, a3);
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
    {
LABEL_21:
      result = (uint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(a1, v12);
      v12 = (_QWORD *)result;
      v19 = *a1;
      if (*a1)
        LODWORD(v22) = *(_DWORD *)(v19 - 4);
      else
        LODWORD(v22) = 0;
    }
  }
  else if (3 * v22 <= 4 * v21)
  {
    goto LABEL_21;
  }
  v25 = v19 + 24 * v22;
  v26 = 1;
LABEL_30:
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v25;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

void WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionValidRequest(unsigned int *a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::WebPageProxy *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::String *v15;
  WTF::String *v16;
  WTF::String *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  WTF *v26;
  void *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  uint64_t i;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  unsigned int v43;
  int RequestAction;
  uint64_t v45;
  WebKit::WebPageProxy *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::String *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WebKit::UserMediaPermissionRequestManagerProxy *v54;
  uint64_t v55;
  int v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  NSObject *v60;
  WTF *v61;
  void *v62;
  char *v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t j;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  const WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WebCore::RealtimeMediaSourceCenter *BoolValueForKey;
  const WTF::StringImpl *v88;
  WebCore::RealtimeMediaSourceCenter *v89;
  uint64_t v90;
  uint64_t (***v91)(_QWORD);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  WebKit::WebPageProxy *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::String *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  const WTF::StringImpl *v117;
  uint64_t v118;
  unsigned int *v119;
  unsigned int v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  WebKit::WebPageProxy *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF::String *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  NSObject *v134;
  WTF *v135;
  void *v136;
  char *v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t k;
  WTF::StringImpl *v148;
  int v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  NSObject *v152;
  WTF *v153;
  void *v154;
  char *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  unsigned __int8 *v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t m;
  WTF::StringImpl *v169;
  int v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  unsigned int *v173;
  uint64_t v174;
  WTF::String *v175;
  WTF::String *v176;
  WTF::String *v177;
  WTF::String *v178;
  WTF::String *v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF *v191[2];
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  uint8_t buf[12];
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  _DWORD v204[8];
  uint64_t v205;

  v7 = a1;
  v205 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a1 + 2);
  if (v8)
    CFRetain(*(CFTypeRef *)(v8 + 8));
  v9 = *(_QWORD *)(*((_QWORD *)v7 + 8) + 8);
  if (v9)
    v10 = (WebKit::WebPageProxy *)(v9 - 16);
  else
    v10 = 0;
  v11 = WebKit::WebPageProxy::logger(v10);
  v12 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
  v13 = *((_QWORD *)v7 + 31);
  v180 = v12;
  v181 = v14;
  v182 = "processUserMediaPermissionValidRequest";
  v183 = v13;
  v15 = (WTF::String *)a3[3];
  v16 = (WTF::String *)a2[3];
  if (*(_BYTE *)(v11 + 12))
  {
    v17 = *(WTF::String **)(v8 + 24);
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v180);
    v175 = v17;
    WTF::String::number(v17);
    WTF::String::String((WTF::String *)&v187, ", video: ");
    WTF::String::number(v15);
    WTF::String::String((WTF::String *)&v185, " audio: ");
    WTF::String::number(v16);
    v191[0] = v188;
    v195 = v187;
    *(_QWORD *)buf = v189;
    v193 = v185;
    v194 = v186;
    v192 = v184;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v191, (uint64_t *)&v195, (uint64_t *)&v194, (uint64_t *)&v193, (uint64_t *)&v192, &v190);
    if (!v190)
      goto LABEL_283;
    v19 = v184;
    v184 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v185;
    v185 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v186;
    v186 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v18);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v187;
    v187 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v18);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v188;
    v188 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v18);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v189;
    v189 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v18);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = qword_1ECE71B18;
    v26 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v26)
    {
      WTF::String::utf8();
      v28 = v191[0] ? (char *)v191[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v28;
      _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v26 = v191[0];
      v191[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          v26 = (WTF *)WTF::fastFree(v26, v27);
        else
          --*(_DWORD *)v26;
      }
    }
    v176 = v16;
    if (WebKit2LogWebRTC)
    {
      v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v30 = *v29;
        if ((v30 & 1) != 0)
          break;
        v31 = __ldaxr(v29);
        if (v31 == v30)
        {
          if (!__stxr(v30 | 1, v29))
          {
            v172 = a4;
            v173 = v7;
            v32 = WTF::Logger::observers(v26);
            v33 = *(unsigned int *)(v32 + 12);
            if ((_DWORD)v33)
            {
              v34 = *(uint64_t **)v32;
              v174 = *(_QWORD *)v32 + 8 * v33;
              do
              {
                v35 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v180);
                v198 = 0;
                WTF::String::number(v175);
                v199 = 0;
                WTF::String::String((WTF::String *)&v200, ", video: ");
                v201 = 0;
                WTF::String::number(v15);
                v203 = 0;
                WTF::String::String((WTF::String *)v204, " audio: ");
                v204[2] = 0;
                WTF::String::number(v176);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v191, (uint64_t)buf, 6uLL);
                (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v35 + 16))(v35, &WebKit2LogWebRTC, 0, v191);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v191, v36);
                for (i = 88; i != -8; i -= 16)
                {
                  v38 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v174);
            }
            v39 = __ldxr(v29);
            if (v39 == 1)
            {
              v7 = v173;
              a4 = v172;
              if (!__stlxr(0, v29))
                break;
            }
            else
            {
              __clrex();
              v7 = v173;
              a4 = v172;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v40 = v190;
    v190 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v27);
      else
        *(_DWORD *)v40 -= 2;
    }
    LODWORD(v15) = a3[3];
    LODWORD(v16) = a2[3];
  }
  if (*(unsigned __int8 *)(v8 + 112) - 3 <= 0xFFFFFFFD && (_DWORD)v15 == 0 && (_DWORD)v16 == 0)
  {
    *(_QWORD *)buf = 0;
    v54 = (WebKit::UserMediaPermissionRequestManagerProxy *)v7;
    v55 = v8;
    v56 = 0;
    goto LABEL_165;
  }
  WTF::String::operator=((WTF::StringImpl **)(v8 + 2080), (WTF::StringImpl *)a4);
  WTF::String::operator=((WTF::StringImpl **)(v8 + 2088), (WTF::StringImpl *)(a4 + 8));
  WebKit::UserMediaPermissionRequestProxy::setEligibleVideoDeviceUIDs(v8, a3);
  v43 = *(_DWORD *)(v8 + 108);
  if (v43)
    WTF::VectorDestructor<true,WebCore::CaptureDevice>::destruct(*(WTF::StringImpl **)(v8 + 96), (WTF::StringImpl *)(*(_QWORD *)(v8 + 96) + 40 * v43));
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v8 + 96, a2);
  RequestAction = WebKit::UserMediaPermissionRequestManagerProxy::getRequestAction((WebKit::UserMediaPermissionRequestManagerProxy **)v7, (const WebKit::UserMediaPermissionRequestProxy *)v8);
  v45 = *(_QWORD *)(*((_QWORD *)v7 + 8) + 8);
  if (v45)
    v46 = (WebKit::WebPageProxy *)(v45 - 16);
  else
    v46 = 0;
  v47 = WebKit::WebPageProxy::logger(v46);
  v48 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
  v49 = *((_QWORD *)v7 + 31);
  v180 = v48;
  v181 = v50;
  v182 = "processUserMediaPermissionValidRequest";
  v183 = v49;
  if (!*(_BYTE *)(v47 + 12))
    goto LABEL_128;
  v51 = *(WTF::String **)(v8 + 24);
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v180);
  v177 = v51;
  WTF::String::number(v51);
  WTF::String::String((WTF::String *)&v192, ", action: ");
  WebKit::convertEnumerationToString(&v190, RequestAction);
  WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v194, (uint64_t *)&v193, (uint64_t *)&v192, (uint64_t *)&v190, &v195);
  v53 = v190;
  v190 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v52);
    else
      *(_DWORD *)v53 -= 2;
  }
  v57 = v192;
  v192 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v52);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = v193;
  v193 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v52);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = v194;
  v194 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v52);
    else
      *(_DWORD *)v59 -= 2;
  }
  v60 = qword_1ECE71B18;
  v61 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v61)
  {
    WTF::String::utf8();
    v63 = v191[0] ? (char *)v191[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v63;
    _os_log_impl(&dword_196BCC000, v60, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v61 = v191[0];
    v191[0] = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 1)
        v61 = (WTF *)WTF::fastFree(v61, v62);
      else
        --*(_DWORD *)v61;
    }
  }
  if (WebKit2LogWebRTC)
  {
    v64 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v65 = *v64;
      if ((v65 & 1) != 0)
        break;
      v66 = __ldaxr(v64);
      if (v66 == v65)
      {
        if (!__stxr(v65 | 1, v64))
        {
          v67 = WTF::Logger::observers(v61);
          v68 = *(unsigned int *)(v67 + 12);
          if ((_DWORD)v68)
          {
            v69 = *(uint64_t **)v67;
            v70 = *(_QWORD *)v67 + 8 * v68;
            do
            {
              v71 = *v69;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v180);
              v198 = 0;
              WTF::String::number(v177);
              v199 = 0;
              WTF::String::String((WTF::String *)&v200, ", action: ");
              v201 = 0;
              WebKit::convertEnumerationToString(&v202, RequestAction);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v191, (uint64_t)buf, 4uLL);
              (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v71 + 16))(v71, &WebKit2LogWebRTC, 0, v191);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v191, v72);
              for (j = 56; j != -8; j -= 16)
              {
                v74 = *(WTF::StringImpl **)&buf[j];
                *(_QWORD *)&buf[j] = 0;
                if (v74)
                {
                  if (*(_DWORD *)v74 == 2)
                    WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v62);
                  else
                    *(_DWORD *)v74 -= 2;
                }
              }
              ++v69;
            }
            while (v69 != (uint64_t *)v70);
          }
          v75 = __ldxr(v64);
          if (v75 == 1)
          {
            if (!__stlxr(0, v64))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v76 = v195;
  v195 = 0;
  if (!v76)
    goto LABEL_128;
  if (*(_DWORD *)v76 != 2)
  {
    *(_DWORD *)v76 -= 2;
LABEL_128:
    if (RequestAction)
      goto LABEL_129;
    goto LABEL_164;
  }
  WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v62);
  if (!RequestAction)
  {
LABEL_164:
    *(_QWORD *)buf = 0;
    v54 = (WebKit::UserMediaPermissionRequestManagerProxy *)v7;
    v55 = v8;
    v56 = 5;
LABEL_165:
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(v54, v55, v56, (uint64_t *)buf, 0);
    v115 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v115)
    {
      if (*(_DWORD *)v115 == 2)
        WTF::StringImpl::destroy(v115, v114);
      else
        *(_DWORD *)v115 -= 2;
    }
    goto LABEL_281;
  }
LABEL_129:
  v77 = *(_QWORD *)(*((_QWORD *)v7 + 8) + 8);
  if (v77)
    v78 = v77 - 16;
  else
    v78 = 0;
  CFRetain(*(CFTypeRef *)(v78 + 8));
  if (RequestAction == 1)
  {
    if ((*(_WORD *)(*(_QWORD *)(v78 + 32) + 48) & 4) == 0)
    {
      *(_QWORD *)buf = v8;
      v80 = v7[37];
      if ((_DWORD)v80 == v7[36])
      {
        v81 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v7 + 34), v80 + 1, (unint64_t)buf);
        v82 = v7[37];
        v83 = *((_QWORD *)v7 + 17);
        v84 = *v81;
        *v81 = 0;
        *(_QWORD *)(v83 + 8 * v82) = v84;
        v85 = *(_QWORD *)buf;
        v7[37] = v82 + 1;
        *(_QWORD *)buf = 0;
        if (v85)
          CFRelease(*(CFTypeRef *)(v85 + 8));
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)v7 + 17) + 8 * v80) = v8;
        v7[37] = v80 + 1;
      }
      v8 = 0;
      goto LABEL_278;
    }
LABEL_277:
    WebKit::UserMediaPermissionRequestManagerProxy::grantRequest((WebKit::UserMediaPermissionRequestManagerProxy *)v7, (WebKit::UserMediaPermissionRequestProxy *)v8);
    goto LABEL_278;
  }
  v86 = *(_QWORD *)(v78 + 224);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = (WebCore::RealtimeMediaSourceCenter *)WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v86 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, v79);
  if ((_DWORD)BoolValueForKey
    && *(unsigned __int8 *)(v8 + 112) - 1 <= 1
    && !*(_DWORD *)(*((_QWORD *)v7 + 2) + 92))
  {
    v89 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(BoolValueForKey);
    v90 = WebCore::RealtimeMediaSourceCenter::displayCaptureFactory(v89);
    v91 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 24))(v90);
    v92 = (**v91)(v91);
    v93 = *(unsigned int *)(v92 + 12);
    memset(buf, 0, sizeof(buf));
    v197 = v93;
    if (!(_DWORD)v93)
    {
LABEL_153:
      WebKit::UserMediaPermissionRequestProxy::setEligibleVideoDeviceUIDs(v8, buf);
      WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v103);
      goto LABEL_154;
    }
    if (v93 < 0x6666667)
    {
      v94 = v92;
      v95 = 40 * v93;
      v96 = WTF::fastMalloc((WTF *)(40 * v93));
      *(_DWORD *)&buf[8] = (v95 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)buf = v96;
      v97 = *(_DWORD *)(v94 + 12);
      if (v97)
      {
        v98 = *(_QWORD *)v94;
        v99 = *(_QWORD *)v94 + 40 * v97;
        do
        {
          v100 = *(_DWORD **)v98;
          if (*(_QWORD *)v98)
            *v100 += 2;
          *(_QWORD *)v96 = v100;
          *(_BYTE *)(v96 + 8) = *(_BYTE *)(v98 + 8);
          v101 = *(_DWORD **)(v98 + 16);
          if (v101)
            *v101 += 2;
          *(_QWORD *)(v96 + 16) = v101;
          v102 = *(_DWORD **)(v98 + 24);
          if (v102)
            *v102 += 2;
          *(_QWORD *)(v96 + 24) = v102;
          *(_DWORD *)(v96 + 32) = *(_DWORD *)(v98 + 32);
          v98 += 40;
          v96 += 40;
        }
        while (v98 != v99);
      }
      goto LABEL_153;
    }
LABEL_283:
    __break(0xC471u);
    JUMPOUT(0x197301158);
  }
LABEL_154:
  if (*(_BYTE *)(v78 + 826)
    && (v104 = *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(v78 + 48) + 24))
               + 40)) != 0)
  {
    v105 = *(_QWORD *)(*((_QWORD *)v7 + 8) + 8);
    if (v105)
      v106 = (WebKit::WebPageProxy *)(v105 - 16);
    else
      v106 = 0;
    v107 = WebKit::WebPageProxy::logger(v106);
    v108 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
    v109 = *((_QWORD *)v7 + 31);
    v180 = v108;
    v181 = v110;
    v182 = "processUserMediaPermissionValidRequest";
    v183 = v109;
    if (*(_BYTE *)(v107 + 12))
    {
      v111 = *(WTF::String **)(v8 + 24);
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v180);
      v178 = v111;
      WTF::String::number(v111);
      WTF::String::String((WTF::String *)&v192, ", page controlled by automation");
      WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v194, (uint64_t *)&v193, (uint64_t *)&v192, &v195);
      v113 = v192;
      v192 = 0;
      if (v113)
      {
        if (*(_DWORD *)v113 == 2)
          WTF::StringImpl::destroy(v113, v112);
        else
          *(_DWORD *)v113 -= 2;
      }
      v132 = v193;
      v193 = 0;
      if (v132)
      {
        if (*(_DWORD *)v132 == 2)
          WTF::StringImpl::destroy(v132, v112);
        else
          *(_DWORD *)v132 -= 2;
      }
      v133 = v194;
      v194 = 0;
      if (v133)
      {
        if (*(_DWORD *)v133 == 2)
          WTF::StringImpl::destroy(v133, v112);
        else
          *(_DWORD *)v133 -= 2;
      }
      v134 = qword_1ECE71B18;
      v135 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v135)
      {
        WTF::String::utf8();
        v137 = v191[0] ? (char *)v191[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v137;
        _os_log_impl(&dword_196BCC000, v134, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v135 = v191[0];
        v191[0] = 0;
        if (v135)
        {
          if (*(_DWORD *)v135 == 1)
            v135 = (WTF *)WTF::fastFree(v135, v136);
          else
            --*(_DWORD *)v135;
        }
      }
      if (WebKit2LogWebRTC)
      {
        v138 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v139 = *v138;
          if ((v139 & 1) != 0)
            break;
          v140 = __ldaxr(v138);
          if (v140 == v139)
          {
            if (!__stxr(v139 | 1, v138))
            {
              v141 = WTF::Logger::observers(v135);
              v142 = *(unsigned int *)(v141 + 12);
              if ((_DWORD)v142)
              {
                v143 = *(uint64_t **)v141;
                v144 = *(_QWORD *)v141 + 8 * v142;
                do
                {
                  v145 = *v143;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v180);
                  v198 = 0;
                  WTF::String::number(v178);
                  v199 = 0;
                  WTF::String::String((WTF::String *)&v200, ", page controlled by automation");
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v191, (uint64_t)buf, 3uLL);
                  (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v145 + 16))(v145, &WebKit2LogWebRTC, 0, v191);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v191, v146);
                  for (k = 40; k != -8; k -= 16)
                  {
                    v148 = *(WTF::StringImpl **)&buf[k];
                    *(_QWORD *)&buf[k] = 0;
                    if (v148)
                    {
                      if (*(_DWORD *)v148 == 2)
                        WTF::StringImpl::destroy(v148, (WTF::StringImpl *)v136);
                      else
                        *(_DWORD *)v148 -= 2;
                    }
                  }
                  ++v143;
                }
                while (v143 != (uint64_t *)v144);
              }
              v149 = __ldxr(v138);
              if (v149 == 1)
              {
                if (!__stlxr(0, v138))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v156 = v195;
      v195 = 0;
      if (v156)
      {
        if (*(_DWORD *)v156 == 2)
          WTF::StringImpl::destroy(v156, (WTF::StringImpl *)v136);
        else
          *(_DWORD *)v156 -= 2;
      }
    }
    if (*(_BYTE *)(v104 + 272))
      goto LABEL_277;
    *(_QWORD *)buf = 0;
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest((WebKit::UserMediaPermissionRequestManagerProxy *)v7, v8, 5, (uint64_t *)buf, 0);
    v158 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v158)
    {
      if (*(_DWORD *)v158 == 2)
        WTF::StringImpl::destroy(v158, v157);
      else
        *(_DWORD *)v158 -= 2;
    }
  }
  else
  {
    v116 = *(_QWORD *)(v78 + 224);
    {
      WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v116 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, v88))
    {
      v118 = *(_QWORD *)(v78 + 224);
      {
        WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v118 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesPromptEnabledKey(void)::key, v117) & 1) == 0)
      {
        v123 = *(_QWORD *)(*((_QWORD *)v7 + 8) + 8);
        if (v123)
          v124 = (WebKit::WebPageProxy *)(v123 - 16);
        else
          v124 = 0;
        v125 = WebKit::WebPageProxy::logger(v124);
        v126 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
        v127 = *((_QWORD *)v7 + 31);
        v180 = v126;
        v181 = v128;
        v182 = "processUserMediaPermissionValidRequest";
        v183 = v127;
        if (*(_BYTE *)(v125 + 12))
        {
          v129 = *(WTF::String **)(v8 + 24);
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v180);
          v179 = v129;
          WTF::String::number(v129);
          WTF::String::String((WTF::String *)&v192, ", mock devices don't require prompt");
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v194, (uint64_t *)&v193, (uint64_t *)&v192, &v195);
          v131 = v192;
          v192 = 0;
          if (v131)
          {
            if (*(_DWORD *)v131 == 2)
              WTF::StringImpl::destroy(v131, v130);
            else
              *(_DWORD *)v131 -= 2;
          }
          v150 = v193;
          v193 = 0;
          if (v150)
          {
            if (*(_DWORD *)v150 == 2)
              WTF::StringImpl::destroy(v150, v130);
            else
              *(_DWORD *)v150 -= 2;
          }
          v151 = v194;
          v194 = 0;
          if (v151)
          {
            if (*(_DWORD *)v151 == 2)
              WTF::StringImpl::destroy(v151, v130);
            else
              *(_DWORD *)v151 -= 2;
          }
          v152 = qword_1ECE71B18;
          v153 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v153)
          {
            WTF::String::utf8();
            v155 = v191[0] ? (char *)v191[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v155;
            _os_log_impl(&dword_196BCC000, v152, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v153 = v191[0];
            v191[0] = 0;
            if (v153)
            {
              if (*(_DWORD *)v153 == 1)
                v153 = (WTF *)WTF::fastFree(v153, v154);
              else
                --*(_DWORD *)v153;
            }
          }
          if (WebKit2LogWebRTC)
          {
            v159 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v160 = *v159;
              if ((v160 & 1) != 0)
                break;
              v161 = __ldaxr(v159);
              if (v161 == v160)
              {
                if (!__stxr(v160 | 1, v159))
                {
                  v162 = WTF::Logger::observers(v153);
                  v163 = *(unsigned int *)(v162 + 12);
                  if ((_DWORD)v163)
                  {
                    v164 = *(uint64_t **)v162;
                    v165 = *(_QWORD *)v162 + 8 * v163;
                    do
                    {
                      v166 = *v164;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v180);
                      v198 = 0;
                      WTF::String::number(v179);
                      v199 = 0;
                      WTF::String::String((WTF::String *)&v200, ", mock devices don't require prompt");
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v191, (uint64_t)buf, 3uLL);
                      (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v166 + 16))(v166, &WebKit2LogWebRTC, 0, v191);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v191, v167);
                      for (m = 40; m != -8; m -= 16)
                      {
                        v169 = *(WTF::StringImpl **)&buf[m];
                        *(_QWORD *)&buf[m] = 0;
                        if (v169)
                        {
                          if (*(_DWORD *)v169 == 2)
                            WTF::StringImpl::destroy(v169, (WTF::StringImpl *)v154);
                          else
                            *(_DWORD *)v169 -= 2;
                        }
                      }
                      ++v164;
                    }
                    while (v164 != (uint64_t *)v165);
                  }
                  v170 = __ldxr(v159);
                  if (v170 == 1)
                  {
                    if (!__stlxr(0, v159))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v171 = v195;
          v195 = 0;
          if (v171)
          {
            if (*(_DWORD *)v171 == 2)
              WTF::StringImpl::destroy(v171, (WTF::StringImpl *)v154);
            else
              *(_DWORD *)v171 -= 2;
          }
        }
        goto LABEL_277;
      }
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7 + 2, (uint64_t)v7);
    v119 = (unsigned int *)*((_QWORD *)v7 + 1);
    if (v119)
    {
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 + 1, v119));
    }
    v121 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v121 = &off_1E34D2420;
    v121[1] = v119;
    *(_QWORD *)buf = v121;
    WebKit::UserMediaPermissionRequestManagerProxy::requestSystemValidation(v78, v8, (const WTF::StringImpl *)buf);
    v122 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v122)
      (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  }
LABEL_278:
  if (v77)
    CFRelease(*(CFTypeRef *)(v77 - 8));
  if (v8)
LABEL_281:
    CFRelease(*(CFTypeRef *)(v8 + 8));
}

void WebKit::UserMediaPermissionRequestManagerProxy::checkUserMediaPermissionForSpeechRecognition(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::SecurityOrigin *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const URL *v17;
  WTF::StringImpl *v18;
  int v19;
  StringImpl *m_ptr;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  StringImpl *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  int RequestAction;
  uint64_t v48;
  StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[32];
  uint64_t v66;
  uint64_t v67[2];
  uint64_t v68[2];
  uint64_t v69;
  uint64_t v70;
  URL v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (v13)
    v14 = v13 - 16;
  else
    v14 = 0;
  CFRetain(*(CFTypeRef *)(v14 + 8));
  v15 = WebKit::WebFrameProxy::webFrame(a2, a3);
  if (v15)
  {
    v16 = v15;
    CFRetain(*(CFTypeRef *)(v15 + 8));
    WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(_QWORD *)(v14 + 32) + 968), v68);
    MEMORY[0x19AEABB0C](&v53, v68, 0);
    WebCore::SecurityOriginData::toURL((WebCore::SecurityOriginData *)(a5 + 8));
    v19 = WTF::protocolHostAndPortAreEqual((WTF *)&v53, &v71, v17);
    m_ptr = v71.m_string.m_impl.m_ptr;
    v71.m_string.m_impl.m_ptr = 0;
    if (m_ptr)
    {
      if (*(_DWORD *)m_ptr == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v18);
      else
        *(_DWORD *)m_ptr -= 2;
    }
    v21 = v53;
    v53 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v18);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = (WTF::StringImpl *)v68[0];
    v68[0] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v18);
        if (v19)
        {
LABEL_17:
          WebCore::SecurityOrigin::isolatedCopy(a4);
          WebCore::SecurityOrigin::isolatedCopy((WebCore::SecurityOrigin *)a5);
          v23 = *(StringImpl **)a6;
          if (*(_QWORD *)a6)
            *(_DWORD *)v23 += 2;
          v71.m_string.m_impl.m_ptr = v23;
          *((_BYTE *)&v71 + 8) = *(_BYTE *)(a6 + 8);
          v24 = *(_DWORD **)(a6 + 16);
          if (v24)
            *v24 += 2;
          *(_QWORD *)&v71.m_userEnd = v24;
          v25 = *(_DWORD **)(a6 + 24);
          if (v25)
            *v25 += 2;
          *(_QWORD *)&v71.m_hostEnd = v25;
          v71.m_pathEnd = *(_DWORD *)(a6 + 32);
          WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v68, (uint64_t)&v71, 1uLL);
          v67[0] = 0;
          v67[1] = 0;
          LOBYTE(v53) = 0;
          v65[24] = 0;
          v66 = 0;
          bzero(&v54, 0x3C1uLL);
          bzero(&v60, 0x3C1uLL);
          v26 = API::Object::newObject(0x840uLL, 107);
          v27 = WebKit::UserMediaPermissionRequestProxy::UserMediaPermissionRequestProxy(v26, a1, 0, a2, a3, a2, a3, &v70, &v69, v68, v67, (uint64_t)&v53, a7);
          *(_QWORD *)v27 = &off_1E34CF538;
          *(_BYTE *)(v27 + 2104) = 0;
          WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v65, v28);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v64, v29);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v63, v30);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v62, v31);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v61, v32);
          WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v33);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v58, v34);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v57, v35);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v56, v36);
          std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v55, v37);
          WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v67, v38);
          WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v39);
          v41 = *(WTF::StringImpl **)&v71.m_hostEnd;
          *(_QWORD *)&v71.m_hostEnd = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, v40);
            else
              *(_DWORD *)v41 -= 2;
          }
          v43 = *(WTF::StringImpl **)&v71.m_userEnd;
          *(_QWORD *)&v71.m_userEnd = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v40);
            else
              *(_DWORD *)v43 -= 2;
          }
          v44 = v71.m_string.m_impl.m_ptr;
          v71.m_string.m_impl.m_ptr = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v44, v40);
            else
              *(_DWORD *)v44 -= 2;
          }
          v45 = v69;
          v69 = 0;
          if (v45)
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v45, v40);
          v46 = v70;
          v70 = 0;
          if (v46)
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v46, v40);
          RequestAction = WebKit::UserMediaPermissionRequestManagerProxy::getRequestAction((WebKit::UserMediaPermissionRequestManagerProxy **)a1, (const WebKit::UserMediaPermissionRequestProxy *)v26);
          if (RequestAction == 1)
          {
            v48 = *(_QWORD *)(v26 + 2096);
            *(_QWORD *)(v26 + 2096) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, 1);
          }
          else
          {
            if (RequestAction)
            {
              API::SecurityOrigin::create(&v53);
              API::SecurityOrigin::create(&v71);
              (*(void (**)(_QWORD, uint64_t, uint64_t, WTF::StringImpl *, StringImpl *, uint64_t))(**(_QWORD **)(v14 + 104) + 312))(*(_QWORD *)(v14 + 104), v14, v16, v53, v71.m_string.m_impl.m_ptr, v26);
              v49 = v71.m_string.m_impl.m_ptr;
              v71.m_string.m_impl.m_ptr = 0;
              if (v49)
                CFRelease(*((CFTypeRef *)v49 + 1));
              v50 = v53;
              v53 = 0;
              if (v50)
                CFRelease(*((CFTypeRef *)v50 + 1));
              goto LABEL_50;
            }
            v48 = *(_QWORD *)(v26 + 2096);
            *(_QWORD *)(v26 + 2096) = 0;
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 16))(v48, 0);
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
LABEL_50:
          CFRelease(*(CFTypeRef *)(v26 + 8));
LABEL_51:
          CFRelease(*(CFTypeRef *)(v16 + 8));
          if (!v13)
            return;
          goto LABEL_52;
        }
LABEL_27:
        v42 = *a7;
        *a7 = 0;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 16))(v42, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        goto LABEL_51;
      }
      *(_DWORD *)v22 -= 2;
    }
    if (v19)
      goto LABEL_17;
    goto LABEL_27;
  }
  v51 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v51 + 16))(v51, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  if (!v13)
    return;
LABEL_52:
  CFRelease(*(CFTypeRef *)(v13 - 8));
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::shouldChangeDeniedToPromptForCamera(WebKit::UserMediaPermissionRequestManagerProxy *this, const WebCore::ClientOrigin *a2)
{
  uint64_t v4;
  uint64_t v5;
  const URL *v6;
  WTF::StringImpl *v7;
  int v8;
  StringImpl *m_ptr;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  URL v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25[5];

  v4 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(_QWORD *)(v5 + 32) + 968), &v24);
  MEMORY[0x19AEABB0C](v25, &v24, 0);
  WebCore::SecurityOriginData::toURL(a2);
  v8 = WTF::protocolHostAndPortAreEqual((WTF *)v25, &v23, v6);
  m_ptr = v23.m_string.m_impl.m_ptr;
  v23.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v7);
    else
      *(_DWORD *)m_ptr -= 2;
  }
  v10 = v25[0];
  v25[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v24;
  v24 = 0;
  if (!v11)
  {
LABEL_15:
    if (!v8)
      return 1;
    goto LABEL_18;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_15;
  }
  WTF::StringImpl::destroy(v11, v7);
  if (!v8)
    return 1;
LABEL_18:
  v12 = *((unsigned int *)this + 47);
  if ((_DWORD)v12)
  {
    v13 = (unsigned __int8 *)(*((_QWORD *)this + 22) + 33);
    v14 = 40 * v12;
    do
    {
      v15 = *v13;
      v13 += 40;
      if (v15)
        return 0;
      v14 -= 40;
    }
    while (v14);
  }
  v16 = *((unsigned int *)this + 37);
  if ((_DWORD)v16)
  {
    v17 = *((_QWORD *)this + 17);
    v18 = 8 * v16;
    while (*(unsigned __int8 *)(*(_QWORD *)v17 + 112) - 1 < 2 || !*(_DWORD *)(*(_QWORD *)v17 + 92))
    {
      v17 += 8;
      v18 -= 8;
      if (!v18)
        goto LABEL_27;
    }
    return 0;
  }
LABEL_27:
  v19 = *((unsigned int *)this + 41);
  if (!(_DWORD)v19)
    return 1;
  v20 = *((_QWORD *)this + 19);
  v21 = 8 * v19;
  while (*(unsigned __int8 *)(*(_QWORD *)v20 + 112) - 1 < 2 || !*(_DWORD *)(*(_QWORD *)v20 + 92))
  {
    v20 += 8;
    v21 -= 8;
    if (!v21)
      return 1;
  }
  return 0;
}

BOOL WebKit::UserMediaPermissionRequestManagerProxy::shouldChangeDeniedToPromptForMicrophone(WebKit::UserMediaPermissionRequestManagerProxy *this, const WebCore::ClientOrigin *a2)
{
  uint64_t v4;
  uint64_t v5;
  const URL *v6;
  WTF::StringImpl *v7;
  int v8;
  StringImpl *m_ptr;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BOOL8 result;
  BOOL v25;
  URL v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[5];

  v4 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(_QWORD *)(v5 + 32) + 968), &v27);
  MEMORY[0x19AEABB0C](v28, &v27, 0);
  WebCore::SecurityOriginData::toURL(a2);
  v8 = WTF::protocolHostAndPortAreEqual((WTF *)v28, &v26, v6);
  m_ptr = v26.m_string.m_impl.m_ptr;
  v26.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v7);
    else
      *(_DWORD *)m_ptr -= 2;
  }
  v10 = v28[0];
  v28[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v27;
  v27 = 0;
  if (!v11)
  {
LABEL_15:
    if (!v8)
      return 1;
    goto LABEL_18;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_15;
  }
  WTF::StringImpl::destroy(v11, v7);
  if (!v8)
    return 1;
LABEL_18:
  v12 = *((unsigned int *)this + 47);
  if ((_DWORD)v12)
  {
    v13 = (unsigned __int8 *)(*((_QWORD *)this + 22) + 32);
    v14 = 40 * v12;
    do
    {
      v15 = *v13;
      v13 += 40;
      if (v15)
        return 0;
      v14 -= 40;
    }
    while (v14);
  }
  v16 = *((unsigned int *)this + 37);
  if ((_DWORD)v16)
  {
    v17 = *((_QWORD *)this + 17);
    v18 = 8 * v16;
    while (!*(_DWORD *)(*(_QWORD *)v17 + 108))
    {
      v17 += 8;
      v18 -= 8;
      if (!v18)
        goto LABEL_26;
    }
    return 0;
  }
LABEL_26:
  v19 = *((unsigned int *)this + 41);
  if (!(_DWORD)v19)
    return 1;
  v20 = (uint64_t *)*((_QWORD *)this + 19);
  v21 = 8 * v19 - 8;
  do
  {
    v22 = *v20++;
    v23 = *(_DWORD *)(v22 + 108);
    result = v23 == 0;
    if (v23)
      v25 = 1;
    else
      v25 = v21 == 0;
    v21 -= 8;
  }
  while (!v25);
  return result;
}

BOOL WebKit::UserMediaPermissionRequestManagerProxy::shouldChangePromptToGrantForCamera(WebKit::UserMediaPermissionRequestManagerProxy *this, const WebCore::ClientOrigin *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF *v7;
  WTF *v8;

  WebCore::SecurityOriginData::securityOrigin((const WebCore::ClientOrigin *)((char *)a2 + 32));
  WebCore::SecurityOriginData::securityOrigin(a2);
  v5 = WebKit::UserMediaPermissionRequestManagerProxy::searchForGrantedRequest((uint64_t)this, 0, 0, v8, v7, 0, 1);
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v7, v4);
  if (v8)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v8, v4);
  return v5 != 0;
}

BOOL WebKit::UserMediaPermissionRequestManagerProxy::shouldChangePromptToGrantForMicrophone(WebKit::UserMediaPermissionRequestManagerProxy *this, const WebCore::ClientOrigin *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF *v7;
  WTF *v8;

  WebCore::SecurityOriginData::securityOrigin((const WebCore::ClientOrigin *)((char *)a2 + 32));
  WebCore::SecurityOriginData::securityOrigin(a2);
  v5 = WebKit::UserMediaPermissionRequestManagerProxy::searchForGrantedRequest((uint64_t)this, 0, 0, v8, v7, 1, 0);
  if (v7)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v7, v4);
  if (v8)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v8, v4);
  return v5 != 0;
}

void WebKit::UserMediaPermissionRequestManagerProxy::clearUserMediaPermissionRequestHistory(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  WTF::StringImpl *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v4 = *(_QWORD *)(a1 + 176);
  v5 = *(_DWORD *)(a1 + 188);
  v6 = v4 + 40 * v5;
  v7 = 0;
  if (v5)
  {
    v8 = v4 + 40;
    v9 = v4 + 40 * v5;
    v10 = v9;
    do
    {
      if (a2 == 8 && *(_BYTE *)(v8 - 8) || a2 == 3 && *(_BYTE *)(v8 - 7))
      {
        v11 = (WTF::StringImpl *)(v8 - 40);
        if (v10 == *(_QWORD *)(a1 + 176) + 40 * *(unsigned int *)(a1 + 188))
        {
          v10 = v8 - 40;
        }
        else if (v11 != (WTF::StringImpl *)v9)
        {
          WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::moveOverlapping(v9, v11, v10);
          v10 += v4 - v9;
        }
        v12 = *(_QWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = 0;
        if (v12)
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v12, v11);
        v13 = *(_QWORD *)(v8 - 24);
        *(_QWORD *)(v8 - 24) = 0;
        if (v13)
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v13, v11);
        ++v7;
        v9 = v8;
      }
      v4 += 40;
      v14 = v8 >= v6;
      v8 += 40;
    }
    while (!v14);
    v4 = *(_QWORD *)(a1 + 176);
    v5 = *(_DWORD *)(a1 + 188);
    v6 = v10;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 176);
  }
  v15 = (WTF::StringImpl *)(v4 + 40 * v5);
  if ((WTF::StringImpl *)v9 != v15)
  {
    WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::moveOverlapping(v9, v15, v6);
    v5 = *(_DWORD *)(a1 + 188);
  }
  *(_DWORD *)(a1 + 188) = v5 - v7;
  v16 = *(char **)(a1 + 152);
  v17 = *(unsigned int *)(a1 + 164);
  v18 = &v16[8 * v17];
  v19 = 0;
  if ((_DWORD)v17)
  {
    v20 = *(_QWORD *)(a1 + 152);
    v21 = &v16[8 * v17];
    v22 = v21;
    while (1)
    {
      v23 = *(_QWORD *)v16;
      if ((a2 != 8 || !*(_DWORD *)(v23 + 108))
        && (*(unsigned __int8 *)(v23 + 112) - 1 < 2 || a2 != 3 || !*(_DWORD *)(v23 + 92)))
      {
        goto LABEL_37;
      }
      v24 = v16;
      if (v22 != (char *)(*(_QWORD *)(a1 + 152) + 8 * *(unsigned int *)(a1 + 164)))
      {
        if (v16 != v21)
        {
          memmove(v22, v21, v20 - (_QWORD)v21);
          v24 = &v22[v20 - (_QWORD)v21];
          v23 = *(_QWORD *)v16;
          *(_QWORD *)v16 = 0;
          v21 = v16 + 8;
          if (!v23)
            goto LABEL_36;
          goto LABEL_35;
        }
        v24 = v22;
      }
      *(_QWORD *)v16 = 0;
      v21 = v16 + 8;
LABEL_35:
      CFRelease(*(CFTypeRef *)(v23 + 8));
LABEL_36:
      ++v19;
      v22 = v24;
LABEL_37:
      v16 += 8;
      v20 += 8;
      if (v16 >= v18)
      {
        v16 = *(char **)(a1 + 152);
        LODWORD(v17) = *(_DWORD *)(a1 + 164);
        v18 = v22;
        goto LABEL_40;
      }
    }
  }
  v21 = &v16[8 * v17];
LABEL_40:
  v25 = &v16[8 * v17];
  if (v21 != v25)
  {
    memmove(v18, v21, v25 - v21);
    LODWORD(v17) = *(_DWORD *)(a1 + 164);
  }
  *(_DWORD *)(a1 + 164) = v17 - v19;
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  WebKit::WebPageProxy *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t result;
  uint64_t v25[4];

  v12 = *(_QWORD *)(a1[8] + 8);
  if (v12)
    v13 = (WebKit::WebPageProxy *)(v12 - 16);
  else
    v13 = 0;
  v14 = WebKit::WebPageProxy::logger(v13);
  v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v16 = a1[31];
  v25[0] = v15;
  v25[1] = v17;
  v25[2] = (uint64_t)"enumerateMediaDevicesForFrame";
  v25[3] = v16;
  if (*(_BYTE *)(v14 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v25);
  v18 = (unsigned int *)*a4;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  v20 = (unsigned int *)*a5;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  v22 = *a6;
  *a6 = 0;
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v23 = &off_1E34D24C0;
  v23[1] = a1;
  v23[2] = a2;
  v23[3] = a3;
  v23[4] = v18;
  v23[5] = v20;
  v23[6] = v22;
  v25[0] = (uint64_t)v23;
  WebKit::UserMediaPermissionRequestManagerProxy::getUserMediaPermissionInfo((uint64_t)a1, a2, a3, a4, a5, v25);
  result = v25[0];
  if (v25[0])
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25[0] + 8))(v25[0]);
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::mockCaptureDevicesEnabled(WebKit::UserMediaPermissionRequestManagerProxy *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_BYTE *)this + 273))
    return *((unsigned __int8 *)this + 272);
  v4 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 224);
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, a3);
}

void WebKit::UserMediaPermissionRequestManagerProxy::captureStateChanged(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v5;
  uint64_t v6;
  WebKit::WebProcessProxy *v7;
  WebKit::UserMediaProcessManager *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WebKit::WebPageProxy *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::String *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  NSObject *v24;
  WTF *v25;
  void *v26;
  char *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  uint64_t i;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t *v41;
  double v42;
  double v43;
  uint64_t v44;
  WebKit::WebPageProxy *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::String *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  NSObject *v55;
  WTF *v56;
  void *v57;
  char *v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::String *v67;
  void *v68;
  uint64_t j;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  char *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF *v85[2];
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  uint8_t buf[16];
  int v91;
  uint64_t v92;
  int v93;
  int v94;
  _DWORD v95[6];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  if (!*(_BYTE *)(v6 + 729) && *(_BYTE *)(v6 + 728))
  {
    if (!*(_QWORD *)(a1 + 264))
    {
      {
        WebKit::UserMediaProcessManager::singleton(void)::manager = (uint64_t)&off_1E34D2148;
        unk_1EE341E10 = 0;
        qword_1EE341E18 = 0;
        unk_1EE341E20 = 0;
        word_1EE341E28 = 1;
      }
      v8 = *(WebKit::UserMediaProcessManager **)(v6 + 208);
      v9 = (unsigned int *)((char *)v8 + 16);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      WebKit::UserMediaProcessManager::revokeSandboxExtensionsIfNeeded(v8, v7);
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v9);
    }
    if (*(_DWORD *)(a1 + 192) != (a3 & 0x1800))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      if (v11)
        v12 = (WebKit::WebPageProxy *)(v11 - 16);
      else
        v12 = 0;
      v13 = WebKit::WebPageProxy::logger(v12);
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v15 = *(_QWORD *)(a1 + 248);
      v76 = v14;
      v77 = v16;
      v78 = "captureStateChanged";
      v79 = v15;
      if (*(_BYTE *)(v13 + 12))
      {
        v17 = (WTF::String *)*(unsigned int *)(a1 + 192);
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v76);
        WTF::String::String((WTF::String *)&v83, "state was: ");
        v75 = v17;
        WTF::String::number(v17);
        WTF::String::String((WTF::String *)&v81, ", is now: ");
        WTF::String::number((WTF::String *)(a3 & 0x1800));
        v85[0] = v83;
        v89 = v82;
        *(_QWORD *)buf = v84;
        v87 = v80;
        v88 = v81;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v85, (uint64_t *)&v89, (uint64_t *)&v88, (uint64_t *)&v87, &v86);
        if (!v86)
        {
          __break(0xC471u);
          return;
        }
        v19 = v80;
        v80 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v18);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = v81;
        v81 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v18);
          else
            *(_DWORD *)v20 -= 2;
        }
        v21 = v82;
        v82 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v18);
          else
            *(_DWORD *)v21 -= 2;
        }
        v22 = v83;
        v83 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v18);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = v84;
        v84 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v18);
          else
            *(_DWORD *)v23 -= 2;
        }
        v24 = qword_1ECE71B18;
        v25 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v25)
        {
          WTF::String::utf8();
          v27 = v85[0] ? (char *)v85[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v27;
          _os_log_impl(&dword_196BCC000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v25 = v85[0];
          v85[0] = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 1)
              v25 = (WTF *)WTF::fastFree(v25, v26);
            else
              --*(_DWORD *)v25;
          }
        }
        if (WebKit2LogWebRTC)
        {
          v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v29 = *v28;
            if ((v29 & 1) != 0)
              break;
            v30 = __ldaxr(v28);
            if (v30 == v29)
            {
              if (!__stxr(v29 | 1, v28))
              {
                v31 = WTF::Logger::observers(v25);
                v32 = *(unsigned int *)(v31 + 12);
                if ((_DWORD)v32)
                {
                  v33 = *(uint64_t **)v31;
                  v74 = *(_QWORD *)v31 + 8 * v32;
                  do
                  {
                    v34 = *v33;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v76);
                    v91 = 0;
                    WTF::String::String((WTF::String *)&v92, "state was: ");
                    v93 = 0;
                    WTF::String::number((WTF::String *)v75);
                    v94 = 0;
                    WTF::String::String((WTF::String *)v95, ", is now: ");
                    v95[2] = 0;
                    WTF::String::number((WTF::String *)(a3 & 0x1800));
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v85, (uint64_t)buf, 5uLL);
                    (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v34 + 16))(v34, &WebKit2LogWebRTC, 0, v85);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v85, v35);
                    for (i = 72; i != -8; i -= 16)
                    {
                      v37 = *(WTF::StringImpl **)&buf[i];
                      *(_QWORD *)&buf[i] = 0;
                      if (v37)
                      {
                        if (*(_DWORD *)v37 == 2)
                          WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v26);
                        else
                          *(_DWORD *)v37 -= 2;
                      }
                    }
                    ++v33;
                  }
                  while (v33 != (uint64_t *)v74);
                }
                v38 = __ldxr(v28);
                if (v38 == 1)
                {
                  if (!__stlxr(0, v28))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v39 = v86;
        v86 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v26);
          else
            *(_DWORD *)v39 -= 2;
        }
      }
      *(_DWORD *)(a1 + 192) = a3 & 0x1800;
      v40 = *(_QWORD *)(v6 + 224);
      if ((a3 & 0x1800) != 0)
      {
        v41 = &WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::key;
        {
          v42 = 3600.0;
          goto LABEL_79;
        }
        WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::longRunningMediaCaptureStreamRepromptIntervalInHoursKey(void)::$_0::operator() const(void)::impl;
        v42 = 3600.0;
      }
      else
      {
        v41 = &WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::key;
        {
          v42 = 60.0;
          goto LABEL_79;
        }
        WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl;
        v42 = 60.0;
      }
      *v73 = 1;
LABEL_79:
      v43 = WebKit::valueForKey<double>(v40 + 40, v40 + 64, (WTF::StringImpl **)v41) * v42;
      if (v43 != *(double *)(a1 + 232))
      {
        v44 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
        if (v44)
          v45 = (WebKit::WebPageProxy *)(v44 - 16);
        else
          v45 = 0;
        v46 = WebKit::WebPageProxy::logger(v45);
        v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v48 = *(_QWORD *)(a1 + 248);
        v76 = v47;
        v77 = v49;
        v78 = "captureStateChanged";
        v79 = v48;
        if (*(_BYTE *)(v46 + 12))
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v76);
          v50 = (WTF::String *)WTF::String::String((WTF::String *)&v87, "watchdog set to ");
          WTF::String::number(v50, v43);
          WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v88, (uint64_t *)&v87, (uint64_t *)&v86, &v89);
          v52 = v86;
          v86 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, v51);
            else
              *(_DWORD *)v52 -= 2;
          }
          v53 = v87;
          v87 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v51);
            else
              *(_DWORD *)v53 -= 2;
          }
          v54 = v88;
          v88 = 0;
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v51);
            else
              *(_DWORD *)v54 -= 2;
          }
          v55 = qword_1ECE71B18;
          v56 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v56)
          {
            WTF::String::utf8();
            v58 = v85[0] ? (char *)v85[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v58;
            _os_log_impl(&dword_196BCC000, v55, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v56 = v85[0];
            v85[0] = 0;
            if (v56)
            {
              if (*(_DWORD *)v56 == 1)
                v56 = (WTF *)WTF::fastFree(v56, v57);
              else
                --*(_DWORD *)v56;
            }
          }
          if (WebKit2LogWebRTC)
          {
            v59 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v60 = *v59;
              if ((v60 & 1) != 0)
                break;
              v61 = __ldaxr(v59);
              if (v61 == v60)
              {
                if (!__stxr(v60 | 1, v59))
                {
                  v62 = WTF::Logger::observers(v56);
                  v63 = *(unsigned int *)(v62 + 12);
                  if ((_DWORD)v63)
                  {
                    v64 = *(uint64_t **)v62;
                    v65 = *(_QWORD *)v62 + 8 * v63;
                    do
                    {
                      v66 = *v64;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v76);
                      v91 = 0;
                      v67 = (WTF::String *)WTF::String::String((WTF::String *)&v92, "watchdog set to ");
                      v93 = 0;
                      WTF::String::number(v67, v43);
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v85, (uint64_t)buf, 3uLL);
                      (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v66 + 16))(v66, &WebKit2LogWebRTC, 0, v85);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v85, v68);
                      for (j = 40; j != -8; j -= 16)
                      {
                        v70 = *(WTF::StringImpl **)&buf[j];
                        *(_QWORD *)&buf[j] = 0;
                        if (v70)
                        {
                          if (*(_DWORD *)v70 == 2)
                            WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v57);
                          else
                            *(_DWORD *)v70 -= 2;
                        }
                      }
                      ++v64;
                    }
                    while (v64 != (uint64_t *)v65);
                  }
                  v71 = __ldxr(v59);
                  if (v71 == 1)
                  {
                    if (!__stlxr(0, v59))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v72 = v89;
          v89 = 0;
          if (v72)
          {
            if (*(_DWORD *)v72 == 2)
              WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v57);
            else
              *(_DWORD *)v72 -= 2;
          }
        }
        *(double *)(a1 + 232) = v43;
        WTF::RunLoop::TimerBase::start();
      }
    }
  }
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

uint64_t WebKit::UserMediaPermissionRequestManagerProxy::viewIsBecomingVisible(WebKit::UserMediaPermissionRequestManagerProxy *this, void *a2)
{
  WebKit::UserMediaPermissionRequestProxy **v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  WebKit::UserMediaPermissionRequestProxy *v7;
  WebKit::UserMediaPermissionRequestProxy **v9;
  int v10;
  int v11;

  v2 = (WebKit::UserMediaPermissionRequestProxy **)*((_QWORD *)this + 17);
  v9 = v2;
  v4 = *((_DWORD *)this + 36);
  v3 = *((unsigned int *)this + 37);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  v10 = v4;
  v11 = v3;
  if ((_DWORD)v3)
  {
    v6 = 8 * v3;
    do
    {
      v7 = *v2++;
      WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(this, v7);
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, a2);
}

_QWORD *WebKit::convertEnumerationToString(_QWORD *result, int a2)
{
  _DWORD *v2;

  if ((_MergedGlobals_217[0] & 1) == 0)
  {
    _MergedGlobals_32 += 2;
    dword_1ECE6C5C0 += 2;
    qword_1EE341998 = (uint64_t)&_MergedGlobals_32;
    unk_1EE3419A0 = &dword_1ECE6C5C0;
    dword_1ECE6C5E0 += 2;
    qword_1EE3419A8 = (uint64_t)&dword_1ECE6C5E0;
    _MergedGlobals_217[0] = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_217[8 * a2 + 8];
  if (v2)
    *v2 += 2;
  *result = v2;
  return result;
}

{
  _DWORD *v2;

  if ((byte_1EE341991 & 1) == 0)
  {
    dword_1ECE6C600 += 2;
    unk_1EE3419B0 = &dword_1ECE6C600;
    dword_1ECE6C620 += 2;
    unk_1EE3419B8 = &dword_1ECE6C620;
    dword_1ECE6C640 += 2;
    unk_1EE3419C0 = &dword_1ECE6C640;
    dword_1ECE6C660 += 2;
    unk_1EE3419C8 = &dword_1ECE6C660;
    dword_1ECE6C680 += 2;
    unk_1EE3419D0 = &dword_1ECE6C680;
    dword_1ECE6C6A0 += 2;
    unk_1EE3419D8 = &dword_1ECE6C6A0;
    dword_1ECE6C6C0 += 2;
    unk_1EE3419E0 = &dword_1ECE6C6C0;
    byte_1EE341991 = 1;
  }
  v2 = *(_DWORD **)&_MergedGlobals_217[8 * a2 + 32];
  if (v2)
    *v2 += 2;
  *result = v2;
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestProxy::UserMediaPermissionRequestProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t a12, uint64_t *a13)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34D26F0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = a6;
  *(_QWORD *)(a1 + 56) = a7;
  v19 = *a8;
  *a8 = 0;
  *(_QWORD *)(a1 + 64) = v19;
  v20 = *a9;
  *a9 = 0;
  *(_QWORD *)(a1 + 72) = v20;
  *(_OWORD *)(a1 + 80) = 0u;
  v21 = *a11;
  *a11 = 0;
  *(_QWORD *)(a1 + 80) = v21;
  LODWORD(v21) = *((_DWORD *)a11 + 2);
  *((_DWORD *)a11 + 2) = 0;
  *(_DWORD *)(a1 + 88) = v21;
  LODWORD(v21) = *((_DWORD *)a11 + 3);
  *((_DWORD *)a11 + 3) = 0;
  *(_DWORD *)(a1 + 92) = v21;
  *(_OWORD *)(a1 + 96) = 0u;
  v22 = *a10;
  *a10 = 0;
  *(_QWORD *)(a1 + 96) = v22;
  LODWORD(v22) = *((_DWORD *)a10 + 2);
  *((_DWORD *)a10 + 2) = 0;
  *(_DWORD *)(a1 + 104) = v22;
  LODWORD(v22) = *((_DWORD *)a10 + 3);
  *((_DWORD *)a10 + 3) = 0;
  *(_DWORD *)(a1 + 108) = v22;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)a12;
  v23 = WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a1 + 120, a12 + 8);
  *(_OWORD *)(v23 + 944) = 0u;
  v24 = *(_QWORD *)(a12 + 952);
  *(_QWORD *)(a12 + 952) = 0;
  *(_QWORD *)(v23 + 944) = v24;
  LODWORD(v24) = *(_DWORD *)(a12 + 960);
  *(_DWORD *)(a12 + 960) = 0;
  *(_DWORD *)(a1 + 1072) = v24;
  LODWORD(v24) = *(_DWORD *)(a12 + 964);
  *(_DWORD *)(a12 + 964) = 0;
  *(_DWORD *)(a1 + 1076) = v24;
  *(_BYTE *)(a1 + 1080) = *(_BYTE *)(a12 + 968);
  WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a1 + 1088, a12 + 976);
  *(_OWORD *)(a1 + 2032) = 0u;
  v25 = *(_QWORD *)(a12 + 1920);
  *(_QWORD *)(a12 + 1920) = 0;
  *(_QWORD *)(a1 + 2032) = v25;
  LODWORD(v25) = *(_DWORD *)(a12 + 1928);
  *(_DWORD *)(a12 + 1928) = 0;
  *(_DWORD *)(a1 + 2040) = v25;
  LODWORD(v25) = *(_DWORD *)(a12 + 1932);
  *(_DWORD *)(a12 + 1932) = 0;
  *(_DWORD *)(a1 + 2044) = v25;
  *(_BYTE *)(a1 + 2048) = *(_BYTE *)(a12 + 1936);
  *(_OWORD *)(a1 + 2056) = *(_OWORD *)(a12 + 1944);
  *(_BYTE *)(a1 + 2072) = 0;
  *(_OWORD *)(a1 + 2080) = 0u;
  v26 = *a13;
  *a13 = 0;
  *(_QWORD *)(a1 + 2096) = v26;
  return a1;
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::UserMediaPermissionRequestProxy::allow(WebKit::UserMediaPermissionRequestProxy *this, const WTF::StringImpl **a2, const WTF::String *a3)
{
  WebKit::UserMediaPermissionRequestManagerProxy *result;

  if (*a2 && *((_DWORD *)*a2 + 1))
    WebKit::setDeviceAsFirst((uint64_t)this + 96, a2, a3);
  if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
    WebKit::setDeviceAsFirst((uint64_t)this + 80, (const WTF::StringImpl **)a3, a3);
  result = (WebKit::UserMediaPermissionRequestManagerProxy *)*((_QWORD *)this + 2);
  if (result)
  {
    WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(result, this);
    return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(WebKit::UserMediaPermissionRequestProxy *))(*(_QWORD *)this + 40))(this);
  }
  return result;
}

uint64_t WebKit::setDeviceAsFirst(uint64_t result, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;

  if (!*(_DWORD *)(result + 12))
    goto LABEL_41;
  v4 = (unsigned int *)result;
  v5 = 0;
  v6 = 0;
  while (1)
  {
    result = WTF::equal(*(WTF **)(*(_QWORD *)v4 + v5), *a2, a3);
    if ((result & 1) != 0)
      break;
    ++v6;
    v5 += 40;
    if (v6 >= v4[3])
      goto LABEL_41;
  }
  if (v5)
  {
    if (v6 < v4[3])
    {
      v8 = *(WTF::StringImpl **)v4;
      v9 = *(_QWORD *)v4 + v5;
      v10 = *(WTF::StringImpl **)v9;
      if (*(_QWORD *)v9)
        *(_DWORD *)v10 += 2;
      v26 = v10;
      v27 = *(_BYTE *)(v9 + 8);
      v11 = *(WTF::StringImpl **)(v9 + 16);
      if (v11)
        *(_DWORD *)v11 += 2;
      v28 = v11;
      v12 = (char *)v8 + v5;
      v13 = *(WTF::StringImpl **)((char *)v8 + v5 + 24);
      if (v13)
      {
        v14 = *(_DWORD *)v13;
        *(_DWORD *)v13 += 2;
        v29 = v13;
        v30 = *((_DWORD *)v12 + 8);
        *((_QWORD *)v12 + 3) = 0;
        if (v14)
        {
          *(_DWORD *)v13 = v14;
        }
        else
        {
          WTF::StringImpl::destroy(v13, v7);
          v11 = *(WTF::StringImpl **)(v9 + 16);
        }
      }
      else
      {
        v29 = 0;
        v30 = *((_DWORD *)v12 + 8);
        *((_QWORD *)v12 + 3) = 0;
      }
      *(_QWORD *)(v9 + 16) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v7);
        else
          *(_DWORD *)v11 -= 2;
      }
      v15 = *(WTF::StringImpl **)v9;
      *(_QWORD *)v9 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v7);
        else
          *(_DWORD *)v15 -= 2;
      }
      WTF::VectorMover<false,WebCore::CaptureDevice>::moveOverlapping((WTF::StringImpl *)((char *)v8 + v5 + 40), (WTF::StringImpl *)(*(_QWORD *)v4 + 40 * v4[3]), v9);
      v16 = v4[2];
      v17 = v4[3] - 1;
      v4[3] = v17;
      if ((_DWORD)v17 == v16)
      {
        v18 = WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v17 + 1, (unint64_t)&v26);
        LODWORD(v17) = v4[3];
      }
      else
      {
        v18 = (unint64_t)&v26;
      }
      v19 = *(WTF::StringImpl **)v4;
      WTF::VectorMover<false,WebCore::CaptureDevice>::moveOverlapping(*(WTF::StringImpl **)v4, (WTF::StringImpl *)(*(_QWORD *)v4 + 40 * v17), *(_QWORD *)v4 + 40);
      v21 = *(_QWORD *)v18;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)v19 = v21;
      *((_BYTE *)v19 + 8) = *(_BYTE *)(v18 + 8);
      v22 = *(_QWORD *)(v18 + 16);
      *(_QWORD *)(v18 + 16) = 0;
      *((_QWORD *)v19 + 2) = v22;
      v23 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v18 + 24) = 0;
      *((_QWORD *)v19 + 3) = v23;
      *((_DWORD *)v19 + 8) = *(_DWORD *)(v18 + 32);
      ++v4[3];
      v24 = v29;
      v29 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v20);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = v28;
      v28 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v20);
        else
          *(_DWORD *)v25 -= 2;
      }
      result = (uint64_t)v26;
      v26 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
LABEL_41:
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestProxy::invalidate(uint64_t this)
{
  uint64_t v1;

  *(_QWORD *)(this + 16) = 0;
  v1 = *(_QWORD *)(this + 2096);
  if (v1)
  {
    *(_QWORD *)(this + 2096) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return this;
}

uint64_t WebKit::UserMediaPermissionRequestProxy::videoDeviceUIDs@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *(unsigned int *)(this + 92);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = this;
      this = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(_QWORD *)a2 = this;
      v5 = *(unsigned int *)(v4 + 92);
      if ((_DWORD)v5)
      {
        v6 = 0;
        v7 = *(_DWORD ***)(v4 + 80);
        v8 = 40 * v5;
        do
        {
          v9 = *v7;
          if (*v7)
            *v9 += 2;
          v10 = v6 + 1;
          *(_QWORD *)(this + 8 * v6) = v9;
          v7 += 5;
          ++v6;
          v8 -= 40;
        }
        while (v8);
        *(_DWORD *)(a2 + 12) = v10;
      }
    }
  }
  return this;
}

uint64_t WebKit::UserMediaPermissionRequestProxy::audioDeviceUIDs@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *(unsigned int *)(this + 108);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = this;
      this = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(_QWORD *)a2 = this;
      v5 = *(unsigned int *)(v4 + 108);
      if ((_DWORD)v5)
      {
        v6 = 0;
        v7 = *(_DWORD ***)(v4 + 96);
        v8 = 40 * v5;
        do
        {
          v9 = *v7;
          if (*v7)
            *v9 += 2;
          v10 = v6 + 1;
          *(_QWORD *)(this + 8 * v6) = v9;
          v7 += 5;
          ++v6;
          v8 -= 40;
        }
        while (v8);
        *(_DWORD *)(a2 + 12) = v10;
      }
    }
  }
  return this;
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::UserMediaPermissionRequestProxy::promptForGetDisplayMedia(uint64_t a1, int a2)
{
  char v4;
  uint64_t v5;
  WebKit::WebPageProxy *v6;
  WebKit *v7;
  WebKit::UserMediaPermissionRequestManagerProxy *v8;
  WebKit::UserMediaPermissionRequestManagerProxy *result;
  WebKit::UserMediaPermissionRequestManagerProxy *v10;

  if (!*(_QWORD *)(a1 + 16))
    return WebKit::UserMediaPermissionRequestProxy::deny((_QWORD *)a1, 5);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (a2 != 2 || (v4 & 1) == 0)
    return WebKit::UserMediaPermissionRequestProxy::deny((_QWORD *)a1, 5);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 64) + 8);
  if (v5)
    v6 = (WebKit::WebPageProxy *)(v5 - 16);
  else
    v6 = 0;
  v7 = (WebKit *)(*(_QWORD *)(a1 + 72) + 8);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v8 = (WebKit::UserMediaPermissionRequestManagerProxy *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v8 = &off_1E34D2538;
  *((_QWORD *)v8 + 1) = a1;
  *((_QWORD *)v8 + 2) = a1;
  v10 = v8;
  WebKit::alertForPermission(v6, (const __CFString *)6, v7, (uint64_t *)&v10);
  result = v10;
  v10 = 0;
  if (result)
    return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(_QWORD *)result + 8))(result);
  return result;
}

WebKit::UserMediaPermissionRequestManagerProxy *WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia(WebKit::UserMediaPermissionRequestProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::UserMediaPermissionRequestManagerProxy *result;
  uint64_t v5;
  WebKit::WebPageProxy *v6;
  WebKit *v7;
  WebKit::UserMediaPermissionRequestManagerProxy *v8;
  WebKit::UserMediaPermissionRequestManagerProxy *v9;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return WebKit::UserMediaPermissionRequestProxy::deny(this, 5);
  if (*((_DWORD *)this + 27))
  {
    if (*((unsigned __int8 *)this + 112) - 1 >= 2)
    {
      if (*((_DWORD *)this + 23))
        v3 = 1;
      else
        v3 = 2;
    }
    else
    {
      v3 = 2;
    }
  }
  else
  {
    v3 = 0;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8);
  if (v5)
    v6 = (WebKit::WebPageProxy *)(v5 - 16);
  else
    v6 = 0;
  v7 = (WebKit *)(*((_QWORD *)this + 9) + 8);
  CFRetain(*((CFTypeRef *)this + 1));
  v8 = (WebKit::UserMediaPermissionRequestManagerProxy *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v8 = &off_1E34D2560;
  *((_QWORD *)v8 + 1) = this;
  *((_QWORD *)v8 + 2) = this;
  v9 = v8;
  WebKit::alertForPermission(v6, (const __CFString *)v3, v7, (uint64_t *)&v9);
  result = v9;
  v9 = 0;
  if (result)
    return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::UserMediaPermissionRequestProxy::canRequestDisplayCapturePermission(WebKit::UserMediaPermissionRequestProxy *this)
{
  return 1;
}

uint64_t WebKit::UserMediaProcessManager::setCaptureEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(unsigned __int8 *)(this + 32) != a2)
  {
    *(_BYTE *)(this + 32) = a2;
    if ((a2 & 1) == 0)
    {
      v2 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v2 = off_1E34D25B0;
      v3 = v2;
      WebKit::UserMediaPermissionRequestManagerProxy::forEach(&v3);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return this;
}

uint64_t WebKit::UserMediaProcessManager::updateCaptureDevices(WebCore::RealtimeMediaSourceCenter *a1, char a2)
{
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  WebCore::RealtimeMediaSourceCenter::singleton(a1);
  v4 = *((_QWORD *)a1 + 1);
  if (v4)
    goto LABEL_12;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a1;
  v6 = (unsigned int *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v4;
  if (!v6)
    goto LABEL_12;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v4 = *((_QWORD *)a1 + 1);
  if (v4)
  {
LABEL_12:
    do
      v9 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v9 + 1, (unsigned int *)v4));
  }
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v10 = &off_1E34D2600;
  *(_QWORD *)(v10 + 8) = v4;
  *(_QWORD *)(v10 + 16) = a1;
  *(_BYTE *)(v10 + 24) = a2;
  v12 = v10;
  WebCore::RealtimeMediaSourceCenter::getMediaStreamDevices();
  result = v12;
  if (v12)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

uint64_t WebKit::UserMediaProcessManager::devicesChanged(WebKit::UserMediaProcessManager *this)
{
  return WebKit::UserMediaProcessManager::updateCaptureDevices(this, 1);
}

void WebKit::UserMediaProcessManager::beginMonitoringCaptureDevices(WebKit::UserMediaProcessManager *this)
{
  unint64_t v1;
  WebKit::UserMediaProcessManager *v2;
  WebKit::UserMediaProcessManager ***v3;
  WebKit::UserMediaProcessManager **v4;

  v2 = this;
  v1 = atomic_load(&WebKit::UserMediaProcessManager::beginMonitoringCaptureDevices(void)::onceFlag);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&WebKit::UserMediaProcessManager::beginMonitoringCaptureDevices(void)::onceFlag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::UserMediaProcessManager::beginMonitoringCaptureDevices(void)::$_0 &&>>);
  }
}

void `non-virtual thunk to'WebKit::VisitedLinkStore::~VisitedLinkStore(WebKit::VisitedLinkStore *this)
{
  WebKit::VisitedLinkStore::~VisitedLinkStore((WebKit::VisitedLinkStore *)((char *)this - 16));
}

{
  WebKit::VisitedLinkStore::~VisitedLinkStore((WebKit::VisitedLinkStore *)((char *)this - 40));
}

{
  WebKit::VisitedLinkStore::~VisitedLinkStore((WebKit::VisitedLinkStore *)((char *)this - 16));
  JUMPOUT(0x19AEB936CLL);
}

{
  WebKit::VisitedLinkStore::~VisitedLinkStore((WebKit::VisitedLinkStore *)((char *)this - 40));
  JUMPOUT(0x19AEB936CLL);
}

_QWORD *WebKit::VisitedLinkStore::removeAll(WebKit::VisitedLinkStore *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  char v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  WebKit::SharedStringHashStore::clear((WebKit::VisitedLinkStore *)((char *)this + 64));
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 6, &v13);
  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = v2 + 8 * v3;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v8 = (char *)this + 48;
  v9 = v4;
  v10 = v4;
  v11 = v4;
  v12 = v2 + 8 * v3;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v8);
  while (v14 != v9)
  {
    v6 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    v7 = 0;
    WebKit::AuxiliaryProcessProxy::send<Messages::VisitedLinkTableController::RemoveAllVisitedLinks>(v6, (uint64_t)&v7, *((_QWORD *)this + 4), 0);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v13);
  }
  return result;
}

void WebKit::VisitedLinkStore::addVisitedLinkHashFromPage(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  uint64_t v6;

  WebKit::WebProcessProxy::webPage(a2, &v6);
  if (!v6 || (v5 = *(unsigned __int8 *)(v6 + 825), CFRelease(*(CFTypeRef *)(v6 + 8)), v5))
    WebKit::SharedStringHashStore::scheduleAddition((WebKit::SharedStringHashStore *)(a1 + 64), a3);
}

uint64_t WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetBackForwardCacheCapacity>(uint64_t result, _DWORD **a2, int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *(unsigned int *)(result + 84);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 72);
    v7 = 8 * v3;
    do
    {
      result = *v6;
      v8 = *(_QWORD *)(*v6 + 136);
      if ((v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
        && (!a3 || !*(_BYTE *)(result + 389) || *(_QWORD *)(result + 224)))
      {
        v9 = *a2;
        result = WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetBackForwardCacheCapacity>(result, &v9, 0, 0);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

WTF::StringImpl *WebKit::WebBackForwardCache::addEntry(uint64_t a1, uint64_t a2, WebKit::WebBackForwardCacheEntry **a3)
{
  WebKit::WebBackForwardCacheEntry **v6;
  WebKit::WebBackForwardCacheEntry *v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  int *v18;
  NSObject *v19;
  WTF::StringImpl *result;
  char *v21;
  uint64_t v22;
  _BOOL4 v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  void *v28;
  WTF *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF *v34;
  uint8_t buf[4];
  char *v36;
  __int16 v37;
  _BOOL4 v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = (WebKit::WebBackForwardCacheEntry **)(a2 + 416);
  if (*(_QWORD *)(a2 + 416))
    WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebBackForwardListItem>(a1 + 24, a2);
  v7 = *a3;
  *a3 = 0;
  std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100](v6, v7);
  v8 = (uint64_t *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 52);
  v10 = *(_DWORD *)(a1 + 48) + 1;
  *(_DWORD *)(a1 + 48) = v10;
  if (v10 > v9)
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a1 + 24);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 16), a2);
  v11 = *(unsigned int **)(a2 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  v34 = (WTF *)v11;
  WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)(a1 + 24), (uint64_t *)&v34, (uint64_t)buf);
  v15 = (unsigned int *)v34;
  v34 = 0;
  if (v15)
  {
    do
    {
      v24 = __ldaxr(v15);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v15));
    if (!v25)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v14);
    }
  }
  if (v11)
  {
    do
    {
      v16 = __ldaxr(v11);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v11));
    if (!v17)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v14);
    }
  }
  WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a1 + 24);
  if (*v8)
  {
    v30 = *(_DWORD *)(a1 + 16);
    v18 = (int *)(a1 + 16);
    if (*(_DWORD *)(*v8 - 12) > v30)
    {
      v31 = WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::tryTakeFirst((uint64_t)v8);
      if (v31)
      {
        v32 = v31;
        CFRetain(*(CFTypeRef *)(v31 + 8));
        std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100]((WebKit::WebBackForwardCacheEntry **)(v32 + 416), 0);
        CFRelease(*(CFTypeRef *)(v32 + 8));
      }
    }
  }
  else
  {
    v18 = (int *)(a1 + 16);
  }
  v19 = qword_1ECE70F60;
  result = (WTF::StringImpl *)os_log_type_enabled((os_log_t)qword_1ECE70F60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)result)
  {
    WTF::makeString<unsigned long long,char,unsigned long long>(*(_QWORD *)(a2 + 40), 45, *(_QWORD *)(a2 + 32), &v33);
    WTF::String::utf8();
    if (v34)
      v21 = (char *)v34 + 16;
    else
      v21 = 0;
    v22 = *(_QWORD *)(a2 + 416);
    if (v22)
      v23 = *(_QWORD *)(v22 + 32) != 0;
    else
      v23 = 0;
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)v8);
    v26 = *v8;
    if (*v8)
      LODWORD(v26) = *(_DWORD *)(v26 - 12);
    v27 = *v18;
    *(_DWORD *)buf = 136315906;
    v36 = v21;
    v37 = 1024;
    v38 = v23;
    v39 = 1024;
    v40 = v26;
    v41 = 1024;
    v42 = v27;
    _os_log_impl(&dword_196BCC000, v19, OS_LOG_TYPE_DEFAULT, "WebBackForwardCache::addEntry: item=%s, hasSuspendedPage=%d, size=%u/%u", buf, 0x1Eu);
    v29 = v34;
    v34 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1)
        WTF::fastFree(v29, v28);
      else
        --*(_DWORD *)v29;
    }
    result = v33;
    v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v28);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebBackForwardListItem>(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v3 = (uint64_t *)result;
  v4 = *(_DWORD *)(result + 28);
  v5 = *(_DWORD *)(result + 24) + 1;
  *(_DWORD *)(result + 24) = v5;
  if (v5 > v4)
    result = WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(result);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 && *(_QWORD *)(v6 + 8))
  {
    v11 = *(uint64_t **)(a2 + 16);
    result = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, &v11);
    v7 = *v3;
    if (*v3)
      v7 += 8 * *(unsigned int *)(v7 - 4);
    if (v7 != result)
    {
      v8 = *(uint64_t **)result;
      if (*(_QWORD *)result)
      {
        v11 = *(uint64_t **)result;
        v9 = (_QWORD *)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>>,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>(v3, &v11);
        v10 = *v3;
        if (*v3)
          v10 += 8 * *(unsigned int *)(v10 - 4);
        if ((_QWORD *)v10 != v9)
          WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove(v3, v9);
        return WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete((uint64_t)v3, (WTF *)v8);
      }
    }
  }
  return result;
}

WebKit::WebBackForwardCacheEntry *WebKit::WebBackForwardCache::addEntry(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  WebKit::WebBackForwardCacheEntry *result;
  WTF *v9;
  void *v10;
  WebKit::WebBackForwardCacheEntry *v11;

  v6 = *(_QWORD *)(*(_QWORD *)(*a3 + 40) + 176);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x48);
  v11 = (WebKit::WebBackForwardCacheEntry *)WebKit::WebBackForwardCacheEntry::WebBackForwardCacheEntry(v7, a1, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), v6, a3);
  WebKit::WebBackForwardCache::addEntry(a1, a2, &v11);
  result = v11;
  if (v11)
  {
    WebKit::WebBackForwardCacheEntry::~WebBackForwardCacheEntry(v11);
    return (WebKit::WebBackForwardCacheEntry *)WTF::fastFree(v9, v10);
  }
  return result;
}

WebKit::WebBackForwardCacheEntry *WebKit::WebBackForwardCache::addEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  WebKit::WebBackForwardCacheEntry *result;
  WTF *v10;
  void *v11;
  WebKit::WebBackForwardCacheEntry *v12;
  uint64_t v13;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x48);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v13 = 0;
  v12 = (WebKit::WebBackForwardCacheEntry *)WebKit::WebBackForwardCacheEntry::WebBackForwardCacheEntry(v6, a1, v7, v8, a3, &v13);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  WebKit::WebBackForwardCache::addEntry(a1, a2, &v12);
  result = v12;
  if (v12)
  {
    WebKit::WebBackForwardCacheEntry::~WebBackForwardCacheEntry(v12);
    return (WebKit::WebBackForwardCacheEntry *)WTF::fastFree(v10, v11);
  }
  return result;
}

WebKit::WebBackForwardCacheEntry *WebKit::WebBackForwardCache::removeEntry(WebKit::WebBackForwardCache *this, WebKit::WebBackForwardListItem *a2)
{
  _QWORD *v4;
  NSObject *v5;
  char *v6;
  int v7;
  int v8;
  void *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  WTF *v14;
  uint8_t buf[4];
  char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)((char *)this + 24);
  WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebBackForwardListItem>((uint64_t)this + 24, (uint64_t)a2);
  v5 = qword_1ECE70F60;
  if (os_log_type_enabled((os_log_t)qword_1ECE70F60, OS_LOG_TYPE_DEFAULT))
  {
    WTF::makeString<unsigned long long,char,unsigned long long>(*((_QWORD *)a2 + 5), 45, *((_QWORD *)a2 + 4), &v13);
    WTF::String::utf8();
    if (v14)
      v6 = (char *)v14 + 16;
    else
      v6 = 0;
    WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)v4);
    v7 = 0;
    if (*v4)
      v7 = *(_DWORD *)(*v4 - 12);
    v8 = *((_DWORD *)this + 4);
    *(_DWORD *)buf = 136315650;
    v16 = v6;
    v17 = 1024;
    v18 = v7;
    v19 = 1024;
    v20 = v8;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "WebBackForwardCache::removeEntry: item=%s, size=%u/%u", buf, 0x18u);
    v10 = v14;
    v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
        WTF::fastFree(v10, v9);
      else
        --*(_DWORD *)v10;
    }
    v11 = v13;
    v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  return std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100]((WebKit::WebBackForwardCacheEntry **)a2 + 52, 0);
}

uint64_t WebKit::WebBackForwardCache::removeEntry(WebKit::WebBackForwardCache *this, WebKit::SuspendedPageProxy *a2)
{
  _QWORD *v4;
  _QWORD *v6;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34D2628;
  v4[1] = a2;
  v6 = v4;
  WebKit::WebBackForwardCache::removeEntriesMatching((uint64_t)this, &v6);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

WebKit::WebBackForwardCacheEntry *WebKit::WebBackForwardCache::takeSuspendedPage@<X0>(WebKit::WebBackForwardCache *this@<X0>, WebKit::WebBackForwardListItem *a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v6;
  char *v7;
  void *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  WTF::StringImpl *v13;
  WTF *v14;
  uint8_t buf[4];
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE70F60;
  if (os_log_type_enabled((os_log_t)qword_1ECE70F60, OS_LOG_TYPE_DEFAULT))
  {
    WTF::makeString<unsigned long long,char,unsigned long long>(*((_QWORD *)a2 + 5), 45, *((_QWORD *)a2 + 4), &v13);
    WTF::String::utf8();
    if (v14)
      v7 = (char *)v14 + 16;
    else
      v7 = 0;
    *(_DWORD *)buf = 136315138;
    v16 = v7;
    _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "WebBackForwardCache::takeSuspendedPage: item=%s", buf, 0xCu);
    v9 = v14;
    v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, v8);
      else
        --*(_DWORD *)v9;
    }
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  v11 = (_QWORD *)*((_QWORD *)a2 + 52);
  v11[2] = 0;
  v11[3] = 0;
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(v11 + 5));
  *a3 = v11[4];
  v11[4] = 0;
  return WebKit::WebBackForwardCache::removeEntry(this, a2);
}

uint64_t WebKit::WebBackForwardCache::removeEntriesForSession(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v6;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34D2678;
  v4[1] = a2;
  v6 = v4;
  WebKit::WebBackForwardCache::removeEntriesMatching(a1, &v6);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

uint64_t WebKit::WebBackForwardCache::removeEntriesForPageAndProcess(WebKit::WebBackForwardCache *this, WebKit::WebPageProxy *a2, WebKit::WebProcessProxy *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 744);
  v5 = *((_QWORD *)a3 + 22);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34D26C8;
  v6[1] = v4;
  v6[2] = v5;
  v8 = v6;
  WebKit::WebBackForwardCache::removeEntriesMatching((uint64_t)this, &v8);
  return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
}

uint64_t WebKit::WebBackForwardCache::pruneToSize(WebKit::WebBackForwardCache *this, unsigned int a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE70F60;
  if (os_log_type_enabled((os_log_t)qword_1ECE70F60, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109120;
    v10[1] = a2;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "WebBackForwardCache::pruneToSize(%u)", (uint8_t *)v10, 8u);
  }
  v5 = (uint64_t *)((char *)this + 24);
  result = WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)this + 24);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    do
    {
      if (*(_DWORD *)(v7 - 12) <= a2)
        break;
      v8 = WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::tryTakeFirst((uint64_t)v5);
      if (v8)
      {
        v9 = v8;
        CFRetain(*(CFTypeRef *)(v8 + 8));
        std::unique_ptr<WebKit::WebBackForwardCacheEntry>::reset[abi:sn180100]((WebKit::WebBackForwardCacheEntry **)(v9 + 416), 0);
        CFRelease(*(CFTypeRef *)(v9 + 8));
      }
      result = WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)v5);
      v7 = *v5;
    }
    while (*v5);
  }
  return result;
}

uint64_t API::ObjectImpl<(API::Object::Type)106>::type()
{
  return 106;
}

const char *WebKit::UserMediaPermissionRequestManagerProxy::logClassName(WebKit::UserMediaPermissionRequestManagerProxy *this)
{
  return "UserMediaPermissionRequestManagerProxy";
}

void WebKit::UserMediaProcessManager::~UserMediaProcessManager(WebKit::UserMediaProcessManager *this, void *a2)
{
  *(_QWORD *)this = &off_1E34D2148;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  WebCore::RealtimeMediaSourceCenterObserver::~RealtimeMediaSourceCenterObserver(this);
}

{
  *(_QWORD *)this = &off_1E34D2148;
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
  WebCore::RealtimeMediaSourceCenterObserver::~RealtimeMediaSourceCenterObserver(this);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)109>::type()
{
  return 109;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)(a1 + 16);
    do
    {
      if (*(v4 - 1) != (WTF::StringImpl *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::CaptureDevice>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, unint64_t a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v4 = result;
  if ((unint64_t)result > a3)
    return WTF::VectorMover<false,WebCore::CaptureDevice>::move(result, a2, a3);
  if (a2 != result)
  {
    v5 = 0;
    v6 = (char *)(a3 + a2 - result);
    do
    {
      v7 = (char *)a2 + v5;
      v8 = &v6[v5];
      v9 = *(_QWORD *)((char *)a2 + v5 - 40);
      *((_QWORD *)v7 - 5) = 0;
      *((_QWORD *)v8 - 5) = v9;
      *(v8 - 32) = *((_BYTE *)a2 + v5 - 32);
      v10 = *(_QWORD *)((char *)a2 + v5 - 24);
      *((_QWORD *)v7 - 3) = 0;
      *((_QWORD *)v8 - 3) = v10;
      v11 = *(_QWORD *)((char *)a2 + v5 - 16);
      *((_QWORD *)v7 - 2) = 0;
      *((_QWORD *)v8 - 2) = v11;
      *((_DWORD *)v8 - 2) = *(_DWORD *)((char *)a2 + v5 - 8);
      v12 = *(WTF::StringImpl **)((char *)a2 + v5 - 16);
      *((_QWORD *)v7 - 2) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = (WTF::StringImpl *)*((_QWORD *)v7 - 3);
      *((_QWORD *)v7 - 3) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v7 - 5);
      *((_QWORD *)v7 - 5) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 -= 40;
    }
    while ((WTF::StringImpl *)((char *)a2 + v5) != v4);
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::CaptureDevice>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      *(_BYTE *)(a3 + 8) = *((_BYTE *)v5 + 8);
      v7 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v7;
      v8 = *((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      *(_QWORD *)(a3 + 24) = v8;
      *(_DWORD *)(a3 + 32) = *((_DWORD *)v5 + 8);
      v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 40);
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF::StringImpl **)result;
      v4 = (WTF::StringImpl *)(*(_QWORD *)result + 40 * *((unsigned int *)result + 3));
      v5 = 40 * a2;
      v6 = WTF::fastMalloc((WTF *)(40 * a2));
      *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = v6;
      result = WTF::VectorMover<false,WebCore::CaptureDevice>::move(v3, v4, v6);
      if (v3)
      {
        if (*(WTF::StringImpl **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *((_DWORD *)v2 + 2) = 0;
        }
        return (WTF::StringImpl *)WTF::fastFree(v3, v7);
      }
    }
  }
  return result;
}

void API::ObjectImpl<(API::Object::Type)109>::~ObjectImpl()
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::tryTakeFirst(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[7];

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(_QWORD **)(a1 + 8);
  while (1)
  {
    v3 = *(_QWORD *)(*v2 + 8);
    if (v3)
      break;
    v2 = (_QWORD *)v2[2];
    if (!v2)
      return 0;
  }
  v5[0] = a1;
  v5[1] = a1;
  v5[2] = v2;
  v5[3] = a1;
  v5[4] = v1;
  v5[5] = a1;
  v5[6] = 0;
  WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove(a1, (uint64_t)v5);
  return v3;
}

BOOL WTF::WeakListHashSet<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v9;

  v2 = *(WTF **)(a2 + 16);
  if (v2)
  {
    v9 = *(uint64_t **)(a2 + 16);
    v4 = (_QWORD *)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>>,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>((uint64_t *)a1, &v9);
    v5 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v5 += 8 * *(unsigned int *)(v5 - 4);
    if ((_QWORD *)v5 != v4)
      WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::remove((uint64_t *)a1, v4);
    WTF::ListHashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::unlinkAndDelete(a1, v2);
    v6 = *(_DWORD *)(a1 + 28);
    v7 = *(_DWORD *)(a1 + 24) + 1;
    *(_DWORD *)(a1 + 24) = v7;
    if (v7 > v6)
      WTF::WeakListHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a1);
  }
  return v2 != 0;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::UIProcess::initializeLoggingIfNecessary(void)::$_0 &&>>(WTF *a1)
{
  WebKit::UIProcess *v1;
  WTF::StringImpl *v2;
  WebKit::UIProcess *v3;
  WTF::StringImpl *v4;
  WebKit::LogChannels *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v1 = (WebKit::UIProcess *)WTF::logChannels(a1);
  WebKit::UIProcess::wtfLogLevelString(v1);
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v3 = (WebKit::UIProcess *)WebCore::logChannels(0);
  WebKit::UIProcess::webCoreLogLevelString(v3);
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v4);
    else
      *(_DWORD *)v9 -= 2;
  }
  v5 = 0;
  {
    v5 = WebKit::LogChannels::LogChannels((WebKit::LogChannels *)&WebKit::logChannels(void)::logChannels);
  }
  WebKit::UIProcess::webKitLogLevelString(v5);
  WTF::LogChannels::initializeLogChannelsIfNecessary();
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return 0;
}

unsigned int *WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  WTF *v3;
  void *v4;

  do
  {
    v1 = __ldaxr(result);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, result));
  if (!v2)
  {
    atomic_store(1u, result);
    v3 = (WTF *)MEMORY[0x19AEABE00](result - 2);
    return (unsigned int *)WTF::fastFree(v3, v4);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::UserMediaPermissionRequestManagerProxy::*&)(void),WebKit::UserMediaPermissionRequestManagerProxy*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::VectorDestructor<true,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::destruct(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t *v3;
  uint64_t v4;

  if ((WTF::StringImpl *)result != a2)
  {
    v3 = (uint64_t *)result;
    do
    {
      v4 = v3[3];
      v3[3] = 0;
      if (v4)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
      result = v3[2];
      v3[2] = 0;
      if (result)
        result = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(result, a2);
      v3 += 5;
    }
    while (v3 != (uint64_t *)a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::captureDevicesChanged(void)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D22B8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::captureDevicesChanged(void)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D22B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::captureDevicesChanged(void)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::call(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      WebKit::UserMediaPermissionRequestManagerProxy::captureDevicesChanged(v3, a2);
  }
}

unint64_t WTF::Vector<WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x197304900);
    }
    v2 = result;
    v3 = *(WTF **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 40 * *(unsigned int *)(result + 12));
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::move(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((WTF::StringImpl *)result != a2)
  {
    v5 = result;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      v6 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(a3 + 16) = v6;
      v7 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(a3 + 24) = v7;
      LOWORD(v7) = *(_WORD *)(v5 + 32);
      *(_BYTE *)(a3 + 34) = *(_BYTE *)(v5 + 34);
      *(_WORD *)(a3 + 32) = v7;
      v8 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v8)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v8, a2);
      result = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (result)
        result = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(result, a2);
      v5 += 40;
      a3 += 40;
    }
    while ((WTF::StringImpl *)v5 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D22E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D22E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

CFTypeRef WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::UserMediaPermissionRequestProxy&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  CFTypeRef result;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  v9 = *(_QWORD **)a1;
  result = CFRetain(*(CFTypeRef *)(a2 + 8));
  v9[v8] = a2;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(WebKit::UserMediaPermissionRequestProxy &)::$_1,void,WTF::String &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34D2308;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(WebKit::UserMediaPermissionRequestProxy &)::$_1,void,WTF::String &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34D2308;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(WebKit::UserMediaPermissionRequestProxy &)::$_1,void,WTF::String &&>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebKit::WebPageProxy *v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  char *v61;
  void *v62;
  WTF *v63;
  uint64_t v64;
  void *v65;
  WTF *v66;
  IPC::Encoder *v67;
  WTF *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  _QWORD *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  int v83;
  int v84;
  _BYTE v85[16];
  const char **v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91[2];
  char v92;
  IPC::Encoder *v93;
  __int128 buf;
  _QWORD v95[2];
  const char **v96[4];

  v96[2] = *(const char ***)MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8);
  if (v4)
    v5 = (WebKit::WebPageProxy *)(v4 - 16);
  else
    v5 = 0;
  v6 = WebKit::WebPageProxy::logger(v5);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v9 = *(_QWORD *)(v2 + 248);
  *(_QWORD *)&buf = v7;
  *((_QWORD *)&buf + 1) = v10;
  v95[0] = "finishGrantingRequest";
  v95[1] = v9;
  v91[0] = *(WTF **)(v3 + 24);
  if (*(_BYTE *)(v6 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf, v91);
  if (!*(_BYTE *)(v3 + 112))
  {
    v11 = *(unsigned int *)(v2 + 164);
    if ((_DWORD)v11 == *(_DWORD *)(v2 + 160))
    {
      WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::UserMediaPermissionRequestProxy&>(v2 + 152, v3);
    }
    else
    {
      v12 = *(_QWORD *)(v2 + 152);
      CFRetain(*(CFTypeRef *)(v3 + 8));
      *(_QWORD *)(v12 + 8 * v11) = v3;
      ++*(_DWORD *)(v2 + 164);
    }
    *(_OWORD *)v91 = *(_OWORD *)(v3 + 48);
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::DOMCacheIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::add((uint64_t)&buf, (uint64_t *)(v2 + 280), v91);
  }
  v13 = *(_QWORD *)(v2 + 176);
  v14 = *(_DWORD *)(v2 + 188);
  v15 = v13 + 40 * v14;
  if (v14)
  {
    v16 = 0;
    v17 = 0;
    v18 = v13 + 40 * v14;
    v19 = v18;
    do
    {
      v20 = v13 + v16;
      if (WebKit::isMatchingDeniedRequest((_QWORD *)v3, (_QWORD *)(v13 + v16)))
      {
        v22 = !*(_BYTE *)(v20 + 32) || *(_DWORD *)(v3 + 108) == 0;
        if (!v22
          || *(_BYTE *)(v13 + v16 + 33)
          && (*(unsigned __int8 *)(v3 + 112) - 1 >= 2 ? (v23 = *(_DWORD *)(v3 + 92) == 0) : (v23 = 1), !v23)
          || *(_BYTE *)(v13 + v16 + 34) && *(unsigned __int8 *)(v3 + 112) - 1 <= 1)
        {
          if (v19 == *(_QWORD *)(v2 + 176) + 40 * *(unsigned int *)(v2 + 188))
          {
            v19 = v13 + v16;
          }
          else if (v20 != v18)
          {
            WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::moveOverlapping(v18, (WTF::StringImpl *)(v13 + v16), v19);
            v19 += v13 + v16 - v18;
          }
          v24 = v13 + v16;
          v25 = *(_QWORD *)(v13 + v16 + 24);
          *(_QWORD *)(v13 + v16 + 24) = 0;
          if (v25)
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v25, v21);
          v26 = *(_QWORD *)(v24 + 16);
          *(_QWORD *)(v24 + 16) = 0;
          if (v26)
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v26, v21);
          v18 = v24 + 40;
          ++v17;
        }
      }
      v16 += 40;
    }
    while (v13 + v16 < v15);
    v13 = *(_QWORD *)(v2 + 176);
    v14 = *(_DWORD *)(v2 + 188);
    v15 = v19;
  }
  else
  {
    v17 = 0;
    v18 = *(_QWORD *)(v2 + 176);
  }
  v27 = (WTF::StringImpl *)(v13 + 40 * v14);
  if ((WTF::StringImpl *)v18 != v27)
  {
    WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::moveOverlapping(v18, v27, v15);
    v14 = *(_DWORD *)(v2 + 188);
  }
  *(_DWORD *)(v2 + 188) = v14 - v17;
  {
    if (HIBYTE(word_1EE341E28))
    {
      HIBYTE(word_1EE341E28) = 0;
      goto LABEL_46;
    }
  }
  else
  {
    WebKit::UserMediaProcessManager::singleton(void)::manager = (uint64_t)&off_1E34D2148;
    unk_1EE341E10 = 0;
    qword_1EE341E18 = 0;
    unk_1EE341E20 = 0;
    word_1EE341E28 = 1;
  }
  if (*(_BYTE *)(v3 + 112) != 1)
  {
    v30 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8);
    if (v30)
      v31 = v30 - 16;
    else
      v31 = 0;
    v32 = *(_QWORD *)(v31 + 208);
    v33 = (unsigned int *)(v32 + 16);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
    if (!*(_DWORD *)(v3 + 108) || (*(_BYTE *)(v32 + 784) & 2) != 0)
      goto LABEL_65;
    v35 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8);
    if (v35)
      v36 = v35 - 16;
    else
      v36 = 0;
    v37 = *(_QWORD *)(v36 + 224);
    {
      WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v37 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, v8) & 1) != 0)
    {
LABEL_65:
      LODWORD(v38) = 0;
      v39 = 0;
    }
    else
    {
      v51 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8);
      if (v51)
        v52 = v51 - 16;
      else
        v52 = 0;
      v53 = *(_QWORD *)(v52 + 224);
      {
        WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      v38 = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v53 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v8) ^ 1;
      v39 = v38;
    }
    if (!*(_DWORD *)(v3 + 92) || (*(_BYTE *)(v32 + 784) & 1) != 0)
      goto LABEL_80;
    v40 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8);
    if (v40)
      v41 = v40 - 16;
    else
      v41 = 0;
    v42 = *(_QWORD *)(v41 + 224);
    {
      WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v42 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key, v8) & 1) != 0)goto LABEL_80;
    v43 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8);
    if (v43)
      v44 = v43 - 16;
    else
      v44 = 0;
    v45 = *(_QWORD *)(v44 + 224);
    {
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v45 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v8))
    {
LABEL_80:
      if (!v39)
      {
LABEL_138:
        if (v32)
          WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v32 + 16));
        goto LABEL_140;
      }
      v84 = v38;
      v83 = 0;
      v46 = 1;
    }
    else
    {
      v84 = v38;
      v46 = v39 + 1;
      v83 = 1;
    }
    v89 = 0;
    v90 = 0;
    v87 = 0;
    v88 = 0;
    v86 = 0;
    v47 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8);
    if (v47)
      v48 = v47 - 16;
    else
      v48 = 0;
    v49 = *(_QWORD *)(v48 + 224);
    {
      WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v49 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, v8) & 1) != 0)
    {
LABEL_128:
      if ((v84 & 1) != 0)
        *(_DWORD *)(v32 + 784) |= 2u;
      if (v83)
        *(_DWORD *)(v32 + 784) |= 1u;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v85, (uint64_t)&v87);
      WebKit::MediaDeviceSandboxExtensions::MediaDeviceSandboxExtensions((uint64_t)&buf, (uint64_t)v85, &v89, (uint64_t *)&v86);
      v64 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v64 = 2595;
      *(_QWORD *)(v64 + 8) = 0;
      *(_QWORD *)(v64 + 528) = v64 + 16;
      *(_QWORD *)(v64 + 536) = v64 + 16;
      *(_OWORD *)(v64 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v64 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v64);
      v93 = (IPC::Encoder *)v64;
      IPC::ArgumentCoder<WebKit::MediaDeviceSandboxExtensions,void>::encode((IPC::Encoder *)v64, (const char ***)&buf);
      LOBYTE(v91[0]) = 0;
      v92 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v32, &v93, 0, (uint64_t)v91, 1);
      if (v92)
      {
        v66 = v91[0];
        v91[0] = 0;
        if (v66)
          (*(void (**)(WTF *))(*(_QWORD *)v66 + 8))(v66);
      }
      v67 = v93;
      v93 = 0;
      if (v67)
      {
        IPC::Encoder::~Encoder(v67, v65);
        WTF::fastFree(v68, v69);
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v96);
      WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v95, v70);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf, v71);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v85, v72);
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v86);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v73);
      WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v74);
      goto LABEL_138;
    }
    WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v89, 0x10uLL);
    if (v89 && v46 != HIDWORD(v90))
      bzero((void *)(v89 + 8 * HIDWORD(v90)), 8 * (v46 - HIDWORD(v90)));
    HIDWORD(v90) = v46;
    LODWORD(v88) = v46;
    v87 = WTF::fastMalloc((WTF *)(8 * v46));
    if (v84)
    {
      WebKit::SandboxExtension::createHandleForGenericExtension((uint64_t)"com.apple.webkit.microphone", (uint64_t)&buf);
      if (BYTE8(buf))
      {
        if (--v46 >= (unint64_t)HIDWORD(v90))
        {
          __break(0xC471u);
          goto LABEL_153;
        }
        v50 = (const char **)buf;
        *(_QWORD *)&buf = 0;
        std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(v89 + 8 * v46), v50);
        if (HIDWORD(v88) == (_DWORD)v88)
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral const&>((uint64_t)&v87, (uint64_t)&WebKit::audioExtensionPath);
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(WTF **)(v87 + 8 * HIDWORD(v88)) = v91[0];
          ++HIDWORD(v88);
        }
        if (BYTE8(buf))
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&buf);
      }
    }
    if (!v83
      || (WebKit::SandboxExtension::createHandleForGenericExtension((uint64_t)"com.apple.webkit.camera", (uint64_t)&buf),
          !BYTE8(buf)))
    {
LABEL_113:
      v57 = *(_QWORD *)(v32 + 144);
      if (v57 && *(_QWORD *)(v57 + 352))
        xpc_connection_get_audit_token();
      if (HIDWORD(v88) != HIDWORD(v90))
      {
        WTFLogAlways();
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v86);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v81);
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v82);
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v32 + 16));
LABEL_46:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebKit::UserMediaPermissionRequestManagerProxy::denyRequest((WebKit::UserMediaPermissionRequestManagerProxy *)v2, v3, 6, (uint64_t *)&buf, 0);
        v29 = (WTF::StringImpl *)buf;
        *(_QWORD *)&buf = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v28);
          else
            *(_DWORD *)v29 -= 2;
        }
        return;
      }
      if (HIDWORD(v88))
      {
        v58 = v87;
        v59 = 8 * HIDWORD(v88);
        do
        {
          v60 = qword_1ECE71B18;
          if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT))
          {
            WTF::String::utf8();
            v61 = v91[0] ? (char *)v91[0] + 16 : 0;
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = v61;
            _os_log_impl(&dword_196BCC000, v60, OS_LOG_TYPE_DEFAULT, "UserMediaProcessManager::willCreateMediaStream - granting extension %s", (uint8_t *)&buf, 0xCu);
            v63 = v91[0];
            v91[0] = 0;
            if (v63)
            {
              if (*(_DWORD *)v63 == 1)
                WTF::fastFree(v63, v62);
              else
                --*(_DWORD *)v63;
            }
          }
          v58 += 8;
          v59 -= 8;
        }
        while (v59);
      }
      goto LABEL_128;
    }
    if (v46 - 1 < (unint64_t)HIDWORD(v90))
    {
      v54 = (const char **)buf;
      *(_QWORD *)&buf = 0;
      std::unique_ptr<WebKit::SandboxExtensionImpl>::reset[abi:sn180100]((const char ***)(v89 + 8 * (v46 - 1)), v54);
      v55 = HIDWORD(v88);
      if (HIDWORD(v88) == (_DWORD)v88)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral const&>((uint64_t)&v87, (uint64_t)&WebKit::videoExtensionPath);
      }
      else
      {
        v56 = v87;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(WTF **)(v56 + 8 * v55) = v91[0];
        ++HIDWORD(v88);
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&buf);
      goto LABEL_113;
    }
    __break(0xC471u);
LABEL_153:
    JUMPOUT(0x1973055BCLL);
  }
LABEL_140:
  v75 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 8);
  if (v75)
    v76 = v75 - 16;
  else
    v76 = 0;
  CFRetain(*(CFTypeRef *)(v76 + 8));
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v2 + 8), v2);
  v77 = *(unsigned int **)(v2 + 8);
  if (v77)
  {
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 + 1, v77));
  }
  CFRetain(*(CFTypeRef *)(v3 + 8));
  v79 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v79 = &off_1E34D2330;
  v79[1] = v2;
  v79[2] = v77;
  v79[3] = v3;
  *(_QWORD *)&buf = v79;
  WebKit::WebPageProxy::willStartCapture(v76, v3, (uint64_t *)&buf);
  v80 = buf;
  *(_QWORD *)&buf = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  if (v75)
    CFRelease(*(CFTypeRef *)(v75 - 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34D2330;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34D2330;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0,void>::call(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  const char ***v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  IPC::Encoder *v29;
  WTF *v30;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  void *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  _BYTE v43[32];
  char v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  IPC::Encoder *v48;
  _OWORD v49[2];
  const char *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v1 = a1[2];
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return;
  v3 = a1[1];
  if (*(_BYTE *)(v3 + 256))
    WebKit::UserMediaPermissionRequestManagerProxy::captureDevicesChanged(a1[1], 2);
  *(_BYTE *)(v3 + 256) = 0;
  ++*(_QWORD *)(v3 + 264);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v46 = 0;
  v47 = 0;
  if (!*(_BYTE *)(v3 + 257))
  {
    v7 = *(_QWORD *)(v5 + 224);
    {
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, v6) & 1) == 0)
    {
      v9 = *(_QWORD *)(v5 + 224);
      {
        WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v9 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, v8))goto LABEL_18;
    }
    v10 = *(_QWORD *)(v5 + 224);
    {
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
      WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
    }
    if ((WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v10 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, v8) & 1) == 0)
    {
LABEL_18:
      v50 = "com.apple.tccd";
      v51 = 15;
      v11 = *(_QWORD *)(*(_QWORD *)(v5 + 208) + 144);
      if (v11)
      {
        if (*(_QWORD *)(v11 + 352))
        {
          xpc_connection_get_audit_token();
          LOBYTE(v11) = v43[0];
          v49[0] = *(_OWORD *)&v43[1];
          *(_OWORD *)((char *)v49 + 15) = *(_OWORD *)&v43[16];
          v12 = 1;
LABEL_23:
          v43[0] = v11;
          *(_OWORD *)&v43[1] = v49[0];
          *(_OWORD *)&v43[16] = *(_OWORD *)((char *)v49 + 15);
          v44 = v12;
          WebKit::SandboxExtension::createHandlesForMachLookup((uint64_t *)&v50, 1uLL, (__int128 *)v43, 1, (uint64_t)&v39);
          if (HIDWORD(v47))
          {
            v14 = (const char ***)v46;
            v15 = 8 * HIDWORD(v47);
            do
            {
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v14);
              v14 = (const char ***)(v16 + 8);
              v15 -= 8;
            }
            while (v15);
          }
          v17 = v46;
          if (v46)
          {
            v46 = 0;
            LODWORD(v47) = 0;
            WTF::fastFree(v17, v13);
          }
          v46 = v39;
          v18 = v40;
          v39 = 0;
          v40 = 0;
          v47 = v18;
          WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v13);
          *(_BYTE *)(v3 + 257) = 1;
          goto LABEL_29;
        }
        LOBYTE(v11) = 0;
      }
      v12 = 0;
      goto LABEL_23;
    }
  }
LABEL_29:
  v19 = *(_QWORD *)(v5 + 208);
  v20 = a1[3];
  v45 = *(_QWORD *)(v20 + 24);
  WebKit::UserMediaPermissionRequestProxy::audioDevice((WebKit::UserMediaPermissionRequestProxy *)v43, v20);
  WebKit::UserMediaPermissionRequestProxy::videoDevice((WebKit::UserMediaPermissionRequestProxy *)&v39, a1[3]);
  v21 = a1[2];
  v22 = a1[3];
  a1[2] = 0;
  v23 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 1896);
  v24 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v24 = 2496;
  *(_QWORD *)(v24 + 8) = v23;
  *(_QWORD *)(v24 + 528) = v24 + 16;
  *(_QWORD *)(v24 + 536) = v24 + 16;
  *(_OWORD *)(v24 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v24 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v24);
  v48 = (IPC::Encoder *)v24;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v24, &v45);
  IPC::ArgumentCoder<WebCore::CaptureDevice,void>::encode((IPC::Encoder *)v24, (uint64_t)v43);
  IPC::ArgumentCoder<WebCore::CaptureDevice,void>::encode((IPC::Encoder *)v24, (uint64_t)&v39);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v24, (uint64_t *)(v22 + 2080));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v24, (uint64_t *)(v22 + 2088));
  IPC::VectorArgumentCoder<false,WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v24, (uint64_t)&v46);
  v25 = (char *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v25 = &off_1E34D2358;
  *((_QWORD *)v25 + 1) = v3;
  *((_QWORD *)v25 + 2) = v21;
  v26 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v50 = v25;
  v51 = v26;
  v52 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(v19, &v48, 0, (uint64_t)&v50, 1);
  if (v52)
  {
    v28 = v50;
    v50 = 0;
    if (v28)
      (*(void (**)(const char *))(*(_QWORD *)v28 + 8))(v28);
  }
  v29 = v48;
  v48 = 0;
  if (v29)
  {
    IPC::Encoder::~Encoder(v29, v27);
    WTF::fastFree(v30, v31);
  }
  v32 = v42;
  v42 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v41;
  v41 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = v39;
  v39 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = *(WTF::StringImpl **)&v43[24];
  *(_QWORD *)&v43[24] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = *(WTF::StringImpl **)&v43[16];
  *(_QWORD *)&v43[16] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = *(WTF::StringImpl **)v43;
  *(_QWORD *)v43 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)v37 -= 2;
  }
  WebKit::UserMediaPermissionRequestManagerProxy::processNextUserMediaRequestIfNeeded((WebKit::UserMediaPermissionRequestManagerProxy *)v3);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v38);
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 - 8));
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UserMediaAccessWasGranted,WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(void)::{lambda(void)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34D2358;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UserMediaAccessWasGranted,WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(void)::{lambda(void)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D2358;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPage::UserMediaAccessWasGranted,WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(void)::{lambda(void)#1}>(WebKit::UserMediaPermissionRequestManagerProxy::finishGrantingRequest(WebKit::UserMediaPermissionRequestProxy &)::$_0::operator()(void)::{lambda(void)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(unsigned int *result, WebKit::WebProcessProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebKit::UserMediaProcessManager *v7;
  unsigned int *v8;
  unsigned int v9;

  v2 = *((_QWORD *)result + 2);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *((_QWORD *)result + 1);
      v4 = *(_QWORD *)(v3 + 264) - 1;
      *(_QWORD *)(v3 + 264) = v4;
      if (!v4)
      {
        {
          WebKit::UserMediaProcessManager::singleton(void)::manager = (uint64_t)&off_1E34D2148;
          unk_1EE341E10 = 0;
          qword_1EE341E18 = 0;
          unk_1EE341E20 = 0;
          word_1EE341E28 = 1;
        }
        v5 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 8);
        if (v5)
          v6 = v5 - 16;
        else
          v6 = 0;
        v7 = *(WebKit::UserMediaProcessManager **)(v6 + 208);
        v8 = (unsigned int *)((char *)v7 + 16);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        WebKit::UserMediaProcessManager::revokeSandboxExtensionsIfNeeded(v7, a2);
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v8);
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF::StringImpl *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

WTF::StringImpl *WTF::KeyValuePairHashTraits<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  *(_OWORD *)a1 = xmmword_1978CF7D0;
  result = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _OWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _OWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (_QWORD *)v6;
    do
    {
      if (v13[1] != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          v16 = (WTF::StringImpl *)v13[2];
          v13[2] = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v10);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
        else
        {
          v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookupForReinsert(a1, v13);
          v15 = (WTF::StringImpl *)*((_QWORD *)v14 + 2);
          *((_QWORD *)v14 + 2) = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v10);
            else
              *(_DWORD *)v15 -= 2;
          }
          *v14 = *(_OWORD *)v13;
          v17 = v13[2];
          v13[2] = 0;
          *((_QWORD *)v14 + 2) = v17;
          v18 = (WTF::StringImpl *)v13[2];
          v13[2] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v10);
            else
              *(_DWORD *)v18 -= 2;
          }
          if (v13 == a3)
            v11 = v14;
        }
      }
      v13 += 3;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

WTF *WTF::Vector<WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_DWORD *)result + 2))
  {
    v2 = result;
    v3 = *((unsigned int *)result + 3);
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)result;
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
          CFRelease(*(CFTypeRef *)(v6 + 8));
        ++v4;
        v5 -= 8;
      }
      while (v5);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

unint64_t WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::moveOverlapping(unint64_t result, WTF::StringImpl *a2, unint64_t a3)
{
  WTF::StringImpl *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2;
  v4 = result;
  if (result > a3)
    return WTF::VectorMover<false,WebKit::UserMediaPermissionRequestManagerProxy::DeniedRequest>::move(result, a2, a3);
  if (a2 != (WTF::StringImpl *)result)
  {
    v5 = a3 + 40 * ((uint64_t)((uint64_t)a2 - result) / 40) - 16;
    do
    {
      *(_OWORD *)(v5 - 24) = *(_OWORD *)((char *)v3 - 40);
      v6 = *((_QWORD *)v3 - 3);
      *((_QWORD *)v3 - 3) = 0;
      *(_QWORD *)(v5 - 8) = v6;
      v7 = *((_QWORD *)v3 - 2);
      *((_QWORD *)v3 - 2) = 0;
      *(_QWORD *)v5 = v7;
      LOWORD(v7) = *((_WORD *)v3 - 4);
      *(_BYTE *)(v5 + 10) = *((_BYTE *)v3 - 6);
      *(_WORD *)(v5 + 8) = v7;
      v8 = *((_QWORD *)v3 - 2);
      *((_QWORD *)v3 - 2) = 0;
      if (v8)
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v8, a2);
      result = *((_QWORD *)v3 - 3);
      *((_QWORD *)v3 - 3) = 0;
      if (result)
        result = WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(result, a2);
      v3 = (WTF::StringImpl *)((char *)v3 - 40);
      v5 -= 40;
    }
    while (v3 != (WTF::StringImpl *)v4);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::startProcessingUserMediaPermissionRequest(WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34D2380;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::startProcessingUserMediaPermissionRequest(WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34D2380;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::startProcessingUserMediaPermissionRequest(WTF::Ref<WebKit::UserMediaPermissionRequestProxy,WTF::RawPtrTraits<WebKit::UserMediaPermissionRequestProxy>,WTF::DefaultRefDerefTraits<WebKit::UserMediaPermissionRequestProxy>> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::call(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WebKit::WebPageProxy *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::String *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  WTF *v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t i;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::String *v54;
  _QWORD v55[4];
  WTF *v56[2];
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  _BYTE buf[12];
  int v63;
  int v64;
  _DWORD v65[4];
  _QWORD v66[3];

  v66[1] = *MEMORY[0x1E0C80C00];
  v2 = a1[2];
  if (!v2 || !*(_QWORD *)(v2 + 8) || !*(_QWORD *)(a1[3] + 16))
    return;
  v3 = a1[1];
  if (a2 == 2)
  {
    v7 = *(_QWORD *)(v3 + 16);
    CFRetain(*(CFTypeRef *)(v7 + 8));
    *(_BYTE *)(v7 + 2072) = 1;
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  else if (!a2)
  {
    v4 = *(_QWORD *)(v3 + 16);
    CFRetain(*(CFTypeRef *)(v4 + 8));
    *(_QWORD *)buf = 0;
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest((WebKit::UserMediaPermissionRequestManagerProxy *)v3, v4, 6, (uint64_t *)buf, 0);
    v6 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
    return;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 8);
  if (v8)
    v9 = (WebKit::WebPageProxy *)(v8 - 16);
  else
    v9 = 0;
  v10 = WebKit::WebPageProxy::logger(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v12 = *(_QWORD *)(v3 + 248);
  v55[0] = v11;
  v55[1] = v13;
  v55[2] = "processUserMediaPermissionRequest";
  v55[3] = v12;
  v14 = *(_QWORD *)(v3 + 16);
  if (*(_BYTE *)(v10 + 12))
  {
    v15 = *(WTF::String **)(v14 + 24);
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v55);
    v54 = v15;
    WTF::String::number(v15);
    WTF::String::String((WTF::String *)&v58, ", persistent access: ");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v57);
    WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v60, (uint64_t *)&v59, (uint64_t *)&v58, (uint64_t *)&v57, &v61);
    v17 = v57;
    v57 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v58;
    v58 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v59;
    v59 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v16);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v60;
    v60 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v16);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = qword_1ECE71B18;
    v22 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v56[0] ? (char *)v56[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v24;
      _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v22 = v56[0];
      v56[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = (WTF *)WTF::fastFree(v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (WebKit2LogWebRTC)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers(v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v53 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v55);
                v63 = 0;
                WTF::String::number(v54);
                v64 = 0;
                WTF::String::String((WTF::String *)v65, ", persistent access: ");
                v65[2] = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(v66);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v56, (uint64_t)buf, 4uLL);
                (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v31 + 16))(v31, &WebKit2LogWebRTC, 0, v56);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v32);
                for (i = 56; i != -8; i -= 16)
                {
                  v34 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v53);
            }
            v35 = __ldxr(v25);
            if (v35 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v36 = v61;
    v61 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v36 -= 2;
    }
    v14 = *(_QWORD *)(v3 + 16);
  }
  v37 = *(unsigned int **)(v14 + 64);
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 + 1, v37));
  v39 = *(unsigned int **)(*(_QWORD *)(v3 + 16) + 72);
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 + 1, v39));
  v41 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 8);
  if (v41)
    v42 = v41 - 16;
  else
    v42 = 0;
  CFRetain(*(CFTypeRef *)(v42 + 8));
  v43 = (unsigned int *)WebKit::WebsiteDataStore::ensureDeviceIdHashSaltStorage(*(WebKit::WebsiteDataStore **)(v42 + 264));
  v44 = v43;
  do
    v45 = __ldaxr(v43);
  while (__stlxr(v45 + 1, v43));
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 8), v3);
  v46 = *(unsigned int **)(v3 + 8);
  if (v46)
  {
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 + 1, v46));
  }
  v48 = *(_QWORD *)(v3 + 16);
  if (v48)
    CFRetain(*(CFTypeRef *)(v48 + 8));
  v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v49 = &off_1E34D23A8;
  v49[1] = v3;
  v49[2] = v46;
  v49[3] = v48;
  *(_QWORD *)buf = v49;
  WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin((uint64_t)v44, (uint64_t)v37, (uint64_t)v39, (uint64_t *)buf);
  v50 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v44);
  if (v41)
    CFRelease(*(CFTypeRef *)(v41 - 8));
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v39, v51);
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v37, v52);
}

_OWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::String,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionRequest(void)::$_0,void,WTF::String &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34D23A8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionRequest(void)::$_0,void,WTF::String &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34D23A8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionRequest(void)::$_0,void,WTF::String &&>::call(_QWORD *result, WTF::StringImpl **a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  WebKit::UserMediaPermissionRequestManagerProxy *v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebCore::RealtimeMediaSourceCenter *v12;
  WebCore::RealtimeMediaSourceCenter *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WebCore::RealtimeMediaSourceCenter *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _QWORD v28[2];
  _QWORD v29[3];
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  _QWORD *v35;

  v2 = result[2];
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = result;
      v4 = result[3];
      if (*(_QWORD *)(v4 + 16))
      {
        v6 = (WebKit::UserMediaPermissionRequestManagerProxy *)result[1];
        CFRetain(*(CFTypeRef *)(v4 + 8));
        v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v7 = &off_1E34D23D0;
        v7[1] = v6;
        v7[2] = v4;
        v35 = v7;
        v8 = *a2;
        if (*a2)
          *(_DWORD *)v8 += 2;
        v33 = v8;
        WebKit::UserMediaPermissionRequestManagerProxy::ephemeralDeviceHashSaltForFrame((WTF::StringImpl *)&v34, (uint64_t)v6, *(_QWORD *)(v3[3] + 48), *(_QWORD *)(v3[3] + 56));
        v29[2] = v6;
        v9 = v3[3];
        if (v9)
          CFRetain(*(CFTypeRef *)(v9 + 8));
        v30 = v9;
        v10 = v33;
        if (v33)
          *(_DWORD *)v33 += 2;
        v31 = v10;
        v11 = v34;
        if (v34)
          *(_DWORD *)v34 += 2;
        v32 = v11;
        WebKit::UserMediaPermissionRequestManagerProxy::syncWithWebCorePrefs(v6);
        v13 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(v12);
        v14 = WebCore::RealtimeMediaSourceCenter::displayCaptureFactory(v13);
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15) & 1) != 0
          || *(unsigned __int8 *)(v3[3] + 112) - 1 >= 2)
        {
          v22 = (WebCore::RealtimeMediaSourceCenter *)WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v22 = &off_1E34D23F8;
          *((_QWORD *)v22 + 1) = v6;
          *((_QWORD *)v22 + 2) = v9;
          *((_QWORD *)v22 + 3) = v10;
          v30 = 0;
          v31 = 0;
          *((_QWORD *)v22 + 4) = v11;
          v29[0] = v22;
          WebCore::RealtimeMediaSourceCenter::singleton(v22);
          WebCore::RealtimeMediaSourceCenter::validateRequestConstraints();
          v23 = v29[0];
          v29[0] = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v32 = 0;
        }
        else
        {
          v29[0] = 0;
          v29[1] = 0;
          v28[0] = 0;
          v28[1] = 0;
          if (*(_QWORD *)(v9 + 16))
          {
            v17 = *(_QWORD *)(*((_QWORD *)v6 + 8) + 8);
            if (v17)
              v18 = v17 - 16;
            else
              v18 = 0;
            CFRetain(*(CFTypeRef *)(v18 + 8));
            if (!*(_BYTE *)(v18 + 729) && *(_BYTE *)(v18 + 728) && *(_QWORD *)(v18 + 280))
              WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionValidRequest((unsigned int *)v6, v29, v28, (uint64_t)&v31);
            if (v17)
              CFRelease(*(CFTypeRef *)(v17 - 8));
          }
          WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v16);
          WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v19);
          v21 = v32;
          v32 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v20);
            else
              *(_DWORD *)v21 -= 2;
          }
        }
        v24 = v31;
        v31 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v20);
          else
            *(_DWORD *)v24 -= 2;
        }
        v25 = v30;
        v30 = 0;
        if (v25)
          CFRelease(*(CFTypeRef *)(v25 + 8));
        v26 = v34;
        v34 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v20);
          else
            *(_DWORD *)v26 -= 2;
        }
        v27 = v33;
        v33 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v20);
          else
            *(_DWORD *)v27 -= 2;
        }
        result = v35;
        v35 = 0;
        if (result)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      }
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit38UserMediaPermissionRequestManagerProxy33processUserMediaPermissionRequestEvEN3__0clEONS_6StringEEUlT_E_vJN7WebCore19MediaConstraintTypeEEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34D23D0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit38UserMediaPermissionRequestManagerProxy33processUserMediaPermissionRequestEvEN3__0clEONS_6StringEEUlT_E_vJN7WebCore19MediaConstraintTypeEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34D23D0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit38UserMediaPermissionRequestManagerProxy33processUserMediaPermissionRequestEvEN3__0clEONS_6StringEEUlT_E_vJN7WebCore19MediaConstraintTypeEEE4callESA_(uint64_t a1, char a2)
{
  WebKit::UserMediaPermissionRequestManagerProxy *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  WebKit::WebPageProxy *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::String *v16;
  WTF::StringImpl *v17[2];
  const char *v18;
  uint64_t v19;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
    return;
  v3 = *(WebKit::UserMediaPermissionRequestManagerProxy **)(a1 + 8);
  v4 = *(_QWORD *)(*((_QWORD *)v3 + 8) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  if (*(_BYTE *)(v5 + 729))
  {
    v6 = 0;
    if (!v4)
      goto LABEL_8;
    goto LABEL_7;
  }
  v6 = *(_BYTE *)(v5 + 728) != 0;
  if (v4)
LABEL_7:
    CFRelease(*(CFTypeRef *)(v4 - 8));
LABEL_8:
  if (v6)
  {
    v7 = *(_QWORD *)(*((_QWORD *)v3 + 8) + 8);
    if (v7)
      v8 = (WebKit::WebPageProxy *)(v7 - 16);
    else
      v8 = 0;
    v9 = WebKit::WebPageProxy::logger(v8);
    v10 = (WTF::StringImpl *)(*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(_QWORD *)v3 + 24))(v3);
    v11 = *((_QWORD *)v3 + 31);
    v17[0] = v10;
    v17[1] = v12;
    v18 = "processUserMediaPermissionInvalidRequest";
    v19 = v11;
    v13 = *((_QWORD *)v3 + 2);
    v16 = *(WTF::String **)(v13 + 24);
    if (*(_BYTE *)(v9 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v17, &v16);
      v13 = *((_QWORD *)v3 + 2);
    }
    if (!*(_BYTE *)(v13 + 2072))
    {
      *(_OWORD *)v17 = *(_OWORD *)(v13 + 48);
      if (!WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*((_QWORD *)v3 + 35), v17))a2 = 0;
      v13 = *((_QWORD *)v3 + 2);
    }
    CFRetain(*(CFTypeRef *)(v13 + 8));
    v17[0] = 0;
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(v3, v13, 3, (uint64_t *)v17, a2);
    v15 = v17[0];
    v17[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    CFRelease(*(CFTypeRef *)(v13 + 8));
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionRequest(void)::$_0::operator()(WTF::String &&)::{lambda(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)#1},void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34D23F8;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionRequest(void)::$_0::operator()(WTF::String &&)::{lambda(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)#1},void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D23F8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionRequest(void)::$_0::operator()(WTF::String &&)::{lambda(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)#1},void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::call(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 64) + 8);
    if (v7)
      v8 = v7 - 16;
    else
      v8 = 0;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    if (!*(_BYTE *)(v8 + 729) && *(_BYTE *)(v8 + 728) && *(_QWORD *)(v8 + 280))
      WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionValidRequest((unsigned int *)v6, a2, a3, a1 + 24);
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 - 8));
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionValidRequest(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::MediaDeviceHashSalts &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D2420;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionValidRequest(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::MediaDeviceHashSalts &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D2420;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::processUserMediaPermissionValidRequest(WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::MediaDeviceHashSalts &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v2;
  WebKit::UserMediaPermissionRequestManagerProxy *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const URL *v9;
  WTF::StringImpl *v10;
  char v11;
  StringImpl *m_ptr;
  CFTypeRef *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  unsigned int *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  StringImpl *v24;
  WTF::StringImpl *v25;
  const void *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  URL v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32[5];

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return;
  v3 = *(WebKit::UserMediaPermissionRequestManagerProxy **)(v2 + 8);
  if (!v3)
    return;
  v4 = *((_QWORD *)v3 + 2);
  if ((a2 & 1) == 0)
  {
    v13 = (CFTypeRef *)(v4 + 8);
    CFRetain(*(CFTypeRef *)(v4 + 8));
    v32[0] = 0;
    WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(v3, v4, 5, (uint64_t *)v32, 0);
    v15 = v32[0];
    v32[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    goto LABEL_46;
  }
  if (!v4)
    return;
  v5 = WebKit::WebFrameProxy::webFrame(*(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56));
  v6 = v5;
  if (v5)
    CFRetain(*(CFTypeRef *)(v5 + 8));
  v7 = *(_QWORD *)(*((_QWORD *)v3 + 8) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  if (!v6)
    goto LABEL_36;
  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(_QWORD *)(v8 + 32) + 968), &v31);
  MEMORY[0x19AEABB0C](v32, &v31, 0);
  WebCore::SecurityOriginData::toURL((WebCore::SecurityOriginData *)(*(_QWORD *)(*((_QWORD *)v3 + 2) + 72) + 8));
  v11 = WTF::protocolHostAndPortAreEqual((WTF *)v32, &v30, v9);
  m_ptr = v30.m_string.m_impl.m_ptr;
  v30.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v10);
    else
      *(_DWORD *)m_ptr -= 2;
  }
  v16 = v32[0];
  v32[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v10);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v31;
  v31 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v10);
      if ((v11 & 1) != 0)
        goto LABEL_27;
LABEL_36:
      v27 = *((_QWORD *)v3 + 2);
      CFRetain(*(CFTypeRef *)(v27 + 8));
      v32[0] = 0;
      WebKit::UserMediaPermissionRequestManagerProxy::denyRequest(v3, v27, 0, (uint64_t *)v32, 0);
      v29 = v32[0];
      v32[0] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v28);
        else
          *(_DWORD *)v29 -= 2;
      }
      v26 = *(const void **)(v27 + 8);
      goto LABEL_41;
    }
    *(_DWORD *)v17 -= 2;
  }
  if ((v11 & 1) == 0)
    goto LABEL_36;
LABEL_27:
  v18 = *(unsigned int **)(*((_QWORD *)v3 + 2) + 64);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  API::SecurityOrigin::create(v32);
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v18, v20);
  v21 = *(unsigned int **)(*((_QWORD *)v3 + 2) + 72);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  API::SecurityOrigin::create(&v30);
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v21, v23);
  (*(void (**)(_QWORD, uint64_t, uint64_t, WTF::StringImpl *, StringImpl *, _QWORD))(**(_QWORD **)(v8 + 104)
                                                                                            + 312))(*(_QWORD *)(v8 + 104), v8, v6, v32[0], v30.m_string.m_impl.m_ptr, *((_QWORD *)v3 + 2));
  v24 = v30.m_string.m_impl.m_ptr;
  v30.m_string.m_impl.m_ptr = 0;
  if (v24)
    CFRelease(*((CFTypeRef *)v24 + 1));
  v25 = v32[0];
  v32[0] = 0;
  if (v25)
  {
    v26 = (const void *)*((_QWORD *)v25 + 1);
LABEL_41:
    CFRelease(v26);
  }
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
  if (v6)
  {
    v13 = (CFTypeRef *)(v6 + 8);
LABEL_46:
    CFRelease(*v13);
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = *a3 + ~(*a3 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v26 = v6 + 8 * v20;
        goto LABEL_29;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_22:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v14);
      v14 = result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_22;
  }
  v26 = v21 + 8 * v24;
  v25 = 1;
LABEL_29:
  *v5 = (uint64_t)v14;
  v5[1] = v26;
  *((_BYTE *)v5 + 16) = v25;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::getUserMediaPermissionInfo(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WebKit::UserMediaPermissionCheckProxy::PermissionInfo)> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34D2448;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::getUserMediaPermissionInfo(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WebKit::UserMediaPermissionCheckProxy::PermissionInfo)> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34D2448;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::getUserMediaPermissionInfo(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WebKit::UserMediaPermissionCheckProxy::PermissionInfo)> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = a1[2];
  if (!v3 || !*(_QWORD *)(v3 + 8))
    goto LABEL_10;
  v5 = a1[1];
  v8 = *(_QWORD *)(v5 + 56);
  v6 = (uint64_t *)(v5 + 56);
  v7 = v8;
  v9 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v8, a1[3]);
  if (v8)
  {
    v10 = (_QWORD *)(v7 + 8 * *(unsigned int *)(v7 - 4));
    if (v10 == v9)
      goto LABEL_10;
  }
  else
  {
    if (!v9)
    {
LABEL_10:
      a2 = 0;
      goto LABEL_11;
    }
    v10 = 0;
  }
  if (v10 != v9)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove(v6, v9);
LABEL_11:
  v11 = a1[4];
  a1[4] = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 8 * v6);
    if (v7 == a2)
    {
LABEL_6:
      result += 8 * v6;
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 8 * v6);
        ++v8;
        if (v7 == a2)
          goto LABEL_6;
      }
      result += 8 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v16;
  __int16 v17;
  char v18;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v16 = -1640531527;
    v17 = 0;
    v18 = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v16, a2);
    v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v16);
    v6 = a2[1];
    v7 = v5 & v4;
    v8 = (uint64_t *)(v3 + 16 * (v5 & v4));
    v9 = *v8;
    v10 = v8[1];
    if (*v8 == *a2 && v10 == v6)
    {
      return 1;
    }
    else
    {
      v12 = 1;
      do
      {
        v13 = v9 | v10;
        result = v13 != 0;
        if (!v13)
          break;
        v7 = (v7 + v12) & v4;
        v14 = (uint64_t *)(v3 + 16 * v7);
        v9 = *v14;
        v10 = v14[1];
        ++v12;
      }
      while (v9 != *a2 || v10 != v6);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::platformGetMediaStreamDevices(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34D2470;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::platformGetMediaStreamDevices(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34D2470;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::platformGetMediaStreamDevices(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t result, uint64_t **a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v6;
  WebCore::RealtimeMediaSourceCenter *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  void *v20;
  void *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  void *v29;
  _DWORD *v30;
  _DWORD *v31;
  int v32;
  void *v33;
  unsigned int v34;
  WebCore::RealtimeMediaSourceCenter *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  WTF *v42;
  char *v43;
  void *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  int v63;
  WebCore::RealtimeMediaSourceCenter *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  void *v73;
  _DWORD v74[5];
  __int128 v75;
  char v76;
  _DWORD *v77;
  _DWORD *v78;
  __int128 v79;
  void *v80;
  _DWORD v81[5];
  _BYTE v82[22];
  char v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[24];
  _BYTE v87[48];
  __int128 v88;
  __int128 v89;
  char v90[8];
  _DWORD *v91;
  _BYTE v92[40];
  __int128 v93;
  _BYTE v94[22];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 __src;
  __int128 __n_4;
  __int128 v100;
  char v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _OWORD v106[2];

  v2 = result;
  v3 = *(unsigned __int8 *)(result + 8);
  v64 = 0;
  v65 = 0;
  v4 = *((_DWORD *)a2 + 3);
  if (v4)
  {
    if (v4 >= 0x11A7B97)
    {
      __break(0xC471u);
      return result;
    }
    v6 = 232 * v4;
    v7 = (WebCore::RealtimeMediaSourceCenter *)WTF::fastMalloc((WTF *)(232 * v4));
    LODWORD(v65) = (v6 & 0xFFFFFFF8) / 0xE8;
    v64 = v7;
    v8 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v8)
    {
      v9 = *a2;
      v10 = 40 * v8;
      v63 = v3;
      while (1)
      {
        v101 = 0;
        __n_4 = 0u;
        v100 = 0u;
        v97 = 0u;
        __src = 0u;
        v95 = 0u;
        v96 = 0u;
        v102 = 0u;
        v103 = 0u;
        v104 = 0u;
        v105 = 0u;
        memset(v106, 0, 22);
        if (!v3 || (v9[1] & 0xFD) != 1)
          break;
        WebCore::RealtimeMediaSourceCenter::singleton(v7);
        WebCore::RealtimeMediaSourceCenter::getCapabilities();
        if ((_BYTE)v93)
        {
          v95 = v84;
          v96 = v85;
          v97 = *(_OWORD *)v86;
          WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&__src, (uint64_t)&v86[16]);
          __n_4 = *(_OWORD *)&v87[8];
          v100 = *(_OWORD *)&v87[24];
          v101 = v87[40];
          WTF::String::operator=((WTF::StringImpl **)&v102, (WTF::StringImpl *)&v88);
          WTF::String::operator=((WTF::StringImpl **)&v102 + 1, (WTF::StringImpl *)((char *)&v88 + 8));
          v103 = v89;
          WTF::Vector<WebCore::AuthenticatorTransport,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v104, (uint64_t)v90);
          v105 = *(_OWORD *)v92;
          v106[0] = *(_OWORD *)&v92[16];
          *(_QWORD *)((char *)v106 + 14) = *(_QWORD *)&v92[30];
          if ((_BYTE)v93)
            WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v84, v12);
          v13 = (WTF *)HIDWORD(__src);
          goto LABEL_12;
        }
        LOBYTE(v66) = 0;
        v83 = 0;
LABEL_33:
        WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v95, v11);
        if (v83)
        {
          v26 = v66;
          v66 = 0;
          *(_QWORD *)&v84 = v26;
          BYTE8(v84) = v67;
          v27 = v68;
          v68 = 0u;
          v85 = v27;
          *(_OWORD *)&v86[8] = v70;
          *(_OWORD *)v87 = v71;
          *(_OWORD *)&v87[16] = v72;
          v28 = v74[0];
          *(_OWORD *)&v87[32] = 0u;
          *(_DWORD *)v86 = v69;
          *(_DWORD *)&v87[44] = v74[0];
          if (v74[0])
          {
            v29 = (void *)WTF::fastMalloc((WTF *)v74[0]);
            *(_DWORD *)&v87[40] = v28;
            *(_QWORD *)&v87[32] = v29;
            memcpy(v29, v73, v74[0]);
          }
          v88 = *(_OWORD *)&v74[1];
          v89 = v75;
          v90[0] = v76;
          v30 = v77;
          if (v77)
            *v77 += 2;
          v91 = v30;
          v31 = v78;
          if (v78)
            *v78 += 2;
          *(_QWORD *)v92 = v31;
          *(_OWORD *)&v92[8] = v79;
          v32 = v81[0];
          *(_QWORD *)&v92[24] = 0;
          *(_DWORD *)&v92[32] = 0;
          *(_DWORD *)&v92[36] = v81[0];
          if (v81[0])
          {
            v33 = (void *)WTF::fastMalloc((WTF *)v81[0]);
            *(_DWORD *)&v92[32] = v32;
            *(_QWORD *)&v92[24] = v33;
            memcpy(v33, v80, v81[0]);
          }
          v93 = *(_OWORD *)&v81[1];
          *(_OWORD *)v94 = *(_OWORD *)v82;
          *(_QWORD *)&v94[14] = *(_QWORD *)&v82[14];
          v34 = HIDWORD(v65);
          if (HIDWORD(v65) == (_DWORD)v65)
          {
            WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CaptureDeviceWithCapabilities>((uint64_t)&v64, (unint64_t)&v84);
          }
          else
          {
            v35 = v64;
            v36 = (char *)v64 + 232 * HIDWORD(v65);
            v37 = v84;
            *(_QWORD *)&v84 = 0;
            *(_QWORD *)v36 = v37;
            v36[8] = BYTE8(v84);
            v38 = v85;
            *(_QWORD *)&v85 = 0;
            *((_QWORD *)v36 + 2) = v38;
            v39 = *((_QWORD *)&v85 + 1);
            *((_QWORD *)&v85 + 1) = 0;
            *((_QWORD *)v36 + 3) = v39;
            *((_DWORD *)v36 + 8) = *(_DWORD *)v86;
            v40 = *(_OWORD *)&v86[8];
            v41 = *(_OWORD *)v87;
            *(_OWORD *)(v36 + 72) = *(_OWORD *)&v87[16];
            *(_OWORD *)(v36 + 56) = v41;
            *(_OWORD *)(v36 + 40) = v40;
            v42 = (WTF *)*(unsigned int *)&v87[44];
            *((_QWORD *)v36 + 11) = 0;
            *((_QWORD *)v36 + 12) = 0;
            v43 = v36 + 88;
            *((_DWORD *)v43 + 3) = (_DWORD)v42;
            if ((_DWORD)v42)
            {
              v44 = (void *)WTF::fastMalloc(v42);
              *((_DWORD *)v35 + 58 * v34 + 24) = (_DWORD)v42;
              *(_QWORD *)v43 = v44;
              memcpy(v44, *(const void **)&v87[32], *(unsigned int *)&v87[44]);
            }
            v45 = (uint64_t)v35 + 232 * v34;
            v46 = v88;
            v47 = v89;
            *(_BYTE *)(v45 + 136) = v90[0];
            *(_OWORD *)(v45 + 120) = v47;
            *(_OWORD *)(v45 + 104) = v46;
            v48 = v91;
            if (v91)
              *v91 += 2;
            *(_QWORD *)(v45 + 144) = v48;
            v49 = *(_QWORD *)v92;
            if (*(_QWORD *)v92)
              **(_DWORD **)v92 += 2;
            *((_QWORD *)v35 + 29 * v34 + 19) = v49;
            v50 = (uint64_t)v35 + 232 * v34;
            *(_OWORD *)(v50 + 160) = *(_OWORD *)&v92[8];
            v51 = (WTF *)*(unsigned int *)&v92[36];
            *(_QWORD *)(v50 + 176) = 0;
            *(_QWORD *)(v50 + 184) = 0;
            v52 = v50 + 176;
            *(_DWORD *)(v52 + 12) = (_DWORD)v51;
            if ((_DWORD)v51)
            {
              v53 = (void *)WTF::fastMalloc(v51);
              *((_DWORD *)v35 + 58 * v34 + 46) = (_DWORD)v51;
              *(_QWORD *)v52 = v53;
              memcpy(v53, *(const void **)&v92[24], *(unsigned int *)&v92[36]);
            }
            v54 = (uint64_t)v35 + 232 * v34;
            v56 = v93;
            v55 = *(_OWORD *)v94;
            *(_QWORD *)(v54 + 222) = *(_QWORD *)&v94[14];
            *(_OWORD *)(v54 + 192) = v56;
            *(_OWORD *)(v54 + 208) = v55;
            ++HIDWORD(v65);
            v3 = v63;
          }
          WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v86[8], v25);
          v57 = (WTF::StringImpl *)*((_QWORD *)&v85 + 1);
          *((_QWORD *)&v85 + 1) = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v25);
            else
              *(_DWORD *)v57 -= 2;
          }
          v58 = (WTF::StringImpl *)v85;
          *(_QWORD *)&v85 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v25);
            else
              *(_DWORD *)v58 -= 2;
          }
          v59 = (WTF::StringImpl *)v84;
          *(_QWORD *)&v84 = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v25);
            else
              *(_DWORD *)v59 -= 2;
          }
        }
        v7 = (WebCore::RealtimeMediaSourceCenter *)std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v66, v25);
        v9 += 5;
        v10 -= 40;
        if (!v10)
        {
          v60 = HIDWORD(v65);
          goto LABEL_68;
        }
      }
      v13 = 0;
LABEL_12:
      v14 = *v9;
      *v9 = 0;
      *(_QWORD *)&v84 = v14;
      BYTE8(v84) = *((_BYTE *)v9 + 8);
      v15 = *((_OWORD *)v9 + 1);
      *((_OWORD *)v9 + 1) = 0u;
      v85 = v15;
      LODWORD(v14) = *((_DWORD *)v9 + 8);
      *(_OWORD *)&v86[8] = v95;
      *(_OWORD *)v87 = v96;
      *(_OWORD *)&v87[16] = v97;
      *(_OWORD *)&v87[32] = 0u;
      *(_DWORD *)v86 = v14;
      *(_DWORD *)&v87[44] = (_DWORD)v13;
      if (v13)
      {
        v16 = (void *)WTF::fastMalloc(v13);
        *(_DWORD *)&v87[40] = (_DWORD)v13;
        *(_QWORD *)&v87[32] = v16;
        memcpy(v16, (const void *)__src, HIDWORD(__src));
      }
      v88 = __n_4;
      v89 = v100;
      v90[0] = v101;
      v17 = (_DWORD *)v102;
      if ((_QWORD)v102)
        *(_DWORD *)v102 += 2;
      v91 = v17;
      v18 = *((_QWORD *)&v102 + 1);
      if (*((_QWORD *)&v102 + 1))
        **((_DWORD **)&v102 + 1) += 2;
      *(_QWORD *)v92 = v18;
      *(_OWORD *)&v92[8] = v103;
      v19 = HIDWORD(v104);
      *(_QWORD *)&v92[24] = 0;
      *(_DWORD *)&v92[32] = 0;
      *(_DWORD *)&v92[36] = HIDWORD(v104);
      if (HIDWORD(v104))
      {
        v20 = (void *)WTF::fastMalloc((WTF *)HIDWORD(v104));
        *(_DWORD *)&v92[32] = v19;
        *(_QWORD *)&v92[24] = v20;
        memcpy(v20, (const void *)v104, HIDWORD(v104));
      }
      v93 = v105;
      *(_OWORD *)v94 = v106[0];
      *(_QWORD *)&v94[14] = *(_QWORD *)((char *)v106 + 14);
      std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::__optional_destruct_base[abi:sn180100]<WebCore::CaptureDeviceWithCapabilities>((uint64_t)&v66, (uint64_t *)&v84);
      WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v86[8], v21);
      v22 = (WTF::StringImpl *)*((_QWORD *)&v85 + 1);
      *((_QWORD *)&v85 + 1) = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = (WTF::StringImpl *)v85;
      *(_QWORD *)&v85 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = (WTF::StringImpl *)v84;
      *(_QWORD *)&v84 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v24 -= 2;
      }
      goto LABEL_33;
    }
  }
  v60 = 0;
LABEL_68:
  WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v64, v60);
  v61 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  (*(void (**)(uint64_t, WebCore::RealtimeMediaSourceCenter **))(*(_QWORD *)v61 + 16))(v61, &v64);
  (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  return WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v62);
}

uint64_t WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CaptureDeviceWithCapabilities>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  WTF *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v3 = WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 232 * v4;
  v7 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v6 = v7;
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(v3 + 8);
  v8 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v6 + 16) = v8;
  v9 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v6 + 24) = v9;
  *(_DWORD *)(v6 + 32) = *(_DWORD *)(v3 + 32);
  v10 = *(_OWORD *)(v3 + 56);
  v11 = *(_OWORD *)(v3 + 72);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(v6 + 72) = v11;
  *(_OWORD *)(v6 + 56) = v10;
  v12 = (WTF *)*(unsigned int *)(v3 + 100);
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  v13 = v6 + 88;
  *(_DWORD *)(v13 + 12) = (_DWORD)v12;
  if ((_DWORD)v12)
  {
    v14 = (void *)WTF::fastMalloc(v12);
    *(_DWORD *)(v5 + 232 * v4 + 96) = (_DWORD)v12;
    *(_QWORD *)v13 = v14;
    memcpy(v14, *(const void **)(v3 + 88), *(unsigned int *)(v3 + 100));
  }
  v15 = v5 + 232 * v4;
  v16 = *(_OWORD *)(v3 + 104);
  v17 = *(_OWORD *)(v3 + 120);
  *(_BYTE *)(v15 + 136) = *(_BYTE *)(v3 + 136);
  *(_OWORD *)(v15 + 120) = v17;
  *(_OWORD *)(v15 + 104) = v16;
  v18 = (_QWORD *)(v15 + 144);
  v19 = *(_DWORD **)(v3 + 144);
  if (v19)
    *v19 += 2;
  *v18 = v19;
  v20 = *(_DWORD **)(v3 + 152);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(v5 + 232 * v4 + 152) = v20;
  v21 = v5 + 232 * v4;
  *(_OWORD *)(v21 + 160) = *(_OWORD *)(v3 + 160);
  v22 = (WTF *)*(unsigned int *)(v3 + 188);
  *(_QWORD *)(v21 + 176) = 0;
  *(_QWORD *)(v21 + 184) = 0;
  v23 = v21 + 176;
  *(_DWORD *)(v23 + 12) = (_DWORD)v22;
  if ((_DWORD)v22)
  {
    v24 = (void *)WTF::fastMalloc(v22);
    *(_DWORD *)(v5 + 232 * v4 + 184) = (_DWORD)v22;
    *(_QWORD *)v23 = v24;
    memcpy(v24, *(const void **)(v3 + 176), *(unsigned int *)(v3 + 188));
  }
  v25 = v5 + 232 * v4;
  v26 = *(_OWORD *)(v3 + 192);
  v27 = *(_OWORD *)(v3 + 208);
  *(_QWORD *)(v25 + 222) = *(_QWORD *)(v3 + 222);
  *(_OWORD *)(v25 + 192) = v26;
  *(_OWORD *)(v25 + 208) = v27;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 232 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x11A7B97)
    {
      __break(0xC471u);
      JUMPOUT(0x1973080A4);
    }
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 232 * *(unsigned int *)(a1 + 12));
    v5 = 232 * a2;
    v6 = WTF::fastMalloc((WTF *)(232 * a2));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0xE8;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::CaptureDeviceWithCapabilities>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::CaptureDeviceWithCapabilities>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  WTF *v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  _DWORD *v19;
  char *v20;
  _DWORD *v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = (char *)v5 + v6;
      v8 = a3 + v6;
      v9 = *(_QWORD *)((char *)v5 + v6);
      *(_QWORD *)v7 = 0;
      *(_QWORD *)v8 = v9;
      *(_BYTE *)(v8 + 8) = *((_BYTE *)v5 + v6 + 8);
      v10 = *(_QWORD *)((char *)v5 + v6 + 16);
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)(v8 + 16) = v10;
      v11 = *(_QWORD *)((char *)v5 + v6 + 24);
      *((_QWORD *)v7 + 3) = 0;
      *(_QWORD *)(v8 + 24) = v11;
      *(_DWORD *)(v8 + 32) = *(_DWORD *)((char *)v5 + v6 + 32);
      v12 = *(_OWORD *)((char *)v5 + v6 + 40);
      v13 = *(_OWORD *)((char *)v5 + v6 + 56);
      *(_OWORD *)(v8 + 72) = *(_OWORD *)((char *)v5 + v6 + 72);
      *(_OWORD *)(v8 + 56) = v13;
      *(_OWORD *)(v8 + 40) = v12;
      v14 = (WTF *)*(unsigned int *)((char *)v5 + v6 + 100);
      v15 = a3 + v6;
      *(_QWORD *)(v15 + 88) = 0;
      *(_QWORD *)(v15 + 96) = 0;
      *(_DWORD *)(a3 + v6 + 100) = (_DWORD)v14;
      if ((_DWORD)v14)
      {
        v16 = (void *)WTF::fastMalloc(v14);
        *(_DWORD *)(v8 + 96) = (_DWORD)v14;
        *(_QWORD *)(a3 + v6 + 88) = v16;
        memcpy(v16, *((const void **)v7 + 11), *((unsigned int *)v7 + 25));
      }
      v17 = *(_OWORD *)(v7 + 104);
      v18 = *(_OWORD *)(v7 + 120);
      *(_BYTE *)(v8 + 136) = v7[136];
      *(_OWORD *)(v8 + 120) = v18;
      *(_OWORD *)(v8 + 104) = v17;
      v19 = (_DWORD *)*((_QWORD *)v7 + 18);
      if (v19)
        *v19 += 2;
      *(_QWORD *)(v8 + 144) = v19;
      v20 = (char *)v5 + v6;
      v21 = *(_DWORD **)((char *)v5 + v6 + 152);
      if (v21)
        *v21 += 2;
      v22 = a3 + v6;
      *(_QWORD *)(v22 + 152) = v21;
      *(_OWORD *)(v22 + 160) = *((_OWORD *)v20 + 10);
      v23 = (WTF *)*((unsigned int *)v20 + 47);
      *(_QWORD *)(v22 + 176) = 0;
      *(_QWORD *)(v22 + 184) = 0;
      *(_DWORD *)(a3 + v6 + 188) = (_DWORD)v23;
      if ((_DWORD)v23)
      {
        v24 = (void *)WTF::fastMalloc(v23);
        *(_DWORD *)(a3 + v6 + 184) = (_DWORD)v23;
        *(_QWORD *)(a3 + v6 + 176) = v24;
        memcpy(v24, *(const void **)((char *)v5 + v6 + 176), *((unsigned int *)v20 + 47));
      }
      v25 = a3 + v6;
      v26 = *(_OWORD *)((char *)v5 + v6 + 192);
      v27 = *(_OWORD *)((char *)v5 + v6 + 208);
      *(_QWORD *)(v25 + 222) = *(_QWORD *)((char *)v5 + v6 + 222);
      *(_OWORD *)(v25 + 192) = v26;
      *(_OWORD *)(v25 + 208) = v27;
      WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)(v7 + 40), a2);
      v28 = (WTF::StringImpl *)*((_QWORD *)v7 + 3);
      *((_QWORD *)v7 + 3) = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, a2);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = (WTF::StringImpl *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, a2);
        else
          *(_DWORD *)v29 -= 2;
      }
      result = *(WTF::StringImpl **)((char *)v5 + v6);
      *(_QWORD *)((char *)v5 + v6) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v6 += 232;
    }
    while ((WTF::StringImpl *)((char *)v5 + v6) != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::CaptureDeviceWithCapabilities,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 232))
  {
    WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)(a1 + 40), a2);
    v4 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      result = (uint64_t)WTF::VectorDestructor<true,WebCore::CaptureDeviceWithCapabilities>::destruct((WTF::StringImpl *)(*(_QWORD *)result + 232 * a2), (WTF::StringImpl *)(*(_QWORD *)result + 232 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >= 0x11A7B97)
      {
        __break(0xC471u);
        JUMPOUT(0x19730842CLL);
      }
      v6 = (WTF *)(232 * a2);
      result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFF8) / 0xE8;
      *(_QWORD *)v3 = result;
      if ((WTF::StringImpl *)result != v5)
        result = (uint64_t)WTF::VectorMover<false,WebCore::CaptureDeviceWithCapabilities>::move(v5, (WTF::StringImpl *)((char *)v5 + 232 * v4), result);
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::CaptureDeviceWithCapabilities>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)(v3 + 5), a2);
      v4 = v3[3];
      v3[3] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = v3[2];
      v3[2] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 29;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorDestructor<true,WebCore::CaptureDeviceWithCapabilities>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 232 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::computeFilteredDeviceList(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34D2498;
  v3 = a1[8];
  a1[8] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::computeFilteredDeviceList(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34D2498;
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::computeFilteredDeviceList(BOOL,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void,WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(_QWORD *a1, _DWORD *a2, const WTF::StringImpl *a3)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  const WTF::StringImpl **v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  __int128 v30;
  __int128 v31;
  WTF *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WebKit::WebPageProxy *v51;
  WTF::String *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  int v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  int v68;
  int v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  char *v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint8_t *v81;
  WTF::StringImpl *v82;
  char *v83;
  WTF *v84;
  char *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  NSObject *v96;
  WTF *v97;
  void *v98;
  char *v99;
  unsigned __int8 *v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  void *v107;
  uint64_t i;
  WTF::StringImpl *v109;
  int v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  int v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  int v120;
  WTF::String *v121;
  WTF::Logger::LogSiteIdentifier *v122;
  WTF::Logger::LogSiteIdentifier *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  WTF *v127[2];
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  _BYTE v137[4];
  unsigned int v138;
  WTF::StringImpl *v139;
  uint8_t buf[16];
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  int v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 __src;
  __int128 __n_4;
  __int128 v149;
  _QWORD v150[15];

  v3 = a1;
  v150[13] = *MEMORY[0x1E0C80C00];
  v4 = a1[6];
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v122 = (WTF::Logger::LogSiteIdentifier *)a1[5];
    v125 = 0;
    v126 = 0;
    v6 = a2[3];
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v124 = 0;
      v120 = 0;
      v9 = *(_QWORD *)a2;
      v10 = *(_QWORD *)a2 + 232 * v6;
      do
      {
        if (!*(_BYTE *)(v9 + 32))
          goto LABEL_58;
        v11 = *(unsigned __int8 *)(v9 + 8);
        if ((v11 - 1) > 2)
          goto LABEL_58;
        v12 = v8 | (v11 == 3);
        v13 = v7 | (v11 == 1);
        if (*((_BYTE *)v3 + 56))
        {
          if (v11 == 2)
          {
            v15 = (const WTF::StringImpl **)(v9 + 24);
            v14 = *(_QWORD *)(v9 + 24);
            if (!v14 || !*(_DWORD *)(v14 + 4))
              v15 = (const WTF::StringImpl **)v9;
            v16 = a2[3];
            if (!v16)
              goto LABEL_57;
            v17 = v8 | (v11 == 3);
            v18 = *(_QWORD *)a2;
            v19 = *(_QWORD *)a2 + 232 * v16;
            while (!WTF::equal(*(WTF **)v18, *v15, a3) || *(_BYTE *)(v18 + 8) != 1)
            {
              v18 += 232;
              if (v18 == v19)
              {
                v7 = v13;
                v8 = v17;
                goto LABEL_58;
              }
            }
            v22 = v126;
            v23 = HIDWORD(v126);
            if (!*((_BYTE *)v3 + 56))
            {
              LOBYTE(v11) = *(_BYTE *)(v9 + 8);
              v12 = v17;
              goto LABEL_34;
            }
            v12 = v17;
          }
          else
          {
            v22 = v126;
            v23 = HIDWORD(v126);
          }
          if (v23 == v22)
          {
            v24 = WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v125, v22 + 1, v9);
            v25 = v125 + 232 * HIDWORD(v126);
          }
          else
          {
            v25 = v125 + 232 * v23;
            v24 = v9;
          }
          WebCore::CaptureDeviceWithCapabilities::CaptureDeviceWithCapabilities(v25, v24);
          ++HIDWORD(v126);
        }
        else
        {
          if (v11 == 3)
          {
            v21 = ++v124;
          }
          else
          {
            if (v11 != 1)
              goto LABEL_57;
            v21 = ++v120;
          }
          if (v21 <= 1)
          {
            v22 = v126;
            v23 = HIDWORD(v126);
LABEL_34:
            *(_QWORD *)buf = 0;
            buf[8] = v11;
            v141 = 0;
            v142 = 0;
            v143 = 0;
            v144 = 0u;
            v145 = 0u;
            v146 = 0u;
            __src = 0u;
            __n_4 = 0u;
            v149 = 0u;
            memset(v150, 0, 96);
            if (v23 == v22)
            {
              WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CaptureDeviceWithCapabilities>((uint64_t)&v125, (unint64_t)buf);
            }
            else
            {
              v115 = v12;
              v26 = v125;
              v27 = v125 + 232 * v23;
              *(_QWORD *)v27 = 0;
              *(_BYTE *)(v27 + 8) = v11;
              v28 = v141;
              v141 = 0;
              *(_QWORD *)(v27 + 16) = v28;
              v29 = v142;
              v142 = 0;
              *(_QWORD *)(v27 + 24) = v29;
              *(_DWORD *)(v27 + 32) = v143;
              v30 = v144;
              v31 = v145;
              *(_OWORD *)(v27 + 72) = v146;
              *(_OWORD *)(v27 + 56) = v31;
              *(_OWORD *)(v27 + 40) = v30;
              v32 = (WTF *)HIDWORD(__src);
              *(_QWORD *)(v27 + 88) = 0;
              *(_QWORD *)(v27 + 96) = 0;
              v33 = v27 + 88;
              *(_DWORD *)(v33 + 12) = (_DWORD)v32;
              if ((_DWORD)v32)
              {
                v34 = (void *)WTF::fastMalloc(v32);
                *(_DWORD *)(v26 + 232 * v23 + 96) = (_DWORD)v32;
                *(_QWORD *)v33 = v34;
                memcpy(v34, (const void *)__src, HIDWORD(__src));
              }
              v35 = v26 + 232 * v23;
              v36 = __n_4;
              v37 = v149;
              *(_BYTE *)(v35 + 136) = v150[0];
              *(_OWORD *)(v35 + 120) = v37;
              *(_OWORD *)(v35 + 104) = v36;
              v38 = v150[1];
              if (v150[1])
                *(_DWORD *)v150[1] += 2;
              *(_QWORD *)(v35 + 144) = v38;
              v39 = v150[2];
              if (v150[2])
                *(_DWORD *)v150[2] += 2;
              *(_QWORD *)(v26 + 232 * v23 + 152) = v39;
              v40 = v26 + 232 * v23;
              *(_OWORD *)(v40 + 160) = *(_OWORD *)&v150[3];
              v41 = (WTF *)HIDWORD(v150[6]);
              *(_QWORD *)(v40 + 176) = 0;
              *(_QWORD *)(v40 + 184) = 0;
              v42 = v40 + 176;
              *(_DWORD *)(v42 + 12) = (_DWORD)v41;
              if ((_DWORD)v41)
              {
                v43 = (void *)WTF::fastMalloc(v41);
                *(_DWORD *)(v26 + 232 * v23 + 184) = (_DWORD)v41;
                *(_QWORD *)v42 = v43;
                memcpy(v43, (const void *)v150[5], HIDWORD(v150[6]));
              }
              v44 = v26 + 232 * v23;
              v46 = *(_OWORD *)&v150[7];
              v45 = *(_OWORD *)&v150[9];
              *(_QWORD *)(v44 + 222) = *(_QWORD *)((char *)&v150[10] + 6);
              *(_OWORD *)(v44 + 192) = v46;
              *(_OWORD *)(v44 + 208) = v45;
              ++HIDWORD(v126);
              v3 = a1;
              v12 = v115;
            }
            WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v144, a2);
            v47 = v142;
            v142 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
                WTF::StringImpl::destroy(v47, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v47 -= 2;
            }
            v48 = v141;
            v141 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2)
                WTF::StringImpl::destroy(v48, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v48 -= 2;
            }
            v49 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v49)
            {
              if (*(_DWORD *)v49 == 2)
                WTF::StringImpl::destroy(v49, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v49 -= 2;
            }
          }
        }
LABEL_57:
        v7 = v13;
        v8 = v12;
LABEL_58:
        v9 += 232;
      }
      while (v9 != v10);
    }
    *((_BYTE *)v122 + 256) = *((_BYTE *)v3 + 56) ^ 1;
    v50 = *(_QWORD *)(*((_QWORD *)v122 + 8) + 8);
    if (v50)
      v51 = (WebKit::WebPageProxy *)(v50 - 16);
    else
      v51 = 0;
    if (!*(_BYTE *)(WebKit::WebPageProxy::logger(v51) + 12))
      goto LABEL_203;
    v52 = (WTF::String *)HIDWORD(v126);
    v123 = (WTF::Logger::LogSiteIdentifier *)(v3 + 1);
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(v3 + 1));
    v121 = v52;
    WTF::String::number(v52);
    WTF::String::String((WTF::String *)&v134, " devices revealed, has filtering = ");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v133);
    WTF::String::String((WTF::String *)&v132, " has camera = ");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v131);
    WTF::String::String((WTF::String *)&v130, ", has microphone = ");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v129);
    WTF::String::String((WTF::String *)&v128, " ");
    v53 = v135;
    v54 = v136;
    v55 = v134;
    if (v136)
      v56 = *((_DWORD *)v136 + 1);
    else
      v56 = 0;
    v57 = v133;
    if (v135)
      v58 = *((_DWORD *)v135 + 1);
    else
      v58 = 0;
    v59 = v132;
    if (v134)
      v60 = *((unsigned int *)v134 + 1);
    else
      v60 = 0;
    v61 = v131;
    if (v133)
      v62 = *((_DWORD *)v133 + 1);
    else
      v62 = 0;
    v63 = v130;
    if (v132)
      v64 = *((_DWORD *)v132 + 1);
    else
      v64 = 0;
    if (v131)
      v65 = *((_DWORD *)v131 + 1);
    else
      v65 = 0;
    v66 = v128;
    if (v130)
    {
      v67 = *((_DWORD *)v130 + 1);
      if (v129)
      {
LABEL_77:
        v68 = *((_DWORD *)v129 + 1);
        goto LABEL_78;
      }
    }
    else
    {
      v67 = 0;
      if (v129)
        goto LABEL_77;
    }
    v68 = 0;
LABEL_78:
    v118 = v129;
    if (v128)
      v69 = *((_DWORD *)v128 + 1);
    else
      v69 = 0;
    WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(v56, v58, v60, v62, v64, v65, v67, v68, (uint64_t)v137, v69);
    if (v137[0])
      goto LABEL_132;
    if (v54 && (*((_BYTE *)v54 + 16) & 4) == 0
      || v53 && (*((_BYTE *)v53 + 16) & 4) == 0
      || v55 && (*((_BYTE *)v55 + 16) & 4) == 0
      || v57 && (*((_BYTE *)v57 + 16) & 4) == 0
      || v59 && (*((_BYTE *)v59 + 16) & 4) == 0
      || v61 && (*((_BYTE *)v61 + 16) & 4) == 0
      || v63 && (*((_BYTE *)v63 + 16) & 4) == 0
      || v118 && (*((_BYTE *)v118 + 16) & 4) == 0)
    {
      v71 = v138;
      goto LABEL_98;
    }
    if (v66)
    {
      v71 = v138;
      if ((*((_BYTE *)v66 + 16) & 4) == 0)
      {
LABEL_98:
        if ((_DWORD)v71)
        {
          if (v71 <= 0x7FFFFFEF)
          {
            WTF::tryFastCompactMalloc((WTF *)(2 * v71 + 20));
            v72 = *(_QWORD *)buf;
            if (*(_QWORD *)buf)
            {
              v117 = (uint64_t)v66;
              v73 = (uint64_t)v63;
              **(_DWORD **)buf = 2;
              *(_DWORD *)(v72 + 4) = v71;
              *(_QWORD *)(v72 + 8) = v72 + 20;
              *(_DWORD *)(v72 + 16) = 0;
              v139 = v54;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v139, (char *)(v72 + 20));
              v74 = v139;
              if (v139)
                v74 = (WTF::StringImpl *)*((unsigned int *)v139 + 1);
              v3 = a1;
              v75 = (char *)(v72 + 20 + 2 * (_QWORD)v74);
              v127[0] = v53;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)v127, v75);
              v76 = (unint64_t)v127[0];
              if (v127[0])
                v76 = *((unsigned int *)v127[0] + 1);
              v77 = &v75[2 * v76];
              *(_QWORD *)buf = v55;
              WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)buf, v77);
              v78 = *(_QWORD *)buf;
              if (*(_QWORD *)buf)
                v78 = *(unsigned int *)(*(_QWORD *)buf + 4);
              WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v77[2 * v78], (uint64_t)v57, (uint64_t)v59, (uint64_t)v61, v73, (uint64_t)v118, v117);
              goto LABEL_134;
            }
          }
LABEL_132:
          __break(0xC471u);
          JUMPOUT(0x197308E0CLL);
        }
LABEL_133:
        v72 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        v3 = a1;
LABEL_134:
        v139 = (WTF::StringImpl *)v72;
        v87 = v128;
        v128 = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
            WTF::StringImpl::destroy(v87, v70);
          else
            *(_DWORD *)v87 -= 2;
        }
        v88 = v129;
        v129 = 0;
        if (v88)
        {
          if (*(_DWORD *)v88 == 2)
            WTF::StringImpl::destroy(v88, v70);
          else
            *(_DWORD *)v88 -= 2;
        }
        v89 = v130;
        v130 = 0;
        if (v89)
        {
          if (*(_DWORD *)v89 == 2)
            WTF::StringImpl::destroy(v89, v70);
          else
            *(_DWORD *)v89 -= 2;
        }
        v90 = v131;
        v131 = 0;
        if (v90)
        {
          if (*(_DWORD *)v90 == 2)
            WTF::StringImpl::destroy(v90, v70);
          else
            *(_DWORD *)v90 -= 2;
        }
        v91 = v132;
        v132 = 0;
        if (v91)
        {
          if (*(_DWORD *)v91 == 2)
            WTF::StringImpl::destroy(v91, v70);
          else
            *(_DWORD *)v91 -= 2;
        }
        v92 = v133;
        v133 = 0;
        if (v92)
        {
          if (*(_DWORD *)v92 == 2)
            WTF::StringImpl::destroy(v92, v70);
          else
            *(_DWORD *)v92 -= 2;
        }
        v93 = v134;
        v134 = 0;
        if (v93)
        {
          if (*(_DWORD *)v93 == 2)
            WTF::StringImpl::destroy(v93, v70);
          else
            *(_DWORD *)v93 -= 2;
        }
        v94 = v135;
        v135 = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 2)
            WTF::StringImpl::destroy(v94, v70);
          else
            *(_DWORD *)v94 -= 2;
        }
        v95 = v136;
        v136 = 0;
        if (v95)
        {
          if (*(_DWORD *)v95 == 2)
            WTF::StringImpl::destroy(v95, v70);
          else
            *(_DWORD *)v95 -= 2;
        }
        v96 = qword_1ECE71B18;
        v97 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v97)
        {
          WTF::String::utf8();
          v99 = v127[0] ? (char *)v127[0] + 16 : 0;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v99;
          _os_log_impl(&dword_196BCC000, v96, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          v97 = v127[0];
          v127[0] = 0;
          if (v97)
          {
            if (*(_DWORD *)v97 == 1)
              v97 = (WTF *)WTF::fastFree(v97, v98);
            else
              --*(_DWORD *)v97;
          }
        }
        if (WebKit2LogWebRTC)
        {
          v100 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v101 = *v100;
            if ((v101 & 1) != 0)
              break;
            v102 = __ldaxr(v100);
            if (v102 == v101)
            {
              if (!__stxr(v101 | 1, v100))
              {
                v103 = WTF::Logger::observers(v97);
                v104 = *(unsigned int *)(v103 + 12);
                if ((_DWORD)v104)
                {
                  v105 = *(uint64_t **)v103;
                  v119 = *(_QWORD *)v103 + 8 * v104;
                  do
                  {
                    v106 = *v105;
                    *(_DWORD *)buf = 0;
                    WTF::Logger::LogSiteIdentifier::toString(v123);
                    LODWORD(v141) = 0;
                    WTF::String::number(v121);
                    v143 = 0;
                    WTF::String::String((WTF::String *)&v144, " devices revealed, has filtering = ");
                    DWORD2(v144) = 0;
                    WTF::LogArgument<BOOL>::toString<BOOL>(&v145);
                    DWORD2(v145) = 0;
                    WTF::String::String((WTF::String *)&v146, " has camera = ");
                    DWORD2(v146) = 0;
                    WTF::LogArgument<BOOL>::toString<BOOL>(&__src);
                    DWORD2(__src) = 0;
                    WTF::String::String((WTF::String *)&__n_4, ", has microphone = ");
                    DWORD2(__n_4) = 0;
                    WTF::LogArgument<BOOL>::toString<BOOL>(&v149);
                    DWORD2(v149) = 0;
                    WTF::String::String((WTF::String *)v150, " ");
                    WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v127, (uint64_t)buf, 9uLL);
                    (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v106 + 16))(v106, &WebKit2LogWebRTC, 0, v127);
                    WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v127, v107);
                    for (i = 136; i != -8; i -= 16)
                    {
                      v109 = *(WTF::StringImpl **)&buf[i];
                      *(_QWORD *)&buf[i] = 0;
                      if (v109)
                      {
                        if (*(_DWORD *)v109 == 2)
                          WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v98);
                        else
                          *(_DWORD *)v109 -= 2;
                      }
                    }
                    ++v105;
                  }
                  while (v105 != (uint64_t *)v119);
                }
                v110 = __ldxr(v100);
                if (v110 == 1)
                {
                  v3 = a1;
                  if (!__stlxr(0, v100))
                    break;
                }
                else
                {
                  __clrex();
                  v3 = a1;
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v111 = v139;
        v139 = 0;
        if (v111)
        {
          if (*(_DWORD *)v111 == 2)
            WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v98);
          else
            *(_DWORD *)v111 -= 2;
        }
LABEL_203:
        v112 = v3[8];
        v3[8] = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v112 + 16))(v112, &v125);
        (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
        v81 = (uint8_t *)&v125;
        return WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v81, v80);
      }
      if (!v138)
        goto LABEL_133;
      if ((v138 & 0x80000000) != 0)
        goto LABEL_132;
    }
    else
    {
      v71 = v138;
      if (!v138)
        goto LABEL_133;
      v66 = 0;
      if ((v138 & 0x80000000) != 0)
        goto LABEL_132;
    }
    WTF::tryFastCompactMalloc((WTF *)(v71 + 20));
    v72 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      v116 = (uint64_t)v63;
      **(_DWORD **)buf = 2;
      *(_DWORD *)(v72 + 4) = v71;
      *(_QWORD *)(v72 + 8) = v72 + 20;
      *(_DWORD *)(v72 + 16) = 4;
      v139 = v54;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v139, (char *)(v72 + 20));
      v82 = v139;
      if (v139)
        v82 = (WTF::StringImpl *)*((unsigned int *)v139 + 1);
      v3 = a1;
      v83 = (char *)v82 + v72 + 20;
      v127[0] = v53;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)v127, v83);
      v84 = v127[0];
      if (v127[0])
        v84 = (WTF *)*((unsigned int *)v127[0] + 1);
      v85 = (char *)v84 + (_QWORD)v83;
      *(_QWORD *)buf = v55;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)buf, v85);
      v86 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
        v86 = *(unsigned int *)(*(_QWORD *)buf + 4);
      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v85[v86], (uint64_t)v57, (uint64_t)v59, (uint64_t)v61, v116, (uint64_t)v118, (uint64_t)v66);
      goto LABEL_134;
    }
    goto LABEL_132;
  }
  *(_OWORD *)buf = 0uLL;
  v79 = a1[8];
  a1[8] = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v79 + 16))(v79, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v81 = buf;
  return WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v81, v80);
}

uint64_t WebCore::CaptureDeviceWithCapabilities::CaptureDeviceWithCapabilities(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  __int128 v7;
  __int128 v8;
  WTF *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  _DWORD *v13;
  _DWORD *v14;
  WTF *v15;
  void *v16;
  __int128 v17;
  __int128 v18;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = *(_DWORD **)(a2 + 16);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_DWORD **)(a2 + 24);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 40);
  v8 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  v9 = (WTF *)*(unsigned int *)(a2 + 100);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = (_DWORD)v9;
  if ((_DWORD)v9)
  {
    v10 = (void *)WTF::fastMalloc(v9);
    *(_DWORD *)(a1 + 96) = (_DWORD)v9;
    *(_QWORD *)(a1 + 88) = v10;
    memcpy(v10, *(const void **)(a2 + 88), *(unsigned int *)(a2 + 100));
  }
  v11 = *(_OWORD *)(a2 + 104);
  v12 = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v12;
  *(_OWORD *)(a1 + 104) = v11;
  v13 = *(_DWORD **)(a2 + 144);
  if (v13)
    *v13 += 2;
  *(_QWORD *)(a1 + 144) = v13;
  v14 = *(_DWORD **)(a2 + 152);
  if (v14)
    *v14 += 2;
  *(_QWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  v15 = (WTF *)*(unsigned int *)(a2 + 188);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = (_DWORD)v15;
  if ((_DWORD)v15)
  {
    v16 = (void *)WTF::fastMalloc(v15);
    *(_DWORD *)(a1 + 184) = (_DWORD)v15;
    *(_QWORD *)(a1 + 176) = v16;
    memcpy(v16, *(const void **)(a2 + 176), *(unsigned int *)(a2 + 188));
  }
  v17 = *(_OWORD *)(a2 + 192);
  v18 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 222) = *(_QWORD *)(a2 + 222);
  *(_OWORD *)(a1 + 192) = v17;
  *(_OWORD *)(a1 + 208) = v18;
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MediaDeviceHashSalts &&)> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E34D24C0;
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[5];
  a1[5] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = a1[4];
  a1[4] = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MediaDeviceHashSalts &&)> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D24C0;
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MediaDeviceHashSalts &&)> &&)::$_0,void,WebKit::UserMediaPermissionCheckProxy::PermissionInfo>::call(uint64_t a1, int a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];
  WTF::StringImpl *IdentifierInternal;
  WTF::StringImpl *v30;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = a2 == 2;
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 8);
    if (v5)
      v6 = v5 - 16;
    else
      v6 = 0;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    if (*(_BYTE *)(v6 + 729) || !*(_BYTE *)(v6 + 728))
    {
      v7 = 0;
      if (!v5)
        goto LABEL_8;
    }
    else
    {
      IdentifierInternal = (WTF::StringImpl *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v28, (uint64_t *)(v3 + 56), (uint64_t *)&IdentifierInternal);
      v11 = (unsigned int *)WebKit::WebsiteDataStore::ensureDeviceIdHashSaltStorage(*(WebKit::WebsiteDataStore **)(v6 + 264));
      v12 = v11;
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 + 1, v11));
      v25 = *(_QWORD *)(a1 + 40);
      v26 = *(_QWORD *)(a1 + 32);
      WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v3 + 8), v3);
      v14 = *(unsigned int **)(v3 + 8);
      if (v14)
      {
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
      v16 = IdentifierInternal;
      *(_OWORD *)v28 = *(_OWORD *)(a1 + 16);
      v17 = *(unsigned int **)(a1 + 32);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      v19 = *(unsigned int **)(a1 + 40);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
      v21 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      v22 = WTF::fastMalloc((WTF *)0x50);
      *(_QWORD *)v22 = &off_1E34D24E8;
      *(_QWORD *)(v22 + 8) = v3;
      *(_QWORD *)(v22 + 16) = v14;
      *(_QWORD *)(v22 + 24) = v16;
      *(_OWORD *)(v22 + 32) = *(_OWORD *)v28;
      *(_QWORD *)(v22 + 48) = v17;
      *(_QWORD *)(v22 + 56) = v19;
      *(_BYTE *)(v22 + 64) = v4;
      *(_QWORD *)(v22 + 72) = v21;
      v27 = v22;
      WebKit::DeviceIdHashSaltStorage::deviceIdHashSaltForOrigin((uint64_t)v12, v26, v25, &v27);
      v23 = v27;
      v27 = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      WTF::ThreadSafeRefCounted<WebKit::DeviceIdHashSaltStorage,(WTF::DestructionThread)2>::deref(v12);
      v7 = 1;
      if (!v5)
      {
LABEL_8:
        if ((v7 & 1) != 0)
          return;
        goto LABEL_9;
      }
    }
    CFRelease(*(CFTypeRef *)(v5 - 8));
    goto LABEL_8;
  }
LABEL_9:
  *(_OWORD *)v28 = 0uLL;
  IdentifierInternal = 0;
  v30 = 0;
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v8 + 16))(v8, v28, &IdentifierInternal);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v10 = v30;
  v30 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v24 = IdentifierInternal;
  IdentifierInternal = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v9);
    else
      *(_DWORD *)v24 -= 2;
  }
  WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v9);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MediaDeviceHashSalts &&)> &&)::$_0::operator()(WebKit::UserMediaPermissionCheckProxy::PermissionInfo)::{lambda(WTF::String &&)#1},void,WebKit::UserMediaPermissionCheckProxy>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E34D24E8;
  v3 = a1[9];
  a1[9] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[7];
  a1[7] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = a1[6];
  a1[6] = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MediaDeviceHashSalts &&)> &&)::$_0::operator()(WebKit::UserMediaPermissionCheckProxy::PermissionInfo)::{lambda(WTF::String &&)#1},void,WebKit::UserMediaPermissionCheckProxy>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34D24E8;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestManagerProxy::enumerateMediaDevicesForFrame(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MediaDeviceHashSalts &&)> &&)::$_0::operator()(WebKit::UserMediaPermissionCheckProxy::PermissionInfo)::{lambda(WTF::String &&)#1},void,WebKit::UserMediaPermissionCheckProxy>::call(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  WTF::StringImpl *v12;
  char v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  __int128 v32;
  WTF::StringImpl *v33[2];
  __int128 v34;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    goto LABEL_21;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 56);
  v7 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::MediaDevicePermissionRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v6, *(_QWORD *)(a1 + 24));
  if (v6)
  {
    v8 = (_QWORD *)(v6 + 8 * *(unsigned int *)(v6 - 4));
    if (v8 == v7)
      goto LABEL_21;
  }
  else
  {
    if (!v7)
    {
LABEL_21:
      v34 = 0uLL;
      v33[0] = 0;
      v33[1] = 0;
      v14 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      (*(void (**)(uint64_t, __int128 *, WTF::StringImpl **))(*(_QWORD *)v14 + 16))(v14, &v34, v33);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v16 = v33[1];
      v33[1] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = v33[0];
      v33[0] = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v15);
        else
          *(_DWORD *)v17 -= 2;
      }
      return (WTF::StringImpl *)WTF::Vector<WebCore::CaptureDeviceWithCapabilities,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v15);
    }
    v8 = 0;
  }
  if (v8 != v7)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::remove((uint64_t *)(v5 + 56), v7);
  v9 = *(_QWORD *)(*(_QWORD *)(v5 + 64) + 8);
  if (v9)
    v10 = v9 - 16;
  else
    v10 = 0;
  CFRetain(*(CFTypeRef *)(v10 + 8));
  if (*(_BYTE *)(v10 + 729))
  {
    v11 = 0;
    if (!v9)
      goto LABEL_16;
    goto LABEL_15;
  }
  v11 = *(_BYTE *)(v10 + 728) != 0;
  if (v9)
LABEL_15:
    CFRelease(*(CFTypeRef *)(v9 - 8));
LABEL_16:
  if (!v11)
    goto LABEL_21;
  WebKit::UserMediaPermissionRequestManagerProxy::syncWithWebCorePrefs((WebKit::UserMediaPermissionRequestManagerProxy *)v5);
  v12 = *a2;
  if (*a2)
    *(_DWORD *)v12 += 2;
  v33[0] = v12;
  WebKit::UserMediaPermissionRequestManagerProxy::ephemeralDeviceHashSaltForFrame((WTF::StringImpl *)&v33[1], v5, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if (*(_BYTE *)(a1 + 64))
  {
    v13 = 1;
  }
  else
  {
    v34 = *(_OWORD *)(a1 + 32);
    v13 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*(_QWORD *)(v5 + 280), &v34);
  }
  v19 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  v32 = *(_OWORD *)v33;
  v33[0] = 0;
  v33[1] = 0;
  v20 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v20 = &off_1E34D2510;
  *(_QWORD *)(v20 + 8) = v19;
  *(_OWORD *)(v20 + 16) = v32;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v23 = v22;
  v24 = *(_QWORD *)(v5 + 248);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v5 + 8), v5);
  v25 = *(unsigned int **)(v5 + 8);
  if (v25)
  {
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
  }
  v27 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v27 = &off_1E34D2498;
  *(_QWORD *)(v27 + 8) = v21;
  *(_QWORD *)(v27 + 16) = v23;
  *(_QWORD *)(v27 + 24) = "computeFilteredDeviceList";
  *(_QWORD *)(v27 + 32) = v24;
  *(_QWORD *)(v27 + 40) = v5;
  *(_QWORD *)(v27 + 48) = v25;
  *(_BYTE *)(v27 + 56) = v13;
  *(_QWORD *)(v27 + 64) = v20;
  WebCore::RealtimeMediaSourceCenter::singleton((WebCore::RealtimeMediaSourceCenter *)v27);
  v28 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v28 = &off_1E34D2470;
  *(_BYTE *)(v28 + 8) = v13;
  *(_QWORD *)(v28 + 16) = v27;
  *(_QWORD *)&v34 = v28;
  WebCore::RealtimeMediaSourceCenter::getMediaStreamDevices();
  v30 = v34;
  *(_QWORD *)&v34 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = v33[1];
  v33[1] = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v29);
    else
      *(_DWORD *)v31 -= 2;
  }
  result = v33[0];
  v33[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit38UserMediaPermissionRequestManagerProxy29enumerateMediaDevicesForFrameEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS4_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_3RefINS4_14SecurityOriginENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEESJ_ONS_17CompletionHandlerIFvRKNS_6VectorINS4_29CaptureDeviceWithCapabilitiesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS4_20MediaDeviceHashSaltsEEEEEN3__0clENS2_29UserMediaPermissionCheckProxy14PermissionInfoEENUlONS_6StringEE_clES11_EUlOT_E_vJOSP_EED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *a1 = &off_1E34D2510;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit38UserMediaPermissionRequestManagerProxy29enumerateMediaDevicesForFrameEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS4_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_3RefINS4_14SecurityOriginENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEESJ_ONS_17CompletionHandlerIFvRKNS_6VectorINS4_29CaptureDeviceWithCapabilitiesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS4_20MediaDeviceHashSaltsEEEEEN3__0clENS2_29UserMediaPermissionCheckProxy14PermissionInfoEENUlONS_6StringEE_clES11_EUlOT_E_vJOSP_EED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D2510;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit38UserMediaPermissionRequestManagerProxy29enumerateMediaDevicesForFrameEN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS4_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEEONS_3RefINS4_14SecurityOriginENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEESJ_ONS_17CompletionHandlerIFvRKNS_6VectorINS4_29CaptureDeviceWithCapabilitiesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS4_20MediaDeviceHashSaltsEEEEEN3__0clENS2_29UserMediaPermissionCheckProxy14PermissionInfoEENUlONS_6StringEE_clES11_EUlOT_E_vJOSP_EE4callES16_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, a2, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  unsigned int v27;

  v9 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v10 = *(_DWORD *)(v9 + 4);
  else
    v10 = 0;
  v11 = *a2;
  if (*a2)
    v12 = *(_DWORD *)(v11 + 4);
  else
    v12 = 0;
  v13 = *a3;
  if (*a3)
    v14 = *(_DWORD *)(v13 + 4);
  else
    v14 = 0;
  v15 = *a4;
  if (*a4)
    v16 = *(_DWORD *)(v15 + 4);
  else
    v16 = 0;
  v17 = *a5;
  if (*a5)
    v18 = *(_DWORD *)(v17 + 4);
  else
    v18 = 0;
  if (((v18 | v16) & 0x80000000) == 0)
  {
    v19 = __OFADD__(v16, v18);
    v20 = v16 + v18;
    v21 = v19;
    if ((v14 & 0x80000000) == 0 && !v21)
    {
      v19 = __OFADD__(v14, v20);
      v22 = v14 + v20;
      v23 = v19;
      if ((v12 & 0x80000000) == 0 && !v23)
      {
        v19 = __OFADD__(v12, v22);
        v24 = v12 + v22;
        v25 = v19;
        if ((v10 & 0x80000000) == 0 && !v25)
        {
          result = (v10 + v24);
          if (!__OFADD__(v10, v24))
          {
            if ((!v9 || (*(_BYTE *)(v9 + 16) & 4) != 0)
              && (!v11 || (*(_BYTE *)(v11 + 16) & 4) != 0)
              && (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0))
            {
              if (v15)
              {
                v27 = *(_DWORD *)(v15 + 16);
                v26 = (v27 >> 2) & 1;
                if (!v17 || (v27 & 4) == 0)
                  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v26, v9, v11, v13, v15, (_DWORD *)v17, a6);
              }
              else if (!v17)
              {
                v26 = 1;
                return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v26, v9, v11, v13, v15, (_DWORD *)v17, a6);
              }
              v26 = (*(unsigned __int8 *)(v17 + 16) >> 2) & 1;
            }
            else
            {
              v26 = 0;
            }
            return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v26, v9, v11, v13, v15, (_DWORD *)v17, a6);
          }
        }
      }
    }
  }
  *a6 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _DWORD *a7@<X6>, _QWORD *a8@<X8>)
{
  int v13;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;

  v13 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v15 = v36;
        if (v36)
        {
          v16 = (char *)(v36 + 5);
          *v36 = 2;
          v15[1] = v13;
          *((_QWORD *)v15 + 1) = v15 + 5;
          v15[4] = 4;
          v32 = a3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v32, (char *)v15 + 20);
          v17 = v32;
          if (v32)
            v17 = *(unsigned int *)(v32 + 4);
          v18 = &v16[v17];
          v33 = a4;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v33, &v16[v17]);
          v19 = v33;
          if (v33)
            v19 = *(unsigned int *)(v33 + 4);
          v20 = &v18[v19];
          v34 = a5;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v34, &v18[v19]);
          v21 = v34;
          if (v34)
            v21 = *(unsigned int *)(v34 + 4);
          v22 = &v20[v21];
          v35 = a6;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v35, &v20[v21]);
          v23 = v35;
          if (v35)
            v23 = *(unsigned int *)(v35 + 4);
          v36 = a7;
          result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v36, &v22[v23]);
        }
        goto LABEL_28;
      }
LABEL_16:
      v15 = 0;
      goto LABEL_28;
    }
LABEL_17:
    v15 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_28;
  }
  if (!(_DWORD)result)
    goto LABEL_17;
  if (result > 0x7FFFFFEF)
    goto LABEL_16;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v15 = v36;
  if (v36)
  {
    v24 = v36 + 5;
    *v36 = 2;
    v15[1] = v13;
    *((_QWORD *)v15 + 1) = v15 + 5;
    v15[4] = 0;
    v32 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v32, (char *)v15 + 20);
    v25 = v32;
    if (v32)
      v25 = *(unsigned int *)(v32 + 4);
    v26 = (char *)v24 + 2 * v25;
    v33 = a4;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v33, v26);
    v27 = v33;
    if (v33)
      v27 = *(unsigned int *)(v33 + 4);
    v28 = &v26[2 * v27];
    v34 = a5;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v34, v28);
    v29 = v34;
    if (v34)
      v29 = *(unsigned int *)(v34 + 4);
    v30 = &v28[2 * v29];
    v35 = a6;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v35, v30);
    v31 = v35;
    if (v35)
      v31 = *(unsigned int *)(v35 + 4);
    v36 = a7;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v36, &v30[2 * v31]);
  }
LABEL_28:
  *a8 = v15;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxy::promptForGetDisplayMedia(WebKit::UserMediaPermissionRequestProxy::UserMediaDisplayCapturePromptType)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34D2538;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxy::promptForGetDisplayMedia(WebKit::UserMediaPermissionRequestProxy::UserMediaDisplayCapturePromptType)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34D2538;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

WebKit::UserMediaPermissionRequestManagerProxy *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxy::promptForGetDisplayMedia(WebKit::UserMediaPermissionRequestProxy::UserMediaDisplayCapturePromptType)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  WebKit::UserMediaPermissionRequestProxy *v2;
  WebKit::UserMediaPermissionRequestManagerProxy *result;

  v2 = *(WebKit::UserMediaPermissionRequestProxy **)(a1 + 8);
  if ((a2 & 1) == 0)
    return WebKit::UserMediaPermissionRequestProxy::deny(*(_QWORD **)(a1 + 8), 5);
  result = (WebKit::UserMediaPermissionRequestManagerProxy *)*((_QWORD *)v2 + 2);
  if (result)
  {
    WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(result, v2);
    return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(WebKit::UserMediaPermissionRequestProxy *))(*(_QWORD *)v2 + 40))(v2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia(void)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E34D2560;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34D2560;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return WTF::fastFree(this, a2);
}

WebKit::UserMediaPermissionRequestManagerProxy *WTF::Detail::CallableWrapper<WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia(void)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  WebKit::UserMediaPermissionRequestProxy *v2;
  WebKit::UserMediaPermissionRequestManagerProxy *result;

  v2 = *(WebKit::UserMediaPermissionRequestProxy **)(a1 + 8);
  if ((a2 & 1) == 0)
    return WebKit::UserMediaPermissionRequestProxy::deny(*(_QWORD **)(a1 + 8), 5);
  result = (WebKit::UserMediaPermissionRequestManagerProxy *)*((_QWORD *)v2 + 2);
  if (result)
  {
    WebKit::UserMediaPermissionRequestManagerProxy::grantRequest(result, v2);
    return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(WebKit::UserMediaPermissionRequestProxy *))(*(_QWORD *)v2 + 40))(v2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_DWORD *)(a1 + 12);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a2 + 8);
  if (v12)
  {
    if (v12 == 1)
    {
      v13 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = v14;
      v10 = *(_DWORD *)(a1 + 12);
    }
    *(_QWORD *)(v11 + 8 * v9) = v13;
  }
  else
  {
    *(_QWORD *)(v11 + 8 * v9) = 0;
  }
  *(_DWORD *)(a1 + 12) = v10 + 1;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaProcessManager::revokeSandboxExtensionsIfNeeded(WebKit::WebProcessProxy &)::$_0,void,WebKit::UserMediaPermissionRequestManagerProxy &>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BYTE *v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  if (*(_QWORD *)(result + 32) == *(_QWORD *)(v3 + 208))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(v3 + 32) + 808);
    v5 = *(_BYTE **)(result + 16);
    **(_BYTE **)(result + 8) |= (v4 & 0x700A800) != 0;
    *v5 |= (v4 & 0x6D5000) != 0;
    **(_BYTE **)(result + 24) |= *(_QWORD *)(a2 + 264) != 0;
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaProcessManager::setCaptureEnabled(BOOL)::$_0,void,WebKit::UserMediaPermissionRequestManagerProxy &>::call(uint64_t a1, WebKit::UserMediaPermissionRequestManagerProxy *a2)
{
  uint64_t v3;
  WebKit::WebPageProxy *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  v3 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 8);
  if (v3)
    v4 = (WebKit::WebPageProxy *)(v3 - 16);
  else
    v4 = 0;
  v5 = WebKit::WebPageProxy::logger(v4);
  v6 = (*(uint64_t (**)(WebKit::UserMediaPermissionRequestManagerProxy *))(*(_QWORD *)a2 + 24))(a2);
  v8 = *((_QWORD *)a2 + 31);
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = "stopCapture";
  v11[3] = v8;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  WebKit::UserMediaPermissionRequestManagerProxy::invalidatePendingRequests(a2, v7);
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 8);
  if (v9)
    v10 = v9 - 16;
  else
    v10 = 0;
  CFRetain(*(CFTypeRef *)(v10 + 8));
  WebKit::WebPageProxy::stopMediaCapture(v10, 4);
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 - 8));
}

void WTF::Detail::CallableWrapper<WebKit::UserMediaProcessManager::captureDevicesChanged(void)::$_0,void,WebKit::UserMediaPermissionRequestManagerProxy &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WebKit::WebPageProxy *v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::URL *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  _QWORD *v23;
  WTF *v24;
  WTF *v25[4];

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8);
  if (v3)
    v4 = (WebKit::WebPageProxy *)(v3 - 16);
  else
    v4 = 0;
  v5 = WebKit::WebPageProxy::logger(v4);
  v6 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v7 = *(WTF **)(a2 + 248);
  v25[0] = v6;
  v25[1] = v8;
  v25[2] = (WTF *)"captureDevicesChanged";
  v25[3] = v7;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v25);
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8);
  if (v9)
    v10 = v9 - 16;
  else
    v10 = 0;
  CFRetain(*(CFTypeRef *)(v10 + 8));
  if (!*(_BYTE *)(v10 + 729))
  {
    if (*(_BYTE *)(v10 + 728))
    {
      v12 = *(_QWORD *)(v10 + 280);
      if (v12)
      {
        WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(v12 + 48), v11);
        v13 = *(_QWORD *)(v10 + 280);
        v14 = *(_QWORD *)(v13 + 272);
        v15 = *(_QWORD *)(v13 + 280);
        v16 = (unsigned int *)v25[0];
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
        v24 = (WTF *)v16;
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
        v18 = *(unsigned int **)(a2 + 8);
        if (v18)
        {
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
        }
        v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v20 = &off_1E34D22B8;
        v20[1] = v18;
        v23 = v20;
        WebKit::UserMediaPermissionRequestManagerProxy::getUserMediaPermissionInfo(a2, v14, v15, (uint64_t *)&v24, (uint64_t *)v25, (uint64_t *)&v23);
        if (v23)
          (*(void (**)(_QWORD *))(*v23 + 8))(v23);
        if (v24)
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v24, v21);
        v22 = v25[0];
        v25[0] = 0;
        if (v22)
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v22, v21);
      }
    }
  }
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 - 8));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaProcessManager::updateCaptureDevices(WebKit::UserMediaProcessManager::ShouldNotify)::$_0,void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34D2600;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaProcessManager::updateCaptureDevices(WebKit::UserMediaProcessManager::ShouldNotify)::$_0,void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D2600;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaProcessManager::updateCaptureDevices(WebKit::UserMediaProcessManager::ShouldNotify)::$_0,void,WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t result, _DWORD *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(result + 8);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 16);
    v7 = (WTF::StringImpl **)(v6 + 16);
    LODWORD(v8) = *(_DWORD *)(v6 + 28);
    if ((_DWORD)v8 == a2[3])
    {
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD *)a2;
        v10 = *(_QWORD *)a2 + 40 * v8;
        do
        {
          if ((*(unsigned __int8 *)(v9 + 8) | 2) == 3)
          {
            if (!*(_DWORD *)(v6 + 28))
              goto LABEL_17;
            v11 = 0;
            v12 = 0;
            while (1)
            {
              v13 = *v7;
              result = WTF::equal(*(WTF **)v9, *(const WTF::StringImpl **)((char *)*v7 + v11), a3);
              if ((_DWORD)result)
              {
                if ((*(_BYTE *)(v9 + 32) != 0) != (*((_BYTE *)v13 + v11 + 32) != 0))
                  break;
              }
              ++v12;
              v8 = *(unsigned int *)(v6 + 28);
              v11 += 40;
              if (v12 >= v8)
                goto LABEL_15;
            }
          }
          v9 += 40;
        }
        while (v9 != v10);
      }
    }
    else
    {
LABEL_15:
      if ((_DWORD)v8)
        WTF::VectorDestructor<true,WebCore::CaptureDevice>::destruct(*v7, (WTF::StringImpl *)((char *)*v7 + 40 * v8));
LABEL_17:
      result = (uint64_t)WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v6 + 16, a2);
      if (*(_BYTE *)(v5 + 24))
      {
        v14 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v14 = off_1E34D25D8;
        v15 = v14;
        WebKit::UserMediaPermissionRequestManagerProxy::forEach(&v15);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::UserMediaProcessManager::beginMonitoringCaptureDevices(void)::$_0 &&>>(WebCore::RealtimeMediaSourceCenter ****a1)
{
  WebCore::RealtimeMediaSourceCenter *updated;

  updated = (WebCore::RealtimeMediaSourceCenter *)WebKit::UserMediaProcessManager::updateCaptureDevices(***a1, 0);
  WebCore::RealtimeMediaSourceCenter::singleton(updated);
  return WebCore::RealtimeMediaSourceCenter::addDevicesChangedObserver();
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::VisitedLinkTableController::RemoveAllVisitedLinks>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1520;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebProcess::SetBackForwardCacheCapacity>(uint64_t a1, _DWORD **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 2625;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LODWORD(a3) = **a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

BOOL WTF::Detail::CallableWrapper<WebKit::WebBackForwardCache::removeEntry(WebKit::SuspendedPageProxy &)::$_0,BOOL,WebKit::WebBackForwardListItem &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 416);
  if (v2)
    v2 = *(_QWORD *)(v2 + 32);
  return v2 == *(_QWORD *)(a1 + 8);
}

BOOL WTF::Detail::CallableWrapper<WebKit::WebBackForwardCache::removeEntriesForProcess(WebKit::WebProcessProxy &)::$_0,BOOL,WebKit::WebBackForwardListItem &>::call(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 416) + 8) == *(_QWORD *)(a1 + 8);
}

BOOL WTF::Detail::CallableWrapper<WebKit::WebBackForwardCache::removeEntriesForSession(PAL::SessionID)::$_0,BOOL,WebKit::WebBackForwardListItem &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 416) + 8);
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  v3 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, &v8);
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 16);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(v3 + 752);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  return v6 && *(_QWORD *)(v6 + 24) == *(_QWORD *)(a1 + 8);
}

BOOL WTF::Detail::CallableWrapper<WebKit::WebBackForwardCache::removeEntriesForPage(WebKit::WebPageProxy &)::$_0,BOOL,WebKit::WebBackForwardListItem &>::call(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 384) == *(_QWORD *)(a1 + 8);
}

BOOL WTF::Detail::CallableWrapper<WebKit::WebBackForwardCache::removeEntriesForPageAndProcess(WebKit::WebPageProxy &,WebKit::WebProcessProxy &)::$_0,BOOL,WebKit::WebBackForwardListItem &>::call(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 384) == *(_QWORD *)(a1 + 8)
      && *(_QWORD *)(*(_QWORD *)(a2 + 416) + 8) == *(_QWORD *)(a1 + 16);
}

void WebCore::PluginInfo::~PluginInfo(WebCore::PluginInfo *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
}

uint64_t WebKit::PDFPluginBase::PDFPluginBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t IdentifierInternal;
  uint64_t v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v13;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)(a1 + 72) = v4;
  *(_DWORD *)(a1 + 80) = 0;
  WebCore::ScrollableArea::ScrollableArea((WebCore::ScrollableArea *)a1);
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)a1 = off_1E34D2730;
  *(_QWORD *)(a1 + 88) = IdentifierInternal;
  *(_QWORD *)(a1 + 96) = 0;
  WebKit::WebFrame::fromCoreFrame(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 528) + 8), &v13);
  v6 = v13;
  v7 = (unsigned int **)(v13 + 16);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v13 + 16), v13);
  v8 = *v7;
  if (*v7)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    v6 = v13;
    *(_QWORD *)(a1 + 104) = v8;
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    *(_QWORD *)(a1 + 104) = 0;
  }
  CFRelease(*(CFTypeRef *)(v6 + 8));
LABEL_5:
  WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::initializeIfNeeded((unint64_t *)(a2 + 16), a2);
  v10 = (unsigned int *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 112) = v10;
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 8;
  *(_BYTE *)(a1 + 288) = 1;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = constinit;
  *(_OWORD *)(a1 + 344) = unk_1978D0510;
  *(_OWORD *)(a1 + 360) = xmmword_1978D0520;
  *(_BYTE *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  return a1;
}

void sub_19730AC74(_Unwind_Exception *a1, void *a2)
{
  WebCore::ScrollableArea *v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;

  v4 = (unsigned int *)*((_QWORD *)v2 + 13);
  *((_QWORD *)v2 + 13) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (WTF *)*((_QWORD *)v2 + 12);
  *((_QWORD *)v2 + 12) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  WebCore::ScrollableArea::~ScrollableArea(v2);
  _Unwind_Resume(a1);
}

void WebKit::PDFPluginBase::~PDFPluginBase(WebKit::PDFPluginBase *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const void *v10;
  WTF *v11;
  const void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  void *v20;

  *(_QWORD *)this = off_1E34D2730;
  v3 = (_DWORD *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  if (*((_BYTE *)this + 496))
  {
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 60);
    *((_QWORD *)this + 60) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (const void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v10)
    CFRelease(v10);
  v11 = (WTF *)*((_QWORD *)this + 18);
  if ((WebKit::PDFPluginBase *)((char *)this + 160) != v11 && v11)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = (const void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v12)
    CFRelease(v12);
  v13 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,4ul,WTF::FastMalloc>::~Vector((uint64_t)(v13 + 4), a2);
      WTF::fastFree((WTF *)v13, v20);
    }
  }
  v16 = (unsigned int *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, a2);
    }
  }
  v19 = (WTF *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
      WTF::fastFree(v19, a2);
    else
      --*(_DWORD *)v19;
  }
  WebCore::ScrollableArea::~ScrollableArea(this);
}

uint64_t WebKit::PDFPluginBase::teardown(WebKit::PDFPluginBase *this)
{
  unsigned __int8 *v2;
  const void *v4;
  int v5;

  v2 = (unsigned __int8 *)this + 120;
  if (__ldaxr((unsigned __int8 *)this + 120))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 120);
LABEL_5:
  v4 = (const void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
    CFRelease(v4);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_12:
  (*(void (**)(WebKit::PDFPluginBase *, _QWORD))(*(_QWORD *)this + 1360))(this, 0);
  return (*(uint64_t (**)(WebKit::PDFPluginBase *, uint64_t))(*(_QWORD *)this + 1360))(this, 1);
}

uint64_t WebKit::PDFPluginBase::page(WebKit::PDFPluginBase *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4 || *(_BYTE *)(v4 + 144))
    return 0;
  v6 = (unsigned int *)(v4 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(v4 + 24);
  if (v8)
    v5 = *(_QWORD *)(v8 + 8);
  else
    v5 = 0;
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  return v5;
}

WTF *WebKit::PDFPluginBase::setView(WebKit::PDFPluginBase *this, WebKit::PluginView *a2)
{
  void *v4;
  _DWORD *v5;
  WTF *result;

  WTF::WeakPtrFactory<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded((WebKit::PluginView *)((char *)a2 + 16), (uint64_t)a2);
  v5 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v5)
    ++*v5;
  result = (WTF *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v4);
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF *WebKit::PDFPluginBase::destroy(WebKit::PDFPluginBase *this)
{
  char v2;
  void *v3;
  WTF *result;

  v2 = *((_BYTE *)this + 529);
  *((_BYTE *)this + 529) = 1;
  atomic_store(1u, (unsigned __int8 *)this + 530);
  *((_BYTE *)this + 528) = 1;
  (*(void (**)(WebKit::PDFPluginBase *))(*(_QWORD *)this + 1304))(this);
  result = (WTF *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v3);
    else
      --*(_DWORD *)result;
  }
  *((_BYTE *)this + 529) = v2;
  return result;
}

void sub_19730B0FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  char v2;

  *(_BYTE *)(v1 + 529) = v2;
  _Unwind_Resume(a1);
}

void WebKit::PDFPluginBase::createPDFDocument(WebKit::PDFPluginBase *this)
{
  id v2;
  uint64_t v3;
  const void *v4;

  v2 = objc_alloc((Class)WebKit::getPDFDocumentClass(this));
  v3 = objc_msgSend(v2, "initWithData:", WebKit::PDFPluginBase::originalData(this));
  v4 = (const void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = v3;
  if (v4)
    CFRelease(v4);
}

uint64_t WebKit::PDFPluginBase::originalData(WebKit::PDFPluginBase *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  int v5;

  v2 = (unsigned __int8 *)this + 120;
  if (__ldaxr((unsigned __int8 *)this + 120))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 120);
LABEL_5:
  v4 = *((_QWORD *)this + 16);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4;
}

BOOL WebKit::PDFPluginBase::isFullFramePlugin(WebKit::PDFPluginBase *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  WebCore::Node *v11;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  if (*(_BYTE *)(v4 + 144))
    return 0;
  v5 = *(_QWORD *)(v4 + 296);
  if (!v5 || (*(_WORD *)(v5 + 3358) & 8) == 0)
    return 0;
  *(_DWORD *)(v5 + 24) += 2;
  v11 = (WebCore::Node *)v5;
  v8 = WebCore::PluginDocument::pluginWidget((WebCore::PluginDocument *)v5);
  v9 = *((_QWORD *)this + 12);
  if (v9)
    v9 = *(_QWORD *)(v9 + 8);
  result = v9 == v8;
  if (*((_DWORD *)v11 + 6) == 2)
  {
    v10 = result;
    if ((*((_WORD *)v11 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v11);
    return v10;
  }
  else
  {
    *((_DWORD *)v11 + 6) -= 2;
  }
  return result;
}

void sub_19730B294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (*((_DWORD *)a10 + 6) == 2)
  {
    if ((*((_WORD *)a10 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a10);
  }
  else
  {
    *((_DWORD *)a10 + 6) -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebKit::PDFPluginBase::handlesPageScaleFactor(WebKit::PDFPluginBase *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 13);
  return v1
      && (v2 = *(_QWORD *)(v1 + 8)) != 0
      && (v3 = *(_QWORD *)(v2 + 24)) != 0
      && (v4 = *(_QWORD *)(v3 + 8)) != 0
      && *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8) == v4
      && WebKit::PDFPluginBase::isFullFramePlugin(this);
}

void WebKit::PDFPluginBase::notifySelectionChanged(WebKit::PDFPluginBase *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::WebPage *v11;
  WebCore::LocalFrame *v12;
  unsigned int *v13;
  unsigned int v14;
  WebKit::WebPage *v15;

  v1 = *((_QWORD *)this + 13);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 24);
          if (v5)
          {
            v6 = *(_QWORD *)(v5 + 8);
            if (v6)
            {
              v8 = *(_QWORD **)(*(_QWORD *)(v6 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v8 + 1368))(v8) & 1) == 0)
              {
                if (*(_QWORD *)(v8[2] + 8))
                {
                  v9 = *((_QWORD *)this + 13);
                  if (v9)
                    v10 = *(_QWORD *)(v9 + 8);
                  else
                    v10 = 0;
                  WebKit::WebFrame::protectedPage(v10, &v15);
                  v11 = v15;
                  v12 = *(WebCore::LocalFrame **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 13) + 8) + 24) + 8);
                  v13 = (unsigned int *)((char *)v12 + 8);
                  do
                    v14 = __ldaxr(v13);
                  while (__stlxr(v14 + 1, v13));
                  WebKit::WebPage::didChangeSelection(v11, v12);
                  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v13);
                  if (v15)
                    CFRelease(*((CFTypeRef *)v15 + 1));
                }
              }
            }
          }
        }
      }
    }
  }
}

void WebKit::PDFPluginBase::ensureDataBufferLength(WebKit::PDFPluginBase *this, unint64_t a2)
{
  const __CFData *Mutable;
  const void *v5;
  unint64_t Length;

  Mutable = (const __CFData *)*((_QWORD *)this + 16);
  if (!Mutable)
  {
    Mutable = CFDataCreateMutable(0, 0);
    v5 = (const void *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = Mutable;
    if (v5)
    {
      CFRelease(v5);
      Mutable = (const __CFData *)*((_QWORD *)this + 16);
    }
  }
  Length = CFDataGetLength(Mutable);
  if (a2 > Length)
    CFDataIncreaseLength(*((CFMutableDataRef *)this + 16), a2 - Length);
}

void WTF::RangeSet<WTF::Range<unsigned long long>>::add(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = a2[1];
  if (*a2 == v2)
    return;
  v5 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v5)
  {
    v10 = 0;
LABEL_10:
    *(_BYTE *)(a1 + 144) = 0;
    v11 = v10 + 1;
    v12 = *(unsigned int *)(a1 + 8);
    if (v10 + 1 >= v12)
    {
      if ((_DWORD)v5 == (_DWORD)v12)
        *(_OWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<WTF::Range<unsigned long long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v11, (unint64_t)a2);
      else
        *(_OWORD *)(*(_QWORD *)a1 + 16 * v10) = *(_OWORD *)a2;
      ++*(_DWORD *)(a1 + 12);
      WTF::RangeSet<WTF::Range<unsigned long long>>::compact(a1);
    }
    else
    {
      if ((_DWORD)v5 == (_DWORD)v12)
        *(_OWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<WTF::Range<unsigned long long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v11, (unint64_t)a2);
      else
        *(_OWORD *)(*(_QWORD *)a1 + 16 * v10) = *(_OWORD *)a2;
      ++*(_DWORD *)(a1 + 12);
    }
    return;
  }
  v6 = *(_QWORD *)a1 + 16 * v5;
  v8 = *(_QWORD *)(v6 - 16);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = v8 <= *a2 && v7 >= v2;
  v10 = *(unsigned int *)(a1 + 12);
  if (!v9)
    goto LABEL_10;
}

uint64_t WebKit::PDFPluginBase::streamDidReceiveResponse(WebKit::PDFPluginBase *this, const WebCore::ResourceResponse *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[2];

  WebCore::ResourceResponseBase::suggestedFilename(a2);
  v4 = v23[0];
  v23[0] = 0;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      v7 = v23[0];
      v23[0] = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v6);
        else
          *(_DWORD *)v7 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  }
  if (v4 && *((_DWORD *)v4 + 1))
    goto LABEL_23;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = v23[0];
  v8 = suggestedFilenameWithMIMEType(0, (const WTF::String *)&v21);
  MEMORY[0x19AEABCC8](&v22, v8);
  v10 = v22;
  v22 = 0;
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v9);
      v12 = v22;
      v22 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v11 -= 2;
      v22 = 0;
    }
  }
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (*((_QWORD *)this + 38))
  {
LABEL_23:
    result = WTF::StringImpl::endsWithIgnoringASCIICase();
    if ((result & 1) != 0)
      return result;
    v15 = (WTF::StringImpl *)*((_QWORD *)this + 38);
    if (v15)
      *(_DWORD *)v15 += 2;
  }
  else
  {
    v15 = 0;
  }
  v20 = v15;
  v23[0] = (WTF::StringImpl *)".pdf";
  v23[1] = (WTF::StringImpl *)5;
  result = WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v20, (uint64_t *)v23, &v22);
  v17 = v22;
  if (v22)
  {
    v22 = 0;
    v18 = (WTF::StringImpl *)*((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = v17;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v16);
        v19 = v22;
        v22 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v16);
          else
            *(_DWORD *)v19 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v18 -= 2;
        v22 = 0;
      }
    }
    result = (uint64_t)v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_19730B764(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFPluginBase::streamDidReceiveData(WebKit::PDFPluginBase *this, const WebCore::SharedBuffer *a2)
{
  unsigned __int8 *v4;
  CFMutableDataRef Mutable;
  const void *v7;
  const void *v8;
  size_t v9;
  UInt8 *MutableBytePtr;
  uint64_t v11;
  int v12;
  unint64_t v14;
  uint64_t v15;

  v4 = (unsigned __int8 *)this + 120;
  if (__ldaxr((unsigned __int8 *)this + 120))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C]((char *)this + 120);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  if (!*((_QWORD *)this + 16))
  {
    Mutable = CFDataCreateMutable(0, 0);
    v7 = (const void *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = Mutable;
    if (v7)
      CFRelease(v7);
  }
  WebKit::PDFPluginBase::ensureDataBufferLength(this, *((_QWORD *)a2 + 6) + *((_QWORD *)this + 17));
  v8 = (const void *)WebCore::SharedBuffer::data(a2);
  v9 = *((_QWORD *)a2 + 6);
  MutableBytePtr = CFDataGetMutableBytePtr(*((CFMutableDataRef *)this + 16));
  memcpy(&MutableBytePtr[*((_QWORD *)this + 17)], v8, v9);
  v11 = *((_QWORD *)this + 17) + *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 17) = v11;
  v14 = 0;
  v15 = v11 - 1;
  if (v11 == 1)
  {
    v14 = 0;
    v15 = 0;
  }
  WTF::RangeSet<WTF::Range<unsigned long long>>::add((uint64_t)this + 144, &v14);
  v12 = __ldxr(v4);
  if (v12 == 1)
  {
    if (!__stlxr(0, v4))
      return (*(uint64_t (**)(WebKit::PDFPluginBase *))(*(_QWORD *)this + 1368))(this);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return (*(uint64_t (**)(WebKit::PDFPluginBase *))(*(_QWORD *)this + 1368))(this);
}

void sub_19730B8D0(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

unsigned __int8 *WebKit::PDFPluginBase::streamDidFinishLoading(unsigned __int8 *this)
{
  unsigned __int8 v1;
  unsigned __int8 *v2;

  v1 = atomic_load(this + 530);
  if ((v1 & 1) == 0)
  {
    v2 = this;
    WebKit::PDFPluginBase::addArchiveResource((WebKit::PDFPluginBase *)this);
    v2[528] = 1;
    WebKit::PDFPluginBase::createPDFDocument((WebKit::PDFPluginBase *)v2);
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v2 + 1312))(v2);
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v2 + 1384))(v2);
    return (unsigned __int8 *)WebKit::PDFPluginBase::tryRunScriptsInPDFDocument((WebKit::PDFPluginBase *)v2);
  }
  return this;
}

void WebKit::PDFPluginBase::addArchiveResource(WebKit::PDFPluginBase *this)
{
  const __CFString *v2;
  uint64_t v3;
  id v4;
  NSURLResponse *v5;
  WebCore::FragmentedSharedBuffer *v6;
  NSData *v7;
  WebCore::FragmentedSharedBuffer *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int *v12;
  unsigned int *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  CFTypeRef v17;
  WTF::StringImpl *v18;
  WebCore::FragmentedSharedBuffer *v19;
  unsigned int *v20;
  unsigned int *v21;
  WTF::StringImpl *v22;
  _BYTE v23[240];
  CFTypeRef cf;
  WTF::StringImpl *v25;
  _QWORD v26[2];
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v26[0] = CFSTR("Content-Disposition");
  if (*((_QWORD *)this + 38))
    v2 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v2 = &stru_1E351F1B8;
  v26[1] = CFSTR("Content-Type");
  v27[0] = v2;
  v27[1] = CFSTR("application/pdf");
  v3 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, v26, 2);
  v4 = objc_alloc(MEMORY[0x1E0C92C18]);
  v5 = (NSURLResponse *)objc_msgSend(v4, "initWithURL:statusCode:HTTPVersion:headerFields:", WTF::URL::operator NSURL *(), 200, *MEMORY[0x1E0C930E8], v3);
  WebCore::ResourceResponse::ResourceResponse((WebCore::ResourceResponse *)v23, v5);
  v6 = (WebCore::FragmentedSharedBuffer *)WebKit::PDFPluginBase::originalData(this);
  v8 = v6;
  if (v6)
    CFRetain(v6);
  v19 = v8;
  WebCore::SharedBuffer::create<NSData *>(&v19, v7, (uint64_t *)&v20);
  v9 = (uint64_t)v20;
  v20 = 0;
  v21 = (unsigned int *)v9;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18 = v25;
  v25 = 0;
  WebCore::ArchiveResource::create();
  v11 = v25;
  v25 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v10);
    else
      *(_DWORD *)v18 -= 2;
  }
  v12 = v21;
  v21 = 0;
  if (v12)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v12, v10);
  v13 = v20;
  v20 = 0;
  if (v13)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v13, v10);
  WebCore::Document::loader(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 8) + 64)
                                                                                                  + 40)
                                                                                      + 8)
                                                                          + 528)
                                                              + 8)
                                                  + 296));
  v25 = v22;
  v22 = 0;
  WebCore::DocumentLoader::addArchiveResource();
  v15 = v25;
  v25 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v15 + 8))(v15);
    else
      --*((_DWORD *)v15 + 2);
  }
  v16 = v22;
  v22 = 0;
  if (!v16)
  {
LABEL_24:
    if (!v8)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (*((_DWORD *)v16 + 2) != 1)
  {
    --*((_DWORD *)v16 + 2);
    goto LABEL_24;
  }
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 8))(v16);
  if (v8)
LABEL_25:
    CFRelease(v8);
LABEL_26:
  v17 = cf;
  cf = 0;
  if (v17)
    CFRelease(v17);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v23, v14);
  if (v5)
    CFRelease(v5);
}

void sub_19730BC88(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,CFTypeRef cf)
{
  const void *v47;
  const void *v48;
  uint64_t v49;
  _DWORD *v51;
  CFTypeRef v52;

  v51 = *(_DWORD **)(v49 - 96);
  *(_QWORD *)(v49 - 96) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  if (a16)
  {
    if (a16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a16 + 8))(a16);
    else
      --a16[2];
  }
  if (v48)
    CFRelease(v48);
  v52 = cf;
  cf = 0;
  if (v52)
    CFRelease(v52);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a17, a2);
  if (v47)
    CFRelease(v47);
  _Unwind_Resume(a1);
}

_QWORD *WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(WebKit::PDFPluginBase *this)
{
  _QWORD *result;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)*((_QWORD *)this + 37);
  if (result && *((_BYTE *)this + 528) && !*((_BYTE *)this + 531))
  {
    v3 = (void *)objc_msgSend(result, "documentRef");
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)this + 9);
    v4 = operator new(0x18uLL);
    *v4 = &off_1E34D2CB0;
    v4[1] = this;
    v4[2] = this;
    v7 = v4;
    WebKit::PDFScriptEvaluation::runScripts(v3, (uint64_t)v6);
    result = v7;
    if (v7 == v6)
    {
      v5 = 4;
      result = v6;
    }
    else
    {
      if (!v7)
      {
LABEL_9:
        *((_BYTE *)this + 531) = 1;
        return result;
      }
      v5 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
    goto LABEL_9;
  }
  return result;
}

void sub_19730BEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFPluginBase::streamDidFail(WebKit::PDFPluginBase *this)
{
  unsigned __int8 *v2;
  const void *v4;
  int v5;

  v2 = (unsigned __int8 *)this + 120;
  if (__ldaxr((unsigned __int8 *)this + 120))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 120);
LABEL_5:
  v4 = (const void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
    CFRelease(v4);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return (*(uint64_t (**)(WebKit::PDFPluginBase *))(*(_QWORD *)this + 1376))(this);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return (*(uint64_t (**)(WebKit::PDFPluginBase *))(*(_QWORD *)this + 1376))(this);
}

void WebKit::PDFScriptEvaluation::runScripts(void *a1, uint64_t a2)
{
  CGPDFDictionary *Catalog;
  CGPDFDictionaryRef v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  CGPDFObject *v10;
  const __CFData *v11;
  const __CFData *v12;
  const UInt8 *BytePtr;
  uint64_t Length;
  CFStringEncoding v15;
  CFStringRef v16;
  const unsigned __int8 *v17;
  int64_t v18;
  CFStringEncoding v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  char v23;
  uint64_t v24;
  void *v25;
  _Unwind_Exception *v26;
  const __CFAllocator *alloc;
  char *__s1;
  CGPDFDictionaryRef dict;
  CGPDFDictionaryRef v30;
  WTF *v31;
  uint64_t v32;
  CGPDFDictionaryRef v33;
  CGPDFDictionaryRef value;
  CGPDFDataFormat format;
  CGPDFStreamRef stream;

  if (!a1)
    return;
  CFRetain(a1);
  Catalog = CGPDFDocumentGetCatalog((CGPDFDocumentRef)a1);
  if (!Catalog
    || (value = 0, !CGPDFDictionaryGetDictionary(Catalog, "Names", &value))
    || (v33 = 0, !CGPDFDictionaryGetDictionary(value, "JavaScript", &v33)))
  {
    CFRelease(a1);
    return;
  }
  v31 = 0;
  v32 = 0;
  v5 = v33;
  v30 = v33;
  if (v33)
    CFRetain(v33);
  WebKit::PDFScriptEvaluation::appendValuesInPDFNameSubtreeToVector(&v30, (uint64_t)&v31);
  if (v5)
    CFRelease(v5);
  v7 = v31;
  if (HIDWORD(v32))
  {
    v8 = 8 * HIDWORD(v32);
    alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = v31;
    while (1)
    {
      v10 = *(CGPDFObject **)v9;
      dict = 0;
      if (CGPDFObjectGetValue(v10, kCGPDFObjectTypeDictionary, &dict))
      {
        __s1 = 0;
        if (CGPDFDictionaryGetName(dict, "S", (const char **)&__s1) && !strcmp(__s1, "JavaScript"))
        {
          stream = 0;
          if (CGPDFDictionaryGetStream(dict, "JS", &stream))
          {
            format = CGPDFDataFormatRaw;
            v11 = CGPDFStreamCopyData(stream, &format);
            v12 = v11;
            if (v11)
            {
              BytePtr = CFDataGetBytePtr(v11);
              Length = CFDataGetLength(v12);
              v15 = 134217984;
              if (Length >= 2 && *BytePtr == 254)
              {
                if (BytePtr[1] == 255)
                  v15 = 256;
                else
                  v15 = 134217984;
              }
              v16 = CFStringCreateWithBytes(alloc, BytePtr, Length, v15, 1u);
              CFRelease(v12);
              if (v16)
                goto LABEL_29;
            }
          }
          stream = 0;
          if (CGPDFDictionaryGetString(dict, "JS", &stream))
          {
            v17 = CGPDFStringGetBytePtr(stream);
            v18 = CGPDFStringGetLength(stream);
            v19 = 134217984;
            if (v18 >= 2 && *v17 == 254)
            {
              if (v17[1] == 255)
                v19 = 256;
              else
                v19 = 134217984;
            }
            v16 = CFStringCreateWithBytes(alloc, v17, v18, v19, 1u);
            if (v16)
            {
LABEL_29:
              MEMORY[0x19AEABCC8](&stream, v16);
              if ((_MergedGlobals_89 & 1) == 0)
              {
                JSC::Yarr::RegularExpression::RegularExpression();
                _MergedGlobals_89 = 1;
              }
              v21 = JSC::Yarr::RegularExpression::match();
              v22 = stream;
              stream = 0;
              if (v22)
              {
                if (*(_DWORD *)v22 == 2)
                  WTF::StringImpl::destroy(v22, v20);
                else
                  *(_DWORD *)v22 -= 2;
              }
              CFRelease(v16);
              if (v21 != -1)
                break;
            }
          }
        }
      }
      v9 = (WTF *)((char *)v9 + 8);
      v8 -= 8;
      if (!v8)
        goto LABEL_40;
    }
    v23 = 1;
    if (!v7)
      goto LABEL_42;
  }
  else
  {
LABEL_40:
    v23 = 0;
    if (!v7)
      goto LABEL_42;
  }
  WTF::fastFree(v7, v6);
LABEL_42:
  CFRelease(a1);
  if ((v23 & 1) != 0)
  {
    v24 = *(_QWORD *)(a2 + 24);
    if (!v24)
    {
      v26 = (_Unwind_Exception *)std::__throw_bad_function_call[abi:sn180100]();
      if (v31)
        WTF::fastFree(v31, v25);
      CFRelease(a1);
      _Unwind_Resume(v26);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24);
  }
}

BOOL WebKit::PDFPluginBase::geometryDidChange(WebKit::PDFPluginBase *this, const WebCore::IntSize *a2, const WebCore::AffineTransform *a3)
{
  int v4;
  int v5;
  __int128 *v6;
  __int128 v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  double v11;
  double v12;
  BOOL v13;
  _BYTE v15[56];
  _OWORD v16[3];

  v4 = *((_DWORD *)this + 81);
  v5 = *((_DWORD *)this + 80);
  v6 = (__int128 *)((char *)this + 328);
  v7 = *(_OWORD *)((char *)this + 344);
  v16[0] = *(_OWORD *)((char *)this + 328);
  v16[1] = v7;
  v16[2] = *(_OWORD *)((char *)this + 360);
  *((_QWORD *)this + 40) = *(_QWORD *)a2;
  WebCore::AffineTransform::inverse(a3);
  if (v15[48])
    v8 = (__int128 *)v15;
  else
    v8 = &constinit;
  v9 = v8[1];
  *v6 = *v8;
  v6[1] = v9;
  v6[2] = v8[2];
  if (*((_DWORD *)this + 80) != v5 || *((_DWORD *)this + 81) != v4)
    return 1;
  v10 = 0;
  do
  {
    v11 = *(double *)((char *)v6 + v10);
    v12 = *(double *)((char *)v16 + v10);
    if (v11 != v12)
      break;
    v13 = v10 == 40;
    v10 += 8;
  }
  while (!v13);
  return v11 != v12;
}

float WebKit::PDFPluginBase::pdfDocumentSizeForPrinting(id *this)
{
  CGFloat v1;
  CGFloat v2;
  CGSize v4;
  float v5;

  objc_msgSend((id)objc_msgSend(this[37], "pageAtIndex:", 0), "boundsForBox:", 1);
  v4.width = v1;
  v4.height = v2;
  WebCore::FloatSize::FloatSize((WebCore::FloatSize *)&v5, &v4);
  return v5;
}

uint64_t WebKit::PDFPluginBase::convertFromPluginToRootView(WebKit::PDFPluginBase *this, const WebCore::IntRect *a2)
{
  uint64_t result;
  _BYTE v4[56];

  result = WebCore::AffineTransform::inverse((WebKit::PDFPluginBase *)((char *)this + 328));
  if (v4[48])
    return WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v4, a2);
  __break(1u);
  return result;
}

uint64_t WebKit::PDFPluginBase::updateControlTints(WebKit::PDFPluginBase *this, WebCore::GraphicsContext *a2)
{
  WebCore::Widget *v3;
  WebCore::Widget *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = (WebCore::Widget *)*((_QWORD *)this + 64);
  if (v3)
  {
    ++*((_DWORD *)v3 + 2);
    WebCore::Widget::invalidate(v3);
    if (*((_DWORD *)v3 + 2) == 1)
      (*(void (**)(WebCore::Widget *))(*(_QWORD *)v3 + 8))(v3);
    else
      --*((_DWORD *)v3 + 2);
  }
  v4 = (WebCore::Widget *)*((_QWORD *)this + 65);
  if (v4)
  {
    ++*((_DWORD *)v4 + 2);
    WebCore::Widget::invalidate(v4);
    if (*((_DWORD *)v4 + 2) == 1)
      (*(void (**)(WebCore::Widget *))(*(_QWORD *)v4 + 8))(v4);
    else
      --*((_DWORD *)v4 + 2);
  }
  v7[0] = WebKit::PDFPluginBase::scrollCornerRect(this);
  v7[1] = v5;
  return (*(uint64_t (**)(WebKit::PDFPluginBase *, _QWORD *))(*(_QWORD *)this + 344))(this, v7);
}

void sub_19730C5EC(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Widget::invalidate(WebCore::Widget *this)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD v6[2];

  WebCore::Widget::frameRect(this);
  v3 = v2;
  WebCore::Widget::frameRect(this);
  v6[0] = 0;
  v6[1] = v4 & 0xFFFFFFFF00000000 | v3;
  return (*(uint64_t (**)(WebCore::Widget *, _QWORD *))(*(_QWORD *)this + 32))(this, v6);
}

unint64_t WebKit::PDFPluginBase::scrollCornerRect(WebKit::PDFPluginBase *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  WebCore::Widget *v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  WebCore::Widget *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = *((_QWORD *)this + 64);
  if (!v2)
    goto LABEL_4;
  v3 = *((_QWORD *)this + 65);
  if (!v3)
  {
LABEL_5:
    v4 = 0;
    return v4 | v3;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 272))(v2) & 1) != 0)
  {
LABEL_4:
    v3 = 0;
    goto LABEL_5;
  }
  v6 = *((_QWORD *)this + 12);
  if (v6)
    v7 = *(WebCore::Widget **)(v6 + 8);
  else
    v7 = 0;
  WebCore::Widget::frameRect(v7);
  v9 = v8;
  WebCore::Widget::frameRect(*((WebCore::Widget **)this + 65));
  v11 = v9 - v10;
  v12 = *((_QWORD *)this + 12);
  if (v12)
    v13 = *(WebCore::Widget **)(v12 + 8);
  else
    v13 = 0;
  WebCore::Widget::frameRect(v13);
  v15 = v14;
  WebCore::Widget::frameRect(*((WebCore::Widget **)this + 64));
  v17 = v16 & 0xFFFFFFFF00000000;
  WebCore::Widget::frameRect(*((WebCore::Widget **)this + 65));
  WebCore::Widget::frameRect(*((WebCore::Widget **)this + 64));
  v4 = (v15 - v17) & 0xFFFFFFFF00000000;
  v3 = v11;
  return v4 | v3;
}

uint64_t WebKit::PDFPluginBase::enclosingScrollableArea(WebKit::PDFPluginBase *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::RenderObject *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::RenderLayer *v6;
  WebCore::RenderLayer *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v1 = *((_QWORD *)this + 14);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = (WebCore::RenderObject *)(*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL);
  if (!v3)
    return 0;
  if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_21;
  if (*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) != 7)
    return 0;
  ++*(_DWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0xE0);
  v4 = WebCore::RenderObject::enclosingLayer(v3);
  v5 = v4;
  if (v4)
  {
    ++*(_DWORD *)(v4 + 8);
    v6 = (WebCore::RenderLayer *)WebCore::RenderLayer::enclosingScrollableLayer();
    v7 = v6;
    if (!v6)
    {
      v10 = 0;
      goto LABEL_10;
    }
    ++*((_DWORD *)v6 + 2);
    v8 = WebCore::RenderLayer::scrollableArea(v6);
    v9 = *((_DWORD *)v7 + 2);
    if (v9)
    {
      v10 = v8;
      *((_DWORD *)v7 + 2) = v9 - 1;
LABEL_10:
      v11 = *(_DWORD *)(v5 + 8);
      if (!v11)
      {
        __break(0xC471u);
        JUMPOUT(0x19730C888);
      }
      *(_DWORD *)(v5 + 8) = v11 - 1;
      goto LABEL_12;
    }
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x19730C858);
  }
  v10 = 0;
LABEL_12:
  if (*((_DWORD *)v3 + 56) == 1)
    (*(void (**)(WebCore::RenderObject *))(*(_QWORD *)v3 + 8))(v3);
  else
    --*((_DWORD *)v3 + 56);
  return v10;
}

void sub_19730C8AC(_Unwind_Exception *exception_object)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v6;

  v4 = *(_DWORD *)(v3 + 8);
  if (v4)
  {
    *(_DWORD *)(v3 + 8) = v4 - 1;
    v6 = *(_DWORD *)(v2 + 8);
    if (v6)
    {
      *(_DWORD *)(v2 + 8) = v6 - 1;
      if (v1[56] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
      else
        --v1[56];
      _Unwind_Resume(exception_object);
    }
    __break(0xC471u);
    JUMPOUT(0x19730C918);
  }
  __break(0xC471u);
  JUMPOUT(0x19730C8E0);
}

uint64_t WebKit::PDFPluginBase::scrollableAreaBoundingBox(WebKit::PDFPluginBase *this, BOOL *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 12);
  if (v2)
    return WebCore::Widget::frameRect(*(WebCore::Widget **)(v2 + 8));
  else
    return WebCore::Widget::frameRect(0);
}

uint64_t WebKit::PDFPluginBase::setScrollOffset(IntPoint *this, const IntPoint *a2)
{
  this[47] = *a2;
  return (*(uint64_t (**)(IntPoint *))(*(_QWORD *)this + 1336))(this);
}

uint64_t WebKit::PDFPluginBase::isActive(WebKit::PDFPluginBase *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = WebKit::PDFPluginBase::page(this);
  if (!v1)
    return 0;
  ++*(_DWORD *)v1;
  v2 = *(_WORD *)(*(_QWORD *)(v1 + 72) + 26) & 1;
  WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v1);
  return v2;
}

uint64_t WebKit::PDFPluginBase::forceUpdateScrollbarsOnMainThreadForPerformanceTesting(WebKit::PDFPluginBase *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = WebKit::PDFPluginBase::page(this);
  if (!v1)
    return 0;
  ++*(_DWORD *)v1;
  v2 = (*(_QWORD *)(*(_QWORD *)(v1 + 112) + 688) >> 62) & 1;
  WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v1);
  return v2;
}

uint64_t WebKit::PDFPluginBase::scrollPosition(WebKit::PDFPluginBase *this)
{
  return *((_QWORD *)this + 47);
}

uint64_t WebKit::PDFPluginBase::minimumScrollPosition(WebKit::PDFPluginBase *this)
{
  return 0;
}

unint64_t WebKit::PDFPluginBase::maximumScrollPosition(WebKit::PDFPluginBase *this)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;

  v2 = WebCore::ScrollableArea::scrollbarIntrusion(this);
  v3 = v2;
  v4 = HIDWORD(v2);
  v5 = (*(uint64_t (**)(WebKit::PDFPluginBase *))(*(_QWORD *)this + 496))(this);
  return (v3 - *((_DWORD *)this + 80) + (_DWORD)v5) & ~((v3 - *((_DWORD *)this + 80) + (int)v5) >> 31) | ((unint64_t)(((_DWORD)v4 - *((_DWORD *)this + 81) + HIDWORD(v5)) & ~(((int)v4 - *((_DWORD *)this + 81) + HIDWORD(v5)) >> 31)) << 32);
}

float WebKit::PDFPluginBase::deviceScaleFactor(WebKit::PDFPluginBase *this)
{
  float *v1;
  float v2;

  v1 = (float *)WebKit::PDFPluginBase::page(this);
  if (!v1)
    return 1.0;
  ++*(_DWORD *)v1;
  v2 = v1[91];
  WTF::RefCounted<WebCore::Page>::deref(v1);
  return v2;
}

uint64_t WebKit::PDFPluginBase::scrollbarStyleChanged(uint64_t this, uint64_t a2, int a3)
{
  _QWORD *v3;
  unsigned __int8 v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3)
  {
    v3 = (_QWORD *)this;
    v4 = atomic_load((unsigned __int8 *)(this + 530));
    if ((v4 & 1) == 0)
    {
      v5 = *(_DWORD *)(this + 376);
      v6 = *(_DWORD *)(this + 380);
      v7 = WebKit::PDFPluginBase::maximumScrollPosition((WebKit::PDFPluginBase *)this);
      if (v5 >= (int)v7)
        v8 = v7;
      else
        v8 = v5;
      if (v6 >= SHIDWORD(v7))
        v9 = HIDWORD(v7);
      else
        v9 = v6;
      v3[47] = v8 | (v9 << 32);
      (*(void (**)(_QWORD *))(*v3 + 1336))(v3);
      WebCore::ScrollableArea::scrollbarStyleChanged();
      return (*(uint64_t (**)(_QWORD *))(*v3 + 1344))(v3);
    }
  }
  return this;
}

uint64_t WebKit::PDFPluginBase::convertFromScrollbarToContainingView(WebKit::PDFPluginBase *this, const WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  WebCore::Widget *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::FrameView *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;

  v15 = *(_OWORD *)a3;
  v4 = WebCore::Widget::frameRect(a2);
  v5 = v4;
  v6 = HIDWORD(v4);
  v7 = *((_QWORD *)this + 12);
  if (v7)
    v8 = *(WebCore::Widget **)(v7 + 8);
  else
    v8 = 0;
  v9 = WebCore::Widget::frameRect(v8);
  LODWORD(v15) = v15 + v5 - v9;
  DWORD1(v15) += v6 - HIDWORD(v9);
  v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 8) + 64);
  v11 = *(WebCore::FrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8) + 528) + 8) + 288);
  if (v11)
    ++*((_DWORD *)v11 + 2);
  v12 = *(_QWORD *)(v10 + 64);
  if ((v12 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v12 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    v13 = WebCore::FrameView::convertFromRendererToContainingView(v11, (const WebCore::RenderElement *)(v12 & 0xFFFFFFFFFFFFLL), (const WebCore::IntRect *)&v15);
    if (v11)
    {
      if (*((_DWORD *)v11 + 2) == 1)
        (*(void (**)(WebCore::FrameView *))(*(_QWORD *)v11 + 8))(v11);
      else
        --*((_DWORD *)v11 + 2);
    }
    return v13;
  }
  return result;
}

void sub_19730CC80(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
  {
    if (v1[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  _Unwind_Resume(exception_object);
}

unint64_t WebKit::PDFPluginBase::convertFromContainingViewToScrollbar(WebKit::PDFPluginBase *this, const WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  uint64_t v5;
  WebCore::FrameView *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Widget *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 8) + 64);
  v6 = *(WebCore::FrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 528) + 8) + 288);
  if (v6)
    ++*((_DWORD *)v6 + 2);
  v7 = *(_QWORD *)(v5 + 64);
  if ((v7 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v7 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    v8 = WebCore::FrameView::convertFromContainingViewToRenderer(v6, (const WebCore::RenderElement *)(v7 & 0xFFFFFFFFFFFFLL), a3);
    if (v6)
    {
      if (*((_DWORD *)v6 + 2) == 1)
        (*(void (**)(WebCore::FrameView *))(*(_QWORD *)v6 + 8))(v6);
      else
        --*((_DWORD *)v6 + 2);
    }
    v9 = *((_QWORD *)this + 12);
    if (v9)
      v10 = *(WebCore::Widget **)(v9 + 8);
    else
      v10 = 0;
    v11 = WebCore::Widget::frameRect(v10);
    v12 = WebCore::Widget::frameRect(a2);
    return (((v11 - (v12 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000) + v8) & 0xFFFFFFFF00000000 | (v11 + v8 - v12);
  }
  return result;
}

void sub_19730CDC8(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
  {
    if (v1[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFPluginBase::convertFromScrollbarToContainingView(WebKit::PDFPluginBase *this, const WebCore::Scrollbar *a2, const WebCore::IntPoint *a3)
{
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::Widget *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::FrameView *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _DWORD v17[2];

  v5 = *(_DWORD *)a3;
  v4 = *((_DWORD *)a3 + 1);
  v6 = WebCore::Widget::frameRect(a2);
  v7 = v6;
  v8 = HIDWORD(v6);
  v9 = *((_QWORD *)this + 12);
  if (v9)
    v10 = *(WebCore::Widget **)(v9 + 8);
  else
    v10 = 0;
  v11 = WebCore::Widget::frameRect(v10);
  v17[0] = v7 - v11 + v5;
  v17[1] = v8 + v4 - HIDWORD(v11);
  v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 8) + 64);
  v13 = *(WebCore::FrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 528) + 8) + 288);
  if (v13)
    ++*((_DWORD *)v13 + 2);
  v14 = *(_QWORD *)(v12 + 64);
  if ((v14 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v14 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    v15 = WebCore::FrameView::convertFromRendererToContainingView(v13, (const WebCore::RenderElement *)(v14 & 0xFFFFFFFFFFFFLL), (const WebCore::IntPoint *)v17);
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1)
        (*(void (**)(WebCore::FrameView *))(*(_QWORD *)v13 + 8))(v13);
      else
        --*((_DWORD *)v13 + 2);
    }
    return v15;
  }
  return result;
}

void sub_19730CF14(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
  {
    if (v1[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  _Unwind_Resume(exception_object);
}

unint64_t WebKit::PDFPluginBase::convertFromContainingViewToScrollbar(WebKit::PDFPluginBase *this, const WebCore::Scrollbar *a2, const WebCore::IntPoint *a3)
{
  uint64_t v5;
  WebCore::FrameView *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Widget *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 8) + 64);
  v6 = *(WebCore::FrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 528) + 8) + 288);
  if (v6)
    ++*((_DWORD *)v6 + 2);
  v7 = *(_QWORD *)(v5 + 64);
  if ((v7 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v7 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    v8 = WebCore::FrameView::convertFromContainingViewToRenderer(v6, (const WebCore::RenderElement *)(v7 & 0xFFFFFFFFFFFFLL), a3);
    if (v6)
    {
      if (*((_DWORD *)v6 + 2) == 1)
        (*(void (**)(WebCore::FrameView *))(*(_QWORD *)v6 + 8))(v6);
      else
        --*((_DWORD *)v6 + 2);
    }
    v9 = *((_QWORD *)this + 12);
    if (v9)
      v10 = *(WebCore::Widget **)(v9 + 8);
    else
      v10 = 0;
    v11 = WebCore::Widget::frameRect(v10);
    v12 = WebCore::Widget::frameRect(a2);
    return (((v11 - (v12 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000) + v8) & 0xFFFFFFFF00000000 | (v11 + v8 - v12);
  }
  return result;
}

void sub_19730D04C(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1)
  {
    if (v1[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
    else
      --v1[2];
  }
  _Unwind_Resume(exception_object);
}

_BYTE *WebKit::PDFPluginBase::debugDescription@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *result;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _DWORD __n[3];

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  result = (_BYTE *)WTF::Internal::appendHex();
  __n[0] = v4;
  if (v4 < 0
    || (v5 = (v4 + 16), __OFADD__(v4, 16))
    || (result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v5 + 20)), !v7))
  {
    *a1 = 0;
    __break(0xC471u);
  }
  else
  {
    *(_DWORD *)v7 = 2;
    *(_DWORD *)(v7 + 4) = v5;
    *(_QWORD *)(v7 + 8) = v7 + 20;
    *(_DWORD *)(v7 + 16) = 4;
    *(_OWORD *)(v7 + 20) = *(_OWORD *)"PDFPluginBase 0x";
    if (__n[0])
    {
      result = (_BYTE *)(v7 + 36);
      v6 = (char *)__n - __n[0];
      if (__n[0] == 1)
        *result = *v6;
      else
        result = memcpy(result, v6, __n[0]);
    }
    *a1 = v7;
  }
  return result;
}

WebCore::ScrollableArea *WebKit::PDFPluginBase::willDetachRenderer(WebCore::ScrollableArea *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::LocalFrameView *v5;

  v1 = *((_QWORD *)this + 13);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (!*(_BYTE *)(v4 + 144))
          {
            v5 = *(WebCore::LocalFrameView **)(v4 + 288);
            if (v5)
            {
              ++*((_DWORD *)v5 + 2);
              this = (WebCore::ScrollableArea *)WebCore::LocalFrameView::removeScrollableArea(v5, this);
              if (*((_DWORD *)v5 + 2) == 1)
                return (WebCore::ScrollableArea *)(*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v5 + 8))(v5);
              else
                --*((_DWORD *)v5 + 2);
            }
          }
        }
      }
    }
  }
  return this;
}

void sub_19730D208(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::PDFPluginBase::viewRelativeVerticalScrollbarRect(WebKit::PDFPluginBase *this)
{
  WebCore::Widget *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  WebCore::Widget *v6;

  v2 = (WebCore::Widget *)*((_QWORD *)this + 65);
  if (v2)
  {
    v3 = *((_QWORD *)this + 40);
    WebCore::Widget::frameRect(v2);
    v5 = v3 - v4;
    v6 = (WebCore::Widget *)*((_QWORD *)this + 64);
    if (v6)
      WebCore::Widget::frameRect(v6);
  }
  else
  {
    return 0;
  }
  return v5;
}

uint64_t WebKit::PDFPluginBase::viewRelativeHorizontalScrollbarRect(WebKit::PDFPluginBase *this)
{
  WebCore::Widget *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  WebCore::Widget *v6;

  v2 = (WebCore::Widget *)*((_QWORD *)this + 64);
  if (v2)
  {
    v3 = *((_QWORD *)this + 40);
    WebCore::Widget::frameRect(v2);
    v5 = (HIDWORD(v3) - v4);
    v6 = (WebCore::Widget *)*((_QWORD *)this + 65);
    if (v6)
      WebCore::Widget::frameRect(v6);
  }
  else
  {
    v5 = 0;
  }
  return v5 << 32;
}

unint64_t WebKit::PDFPluginBase::viewRelativeScrollCornerRect(WebKit::PDFPluginBase *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = WebCore::ScrollableArea::scrollbarIntrusion(this);
  if ((int)v2 < 1)
    return 0;
  v3 = 0;
  if (SHIDWORD(v2) >= 1)
    return (*((_QWORD *)this + 40) - (v2 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (*((_QWORD *)this + 40)
                                                                                          - v2);
  return v3;
}

unint64_t WebKit::PDFPluginBase::updateScrollbars(unint64_t this)
{
  unsigned __int8 v1;
  unint64_t *v2;
  _BOOL4 v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  WebCore::Widget *v16;
  uint64_t v17;
  WebCore::Scrollbar *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  WebCore::Widget *v24;
  uint64_t v25;
  WebCore::Scrollbar *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::LocalFrameView *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  int v34[2];

  v1 = atomic_load((unsigned __int8 *)(this + 530));
  if ((v1 & 1) != 0)
    return this;
  v2 = (unint64_t *)this;
  if (*(_QWORD *)(this + 512))
    v3 = 1;
  else
    v3 = *(_QWORD *)(this + 520) != 0;
  this = (*(uint64_t (**)(unint64_t))(*(_QWORD *)this + 496))(this);
  v4 = HIDWORD(this);
  v5 = *((_DWORD *)v2 + 80);
  if (v2[64])
  {
    if (v5 >= (int)this)
      this = (*(uint64_t (**)(unint64_t *, _QWORD))(*v2 + 1360))(v2, 0);
  }
  else if (v5 < (int)this)
  {
    (*(void (**)(unint64_t *__return_ptr, unint64_t *, _QWORD))(*v2 + 1352))(&v33, v2, 0);
    v6 = v33;
    v33 = 0;
    this = v2[64];
    v2[64] = v6;
    if (this)
    {
      v7 = *(_DWORD *)(this + 8) - 1;
      if (*(_DWORD *)(this + 8) != 1)
        goto LABEL_11;
      (*(void (**)(unint64_t))(*(_QWORD *)this + 8))(this);
      this = v33;
      v33 = 0;
      if (!this)
        goto LABEL_12;
      v7 = *(_DWORD *)(this + 8) - 1;
      if (*(_DWORD *)(this + 8) != 1)
      {
LABEL_11:
        *(_DWORD *)(this + 8) = v7;
        goto LABEL_12;
      }
      this = (*(uint64_t (**)(unint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
LABEL_12:
  v8 = *((_DWORD *)v2 + 81);
  if (v2[65])
  {
    if (v8 >= (int)v4)
      this = (*(uint64_t (**)(unint64_t *, uint64_t))(*v2 + 1360))(v2, 1);
  }
  else if (v8 < (int)v4)
  {
    (*(void (**)(unint64_t *__return_ptr, unint64_t *, uint64_t))(*v2 + 1352))(&v33, v2, 1);
    v9 = v33;
    v33 = 0;
    this = v2[65];
    v2[65] = v9;
    if (this)
    {
      v10 = *(_DWORD *)(this + 8) - 1;
      if (*(_DWORD *)(this + 8) != 1)
        goto LABEL_18;
      (*(void (**)(unint64_t))(*(_QWORD *)this + 8))(this);
      this = v33;
      v33 = 0;
      if (!this)
        goto LABEL_19;
      v10 = *(_DWORD *)(this + 8) - 1;
      if (*(_DWORD *)(this + 8) != 1)
      {
LABEL_18:
        *(_DWORD *)(this + 8) = v10;
        goto LABEL_19;
      }
      this = (*(uint64_t (**)(unint64_t))(*(_QWORD *)this + 8))(this);
    }
  }
LABEL_19:
  if (v2[64])
  {
    v11 = WebKit::PDFPluginBase::viewRelativeHorizontalScrollbarRect((WebKit::PDFPluginBase *)v2);
    v12 = v11;
    *(_QWORD *)v34 = v13;
    v14 = v2[12];
    v15 = HIDWORD(v11);
    if (v14)
      v16 = *(WebCore::Widget **)(v14 + 8);
    else
      v16 = 0;
    v17 = WebCore::Widget::frameRect(v16);
    LODWORD(v33) = v17 + v12;
    HIDWORD(v33) = HIDWORD(v17) + v15;
    WebCore::Scrollbar::setFrameRect((WebCore::Scrollbar *)v2[64], (const WebCore::IntRect *)&v33);
    v18 = (WebCore::Scrollbar *)v2[64];
    (*(void (**)(unint64_t *))(*v2 + 1320))(v2);
    WebCore::Scrollbar::setSteps(v18);
    this = WebCore::Scrollbar::setProportion((WebCore::Scrollbar *)v2[64]);
  }
  if (v2[65])
  {
    v19 = WebKit::PDFPluginBase::viewRelativeVerticalScrollbarRect((WebKit::PDFPluginBase *)v2);
    v20 = v19;
    *(_QWORD *)v34 = v21;
    v22 = v2[12];
    v23 = HIDWORD(v19);
    if (v22)
      v24 = *(WebCore::Widget **)(v22 + 8);
    else
      v24 = 0;
    v25 = WebCore::Widget::frameRect(v24);
    LODWORD(v33) = v25 + v20;
    HIDWORD(v33) = HIDWORD(v25) + v23;
    WebCore::Scrollbar::setFrameRect((WebCore::Scrollbar *)v2[65], (const WebCore::IntRect *)&v33);
    v26 = (WebCore::Scrollbar *)v2[65];
    (*(void (**)(unint64_t *))(*v2 + 1320))(v2);
    WebCore::Scrollbar::setSteps(v26);
    this = WebCore::Scrollbar::setProportion((WebCore::Scrollbar *)v2[65]);
  }
  v27 = v2[13];
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (v28)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v28 + 24) + 8);
      if (*(_BYTE *)(v29 + 144))
        v29 = 0;
      v30 = *(WebCore::LocalFrameView **)(v29 + 288);
      if (v30)
      {
        v31 = *((_DWORD *)v30 + 2);
        *((_DWORD *)v30 + 2) = v31 + 1;
        if (v2[64])
        {
          if (v3)
          {
LABEL_41:
            if (!v31)
              return (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v30 + 8))(v30);
            *((_DWORD *)v30 + 2) = v31;
            return this;
          }
        }
        else
        {
          v32 = v2[65];
          if (v3 == (v32 != 0))
            goto LABEL_41;
          if (!v32)
          {
            WebCore::LocalFrameView::removeScrollableArea(v30, (WebCore::ScrollableArea *)v2);
            goto LABEL_40;
          }
        }
        WebCore::LocalFrameView::addScrollableArea(v30, (WebCore::ScrollableArea *)v2);
LABEL_40:
        this = WebCore::LocalFrameView::setNeedsLayoutAfterViewConfigurationChange(v30);
        v31 = *((_DWORD *)v30 + 2) - 1;
        goto LABEL_41;
      }
    }
  }
  return this;
}

void sub_19730D6F0(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

WebCore::Page *WebKit::PDFPluginBase::createScrollbar@<X0>(WebKit::PDFPluginBase *a1@<X0>, uint64_t a2@<X1>, WebCore::Widget **a3@<X8>)
{
  WebCore::Page *result;
  WebCore::Page *v7;
  uint64_t v8;
  void *v9;
  unsigned __int8 *v10;
  int v12;
  unsigned __int8 **v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  WebCore::LocalFrameView *v18;
  unsigned __int8 **v19;

  WebCore::Scrollbar::createNativeScrollbar();
  (*(void (**)(WebKit::PDFPluginBase *, WebCore::Widget *, uint64_t))(*(_QWORD *)a1 + 240))(a1, *a3, a2);
  result = (WebCore::Page *)WebKit::PDFPluginBase::page(a1);
  if (result)
  {
    v7 = result;
    ++*(_DWORD *)result;
    if (!WebCore::Page::isMonitoringWheelEvents(result))
    {
LABEL_17:
      result = (WebCore::Page *)WTF::RefCounted<WebCore::Page>::deref(v7);
      goto LABEL_18;
    }
    v8 = WebCore::ScrollableArea::scrollAnimator(a1);
    WebCore::Page::wheelEventTestMonitor(v7);
    if (!v19)
      goto LABEL_13;
    v10 = *v19;
    if (__ldaxr(*v19))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
LABEL_8:
      ++*((_QWORD *)v10 + 1);
      v12 = __ldxr(v10);
      if (v12 == 1)
      {
        if (!__stlxr(0, v10))
          goto LABEL_13;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_13:
      v13 = *(unsigned __int8 ***)(v8 + 16);
      *(_QWORD *)(v8 + 16) = v19;
      if (v13)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v13, v9);
      if (v19)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v19, v9);
      goto LABEL_17;
    }
    MEMORY[0x19AEABB3C](v10);
    goto LABEL_8;
  }
LABEL_18:
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 12) + 8) + 64) + 40) + 8)
                  + 528);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = (unsigned int *)(v15 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      v18 = *(WebCore::LocalFrameView **)(v15 + 288);
      if (v18)
      {
        ++*((_DWORD *)v18 + 2);
        WebCore::LocalFrameView::addChild(v18, *a3);
        if (*((_DWORD *)v18 + 2) == 1)
          (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v18 + 8))(v18);
        else
          --*((_DWORD *)v18 + 2);
      }
      return (WebCore::Page *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v16);
    }
  }
  return result;
}

void sub_19730D8CC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 **a10)
{
  _DWORD **v10;
  _DWORD *v11;
  _DWORD *v13;

  if (a10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*a10, a2);
  WTF::RefCounted<WebCore::Page>::deref(v11);
  v13 = *v10;
  *v10 = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  _Unwind_Resume(a1);
}

_DWORD *WebKit::PDFPluginBase::destroyScrollbar(_DWORD *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  if ((_DWORD)a2)
    v3 = 130;
  else
    v3 = 128;
  v4 = *(_QWORD *)&result[v3];
  if (v4)
  {
    v5 = result;
    (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 248))(result, v4, a2);
    WebCore::Widget::removeFromParent(*(WebCore::Widget **)&v5[v3]);
    result = *(_DWORD **)&v5[v3];
    *(_QWORD *)&v5[v3] = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

void WebKit::PDFPluginBase::notifyCursorChanged(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  IPC::Encoder *v20;

  v1 = *(_QWORD *)(a1 + 104);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 24);
          if (v5)
          {
            v6 = *(_QWORD *)(v5 + 8);
            if (v6)
            {
              v8 = *(_QWORD **)(*(_QWORD *)(v6 + 48) + 16);
              if (((*(uint64_t (**)(_QWORD *))(*v8 + 1368))(v8) & 1) == 0)
              {
                if (*(_QWORD *)(v8[2] + 8))
                {
                  v9 = *(_QWORD *)(a1 + 104);
                  if (v9)
                    v10 = *(_QWORD *)(v9 + 8);
                  else
                    v10 = 0;
                  WebKit::WebFrame::protectedPage(v10, &v19);
                  v11 = v19;
                  v12 = WebCore::Cursor::fromType();
                  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 32) + 56))(v11 + 32);
                  v14 = WTF::fastMalloc((WTF *)0x240);
                  *(_WORD *)v14 = 2032;
                  *(_QWORD *)(v14 + 8) = v13;
                  *(_QWORD *)(v14 + 528) = v14 + 16;
                  *(_QWORD *)(v14 + 536) = v14 + 16;
                  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
                  *(_OWORD *)(v14 + 560) = 0u;
                  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
                  v20 = (IPC::Encoder *)v14;
                  IPC::ArgumentCoder<WebCore::Cursor,void>::encode((IPC::Encoder *)v14, v12);
                  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v11 + 32) + 32))(v11 + 32, &v20, 0);
                  v16 = v20;
                  v20 = 0;
                  if (v16)
                  {
                    IPC::Encoder::~Encoder(v16, v15);
                    WTF::fastFree(v17, v18);
                  }
                  CFRelease(*(CFTypeRef *)(v11 + 8));
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_19730DB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  uint64_t v10;

  if (v10)
    CFRelease(*(CFTypeRef *)(v10 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::DictionaryPopupInfo::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1 + 56, (_DWORD *)(a2 + 56));
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v7 = *(_DWORD **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v6;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  v9 = *(_DWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v8;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  v11 = *(_DWORD **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v10;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  WebCore::Color::operator=();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  WebCore::AttributedString::operator=();
  return a1;
}

uint64_t WebKit::PDFPluginBase::dictionaryPopupInfoForSelection@<X0>(void *a1@<X1>, WebCore::DictionaryPopupInfo *a2@<X8>)
{
  WebCore::DictionaryPopupInfo::DictionaryPopupInfo(a2);
  return objc_msgSend((id)objc_msgSend(a1, "string"), "length");
}

void sub_19730DCB8(_Unwind_Exception *a1)
{
  WebCore::DictionaryPopupInfo *v1;

  WebCore::DictionaryPopupInfo::~DictionaryPopupInfo(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::PDFPluginBase::lastKnownMousePositionInView(WebKit::PDFPluginBase *this)
{
  if (*((_BYTE *)this + 496))
    return WebCore::AffineTransform::mapPoint((WebKit::PDFPluginBase *)((char *)this + 328), (WebKit::PDFPluginBase *)((char *)this + 420));
  else
    return 0;
}

uint64_t WebKit::PDFPluginBase::navigateToURL(WebKit::PDFPluginBase *this, const WTF::URL *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  WebCore::WindowProxy *v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebCore::WindowProxy *v16;
  _DWORD *v17;
  _OWORD v18[6];
  int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  __int16 v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  result = WTF::URL::protocolIsJavaScript(a2);
  if ((result & 1) == 0)
  {
    v4 = *((_QWORD *)this + 13);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
          {
            if (!*(_BYTE *)(v7 + 144))
            {
              v8 = (unsigned int *)(v7 + 8);
              do
                v9 = __ldaxr(v8);
              while (__stlxr(v9 + 1, v8));
              if (*((_BYTE *)this + 496))
              {
                v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
                if (!v10 || (result = *(_QWORD *)(v10 + 96)) == 0)
                  result = WebCore::threadGlobalDataSlow((WebCore *)result);
                if (!*(_QWORD *)(result + 40))
                  WebCore::ThreadGlobalData::initializeEventNames((WebCore::ThreadGlobalData *)result);
                v11 = *(WebCore::WindowProxy **)(v7 + 112);
                ++*(_DWORD *)v11;
                v16 = v11;
                if (!*((_BYTE *)this + 496))
                  __break(1u);
                WebKit::WebKit2PlatformMouseEvent::WebKit2PlatformMouseEvent((uint64_t)v18, (uint64_t)this + 384);
                v24 = v18[0];
                v25 = v18[1];
                v26 = v18[2];
                v27 = v18[3];
                v28 = v18[4];
                v29 = v18[5];
                v30 = v19;
                v33 = v22;
                v31 = v20;
                v32 = v21;
                WebCore::MouseEvent::create();
                v13 = v17;
                v14 = v31;
                v31 = 0;
                if (v14)
                {
                  if (*(_DWORD *)v14 == 2)
                    WTF::StringImpl::destroy(v14, v12);
                  else
                    *(_DWORD *)v14 -= 2;
                }
                if (v16)
                  WTF::RefCounted<WebCore::WindowProxy>::deref(v16);
              }
              else
              {
                v13 = 0;
              }
              LOBYTE(v24) = 1;
              LOBYTE(v18[0]) = 0;
              v23 = 0;
              WebCore::FrameLoader::changeLocation();
              if (v23)
                WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v18, v15);
              if (v13)
              {
                if (v13[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
                else
                  --v13[4];
              }
              return (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v7 + 8));
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_19730DF14(_Unwind_Exception *a1)
{
  unsigned int *v1;

  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

_DWORD *WebKit::PDFPluginBase::registerPDFTest(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  BOOL v3;
  _DWORD *result;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 296))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (!v3)
    return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  *a2 = 0;
  result = *(_DWORD **)(a1 + 552);
  *(_QWORD *)(a1 + 552) = v2;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebKit::PDFPluginBase::rootFrameID(WebKit::PDFPluginBase *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 8) + 64)
                                                                                           + 40)
                                                                               + 8)
                                                                   + 528)
                                                       + 8)
                                           + 632)
                               + 8)
                   + 32);
}

uint64_t WebKit::PDFPluginBase::ptrCount(WebKit::PDFPluginBase *this)
{
  return atomic_load((unsigned int *)this + 20);
}

uint64_t WebKit::PDFPluginBase::ptrCountWithoutThreadCheck(WebKit::PDFPluginBase *this)
{
  return atomic_load((unsigned int *)this + 20);
}

uint64_t WebKit::PDFPluginBase::incrementPtrCount(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 80);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t WebKit::PDFPluginBase::decrementPtrCount(uint64_t this)
{
  unsigned int *v1;
  unsigned int v3;

  v1 = (unsigned int *)(this + 80);
  if (atomic_load((unsigned int *)(this + 80)))
  {
    do
      v3 = __ldaxr(v1);
    while (__stlxr(v3 - 1, v1));
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::ScrollableArea::isScrollView(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isRenderLayer(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isListBox(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::requestScrollToPosition()
{
  return 0;
}

uint64_t WebCore::ScrollableArea::requestStartKeyboardScrollAnimation(WebCore::ScrollableArea *this, const KeyboardScroll *a2)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::requestStopKeyboardScrollAnimation(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::hasSteppedScrolling(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::horizontalScrollbarMode(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::verticalScrollbarMode(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::horizontalNativeScrollbarVisibility(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::verticalNativeScrollbarVisibility(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::horizontalOverscrollBehavior(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::verticalOverscrollBehavior(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::scrollbarWidthStyle(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::scrollingNodeID(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::isScrollCornerVisible(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::horizontalScrollbar(WebKit::PDFPluginBase *this)
{
  return *((_QWORD *)this + 64);
}

uint64_t WebKit::PDFPluginBase::verticalScrollbar(WebKit::PDFPluginBase *this)
{
  return *((_QWORD *)this + 65);
}

uint64_t WebCore::ScrollableArea::isVisibleToHitTesting(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::visibleSize(WebKit::PDFPluginBase *this)
{
  return *((_QWORD *)this + 40);
}

uint64_t WebCore::ScrollableArea::overhangAmount(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isHandlingWheelEvent(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::headerHeight(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::footerHeight(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::useDarkAppearance(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::shouldSuspendScrollAnimations(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::isScrollableOrRubberbandable(WebKit::PDFPluginBase *this)
{
  return 1;
}

uint64_t WebKit::PDFPluginBase::hasScrollableOrRubberbandableAncestor(WebKit::PDFPluginBase *this)
{
  return 1;
}

uint64_t WebCore::ScrollableArea::isUserScrollInProgress(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isRubberBandInProgress(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::isScrollSnapInProgress(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::scrollAnimatorEnabled(WebKit::PDFPluginBase *this)
{
  return 1;
}

uint64_t WebCore::ScrollableArea::isInStableState(WebCore::ScrollableArea *this)
{
  return 1;
}

uint64_t WebCore::ScrollableArea::usesCompositedScrolling(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::usesAsyncScrolling(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::layerForHorizontalScrollbar(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::layerForVerticalScrollbar(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::mockScrollbarsControllerEnabled(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::shouldPlaceVerticalScrollbarOnLeft(WebKit::PDFPluginBase *this)
{
  return 0;
}

float WebCore::ScrollableArea::pageScaleFactor(WebCore::ScrollableArea *this)
{
  return 1.0;
}

uint64_t WebCore::ScrollableArea::needsAnimatedScroll(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::layerForScrollCorner(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::isUnifiedPDFPlugin(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::isLegacyPDFPlugin(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::platformLayer(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::graphicsLayer(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::isComposited(WebKit::PDFPluginBase *this)
{
  return 0;
}

uint64_t WebKit::PDFPluginBase::shouldCreateTransientPaintingSnapshot(WebKit::PDFPluginBase *this)
{
  return 0;
}

void WebKit::PDFPluginBase::snapshot(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

double WebKit::PDFPluginBase::minScaleFactor(WebKit::PDFPluginBase *this)
{
  return 0.25;
}

double WebKit::PDFPluginBase::maxScaleFactor(WebKit::PDFPluginBase *this)
{
  return 5.0;
}

void WebKit::PDFPluginBase::rectsForTextMatchesInRect(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebKit::PDFPluginBase::textIndicatorForCurrentSelection(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebKit::PDFPluginBase::annotationRectsForTesting(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WTF::RangeSet<WTF::Range<unsigned long long>>::compact(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_BYTE *)(a1 + 144))
  {
    v2 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v2)
    {
      std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*,false>(*(_QWORD *)a1, (unint64_t *)(*(_QWORD *)a1 + 16 * v2), 126 - 2 * __clz(v2), 1);
      v3 = *(unsigned int *)(a1 + 12);
      if (!(_DWORD)v3)
      {
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x19730E394);
      }
      v4 = v3 - 1;
      if (v3 == 1)
      {
        LODWORD(v5) = 1;
      }
      else
      {
        v6 = *(_QWORD *)a1;
        v7 = *(_QWORD *)a1 + 16;
        v5 = 1;
        v8 = *(uint64_t **)a1;
        do
        {
          v9 = *(_OWORD *)v7;
          v10 = v8[1];
          v11 = *(_QWORD *)(v7 + 8);
          if (v11 > v10)
          {
            if ((unint64_t)v9 <= v10)
            {
              v12 = *v8;
              if (*v8 == v11)
              {
                v12 = 0;
                v11 = 0;
              }
              *v8 = v12;
              v8[1] = v11;
            }
            else
            {
              if (v3 <= v5)
                goto LABEL_18;
              v8 = (uint64_t *)(v6 + 16 * v5++);
              *(_OWORD *)v8 = v9;
            }
          }
          v7 += 16;
          --v4;
        }
        while (v4);
      }
      *(_DWORD *)(a1 + 12) = v5;
    }
    *(_BYTE *)(a1 + 144) = 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*,false>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _OWORD *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  __int128 *v35;
  unint64_t v36;
  unint64_t *v37;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  unint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;

__int128 *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(__int128 *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *(_QWORD *)result)
  {
    if (v4 < v3)
    {
      v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *(_QWORD *)result)
      {
        v7 = *result;
        *result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v8 = *result;
      *result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2)
        return result;
      v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      v5 = *result;
      *result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(__int128 *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(a1, a2, a3);
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(__int128 *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long long>>::compact(void)::{lambda(WTF::Range<unsigned long long> const&,WTF::Range<unsigned long long> const&)#1} &,WTF::Range<unsigned long long>*>(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(_QWORD *)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 800))(v6);
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

WebCore::DictionaryPopupInfo *WebCore::DictionaryPopupInfo::DictionaryPopupInfo(WebCore::DictionaryPopupInfo *this)
{
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_WORD *)this + 57) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_BYTE *)this + 112) = 0;
  WebCore::AttributedString::AttributedString((WebCore::DictionaryPopupInfo *)((char *)this + 120));
  return this;
}

void sub_19730EF44(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  _DWORD **v3;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  WTF *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(v2 + 104);
  if ((v5 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v6 = *(_DWORD **)(v2 + 96);
  *(_QWORD *)(v2 + 96) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = *(_DWORD **)(v2 + 88);
  *(_QWORD *)(v2 + 88) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *v3;
  *v3 = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = *(WTF **)(v2 + 56);
  if (v9)
  {
    *(_QWORD *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 64) = 0;
    WTF::fastFree(v9, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PDFScriptEvaluation::appendValuesInPDFNameSubtreeToVector(CGPDFDictionaryRef *a1, uint64_t a2)
{
  size_t Count;
  size_t v5;
  size_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  size_t v10;
  size_t i;
  CGPDFDictionaryRef v12;
  CGPDFDictionaryRef v13;
  CGPDFDictionaryRef v14;
  CGPDFObjectRef array;
  CGPDFArrayRef value;

  value = 0;
  if (CGPDFDictionaryGetArray(*a1, "Names", &value))
  {
    Count = CGPDFArrayGetCount(value);
    if (Count >= 2)
    {
      v5 = Count >> 1;
      v6 = 1;
      do
      {
        array = 0;
        CGPDFArrayGetObject(value, v6, &array);
        v7 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v7 == *(_DWORD *)(a2 + 8))
        {
          v8 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v7 + 1, (unint64_t)&array);
          v7 = *(unsigned int *)(a2 + 12);
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = *v8;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = array;
        }
        *(_DWORD *)(a2 + 12) = v7 + 1;
        v6 += 2;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    array = 0;
    if (CGPDFDictionaryGetArray(*a1, "Kids", &array))
    {
      v9 = CGPDFArrayGetCount(array);
      if (v9)
      {
        v10 = v9;
        for (i = 0; i != v10; ++i)
        {
          v14 = 0;
          if (CGPDFArrayGetDictionary(array, i, &v14))
          {
            v12 = v14;
            v13 = v14;
            if (v14)
              CFRetain(v14);
            WebKit::PDFScriptEvaluation::appendValuesInPDFNameSubtreeToVector(&v13, a2);
            v13 = 0;
            if (v12)
              CFRelease(v12);
          }
        }
      }
    }
  }
}

void sub_19730F168(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v11 = *((_QWORD *)v2 + 2);
    v6 = (WTF *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v11 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
  {
    v9 = *((_QWORD *)v6 + 4);
    if (v9)
      WTF::fastFree((WTF *)(v9 - 16), a2);
    v10 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    this = (unsigned __int8 *)WTF::fastFree(v6, a2);
  }
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

unint64_t WTF::Vector<WTF::Range<unsigned long long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Range<unsigned long long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Range<unsigned long long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Range<unsigned long long>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  __int128 v8;

  if (*(unsigned int *)(result + 8) >= a2)
    return result;
  v2 = a2;
  v3 = result;
  v4 = *(WTF **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 < 9)
  {
    result += 16;
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 8;
    if (!(_DWORD)v5)
      goto LABEL_9;
  }
  else
  {
    if (a2 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = result;
    if (!(_DWORD)v5)
      goto LABEL_9;
  }
  v6 = 16 * v5;
  v7 = v4;
  do
  {
    v8 = *(_OWORD *)v7;
    v7 = (WTF *)((char *)v7 + 16);
    *(_OWORD *)result = v8;
    result += 16;
    v6 -= 16;
  }
  while (v6);
LABEL_9:
  if ((WTF *)(v3 + 16) != v4 && v4)
  {
    if (*(WTF **)v3 == v4)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
    }
    return WTF::fastFree(v4, (void *)a2);
  }
  return result;
}

_QWORD *std::__function::__func<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0,std::allocator<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0>,void ()(void)>::~__func(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34D2CB0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 72), a2);
  return a1;
}

void std::__function::__func<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0,std::allocator<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0>,void ()(void)>::~__func(_QWORD *a1, void *a2)
{
  uint64_t v2;

  *a1 = &off_1E34D2CB0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 72), a2);
  JUMPOUT(0x19AEB936CLL);
}

_QWORD *std::__function::__func<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0,std::allocator<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_1E34D2CB0;
  v2[1] = v3;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v4 + 72));
  v2[2] = v4;
  return v2;
}

void sub_19730F4AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 **std::__function::__func<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0,std::allocator<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 **result;

  v3 = *(_QWORD *)(a1 + 8);
  *a2 = &off_1E34D2CB0;
  a2[1] = v3;
  v4 = *(_QWORD *)(a1 + 16);
  result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v4 + 72));
  a2[2] = v4;
  return result;
}

unsigned __int8 *std::__function::__func<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0,std::allocator<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0>,void ()(void)>::destroy(unsigned __int8 *result, void *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = 0;
  if (v2)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 72), a2);
  return result;
}

void std::__function::__func<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0,std::allocator<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p, void *a2)
{
  uint64_t v3;

  v3 = __p[2];
  __p[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 72), a2);
  operator delete(__p);
}

_DWORD *std::__function::__func<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0,std::allocator<WebKit::PDFPluginBase::tryRunScriptsInPDFDocument(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  WebKit::PDFPluginBase *v1;
  _DWORD *result;
  _DWORD *v3;
  WebCore::Chrome *v4;
  WebCore::LocalFrame *v5;

  v1 = *(WebKit::PDFPluginBase **)(a1 + 8);
  result = (_DWORD *)WebKit::PDFPluginBase::page(v1);
  if (result)
  {
    v3 = result;
    ++*result;
    v4 = (WebCore::Chrome *)*((_QWORD *)result + 6);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 13) + 8) + 24) + 8) + 144))
      v5 = 0;
    else
      v5 = *(WebCore::LocalFrame **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 13) + 8) + 24) + 8);
    WebCore::Chrome::print(v4, v5);
    return WTF::RefCounted<WebCore::Page>::deref(v3);
  }
  return result;
}

void sub_19730F5B4(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

_DWORD *WTF::RefCounted<WebCore::Page>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    v1 = (WTF *)MEMORY[0x19AEB48CC]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

WebCore::WindowProxy *WTF::RefCounted<WebCore::WindowProxy>::deref(WebCore::WindowProxy *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::WindowProxy::~WindowProxy(result);
    return (WebCore::WindowProxy *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t std::__throw_bad_function_call[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return WebKit::WebBackForwardCacheEntry::WebBackForwardCacheEntry();
}

_QWORD *WebKit::WebBackForwardCacheEntry::WebBackForwardCacheEntry(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  WTF::RunLoop::TimerBase *v8;
  WTF::RunLoop *v9;
  _QWORD *v10;

  *a1 = a2;
  a1[1] = a5;
  a1[2] = a3;
  a1[3] = a4;
  v7 = *a6;
  *a6 = 0;
  a1[4] = v7;
  v8 = (WTF::RunLoop::TimerBase *)(a1 + 5);
  v9 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)a1);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E34D2D90;
  v10[1] = WebKit::WebBackForwardCacheEntry::expirationTimerFired;
  v10[2] = 0;
  v10[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase(v8, v9);
  a1[5] = off_1E34ABE00;
  a1[8] = v10;
  WTF::RunLoop::TimerBase::start();
  return a1;
}

WebKit::WebBackForwardCacheEntry *WebKit::WebBackForwardCacheEntry::expirationTimerFired(WebKit::WebBackForwardCacheEntry *this)
{
  NSObject *v2;
  uint64_t v3;
  char *v4;
  _BOOL4 v5;
  void *v6;
  WTF *v7;
  uint64_t *v8;
  WebKit::WebBackForwardListItem *v9;
  WTF::StringImpl *v11;
  WTF *v12;
  uint8_t buf[4];
  WebKit::WebBackForwardCacheEntry *v14;
  __int16 v15;
  char *v16;
  __int16 v17;
  _BOOL4 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE70F60;
  v3 = os_log_type_enabled((os_log_t)qword_1ECE70F60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v3)
  {
    WTF::makeString<unsigned long long,char,unsigned long long>(*((_QWORD *)this + 3), 45, *((_QWORD *)this + 2), &v11);
    WTF::String::utf8();
    if (v12)
      v4 = (char *)v12 + 16;
    else
      v4 = 0;
    v5 = *((_QWORD *)this + 4) != 0;
    *(_DWORD *)buf = 134218498;
    v14 = this;
    v15 = 2080;
    v16 = v4;
    v17 = 1024;
    v18 = v5;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebBackForwardCacheEntry::expirationTimerFired backForwardItemID=%s, hasSuspendedPage=%d", buf, 0x1Cu);
    v7 = v12;
    v12 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, v6);
      else
        --*(_DWORD *)v7;
    }
    v3 = (uint64_t)v11;
    v11 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        v3 = WTF::StringImpl::destroy((WTF::StringImpl *)v3, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v8 = WebKit::WebBackForwardListItem::allItems((WebKit::WebBackForwardListItem *)v3);
  v9 = (WebKit::WebBackForwardListItem *)WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v8, (_QWORD *)this + 2);
  return WebKit::WebBackForwardCache::removeEntry(*(WebKit::WebBackForwardCache **)this, v9);
}

void WebKit::WebBackForwardCacheEntry::~WebBackForwardCacheEntry(WebKit::WebBackForwardCacheEntry *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  char v18;
  IPC::Encoder *v19;

  v2 = (uint64_t *)((char *)this + 16);
  if (*((_QWORD *)this + 2) && !*((_QWORD *)this + 4))
  {
    v17[0] = *((_QWORD *)this + 1);
    {
      WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
    }
    v3 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v17);
    if (v3)
    {
      v4 = v3;
      v5 = (unsigned int *)(v3 + 16);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 2573;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v19 = (IPC::Encoder *)v7;
      IPC::ArgumentCoder<WebKit::EditingRange,void>::encode((IPC::Encoder *)v7, v2);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E34D2DB8;
      v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v17[0] = v8;
      v17[1] = v9;
      v18 = 1;
      WebKit::AuxiliaryProcessProxy::sendMessage(v4, &v19, 0, (uint64_t)v17, 1);
      if (v18)
      {
        v11 = v17[0];
        v17[0] = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      v12 = v19;
      v19 = 0;
      if (v12)
      {
        IPC::Encoder::~Encoder(v12, v10);
        WTF::fastFree(v13, v14);
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
    }
  }
  *((_QWORD *)this + 5) = off_1E34ABE00;
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::WebBackForwardCacheEntry *)((char *)this + 40));
  v16 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
}

WebKit::WebBackForwardList *WebKit::WebBackForwardList::WebBackForwardList(WebKit::WebBackForwardList *this, WebKit::WebPageProxy *a2)
{
  unsigned int *v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34D2CF8;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v4 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = v4;
  *((_BYTE *)this + 40) = 0;
  return this;
}

void WebKit::WebBackForwardList::~WebBackForwardList(WebKit::WebBackForwardList *this, void *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34D2CF8;
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v3);
    }
  }
}

{
  WebKit::WebBackForwardList::~WebBackForwardList(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebBackForwardList::itemForID(WebKit::WebBackForwardListItem *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *((_QWORD *)a1 + 2);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return 0;
  v4 = WebKit::WebBackForwardListItem::allItems(a1);
  return WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v4, a2);
}

WebKit::ViewSnapshot *WebKit::WebBackForwardList::didRemoveItem(WebKit::WebBackForwardList *this, WebKit::WebBackForwardListItem *a2)
{
  WebKit::WebBackForwardCache **v4;
  uint64_t v5;
  uint64_t v6;
  WebKit::ViewSnapshot *result;
  uint64_t *v8;

  v4 = (WebKit::WebBackForwardCache **)*((_QWORD *)a2 + 52);
  if (v4)
    WebKit::WebBackForwardCache::removeEntry(*v4, a2);
  v5 = *((_QWORD *)this + 2);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v6 - 8));
    v8 = (uint64_t *)((char *)a2 + 32);
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidRemoveBackForwardItem>(*(_QWORD *)(v6 + 192), &v8, *(_QWORD *)(*(_QWORD *)(v6 + 16) + 1896), 0);
    CFRelease(*(CFTypeRef *)(v6 - 8));
  }
  else
  {
    v8 = (uint64_t *)((char *)a2 + 32);
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::DidRemoveBackForwardItem>(MEMORY[0xD0], &v8, *(_QWORD *)(MEMORY[0x20] + 1896), 0);
  }
  result = (WebKit::ViewSnapshot *)*((_QWORD *)a2 + 42);
  *((_QWORD *)a2 + 42) = 0;
  if (result)
    return WTF::RefCounted<WebKit::ViewSnapshot>::deref(result);
  return result;
}

void WebKit::WebBackForwardList::addItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      v56 = 0;
      v57 = 0;
      if (*(_BYTE *)(a1 + 48))
      {
        WebKit::WebPageProxy::recordAutomaticNavigationSnapshot((WebKit::WebPageProxy *)(v3 - 16));
        if (!*(_BYTE *)(a1 + 48))
          goto LABEL_60;
        v6 = *(unsigned int *)(a1 + 36);
        v7 = (*(_DWORD *)(a1 + 40) + 1);
        v8 = v6 - v7;
        if (v6 != v7)
        {
          if (v8 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x197310098);
          }
          LODWORD(v57) = v6 - v7;
          v56 = WTF::fastMalloc((WTF *)(8 * v8));
          v6 = *(unsigned int *)(a1 + 36);
        }
        v9 = (uint64_t **)(a1 + 24);
        while (v7 < v6)
        {
          if (!(_DWORD)v6)
            goto LABEL_61;
          WebKit::WebBackForwardList::didRemoveItem((WebKit::WebBackForwardList *)a1, *(WebKit::WebBackForwardListItem **)(*(_QWORD *)(a1 + 24) + 8 * v6 - 8));
          v10 = *(unsigned int *)(a1 + 36);
          if (!(_DWORD)v10)
          {
            __break(0xC471u);
            JUMPOUT(0x197310060);
          }
          v11 = v10 - 1;
          v12 = &(*v9)[v10 - 1];
          v13 = HIDWORD(v57);
          if (HIDWORD(v57) == (_DWORD)v57)
          {
            v14 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, HIDWORD(v57) + 1, (unint64_t)v12);
            v15 = HIDWORD(v57);
            v16 = v56;
            v17 = *v14;
            *v14 = 0;
            *(_QWORD *)(v16 + 8 * v15) = v17;
            v18 = *(unsigned int *)(a1 + 36);
            HIDWORD(v57) = v15 + 1;
            if (!(_DWORD)v18)
            {
              __break(0xC471u);
              JUMPOUT(0x197310078);
            }
            v11 = v18 - 1;
          }
          else
          {
            v19 = v56;
            v20 = *v12;
            *v12 = 0;
            *(_QWORD *)(v19 + 8 * v13) = v20;
            HIDWORD(v57) = v13 + 1;
          }
          WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1 + 24, v11);
          v6 = *(unsigned int *)(a1 + 36);
        }
        v21 = *(unsigned __int8 *)(a1 + 48);
        if (v6 >= 0x64)
        {
          if (!*(_BYTE *)(a1 + 48))
            goto LABEL_60;
          v22 = *(_QWORD *)(a1 + 40);
          if (!v22)
            goto LABEL_39;
          WebKit::WebBackForwardList::didRemoveItem((WebKit::WebBackForwardList *)a1, **(WebKit::WebBackForwardListItem ***)(a1 + 24));
          if (!*(_DWORD *)(a1 + 36))
          {
            __break(0xC471u);
            goto LABEL_71;
          }
          v23 = *v9;
          v24 = HIDWORD(v57);
          if (HIDWORD(v57) == (_DWORD)v57)
          {
            v23 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, HIDWORD(v57) + 1, (unint64_t)v23);
            v24 = HIDWORD(v57);
          }
          v25 = (_QWORD *)(v56 + 8 * HIDWORD(v57));
          v34 = *v23;
          *v23 = 0;
          *v25 = v34;
          HIDWORD(v57) = v24 + 1;
          v35 = *v9;
          v36 = *v35;
          *v35 = 0;
          if (v36)
            CFRelease(*(CFTypeRef *)(v36 + 8));
          memmove(v35, v35 + 1, *(_QWORD *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 36) - (_QWORD)(v35 + 1));
          LODWORD(v6) = *(_DWORD *)(a1 + 36) - 1;
          *(_DWORD *)(a1 + 36) = v6;
          if ((_DWORD)v6)
          {
            if (*(_BYTE *)(a1 + 48))
            {
              v22 = *(_QWORD *)(a1 + 40) - 1;
              *(_QWORD *)(a1 + 40) = v22;
LABEL_39:
              if (v22 >= v6)
              {
                __break(0xC471u);
                JUMPOUT(0x197310080);
              }
              if (WebKit::WebPageProxy::shouldKeepCurrentBackForwardListItemInList(v3 - 16, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v22)))
              {
                if (*(_BYTE *)(a1 + 48))
                {
                  v37 = *(_QWORD *)(a1 + 40) + 1;
                  *(_QWORD *)(a1 + 40) = v37;
                  v38 = *a2;
                  v6 = *(unsigned int *)(a1 + 36);
                  if (v37 > v6)
                  {
LABEL_58:
                    WebKit::WebPageProxy::didChangeBackForwardList(v3 - 16, v38, (uint64_t)&v56);
                    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v54);
                    CFRelease(*(CFTypeRef *)(v3 - 8));
                    return;
                  }
LABEL_50:
                  if ((_DWORD)v6 == *(_DWORD *)(a1 + 32))
                  {
                    a2 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v6 + 1, (unint64_t)a2);
                    LODWORD(v6) = *(_DWORD *)(a1 + 36);
                  }
                  v47 = *(_QWORD *)(a1 + 24);
                  v48 = (uint64_t *)(v47 + 8 * v37);
                  memmove(v48 + 1, v48, v47 + 8 * v6 - (_QWORD)v48);
                  v49 = *a2;
                  *a2 = 0;
                  *v48 = v49;
                  ++*(_DWORD *)(a1 + 36);
                  goto LABEL_58;
                }
              }
              else if (*(_BYTE *)(a1 + 48))
              {
                v39 = *(_QWORD *)(a1 + 40);
                if (v39 >= *(unsigned int *)(a1 + 36))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197310088);
                }
                v38 = *a2;
                v40 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v39);
                CFRetain(*(CFTypeRef *)(v40 + 8));
                v55 = v40;
                v41 = HIDWORD(v57);
                if (HIDWORD(v57) == (_DWORD)v57)
                {
                  v42 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, HIDWORD(v57) + 1, (unint64_t)&v55);
                  v43 = HIDWORD(v57);
                  v44 = v56;
                  v45 = *v42;
                  *v42 = 0;
                  *(_QWORD *)(v44 + 8 * v43) = v45;
                  v46 = v55;
                  HIDWORD(v57) = v43 + 1;
                  v55 = 0;
                  if (v46)
                    CFRelease(*(CFTypeRef *)(v46 + 8));
                }
                else
                {
                  *(_QWORD *)(v56 + 8 * HIDWORD(v57)) = v40;
                  HIDWORD(v57) = v41 + 1;
                }
                if (*(_BYTE *)(a1 + 48))
                {
                  v50 = *(_QWORD *)(a1 + 40);
                  if (v50 >= *(unsigned int *)(a1 + 36))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197310090);
                  }
                  v51 = *(_QWORD *)(a1 + 24);
                  v52 = *a2;
                  *a2 = 0;
                  v53 = *(_QWORD *)(v51 + 8 * v50);
                  *(_QWORD *)(v51 + 8 * v50) = v52;
                  if (v53)
                    CFRelease(*(CFTypeRef *)(v53 + 8));
                  goto LABEL_58;
                }
              }
            }
LABEL_60:
            __break(1u);
LABEL_61:
            __break(0xC471u);
LABEL_71:
            JUMPOUT(0x197310058);
          }
LABEL_49:
          v37 = 0;
          *(_BYTE *)(a1 + 48) = 1;
          *(_QWORD *)(a1 + 40) = 0;
          v38 = *a2;
          goto LABEL_50;
        }
      }
      else
      {
        v26 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v26)
        {
          v27 = 0;
          v28 = 0;
          v29 = 8 * v26;
          do
          {
            if (v28 >= *(unsigned int *)(a1 + 36))
            {
              __break(0xC471u);
              JUMPOUT(0x197310068);
            }
            WebKit::WebBackForwardList::didRemoveItem((WebKit::WebBackForwardList *)a1, *(WebKit::WebBackForwardListItem **)(*(_QWORD *)(a1 + 24) + v27));
            if (v28 >= *(unsigned int *)(a1 + 36))
            {
              __break(0xC471u);
              JUMPOUT(0x197310070);
            }
            v30 = (uint64_t *)(*(_QWORD *)(a1 + 24) + v27);
            v31 = HIDWORD(v57);
            if (HIDWORD(v57) == (_DWORD)v57)
            {
              v30 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v56, HIDWORD(v57) + 1, (unint64_t)v30);
              v31 = HIDWORD(v57);
            }
            v32 = (_QWORD *)(v56 + 8 * HIDWORD(v57));
            v33 = *v30;
            *v30 = 0;
            *v32 = v33;
            HIDWORD(v57) = v31 + 1;
            ++v28;
            v27 += 8;
          }
          while (v29 != v27);
        }
        WTF::Vector<WTF::Ref<WebKit::WebBackForwardListItem,WTF::RawPtrTraits<WebKit::WebBackForwardListItem>,WTF::DefaultRefDerefTraits<WebKit::WebBackForwardListItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 24, 0);
        v21 = *(unsigned __int8 *)(a1 + 48);
      }
      if (v21)
      {
        v22 = *(_QWORD *)(a1 + 40);
        LODWORD(v6) = *(_DWORD *)(a1 + 36);
        goto LABEL_39;
      }
      LODWORD(v6) = *(_DWORD *)(a1 + 36);
      goto LABEL_49;
    }
  }
}

uint64_t *WebKit::WebBackForwardList::addRootChildFrameItem(uint64_t *this, WebKit::WebBackForwardListItem **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = this[2];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 264);
      if (v4)
      {
        v6 = (uint64_t)this;
        v7 = 0;
        v8 = *(_QWORD *)(v4 + 272);
        v9 = *(_QWORD *)(v4 + 280);
        while (1)
        {
          this = (uint64_t *)WebKit::WebBackForwardList::itemAtIndex(v6, v7);
          if (!this)
            break;
          v10 = (uint64_t)this;
          --v7;
          if (this[50] == v8 && this[51] == v9)
          {
            WebKit::WebBackForwardListItem::setMainFrameItem(*a2, (WebKit::WebBackForwardListItem *)this);
            return WebKit::WebBackForwardListItem::addRootChildFrameItem(v10, (unint64_t)a2);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebBackForwardList::itemAtIndex(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (!*(_BYTE *)(this + 48))
    return 0;
  v2 = *(_QWORD *)(this + 16);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return 0;
  v3 = *(_QWORD *)(this + 40);
  if ((a2 & 0x80000000) != 0)
  {
    if (v3 < -a2)
      return 0;
  }
  else if (a2 && *(_DWORD *)(this + 36) + ~(_DWORD)v3 < a2)
  {
    return 0;
  }
  v4 = v3 + (int)a2;
  if (v4 < *(unsigned int *)(this + 36))
    return *(_QWORD *)(*(_QWORD *)(this + 24) + 8 * v4);
  __break(0xC471u);
  return this;
}

unsigned int *WebKit::WebBackForwardListItem::setMainFrameItem(WebKit::WebBackForwardListItem *this, WebKit::WebBackForwardListItem *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int v8;

  if (a2)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 4, (uint64_t)a2);
    v4 = (unsigned int *)*((_QWORD *)a2 + 2);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
  }
  else
  {
    v4 = 0;
  }
  result = (unsigned int *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = v4;
  if (result)
  {
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t *WebKit::WebBackForwardListItem::addRootChildFrameItem(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (uint64_t *)a2;
  result = (uint64_t *)(a1 + 432);
  v5 = *(unsigned int *)(a1 + 444);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 440))
  {
    result = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v5 + 1, a2);
    v2 = result;
    v5 = *(unsigned int *)(a1 + 444);
    v6 = (_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v5);
  }
  else
  {
    v6 = (_QWORD *)(*result + 8 * v5);
  }
  v7 = *v2;
  *v2 = 0;
  *v6 = v7;
  *(_DWORD *)(a1 + 444) = v5 + 1;
  return result;
}

void WebKit::WebBackForwardList::goToItem(WebKit::WebBackForwardList *this, WebKit::WebBackForwardListItem *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  WebKit::WebBackForwardListItem *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::DiagnosticLoggingKeys *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unint64_t v19;
  char shouldKeepCurrentBackForwardListItemInList;
  CFTypeRef *v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      v6 = *((unsigned int *)this + 9);
      if (!(_DWORD)v6 || !*((_BYTE *)this + 48))
        goto LABEL_48;
      v7 = *((_QWORD *)a2 + 53);
      if (v7)
      {
        v8 = *(WebKit::WebBackForwardListItem **)(v7 + 8);
        if (v8)
          a2 = v8;
      }
      v9 = 0;
      while (*(WebKit::WebBackForwardListItem **)(*((_QWORD *)this + 3) + 8 * v9) != a2)
      {
        if (v6 == ++v9)
          goto LABEL_48;
      }
      v10 = *((_QWORD *)this + 5);
      if (v9 < v10)
      {
        v11 = (v6 - 1);
        if ((v11 - v9) < 0xB)
        {
          v12 = (WebCore::DiagnosticLoggingKeys *)WTF::String::number((WTF::String *)(v11 - v9));
        }
        else
        {
          v12 = (WebCore::DiagnosticLoggingKeys *)WTF::StringImpl::createWithoutCopyingNonEmpty();
          v34 = v32;
        }
        WebCore::DiagnosticLoggingKeys::backNavigationDeltaKey(v12);
        v14 = *(_QWORD *)(*(_QWORD *)(v3 + 248) + 24);
        if ((v14 & 0x8000000000000000) == 0 || v14 == -1)
        {
          v15 = *(_QWORD *)(v3 + 112);
          if (v15)
            (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, v3 - 16, &v32, &v34);
        }
        v16 = v32;
        v32 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v13);
          else
            *(_DWORD *)v16 -= 2;
        }
        v17 = v34;
        v34 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v13);
          else
            *(_DWORD *)v17 -= 2;
        }
        if (!*((_BYTE *)this + 48))
          goto LABEL_54;
        v10 = *((_QWORD *)this + 5);
        v6 = *((unsigned int *)this + 9);
      }
      if (v10 >= v6)
      {
        __break(0xC471u);
        goto LABEL_55;
      }
      v18 = *((_QWORD *)this + 3);
      if (*(WebKit::WebBackForwardListItem **)(v18 + 8 * v10) == a2)
      {
        v32 = 0;
        v33 = 0;
        goto LABEL_47;
      }
      WebKit::WebPageProxy::recordAutomaticNavigationSnapshot((WebKit::WebPageProxy *)(v3 - 16));
      if (*((_BYTE *)this + 48))
      {
        v19 = *((_QWORD *)this + 5);
        if (v19 < *((unsigned int *)this + 9))
        {
          shouldKeepCurrentBackForwardListItemInList = WebKit::WebPageProxy::shouldKeepCurrentBackForwardListItemInList(v3 - 16, *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v19));
          v32 = 0;
          v33 = 0;
          if ((shouldKeepCurrentBackForwardListItemInList & 1) == 0)
          {
            v21 = *(CFTypeRef **)(v18 + 8 * v10);
            CFRetain(v21[1]);
            v34 = (WTF::StringImpl *)v21;
            v22 = HIDWORD(v33);
            if (HIDWORD(v33) == (_DWORD)v33)
            {
              v23 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v32, HIDWORD(v33) + 1, (unint64_t)&v34);
              v24 = HIDWORD(v33);
              v25 = v32;
              v26 = *v23;
              *v23 = 0;
              *((_QWORD *)v25 + v24) = v26;
              v27 = v34;
              HIDWORD(v33) = v24 + 1;
              v34 = 0;
              if (v27)
                CFRelease(*((CFTypeRef *)v27 + 1));
            }
            else
            {
              *((_QWORD *)v32 + HIDWORD(v33)) = v21;
              HIDWORD(v33) = v22 + 1;
            }
            if (*((_BYTE *)this + 48))
            {
              v28 = (uint64_t *)(*((_QWORD *)this + 3) + 8 * *((_QWORD *)this + 5));
              v29 = *v28;
              *v28 = 0;
              if (v29)
                CFRelease(*(CFTypeRef *)(v29 + 8));
              memmove(v28, v28 + 1, *((_QWORD *)this + 3) + 8 * *((unsigned int *)this + 9) - (_QWORD)(v28 + 1));
              v30 = (*((_DWORD *)this + 9) - 1);
              *((_DWORD *)this + 9) = v30;
              if ((_DWORD)v30)
              {
                v9 = 0;
                while (*(WebKit::WebBackForwardListItem **)(*((_QWORD *)this + 3) + 8 * v9) != a2)
                {
                  if (v30 == ++v9)
                    goto LABEL_46;
                }
              }
              else
              {
LABEL_46:
                v9 = -1;
              }
              goto LABEL_47;
            }
            goto LABEL_54;
          }
LABEL_47:
          *((_QWORD *)this + 5) = v9;
          *((_BYTE *)this + 48) = 1;
          WebKit::WebPageProxy::didChangeBackForwardList(v3 - 16, 0, (uint64_t)&v32);
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v31);
LABEL_48:
          CFRelease(*(CFTypeRef *)(v3 - 8));
          return;
        }
        __break(0xC471u);
      }
LABEL_54:
      __break(1u);
LABEL_55:
      JUMPOUT(0x197310590);
    }
  }
}

uint64_t WebKit::WebBackForwardList::backItem(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(this + 16);
  if (!v1)
    return 0;
  if (!*(_QWORD *)(v1 + 8))
    return 0;
  if (!*(_BYTE *)(this + 48))
    return 0;
  v2 = *(_QWORD *)(this + 40);
  if (!v2)
    return 0;
  v3 = v2 - 1;
  if (v3 < *(unsigned int *)(this + 36))
    return *(_QWORD *)(*(_QWORD *)(this + 24) + 8 * v3);
  __break(0xC471u);
  return this;
}

uint64_t WebKit::WebBackForwardList::backList@<X0>(WebKit::WebBackForwardList *this@<X0>, WebKit **a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *((_QWORD *)this + 2);
  if (v2 && *(_QWORD *)(v2 + 8) && *((_BYTE *)this + 48))
    v3 = *((_DWORD *)this + 10);
  else
    v3 = 0;
  return WebKit::WebBackForwardList::backListAsAPIArrayWithLimit(this, v3, a2);
}

uint64_t WebKit::WebBackForwardList::backListAsAPIArrayWithLimit@<X0>(WebKit::WebBackForwardList *this@<X0>, unsigned int a2@<W1>, WebKit **a3@<X8>)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];

  v4 = *((_QWORD *)this + 2);
  if (!v4 || !*(_QWORD *)(v4 + 8) || !*((_BYTE *)this + 48))
    return API::Array::create(a3);
  v6 = *((_DWORD *)this + 10);
  v7 = v6 >= a2 ? a2 : v6;
  if (!(_DWORD)v7)
    return API::Array::create(a3);
  if (v7 >> 29)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x19731072CLL);
  }
  v8 = v6 - v7;
  v9 = WTF::fastMalloc((WTF *)(8 * v7));
  v10 = v7;
  v11 = (_QWORD *)v9;
  do
  {
    if (v8 >= *((unsigned int *)this + 9))
      goto LABEL_14;
    v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v8);
    CFRetain(*(CFTypeRef *)(v12 + 8));
    *v11++ = v12;
    ++v8;
    --v10;
  }
  while (v10);
  v13 = API::Object::newObject(0x20uLL, 1);
  *(_QWORD *)v13 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v13);
  *(_QWORD *)v13 = &off_1E34CC2F8;
  v16[0] = 0;
  v16[1] = 0;
  *(_QWORD *)(v13 + 16) = v9;
  *(_DWORD *)(v13 + 24) = v7;
  *(_DWORD *)(v13 + 28) = v7;
  *a3 = (WebKit *)v13;
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v14);
}

uint64_t WebKit::WebBackForwardList::forwardList@<X0>(WebKit::WebBackForwardList *this@<X0>, WebKit **a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *((_QWORD *)this + 2);
  if (v2 && *(_QWORD *)(v2 + 8) && *((_BYTE *)this + 48))
    v3 = *((_DWORD *)this + 9) + ~*((_DWORD *)this + 10);
  else
    v3 = 0;
  return WebKit::WebBackForwardList::forwardListAsAPIArrayWithLimit(this, v3, a2);
}

uint64_t WebKit::WebBackForwardList::forwardListAsAPIArrayWithLimit@<X0>(WebKit::WebBackForwardList *this@<X0>, unsigned int a2@<W1>, WebKit **a3@<X8>)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];

  v4 = *((_QWORD *)this + 2);
  if (!v4 || !*(_QWORD *)(v4 + 8) || !*((_BYTE *)this + 48))
    return API::Array::create(a3);
  v6 = *((_DWORD *)this + 9) + ~*((_DWORD *)this + 10);
  v7 = v6 >= a2 ? a2 : v6;
  if (!(_DWORD)v7)
    return API::Array::create(a3);
  if (v7 >> 29)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x197310890);
  }
  v8 = *((_QWORD *)this + 5) + 1;
  v9 = WTF::fastMalloc((WTF *)(8 * v7));
  v10 = v7;
  v11 = (_QWORD *)v9;
  do
  {
    if (v8 >= *((unsigned int *)this + 9))
      goto LABEL_14;
    v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v8);
    CFRetain(*(CFTypeRef *)(v12 + 8));
    *v11++ = v12;
    ++v8;
    --v10;
  }
  while (v10);
  v13 = API::Object::newObject(0x20uLL, 1);
  *(_QWORD *)v13 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v13);
  *(_QWORD *)v13 = &off_1E34CC2F8;
  v16[0] = 0;
  v16[1] = 0;
  *(_QWORD *)(v13 + 16) = v9;
  *(_DWORD *)(v13 + 24) = v7;
  *(_DWORD *)(v13 + 28) = v7;
  *a3 = (WebKit *)v13;
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v14);
}

void WebKit::WebBackForwardList::removeAllItems(WebKit::WebBackForwardList *this)
{
  uint64_t v2;
  WebKit::WebBackForwardListItem **v3;
  uint64_t v4;
  WebKit::WebBackForwardListItem *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD v11[2];
  _QWORD v12[2];

  v2 = *((unsigned int *)this + 9);
  if ((_DWORD)v2)
  {
    v3 = (WebKit::WebBackForwardListItem **)*((_QWORD *)this + 3);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      WebKit::WebBackForwardList::didRemoveItem(this, v5);
      v4 -= 8;
    }
    while (v4);
  }
  if (*((_BYTE *)this + 48))
    *((_BYTE *)this + 48) = 0;
  v6 = *((_QWORD *)this + 2);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = v7 - 16;
    CFRetain(*(CFTypeRef *)(v7 - 8));
  }
  else
  {
    v8 = 0;
  }
  v12[0] = *((_QWORD *)this + 3);
  v12[1] = *((_QWORD *)this + 4);
  v11[0] = 0;
  *((_QWORD *)this + 3) = 0;
  v11[1] = 0;
  *((_QWORD *)this + 4) = 0;
  WebKit::WebPageProxy::didChangeBackForwardList(v8, 0, (uint64_t)v12);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v9);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v10);
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
}

void WebKit::WebBackForwardList::clear(WebKit::WebBackForwardList *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  WebKit::WebBackForwardListItem ***v5;
  uint64_t v6;
  unint64_t v7;
  CFTypeRef *v8;
  unint64_t i;
  WebKit::WebBackForwardListItem *v10;
  unsigned int v11;
  unint64_t j;
  WebKit::WebBackForwardListItem **v13;
  WebKit::WebBackForwardListItem **v14;
  WebKit::WebBackForwardListItem *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebKit::WebBackForwardListItem **v22;
  uint64_t v23;
  WebKit::WebBackForwardListItem *v24;
  void *v25;
  void *v26;
  uint64_t *v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      v4 = *((unsigned int *)this + 9);
      if (v4 >= 2)
      {
        v5 = (WebKit::WebBackForwardListItem ***)((char *)this + 24);
        v6 = *((_QWORD *)this + 2);
        if (!v6 || !*(_QWORD *)(v6 + 8) || !*((_BYTE *)this + 48))
          goto LABEL_29;
        v7 = *((_QWORD *)this + 5);
        if (v7 >= v4)
        {
          __break(0xC471u);
          JUMPOUT(0x197310C20);
        }
        v8 = (CFTypeRef *)(*v5)[v7];
        if (v8)
        {
          CFRetain(v8[1]);
          for (i = 0; i != v4; ++i)
          {
            if (i >= *((unsigned int *)this + 9))
              goto LABEL_42;
            v10 = (*v5)[i];
            if (v8 != (CFTypeRef *)v10)
              WebKit::WebBackForwardList::didRemoveItem(this, v10);
          }
          v29 = 0;
          v30 = 0;
          if (v4 >= 0x20000001)
          {
LABEL_42:
            __break(0xC471u);
            JUMPOUT(0x197310C10);
          }
          LODWORD(v30) = v4 - 1;
          v29 = WTF::fastMalloc((WTF *)(8 * (v4 - 1)));
          v11 = 0;
          for (j = 0; j != v4; ++j)
          {
            if (*((_BYTE *)this + 48) && j != *((_QWORD *)this + 5))
            {
              if (j >= *((unsigned int *)this + 9))
              {
                __break(0xC471u);
                JUMPOUT(0x197310C18);
              }
              v13 = &(*v5)[j];
              if (v11 == (_DWORD)v30)
              {
                v13 = (WebKit::WebBackForwardListItem **)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v29, v11 + 1, (unint64_t)v13);
                v11 = HIDWORD(v30);
                v14 = (WebKit::WebBackForwardListItem **)(v29 + 8 * HIDWORD(v30));
              }
              else
              {
                v14 = (WebKit::WebBackForwardListItem **)(v29 + 8 * v11);
              }
              ++v11;
              v15 = *v13;
              *v13 = 0;
              *v14 = v15;
              HIDWORD(v30) = v11;
            }
          }
          if (!*((_BYTE *)this + 48))
            *((_BYTE *)this + 48) = 1;
          *((_QWORD *)this + 5) = 0;
          WTF::Vector<WTF::Ref<WebKit::WebBackForwardListItem,WTF::RawPtrTraits<WebKit::WebBackForwardListItem>,WTF::DefaultRefDerefTraits<WebKit::WebBackForwardListItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 24, 0);
          v28[0] = v8;
          v16 = *((unsigned int *)this + 9);
          if ((_DWORD)v16 == *((_DWORD *)this + 8))
          {
            v17 = (uint64_t *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v16 + 1, (unint64_t)v28);
            v18 = *((unsigned int *)this + 9);
            v19 = *((_QWORD *)this + 3);
            v20 = *v17;
            *v17 = 0;
            *(_QWORD *)(v19 + 8 * v18) = v20;
            v21 = v28[0];
            *((_DWORD *)this + 9) = v18 + 1;
            v28[0] = 0;
            if (v21)
              CFRelease(*(CFTypeRef *)(v21 + 8));
          }
          else
          {
            *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v16) = v8;
            *((_DWORD *)this + 9) = v16 + 1;
          }
          WebKit::WebPageProxy::didChangeBackForwardList(v2 - 16, 0, (uint64_t)&v29);
          v27 = &v29;
        }
        else
        {
LABEL_29:
          v22 = *v5;
          v23 = 8 * v4;
          do
          {
            v24 = *v22++;
            WebKit::WebBackForwardList::didRemoveItem(this, v24);
            v23 -= 8;
          }
          while (v23);
          if (*((_BYTE *)this + 48))
            *((_BYTE *)this + 48) = 0;
          v29 = *((_QWORD *)this + 3);
          v30 = *((_QWORD *)this + 4);
          v28[0] = 0;
          *((_QWORD *)this + 3) = 0;
          v28[1] = 0;
          *((_QWORD *)this + 4) = 0;
          WebKit::WebPageProxy::didChangeBackForwardList(v2 - 16, 0, (uint64_t)&v29);
          WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v25);
          v27 = v28;
        }
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v26);
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

uint64_t WebKit::WebBackForwardList::backForwardListState@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  WebKit::WebBackForwardList *v33;
  BackForwardListState *v34;

  v4 = result;
  *(_BYTE *)(a3 + 20) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  v6 = *(unsigned __int8 *)(result + 48);
  if (*(_BYTE *)(result + 48))
  {
    v7 = *(_QWORD *)(result + 40);
    v6 = 1;
    *(_BYTE *)(a3 + 20) = 1;
    *(_DWORD *)(a3 + 16) = v7;
  }
  if (!*(_DWORD *)(result + 36))
    goto LABEL_33;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(v4 + 24);
    if (*a2
      && (result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(v9 + 8 * v8)),
          (result & 1) == 0))
    {
      if (*(_BYTE *)(a3 + 20))
      {
        v31 = *(unsigned int *)(a3 + 16);
        if ((_DWORD)v31)
        {
          if (v8 <= v31)
            *(_DWORD *)(a3 + 16) = v31 - 1;
        }
      }
    }
    else
    {
      v10 = *(_QWORD *)(v9 + 8 * v8);
      v11 = (_OWORD *)(v10 + 32);
      v12 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v12 == *(_DWORD *)(a3 + 8))
      {
        v13 = WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v12 + 1, (unint64_t)v11);
        v14 = *(_DWORD *)(a3 + 12);
        v15 = *(_QWORD *)a3;
        v16 = *(_QWORD *)a3 + 312 * v14;
        *(_OWORD *)v16 = *(_OWORD *)v13;
        v17 = *(_DWORD **)(v13 + 16);
        if (v17)
          *v17 += 2;
        *(_QWORD *)(v16 + 16) = v17;
        v18 = v15 + 312 * v14;
        result = (uint64_t)WebKit::FrameState::FrameState((WebKit::FrameState *)(v18 + 24), (const WebKit::FrameState *)(v13 + 24));
        *(_BYTE *)(v18 + 272) = *(_BYTE *)(v13 + 272);
        v19 = *(unsigned int **)(v13 + 280);
        if (v19)
        {
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 + 1, v19));
        }
        v21 = v15 + 312 * v14;
        *(_QWORD *)(v21 + 280) = v19;
        *(_BYTE *)(v21 + 288) = *(_BYTE *)(v13 + 288);
        *(_BYTE *)(v21 + 296) = *(_BYTE *)(v13 + 296);
        v22 = *(_DWORD **)(v13 + 304);
        if (v22)
          ++*v22;
        v23 = v15 + 312 * v14;
      }
      else
      {
        v24 = *(_QWORD *)a3;
        v25 = *(_QWORD *)a3 + 312 * v12;
        *(_OWORD *)v25 = *v11;
        v26 = *(_DWORD **)(v10 + 48);
        if (v26)
          *v26 += 2;
        *(_QWORD *)(v25 + 16) = v26;
        v27 = v24 + 312 * v12;
        result = (uint64_t)WebKit::FrameState::FrameState((WebKit::FrameState *)(v27 + 24), (const WebKit::FrameState *)(v10 + 56));
        *(_BYTE *)(v27 + 272) = *(_BYTE *)(v10 + 304);
        v28 = *(unsigned int **)(v10 + 312);
        if (v28)
        {
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
        }
        v30 = v24 + 312 * v12;
        *(_QWORD *)(v30 + 280) = v28;
        *(_BYTE *)(v30 + 288) = *(_BYTE *)(v10 + 320);
        *(_BYTE *)(v30 + 296) = *(_BYTE *)(v10 + 328);
        v22 = *(_DWORD **)(v10 + 336);
        if (v22)
          ++*v22;
        v23 = v24 + 312 * v12;
      }
      *(_QWORD *)(v23 + 304) = v22;
      ++*(_DWORD *)(a3 + 12);
    }
    ++v8;
  }
  while (v8 < *(unsigned int *)(v4 + 36));
  v32 = *(_DWORD *)(a3 + 12);
  v6 = *(unsigned __int8 *)(a3 + 20);
  if (v32)
  {
    if (*(_BYTE *)(a3 + 20))
    {
      if (v32 <= *(_DWORD *)(a3 + 16))
        *(_DWORD *)(a3 + 16) = v32 - 1;
    }
    else
    {
      v33 = (WebKit::WebBackForwardList *)std::__throw_bad_optional_access[abi:sn180100]();
      return WebKit::WebBackForwardList::restoreFromState(v33, v34);
    }
  }
  else
  {
LABEL_33:
    if (v6)
      *(_BYTE *)(a3 + 20) = 0;
  }
  return result;
}

uint64_t WebKit::WebBackForwardList::restoreFromState(uint64_t this, BackForwardListState *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t m_size;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  BackForwardListItemState *m_buffer;
  BackForwardListItemState *v10;
  uint64_t v11;
  WebCore::Process *IdentifierInternal;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  BOOL engaged;
  uint64_t val;
  uint64_t v23[2];

  v2 = *(_QWORD *)(this + 16);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = this;
    m_size = a2->items.m_size;
    if ((_DWORD)m_size)
    {
      if (m_size >> 29)
      {
        __break(0xC471u);
        return this;
      }
      v6 = WTF::fastMalloc((WTF *)(8 * m_size));
      v7 = a2->items.m_size;
      if (v7)
      {
        v8 = 0;
        m_buffer = a2->items.m_buffer;
        v10 = (BackForwardListItemState *)((char *)a2->items.m_buffer + 312 * v7);
        do
        {
          v11 = v8;
          IdentifierInternal = (WebCore::Process *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
          v13 = WebCore::Process::identifier(IdentifierInternal);
          *(_QWORD *)m_buffer = IdentifierInternal;
          *((_QWORD *)m_buffer + 1) = v13;
          v14 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
          if (v14)
            v15 = v14 - 16;
          else
            v15 = 0;
          WebKit::WebBackForwardListItem::create((WTF::RunLoop *)m_buffer, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 744), v23);
          v8 = v11 + 1;
          *(_QWORD *)(v6 + 8 * v11) = v23[0];
          m_buffer = (BackForwardListItemState *)((char *)m_buffer + 312);
        }
        while (m_buffer != v10);
      }
      else
      {
        LODWORD(v8) = 0;
      }
    }
    else
    {
      LODWORD(v8) = 0;
      v6 = 0;
    }
    v16 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v16)
    {
      v17 = *(uint64_t **)(v4 + 24);
      v18 = 8 * v16;
      do
      {
        v19 = *v17;
        *v17 = 0;
        if (v19)
          CFRelease(*(CFTypeRef *)(v19 + 8));
        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
    v20 = *(WTF **)(v4 + 24);
    if (v20)
    {
      *(_QWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 32) = 0;
      WTF::fastFree(v20, a2);
    }
    v23[0] = 0;
    v23[1] = 0;
    *(_QWORD *)(v4 + 24) = v6;
    *(_DWORD *)(v4 + 32) = m_size;
    *(_DWORD *)(v4 + 36) = v8;
    this = WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, a2);
    engaged = a2->currentIndex.__engaged_;
    if (engaged)
    {
      val = a2->currentIndex.var0.__val_;
      engaged = 1;
    }
    else
    {
      val = 0;
    }
    *(_QWORD *)(v4 + 40) = val;
    *(_BYTE *)(v4 + 48) = engaged;
  }
  return this;
}

uint64_t WebKit::itemSkippingBackForwardItemsAddedByJSWithoutUserGesture(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8_t v19[16];
  uint8_t buf[16];

  if (a2)
    v4 = 1;
  else
    v4 = -1;
  v5 = WebKit::WebBackForwardList::itemAtIndex(a1, v4);
  if (!v5)
    return v5;
  result = WTF::linkedOnOrAfterSDKWithBehavior();
  if (!(_DWORD)result)
    return v5;
  if (a2)
    goto LABEL_9;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 < *(unsigned int *)(a1 + 36))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v7) + 320))
    {
LABEL_9:
      if (*(_BYTE *)(v5 + 320))
      {
        v8 = 0;
        while (1)
        {
          v9 = WebKit::WebBackForwardList::itemAtIndex(a1, 2 * v4 + v8);
          if (!v9)
            break;
          v10 = v9;
          v11 = qword_1ECE71320;
          if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "UI Navigation is skipping a WebBackForwardListItem because it was added by JavaScript without user interaction", buf, 2u);
          }
          v8 += v4;
          if (!*(_BYTE *)(v10 + 320))
          {
            v4 += v8;
            if (a2)
              goto LABEL_21;
            goto LABEL_16;
          }
        }
      }
      else
      {
        v10 = v5;
        if (a2)
        {
LABEL_21:
          v15 = WebKit::WebBackForwardList::itemAtIndex(a1, v4 + 1);
          if (v15)
          {
            v16 = v15;
            v5 = v10;
            if (*(_BYTE *)(v15 + 320))
            {
              v17 = WebKit::WebBackForwardList::itemAtIndex(a1, v4 + 1);
              if (v17)
              {
                v18 = v4 + 2;
                do
                {
                  v5 = v16;
                  if (!*(_BYTE *)(v17 + 320))
                    break;
                  v16 = v17;
                  v17 = WebKit::WebBackForwardList::itemAtIndex(a1, v18++);
                  v5 = v16;
                }
                while (v17);
              }
              else
              {
                return v16;
              }
            }
          }
          else
          {
            return v10;
          }
        }
        else
        {
LABEL_16:
          v12 = WebKit::WebBackForwardList::itemAtIndex(a1, v4 - 1);
          if (v12)
          {
            v13 = v12;
            v14 = qword_1ECE71320;
            if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v19 = 0;
              _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "UI Navigation is skipping a WebBackForwardListItem that has user interaction because we started on an item that didn't have interaction", v19, 2u);
            }
            return v13;
          }
        }
      }
    }
    return v5;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WebKit::WebContextClient::networkProcessDidCrash(_QWORD *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD);
  uint64_t v8;

  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))result[8];
  if (v4)
  {
    if (a2)
      v5 = *(_QWORD *)(a2 + 8);
    else
      v5 = 0;
    if (a4 > 9)
      v6 = 3;
    else
      v6 = dword_1978D0548[(char)a4];
    return (_QWORD *)v4(v5, a3, v6, result[1]);
  }
  else
  {
    v7 = (uint64_t (*)(uint64_t, _QWORD))result[3];
    if (v7)
    {
      if (a2)
        v8 = *(_QWORD *)(a2 + 8);
      else
        v8 = 0;
      return (_QWORD *)v7(v8, result[1]);
    }
  }
  return result;
}

_QWORD *WebKit::WebContextClient::serviceWorkerProcessDidCrash(_QWORD *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD);
  uint64_t v8;

  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))result[9];
  if (v4)
  {
    if (a2)
      v5 = *(_QWORD *)(a2 + 8);
    else
      v5 = 0;
    if (a4 > 9)
      v6 = 3;
    else
      v6 = dword_1978D0548[(char)a4];
    return (_QWORD *)v4(v5, a3, v6, result[1]);
  }
  else
  {
    v7 = (uint64_t (*)(uint64_t, uint64_t, _QWORD))result[6];
    if (v7)
    {
      if (a2)
        v8 = *(_QWORD *)(a2 + 8);
      else
        v8 = 0;
      return (_QWORD *)v7(v8, a3, result[1]);
    }
  }
  return result;
}

_QWORD *WebKit::WebContextClient::gpuProcessDidCrash(_QWORD *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD);
  uint64_t v8;

  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))result[10];
  if (v4)
  {
    if (a2)
      v5 = *(_QWORD *)(a2 + 8);
    else
      v5 = 0;
    if (a4 > 9)
      v6 = 3;
    else
      v6 = dword_1978D0548[(char)a4];
    return (_QWORD *)v4(v5, a3, v6, result[1]);
  }
  else
  {
    v7 = (uint64_t (*)(uint64_t, uint64_t, _QWORD))result[7];
    if (v7)
    {
      if (a2)
        v8 = *(_QWORD *)(a2 + 8);
      else
        v8 = 0;
      return (_QWORD *)v7(v8, a3, result[1]);
    }
  }
  return result;
}

void WebKit::WebContextInjectedBundleClient::didReceiveMessageFromInjectedBundle(WebKit::WebContextInjectedBundleClient *this, WebKit::WebProcessPool *a2, WTF::StringImpl **a3, API::Object *a4)
{
  void (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebKit *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebKit *v15;

  v4 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))*((_QWORD *)this + 3);
  if (v4)
  {
    v7 = *((_QWORD *)a2 + 1);
    v8 = *a3;
    if (*a3)
      *(_DWORD *)v8 += 2;
    v14 = v8;
    API::String::create(&v14, &v15);
    v10 = v14;
    v11 = v15;
    v14 = 0;
    v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v11)
        {
LABEL_8:
          v12 = *((_QWORD *)v11 + 1);
          if (a4)
          {
LABEL_9:
            v13 = *((_QWORD *)a4 + 1);
            goto LABEL_10;
          }
LABEL_15:
          v13 = 0;
LABEL_10:
          v4(v7, v12, v13, *((_QWORD *)this + 2));
          if (v11)
            CFRelease(*((CFTypeRef *)v11 + 1));
          return;
        }
LABEL_14:
        v12 = 0;
        if (a4)
          goto LABEL_9;
        goto LABEL_15;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v11)
      goto LABEL_8;
    goto LABEL_14;
  }
}

void WebKit::WebContextInjectedBundleClient::didReceiveSynchronousMessageFromInjectedBundle(_QWORD *a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t *a5)
{
  void (*v8)(uint64_t, uint64_t, uint64_t, id *, _QWORD);
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebKit *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WebKit *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WebKit *v32;

  v8 = (void (*)(uint64_t, uint64_t, uint64_t, id *, _QWORD))a1[4];
  if (v8)
  {
    v29 = 0;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *a3;
    if (*a3)
      *(_DWORD *)v10 += 2;
    v31 = v10;
    API::String::create(&v31, &v32);
    v12 = v31;
    v13 = v32;
    v31 = 0;
    v32 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v11);
        if (v13)
        {
LABEL_8:
          v14 = *((_QWORD *)v13 + 1);
          if (a4)
          {
LABEL_9:
            v15 = *(_QWORD *)(a4 + 8);
            goto LABEL_10;
          }
LABEL_31:
          v15 = 0;
LABEL_10:
          v8(v9, v14, v15, &v29, a1[2]);
          if (v13)
            CFRelease(*((CFTypeRef *)v13 + 1));
          v16 = (uint64_t)v29;
          if (v29)
            v16 = objc_msgSend(v29, "_apiObject");
          v28 = v16;
          WTF::CompletionHandler<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()(a5, &v28);
          v17 = v28;
          v28 = 0;
          if (v17)
            goto LABEL_15;
          return;
        }
LABEL_30:
        v14 = 0;
        if (a4)
          goto LABEL_9;
        goto LABEL_31;
      }
      *(_DWORD *)v12 -= 2;
    }
    if (v13)
      goto LABEL_8;
    goto LABEL_30;
  }
  v19 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))a1[6];
  if (v19)
  {
    v20 = *(_QWORD *)(a2 + 8);
    v21 = *a3;
    if (*a3)
      *(_DWORD *)v21 += 2;
    v31 = v21;
    API::String::create(&v31, &v32);
    v23 = v31;
    v24 = v32;
    v31 = 0;
    v32 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::destroy(v23, v22);
        if (v24)
        {
LABEL_23:
          v25 = *((_QWORD *)v24 + 1);
          if (!a4)
          {
LABEL_25:
            v26 = API::Object::newObject(0x18uLL, 75);
            *(_QWORD *)v26 = off_1E34CC2A8;
            WebKit::InitializeWebKit2((WebKit *)v26);
            *(_QWORD *)v26 = &off_1E34D2E08;
            v27 = *a5;
            *a5 = 0;
            *(_QWORD *)(v26 + 16) = v27;
            v19(v20, v25, a4, *(_QWORD *)(v26 + 8), a1[2]);
            CFRelease(*(CFTypeRef *)(v26 + 8));
            if (!v24)
              return;
            v18 = (const void *)*((_QWORD *)v24 + 1);
            goto LABEL_27;
          }
LABEL_24:
          a4 = *(_QWORD *)(a4 + 8);
          goto LABEL_25;
        }
LABEL_35:
        v25 = 0;
        if (!a4)
          goto LABEL_25;
        goto LABEL_24;
      }
      *(_DWORD *)v23 -= 2;
    }
    if (v24)
      goto LABEL_23;
    goto LABEL_35;
  }
  v30 = 0;
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()(a5, &v30);
  v17 = v30;
  v30 = 0;
  if (v17)
  {
LABEL_15:
    v18 = *(const void **)(v17 + 8);
LABEL_27:
    CFRelease(v18);
  }
}

uint64_t WTF::CompletionHandler<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  v6 = v3;
  v7 = v2;
  WTF::Function<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()(&v7, &v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  result = v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void *WebKit::WebContextInjectedBundleClient::getInjectedBundleInitializationUserData@<X0>(WebKit::WebContextInjectedBundleClient *this@<X0>, WebKit::WebProcessPool *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t (*v4)(_QWORD, _QWORD);
  void *result;

  v4 = (uint64_t (*)(_QWORD, _QWORD))*((_QWORD *)this + 5);
  if (v4)
  {
    result = (void *)v4(*((_QWORD *)a2 + 1), *((_QWORD *)this + 2));
    if (result)
      result = (void *)objc_msgSend(result, "_apiObject");
  }
  else
  {
    result = 0;
  }
  *a3 = result;
  return result;
}

void WebKit::WebDataListSuggestionsDropdown::~WebDataListSuggestionsDropdown(WebKit::WebDataListSuggestionsDropdown *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = off_1E34D2D58;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

_DWORD *WebKit::WebDataListSuggestionsDropdown::close(_DWORD *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      this = WebKit::WebPageProxy::didCloseSuggestions((WebKit::WebPageProxy *)(v3 - 16));
    do
    {
      v4 = __ldaxr((unsigned int *)v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v2));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v2);
      return (_DWORD *)WTF::fastFree((WTF *)v2, a2);
    }
  }
  return this;
}

uint64_t API::ObjectImpl<(API::Object::Type)43>::type()
{
  return 43;
}

void API::MessageListener::~MessageListener(API::MessageListener *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34D2E08;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34D2E08;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)75>::type()
{
  return 75;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebBackForwardCacheEntry::*&)(void),WebKit::WebBackForwardCacheEntry*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WTF::Vector<WTF::Ref<WebKit::WebBackForwardListItem,WTF::RawPtrTraits<WebKit::WebBackForwardListItem>,WTF::DefaultRefDerefTraits<WebKit::WebBackForwardListItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  WTF *v4;
  uint64_t v5;
  WTF *v6;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    if (*(unsigned int *)(a1 + 12) > a2)
      WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, a2);
    v4 = *(WTF **)a1;
    if (a2)
    {
      if (*(_DWORD *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 8) = a2;
        *(_QWORD *)a1 = WTF::fastRealloc(v4, (void *)(8 * a2));
        return;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(_QWORD *)a1 = v6;
      if (v6 != v4)
        memcpy(v6, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, (void *)a2);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebBackForwardList::itemStates(void)::$_0,BOOL,WebKit::WebBackForwardListItem &>::call()
{
  return 1;
}

void WTF::Function<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *a2;
  *a2 = 0;
  v5 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v5);
  v4 = v5;
  v5 = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WebKit::AsyncPDFRenderer::~AsyncPDFRenderer(WebKit::AsyncPDFRenderer *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned __int8 *v17;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 832))(v3);
    if (v4)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(v4, 0);
  }
  v5 = *((_QWORD *)this + 14);
  if (v5)
    WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::deallocateTable(v5, a2);
  v6 = *((_QWORD *)this + 13);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  v7 = *((_QWORD *)this + 12);
  if (v7)
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(v7, a2);
  v8 = (WTF *)*((_QWORD *)this + 10);
  if (v8)
  {
    do
    {
      v9 = (WTF *)*((_QWORD *)v8 + 3);
      WTF::fastFree(v8, a2);
      v8 = v9;
    }
    while (v9);
  }
  v10 = *((_QWORD *)this + 9);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = *((_QWORD *)this + 7);
  if (v11)
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(v11, a2);
  v12 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  v16 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
    else
      --v16[2];
  }
  v17 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v17)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v17, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::AsyncPDFRenderer::~AsyncPDFRenderer(this, a2);
  WTF::fastFree(v2, v3);
}

void sub_197311ABC(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  unsigned __int8 *v16;

  v4 = *(_QWORD *)(v2 + 112);
  if (v4)
    WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::deallocateTable(v4, a2);
  v5 = *(_QWORD *)(v2 + 104);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  v6 = *(_QWORD *)(v2 + 96);
  if (v6)
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(v6, a2);
  v7 = *(WTF **)(v2 + 80);
  if (v7)
  {
    do
    {
      v8 = (WTF *)*((_QWORD *)v7 + 3);
      WTF::fastFree(v7, a2);
      v7 = v8;
    }
    while (v8);
  }
  v9 = *(_QWORD *)(v2 + 72);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), a2);
  v10 = *(_QWORD *)(v2 + 56);
  if (v10)
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(v10, a2);
  v11 = *(unsigned int **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  v15 = *(_DWORD **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
    else
      --v15[2];
  }
  v16 = *(unsigned __int8 **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v16)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v16, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
  _Unwind_Resume(a1);
}

unsigned __int8 *WebKit::AsyncPDFRenderer::removePagePreviewsOutsideCoverageRect(unsigned __int8 *this, const WebCore::FloatRect *a2)
{
  WTF::Lock *v3;
  unsigned __int8 *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  WTF *v78;
  unsigned int v79;
  WebCore::FloatRect *v80;

  v3 = (WTF::Lock *)*((_QWORD *)this + 3);
  if (!v3)
    return this;
  v4 = this;
  this = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v80, v3, *((_QWORD *)this + 4));
  if (!v80)
    return this;
  WebKit::UnifiedPDFPlugin::pageCoverageForRect(&v78, v80, a2);
  v77 = 0;
  v7 = (uint64_t *)(v4 + 112);
  v6 = *((_QWORD *)v4 + 14);
  if (!v6)
  {
    v10 = 0;
    v8 = 0;
LABEL_12:
    v9 = (uint64_t *)(v6 + 16 * v8);
    goto LABEL_13;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v9 = (uint64_t *)(v6 + 16 * v8);
  if (!*(_DWORD *)(v6 - 12))
  {
    v10 = (uint64_t *)(v6 + 16 * v8);
    goto LABEL_12;
  }
  v10 = (uint64_t *)*((_QWORD *)v4 + 14);
  if ((_DWORD)v8)
  {
    v11 = 16 * v8;
    v10 = (uint64_t *)*((_QWORD *)v4 + 14);
    while ((unint64_t)*v10 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v10 += 2;
      v11 -= 16;
      if (!v11)
      {
        v10 = v9;
        break;
      }
    }
  }
LABEL_13:
  if (v6)
    v12 = (uint64_t *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v12 = 0;
  if (v12 != v10)
  {
    while (1)
    {
      v13 = *v10;
      v14 = (uint64_t)v77;
      if (v77
        || (WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand((uint64_t *)&v77),
            (v14 = (uint64_t)v77) != 0))
      {
        v15 = *(_DWORD *)(v14 - 8);
      }
      else
      {
        v15 = 0;
      }
      v16 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = v15 & ((v18 >> 31) ^ v18);
      v5 = (uint64_t *)(v14 + 8 * v19);
      v20 = *v5;
      if (*v5 != -1)
      {
        v21 = 0;
        v22 = 1;
        while (v20 != v13)
        {
          if (v20 == -2)
            v21 = v5;
          v19 = (v19 + v22) & v15;
          v5 = (uint64_t *)(v14 + 8 * v19);
          v20 = *v5;
          ++v22;
          if (*v5 == -1)
          {
            if (v21)
            {
              *v21 = -1;
              --*((_DWORD *)v77 - 4);
              v5 = v21;
            }
            goto LABEL_28;
          }
        }
        goto LABEL_34;
      }
LABEL_28:
      *v5 = v13;
      v23 = (uint64_t)v77;
      v24 = v77 ? *((_DWORD *)v77 - 3) + 1 : 1;
      *((_DWORD *)v77 - 3) = v24;
      v25 = (*(_DWORD *)(v23 - 16) + v24);
      v26 = *(unsigned int *)(v23 - 4);
      if (v26 > 0x400)
        break;
      if (3 * v26 <= 4 * v25)
        goto LABEL_33;
LABEL_34:
      v27 = v10 + 2;
      v10 = v9;
      if (v27 != v9)
      {
        v10 = v27;
        while ((unint64_t)*v10 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v10 += 2;
          if (v10 == v9)
          {
            v10 = v9;
            break;
          }
        }
      }
      if (v10 == v12)
        goto LABEL_44;
    }
    if (v26 > 2 * v25)
      goto LABEL_34;
LABEL_33:
    WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand((uint64_t *)&v77);
    goto LABEL_34;
  }
LABEL_44:
  if (v79)
  {
    v28 = v78;
    v29 = (WTF *)((char *)v78 + 24 * v79);
    do
    {
      v30 = (uint64_t)v77;
      if (v77)
      {
        v31 = *((_DWORD *)v77 - 2);
        v32 = *(_QWORD *)v28 + ~(*(_QWORD *)v28 << 32);
        v33 = (v32 ^ (v32 >> 22)) + ~((v32 ^ (v32 >> 22)) << 13);
        v34 = (9 * (v33 ^ (v33 >> 8))) ^ ((9 * (v33 ^ (v33 >> 8))) >> 15);
        v35 = v31 & (((v34 + ~(v34 << 27)) >> 31) ^ ((_DWORD)v34 + ~((_DWORD)v34 << 27)));
        v36 = v77[v35];
        if (v36 != *(_QWORD *)v28)
        {
          v37 = 1;
          while (v36 != -1)
          {
            v35 = ((_DWORD)v35 + v37) & v31;
            v36 = v77[v35];
            ++v37;
            if (v36 == *(_QWORD *)v28)
              goto LABEL_53;
          }
          v35 = *((unsigned int *)v77 - 1);
        }
LABEL_53:
        v38 = *((unsigned int *)v77 - 1);
        if (v35 != v38)
        {
          v77[v35] = -2;
          v39 = *(_DWORD *)(v30 - 12) - 1;
          ++*(_DWORD *)(v30 - 16);
          *(_DWORD *)(v30 - 12) = v39;
          if (6 * v39 < v38 && v38 >= 9)
            WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash((uint64_t *)&v77, v38 >> 1);
        }
      }
      v28 = (WTF *)((char *)v28 + 24);
    }
    while (v28 != v29);
  }
  v41 = (uint64_t)v77;
  if (v77)
  {
    v42 = *((unsigned int *)v77 - 1);
    v43 = &v77[v42];
    if (*((_DWORD *)v77 - 3))
    {
      v44 = v77;
      if ((_DWORD)v42)
      {
        v45 = 8 * v42;
        v44 = v77;
        while ((unint64_t)*v44 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v44;
          v45 -= 8;
          if (!v45)
          {
            v44 = v43;
            goto LABEL_71;
          }
        }
      }
      goto LABEL_71;
    }
    v44 = &v77[v42];
  }
  else
  {
    v44 = 0;
    v42 = 0;
  }
  v43 = &v77[v42];
LABEL_71:
  if (v77)
    v46 = &v77[*((unsigned int *)v77 - 1)];
  else
    v46 = 0;
  if (v46 != v44)
  {
    v47 = (uint64_t *)(v4 + 104);
    while (1)
    {
      v48 = *v44;
      v49 = *v47;
      v50 = WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned long>>,unsigned long>(*v47, *v44);
      v5 = v50;
      if (v49)
      {
        v51 = (uint64_t *)(v49 + 40 * *(unsigned int *)(v49 - 4));
        if (v51 != v50)
          goto LABEL_81;
      }
      else if (v50)
      {
        v51 = 0;
LABEL_81:
        if (v51 != v50)
          WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::remove(v47, v50);
      }
      v52 = *v7;
      if (!*v7)
        goto LABEL_118;
      v53 = *(_DWORD *)(v52 - 8);
      v54 = (v48 + ~(v48 << 32)) ^ ((unint64_t)(v48 + ~(v48 << 32)) >> 22);
      v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
      v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
      v57 = v53 & ((v56 >> 31) ^ v56);
      v58 = *(_QWORD *)(v52 + 16 * v57);
      if (v58 != v48)
      {
        v59 = 1;
        while (v58 != -1)
        {
          v57 = ((_DWORD)v57 + v59) & v53;
          v58 = *(_QWORD *)(v52 + 16 * v57);
          ++v59;
          if (v58 == v48)
            goto LABEL_90;
        }
        v57 = *(unsigned int *)(v52 - 4);
      }
LABEL_90:
      if (v57 == *(_DWORD *)(v52 - 4))
        goto LABEL_118;
      v60 = (_QWORD *)(v52 + 16 * v57);
      v61 = v60[1];
      *v60 = -2;
      v60[1] = 0;
      if (!v61)
        goto LABEL_108;
      v62 = *(_QWORD *)(v61 + 8);
      if (__ldaxr((unsigned __int8 *)v62))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v62))
      {
        goto LABEL_96;
      }
      MEMORY[0x19AEABB3C](v62, v5);
LABEL_96:
      v64 = *(_QWORD *)(v62 + 8);
      v65 = v64 - 1;
      *(_QWORD *)(v62 + 8) = v64 - 1;
      if (v64 == 1)
      {
        v76 = *(_QWORD *)(v62 + 16);
        v66 = *(_QWORD *)(v62 + 24);
        *(_QWORD *)(v62 + 24) = 0;
        v67 = v76 != 0;
      }
      else
      {
        v66 = 0;
        v67 = 1;
      }
      v68 = __ldxr((unsigned __int8 *)v62);
      if (v68 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v62))
        {
          if (!v65)
            goto LABEL_104;
          goto LABEL_108;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v62);
      if (!v65)
      {
LABEL_104:
        if (v66)
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v66 + 8))(v66, v5);
        if (!v67)
          WTF::fastFree((WTF *)v62, v5);
      }
LABEL_108:
      ++*(_DWORD *)(*v7 - 16);
      v69 = *v7;
      if (*v7)
        v70 = *(_DWORD *)(v69 - 12) - 1;
      else
        v70 = -1;
      *(_DWORD *)(v69 - 12) = v70;
      v71 = *v7;
      if (*v7)
      {
        v72 = 6 * *(_DWORD *)(v71 - 12);
        v73 = *(_DWORD *)(v71 - 4);
        if (v72 < v73 && v73 >= 9)
          WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(v7, v73 >> 1);
      }
LABEL_118:
      v75 = v44 + 1;
      v44 = v43;
      if (v75 != v43)
      {
        v44 = v75;
        while ((unint64_t)*v44 >= 0xFFFFFFFFFFFFFFFELL)
        {
          if (++v44 == v43)
          {
            v44 = v43;
            break;
          }
        }
      }
      if (v44 == v46)
      {
        v41 = (uint64_t)v77;
        break;
      }
    }
  }
  if (v41)
    WTF::fastFree((WTF *)(v41 - 16), v5);
  this = (unsigned __int8 *)v78;
  if (v78)
    this = (unsigned __int8 *)WTF::fastFree(v78, v5);
  if (v80)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((unsigned __int8 **)v80 + 9), v5);
  return this;
}

void sub_1973121E0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a12 + 72), a2);
  _Unwind_Resume(exception_object);
}

void WebKit::AsyncPDFRenderer::generatePreviewImageForPage(WebKit::AsyncPDFRenderer *this, unint64_t a2, float a3)
{
  WTF::Lock *v4;
  void *v7;
  unsigned __int8 **v8;
  const void *v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = (WTF::Lock *)*((_QWORD *)this + 3);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v41, v4, *((_QWORD *)this + 4));
    v8 = (unsigned __int8 **)v41;
    if (v41)
    {
      v9 = *(const void **)(v41 + 296);
      if (!v9)
      {
LABEL_35:
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v8[9], v7);
        return;
      }
      CFRetain(*(CFTypeRef *)(v41 + 296));
      v11 = (uint64_t *)((char *)this + 104);
      v10 = *((_QWORD *)this + 13);
      if (v10)
      {
        v12 = *(_DWORD *)(v10 - 8);
        v13 = (~(a2 << 32) + a2) ^ ((~(a2 << 32) + a2) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = *(_QWORD *)(v10 + 40 * v16);
        if (v17 == a2)
        {
LABEL_9:
          CFRelease(v9);
          goto LABEL_34;
        }
        v18 = 1;
        while (v17 != -1)
        {
          v16 = (v16 + v18) & v12;
          v17 = *(_QWORD *)(v10 + 40 * v16);
          ++v18;
          if (v17 == a2)
            goto LABEL_9;
        }
      }
      WebKit::UnifiedPDFPlugin::layoutBoundsForPageAtIndex((WebKit::UnifiedPDFPlugin *)v8, a2);
      v20 = v19;
      v22 = v21;
      v23 = *v11;
      if (*v11
        || (WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand((uint64_t *)this + 13),
            (v23 = *v11) != 0))
      {
        v24 = *(_DWORD *)(v23 - 8);
      }
      else
      {
        v24 = 0;
      }
      v25 = (~(a2 << 32) + a2) ^ ((~(a2 << 32) + a2) >> 22);
      v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
      v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
      v28 = v24 & ((v27 >> 31) ^ v27);
      v29 = (unint64_t *)(v23 + 40 * v28);
      v30 = *v29;
      if (*v29 != -1)
      {
        v31 = 0;
        v32 = 1;
        do
        {
          if (v30 == a2)
          {
            v29[1] = a2;
            v29[2] = 0;
            *((_DWORD *)v29 + 6) = v20;
            *((_DWORD *)v29 + 7) = v22;
            *((float *)v29 + 8) = a3;
            goto LABEL_31;
          }
          if (v30 == -2)
            v31 = v29;
          v28 = (v28 + v32) & v24;
          v29 = (unint64_t *)(v23 + 40 * v28);
          v30 = *v29;
          ++v32;
        }
        while (*v29 != -1);
        if (v31)
        {
          *v31 = -1;
          *(_OWORD *)(v31 + 1) = 0u;
          *(_OWORD *)(v31 + 3) = 0u;
          --*(_DWORD *)(*v11 - 16);
          v29 = v31;
        }
      }
      *v29 = a2;
      v29[1] = a2;
      v29[2] = 0;
      *((_DWORD *)v29 + 6) = v20;
      *((_DWORD *)v29 + 7) = v22;
      *((float *)v29 + 8) = a3;
      v33 = *v11;
      if (*v11)
        v34 = *(_DWORD *)(v33 - 12) + 1;
      else
        v34 = 1;
      *(_DWORD *)(v33 - 12) = v34;
      v35 = *v11;
      if (*v11)
        v36 = *(_DWORD *)(v35 - 12);
      else
        v36 = 0;
      v37 = (*(_DWORD *)(v35 - 16) + v36);
      v38 = *(unsigned int *)(v35 - 4);
      if (v38 > 0x400)
      {
        if (v38 > 2 * v37)
          goto LABEL_31;
      }
      else if (3 * v38 > 4 * v37)
      {
LABEL_31:
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*((unsigned __int8 **)this + 2));
        v39 = WTF::fastMalloc((WTF *)0x38);
        *(_QWORD *)v39 = &off_1E34D35B8;
        *(_QWORD *)(v39 + 8) = this;
        *(_QWORD *)(v39 + 16) = v9;
        *(_QWORD *)(v39 + 24) = a2;
        *(_QWORD *)(v39 + 32) = 0;
        *(_DWORD *)(v39 + 40) = v20;
        *(_DWORD *)(v39 + 44) = v22;
        *(float *)(v39 + 48) = a3;
        v40 = v39;
        WTF::ConcurrentWorkQueue::dispatch();
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        v8 = (unsigned __int8 **)v41;
LABEL_34:
        if (!v8)
          return;
        goto LABEL_35;
      }
      WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand((uint64_t *)this + 13);
      goto LABEL_31;
    }
  }
}

void sub_197312504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  void *v12;

  CFRelease(v10);
  if (a10)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a10 + 72), v12);
  _Unwind_Resume(a1);
}

float WebKit::UnifiedPDFPlugin::layoutBoundsForPageAtIndex(WebKit::UnifiedPDFPlugin *this, unint64_t a2)
{
  float v4;
  void *v5;

  v4 = 0.0;
  if ((objc_msgSend(*((id *)this + 37), "isLocked") & 1) == 0)
  {
    v5 = (void *)*((_QWORD *)this + 71);
    if (v5)
    {
      if (objc_msgSend(v5, "pageCount") > a2 && *((unsigned int *)this + 147) > a2)
        return *(float *)(*((_QWORD *)this + 72) + 36 * a2 + 16);
    }
  }
  return v4;
}

BOOL WebKit::AsyncPDFRenderer::renderInfoIsValidForTile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  _BOOL8 v12;
  WTF *v13;
  __int128 v15;
  char v16;
  unsigned __int8 v17[40];
  WTF *v18;
  int v19;
  _DWORD v20[4];

  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    return 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 832))(v4);
  if (!v7)
    return 0;
  v20[0] = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 216))(v7, *(_QWORD *)(a2 + 8));
  v20[1] = v8;
  v20[2] = v9;
  v20[3] = v10;
  LOBYTE(v15) = 0;
  v16 = 0;
  WebKit::AsyncPDFRenderer::renderInfoForTile(v17, a1, (const WebCore::FloatRect *)v20, &v15);
  v12 = WebKit::AsyncPDFRenderer::TileRenderInfo::equivalentForPainting(a3, (uint64_t)v17);
  v13 = v18;
  if (v18)
  {
    v18 = 0;
    v19 = 0;
    WTF::fastFree(v13, v11);
  }
  return v12;
}

unsigned __int8 *WebKit::AsyncPDFRenderer::renderInfoForTile(unsigned __int8 *result, uint64_t a2, const WebCore::FloatRect *a3, __int128 *a4)
{
  unsigned __int8 *v5;
  WTF::Lock *v6;
  void *v9;
  unsigned __int8 **v10;
  const void *v11;
  uint64_t v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  __int128 v18;
  void *v19;
  WTF *v20;
  _DWORD v27[4];
  uint64_t v28;
  WTF *v29[2];
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;

  v5 = result;
  v6 = *(WTF::Lock **)(a2 + 24);
  if (v6
    && (result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v28, v6, *(_QWORD *)(a2 + 32)), (v10 = (unsigned __int8 **)v28) != 0))
  {
    v11 = *(const void **)(v28 + 296);
    if (v11)
    {
      CFRetain(*(CFTypeRef *)(v28 + 296));
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 832))(*(_QWORD *)(a2 + 40));
      v13 = 1.0;
      if (v12)
        v13 = (*(float (**)(uint64_t, float))(*(_QWORD *)v12 + 328))(v12, 1.0);
      *(double *)v29 = (float)(1.0 / v13);
      v29[1] = 0;
      v30 = 0;
      v31 = v29[0];
      v32 = 0;
      v33 = 0;
      WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v29, a3);
      v27[0] = v14;
      v27[1] = v15;
      v27[2] = v16;
      v27[3] = v17;
      WebKit::UnifiedPDFPlugin::pageCoverageAndScalesForRect((WebKit::UnifiedPDFPlugin *)v29, (const WebCore::FloatRect *)v10, (WebCore *)v27);
      v18 = *a4;
      *(_OWORD *)v5 = *(_OWORD *)a3;
      *((_OWORD *)v5 + 1) = v18;
      v5[32] = *((_BYTE *)a4 + 16);
      WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v5 + 40), (__int128 **)v29);
      v20 = v29[0];
      *((_QWORD *)v5 + 7) = v30;
      *((_DWORD *)v5 + 16) = (_DWORD)v31;
      if (v20)
        WTF::fastFree(v20, v19);
      CFRelease(v11);
    }
    else
    {
      v5[32] = 0;
      *((_QWORD *)v5 + 5) = 0;
      *((_QWORD *)v5 + 6) = 0;
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      v5[16] = 0;
      __asm { FMOV            V0.2S, #1.0 }
      *((_QWORD *)v5 + 7) = _D0;
      *((_DWORD *)v5 + 16) = 1065353216;
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v10[9], v9);
  }
  else
  {
    v5[32] = 0;
    *((_QWORD *)v5 + 5) = 0;
    *((_QWORD *)v5 + 6) = 0;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5[16] = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *((_QWORD *)v5 + 7) = _D0;
    *((_DWORD *)v5 + 16) = 1065353216;
  }
  return result;
}

void sub_197312818(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13)
{
  uint64_t v13;
  const void *v14;
  void *v16;

  if (a13)
    WTF::fastFree(a13, a2);
  CFRelease(v14);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v13 + 72), v16);
  _Unwind_Resume(a1);
}

BOOL WebKit::AsyncPDFRenderer::TileRenderInfo::equivalentForPainting(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  float32x2_t *v5;
  float32x2_t *v6;
  float32x2_t *v9;
  float32x2_t *v10;
  uint64_t v11;
  unint64_t v12;
  int32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  int32x2_t v17;

  if (*(float *)a1 != *(float *)a2 || *(float *)(a1 + 4) != *(float *)(a2 + 4))
    return 0;
  if (*(float *)(a1 + 8) != *(float *)(a2 + 8) || *(float *)(a1 + 12) != *(float *)(a2 + 12))
    return 0;
  v4 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v4 != *(_DWORD *)(a2 + 52))
    return 0;
  if ((_DWORD)v4)
  {
    v5 = *(float32x2_t **)(a1 + 40);
    v6 = *(float32x2_t **)(a2 + 40);
    if (*v5 != *v6)
      return 0;
    if (v5[1].f32[0] != v6[1].f32[0] || v5[1].f32[1] != v6[1].f32[1])
      return 0;
    if (v5[2].f32[0] != v6[2].f32[0] || v5[2].f32[1] != v6[2].f32[1])
      return 0;
    v9 = v5 + 5;
    v10 = v6 + 5;
    v11 = 1;
    do
    {
      v12 = v11;
      if (v4 == v11)
        break;
      if (*(_QWORD *)&v9[-2] != *(_QWORD *)&v10[-2])
        break;
      v13 = vceq_f32(v9[-1], v10[-1]);
      if ((v13.i32[0] & v13.i32[1] & 1) == 0)
        break;
      v14 = *v9;
      v9 += 3;
      v15 = v14;
      v16 = *v10;
      v10 += 3;
      v17 = vceq_f32(v15, v16);
      ++v11;
    }
    while ((v17.i32[0] & v17.i32[1] & 1) != 0);
    if (v12 < v4)
      return 0;
  }
  return *(float *)(a1 + 56) == *(float *)(a2 + 56)
      && *(float *)(a1 + 60) == *(float *)(a2 + 60)
      && *(float *)(a1 + 64) == *(float *)(a2 + 64);
}

WTF *WebKit::AsyncPDFRenderer::willRepaintTile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5)
{
  uint64_t *v7;
  float *v8;
  float *v9;
  BOOL v10;
  BOOL v11;
  WTF *result;
  void *v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  _QWORD v17[2];

  v17[0] = a3;
  v17[1] = a4;
  v7 = (uint64_t *)(a1 + 96);
  v8 = (float *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>((uint64_t *)(a1 + 96), (WebKit::TileForGrid *)v17);
  v9 = *(float **)(a1 + 96);
  if (v9)
    v9 += 24 * *((unsigned int *)v9 - 1);
  if (v9 == v8
    || (v8[6] == *a5 ? (v10 = v8[7] == a5[1]) : (v10 = 0),
        !v10
     || (v8[8] == a5[2] ? (v11 = v8[9] == a5[3]) : (v11 = 0),
         !v11
      || (result = (WTF *)WebKit::AsyncPDFRenderer::renderInfoIsValidForTile(a1, (uint64_t)v17, (uint64_t)(v8 + 6)),
          (result & 1) == 0))))
  {
    v13 = (void *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(v7, (WebKit::TileForGrid *)v17);
    if (*v7)
    {
      v14 = *v7 + 96 * *(unsigned int *)(*v7 - 4);
      if ((void *)v14 == v13)
        goto LABEL_22;
    }
    else
    {
      if (!v13)
      {
LABEL_22:
        LOBYTE(v15) = 0;
        v16 = 0;
        return WebKit::AsyncPDFRenderer::enqueueTilePaintIfNecessary(a1, (WebKit::TileForGrid *)v17, (const WebCore::FloatRect *)a5, &v15);
      }
      v14 = 0;
    }
    if ((void *)v14 != v13)
      WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::remove(v7, v13);
    goto LABEL_22;
  }
  return result;
}

WTF *WebKit::AsyncPDFRenderer::enqueueTilePaintIfNecessary(uint64_t a1, WebKit::TileForGrid *a2, const WebCore::FloatRect *a3, __int128 *a4)
{
  WTF::Lock *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  void *v15;
  uint64_t *v16;
  int i;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  __int128 v27;
  __int128 v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v36;
  __int128 v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  WTF *v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  WebKit::TileForGrid **v51;
  int j;
  unsigned int v53;
  WebKit::TileForGrid **v54;
  WebKit::TileForGrid *v55;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  WebKit::TileForGrid **v67;
  WTF *result;
  __int128 v69;
  __int128 v70;
  unsigned __int8 v71;
  WTF *v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t IdentifierInternal;
  __int128 v78;
  __int128 v79;
  unsigned __int8 v80;
  WTF *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;

  WebKit::AsyncPDFRenderer::renderInfoForTile((unsigned __int8 *)&v69, a1, a3, a4);
  if (v74)
  {
    v7 = (uint64_t *)(a1 + 56);
    v8 = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>((uint64_t *)(a1 + 56), a2);
    v9 = *(_QWORD *)(a1 + 56);
    if (v9)
      v9 += 96 * *(unsigned int *)(v9 - 4);
    if (v9 != v8)
    {
      if (*(unsigned __int8 *)(v8 + 56) | v71)
      {
        if (v71)
        {
          if (*(_BYTE *)(v8 + 56))
          {
            WebCore::FloatRect::unite((WebCore::FloatRect *)&v70, (const WebCore::FloatRect *)(v8 + 40));
          }
          else
          {
            LOBYTE(v70) = 0;
            v71 = 0;
          }
        }
      }
      else if (WebKit::AsyncPDFRenderer::TileRenderInfo::equivalentForPainting(v8 + 24, (uint64_t)&v69))
      {
        goto LABEL_93;
      }
    }
    v6 = *(WTF::Lock **)(a1 + 24);
    if (v6)
    {
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v85, v6, *(_QWORD *)(a1 + 32));
      v10 = v85;
      if (v85)
      {
        v11 = *(const void **)(v85 + 296);
        if (!v11)
          goto LABEL_92;
        CFRetain(*(CFTypeRef *)(v85 + 296));
        if (!v74)
        {
          CFRelease(v11);
          goto LABEL_92;
        }
        IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
        v78 = v69;
        v79 = v70;
        v80 = v71;
        WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v81, (__int128 **)&v72);
        v83 = v75;
        v84 = v76;
        v12 = *v7;
        if (*v7
          || (WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::expand((uint64_t *)(a1 + 56)),
              (v12 = *v7) != 0))
        {
          v13 = *(_DWORD *)(v12 - 8);
        }
        else
        {
          v13 = 0;
        }
        v14 = WebKit::TileForGrid::computeHash(a2);
        v16 = 0;
        for (i = 1; ; ++i)
        {
          v18 = v14 & v13;
          v19 = (uint64_t *)(v12 + 96 * (v14 & v13));
          v20 = *v19;
          if (*v19 == -1 && *((_DWORD *)v19 + 2) == -1 && *((_DWORD *)v19 + 3) == -1)
            break;
          if (v20 == *(_QWORD *)a2
            && *((_DWORD *)v19 + 2) == *((_DWORD *)a2 + 2)
            && *((_DWORD *)v19 + 3) == *((_DWORD *)a2 + 3))
          {
            v23 = v12 + 96 * v18;
            v26 = *(WTF **)(v23 + 64);
            v25 = v23 + 64;
            v24 = v26;
            *(_QWORD *)(v25 - 48) = IdentifierInternal;
            v27 = v78;
            v28 = v79;
            *(_BYTE *)(v25 - 8) = v80;
            *(_OWORD *)(v25 - 24) = v28;
            *(_OWORD *)(v25 - 40) = v27;
            if (v26)
            {
              *(_QWORD *)v25 = 0;
              *(_DWORD *)(v25 + 8) = 0;
              WTF::fastFree(v24, v15);
            }
            v29 = v81;
            v81 = 0;
            *(_QWORD *)v25 = v29;
            *(_DWORD *)(v25 + 8) = v82;
            LODWORD(v29) = HIDWORD(v82);
            HIDWORD(v82) = 0;
            *(_DWORD *)(v25 + 12) = (_DWORD)v29;
            v30 = v12 + 96 * v18;
            v31 = v83;
            *(_DWORD *)(v30 + 88) = v84;
            *(_QWORD *)(v30 + 80) = v31;
            goto LABEL_51;
          }
          if (!v20 && ((_DWORD)v19[1] & *((_DWORD *)v19 + 3)) == -1)
            v16 = (uint64_t *)(v12 + 96 * v18);
          v14 = i + v18;
        }
        if (v16)
        {
          *v16 = -1;
          v16[1] = -1;
          *((_OWORD *)v16 + 4) = 0u;
          *((_OWORD *)v16 + 5) = 0u;
          *((_OWORD *)v16 + 2) = 0u;
          *((_OWORD *)v16 + 3) = 0u;
          *((_OWORD *)v16 + 1) = 0u;
          __asm { FMOV            V0.2S, #1.0 }
          v16[10] = _D0;
          *((_DWORD *)v16 + 22) = 1065353216;
          --*(_DWORD *)(*v7 - 16);
          v19 = v16;
        }
        *(_OWORD *)v19 = *(_OWORD *)a2;
        v19[2] = IdentifierInternal;
        v36 = v80;
        v37 = v79;
        *(_OWORD *)(v19 + 3) = v78;
        *(_OWORD *)(v19 + 5) = v37;
        *((_BYTE *)v19 + 56) = v36;
        v38 = (WTF *)v19[8];
        if (v38)
        {
          v19[8] = 0;
          *((_DWORD *)v19 + 18) = 0;
          WTF::fastFree(v38, v15);
        }
        v19[8] = (uint64_t)v81;
        v39 = v82;
        v81 = 0;
        v82 = 0;
        v19[9] = v39;
        v19[10] = v83;
        *((_DWORD *)v19 + 22) = v84;
        v40 = *v7;
        if (*v7)
          v41 = *(_DWORD *)(v40 - 12) + 1;
        else
          v41 = 1;
        *(_DWORD *)(v40 - 12) = v41;
        v42 = *v7;
        if (*v7)
          v43 = *(_DWORD *)(v42 - 12);
        else
          v43 = 0;
        v44 = (*(_DWORD *)(v42 - 16) + v43);
        v45 = *(unsigned int *)(v42 - 4);
        if (v45 > 0x400)
        {
          if (v45 > 2 * v44)
            goto LABEL_51;
        }
        else if (3 * v45 > 4 * v44)
        {
LABEL_51:
          v46 = v81;
          if (v81)
          {
            v81 = 0;
            LODWORD(v82) = 0;
            WTF::fastFree(v46, v15);
          }
          v47 = (uint64_t *)(a1 + 72);
          v48 = *(_QWORD *)(a1 + 72);
          if (v48
            || (WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::expand((uint64_t *)(a1 + 72), 0), (v48 = *v47) != 0))
          {
            v49 = *(_DWORD *)(v48 - 8);
          }
          else
          {
            v49 = 0;
          }
          v50 = WebKit::TileForGrid::computeHash(a2);
          v51 = 0;
          for (j = 1; ; ++j)
          {
            v53 = v50 & v49;
            v54 = (WebKit::TileForGrid **)(v48 + 8 * (v50 & v49));
            v55 = *v54;
            if (*v54 == (WebKit::TileForGrid *)-1)
            {
              v51 = (WebKit::TileForGrid **)(v48 + 8 * v53);
            }
            else
            {
              if (!v55)
              {
                if (v51)
                {
                  *v51 = 0;
                  --*(_DWORD *)(*v47 - 16);
                  v54 = v51;
                }
                v55 = (WebKit::TileForGrid *)WTF::fastMalloc((WTF *)0x20);
                *(_OWORD *)v55 = *(_OWORD *)a2;
                *((_QWORD *)v55 + 2) = 0;
                *((_QWORD *)v55 + 3) = 0;
                *v54 = v55;
                v57 = *v47;
                if (*v47)
                  v58 = *(_DWORD *)(v57 - 12) + 1;
                else
                  v58 = 1;
                *(_DWORD *)(v57 - 12) = v58;
                v61 = *v47;
                if (*v47)
                  v62 = *(_DWORD *)(v61 - 12);
                else
                  v62 = 0;
                v63 = (*(_DWORD *)(v61 - 16) + v62);
                v64 = *(unsigned int *)(v61 - 4);
                if (v64 > 0x400)
                {
                  if (v64 > 2 * v63)
                    goto LABEL_88;
                }
                else if (3 * v64 > 4 * v63)
                {
                  goto LABEL_88;
                }
                v55 = *(WebKit::TileForGrid **)WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::expand((uint64_t *)(a1 + 72), v54);
                goto LABEL_88;
              }
              if (*(_QWORD *)v55 == *(_QWORD *)a2
                && *((_DWORD *)v55 + 2) == *((_DWORD *)a2 + 2)
                && *((_DWORD *)v55 + 3) == *((_DWORD *)a2 + 3))
              {
                v59 = *((_QWORD *)v55 + 2);
                v60 = *((_QWORD *)v55 + 3);
                if (v59)
                {
                  *(_QWORD *)(v59 + 24) = v60;
                  v60 = *((_QWORD *)v55 + 3);
                }
                else
                {
                  *(_QWORD *)(a1 + 80) = v60;
                }
                if (v60)
                  v65 = (_QWORD *)(v60 + 16);
                else
                  v65 = (_QWORD *)(a1 + 88);
                *v65 = v59;
LABEL_88:
                v66 = *(_QWORD *)(a1 + 88);
                *((_QWORD *)v55 + 2) = v66;
                *((_QWORD *)v55 + 3) = 0;
                if (v66)
                  v67 = (WebKit::TileForGrid **)(v66 + 24);
                else
                  v67 = (WebKit::TileForGrid **)(a1 + 80);
                *v67 = v55;
                *(_QWORD *)(a1 + 88) = v55;
                WebKit::AsyncPDFRenderer::serviceRequestQueue((unsigned __int8 *)a1);
                v10 = v85;
                CFRelease(v11);
                if (v10)
LABEL_92:
                  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 72), v6);
                goto LABEL_93;
              }
            }
            v50 = j + v53;
          }
        }
        WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::expand((uint64_t *)(a1 + 56));
        goto LABEL_51;
      }
    }
  }
LABEL_93:
  result = v72;
  if (v72)
  {
    v72 = 0;
    v73 = 0;
    return (WTF *)WTF::fastFree(result, v6);
  }
  return result;
}

void sub_197312FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF *a24,int a25)
{
  const void *v25;
  uint64_t v26;
  void *v28;
  uint64_t v29;

  CFRelease(v25);
  v29 = *(_QWORD *)(v26 - 88);
  if (v29)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v29 + 72), v28);
  if (a14)
    WTF::fastFree(a14, v28);
  _Unwind_Resume(a1);
}

WTF *WebKit::AsyncPDFRenderer::willRemoveTile(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  WebKit::TileForGrid **v6;
  WebKit::TileForGrid **v7;
  WebKit::TileForGrid *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  WTF *result;
  uint64_t v19;
  WTF *v20;
  _QWORD v21[2];
  WebKit::TileForGrid *v22;

  v21[0] = a3;
  v21[1] = a4;
  v5 = a1 + 9;
  v6 = (WebKit::TileForGrid **)WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(a1 + 9, (WebKit::TileForGrid *)v21);
  v7 = (WebKit::TileForGrid **)a1[9];
  if (v7)
    v7 += *((unsigned int *)v7 - 1);
  if (v7 != v6)
  {
    v8 = *v6;
    if (*v6)
    {
      v22 = *v6;
      v9 = (_QWORD *)WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>>,WTF::ListHashSetNode<WebKit::TileForGrid> *>(v5, &v22);
      v10 = v9;
      v11 = *v5;
      if (*v5)
        v11 += 8 * *(unsigned int *)(v11 - 4);
      if ((_QWORD *)v11 != v9)
        WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::remove(v5, v9);
      v12 = *((_QWORD *)v8 + 2);
      v13 = *((_QWORD *)v8 + 3);
      if (v12)
      {
        *(_QWORD *)(v12 + 24) = v13;
        v13 = *((_QWORD *)v8 + 3);
      }
      else
      {
        a1[10] = v13;
      }
      if (v13)
        v14 = (_QWORD *)(v13 + 16);
      else
        v14 = a1 + 11;
      *v14 = v12;
      WTF::fastFree(v8, v10);
    }
  }
  v15 = (void *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(a1 + 7, (WebKit::TileForGrid *)v21);
  v16 = a1[7];
  if (v16)
  {
    v17 = (void *)(v16 + 96 * *(unsigned int *)(v16 - 4));
    if (v17 == v15)
      goto LABEL_23;
  }
  else
  {
    if (!v15)
      goto LABEL_23;
    v17 = 0;
  }
  if (v17 != v15)
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::remove(a1 + 7, v15);
LABEL_23:
  result = (WTF *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(a1 + 12, (WebKit::TileForGrid *)v21);
  v19 = a1[12];
  if (v19)
  {
    v20 = (WTF *)(v19 + 96 * *(unsigned int *)(v19 - 4));
    if (v20 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v20 = 0;
  }
  if (v20 != result)
    return WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::remove(a1 + 12, result);
  return result;
}

uint64_t WebKit::AsyncPDFRenderer::willRepaintAllTiles(_QWORD *a1, void *a2)
{
  WTF *v3;
  _QWORD *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = a1 + 10;
  v3 = (WTF *)a1[10];
  if (v3)
  {
    do
    {
      v5 = (WTF *)*((_QWORD *)v3 + 3);
      WTF::fastFree(v3, a2);
      v3 = v5;
    }
    while (v5);
  }
  v6 = a1[9];
  if (v6)
  {
    a1[9] = 0;
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  *v4 = 0;
  v4[1] = 0;
  v7 = a1[7];
  if (v7)
  {
    a1[7] = 0;
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(v7, a2);
  }
  result = a1[12];
  if (result)
  {
    a1[12] = 0;
    return WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(result, a2);
  }
  return result;
}

unsigned __int8 *WebKit::AsyncPDFRenderer::coverageRectDidChange(unsigned __int8 *result, uint64_t a2, WebCore *a3)
{
  WTF::Lock *v3;
  unsigned __int8 *v5;
  WebCore::FloatRect *v6;
  float v7;
  WTF *v8;
  float v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  void *v21;
  WTF *v22;
  unsigned int v23;
  WebCore::FloatRect *v24;

  v3 = (WTF::Lock *)*((_QWORD *)result + 3);
  if (v3)
  {
    v5 = result;
    result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v24, v3, *((_QWORD *)result + 4));
    v6 = v24;
    if (v24)
    {
      WebKit::UnifiedPDFPlugin::pageCoverageForRect(&v22, v24, a3);
      v7 = WebKit::PDFPluginBase::deviceScaleFactor(v6);
      v8 = v22;
      if (v23)
      {
        v9 = (float)(v7 * *((float *)v6 + 152)) * 0.5;
        v10 = (unint64_t *)((char *)v22 + 24 * v23);
        v11 = (unint64_t *)v22;
        while (1)
        {
          v12 = *((_QWORD *)v5 + 14);
          v13 = *v11;
          if (!v12)
            goto LABEL_11;
          v14 = *(_DWORD *)(v12 - 8);
          v15 = (v13 + ~(v13 << 32)) ^ ((v13 + ~(v13 << 32)) >> 22);
          v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          v18 = v14 & ((v17 >> 31) ^ v17);
          v19 = *(_QWORD *)(v12 + 16 * v18);
          if (v19 != v13)
            break;
LABEL_12:
          v11 += 3;
          if (v11 == v10)
            goto LABEL_13;
        }
        v20 = 1;
        while (v19 != -1)
        {
          v18 = (v18 + v20) & v14;
          v19 = *(_QWORD *)(v12 + 16 * v18);
          ++v20;
          if (v19 == v13)
            goto LABEL_12;
        }
LABEL_11:
        WebKit::AsyncPDFRenderer::generatePreviewImageForPage((WebKit::AsyncPDFRenderer *)v5, v13, v9);
        goto LABEL_12;
      }
LABEL_13:
      if (!WebKit::PDFPluginBase::isFullFramePlugin(v6))
        WebKit::AsyncPDFRenderer::removePagePreviewsOutsideCoverageRect(v5, a3);
      if (v8)
        WTF::fastFree(v8, v21);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((unsigned __int8 **)v6 + 9), v21);
    }
  }
  return result;
}

void sub_1973133A0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  uint64_t v10;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 72), a2);
  _Unwind_Resume(a1);
}

void *WebKit::UnifiedPDFPlugin::pageCoverageForRect(void *this, const WebCore::FloatRect *a2, WebCore *a3)
{
  uint64_t v3;
  float v6;
  const FloatRect *v7;
  IntSize v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t i;
  const void *v17;
  const void *v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _BYTE v25[24];
  __int128 v26;
  _DWORD v27[4];
  IntRect v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v3 = (uint64_t)this;
  if (*((int *)a2 + 80) < 1
    || *((int *)a2 + 81) < 1
    || (this = (void *)WebKit::UnifiedPDFPlugin::documentSize(a2), (int)this < 1)
    || (uint64_t)this <= 0)
  {
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
  }
  else
  {
    v6 = *((float *)a2 + 152);
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    v33[0] = 0;
    v33[1] = WebKit::UnifiedPDFPlugin::documentSize(a2);
    v28.m_location = (IntPoint)WebCore::enclosingIntRect(a3, v7);
    v28.m_size = v8;
    WebCore::IntRect::intersect((WebCore::IntRect *)v33, &v28);
    *(double *)&v28.m_location = (float)(1.0 / v6);
    v28.m_size = 0;
    v29 = 0;
    v30 = *(double *)&v28.m_location;
    v31 = 0;
    v32 = 0;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v25, (const WebCore::IntRect *)v33);
    WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v28, (const WebCore::FloatRect *)v25);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v27[0] = v12;
    v27[1] = v13;
    v27[2] = v14;
    v27[3] = v15;
    for (i = 16; ; i += 36)
    {
      this = (void *)*((_QWORD *)a2 + 71);
      if (this)
        this = (void *)objc_msgSend(this, "pageCount");
      if (v11 >= (unint64_t)this)
        break;
      v17 = (const void *)objc_msgSend(*((id *)a2 + 71), "pageAtIndex:", v11);
      v18 = v17;
      if (v17)
      {
        CFRetain(v17);
        v19 = 0uLL;
        if (v11 < *((unsigned int *)a2 + 147))
          v19 = *(_OWORD *)(*((_QWORD *)a2 + 72) + i);
        v26 = v19;
        if ((WebCore::FloatRect::intersects((WebCore::FloatRect *)&v26, (const WebCore::FloatRect *)v27) & 1) != 0)
        {
          *(_QWORD *)v25 = v11;
          *(_OWORD *)&v25[8] = v26;
          if (v10 == *(_DWORD *)(v3 + 8))
          {
            v20 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, v10 + 1, (unint64_t)v25);
            v10 = *(_DWORD *)(v3 + 12);
            v9 = *(_QWORD *)v3;
            v21 = *(_QWORD *)v3 + 24 * v10;
            v22 = *(_QWORD *)(v20 + 16);
            *(_OWORD *)v21 = *(_OWORD *)v20;
            *(_QWORD *)(v21 + 16) = v22;
          }
          else
          {
            v23 = *(_OWORD *)v25;
            v24 = v9 + 24 * v10;
            *(_QWORD *)(v24 + 16) = *(_QWORD *)&v25[16];
            *(_OWORD *)v24 = v23;
          }
          *(_DWORD *)(v3 + 12) = ++v10;
        }
        CFRelease(v18);
      }
      ++v11;
    }
  }
  return this;
}

void sub_1973135BC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::AsyncPDFRenderer::willRemoveGrid(uint64_t result, void *a2, WTF *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  double v49;
  double v50;
  double v51;
  unsigned int v52;
  unint64_t v53;
  WTF *v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  WTF *v60;
  _QWORD *v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  WTF *v67;
  uint64_t v68;
  WebKit::TileForGrid *v69;

  v4 = (uint64_t *)result;
  v5 = (uint64_t *)(result + 96);
  v6 = *(_QWORD *)(result + 96);
  if (!v6)
    goto LABEL_41;
  v7 = *(_DWORD *)(v6 - 4);
  if (!v7)
    goto LABEL_41;
  v8 = 0;
  v9 = v7 - 1;
  do
  {
    v10 = v9;
    result = v6 + 96 * v9;
    v11 = *(WTF **)result;
    if (*(_QWORD *)result == -1)
    {
      if ((*(_DWORD *)(result + 8) & *(_DWORD *)(result + 12)) != -1 && (WTF *)((char *)a3 + 1) == 0)
        goto LABEL_17;
    }
    else
    {
      if (v11)
      {
        if (v11 != a3)
          goto LABEL_18;
LABEL_17:
        result = (uint64_t)WTF::KeyValuePairHashTraits<WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>>::customDeleteBucket(result, a2);
        ++v8;
        goto LABEL_18;
      }
      if ((*(_DWORD *)(result + 8) & *(_DWORD *)(result + 12)) != -1 && a3 == 0)
        goto LABEL_17;
    }
LABEL_18:
    --v9;
  }
  while (v10);
  v14 = *v5;
  if (v8)
  {
    *(_DWORD *)(v14 - 16) += v8;
    v15 = *v5;
    if (*v5)
      v16 = *(_DWORD *)(v15 - 12);
    else
      v16 = 0;
    *(_DWORD *)(v15 - 12) = v16 - v8;
    v14 = *v5;
  }
  if (v14)
  {
    v17 = *(_DWORD *)(v14 - 4);
    v18 = *(unsigned int *)(v14 - 12);
    if (v17 >= 9 && 6 * (int)v18 < v17)
    {
      v20 = (v18 - 1) | ((v18 - 1) >> 1) | ((((_DWORD)v18 - 1) | ((v18 - 1) >> 1)) >> 2);
      v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
      v22 = (v21 | HIWORD(v21)) + 1;
      if (v22 > 0x400)
      {
        if (v22 <= 2 * v18)
        {
LABEL_31:
          LODWORD(v22) = 2 * v22;
          if (v22 <= 0x400)
            goto LABEL_32;
        }
        v23 = (double)v18;
        v24 = (double)v22;
        v25 = 0.416666667;
      }
      else
      {
        if (3 * v22 <= 4 * v18)
          goto LABEL_31;
LABEL_32:
        v23 = (double)v18;
        v24 = (double)v22;
        v25 = 0.604166667;
      }
      if (v24 * v25 <= v23)
        LODWORD(v22) = 2 * v22;
      if (v22 <= 8)
        v26 = 8;
      else
        v26 = v22;
      result = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(v5, v26);
    }
  }
LABEL_41:
  v27 = v4 + 7;
  v28 = v4[7];
  if (!v28)
    goto LABEL_83;
  v29 = *(_DWORD *)(v28 - 4);
  if (!v29)
    goto LABEL_83;
  v30 = 0;
  v31 = v29 - 1;
  while (2)
  {
    v32 = v31;
    v33 = v28 + 96 * v31;
    v34 = *(WTF **)v33;
    if (*(_QWORD *)v33 == -1)
    {
      if ((*(_DWORD *)(v33 + 8) & *(_DWORD *)(v33 + 12)) != -1 && (WTF *)((char *)a3 + 1) == 0)
        goto LABEL_57;
    }
    else
    {
      if (v34)
      {
        if (v34 != a3)
          goto LABEL_60;
      }
      else if ((*(_DWORD *)(v33 + 8) & *(_DWORD *)(v33 + 12)) == -1 || a3 != 0)
      {
        goto LABEL_60;
      }
LABEL_57:
      *(_OWORD *)v33 = xmmword_1978CF7D0;
      v37 = v28 + 96 * v31;
      v39 = *(_QWORD *)(v37 + 64);
      v38 = (_QWORD *)(v37 + 64);
      result = v39;
      if (v39)
      {
        *v38 = 0;
        *(_DWORD *)(v28 + 96 * v31 + 72) = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      ++v30;
    }
LABEL_60:
    --v31;
    if (v32)
      continue;
    break;
  }
  v40 = *v27;
  if (v30)
  {
    *(_DWORD *)(v40 - 16) += v30;
    v41 = *v27;
    if (*v27)
      v42 = *(_DWORD *)(v41 - 12);
    else
      v42 = 0;
    *(_DWORD *)(v41 - 12) = v42 - v30;
    v40 = *v27;
  }
  if (v40)
  {
    v43 = *(_DWORD *)(v40 - 4);
    v44 = *(unsigned int *)(v40 - 12);
    if (v43 >= 9 && 6 * (int)v44 < v43)
    {
      v46 = (v44 - 1) | ((v44 - 1) >> 1) | ((((_DWORD)v44 - 1) | ((v44 - 1) >> 1)) >> 2);
      v47 = v46 | (v46 >> 4) | ((v46 | (v46 >> 4)) >> 8);
      v48 = (v47 | HIWORD(v47)) + 1;
      if (v48 > 0x400)
      {
        if (v48 <= 2 * v44)
        {
LABEL_73:
          LODWORD(v48) = 2 * v48;
          if (v48 <= 0x400)
            goto LABEL_74;
        }
        v49 = (double)v44;
        v50 = (double)v48;
        v51 = 0.416666667;
      }
      else
      {
        if (3 * v48 <= 4 * v44)
          goto LABEL_73;
LABEL_74:
        v49 = (double)v44;
        v50 = (double)v48;
        v51 = 0.604166667;
      }
      if (v50 * v51 <= v49)
        LODWORD(v48) = 2 * v48;
      if (v48 <= 8)
        v52 = 8;
      else
        v52 = v48;
      result = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(v4 + 7, v52);
    }
  }
LABEL_83:
  v67 = 0;
  v68 = 0;
  v53 = v4[10];
  if (v53)
  {
    v54 = 0;
    v55 = 0;
    v56 = v4 + 9;
    do
    {
      if (*(WTF **)v53 == a3)
      {
        if (v55 == (_DWORD)v68)
        {
          result = WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v67, v55 + 1, v53);
          v55 = HIDWORD(v68);
          v54 = v67;
          *((_OWORD *)v67 + HIDWORD(v68)) = *(_OWORD *)result;
        }
        else
        {
          *((_OWORD *)v54 + v55) = *(_OWORD *)v53;
        }
        HIDWORD(v68) = ++v55;
      }
      v53 = *(_QWORD *)(v53 + 24);
    }
    while (v53);
    if (v55)
    {
      v57 = 0;
      v58 = 16 * v55;
      do
      {
        result = WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(v4 + 9, (WTF *)((char *)v54 + v57));
        v59 = (_QWORD *)*v56;
        if (*v56)
          v59 += *((unsigned int *)v59 - 1);
        if (v59 != (_QWORD *)result)
        {
          v60 = *(WTF **)result;
          if (*(_QWORD *)result)
          {
            v69 = *(WebKit::TileForGrid **)result;
            v61 = (_QWORD *)WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>>,WTF::ListHashSetNode<WebKit::TileForGrid> *>(v4 + 9, &v69);
            v62 = v61;
            v63 = (_QWORD *)*v56;
            if (*v56)
              v63 += *((unsigned int *)v63 - 1);
            if (v63 != v61)
              WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::remove(v4 + 9, v61);
            v64 = *((_QWORD *)v60 + 2);
            v65 = *((_QWORD *)v60 + 3);
            if (v64)
            {
              *(_QWORD *)(v64 + 24) = v65;
              v65 = *((_QWORD *)v60 + 3);
            }
            else
            {
              v4[10] = v65;
            }
            if (v65)
              v66 = (_QWORD *)(v65 + 16);
            else
              v66 = v4 + 11;
            *v66 = v64;
            result = WTF::fastFree(v60, v62);
          }
        }
        v57 += 16;
      }
      while (v58 != v57);
    }
    if (v54)
      return WTF::fastFree(v54, a2);
  }
  return result;
}

void sub_197313A84(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  if (a12)
    WTF::fastFree(a12, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::UnifiedPDFPlugin::pageCoverageAndScalesForRect(WebKit::UnifiedPDFPlugin *this, const WebCore::FloatRect *a2, WebCore *a3)
{
  uint64_t v10;
  float v11;
  float v12;
  int v13;

  WebKit::UnifiedPDFPlugin::pageCoverageForRect(this, a2, a3);
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 2) = _D0;
  *((_DWORD *)this + 6) = 1065353216;
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 81) + 832))(*((_QWORD *)a2 + 81));
  if (v10)
    v11 = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 328))(v10);
  else
    v11 = 1.0;
  v12 = WebKit::PDFPluginBase::deviceScaleFactor(a2);
  v13 = *((_DWORD *)a2 + 152);
  *((float *)this + 4) = v12;
  *((_DWORD *)this + 5) = v13;
  *((float *)this + 6) = v11;
}

void sub_197313B24(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::AsyncPDFRenderer::serviceRequestQueue(unsigned __int8 *this)
{
  WTF::Lock *v1;
  uint64_t v2;
  void *v3;
  uint64_t ***v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  CFTypeRef cf;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  char v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  char v45;
  WTF *v46;
  int v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  uint64_t v51;

  v1 = (WTF::Lock *)*((_QWORD *)this + 3);
  if (v1)
  {
    v2 = (uint64_t)this;
    this = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v51, v1, *((_QWORD *)this + 4));
    v30 = v51;
    if (v51)
    {
      if (*(_DWORD *)(v2 + 68) < *(_DWORD *)(v2 + 64))
      {
        v4 = (uint64_t ***)(v2 + 72);
        v5 = v2 + 80;
        v6 = (uint64_t *)(v2 + 56);
        do
        {
          if (!*v4 || !*((_DWORD *)*v4 - 3))
            break;
          v7 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>>,WTF::ListHashSetNode<WebKit::TileForGrid> *>((uint64_t *)(v2 + 72), (WebKit::TileForGrid **)(v2 + 80));
          v8 = v7;
          v9 = *v4;
          if (*v4)
            v9 += *((unsigned int *)v9 - 1);
          v10 = **v7;
          v11 = (*v7)[1];
          if (v9 != v7)
            WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::remove((uint64_t *)(v2 + 72), v7);
          v12 = *(WTF **)v5;
          v13 = *(_QWORD *)(*(_QWORD *)v5 + 16);
          v14 = *(_QWORD *)(*(_QWORD *)v5 + 24);
          if (v13)
          {
            *(_QWORD *)(v13 + 24) = v14;
            v14 = *((_QWORD *)v12 + 3);
          }
          else
          {
            *(_QWORD *)v5 = v14;
          }
          v15 = (_QWORD *)(v14 + 16);
          v16 = v14 == 0;
          v17 = (_QWORD *)(v2 + 88);
          if (!v16)
            v17 = v15;
          *v17 = v13;
          WTF::fastFree(v12, v8);
          *(_QWORD *)&v50 = v10;
          *((_QWORD *)&v50 + 1) = v11;
          v18 = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>((uint64_t *)(v2 + 56), (WebKit::TileForGrid *)&v50);
          v19 = v18;
          v20 = *v6;
          if (*v6)
            v20 += 96 * *(unsigned int *)(v20 - 4);
          if (v20 != v18)
          {
            v42 = *(_QWORD *)(v18 + 16);
            v21 = *(_OWORD *)(v18 + 24);
            v22 = *(_OWORD *)(v18 + 40);
            v45 = *(_BYTE *)(v18 + 56);
            v43 = v21;
            v44 = v22;
            WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v46, (__int128 **)(v18 + 64));
            v48 = *(_QWORD *)(v19 + 80);
            v49 = *(_DWORD *)(v19 + 88);
            ++*(_DWORD *)(v2 + 68);
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v2 + 16));
            v23 = *(const void **)(v30 + 296);
            cf = v23;
            if (v23)
              CFRetain(v23);
            v32 = v50;
            v33 = v42;
            v34 = v43;
            v35 = v44;
            v36 = v45;
            WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v37, (__int128 **)&v46);
            v39 = v48;
            v40 = v49;
            v24 = WTF::fastMalloc((WTF *)0x78);
            *(_QWORD *)v24 = &off_1E34D3608;
            *(_QWORD *)(v24 + 8) = v2;
            *(_QWORD *)(v24 + 16) = cf;
            *(_OWORD *)(v24 + 24) = v32;
            *(_QWORD *)(v24 + 40) = v33;
            *(_OWORD *)(v24 + 48) = v34;
            *(_OWORD *)(v24 + 64) = v35;
            *(_BYTE *)(v24 + 80) = v36;
            *(_QWORD *)(v24 + 88) = v37;
            v25 = v38;
            v37 = 0;
            v38 = 0;
            *(_QWORD *)(v24 + 96) = v25;
            v26 = v39;
            *(_DWORD *)(v24 + 112) = v40;
            *(_QWORD *)(v24 + 104) = v26;
            v41 = v24;
            WTF::ConcurrentWorkQueue::dispatch();
            v27 = v41;
            v41 = 0;
            if (v27)
              (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
            v28 = v37;
            if (v37)
            {
              v37 = 0;
              LODWORD(v38) = 0;
              WTF::fastFree(v28, v3);
            }
            v29 = v46;
            if (v46)
            {
              v46 = 0;
              v47 = 0;
              WTF::fastFree(v29, v3);
            }
          }
        }
        while (*(_DWORD *)(v2 + 68) < *(_DWORD *)(v2 + 64));
      }
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v30 + 72), v3);
    }
  }
  return this;
}

void sub_197313E3C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF *a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF *a37,int a38)
{
  if (a15)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a15 + 16), a2);
  if (a37)
    WTF::fastFree(a37, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a12 + 72), a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::AsyncPDFRenderer::transferBufferToMainThread(uint64_t a1, uint64_t *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  WTF::ThreadSafeWeakPtrControlBlock *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  WTF::ThreadSafeWeakPtrControlBlock *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  WTF *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v10 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 16);
  if (v10)
    v10 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v10);
  v11 = *a2;
  *a2 = 0;
  v20 = *a3;
  v21 = *a4;
  v18 = v10;
  v19 = v11;
  v22 = a4[1];
  v23 = *((_BYTE *)a4 + 32);
  WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v24, (__int128 **)a4 + 5);
  v26 = *((_QWORD *)a4 + 7);
  v27 = *((_DWORD *)a4 + 16);
  v28 = a5;
  v12 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v12 = &off_1E34D3630;
  *(_QWORD *)(v12 + 8) = v18;
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = v19;
  *(_OWORD *)(v12 + 32) = v20;
  *(_BYTE *)(v12 + 80) = v23;
  *(_OWORD *)(v12 + 48) = v21;
  *(_OWORD *)(v12 + 64) = v22;
  WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v12 + 88, (__int128 **)&v24);
  v13 = v27;
  *(_QWORD *)(v12 + 104) = v26;
  *(_DWORD *)(v12 + 112) = v13;
  *(_QWORD *)(v12 + 120) = v28;
  v29 = v12;
  WTF::callOnMainRunLoop();
  v15 = v29;
  v29 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v24;
  if (v24)
  {
    v24 = 0;
    v25 = 0;
    WTF::fastFree(v16, v14);
  }
  return 0;
}

void sub_197314100(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::ThreadSafeWeakPtrControlBlock *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20)
{
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;

  v22 = *(_QWORD *)(v20 - 56);
  *(_QWORD *)(v20 - 56) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (a19)
    WTF::fastFree(a19, a2);
  if (!a11)
  {
LABEL_23:
    if (a9)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)a9, a2);
    _Unwind_Resume(exception_object);
  }
  v23 = *(_QWORD *)(a11 + 8);
  if (__ldaxr((unsigned __int8 *)v23))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v23))
  {
LABEL_11:
    v25 = *(_QWORD *)(v23 + 8);
    v26 = v25 - 1;
    *(_QWORD *)(v23 + 8) = v25 - 1;
    if (v25 == 1)
    {
      v30 = *(_QWORD *)(v23 + 16);
      v27 = *(_QWORD *)(v23 + 24);
      *(_QWORD *)(v23 + 24) = 0;
      v28 = v30 != 0;
    }
    else
    {
      v27 = 0;
      v28 = 1;
    }
    v29 = __ldxr((unsigned __int8 *)v23);
    if (v29 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
      {
LABEL_18:
        if (!v26)
        {
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          if (!v28)
            WTF::fastFree((WTF *)v23, a2);
        }
        goto LABEL_23;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    goto LABEL_18;
  }
  MEMORY[0x19AEABB3C](v23);
  goto LABEL_11;
}

void WebKit::PDFDocumentLayout::~PDFDocumentLayout(WebKit::PDFDocumentLayout *this, void *a2)
{
  WTF *v3;
  const void *v4;

  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(const void **)this;
  *(_QWORD *)this = 0;
  if (v4)
    CFRelease(v4);
}

uint64_t WebKit::PDFDocumentLayout::indexForPage(id *a1, _QWORD *a2)
{
  uint64_t v4;

  if (!objc_msgSend(*a1, "pageCount"))
    return 0;
  v4 = 0;
  while (*a2 != objc_msgSend(*a1, "pageAtIndex:", v4))
  {
    if (++v4 >= (unint64_t)objc_msgSend(*a1, "pageCount"))
      return 0;
  }
  return v4;
}

uint64_t WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(uint64_t a1, uint64_t a2, float a3, float a4)
{
  id v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float32x4_t v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  uint64_t v20;
  __int32 v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v26;
  uint64_t v27;
  float v28;
  unint64_t v30;
  unint64_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float v34;
  float v35;
  float v36;
  char v38;
  float v39;
  float v40;
  float v41;
  float *v42;
  uint64_t v43;
  int8x16_t v44;
  float32x4_t v45;
  int8x16_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;

  v49 = __PAIR64__(LODWORD(a4), LODWORD(a3));
  v7 = *(id *)a1;
  if (v7)
    v8 = objc_msgSend(v7, "pageCount");
  else
    v8 = 0;
  v9 = *(unsigned __int8 *)(a1 + 44);
  if (v9 < 2)
  {
    if (v8)
    {
      v27 = 0;
      v10 = 0;
      while (1)
      {
        v28 = 0.0;
        if (v10 < *(unsigned int *)(a1 + 20))
          v28 = *(float *)(*(_QWORD *)(a1 + 8) + v27 + 20) + *(float *)(*(_QWORD *)(a1 + 8) + v27 + 28);
        if (a4 <= v28 || v8 - 1 == v10)
          break;
        ++v10;
        v27 += 36;
        if (v8 == v10)
          return v8 - 1;
      }
      return v10;
    }
    return v8 - 1;
  }
  if (v9 - 2 > 1)
    return v8 - 1;
  v48 = v49;
  if (!v8)
  {
    v10 = -1;
LABEL_59:
    v30 = v8 - 2;
    v31 = *(unsigned int *)(a1 + 20);
    v32 = 0uLL;
    v33 = 0uLL;
    if (v30 < v31)
      v33 = *(float32x4_t *)(*(_QWORD *)(a1 + 8) + 36 * v30 + 16);
    if (v10 < v31)
      v32 = *(int8x16_t *)(*(_QWORD *)(a1 + 8) + 36 * v10 + 16);
    v45 = v33;
    v46 = v32;
    v47 = 1;
    WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow>)const::$_1::operator()((float *)&v48, (uint64_t)&v45);
    v35 = v34;
    v44 = vandq_s8(v46, (int8x16_t)vcgezq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v47 == 0)), 0x1FuLL)));
    WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow>)const::$_1::operator()((float *)&v48, (uint64_t)&v44);
    if (v35 < v36)
      return v30;
    return v10;
  }
  v10 = 0;
  while (*(_BYTE *)(a2 + 32))
  {
    v11 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)a2;
      do
      {
        v13 = *v12++;
        if (v13 == v10)
          goto LABEL_14;
      }
      while (--v11);
    }
LABEL_40:
    if (v9 < 2)
      v26 = 1;
    else
      v26 = 2;
    v10 += v26;
    if (v10 >= v8)
    {
      v10 = v8 - 1;
      if ((((_DWORD)v8 - 1) & 1) != 0)
        goto LABEL_59;
      return v10;
    }
  }
LABEL_14:
  if ((v10 & 1) != 0)
  {
    v15 = *(unsigned int *)(a1 + 20);
    v16 = 0uLL;
    if (v10 - 1 < v15)
      v16 = *(float32x4_t *)(*(_QWORD *)(a1 + 8) + 36 * (v10 - 1) + 16);
    if (v10 < v15)
    {
      v17 = v10;
LABEL_32:
      v20 = *(_QWORD *)(a1 + 8) + 36 * v17;
      v21 = *(_DWORD *)(v20 + 16);
      v22 = *(_QWORD *)(v20 + 20);
      v23 = *(float *)(v20 + 28);
      goto LABEL_34;
    }
  }
  else
  {
    if (*(_QWORD *)a1 && objc_msgSend(*(id *)a1, "pageCount"))
    {
      if (*(_QWORD *)a1)
        v14 = objc_msgSend(*(id *)a1, "pageCount") - 1;
      else
        v14 = -1;
    }
    else
    {
      v14 = 0;
    }
    v18 = *(unsigned int *)(a1 + 20);
    if (v14 == v10)
    {
      v19 = 0.0;
      if (v10 < v18)
        v19 = *(float *)(*(_QWORD *)(a1 + 8) + 36 * v10 + 20) + *(float *)(*(_QWORD *)(a1 + 8) + 36 * v10 + 28);
      if (v19 > *((float *)&v49 + 1))
        return v10;
      goto LABEL_39;
    }
    v16 = 0uLL;
    if (v10 < v18)
      v16 = *(float32x4_t *)(*(_QWORD *)(a1 + 8) + 36 * v10 + 16);
    v17 = v10 + 1;
    if (v10 + 1 < v18)
      goto LABEL_32;
  }
  v22 = 0;
  v21 = 0;
  v23 = 0.0;
LABEL_34:
  v45 = v16;
  v46.i32[0] = v21;
  *(uint64_t *)((char *)v46.i64 + 4) = v22;
  *(float *)&v46.i32[3] = v23;
  v47 = 1;
  v24 = *(float *)&v22 + v23;
  if (COERCE_FLOAT(vaddq_f32(v16, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&v16, 3)).i32[1]) <= *((float *)&v49 + 1)
    && v24 <= *((float *)&v49 + 1))
  {
LABEL_39:
    v9 = *(unsigned __int8 *)(a1 + 44);
    goto LABEL_40;
  }
  v38 = WebCore::FloatRect::contains();
  if ((v38 & 1) != 0)
    return v10;
  if (WebCore::FloatRect::contains())
    return ++v10;
  WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow>)const::$_1::operator()((float *)&v48, (uint64_t)&v45);
  if (v47)
  {
    v40 = v39;
    WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow>)const::$_1::operator()((float *)&v48, (uint64_t)&v46);
    if (v40 < v41)
      return v10;
    return ++v10;
  }
  v42 = (float *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow>)const::$_1::operator()(v42, v43);
}

uint64_t WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(WebCore::FloatPoint,std::optional<WebKit::PDFLayoutRow>)const::$_1::operator()(float *a1, uint64_t a2)
{
  uint64_t result;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  BOOL v16;
  char v17;
  WTF *v18;
  uint64_t v19;
  void *v20;
  const WebCore::FloatPoint *v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  float v30;
  float *v31;
  float v32;
  float v33;
  void *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  result = WebCore::FloatRect::contains();
  if ((result & 1) != 0)
    return result;
  v5 = *(float *)(a2 + 4);
  LODWORD(v38) = *(_DWORD *)a2;
  *((float *)&v38 + 1) = v5;
  v6 = *(float *)(a2 + 8);
  v7 = v5 + *(float *)(a2 + 12);
  v39 = v38;
  v40 = v7;
  v41 = *(float *)&v38 + v6;
  v42 = v5;
  v43 = *(float *)&v38 + v6;
  v44 = v7;
  result = WTF::fastMalloc((WTF *)0x20);
  v8 = 0;
  v37 = 4;
  v36 = (WTF *)result;
  LODWORD(v9) = 0;
  do
  {
    *((_QWORD *)v36 + v9) = *(uint64_t *)((char *)&v38 + v8);
    v9 = ++HIDWORD(v37);
    v8 += 8;
  }
  while (v8 != 32);
  v11 = *a1;
  v10 = a1[1];
  v12 = *(float *)(a2 + 4);
  v13 = *(float *)a2 + *(float *)(a2 + 8);
  v14 = *a1 < *(float *)a2;
  if (*a1 > v13)
    v14 = 1;
  if (v10 < v12 && !v14)
  {
    *(float *)&v38 = *a1;
    *((float *)&v38 + 1) = v12;
    if ((_DWORD)v9 == (_DWORD)v37)
      goto LABEL_26;
    goto LABEL_27;
  }
  v15 = v12 + *(float *)(a2 + 12);
  v16 = v10 < v12;
  if (v10 > v15)
    v16 = 1;
  if (v11 > v13 && !v16)
  {
    LODWORD(v38) = *(_DWORD *)a2;
    *((float *)&v38 + 1) = v10;
    if ((_DWORD)v9 == (_DWORD)v37)
      goto LABEL_26;
    goto LABEL_27;
  }
  if (v10 <= v15)
    v14 = 1;
  if (!v14)
  {
    *(float *)&v38 = *a1;
    *((float *)&v38 + 1) = v15;
    if ((_DWORD)v9 == (_DWORD)v37)
    {
LABEL_26:
      result = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, v9 + 1, (unint64_t)&v38);
      v9 = HIDWORD(v37);
      v18 = v36;
      v19 = *(_QWORD *)result;
LABEL_28:
      *((_QWORD *)v18 + v9) = v19;
      LODWORD(v9) = ++HIDWORD(v37);
      goto LABEL_29;
    }
LABEL_27:
    v18 = v36;
    v19 = v38;
    goto LABEL_28;
  }
  v17 = v11 >= *(float *)a2 || v16;
  if ((v17 & 1) == 0)
  {
    LODWORD(v38) = *(_DWORD *)a2;
    *((float *)&v38 + 1) = v10;
    if ((_DWORD)v9 == (_DWORD)v37)
      goto LABEL_26;
    goto LABEL_27;
  }
LABEL_29:
  v35 = *(_QWORD *)a1;
  if (v9 >> 30)
  {
    __break(0xC471u);
  }
  else
  {
    v22 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
    if (HIDWORD(v37))
    {
      v23 = 0;
      v24 = v36;
      v25 = 8 * HIDWORD(v37);
      v26 = 4;
      do
      {
        v38 = *((_QWORD *)v24 + v23);
        WebCore::euclidianDistance((WebCore *)&v38, (const WebCore::FloatPoint *)&v35, v21);
        v27 = v23 + 1;
        *((_DWORD *)v22 + v23) = v28;
        v26 -= 4;
        ++v23;
        v25 -= 8;
      }
      while (v25);
      if ((v27 & 0xFFFFFFFE) != 0)
      {
        v29 = -v26;
        v30 = *(float *)v22;
        v31 = (float *)((char *)v22 + 4);
        do
        {
          v32 = *v31++;
          v33 = v32;
          if (v32 < v30)
            v30 = v33;
          v29 -= 4;
        }
        while (v29);
      }
    }
    WTF::fastFree(v22, v20);
    result = (uint64_t)v36;
    if (v36)
    {
      v36 = 0;
      LODWORD(v37) = 0;
      return WTF::fastFree((WTF *)result, v34);
    }
  }
  return result;
}

void sub_1973149D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11)
{
  if (a10)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::PDFDocumentLayout::updateLayout(uint64_t a1, void *a2, int a3)
{
  int v4;
  id v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  void *v15;
  void *v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  int v21;
  int v22;
  CGFloat v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  CGPoint origin;
  CGSize size;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float *v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  unint64_t v52;
  float v53;
  float *v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  __int128 v66;
  CGRect v67;
  int v68;

  v4 = (int)a2;
  v6 = *(id *)a1;
  if (v6)
    v7 = objc_msgSend(v6, "pageCount");
  else
    v7 = 0;
  v8 = (WTF **)(a1 + 8);
  if (*(_DWORD *)(a1 + 16))
  {
    if (*(_DWORD *)(a1 + 20))
      *(_DWORD *)(a1 + 20) = 0;
    v9 = *v8;
    if (*v8)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v9, a2);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v10 = *(unsigned __int8 *)(a1 + 44);
  if (v7)
  {
    v11 = 0;
    v12 = v10 & 0xFE;
    v13 = 0.0;
    v14 = 0.0;
    do
    {
      v15 = (void *)objc_msgSend(*(id *)a1, "pageAtIndex:", v11);
      if (v15)
      {
        v16 = v15;
        CFRetain(v15);
        objc_msgSend(v16, "boundsForBox:", 1);
        v67.origin.x = v17;
        v67.origin.y = v18;
        v67.size.width = v19;
        v67.size.height = v20;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v66, &v67);
        v21 = objc_msgSend(v16, "rotation");
        if (v21 < 0)
          v21 += 360 * (-v21 / 0x168u) + 360;
        v22 = (int)(round((double)v21 / 90.0) * 90.0) % 360;
        v23 = *((double *)&v66 + 1);
        if (v22 == 270 || v22 == 90)
          v23 = COERCE_DOUBLE(vrev64_s32(*(int32x2_t *)((char *)&v66 + 8)));
        if (v13 >= *(float *)&v23)
          v24 = v13;
        else
          v24 = *(float *)&v23;
        if (v13 >= *(float *)&v23)
          v25 = v13;
        else
          v25 = *(float *)&v23;
        if (v7 - 1 != v11)
          v25 = v13;
        v26 = v14 + (float)(*(float *)&v23 + 4.0);
        if (v13 >= v26)
          v27 = v13;
        else
          v27 = v14 + (float)(*(float *)&v23 + 4.0);
        if ((v11 & 1) != 0)
          v25 = v27;
        else
          v26 = *(float *)&v23;
        if (v12 == 2)
        {
          v14 = v26;
          v13 = v25;
        }
        else
        {
          v13 = v24;
        }
        v67.origin = (CGPoint)v66;
        *(_QWORD *)&v67.size.width = v66;
        v67.size.height = v23;
        v68 = v22;
        v28 = *(unsigned int *)(a1 + 20);
        if ((_DWORD)v28 == *(_DWORD *)(a1 + 16))
        {
          v29 = WTF::Vector<WebKit::PDFDocumentLayout::PageGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 8, v28 + 1, (unint64_t)&v67);
          v30 = *(_QWORD *)(a1 + 8) + 36 * *(unsigned int *)(a1 + 20);
          origin = *(CGPoint *)v29;
          size = *(CGSize *)(v29 + 16);
          v33 = *(_DWORD *)(v29 + 32);
        }
        else
        {
          v30 = (uint64_t)*v8 + 36 * v28;
          origin = v67.origin;
          size = v67.size;
          v33 = v68;
        }
        *(_DWORD *)(v30 + 32) = v33;
        *(CGPoint *)v30 = origin;
        *(CGSize *)(v30 + 16) = size;
        ++*(_DWORD *)(a1 + 20);
        CFRelease(v16);
      }
      else
      {
        v68 = 0;
        memset(&v67, 0, sizeof(v67));
        v34 = *(unsigned int *)(a1 + 20);
        if ((_DWORD)v34 == *(_DWORD *)(a1 + 16))
        {
          v35 = WTF::Vector<WebKit::PDFDocumentLayout::PageGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 8, v34 + 1, (unint64_t)&v67);
          v36 = *(_QWORD *)(a1 + 8) + 36 * *(unsigned int *)(a1 + 20);
          v37 = *(_DWORD *)(v35 + 32);
          v38 = *(_OWORD *)(v35 + 16);
          *(_OWORD *)v36 = *(_OWORD *)v35;
          *(_OWORD *)(v36 + 16) = v38;
          *(_DWORD *)(v36 + 32) = v37;
        }
        else
        {
          v39 = (uint64_t)*v8 + 36 * v34;
          *(_DWORD *)(v39 + 32) = 0;
          *(_OWORD *)v39 = 0uLL;
          *(_OWORD *)(v39 + 16) = 0uLL;
        }
        ++*(_DWORD *)(a1 + 20);
      }
      ++v11;
    }
    while (v7 != v11);
    v10 = *(unsigned __int8 *)(a1 + 44);
  }
  else
  {
    v13 = 0.0;
  }
  v40 = v13 + 12.0;
  if (v10 - 2 >= 2)
  {
    if (v10 > 1)
      return;
    v41 = 8.0;
    if (*(_QWORD *)a1)
    {
      v42 = objc_msgSend(*(id *)a1, "pageCount");
      if (v42)
      {
        v43 = 0;
        v44 = 36 * *(unsigned int *)(a1 + 20);
        v45 = 8.0;
        while (v44 != v43)
        {
          v46 = (float *)((char *)*v8 + v43);
          v47 = floorf((float)(v40 - v46[6]) * 0.5);
          if (v47 < 0.0)
            v47 = 0.0;
          v41 = v45 + (float)(v46[7] + 6.0);
          v46[4] = v47;
          v46[5] = v45;
          v43 += 36;
          v45 = v41;
          if (!--v42)
            goto LABEL_72;
        }
        v41 = v45;
      }
    }
LABEL_72:
    if ((a3 & 1) != 0)
      goto LABEL_73;
    goto LABEL_76;
  }
  v41 = 8.0;
  if (*(_QWORD *)a1)
  {
    v48 = objc_msgSend(*(id *)a1, "pageCount");
    if (v48)
    {
      v49 = 0;
      v50 = 0;
      v51 = v40 + -12.0;
      v52 = *(unsigned int *)(a1 + 20);
      v53 = 0.0;
      while (1)
      {
        if (v52 == v50)
          goto LABEL_69;
        v54 = (float *)((char *)*v8 + v49);
        v56 = v54[6];
        v55 = v54[7];
        if ((v50 & 1) != 0)
          break;
        if (v48 - 1 == v50)
        {
          v57 = floorf((float)(v51 - v56) * 0.5) + 6.0;
          v58 = v41;
LABEL_67:
          v54[4] = v57;
          v54[5] = v58;
          v41 = v41 + (float)(v55 + 6.0);
        }
        ++v50;
        v49 += 36;
        v53 = v55;
        if (v48 == v50)
          goto LABEL_69;
      }
      if (v50 - 1 >= v52)
      {
        __break(0xC471u);
        return;
      }
      v59 = v53 + 0.0;
      if (v59 >= v55)
        v60 = v59;
      else
        v60 = v54[7];
      v61 = (float *)((char *)*v8 + v49);
      v62 = *(v61 - 3);
      v63 = floorf((float)((float)((float)((float)(v51 - v62) - v56) + -4.0) * 0.5) + 6.0);
      v57 = (float)(v62 + v63) + 4.0;
      v64 = v41 + floorf((float)(v60 - *(v61 - 2)) * 0.5);
      v58 = v41 + floorf((float)(v60 - v55) * 0.5);
      *(v61 - 5) = v63;
      *(v61 - 4) = v64;
      v55 = v60;
      goto LABEL_67;
    }
  }
LABEL_69:
  if (a3)
  {
LABEL_73:
    v65 = (float)v4 / v40;
    if (v65 < 0.1)
      v65 = 0.1;
    *(float *)(a1 + 40) = v65;
  }
LABEL_76:
  *(_QWORD *)(a1 + 24) = 0;
  *(float *)(a1 + 32) = v40;
  *(float *)(a1 + 36) = (float)(v41 + -6.0) + 8.0;
}

void sub_197314ED4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::PDFDocumentLayout::geometryForPage(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  CFTypeRef v12;

  v12 = cf;
  if (cf)
    CFRetain(cf);
  v6 = WebKit::PDFDocumentLayout::indexForPage((id *)a2, &v12);
  v8 = v7;
  if (cf)
    CFRelease(cf);
  if (!v8)
  {
    v11 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_9;
  }
  if (v6 < *(unsigned int *)(a2 + 20))
  {
    v9 = *(_QWORD *)(a2 + 8) + 36 * v6;
    v10 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v9;
    *(_OWORD *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v9 + 32);
    v11 = 1;
LABEL_9:
    *(_BYTE *)(a1 + 36) = v11;
    return;
  }
  __break(0xC471u);
}

void sub_197314FA8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

float64x2_t WebKit::PDFDocumentLayout::toPageTransform(uint64_t a1, float32x2_t *a2)
{
  __int32 v4;
  __int128 v5;
  double v6;
  double v7;
  __int128 v8;
  float v9;
  __int128 v10;
  float64x2_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  FloatSize v15;

  *(_OWORD *)a1 = xmmword_1978D05B8;
  *(_OWORD *)(a1 + 16) = unk_1978D05C8;
  *(_OWORD *)(a1 + 32) = xmmword_1978D05D8;
  v4 = a2[4].i32[0];
  switch(v4)
  {
    case 90:
      v12 = 0x3FF0000000000000uLL;
      *(_QWORD *)&v13 = 0;
      *((_QWORD *)&v13 + 1) = 0x3FF0000000000000;
      v14 = 0uLL;
      WebCore::AffineTransform::rotate((WebCore::AffineTransform *)&v12, 90.0);
      v15 = (FloatSize)0x8000000080000000;
      WebCore::AffineTransform::translate((WebCore::AffineTransform *)&v12, &v15);
      v8 = v13;
      *(_OWORD *)a1 = v12;
      *(_OWORD *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 32) = v14;
      v6 = a2->f32[1];
      v9 = (float)-a2[1].f32[0] - a2->f32[0];
LABEL_7:
      v7 = v9;
      goto LABEL_8;
    case 180:
      v12 = 0x3FF0000000000000uLL;
      *(_QWORD *)&v13 = 0;
      *((_QWORD *)&v13 + 1) = 0x3FF0000000000000;
      v14 = 0uLL;
      WebCore::AffineTransform::rotate((WebCore::AffineTransform *)&v12, 180.0);
      v15 = (FloatSize)0x8000000080000000;
      WebCore::AffineTransform::translate((WebCore::AffineTransform *)&v12, &v15);
      v10 = v13;
      *(_OWORD *)a1 = v12;
      *(_OWORD *)(a1 + 16) = v10;
      *(_OWORD *)(a1 + 32) = v14;
      v6 = (float)((float)-a2[1].f32[0] - a2->f32[0]);
      v9 = (float)-a2[1].f32[1] - a2->f32[1];
      goto LABEL_7;
    case 270:
      v12 = 0x3FF0000000000000uLL;
      *(_QWORD *)&v13 = 0;
      *((_QWORD *)&v13 + 1) = 0x3FF0000000000000;
      v14 = 0uLL;
      WebCore::AffineTransform::rotate((WebCore::AffineTransform *)&v12, 270.0);
      v15 = (FloatSize)0x8000000080000000;
      WebCore::AffineTransform::translate((WebCore::AffineTransform *)&v12, &v15);
      v5 = v13;
      *(_OWORD *)a1 = v12;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 32) = v14;
      v6 = (float)((float)-a2[1].f32[1] - a2->f32[1]);
      v7 = a2->f32[0];
LABEL_8:
      WebCore::AffineTransform::translate((WebCore::AffineTransform *)a1, v6, v7);
      return result;
  }
  *(_QWORD *)a1 = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
  result = vcvtq_f64_f32(*a2);
  *(float64x2_t *)(a1 + 32) = result;
  return result;
}

uint64_t WebKit::PDFDocumentLayout::documentToPDFPage(uint64_t result, unint64_t a2, float a3, float a4)
{
  float32x2_t *v4;
  float v5;
  _BYTE v6[48];
  float v7[2];

  if (*(unsigned int *)(result + 20) > a2)
  {
    v4 = (float32x2_t *)(*(_QWORD *)(result + 8) + 36 * a2);
    v5 = v4[2].f32[1];
    v7[0] = a3 - v4[2].f32[0];
    v7[1] = v4[3].f32[1] - (float)(a4 - v5);
    WebKit::PDFDocumentLayout::toPageTransform((uint64_t)v6, v4);
    return WebCore::AffineTransform::mapPoint((WebCore::AffineTransform *)v6, (const WebCore::FloatPoint *)v7);
  }
  return result;
}

void sub_197315360(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::UnifiedPDFPlugin::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x400);
  result = WebKit::UnifiedPDFPlugin::UnifiedPDFPlugin(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1973153C4(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::UnifiedPDFPlugin(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WebCore::Document *v10;
  StringImpl *v11;
  uint64_t v12;
  WebCore::Element *v13;
  WTF::StringImpl *v14;
  StringImpl *m_ptr;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebCore::ContainerNode *v18;
  WebCore::ContainerNode *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v22;
  char v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;
  AtomString v29;
  WebCore::Document *v30;
  StringImpl *v31;

  v4 = WebKit::PDFPluginBase::PDFPluginBase(a1, a2);
  *(_QWORD *)v4 = off_1E34D2E88;
  *(_QWORD *)(v4 + 560) = &unk_1E34D3430;
  *(_OWORD *)(v4 + 568) = 0u;
  *(_OWORD *)(v4 + 584) = 0u;
  *(_QWORD *)(v4 + 600) = 0;
  *(_DWORD *)(v4 + 608) = 1065353216;
  *(_BYTE *)(v4 + 612) = 1;
  *(_OWORD *)(v4 + 616) = 0u;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_OWORD *)(v4 + 680) = 0u;
  *(_OWORD *)(v4 + 696) = 0u;
  *(_QWORD *)(v4 + 712) = 0;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(v4 + 720) = _Q1;
  *(_BYTE *)(v4 + 736) = 0;
  *(_BYTE *)(v4 + 744) = 0;
  *(_BYTE *)(v4 + 748) = 0;
  *(_BYTE *)(v4 + 756) = 0;
  *(_DWORD *)(v4 + 760) = 0;
  *(_BYTE *)(v4 + 764) = 1;
  *(_QWORD *)(v4 + 768) = 0;
  *(_BYTE *)(v4 + 776) = 0;
  *(_BYTE *)(v4 + 788) = 0;
  *(_DWORD *)(v4 + 784) = 0;
  *(_OWORD *)(v4 + 800) = 0u;
  *(_OWORD *)(v4 + 816) = 0u;
  *(_OWORD *)(v4 + 825) = 0u;
  WebCore::Timer::Timer<WebKit::UnifiedPDFPlugin,WebKit::UnifiedPDFPlugin>((WebCore::TimerBase *)(v4 + 848), a1, (uint64_t)WebKit::UnifiedPDFPlugin::autoscrollTimerFired, 0);
  WebCore::Timer::Timer<WebKit::UnifiedPDFPlugin,WebKit::UnifiedPDFPlugin>((WebCore::TimerBase *)(a1 + 904), a1, (uint64_t)WebKit::UnifiedPDFPlugin::incrementalLoadingRepaintTimerFired, 0);
  *(_QWORD *)(a1 + 960) = -[WKPDFFormMutationObserver initWithPlugin:]([WKPDFFormMutationObserver alloc], "initWithPlugin:", a1);
  *(_BYTE *)(a1 + 992) = 0;
  *(_WORD *)(a1 + 41) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 1016) = 0;
  *(_QWORD *)(a1 + 1008) = 0;
  if (WebKit::PDFPluginBase::isFullFramePlugin((WebKit::PDFPluginBase *)a1))
  {
    v10 = *(WebCore::Document **)(*(_QWORD *)(a2 + 40) + 8);
    *((_DWORD *)v10 + 6) += 2;
    v30 = v10;
    WebCore::Document::createElement(v10, MEMORY[0x1E0DD5FA0]);
    v11 = v31;
    v31 = 0;
    v12 = *(_QWORD *)(a1 + 536);
    *(_QWORD *)(a1 + 536) = v11;
    if (v12)
    {
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v31);
    v13 = *(WebCore::Element **)(a1 + 536);
    WTF::AtomStringImpl::add();
    v29.var0.m_impl.m_ptr = v31;
    WebCore::Element::setAttributeWithoutSynchronization(v13, MEMORY[0x1E0DD5FA8], &v29);
    m_ptr = v29.var0.m_impl.m_ptr;
    v29.var0.m_impl.m_ptr = 0;
    if (m_ptr)
    {
      if (*(_DWORD *)m_ptr == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v14);
      else
        *(_DWORD *)m_ptr -= 2;
    }
    WebCore::Document::createElement(v30, MEMORY[0x1E0DD6118]);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v26 = (WTF::StringImpl *)v31;
    WebCore::Node::setTextContent();
    if (v28 && v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v16);
      else
        *(_DWORD *)v27 -= 2;
    }
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v16);
      else
        *(_DWORD *)v26 -= 2;
    }
    WebCore::ContainerNode::appendChild(*(WebCore::ContainerNode **)(a1 + 536), (Node *)v29.var0.m_impl.m_ptr);
    if (v25 && v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v17);
      else
        *(_DWORD *)v24 -= 2;
    }
    v18 = (WebCore::ContainerNode *)WebCore::Document::bodyOrFrameset(v30);
    v19 = v18;
    if (v18)
      *((_DWORD *)v18 + 6) += 2;
    WebCore::ContainerNode::appendChild(v18, *(Node **)(a1 + 536));
    if (v23 && v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v20);
        if (v19)
        {
LABEL_30:
          if (*((_DWORD *)v19 + 6) == 2)
          {
            if ((*((_WORD *)v19 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v19);
          }
          else
          {
            *((_DWORD *)v19 + 6) -= 2;
          }
        }
LABEL_32:
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v29);
        WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v30);
        return a1;
      }
      *(_DWORD *)v22 -= 2;
    }
    if (v19)
      goto LABEL_30;
    goto LABEL_32;
  }
  return a1;
}

void sub_19731574C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  uint64_t v20;
  WebKit::PDFDocumentLayout *v21;
  WebCore::TimerBase *v22;
  WebCore::TimerBase *v23;
  uint64_t v24;
  _DWORD **v25;
  WTF **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  void *v32;
  WTF **v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  _DWORD **v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  WTF::StringImpl *v55;

  v28 = v24;
  if (v28)
  {
    v30 = v28;
    v31 = *(_DWORD *)(v28 + 24) - 2;
    if (v31)
    {
      *(_DWORD *)(v30 + 24) = v31;
    }
    else if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v30);
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&a20);
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v27 - 80));
  v33 = (WTF **)(v20 + 1000);
  v34 = *(_QWORD *)(v20 + 1016);
  *(_QWORD *)(v20 + 1016) = 0;
  if (v34)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v34 + 16), v32);
  v35 = *v33;
  if (*v33)
  {
    *(_QWORD *)(v20 + 1000) = 0;
    *(_DWORD *)(v20 + 1008) = 0;
    WTF::fastFree(v35, v32);
  }
  v36 = *v26;
  if (*v26)
  {
    *(_QWORD *)(v20 + 968) = 0;
    *(_DWORD *)(v20 + 976) = 0;
    WTF::fastFree(v36, v32);
  }
  v37 = *(const void **)(v20 + 960);
  *(_QWORD *)(v20 + 960) = 0;
  if (v37)
    CFRelease(v37);
  *(_QWORD *)(v20 + 904) = off_1E34B3740;
  v38 = *(_QWORD *)(v20 + 952);
  *(_QWORD *)(v20 + 952) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  WebCore::TimerBase::~TimerBase(v23);
  *(_QWORD *)(v20 + 848) = off_1E34B3740;
  v39 = *(_QWORD *)(v20 + 896);
  *(_QWORD *)(v20 + 896) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  WebCore::TimerBase::~TimerBase(v22);
  v41 = *(const void **)(v20 + 832);
  *(_QWORD *)(v20 + 832) = 0;
  if (v41)
    CFRelease(v41);
  v42 = *(const void **)(v20 + 808);
  *(_QWORD *)(v20 + 808) = 0;
  if (v42)
    CFRelease(v42);
  v43 = *(const void **)(v20 + 768);
  *(_QWORD *)(v20 + 768) = 0;
  if (v43)
    CFRelease(v43);
  v44 = *(_DWORD ***)(v20 + 696);
  if (v44)
    WTF::HashTable<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashMap<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::deallocateTable(v44, v40);
  v45 = *(_DWORD **)(v20 + 688);
  *(_QWORD *)(v20 + 688) = 0;
  if (v45)
  {
    if (v45[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 16))(v45);
    else
      --v45[2];
  }
  v46 = *(_DWORD **)(v20 + 680);
  *(_QWORD *)(v20 + 680) = 0;
  if (v46)
  {
    if (v46[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 16))(v46);
    else
      --v46[2];
  }
  v47 = *(_DWORD **)(v20 + 672);
  *(_QWORD *)(v20 + 672) = 0;
  if (v47)
  {
    if (v47[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 16))(v47);
    else
      --v47[2];
  }
  v48 = *(_DWORD **)(v20 + 664);
  *(_QWORD *)(v20 + 664) = 0;
  if (v48)
  {
    if (v48[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 16))(v48);
    else
      --v48[2];
  }
  v49 = *(_DWORD **)(v20 + 656);
  *(_QWORD *)(v20 + 656) = 0;
  if (v49)
  {
    if (v49[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 16))(v49);
    else
      --v49[2];
  }
  v50 = *(_DWORD **)(v20 + 648);
  *(_QWORD *)(v20 + 648) = 0;
  if (v50)
  {
    if (v50[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 16))(v50);
    else
      --v50[2];
  }
  v51 = *(_DWORD **)(v20 + 640);
  *(_QWORD *)(v20 + 640) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 16))(v51);
    else
      --v51[2];
  }
  v52 = *(_DWORD **)(v20 + 632);
  *(_QWORD *)(v20 + 632) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 16))(v52);
    else
      --v52[2];
  }
  v53 = *(_DWORD **)(v20 + 624);
  *(_QWORD *)(v20 + 624) = 0;
  if (v53)
  {
    if (v53[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 16))(v53);
    else
      --v53[2];
  }
  v54 = *v25;
  *v25 = 0;
  if (v54)
  {
    if (v54[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 16))(v54);
    else
      --v54[2];
  }
  WebKit::PDFDocumentLayout::~PDFDocumentLayout(v21, v40);
  WebKit::PDFPluginBase::~PDFPluginBase((WebKit::PDFPluginBase *)v20, v55);
  _Unwind_Resume(a1);
}

IntPoint WebKit::UnifiedPDFPlugin::autoscrollTimerFired(IntPoint this)
{
  int32x2_t *v1;
  float32x2_t v2;
  float32x2_t v3;
  int8x8_t v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  int32x2_t v12;
  float v13[10];
  IntPoint v14;
  unint64_t v15;
  IntPoint v16;

  v1 = (int32x2_t *)this;
  if (*(_BYTE *)(*(_QWORD *)&this + 840))
  {
    this = *(IntPoint *)(*(_QWORD *)&this + 832);
    if (this)
    {
      this = (IntPoint)objc_msgSend(*(id *)&this, "isEmpty");
      if ((this.m_x & 1) == 0)
      {
        this = v1[62].i8[0]
             ? (IntPoint)WebCore::AffineTransform::mapPoint((WebCore::AffineTransform *)&v1[41], (const WebCore::IntPoint *)((char *)&v1[52] + 4)): 0;
        v14 = this;
        v2 = vcvt_f32_s32(v1[40]);
        v3 = vcvt_f32_s32((int32x2_t)this);
        v4 = vbsl_s8((int8x8_t)vcgt_f32(v3, v2), (int8x8_t)vcvt_s32_f32(vsub_f32(v3, v2)), (int8x8_t)vmin_s32((int32x2_t)this, 0));
        if (v4)
        {
          v12 = (int32x2_t)v4;
          if ((objc_msgSend(*(id *)&v1[37], "isLocked") & 1) == 0)
          {
            v15 = (unint64_t)vadd_s32(v1[47], v12);
            *(_QWORD *)v13 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v1 + 424))(v1);
            v16 = (IntPoint)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v1 + 432))(v1);
            v1[47] = (int32x2_t)WebCore::IntPoint::constrainedBetween((WebCore::IntPoint *)&v15, (const WebCore::IntPoint *)v13, (const WebCore::IntPoint *)&v16);
            (*(void (**)(int32x2_t *))(*(_QWORD *)v1 + 1336))(v1);
            v16 = (IntPoint)v1[47];
            WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v13, &v16);
            WebKit::UnifiedPDFPlugin::scrollToPointInContentsSpace((uint64_t)v1, v13[0], v13[1]);
          }
          WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v16, &v14);
          v5 = WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>((uint64_t)v1, *(float *)&v16.m_x);
          v7 = v6;
          WebKit::UnifiedPDFPlugin::visibleRow(v13, (uint64_t)v1);
          v8 = WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint((uint64_t)&v1[71], (uint64_t)v13, v5, v7);
          std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v9);
          WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)&v1[71], v8, v5, v7);
          v15 = __PAIR64__(v11, v10);
          return (IntPoint)WebKit::UnifiedPDFPlugin::continueTrackingSelection((uint64_t)v1, v8, (float *)&v15, 1);
        }
      }
    }
  }
  else if ((*(_QWORD *)(*(_QWORD *)&this + 880) & 0xFFFFFFFFFFFFLL) != 0)
  {
    return (IntPoint)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(*(_QWORD *)&this + 848));
  }
  return this;
}

void sub_197315CAC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

void WebKit::UnifiedPDFPlugin::~UnifiedPDFPlugin(WebKit::UnifiedPDFPlugin *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  _DWORD **v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;

  v3 = *((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
  v4 = (WTF *)*((_QWORD *)this + 125);
  if (v4)
  {
    *((_QWORD *)this + 125) = 0;
    *((_DWORD *)this + 252) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 121);
  if (v5)
  {
    *((_QWORD *)this + 121) = 0;
    *((_DWORD *)this + 244) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (const void *)*((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v6)
    CFRelease(v6);
  *((_QWORD *)this + 113) = off_1E34B3740;
  v7 = *((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WebCore::TimerBase::~TimerBase((WebKit::UnifiedPDFPlugin *)((char *)this + 904));
  *((_QWORD *)this + 106) = off_1E34B3740;
  v8 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WebCore::TimerBase::~TimerBase((WebKit::UnifiedPDFPlugin *)((char *)this + 848));
  v10 = (const void *)*((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v10)
    CFRelease(v10);
  v11 = (const void *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v11)
    CFRelease(v11);
  v12 = (const void *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v12)
    CFRelease(v12);
  v13 = (_DWORD **)*((_QWORD *)this + 87);
  if (v13)
    WTF::HashTable<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashMap<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::deallocateTable(v13, v9);
  v14 = (_DWORD *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
    else
      --v14[2];
  }
  v15 = (_DWORD *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
    else
      --v15[2];
  }
  v16 = (_DWORD *)*((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
    else
      --v16[2];
  }
  v17 = (_DWORD *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
    else
      --v17[2];
  }
  v18 = (_DWORD *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
    else
      --v18[2];
  }
  v19 = (_DWORD *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
    else
      --v19[2];
  }
  v20 = (_DWORD *)*((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
    else
      --v20[2];
  }
  v21 = (_DWORD *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
    else
      --v21[2];
  }
  v22 = (_DWORD *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
    else
      --v22[2];
  }
  v23 = (_DWORD *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
    else
      --v23[2];
  }
  WebKit::PDFDocumentLayout::~PDFDocumentLayout((WebKit::UnifiedPDFPlugin *)((char *)this + 568), v9);
  WebKit::PDFPluginBase::~PDFPluginBase(this, v24);
}

void `non-virtual thunk to'WebKit::UnifiedPDFPlugin::~UnifiedPDFPlugin(WebKit::UnifiedPDFPlugin *this, void *a2)
{
  WebKit::UnifiedPDFPlugin::~UnifiedPDFPlugin((WebKit::UnifiedPDFPlugin *)((char *)this - 560), a2);
}

{
  WebKit::UnifiedPDFPlugin::operator delete((WebKit::UnifiedPDFPlugin *)((char *)this - 560), a2);
}

void WebKit::UnifiedPDFPlugin::operator delete(WebKit::UnifiedPDFPlugin *a1, void *a2)
{
  unsigned int *v2;
  void *v3;

  WebKit::UnifiedPDFPlugin::~UnifiedPDFPlugin(a1, a2);
  if (atomic_load(v2 + 20))
    bzero(v2, 0x400uLL);
  else
    WTF::fastFree((WTF *)v2, v3);
}

void WebKit::UnifiedPDFPlugin::teardown(WebKit::UnifiedPDFPlugin *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Page *v6;
  WebCore::Page *v7;
  uint64_t v8;
  unsigned __int8 **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  void *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  const __CFString *v38;
  WTF::StringImpl *v39;
  const void *v40;
  uint64_t v41[3];
  unsigned int v42;
  __int16 v43;
  char v44;

  v2 = *((_QWORD *)this + 127);
  if (v2)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v2 + 16));
    v4 = *(_QWORD *)(v2 + 40);
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 832))(v4);
      if (v5)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 24))(v5, 0);
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 16), v3);
  }
  WebKit::PDFPluginBase::teardown(this);
  WebCore::GraphicsLayer::unparentAndClear();
  WebCore::GraphicsLayer::unparentAndClear();
  WebCore::GraphicsLayer::unparentAndClear();
  v6 = (WebCore::Page *)WebKit::PDFPluginBase::page(this);
  v7 = v6;
  if (v6)
  {
    ++*(_DWORD *)v6;
    if (*((_QWORD *)this + 88))
    {
      v8 = WebCore::Page::scrollingCoordinator(v6);
      v9 = (unsigned __int8 **)v8;
      if (v8)
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v8 + 8));
      (*((void (**)(unsigned __int8 **, _QWORD, _QWORD))*v9 + 32))(v9, *((_QWORD *)this + 88), *((_QWORD *)this + 89));
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 13) + 8) + 24) + 8);
      if (*(_BYTE *)(v11 + 144))
        v11 = 0;
      v12 = *(_QWORD *)(v11 + 288);
      if (v12)
        ++*(_DWORD *)(v12 + 8);
      *(_OWORD *)v41 = *((_OWORD *)this + 44);
      v13 = *(_QWORD *)(v12 + 576);
      if (!v13)
        goto LABEL_46;
      v14 = *(_DWORD *)(v13 - 8);
      v42 = -1640531527;
      v43 = 0;
      v44 = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v42, v41);
      v15 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v42);
      v16 = (uint64_t *)(v12 + 576);
      v17 = v15 & v14;
      v18 = (uint64_t *)(v13 + 24 * (v15 & v14));
      v19 = *v18;
      v20 = v18[1];
      if (*v18 == v41[0] && v20 == v41[1])
      {
LABEL_26:
        v24 = *v16;
        if (!*v16)
          goto LABEL_31;
        v25 = *(_DWORD *)(v24 - 4);
      }
      else
      {
        v22 = 1;
        while (v19 | v20)
        {
          v17 = (v17 + v22) & v14;
          v18 = (uint64_t *)(v13 + 24 * v17);
          v19 = *v18;
          v20 = v18[1];
          ++v22;
          if (*v18 == v41[0] && v20 == v41[1])
            goto LABEL_26;
        }
        v24 = *v16;
        if (!*v16)
          goto LABEL_46;
        v25 = *(_DWORD *)(v24 - 4);
        v18 = (uint64_t *)(v24 + 24 * v25);
      }
      v24 += 24 * v25;
      if ((uint64_t *)v24 == v18)
      {
LABEL_46:
        if (*(_DWORD *)(v12 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        else
          --*(_DWORD *)(v12 + 8);
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(v9[1], v10);
        goto LABEL_50;
      }
LABEL_31:
      if ((uint64_t *)v24 != v18)
      {
        *(_OWORD *)v18 = xmmword_1978CF7D0;
        v26 = (unsigned int *)v18[2];
        v18[2] = 0;
        if (v26)
        {
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v10);
            v16 = (uint64_t *)(v12 + 576);
          }
        }
        ++*(_DWORD *)(*v16 - 16);
        v29 = *v16;
        if (*v16)
          v30 = *(_DWORD *)(v29 - 12) - 1;
        else
          v30 = -1;
        *(_DWORD *)(v29 - 12) = v30;
        v31 = *v16;
        if (*v16)
        {
          v32 = 6 * *(_DWORD *)(v31 - 12);
          v33 = *(_DWORD *)(v31 - 4);
          if (v32 < v33 && v33 >= 9)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v16, v33 >> 1);
        }
      }
      goto LABEL_46;
    }
  }
LABEL_50:
  v35 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter", v41[0]);
  v36 = *((_QWORD *)this + 120);
  WebKit::mutationObserverNotificationString(v41);
  v37 = (WTF::StringImpl *)v41[0];
  if (v41[0])
    v38 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v38 = &stru_1E351F1B8;
  objc_msgSend(v35, "removeObserver:name:object:", v36, v38, *((_QWORD *)this + 37));
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v39);
    else
      *(_DWORD *)v37 -= 2;
  }
  v40 = (const void *)*((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v40)
    CFRelease(v40);
  if (v7)
    WTF::RefCounted<WebCore::Page>::deref(v7);
}

void sub_197316320(_Unwind_Exception *a1, void *a2)
{
  _DWORD *v2;
  uint64_t v3;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  WTF::RefCounted<WebCore::Page>::deref(v2);
  _Unwind_Resume(a1);
}

uint64_t *WebKit::mutationObserverNotificationString(uint64_t *this)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD v3[2];

  if ((_MergedGlobals_90 & 1) == 0)
  {
    v3[0] = "PDFFormDidChangeValue";
    v3[1] = 22;
    v2 = this;
    WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE72D30, (uint64_t)v3);
    this = v2;
    _MergedGlobals_90 = 1;
  }
  v1 = qword_1ECE72D30;
  if (qword_1ECE72D30)
    *(_DWORD *)qword_1ECE72D30 += 2;
  *this = v1;
  return this;
}

uint64_t WebKit::UnifiedPDFPlugin::graphicsLayer(WebKit::UnifiedPDFPlugin *this)
{
  return *((_QWORD *)this + 77);
}

_DWORD *WebKit::UnifiedPDFPlugin::installPDFDocument(_DWORD *this)
{
  unsigned __int8 v1;
  WebKit::UnifiedPDFPlugin *v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  const __CFString *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v1 = atomic_load((unsigned __int8 *)this + 530);
  if ((v1 & 1) == 0)
  {
    v2 = (WebKit::UnifiedPDFPlugin *)this;
    v3 = *((_QWORD *)this + 37);
    if (v3)
    {
      v4 = *((_QWORD *)this + 12);
      if (v4)
      {
        if (*(_QWORD *)(v4 + 8))
        {
          CFRetain(*((CFTypeRef *)this + 37));
          v5 = (const void *)*((_QWORD *)v2 + 71);
          *((_QWORD *)v2 + 71) = v3;
          if (v5)
            CFRelease(v5);
          WebKit::UnifiedPDFPlugin::updateLayout((uint64_t)v2, 1);
          v6 = *((_QWORD *)v2 + 12);
          if (v6)
          {
            v7 = *(uint64_t **)(v6 + 8);
            if (v7)
              WebKit::PluginView::layerHostingStrategyDidChange(v7);
          }
          v8 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
          v9 = *((_QWORD *)v2 + 120);
          WebKit::mutationObserverNotificationString((uint64_t *)&v13);
          v10 = v13;
          if (v13)
            v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
          else
            v11 = &stru_1E351F1B8;
          objc_msgSend(v8, "addObserver:selector:name:object:", v9, sel_formChanged_, v11, *((_QWORD *)v2 + 37));
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v12);
            else
              *(_DWORD *)v10 -= 2;
          }
          WebKit::UnifiedPDFPlugin::revealFragmentIfNeeded(v2);
          this = (_DWORD *)*((_QWORD *)v2 + 69);
          if (this)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)this + 40))(this);
            this = (_DWORD *)*((_QWORD *)v2 + 69);
            *((_QWORD *)v2 + 69) = 0;
            if (this)
            {
              if (this[4] == 1)
                return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
              else
                --this[4];
            }
          }
        }
      }
    }
  }
  return this;
}

void sub_1973165A0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WebKit::UnifiedPDFPlugin::updateLayout(uint64_t a1, int a2)
{
  float v2;
  float v3;
  void *v6;
  void *v7;
  _BOOL4 v8;
  BOOL v9;
  double v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  char *v16;
  float v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  float v27;
  float v29;
  float v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  float *v35;
  float v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  void *v44;
  _DWORD *v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  WebCore *v52;
  CGColor *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  WTF::StringImpl *v57;
  _DWORD *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  _DWORD *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  _DWORD *v70;
  WTF::StringImpl *v71;
  _DWORD *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  _DWORD *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WebKit *v84;
  uint64_t v85;
  void *PDFSelectionClass;
  uint64_t v87;
  _DWORD *v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  WTF::ThreadSafeWeakPtrControlBlock *v92;
  WTF *v93;
  int v94;
  void *v95;
  int v96;
  int v97;
  uint64_t v98;
  _DWORD *v99;
  _DWORD *v100;
  uint64_t v101;
  void *v102;
  WTF::StringImpl *v103;
  _DWORD *v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  _DWORD *v109;
  WTF::StringImpl *v110;
  _DWORD *v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  uint64_t v116;
  float v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  _DWORD *v127;
  _DWORD *v128;
  WebCore::GraphicsLayer *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WebCore::GraphicsLayer *v134;
  _DWORD *result;
  uint64_t v136;
  float v137;
  float v138;
  float v139;
  const FloatRect *v140;
  BOOL v141;
  float v143;
  float v144;
  unint64_t v145;
  float v146;
  float v147;
  float v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  WTF::StringImpl *v152;
  IntPoint v153;
  uint64_t v154;
  float v155;
  float v156;

  WebKit::UnifiedPDFPlugin::availableContentsRect((WebCore::Widget **)a1);
  v7 = v6;
  if (*(_BYTE *)(a1 + 763))
  {
    v8 = *(_BYTE *)(a1 + 764) != 0;
    if (*(_BYTE *)(a1 + 764))
      v9 = 0;
    else
      v9 = a2 == 0;
    if (v9)
    {
      v8 = 0;
LABEL_36:
      v21 = 0;
      v32 = 1;
      goto LABEL_57;
    }
  }
  else
  {
    v8 = 1;
  }
  if (!*(_DWORD *)(a1 + 588))
    goto LABEL_36;
  v10 = *(double *)(a1 + 720);
  v11 = *(_DWORD *)(a1 + 380);
  WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)a1);
  v12 = 1.0 / v10;
  v14 = (float)((float)v11 * v12) - v13;
  v15 = 1.0 / *(float *)(a1 + 608);
  v16 = *(char **)(a1 + 568);
  if (v16)
    v16 = (char *)objc_msgSend(v16, "pageCount");
  v17 = v15 * v14;
  v18 = *(unsigned __int8 *)(a1 + 612);
  v19 = v18 >= 2;
  v20 = v18 - 2;
  if (!v19)
  {
    if (v16)
    {
      v33 = 0;
      v21 = 0;
      v34 = v16 - 1;
      while (1)
      {
        if (v21 >= *(unsigned int *)(a1 + 588))
        {
          if (v17 <= 0.0 || v34 == (char *)v21)
          {
            v38 = 0.0;
            goto LABEL_56;
          }
        }
        else
        {
          v35 = (float *)(*(_QWORD *)(a1 + 576) + v33);
          if ((float)(v35[5] + v35[7]) >= v17 || v34 == (char *)v21)
          {
            v40 = v35[4];
            v41 = v35[6];
            goto LABEL_55;
          }
        }
        ++v21;
        v33 += 36;
        if (v16 == (char *)v21)
          goto LABEL_51;
      }
    }
    goto LABEL_51;
  }
  if (v20 > 1 || !v16)
  {
LABEL_51:
    v32 = 0;
    v21 = (unint64_t)(v16 - 1);
    v2 = 0.0;
    v3 = 0.0;
    goto LABEL_57;
  }
  v21 = (unint64_t)(v16 - 1);
  if (v16 == (char *)1)
  {
LABEL_52:
    v38 = 0.0;
    if (v21 < *(unsigned int *)(a1 + 588))
    {
      v39 = *(_QWORD *)(a1 + 576) + 36 * v21;
      v40 = *(float *)(v39 + 16);
      v41 = *(float *)(v39 + 24);
LABEL_55:
      v38 = v40 + (float)(v41 * 0.5);
    }
LABEL_56:
    WebKit::PDFDocumentLayout::documentToPDFPage(a1 + 568, v21, v38, v17);
    v2 = v42;
    v3 = v43;
    v32 = 0;
    goto LABEL_57;
  }
  v22 = 0;
  while (1)
  {
    if ((v22 & 1) != 0)
    {
      ++v22;
      goto LABEL_33;
    }
    v23 = *(unsigned int *)(a1 + 588);
    v24 = 0.0;
    v25 = 0.0;
    if (v22 < v23)
    {
      v26 = *(_QWORD *)(a1 + 576) + 36 * v22;
      v24 = *(float *)(v26 + 20);
      v25 = *(float *)(v26 + 28);
    }
    v27 = v24 + v25;
    if (v24 <= v17 && v27 > v17)
      break;
    v145 = v22 + 1;
    v22 = (unint64_t)v16;
    if ((char *)v145 != v16)
    {
      v29 = 0.0;
      v30 = 0.0;
      if (v145 < v23)
      {
        v31 = *(_QWORD *)(a1 + 576) + 36 * v145;
        v29 = *(float *)(v31 + 20);
        v30 = *(float *)(v31 + 28);
      }
      if (v29 > v17)
      {
        v22 = v145;
      }
      else
      {
        v22 = v145;
        if ((float)(v29 + v30) > v17)
          goto LABEL_183;
      }
    }
LABEL_33:
    if (v22 == v21)
      goto LABEL_52;
  }
  v145 = v22;
LABEL_183:
  v146 = 0.0;
  if (v145 < v23)
    v146 = *(float *)(*(_QWORD *)(a1 + 576) + 36 * v145 + 16)
         + (float)(*(float *)(*(_QWORD *)(a1 + 576) + 36 * v145 + 24) * 0.5);
  WebKit::PDFDocumentLayout::documentToPDFPage(a1 + 568, v145, v146, v17);
  v2 = v147;
  v3 = v148;
  v32 = 0;
  v21 = v145;
LABEL_57:
  WebKit::PDFDocumentLayout::updateLayout(a1 + 568, v7, v8);
  WebKit::UnifiedPDFPlugin::updateScrollbars((WebKit::UnifiedPDFPlugin *)a1);
  WebKit::UnifiedPDFPlugin::availableContentsRect((WebCore::Widget **)a1);
  if (v7 != v44)
  {
    WebKit::PDFDocumentLayout::updateLayout(a1 + 568, v44, v8);
    WebKit::UnifiedPDFPlugin::updateScrollbars((WebKit::UnifiedPDFPlugin *)a1);
  }
  *(_BYTE *)(a1 + 763) = *(_QWORD *)(a1 + 568) != 0;
  v45 = (_DWORD *)WebKit::PDFPluginBase::page((WebKit::PDFPluginBase *)a1);
  if (v45)
  {
    v46 = v45;
    ++*v45;
    if (!*(_QWORD *)(a1 + 616))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v152 = (WTF::StringImpl *)v154;
      WebKit::UnifiedPDFPlugin::createGraphicsLayer(&v153, (WebKit::PDFPluginBase *)a1, (uint64_t)&v152);
      v48 = *(_DWORD **)(a1 + 616);
      *(IntPoint *)(a1 + 616) = v153;
      if (v48)
      {
        if (v48[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 16))(v48);
        else
          --v48[2];
      }
      v49 = v152;
      v152 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v47);
        else
          *(_DWORD *)v49 -= 2;
      }
      v50 = *(_QWORD *)(a1 + 616);
      v155 = 0.0;
      v154 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v50 + 152))(v50, &v154);
      v51 = *(_QWORD *)(a1 + 616);
      v52 = (WebCore *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA478], "grayColor", v152), "CGColor");
      v54 = WebCore::roundAndClampToSRGBALossy(v52, v53);
      v55 = bswap32(v54) | 0x1104000000000000;
      if (!BYTE4(v54))
        v55 = 0;
      v154 = v55;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v51 + 256))(v51, &v154);
      if ((v154 & 0x8000000000000) != 0)
      {
        v149 = (unsigned int *)(v154 & 0xFFFFFFFFFFFFLL);
        do
        {
          v150 = __ldaxr(v149);
          v151 = v150 - 1;
        }
        while (__stlxr(v151, v149));
        if (!v151)
        {
          atomic_store(1u, v149);
          WTF::fastFree((WTF *)v149, v56);
        }
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 616) + 680))(*(_QWORD *)(a1 + 616), 1);
    }
    if (!*(_QWORD *)(a1 + 624))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v152 = (WTF::StringImpl *)v154;
      WebKit::UnifiedPDFPlugin::createGraphicsLayer(&v153, (WebKit::PDFPluginBase *)a1, (uint64_t)&v152);
      v58 = *(_DWORD **)(a1 + 624);
      *(IntPoint *)(a1 + 624) = v153;
      if (v58)
      {
        if (v58[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 16))(v58);
        else
          --v58[2];
      }
      v59 = v152;
      v152 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v57);
        else
          *(_DWORD *)v59 -= 2;
      }
      v60 = *(_QWORD *)(a1 + 624);
      v155 = 0.0;
      v154 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v60 + 152))(v60, &v154);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 624) + 208))(*(_QWORD *)(a1 + 624), 1);
      v61 = *(_QWORD *)(a1 + 616);
      v62 = *(_DWORD **)(a1 + 624);
      ++v62[2];
      v154 = (uint64_t)v62;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v61 + 64))(v61, &v154);
      v63 = (_DWORD *)v154;
      v154 = 0;
      if (v63)
      {
        if (v63[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 16))(v63);
        else
          --v63[2];
      }
    }
    if (!*(_QWORD *)(a1 + 632))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v152 = (WTF::StringImpl *)v154;
      WebKit::UnifiedPDFPlugin::createGraphicsLayer(&v153, (WebKit::PDFPluginBase *)a1, (uint64_t)&v152);
      v65 = *(_DWORD **)(a1 + 632);
      *(IntPoint *)(a1 + 632) = v153;
      if (v65)
      {
        if (v65[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v65 + 16))(v65);
        else
          --v65[2];
      }
      v66 = v152;
      v152 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
          WTF::StringImpl::destroy(v66, v64);
        else
          *(_DWORD *)v66 -= 2;
      }
      v67 = *(_QWORD *)(a1 + 632);
      v155 = 0.0;
      v154 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v67 + 152))(v67, &v154);
      v68 = *(_QWORD *)(a1 + 624);
      v69 = *(_DWORD **)(a1 + 632);
      ++v69[2];
      v154 = (uint64_t)v69;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v68 + 64))(v68, &v154);
      v70 = (_DWORD *)v154;
      v154 = 0;
      if (v70)
      {
        if (v70[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v70 + 16))(v70);
        else
          --v70[2];
      }
    }
    if (!*(_QWORD *)(a1 + 640))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v152 = (WTF::StringImpl *)v154;
      WebKit::UnifiedPDFPlugin::createGraphicsLayer(&v153, (WebKit::PDFPluginBase *)a1, (uint64_t)&v152);
      v72 = *(_DWORD **)(a1 + 640);
      *(IntPoint *)(a1 + 640) = v153;
      if (v72)
      {
        if (v72[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v72 + 16))(v72);
        else
          --v72[2];
      }
      v73 = v152;
      v152 = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
          WTF::StringImpl::destroy(v73, v71);
        else
          *(_DWORD *)v73 -= 2;
      }
      v74 = *(_QWORD *)(a1 + 640);
      v155 = 0.0;
      v154 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v74 + 152))(v74, &v154);
      v75 = *(_QWORD *)(a1 + 632);
      v76 = *(_DWORD **)(a1 + 640);
      ++v76[2];
      v154 = (uint64_t)v76;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v75 + 64))(v75, &v154);
      v77 = (_DWORD *)v154;
      v154 = 0;
      if (v77)
      {
        if (v77[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 16))(v77);
        else
          --v77[2];
      }
    }
    if (!*(_QWORD *)(a1 + 648))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v152 = (WTF::StringImpl *)v154;
      v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24);
      if (v78)
      {
        v79 = *(_QWORD *)(v78 + 8);
        if (v79)
        {
          if (*(_QWORD *)(*(_QWORD *)(v79 + 128) + 8) == v79)
            WebKit::PDFPluginBase::isFullFramePlugin((WebKit::PDFPluginBase *)a1);
        }
      }
      WebKit::UnifiedPDFPlugin::createGraphicsLayer(&v153, (WebKit::PDFPluginBase *)a1, (uint64_t)&v152);
      v81 = *(_DWORD **)(a1 + 648);
      *(IntPoint *)(a1 + 648) = v153;
      if (v81)
      {
        if (v81[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v81 + 16))(v81);
        else
          --v81[2];
      }
      v82 = v152;
      v152 = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WTF::StringImpl::destroy(v82, v80);
        else
          *(_DWORD *)v82 -= 2;
      }
      v83 = *(_QWORD *)(a1 + 648);
      v155 = 0.0;
      v154 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v83 + 152))(v83, &v154);
      v84 = (WebKit *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 648) + 216))(*(_QWORD *)(a1 + 648), 1);
      v85 = *(_QWORD *)(a1 + 648);
      PDFSelectionClass = (void *)WebKit::getPDFSelectionClass(v84);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v85 + 240))(v85, objc_msgSend(PDFSelectionClass, "instancesRespondToSelector:", sel_enumerateRectsAndTransformsForPage_usingBlock_, v152));
      v87 = *(_QWORD *)(a1 + 632);
      v88 = *(_DWORD **)(a1 + 648);
      ++v88[2];
      v154 = (uint64_t)v88;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v87 + 64))(v87, &v154);
      v89 = (_DWORD *)v154;
      v154 = 0;
      if (v89)
      {
        if (v89[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v89 + 16))(v89);
        else
          --v89[2];
      }
      v90 = *(_QWORD *)(a1 + 1016);
      if (!v90)
      {
        v90 = WTF::fastMalloc((WTF *)0x80);
        *(_QWORD *)(v90 + 8) = 0;
        *(_QWORD *)v90 = off_1E34D3560;
        v91 = WTF::fastMalloc((WTF *)0x20);
        *(_BYTE *)v91 = 0;
        *(_OWORD *)(v91 + 8) = xmmword_1978CE9C0;
        *(_QWORD *)(v91 + 24) = v90;
        *(_QWORD *)(v90 + 16) = v91;
        *(_QWORD *)v90 = off_1E34D2E30;
        v92 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 72);
        if (v92)
          v92 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v92);
        *(_QWORD *)(v90 + 24) = v92;
        *(_QWORD *)(v90 + 32) = a1;
        *(_QWORD *)(v90 + 40) = 0;
        v93 = (WTF *)WTF::ConcurrentWorkQueue::create();
        *(_QWORD *)(v90 + 56) = 0;
        v94 = WTF::numberOfProcessorCores(v93);
        if (v94 >= 18)
          v96 = 18;
        else
          v96 = v94;
        v97 = v96 - 2;
        if (v94 < 6)
          v97 = 4;
        *(_DWORD *)(v90 + 64) = v97;
        *(_OWORD *)(v90 + 68) = 0u;
        *(_OWORD *)(v90 + 84) = 0u;
        *(_OWORD *)(v90 + 100) = 0u;
        *(_QWORD *)(v90 + 113) = 0;
        v98 = *(_QWORD *)(a1 + 1016);
        *(_QWORD *)(a1 + 1016) = v90;
        if (v98)
        {
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v98 + 16), v95);
          v90 = *(_QWORD *)(a1 + 1016);
        }
      }
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v90 + 16));
      v99 = *(_DWORD **)(a1 + 648);
      ++v99[2];
      v100 = *(_DWORD **)(v90 + 40);
      *(_QWORD *)(v90 + 40) = v99;
      if (v100)
      {
        if (v100[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v100 + 16))(v100);
          v99 = *(_DWORD **)(v90 + 40);
        }
        else
        {
          --v100[2];
        }
      }
      v101 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v99 + 832))(v99);
      if (v101)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 24))(v101, v90);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v90 + 16), v102);
    }
    if (!*(_QWORD *)(a1 + 664))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v152 = (WTF::StringImpl *)v154;
      WebKit::UnifiedPDFPlugin::createGraphicsLayer(&v153, (WebKit::PDFPluginBase *)a1, (uint64_t)&v152);
      v104 = *(_DWORD **)(a1 + 664);
      *(IntPoint *)(a1 + 664) = v153;
      if (v104)
      {
        if (v104[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v104 + 16))(v104);
        else
          --v104[2];
      }
      v105 = v152;
      v152 = 0;
      if (v105)
      {
        if (*(_DWORD *)v105 == 2)
          WTF::StringImpl::destroy(v105, v103);
        else
          *(_DWORD *)v105 -= 2;
      }
      v106 = *(_QWORD *)(a1 + 664);
      v155 = 0.0;
      v154 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v106 + 152))(v106, &v154);
      v107 = *(_QWORD *)(a1 + 616);
      v108 = *(_DWORD **)(a1 + 664);
      ++v108[2];
      v154 = (uint64_t)v108;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v107 + 64))(v107, &v154);
      v109 = (_DWORD *)v154;
      v154 = 0;
      if (v109)
      {
        if (v109[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v109 + 16))(v109);
        else
          --v109[2];
      }
    }
    if (!*(_QWORD *)(a1 + 656))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v152 = (WTF::StringImpl *)v154;
      WebKit::UnifiedPDFPlugin::createGraphicsLayer(&v153, (WebKit::PDFPluginBase *)a1, (uint64_t)&v152);
      v111 = *(_DWORD **)(a1 + 656);
      *(IntPoint *)(a1 + 656) = v153;
      if (v111)
      {
        if (v111[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v111 + 16))(v111);
        else
          --v111[2];
      }
      v112 = v152;
      v152 = 0;
      if (v112)
      {
        if (*(_DWORD *)v112 == 2)
          WTF::StringImpl::destroy(v112, v110);
        else
          *(_DWORD *)v112 -= 2;
      }
      v113 = *(_QWORD *)(a1 + 656);
      v155 = 0.0;
      v154 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 152))(v113, &v154);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 656) + 216))(*(_QWORD *)(a1 + 656), 1);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 656) + 240))(*(_QWORD *)(a1 + 656), 1);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 656) + 312))(*(_QWORD *)(a1 + 656), 2);
    }
    WTF::RefCounted<WebCore::Page>::deref(v46);
  }
  v114 = *(_QWORD *)(a1 + 616);
  v115 = (float)*(int *)(a1 + 324);
  *(float *)&v154 = (float)*(int *)(a1 + 320);
  *((float *)&v154 + 1) = v115;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v114 + 160))(v114, &v154);
  v116 = *(_QWORD *)(a1 + 664);
  v117 = (float)*(int *)(a1 + 324);
  *(float *)&v154 = (float)*(int *)(a1 + 320);
  *((float *)&v154 + 1) = v117;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v116 + 160))(v116, &v154);
  v118 = WebKit::UnifiedPDFPlugin::availableContentsRect((WebCore::Widget **)a1);
  v120 = v119;
  v121 = *(_QWORD *)(a1 + 624);
  v153 = (IntPoint)v118;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v154, &v153);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v121 + 128))(v121, &v154);
  v122 = *(_QWORD *)(a1 + 624);
  *(float *)&v154 = (float)(int)v120;
  *((float *)&v154 + 1) = (float)SHIDWORD(v120);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v122 + 160))(v122, &v154);
  v123 = *(_QWORD *)(a1 + 648);
  v124 = WebKit::UnifiedPDFPlugin::documentSize((WebKit::UnifiedPDFPlugin *)a1);
  *(float *)&v154 = (float)(int)v124;
  *((float *)&v154 + 1) = (float)SHIDWORD(v124);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v123 + 160))(v123, &v154);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 648) + 320))(*(_QWORD *)(a1 + 648));
  v125 = *(_QWORD *)(a1 + 656);
  v126 = WebKit::UnifiedPDFPlugin::documentSize((WebKit::UnifiedPDFPlugin *)a1);
  *(float *)&v154 = (float)(int)v126;
  *((float *)&v154 + 1) = (float)SHIDWORD(v126);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v125 + 160))(v125, &v154);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 656) + 320))(*(_QWORD *)(a1 + 656));
  WebKit::UnifiedPDFPlugin::updatePageBackgroundLayers((WebKit::UnifiedPDFPlugin *)a1);
  WebKit::UnifiedPDFPlugin::updateSnapOffsets((WebKit::UnifiedPDFPlugin *)a1);
  WebKit::UnifiedPDFPlugin::didChangeSettings((WebKit::UnifiedPDFPlugin *)a1);
  v127 = (_DWORD *)WebKit::PDFPluginBase::page((WebKit::PDFPluginBase *)a1);
  if (v127)
  {
    v128 = v127;
    ++*v127;
    v129 = *(WebCore::GraphicsLayer **)(a1 + 648);
    if (v129)
    {
      if (*(_QWORD *)(a1 + 656))
      {
        WebCore::GraphicsLayer::setIsInWindow(v129);
        WebCore::GraphicsLayer::setIsInWindow(*(WebCore::GraphicsLayer **)(a1 + 656));
        v130 = *(_QWORD *)(a1 + 640);
        v131 = *(unsigned int *)(v130 + 196);
        if ((_DWORD)v131)
        {
          v132 = *(_QWORD *)(v130 + 184);
          v133 = 8 * v131;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)v132 + 196))
            {
              v134 = **(WebCore::GraphicsLayer ***)(*(_QWORD *)v132 + 184);
              ++*((_DWORD *)v134 + 2);
              WebCore::GraphicsLayer::setIsInWindow(v134);
              if (*((_DWORD *)v134 + 2) == 1)
                (*(void (**)(WebCore::GraphicsLayer *))(*(_QWORD *)v134 + 16))(v134);
              else
                --*((_DWORD *)v134 + 2);
            }
            v132 += 8;
            v133 -= 8;
          }
          while (v133);
        }
      }
    }
    WTF::RefCounted<WebCore::Page>::deref(v128);
  }
  WebKit::UnifiedPDFPlugin::updateLayerPositions((WebKit::UnifiedPDFPlugin *)a1);
  result = (_DWORD *)WebKit::UnifiedPDFPlugin::updateScrollingExtents((WebKit::UnifiedPDFPlugin *)a1);
  *(_QWORD *)(a1 + 728) = 0x3FF0000000000000;
  if (a2)
  {
    v136 = *(_QWORD *)(a1 + 96);
    if (v136)
    {
      if (*(_QWORD *)(v136 + 8))
      {
        v137 = *(float *)(a1 + 604);
        v138 = *(float *)(a1 + 608);
        v139 = *(float *)(a1 + 600) * v138;
        WebKit::UnifiedPDFPlugin::availableContentsRect((WebCore::Widget **)a1);
        if (v139 > 0.0)
        {
          v141 = (float)(v137 * v138) <= 0.0 || (int)v140 < 1;
          if (!v141 && SHIDWORD(v140) >= 1)
          {
            v154 = 0;
            v155 = (float)(int)v140;
            v156 = (float)SHIDWORD(v140);
            WebCore::largestRectWithAspectRatioInsideRect((WebCore *)&v154, v139 / (float)(v137 * v138), v140);
          }
        }
        result = WebKit::UnifiedPDFPlugin::setScaleFactor(a1, 0, 0, 1.0);
        *(_BYTE *)(a1 + 764) = 0;
      }
    }
  }
  if ((v32 & 1) == 0)
  {
    WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatPoint>((WebKit::UnifiedPDFPlugin *)a1, v21, 1, v2, v3);
    return (_DWORD *)WebKit::UnifiedPDFPlugin::scrollToPointInContentsSpace(a1, v143, v144);
  }
  return result;
}

void sub_1973174D4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11)
{
  _DWORD *v11;
  WTF *v12;
  unsigned int **v13;
  unsigned int **v14;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _DWORD *v21;
  unsigned __int8 *v22;
  void *v23;

  v16 = *((_QWORD *)v12 + 7);
  if (v16)
    WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(v16, a2);
  v17 = *v14;
  *v14 = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  v21 = (_DWORD *)*((_QWORD *)v12 + 5);
  *((_QWORD *)v12 + 5) = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
    else
      --v21[2];
  }
  v22 = (unsigned __int8 *)*((_QWORD *)v12 + 3);
  *((_QWORD *)v12 + 3) = 0;
  if (v22)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v22, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v13, a2);
  WTF::fastFree(v12, v23);
  WTF::RefCounted<WebCore::Page>::deref(v11);
  _Unwind_Resume(a1);
}

void WebKit::UnifiedPDFPlugin::revealFragmentIfNeeded(WebKit::UnifiedPDFPlugin *this)
{
  void *v2;
  uint64_t v3;
  WebKit::WebFrame *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  void *v35;
  PDFDestination *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  const char *v40;
  const char *v41;
  unsigned int v42;
  uint64_t v43;
  char *v44;
  int16x8_t v45;
  int16x8_t *v46;
  int8x16_t v47;
  int16x8_t *v48;
  __int8 *v49;
  int16x8_t v50;
  char *v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float *v81;
  float v82;
  float v83;
  CFTypeRef cf;
  const char *v85;
  unsigned int v86;
  char v87;
  WTF::StringImpl *v88[2];
  char v89;
  int16x8_t *v90;
  WTF::StringImpl *v91;

  v2 = (void *)*((_QWORD *)this + 37);
  if (!v2)
    return;
  if (!*((_BYTE *)this + 761))
    return;
  if ((objc_msgSend(v2, "isLocked") & 1) != 0)
    return;
  if (*((_BYTE *)this + 762))
    return;
  *((_BYTE *)this + 762) = 1;
  v3 = *((_QWORD *)this + 13);
  if (!v3)
    return;
  v4 = *(WebKit::WebFrame **)(v3 + 8);
  if (!v4)
    return;
  WebKit::WebFrame::url(v4, (uint64_t)v88);
  v6 = WTF::URL::fragmentIdentifier((WTF::URL *)v88);
  v8 = (uint64_t)v5;
  v90 = (int16x8_t *)v6;
  v91 = v5;
  v9 = v88[0];
  v88[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (!v6)
    return;
  v10 = BYTE4(v91);
  v11 = (const char *)v90;
  v12 = v91;
  if (!BYTE4(v91))
  {
    if (!(_DWORD)v91)
      return;
    v44 = &v90->i8[2 * v91];
    if (v91 <= 0x1F)
    {
      v64 = 0;
      while (v90->i16[v64] != 38)
      {
        if (v91 == ++v64)
          goto LABEL_44;
      }
      v51 = &v90->i8[v64 * 2];
LABEL_158:
      if (v51 != v44)
      {
        v16 = (v51 - (char *)v90) >> 1;
LABEL_24:
        if (v16 != -1)
        {
          v17 = v16;
          if ((v8 & 0xFF00000000) != 0)
            v17 = v16 | 0x100000000;
          if (v8 > v16)
            v18 = v17;
          else
            v18 = v8;
          if ((_DWORD)v8)
            v11 = (const char *)v6;
          else
            v11 = "";
          if ((_DWORD)v8)
            v12 = v18;
          else
            v12 = 0x100000000;
          v10 = BYTE4(v12);
        }
        v12 = v12;
        if (v10)
        {
          if (!(_DWORD)v12)
            return;
          goto LABEL_39;
        }
        if (!(_DWORD)v12)
          return;
      }
    }
    else
    {
      v45.i64[0] = 0x26002600260026;
      v45.i64[1] = 0x26002600260026;
      v46 = v90;
      do
      {
        v47 = (int8x16_t)vceqq_s16(*v46, v45);
        LOWORD(v7) = vmaxvq_u16((uint16x8_t)v47);
        if (v7)
          goto LABEL_90;
        v48 = v46 + 1;
        v49 = &v46[1].i8[14];
        ++v46;
      }
      while (v49 < v44);
      if (v48 < (int16x8_t *)v44)
      {
        v50.i64[0] = 0x26002600260026;
        v50.i64[1] = 0x26002600260026;
        v47 = (int8x16_t)vceqq_s16(*((int16x8_t *)v44 - 1), v50);
        v50.i16[0] = vmaxvq_u16((uint16x8_t)v47);
        if (v50.i32[0])
        {
          v46 = (int16x8_t *)(v44 - 16);
LABEL_90:
          v51 = &v46->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_1978CFB00, v47))];
          goto LABEL_158;
        }
      }
    }
LABEL_44:
    v19 = 0;
    while (*(_WORD *)&v11[2 * v19] == 35)
    {
      if (v12 == ++v19)
        return;
    }
    goto LABEL_48;
  }
  if (!(_DWORD)v91)
    return;
  v13 = 0;
  v14 = 16;
  if (v91 < 0x10uLL)
    v14 = v91;
  do
  {
    if (v90->i8[v13] == 38)
    {
      v15 = &v90->i8[v13];
LABEL_23:
      v16 = v15 - v11;
      goto LABEL_24;
    }
    ++v13;
  }
  while (v14 != v13);
  if (v91 >= 0x11)
  {
    v15 = (__int8 *)memchr(&v90->i8[v14], 38, v91 - v14);
    if (v15)
      goto LABEL_23;
  }
LABEL_39:
  v19 = 0;
  while (v11[v19] == 35)
  {
    if (v12 == ++v19)
      return;
  }
LABEL_48:
  v85 = WTF::StringView::substring((const char *)&v90, v19, 0xFFFFFFFF);
  v86 = v20;
  v87 = v21;
  if (WTF::StringView::startsWith())
  {
    if (v86 < 6)
      goto LABEL_149;
    v23 = v86 - 5;
    v22 = v23;
    if (v87)
    {
      if (v23 >= v23)
      {
        v24 = v85 + 5;
        v22 = v23 | 0x100000000;
        goto LABEL_53;
      }
    }
    else if (v23 >= v23)
    {
      v24 = v85 + 10;
LABEL_53:
      v25 = v22;
      if ((v22 & 0x100000000) != 0)
      {
        if ((_DWORD)v22)
        {
          v26 = 0;
          while (1)
          {
            v27 = v24[v26];
            if (v27 - 9 >= 5 && v27 != 32)
              break;
            if (v25 == ++v26)
              goto LABEL_149;
          }
          if (v27 == 43)
          {
            if (v25 - 1 == v26)
              goto LABEL_149;
            v28 = ~v26 + v25;
            v29 = &v24[v26];
            v31 = *((unsigned __int8 *)v29 + 1);
            v30 = v29 + 1;
            v27 = v31;
          }
          else
          {
            v30 = &v24[v26];
            v28 = v25 - v26;
          }
          if (v27 - 48 <= 9)
          {
            v52 = 0;
            v53 = 0;
            while (1)
            {
              v54 = v27 - 48;
              v55 = (v52 * (unsigned __int128)0xAuLL) >> 64;
              if (is_mul_ok(v52, 0xAuLL))
                v52 *= 10;
              v56 = __CFADD__(v52, v54);
              v57 = v52 + v54;
              v58 = v56;
              if (!v56)
                v52 = v57;
              if (v55)
                v59 = 1;
              else
                v59 = v58;
              if (v59)
                v53 = 1;
              if (!--v28)
                goto LABEL_155;
              v60 = *(unsigned __int8 *)++v30;
              v27 = v60;
              v61 = v60 - 48;
              if (v60 - 48 > 9 || v61 >= 0xA)
              {
                if (!v53)
                {
                  v62 = 0;
                  while (1)
                  {
                    v63 = v30[v62];
                    if ((v63 - 9) >= 5 && v63 != 32)
                      break;
                    if (v28 == ++v62)
                      goto LABEL_156;
                  }
                }
                break;
              }
            }
          }
LABEL_149:
          v43 = 0;
          v25 = 0;
          goto LABEL_150;
        }
      }
      else if ((_DWORD)v22)
      {
        v37 = 0;
        v38 = 2 * v25;
        while (1)
        {
          v39 = *(unsigned __int16 *)&v24[v37];
          if (v39 - 9 >= 5 && v39 != 32)
            break;
          --v25;
          v37 += 2;
          if (v38 == v37)
            goto LABEL_149;
        }
        if (v39 == 43)
        {
          if (v38 - 2 == v37)
            goto LABEL_149;
          --v25;
          v40 = &v24[v37];
          v42 = *((unsigned __int16 *)v40 + 1);
          v41 = v40 + 2;
          v39 = v42;
        }
        else
        {
          v41 = &v24[v37];
        }
        if (v39 - 48 <= 9)
        {
          v52 = 0;
          v53 = 0;
          while (1)
          {
            v65 = v39 - 48;
            v66 = (v52 * (unsigned __int128)0xAuLL) >> 64;
            if (is_mul_ok(v52, 0xAuLL))
              v52 *= 10;
            v67 = __CFADD__(v52, v65);
            v68 = v52 + v65;
            v69 = v67;
            if (!v67)
              v52 = v68;
            if (v66)
              v70 = 1;
            else
              v70 = v69;
            if (v70)
              v53 = 1;
            if (!--v25)
              break;
            v71 = *((unsigned __int16 *)v41 + 1);
            v41 += 2;
            v39 = v71;
            v72 = v71 - 48;
            if (v71 - 48 > 9 || v72 >= 0xA)
            {
              if (!v53)
              {
                v73 = 0;
                while (1)
                {
                  v74 = *(unsigned __int16 *)&v41[2 * v73];
                  if ((v74 - 9) >= 5 && v74 != 32)
                    break;
                  if (v25 == ++v73)
                    goto LABEL_156;
                }
              }
              goto LABEL_149;
            }
          }
LABEL_155:
          if (!v53)
          {
LABEL_156:
            v75 = v52 & 0xFFFFFFFFFFFFFF00;
            v43 = v52;
            v25 = 1;
LABEL_151:
            v76 = v75 | v43;
            if (v25)
            {
              v77 = 0.0;
              v78 = 0.0;
              v79 = 0.0;
              v80 = 0.0;
              if (v76 - 1 < *((unsigned int *)this + 147))
              {
                v81 = (float *)(*((_QWORD *)this + 72) + 36 * (v76 - 1));
                v77 = v81[4];
                v78 = v81[5];
                v79 = v81[6];
                v80 = v81[7];
              }
              WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>((uint64_t)this, 1, 3, 0, 0, v77, v78, v79, v80);
              WebKit::UnifiedPDFPlugin::scrollToPointInContentsSpace((uint64_t)this, v82, v83);
            }
            return;
          }
          goto LABEL_149;
        }
        goto LABEL_149;
      }
      v43 = 0;
LABEL_150:
      v75 = 0;
      goto LABEL_151;
    }
LABEL_160:
    __break(1u);
    return;
  }
  if (!WTF::StringView::startsWith())
    return;
  if (v86 < 0xB)
  {
    v32 = 0x100000000;
    v34 = (WTF::StringImpl *)"";
  }
  else
  {
    v33 = v86 - 10;
    v32 = v33;
    if (v87)
    {
      if (v33 < v33)
        goto LABEL_160;
      v34 = (WTF::StringImpl *)(v85 + 10);
      v32 |= 0x100000000uLL;
    }
    else
    {
      if (v33 < v33)
        goto LABEL_160;
      v34 = (WTF::StringImpl *)(v85 + 20);
    }
  }
  v88[0] = v34;
  v88[1] = (WTF::StringImpl *)v32;
  v89 = 1;
  v35 = (void *)*((_QWORD *)this + 37);
  WTF::StringView::createNSString((WTF::StringView *)v88);
  v36 = (PDFDestination *)objc_msgSend(v35, "namedDestination:", cf);
  if (cf)
    CFRelease(cf);
  if (v36)
    WebKit::UnifiedPDFPlugin::revealPDFDestination((id *)this, v36);
}

void sub_197317D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

double WebKit::UnifiedPDFPlugin::incrementalLoadingDidProgress(WebKit::UnifiedPDFPlugin *this)
{
  double result;

  if ((*((_QWORD *)this + 117) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 117) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    WebCore::TimerBase::start();
  }
  return result;
}

uint64_t WebKit::UnifiedPDFPlugin::incrementalLoadingDidCancel(uint64_t this)
{
  if ((*(_QWORD *)(this + 936) & 0xFFFFFFFFFFFFLL) != 0)
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 904));
  return this;
}

uint64_t WebKit::UnifiedPDFPlugin::incrementalLoadingDidFinish(WebKit::UnifiedPDFPlugin *this)
{
  if ((*((_QWORD *)this + 117) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebKit::UnifiedPDFPlugin *)((char *)this + 904));
  return WebKit::UnifiedPDFPlugin::repaintForIncrementalLoad((uint64_t)this);
}

uint64_t WebKit::UnifiedPDFPlugin::repaintForIncrementalLoad(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  __int128 v6;
  __int128 v7;

  if (*(_QWORD *)(this + 296))
  {
    v1 = this;
    *(_QWORD *)&v6 = 0;
    *((_QWORD *)&v6 + 1) = *(_QWORD *)(this + 600);
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 648) + 832))(*(_QWORD *)(this + 648));
    if (v2)
    {
      LODWORD(v7) = (*(float (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
      *(_QWORD *)((char *)&v7 + 4) = __PAIR64__(v4, v3);
      HIDWORD(v7) = v5;
      WebCore::FloatRect::scale((WebCore::FloatRect *)&v7, 1.0 / *(float *)(v1 + 608), 1.0 / *(float *)(v1 + 608));
      v6 = v7;
    }
    return WebKit::UnifiedPDFPlugin::setNeedsRepaintInDocumentRect(v1, 1u, &v6);
  }
  return this;
}

void WebKit::UnifiedPDFPlugin::attemptToUnlockPDF(WebKit::UnifiedPDFPlugin *this, const WTF::String *a2)
{
  void *v3;
  const __CFString *v4;

  v3 = (void *)*((_QWORD *)this + 37);
  if (*(_QWORD *)a2)
    v4 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v4 = &stru_1E351F1B8;
  if (objc_msgSend(v3, "unlockWithPassword:", v4))
  {
    WebKit::UnifiedPDFPlugin::updateLayout((uint64_t)this, 1);
    WebKit::UnifiedPDFPlugin::revealFragmentIfNeeded(this);
  }
}

_DWORD *WebKit::UnifiedPDFPlugin::createGraphicsLayer(_QWORD *a1, WebKit::PDFPluginBase *this, uint64_t a3)
{
  _DWORD *result;
  _DWORD *v6;
  uint64_t v7;

  result = (_DWORD *)WebKit::PDFPluginBase::page(this);
  if (result)
  {
    v6 = result;
    ++*result;
    (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)result + 6) + 16) + 904))(*(_QWORD *)(*((_QWORD *)result + 6) + 16));
    WebCore::GraphicsLayer::create();
    *a1 = v7;
    result = WTF::RefCounted<WebCore::Page>::deref(v6);
    if (v7)
      return (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, a3);
  }
  else
  {
    *a1 = 0;
  }
  *a1 = 0;
  return result;
}

void sub_197317F88(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _DWORD *v2;

  *v1 = 0;
  if (v2[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
  else
    --v2[2];
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::UnifiedPDFPlugin::setNeedsRepaintForAnnotation(uint64_t result, void *a2, unsigned __int8 a3)
{
  uint64_t v5;
  unint64_t v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  CGRect v15;
  float v16[4];
  __int128 v17;

  if (a3)
  {
    v5 = result;
    result = objc_msgSend(*(id *)(result + 296), "indexForPage:", objc_msgSend(a2, "page"));
    if (result != 0x7FFFFFFFFFFFFFFFLL)
    {
      v6 = result;
      objc_msgSend(a2, "bounds");
      v15.origin.x = v7;
      v15.origin.y = v8;
      v15.size.width = v9;
      v15.size.height = v10;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v16, &v15);
      WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>(v5, 0, 1, v6, 1, v16[0], v16[1], v16[2], v16[3]);
      *(_QWORD *)&v17 = __PAIR64__(v12, v11);
      *((_QWORD *)&v17 + 1) = __PAIR64__(v14, v13);
      return WebKit::UnifiedPDFPlugin::setNeedsRepaintInDocumentRect(v5, a3, &v17);
    }
  }
  return result;
}

uint64_t WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>(uint64_t this, int a2, int a3, unint64_t a4, char a5, float a6, float a7, float a8, float a9)
{
  uint64_t v10;
  float32x2_t *v11;
  __int128 *v12;
  __int128 v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  _BYTE v23[56];
  _OWORD v24[3];
  _BYTE v25[48];
  _DWORD v26[4];

  v10 = this;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  v22 = a9;
  if (a2 == 2)
    goto LABEL_13;
  if (a2 != 1)
  {
    if (a2)
      return this;
    if (!a5)
    {
      __break(1u);
      return this;
    }
    *(float *)v26 = a6;
    *(float *)&v26[1] = a7;
    *(float *)&v26[2] = a8;
    *(float *)&v26[3] = a9;
    if (a4 < *(unsigned int *)(this + 588))
    {
      v11 = (float32x2_t *)(*(_QWORD *)(this + 576) + 36 * a4);
      WebKit::PDFDocumentLayout::toPageTransform((uint64_t)v25, v11);
      WebCore::AffineTransform::inverse((WebCore::AffineTransform *)v25);
      if (v23[48])
        v12 = (__int128 *)v23;
      else
        v12 = &xmmword_1978D05B8;
      v13 = v12[1];
      v24[0] = *v12;
      v24[1] = v13;
      v24[2] = v12[2];
      this = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v24, (const WebCore::FloatRect *)v26);
      a6 = v15 + v11[2].f32[0];
      a7 = v11[2].f32[1] + (float)((float)(v11[3].f32[1] - v14) - a9);
    }
    v19 = a6;
    v20 = a7;
    v21 = a8;
    v22 = a9;
  }
  if (a3 != 1)
  {
    this = WebCore::FloatRect::scale((WebCore::FloatRect *)&v19, *(float *)(v10 + 608), *(float *)(v10 + 608));
LABEL_13:
    if (a3 != 2)
    {
      v16 = WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)v10);
      v19 = v16 + v19;
      v20 = v17 + v20;
      v18 = *(double *)(v10 + 720);
      return WebCore::FloatRect::scale((WebCore::FloatRect *)&v19, v18, v18);
    }
  }
  return this;
}

uint64_t WebKit::UnifiedPDFPlugin::setNeedsRepaintInDocumentRect(uint64_t result, unsigned __int8 a2, __int128 *a3)
{
  uint64_t v4;
  WebKit *v5;
  uint64_t v6;
  WTF::Lock *v7;
  double v8;
  const WebCore::FloatRect *v9;
  void *v10;
  uint64_t v11;
  const void *v12;
  float v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  float v26;
  unint64_t *v27;
  uint64_t v28;
  void *PDFSelectionClass;
  _DWORD *v30;
  _DWORD *v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35[2];
  _DWORD v36[4];
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  const WebCore::FloatRect *v44;
  __int128 v45;

  if (a2)
  {
    v4 = result;
    v37 = *a3;
    v5 = (WebKit *)WebCore::FloatRect::scale((WebCore::FloatRect *)&v37, *(float *)(result + 608), *(float *)(result + 608));
    v32 = v37;
    if ((a2 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 1016);
      if (v6)
      {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v6 + 16));
        v7 = *(WTF::Lock **)(v6 + 24);
        if (v7)
        {
          v8 = *(double *)(v4 + 720);
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v44, v7, *(_QWORD *)(v6 + 32));
          v9 = v44;
          if (v44)
          {
            WebKit::UnifiedPDFPlugin::pageCoverageForRect(&v42, v44, (WebCore *)&v32);
            v11 = v43;
            if (v43)
            {
              v12 = (const void *)*((_QWORD *)v9 + 37);
              if (v12)
              {
                CFRetain(*((CFTypeRef *)v9 + 37));
                v13 = v8;
                *(double *)&v14 = v13;
                v37 = v14;
                v38 = 0;
                v39 = v14;
                v40 = 0;
                v41 = 0;
                WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v37, (const WebCore::FloatRect *)&v32);
                v36[0] = v15;
                v36[1] = v16;
                v36[2] = v17;
                v36[3] = v18;
                v19 = *(_QWORD *)(v6 + 96);
                v20 = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::begin(v19);
                v21 = (float *)v20;
                v35[0] = v20;
                v35[1] = v22;
                if (v19)
                  v23 = v19 + 96 * *(unsigned int *)(v19 - 4);
                else
                  v23 = 0;
                if (v23 != v20)
                {
                  do
                  {
                    if ((WebCore::FloatRect::intersects((WebCore::FloatRect *)v36, (const WebCore::FloatRect *)(v21 + 6)) & 1) != 0)
                    {
                      v45 = *(_OWORD *)(v21 + 6);
                      WebCore::FloatRect::intersect((WebCore::FloatRect *)&v45, (const WebCore::FloatRect *)v36);
                      v33 = v45;
                      v34 = 1;
                      if (*(float *)&v45 == v21[6]
                        && *((float *)&v45 + 1) == v21[7]
                        && *((float *)&v45 + 2) == v21[8]
                        && *((float *)&v45 + 3) == v21[9])
                      {
                        LOBYTE(v33) = 0;
                        v34 = 0;
                      }
                      WebKit::AsyncPDFRenderer::enqueueTilePaintIfNecessary(v6, (WebKit::TileForGrid *)v21, (const WebCore::FloatRect *)(v21 + 6), &v33);
                    }
                    v35[0] = (uint64_t)(v21 + 24);
                    WTF::HashTableConstIterator<WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>,WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::skipEmptyBuckets(v35);
                    v21 = (float *)v35[0];
                  }
                  while (v35[0] != v23);
                }
                v26 = (float)(WebKit::PDFPluginBase::deviceScaleFactor(v9) * *((float *)v9 + 152)) * 0.5;
                v27 = (unint64_t *)v42;
                v28 = 24 * v11;
                do
                {
                  WebKit::AsyncPDFRenderer::generatePreviewImageForPage((WebKit::AsyncPDFRenderer *)v6, *v27, v26);
                  v27 += 3;
                  v28 -= 24;
                }
                while (v28);
                CFRelease(v12);
              }
            }
            if (v42)
              WTF::fastFree(v42, v10);
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((unsigned __int8 **)v9 + 9), v10);
          }
        }
        v5 = (WebKit *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), v7);
      }
    }
    if ((a2 & 2) == 0)
      goto LABEL_41;
    PDFSelectionClass = (void *)WebKit::getPDFSelectionClass(v5);
    if (!objc_msgSend(PDFSelectionClass, "instancesRespondToSelector:", sel_enumerateRectsAndTransformsForPage_usingBlock_, v32))goto LABEL_41;
    v30 = *(_DWORD **)(v4 + 656);
    if (v30)
      ++v30[2];
    result = (*(uint64_t (**)(_DWORD *, __int128 *, uint64_t))(*(_QWORD *)v30 + 328))(v30, &v32, 1);
    if (v30[2] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
    else
      --v30[2];
    if ((a2 & (a2 - 1)) != 0)
    {
LABEL_41:
      v31 = *(_DWORD **)(v4 + 648);
      if (v31)
        ++v31[2];
      result = (*(uint64_t (**)(_DWORD *, __int128 *, uint64_t))(*(_QWORD *)v31 + 328))(v31, &v32, 1);
      if (v31[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
      else
        --v31[2];
    }
  }
  return result;
}

void sub_1973184E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26)
{
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  void *v30;
  void *v31;

  CFRelease(v28);
  if (a26)
    WTF::fastFree(a26, v30);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v27 + 72), v30);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v26 + 16), v31);
  _Unwind_Resume(a1);
}

_DWORD *WebKit::UnifiedPDFPlugin::scheduleRenderingUpdate(WebKit::PDFPluginBase *a1)
{
  _DWORD *result;
  _DWORD *v2;

  result = (_DWORD *)WebKit::PDFPluginBase::page(a1);
  if (result)
  {
    v2 = result;
    ++*result;
    WebCore::Page::scheduleRenderingUpdate();
    return WTF::RefCounted<WebCore::Page>::deref(v2);
  }
  return result;
}

void sub_1973185DC(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

_DWORD *WebKit::UnifiedPDFPlugin::updatePageBackgroundLayers(WebKit::UnifiedPDFPlugin *this)
{
  _DWORD *result;
  _DWORD *v3;
  unint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  void *v19;
  WTF::StringImpl *v20;
  void *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  WTF::StringImpl **v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  WTF::StringImpl *v46;
  _BOOL4 shouldDisplayPage;
  _DWORD *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  void *v58;
  WTF::StringImpl *v59[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;

  result = (_DWORD *)WebKit::PDFPluginBase::page(this);
  if (!result)
    return result;
  v3 = result;
  ++*result;
  if ((objc_msgSend(*((id *)this + 37), "isLocked") & 1) != 0)
    return WTF::RefCounted<WebCore::Page>::deref(v3);
  WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v69, *((_QWORD *)this + 80) + 184);
  v4 = 0;
  v5 = (uint64_t *)((char *)this + 696);
  while (1)
  {
    v6 = (void *)*((_QWORD *)this + 71);
    if (v6)
      v6 = (void *)objc_msgSend(v6, "pageCount");
    if (v4 >= (unint64_t)v6)
      break;
    if (v4 >= *((unsigned int *)this + 147))
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
    }
    else
    {
      v7 = *((_QWORD *)this + 72) + 36 * v4;
      v8 = *(WTF::StringImpl **)(v7 + 16);
      v9 = *(_DWORD *)(v7 + 24);
      v10 = *(_DWORD *)(v7 + 28);
    }
    v67 = v8;
    v68 = (WTF::StringImpl *)__PAIR64__(v10, v9);
    WebCore::FloatRect::scale((WebCore::FloatRect *)&v67, *((float *)this + 152), *((float *)this + 152));
    if (v4 < v71)
    {
      v11 = *(_DWORD **)(v69 + 8 * v4);
      ++v11[2];
      goto LABEL_55;
    }
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)v59, "Page container ", 16, v4);
    if (!v59[0])
    {
      __break(0xC471u);
      JUMPOUT(0x197318CD0);
    }
    WebKit::UnifiedPDFPlugin::createGraphicsLayer(&v73, this, (uint64_t)v59);
    v13 = v59[0];
    v59[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)v59, "Page background ", 17, v4);
    if (!v59[0])
    {
      __break(0xC471u);
      JUMPOUT(0x197318CD8);
    }
    WebKit::UnifiedPDFPlugin::createGraphicsLayer(&v72, this, (uint64_t)v59);
    v15 = v59[0];
    v59[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v72;
    v17 = (uint64_t)v73;
    ++*((_DWORD *)v72 + 2);
    v59[0] = v16;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v17 + 64))(v17, v59);
    v18 = v59[0];
    v59[0] = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 16))(v18);
      else
        --*((_DWORD *)v18 + 2);
    }
    LODWORD(v59[1]) = 0;
    v59[0] = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v17 + 152))(v17, v59);
    v59[0] = (WTF::StringImpl *)0x110400000000002ELL;
    WebKit::UnifiedPDFPlugin::updatePageBackgroundLayers(void)::$_1::operator()(v17, 0x100000000, (const Color *)v59, (WebCore::IntPoint *)2);
    if (((unint64_t)v59[0] & 0x8000000000000) != 0)
    {
      v49 = (unsigned int *)((unint64_t)v59[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        atomic_store(1u, v49);
        WTF::fastFree((WTF *)v49, v19);
      }
    }
    v20 = v72;
    LODWORD(v59[1]) = 0;
    v59[0] = 0;
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v72 + 152))(v72, v59);
    v59[0] = (WTF::StringImpl *)0x11040000FFFFFFFFLL;
    (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v20 + 256))(v20, v59);
    if (((unint64_t)v59[0] & 0x8000000000000) != 0)
    {
      v52 = (unsigned int *)((unint64_t)v59[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        atomic_store(1u, v52);
        WTF::fastFree((WTF *)v52, v21);
      }
    }
    v22 = v72;
    (*(void (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v72 + 216))(v72, 1);
    (*(void (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v22 + 240))(v22, 1);
    (*(void (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v22 + 736))(v22, 0);
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 320))(v22);
    v23 = *v5;
    if (*v5
      || (WTF::HashTable<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashMap<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::expand((uint64_t *)this + 87),
          (v23 = *v5) != 0))
    {
      v24 = *(_DWORD *)(v23 - 8);
    }
    else
    {
      v24 = 0;
    }
    v25 = ((unint64_t)v22 + ~((_QWORD)v22 << 32)) ^ (((unint64_t)v22 + ~((_QWORD)v22 << 32)) >> 22);
    v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
    v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
    v28 = v24 & ((v27 >> 31) ^ v27);
    v29 = (WTF::StringImpl **)(v23 + 16 * v28);
    v30 = *v29;
    if (*v29)
    {
      v31 = 0;
      v32 = 1;
      while (v30 != v22)
      {
        if (v30 == (WTF::StringImpl *)-1)
          v31 = v29;
        v28 = (v28 + v32) & v24;
        v29 = (WTF::StringImpl **)(v23 + 16 * v28);
        v30 = *v29;
        ++v32;
        if (!*v29)
        {
          if (v31)
          {
            *v31 = 0;
            v31[1] = 0;
            --*(_DWORD *)(*v5 - 16);
            v29 = v31;
          }
          goto LABEL_36;
        }
      }
      goto LABEL_45;
    }
LABEL_36:
    ++*((_DWORD *)v22 + 2);
    *v29 = v22;
    v29[1] = (WTF::StringImpl *)v4;
    v33 = *v5;
    if (*v5)
      v34 = *(_DWORD *)(v33 - 12) + 1;
    else
      v34 = 1;
    *(_DWORD *)(v33 - 12) = v34;
    v35 = *v5;
    if (*v5)
      v36 = *(_DWORD *)(v35 - 12);
    else
      v36 = 0;
    v37 = (*(_DWORD *)(v35 - 16) + v36);
    v38 = *(unsigned int *)(v35 - 4);
    if (v38 <= 0x400)
    {
      if (3 * v38 > 4 * v37)
        goto LABEL_45;
LABEL_44:
      WTF::HashTable<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashMap<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::expand((uint64_t *)this + 87);
      goto LABEL_45;
    }
    if (v38 <= 2 * v37)
      goto LABEL_44;
LABEL_45:
    v59[0] = (WTF::StringImpl *)0x1104000000000026;
    WebKit::UnifiedPDFPlugin::updatePageBackgroundLayers(void)::$_1::operator()((uint64_t)v72, 0x200000000, (const Color *)v59, (WebCore::IntPoint *)6);
    if (((unint64_t)v59[0] & 0x8000000000000) != 0)
    {
      v55 = (unsigned int *)((unint64_t)v59[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        atomic_store(1u, v55);
        WTF::fastFree((WTF *)v55, v39);
      }
    }
    v40 = v73;
    v59[0] = v73;
    v73 = 0;
    LODWORD(v41) = v71;
    if (v71 == v70)
    {
      v42 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v69, v71 + 1, (unint64_t)v59);
      v41 = v71;
      v43 = v69;
      v44 = *v42;
      *v42 = 0;
      *(_QWORD *)(v43 + 8 * v41) = v44;
    }
    else
    {
      v59[0] = 0;
      *(_QWORD *)(v69 + 8 * v71) = v40;
    }
    v45 = (v41 + 1);
    v71 = v45;
    if (v4 >= v45)
    {
LABEL_90:
      __break(0xC471u);
      JUMPOUT(0x197318CC8);
    }
    v11 = *(_DWORD **)(v69 + 8 * v4);
    ++v11[2];
    v46 = v59[0];
    v59[0] = 0;
    if (v46)
    {
      if (*((_DWORD *)v46 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 16))(v46);
      else
        --*((_DWORD *)v46 + 2);
    }
    if (v72)
    {
      if (*((_DWORD *)v72 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v72 + 16))(v72);
      else
        --*((_DWORD *)v72 + 2);
    }
LABEL_55:
    v59[0] = v67;
    (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v11 + 128))(v11, v59);
    v59[0] = v68;
    (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v11 + 160))(v11, v59);
    shouldDisplayPage = WebKit::UnifiedPDFPlugin::shouldDisplayPage(this, v4);
    (*(void (**)(_DWORD *, float))(*(_QWORD *)v11 + 280))(v11, (float)shouldDisplayPage);
    if (!v11[49])
      goto LABEL_90;
    v48 = (_DWORD *)**((_QWORD **)v11 + 23);
    ++v48[2];
    v59[0] = (WTF::StringImpl *)__PAIR64__(v10, v9);
    (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v48 + 160))(v48, v59);
    v63 = xmmword_1978D0628;
    v64 = unk_1978D0638;
    v65 = xmmword_1978D0648;
    v66 = unk_1978D0658;
    *(_OWORD *)v59 = xmmword_1978D05E8;
    v60 = unk_1978D05F8;
    v61 = xmmword_1978D0608;
    v62 = unk_1978D0618;
    WebCore::TransformationMatrix::scale((WebCore::TransformationMatrix *)v59, *((float *)this + 152));
    (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v48 + 184))(v48, v59);
    if (v48[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 16))(v48);
    else
      --v48[2];
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
    else
      --v11[2];
    ++v4;
  }
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 80) + 56))(*((_QWORD *)this + 80), &v69);
  WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v58);
  return WTF::RefCounted<WebCore::Page>::deref(v3);
}

void sub_197318CE4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *a10, WTF::StringImpl *a11)
{
  uint64_t v11;

  WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v11 - 136, a2);
  WTF::RefCounted<WebCore::Page>::deref(a10);
  _Unwind_Resume(a1);
}

BOOL WebKit::UnifiedPDFPlugin::shouldDisplayPage(WebKit::UnifiedPDFPlugin *this, uint64_t a2)
{
  int v2;
  uint64_t v4;
  _BOOL4 v5;

  v2 = *((unsigned __int8 *)this + 612);
  if ((v2 & 0xFFFFFFFD) != 0)
    return 1;
  if (!*((_BYTE *)this + 992))
    return 1;
  v4 = *((_QWORD *)this + 123);
  if (v4 == a2)
    return 1;
  if ((v4 & 1) != 0)
    v5 = v4 - 1 == a2;
  else
    v5 = v4 + 1 == a2;
  return v2 == 2 && v5;
}

uint64_t WebKit::UnifiedPDFPlugin::pageIndexForPageBackgroundLayer(uint64_t this, const WebCore::GraphicsLayer *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const WebCore::GraphicsLayer *v7;
  int v8;

  if (this)
  {
    v2 = *(_DWORD *)(this - 8);
    v3 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(const WebCore::GraphicsLayer **)(this + 16 * v6);
    if (v7 != a2)
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(const WebCore::GraphicsLayer **)(this + 16 * v6);
        ++v8;
        if (v7 == a2)
          goto LABEL_9;
      }
      v6 = *(unsigned int *)(this - 4);
    }
LABEL_9:
    if (v6 == *(_DWORD *)(this - 4))
      return 0;
    else
      return *(_QWORD *)(this + 16 * v6 + 8);
  }
  return this;
}

_DWORD *WebKit::UnifiedPDFPlugin::willAttachScrollingNode(_DWORD *this)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  void *v13;
  unsigned int v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int **v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  unsigned int v42;
  __int16 v43;
  char v44;

  if (!*((_QWORD *)this + 88))
  {
    v1 = this;
    this = (_DWORD *)WebKit::PDFPluginBase::page((WebKit::PDFPluginBase *)this);
    if (this)
    {
      v2 = this;
      ++*this;
      v3 = WebCore::Page::scrollingCoordinator((WebCore::Page *)this);
      v4 = (unsigned __int8 **)v3;
      if (!v3)
        return WTF::RefCounted<WebCore::Page>::deref(v2);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v3 + 8));
      v6 = WebCore::ScrollingCoordinator::uniqueScrollingNodeID((WebCore::ScrollingCoordinator *)v4);
      *((_QWORD *)v1 + 88) = v6;
      *((_QWORD *)v1 + 89) = v5;
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 13) + 8) + 24) + 8);
      if (*(_BYTE *)(v7 + 144))
        v7 = 0;
      (*((void (**)(unsigned __int8 **, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))*v4 + 29))(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 632) + 8) + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 632) + 8) + 40), 3, v6, v5);
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 13) + 8) + 24) + 8);
      if (*(_BYTE *)(v8 + 144))
        v8 = 0;
      v9 = *(_QWORD *)(v8 + 288);
      if (v9)
        ++*(_DWORD *)(v9 + 8);
      v36 = *((_OWORD *)v1 + 44);
      v10 = (uint64_t *)(v9 + 576);
      v11 = *(_QWORD *)(v9 + 576);
      if (v11
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)(v9 + 576)),
            (v11 = *v10) != 0))
      {
        v12 = *(_DWORD *)(v11 - 8);
      }
      else
      {
        v12 = 0;
      }
      v42 = -1640531527;
      v43 = 0;
      v44 = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v42, &v36);
      v14 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v42) & v12;
      v15 = (_QWORD *)(v11 + 24 * v14);
      v17 = *v15;
      v16 = v15[1];
      if (*(_OWORD *)v15 != 0)
      {
        v19 = 0;
        v20 = 1;
        while (__PAIR128__(v16, v17) != v36)
        {
          if (v16 == -1)
            v19 = v15;
          v14 = (v14 + v20) & v12;
          v15 = (_QWORD *)(v11 + 24 * v14);
          v17 = *v15;
          v16 = v15[1];
          ++v20;
          if (*(_OWORD *)v15 == 0)
          {
            if (v19)
            {
              *v19 = 0;
              v19[1] = 0;
              v19[2] = 0;
              --*(_DWORD *)(*v10 - 16);
              v15 = v19;
            }
            *(_OWORD *)v15 = v36;
            v18 = (unsigned int **)(v15 + 2);
            if (!v1)
            {
              v21 = 0;
              goto LABEL_30;
            }
            goto LABEL_23;
          }
        }
        goto LABEL_43;
      }
      *(_OWORD *)v15 = v36;
      v18 = (unsigned int **)(v11 + 24 * v14 + 16);
LABEL_23:
      v21 = *((_QWORD *)v1 + 1);
      if (v21)
        goto LABEL_55;
      v21 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = v1;
      v22 = (unsigned int *)*((_QWORD *)v1 + 1);
      *((_QWORD *)v1 + 1) = v21;
      if (!v22)
        goto LABEL_55;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v13);
      }
      v21 = *((_QWORD *)v1 + 1);
      if (v21)
      {
LABEL_55:
        do
          v25 = __ldaxr((unsigned int *)v21);
        while (__stlxr(v25 + 1, (unsigned int *)v21));
      }
LABEL_30:
      v26 = *v18;
      *v18 = (unsigned int *)v21;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, v13);
        }
      }
      v29 = *v10;
      if (*v10)
        v30 = *(_DWORD *)(v29 - 12) + 1;
      else
        v30 = 1;
      *(_DWORD *)(v29 - 12) = v30;
      v31 = *v10;
      if (*v10)
        v32 = *(_DWORD *)(v31 - 12);
      else
        v32 = 0;
      v33 = (*(_DWORD *)(v31 - 16) + v32);
      v34 = *(unsigned int *)(v31 - 4);
      if (v34 > 0x400)
      {
        if (v34 > 2 * v33)
          goto LABEL_43;
      }
      else if (3 * v34 > 4 * v33)
      {
LABEL_43:
        if (*(_DWORD *)(v9 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        else
          --*(_DWORD *)(v9 + 8);
        (*((void (**)(unsigned __int8 **, _QWORD, _QWORD, _DWORD *))*v4 + 39))(v4, *((_QWORD *)v1 + 88), *((_QWORD *)v1 + 89), v1);
        v39 = 0;
        v40 = 0;
        v36 = *(_OWORD *)(v1 + 154);
        v37 = *((_QWORD *)v1 + 79);
        v38 = 0;
        v41 = *((_OWORD *)v1 + 42);
        (*((void (**)(unsigned __int8 **, _QWORD, _QWORD, __int128 *))*v4 + 38))(v4, *((_QWORD *)v1 + 88), *((_QWORD *)v1 + 89), &v36);
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(v4[1], v35);
        return WTF::RefCounted<WebCore::Page>::deref(v2);
      }
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand((uint64_t *)(v9 + 576));
      goto LABEL_43;
    }
  }
  return this;
}

void sub_197319394(_Unwind_Exception *a1, void *a2)
{
  _DWORD *v2;
  unsigned __int8 **v3;
  _DWORD *v4;

  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*v3, a2);
  WTF::RefCounted<WebCore::Page>::deref(v2);
  _Unwind_Resume(a1);
}

void WebKit::UnifiedPDFPlugin::didAttachScrollingNode(WebKit::UnifiedPDFPlugin *this)
{
  *((_BYTE *)this + 761) = 1;
  WebKit::UnifiedPDFPlugin::revealFragmentIfNeeded(this);
}

void WebKit::UnifiedPDFPlugin::didSameDocumentNavigationForFrame(WebKit::UnifiedPDFPlugin *this, WebKit::WebFrame *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*(WebKit::WebFrame **)(v2 + 8) == a2)
    {
      *((_BYTE *)this + 762) = 0;
      WebKit::UnifiedPDFPlugin::revealFragmentIfNeeded(this);
    }
  }
}

uint64_t WebKit::UnifiedPDFPlugin::scrollingNodeID(WebKit::UnifiedPDFPlugin *this)
{
  return *((_QWORD *)this + 88);
}

uint64_t WebKit::UnifiedPDFPlugin::layerForHorizontalScrollbar(WebKit::UnifiedPDFPlugin *this)
{
  return *((_QWORD *)this + 84);
}

uint64_t WebKit::UnifiedPDFPlugin::layerForVerticalScrollbar(WebKit::UnifiedPDFPlugin *this)
{
  return *((_QWORD *)this + 85);
}

uint64_t WebKit::UnifiedPDFPlugin::availableContentsRect(WebCore::Widget **this)
{
  uint64_t v2;
  WebCore::Widget *v3;
  WebCore::Widget *v4;

  v2 = WebCore::ScrollbarTheme::theme((WebCore::ScrollbarTheme *)this);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2) & 1) == 0)
  {
    v3 = this[65];
    if (v3)
      WebCore::Widget::frameRect(v3);
    v4 = this[64];
    if (v4)
      WebCore::Widget::frameRect(v4);
  }
  return 0;
}

unint64_t WebKit::UnifiedPDFPlugin::documentSize(WebKit::UnifiedPDFPlugin *this)
{
  unsigned int v2;
  unint64_t v3;
  float v4;
  float v5;
  int v6;
  float v7;

  if ((objc_msgSend(*((id *)this + 37), "isLocked") & 1) != 0)
  {
    v2 = 0;
    v3 = 0;
  }
  else
  {
    v4 = *((float *)this + 152);
    v5 = ceilf(*((float *)this + 150) * v4);
    if (v5 > -2147500000.0)
      v6 = (int)v5;
    else
      v6 = 0x80000000;
    if (v5 < 2147500000.0)
      v2 = v6;
    else
      v2 = 0x7FFFFFFF;
    v7 = ceilf(*((float *)this + 151) * v4);
    if (v7 >= 2147500000.0)
    {
      v3 = 0x7FFFFFFF00000000;
    }
    else if (v7 <= -2147500000.0)
    {
      v3 = 0x8000000000000000;
    }
    else
    {
      v3 = (unint64_t)(int)v7 << 32;
    }
  }
  return v3 | v2;
}

uint64_t WebKit::UnifiedPDFPlugin::updateSnapOffsets(WebKit::UnifiedPDFPlugin *this)
{
  _QWORD *v2;
  unint64_t i;
  void *v5;
  uint64_t IdentifierInternal;
  uint64_t v7;
  WTF *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t j;
  void *v12;
  FloatRect v13;
  _OWORD *v14;
  int v15;
  float v16;
  float m_height;
  BOOL v18;
  double v19;
  int v20;
  void *v21;
  uint64_t v22;
  FloatRect v23;
  WTF *v24;
  WTF *v25;
  double v26;
  int v27;
  void *v28;
  uint64_t v29;
  FloatRect v30;
  WTF *v31;
  WTF *v32;
  unsigned int v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  __int128 v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  WTF *v50;
  WTF *v51;
  void *v52;
  void *v53;
  FloatRect v54;
  uint64_t v55;
  WTF *v56;
  unsigned int v57;
  int v58;
  WTF *v59;
  unsigned int v60;
  unsigned int v61;
  WTF *v62;
  int v63;
  int v64;
  FloatRect v65;
  WTF *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70[3];

  v70[1] = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)((char *)this + 968);
  if (!*((_DWORD *)this + 245))
  {
    for (i = 0; ; ++i)
    {
      v5 = (void *)*((_QWORD *)this + 71);
      if (v5)
        v5 = (void *)objc_msgSend(v5, "pageCount");
      if (i >= (unint64_t)v5)
        break;
      IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      v54.m_location = (FloatPoint)IdentifierInternal;
      v7 = *((unsigned int *)this + 245);
      if ((_DWORD)v7 == *((_DWORD *)this + 244))
        *(_QWORD *)(*((_QWORD *)this + 121) + 8 * *((unsigned int *)this + 245)) = *(_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v7 + 1, (unint64_t)&v54);
      else
        *(_QWORD *)(*v2 + 8 * v7) = IdentifierInternal;
      ++*((_DWORD *)this + 245);
    }
  }
  if ((*((_BYTE *)this + 612) & 0xFD) != 0)
    return WebCore::ScrollableArea::clearSnapOffsets(this);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v68 = 0;
  v69 = 0;
  v66 = 0;
  v67 = 0;
  for (j = 16; ; j += 36)
  {
    v12 = (void *)*((_QWORD *)this + 71);
    if (v12)
      v12 = (void *)objc_msgSend(v12, "pageCount");
    if (v10 >= (unint64_t)v12)
      break;
    v13 = (FloatRect)0;
    if (v10 < *((unsigned int *)this + 147))
      v13 = *(FloatRect *)(*((_QWORD *)this + 72) + j);
    v54 = v13;
    WebCore::FloatRect::scale((WebCore::FloatRect *)&v54, *((float *)this + 152), *((float *)this + 152));
    v65 = v54;
    WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)&v54, &v65);
    if (v9 == (_DWORD)v67)
    {
      v14 = (_OWORD *)WTF::Vector<WebKit::DocumentEditingContext::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v66, v9 + 1, (unint64_t)&v54);
      v15 = HIDWORD(v67);
      v8 = v66;
      *((_OWORD *)v66 + HIDWORD(v67)) = *v14;
    }
    else
    {
      *((FloatRect *)v8 + v9) = v54;
      v15 = HIDWORD(v67);
    }
    v9 = v15 + 1;
    HIDWORD(v67) = v15 + 1;
    v16 = (float)*((int *)this + 81);
    m_height = v65.m_size.m_height;
    v18 = v65.m_size.m_height > v16;
    v19 = v65.m_location.m_y * 64.0;
    if (v19 >= 2147483650.0)
    {
      v20 = 0x7FFFFFFF;
    }
    else
    {
      v20 = (int)v19;
      if (v19 <= -2147483650.0)
        v20 = 0x80000000;
    }
    LODWORD(v54.m_location.m_x) = v20;
    LOBYTE(v54.m_location.m_y) = 1;
    BYTE1(v54.m_location.m_y) = v65.m_size.m_height > v16;
    if (v10 >= *((unsigned int *)this + 245))
      goto LABEL_71;
    v54.m_size = *(FloatSize *)(*v2 + 8 * v10);
    LOBYTE(v55) = 0;
    v70[0] = v10;
    WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v56, v70, 1uLL);
    if (HIDWORD(v69) == (_DWORD)v69)
    {
      WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SnapOffset<WebCore::LayoutUnit>>((unsigned int *)&v68, (unint64_t)&v54);
    }
    else
    {
      v22 = v68 + 40 * HIDWORD(v69);
      v23 = v54;
      *(_BYTE *)(v22 + 16) = v55;
      *(FloatRect *)v22 = v23;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      v24 = v56;
      v56 = 0;
      *(_QWORD *)(v22 + 24) = v24;
      *(_DWORD *)(v22 + 32) = v57;
      LODWORD(v24) = v58;
      v58 = 0;
      *(_DWORD *)(v22 + 36) = (_DWORD)v24;
      ++HIDWORD(v69);
    }
    v25 = v56;
    if (v56)
    {
      v56 = 0;
      v57 = 0;
      WTF::fastFree(v25, v21);
    }
    if (m_height > v16)
    {
      v26 = (float)((float)(v65.m_location.m_y + v65.m_size.m_height) - (float)*((int *)this + 81)) * 64.0;
      if (v26 >= 2147483650.0)
      {
        v27 = 0x7FFFFFFF;
      }
      else if (v26 <= -2147483650.0)
      {
        v27 = 0x80000000;
      }
      else
      {
        v27 = (int)v26;
      }
      LODWORD(v54.m_location.m_x) = v27;
      LOBYTE(v54.m_location.m_y) = 1;
      BYTE1(v54.m_location.m_y) = v18;
      if (v10 >= *((unsigned int *)this + 245))
      {
        __break(0xC471u);
        JUMPOUT(0x197319B5CLL);
      }
      v54.m_size = *(FloatSize *)(*v2 + 8 * v10);
      LOBYTE(v55) = 0;
      v70[0] = v10;
      WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v56, v70, 1uLL);
      if (HIDWORD(v69) == (_DWORD)v69)
      {
        WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SnapOffset<WebCore::LayoutUnit>>((unsigned int *)&v68, (unint64_t)&v54);
      }
      else
      {
        v29 = v68 + 40 * HIDWORD(v69);
        v30 = v54;
        *(_BYTE *)(v29 + 16) = v55;
        *(FloatRect *)v29 = v30;
        *(_QWORD *)(v29 + 24) = 0;
        *(_QWORD *)(v29 + 32) = 0;
        v31 = v56;
        v56 = 0;
        *(_QWORD *)(v29 + 24) = v31;
        *(_DWORD *)(v29 + 32) = v57;
        LODWORD(v31) = v58;
        v58 = 0;
        *(_DWORD *)(v29 + 36) = (_DWORD)v31;
        ++HIDWORD(v69);
      }
      v32 = v56;
      if (v56)
      {
        v56 = 0;
        v57 = 0;
        WTF::fastFree(v32, v28);
      }
    }
    ++v10;
  }
  LOBYTE(v54.m_location.m_x) = 2;
  v54.m_size = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = HIDWORD(v69);
  if (HIDWORD(v69))
  {
    if (HIDWORD(v69) >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x197319B64);
    }
    v33 = 40 * HIDWORD(v69);
    v34 = (WTF *)WTF::fastMalloc((WTF *)(40 * HIDWORD(v69)));
    v57 = v33 / 0x28;
    v56 = v34;
    if (HIDWORD(v69))
    {
      v35 = (uint64_t)v34 + 24;
      v36 = 40 * HIDWORD(v69);
      v37 = v68 + 24;
      do
      {
        v38 = *(_OWORD *)(v37 - 24);
        *(_BYTE *)(v35 - 8) = *(_BYTE *)(v37 - 8);
        *(_OWORD *)(v35 - 24) = v38;
        v35 = WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v35, v37) + 40;
        v37 += 40;
        v36 -= 40;
      }
      while (v36);
      v9 = HIDWORD(v67);
    }
  }
  v59 = 0;
  v60 = 0;
  v61 = v9;
  if (v9)
  {
    if (v9 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197319B6CLL);
    }
    v39 = (WTF *)(16 * v9);
    v40 = (WTF *)WTF::fastMalloc(v39);
    v60 = v9;
    v59 = v40;
    v41 = v66;
    do
    {
      v42 = *(_OWORD *)v41;
      v41 = (WTF *)((char *)v41 + 16);
      *(_OWORD *)v40 = v42;
      v40 = (WTF *)((char *)v40 + 16);
      v39 = (WTF *)((char *)v39 - 16);
    }
    while (v39);
  }
  v43 = *((unsigned int *)this + 245);
  v62 = 0;
  v63 = 0;
  v64 = v43;
  if ((_DWORD)v43)
  {
    if (v43 >> 29)
    {
LABEL_71:
      __break(0xC471u);
      JUMPOUT(0x197319B54);
    }
    v44 = (WTF *)WTF::fastMalloc((WTF *)(8 * v43));
    v63 = v43;
    v62 = v44;
    v45 = *((unsigned int *)this + 245);
    if ((_DWORD)v45)
    {
      v46 = (uint64_t *)*((_QWORD *)this + 121);
      v47 = 8 * v45;
      do
      {
        v48 = *v46++;
        *(_QWORD *)v44 = v48;
        v44 = (WTF *)((char *)v44 + 8);
        v47 -= 8;
      }
      while (v47);
    }
  }
  WebCore::ScrollableArea::setScrollSnapOffsetInfo();
  v50 = v62;
  if (v62)
  {
    v62 = 0;
    v63 = 0;
    WTF::fastFree(v50, v49);
  }
  v51 = v59;
  if (v59)
  {
    v59 = 0;
    v60 = 0;
    WTF::fastFree(v51, v49);
  }
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v49);
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54.m_size, v52);
  WebKit::UnifiedPDFPlugin::determineCurrentlySnappedPage((uint64_t)this);
  if (v66)
    WTF::fastFree(v66, v53);
  return WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v68, v53);
}

void sub_197319B78(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, int a13, WTF *a14, int a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF *a22,uint64_t a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  void *v27;
  void *v28;

  if (a14)
    WTF::fastFree(a14, a2);
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25, a2);
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v24, v27);
  if (a22)
    WTF::fastFree(a22, v28);
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a24, v28);
  _Unwind_Resume(a1);
}

_DWORD *WebKit::UnifiedPDFPlugin::didChangeSettings(WebKit::UnifiedPDFPlugin *this)
{
  _DWORD *result;
  uint64_t v3;
  uint64_t shouldShowDebugIndicators;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  result = (_DWORD *)WebKit::PDFPluginBase::page(this);
  if (result)
  {
    v3 = (uint64_t)result;
    ++*result;
    shouldShowDebugIndicators = WebKit::UnifiedPDFPlugin::shouldShowDebugIndicators(this);
    v5 = WebCore::Settings::showRepaintCounter(*(WebCore::Settings **)(v3 + 112));
    v6 = *((_QWORD *)this + 77);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 616))(v6, shouldShowDebugIndicators);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 624))(v6, v5);
    v7 = *((_QWORD *)this + 78);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 616))(v7, shouldShowDebugIndicators);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 624))(v7, v5);
    v8 = *((_QWORD *)this + 79);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 616))(v8, shouldShowDebugIndicators);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 624))(v8, v5);
    v9 = *((_QWORD *)this + 80);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 616))(v9, shouldShowDebugIndicators);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 624))(v9, v5);
    v10 = *((_QWORD *)this + 81);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 616))(v10, shouldShowDebugIndicators);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 624))(v10, v5);
    v11 = *((_QWORD *)this + 82);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 616))(v11, shouldShowDebugIndicators);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 624))(v11, v5);
    v12 = *((_QWORD *)this + 80);
    v13 = *(unsigned int *)(v12 + 196);
    if ((_DWORD)v13)
    {
      v14 = *(_QWORD **)(v12 + 184);
      v15 = 8 * v13;
      do
      {
        v16 = *v14;
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v14 + 616))(*v14, shouldShowDebugIndicators);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 624))(v16, v5);
        if (*(_DWORD *)(*v14 + 196))
        {
          v17 = **(_QWORD **)(*v14 + 184);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 616))(v17, shouldShowDebugIndicators);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 624))(v17, v5);
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
    v18 = *((_QWORD *)this + 84);
    if (v18)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v18 + 616))(*((_QWORD *)this + 84), shouldShowDebugIndicators);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 624))(v18, v5);
    }
    v19 = *((_QWORD *)this + 85);
    if (v19)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v19 + 616))(*((_QWORD *)this + 85), shouldShowDebugIndicators);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 624))(v19, v5);
    }
    v20 = *((_QWORD *)this + 86);
    if (v20)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v20 + 616))(*((_QWORD *)this + 86), shouldShowDebugIndicators);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 624))(v20, v5);
    }
    v21 = *((_QWORD *)this + 127);
    if (v21)
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v21 + 16));
      atomic_store(shouldShowDebugIndicators, (unsigned __int8 *)(v21 + 120));
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v21 + 16), v22);
    }
    return WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v3);
  }
  return result;
}

void sub_197319F08(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::updateLayerPositions(WebKit::UnifiedPDFPlugin *this)
{
  float v2;
  float v3;
  _OWORD v5[8];

  v5[5] = unk_1978D0638;
  v5[6] = xmmword_1978D0648;
  v5[7] = unk_1978D0658;
  v5[0] = xmmword_1978D05E8;
  v5[1] = unk_1978D05F8;
  v5[2] = xmmword_1978D0608;
  memset(&v5[3], 0, 32);
  WebCore::TransformationMatrix::scale((WebCore::TransformationMatrix *)v5, *((double *)this + 90));
  v2 = WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)this);
  WebCore::TransformationMatrix::translate((WebCore::TransformationMatrix *)v5, v2, v3);
  (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)this + 81) + 184))(*((_QWORD *)this + 81), v5);
  (*(void (**)(_QWORD, _OWORD *))(**((_QWORD **)this + 82) + 184))(*((_QWORD *)this + 82), v5);
  return (*(uint64_t (**)(_QWORD, _OWORD *))(**((_QWORD **)this + 80) + 184))(*((_QWORD *)this + 80), v5);
}

float WebKit::UnifiedPDFPlugin::centeringOffset(WebCore::Widget **this)
{
  int v2;
  int v3;
  float result;
  float v5;
  double v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  WebKit::UnifiedPDFPlugin::availableContentsRect(this);
  result = 0.0;
  if (v2 >= 1 && v3 >= 1)
  {
    v5 = *((float *)this + 152);
    v6 = *((double *)this + 90);
    v7 = v6;
    v8 = (float)(*((float *)this + 150) * v5) * v7;
    if (v8 > 0.0 && (float)((float)(*((float *)this + 151) * v5) * v7) > 0.0)
    {
      v9 = (float)v2 - v8;
      v10 = v9 * 0.5;
      if (v9 < 0.0)
        v10 = 0.0;
      v11 = 1.0 / v6;
      return floorf(v10) * v11;
    }
  }
  return result;
}

uint64_t WebKit::UnifiedPDFPlugin::shouldShowDebugIndicators(WebKit::UnifiedPDFPlugin *this)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = WebKit::PDFPluginBase::page(this);
  if (!v1)
    return 0;
  v2 = (_DWORD *)v1;
  ++*(_DWORD *)v1;
  v3 = WebCore::Settings::showDebugBorders(*(WebCore::Settings **)(v1 + 112));
  WTF::RefCounted<WebCore::Page>::deref(v2);
  return v3;
}

void sub_19731A0EC(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

_DWORD *`non-virtual thunk to'WebKit::UnifiedPDFPlugin::notifyFlushRequired(WebKit::UnifiedPDFPlugin *this, const WebCore::GraphicsLayer *a2)
{
  return WebKit::UnifiedPDFPlugin::scheduleRenderingUpdate((WebKit::UnifiedPDFPlugin *)((char *)this - 560));
}

uint64_t WebKit::UnifiedPDFPlugin::customContentsScale(WebKit::UnifiedPDFPlugin *this, const WebCore::GraphicsLayer *a2)
{
  char v3;

  WebKit::UnifiedPDFPlugin::pageIndexForPageBackgroundLayer(*((_QWORD *)this + 87), a2);
  if (v3)
    return COERCE_UNSIGNED_INT((float)(WebKit::PDFPluginBase::deviceScaleFactor(this) * *((float *)this + 152)) * 0.5) | 0x100000000;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebKit::UnifiedPDFPlugin::customContentsScale(WebKit::UnifiedPDFPlugin *this, const WebCore::GraphicsLayer *a2)
{
  return WebKit::UnifiedPDFPlugin::customContentsScale((WebKit::UnifiedPDFPlugin *)((char *)this - 560), a2);
}

uint64_t WebKit::UnifiedPDFPlugin::layerNeedsPlatformContext(WebKit::UnifiedPDFPlugin *this, const WebCore::GraphicsLayer *a2)
{
  if (*((const WebCore::GraphicsLayer **)this + 81) == a2)
    return objc_msgSend((id)WebKit::getPDFSelectionClass(this), "instancesRespondToSelector:", sel_enumerateRectsAndTransformsForPage_usingBlock_) ^ 1;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebKit::UnifiedPDFPlugin::layerNeedsPlatformContext(WebKit::UnifiedPDFPlugin *this, const WebCore::GraphicsLayer *a2)
{
  if (*((const WebCore::GraphicsLayer **)this + 11) == a2)
    return objc_msgSend((id)WebKit::getPDFSelectionClass(this), "instancesRespondToSelector:", sel_enumerateRectsAndTransformsForPage_usingBlock_) ^ 1;
  else
    return 0;
}

_DWORD *WebKit::UnifiedPDFPlugin::tiledBackingUsageChanged(WebKit::UnifiedPDFPlugin *this, const WebCore::GraphicsLayer *a2, char a3)
{
  _DWORD *result;
  uint64_t v6;
  uint64_t v7;

  result = (_DWORD *)WebKit::PDFPluginBase::page(this);
  if (result)
  {
    v6 = (uint64_t)result;
    ++*result;
    if ((a3 & 1) != 0)
    {
      v7 = (*(uint64_t (**)(const WebCore::GraphicsLayer *))(*(_QWORD *)a2 + 832))(a2);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 144))(v7, (*(unsigned __int16 *)(v6 + 658) >> 4) & 1);
    }
    return WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v6);
  }
  return result;
}

void sub_19731A264(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

_DWORD *`non-virtual thunk to'WebKit::UnifiedPDFPlugin::tiledBackingUsageChanged(WebKit::UnifiedPDFPlugin *this, const WebCore::GraphicsLayer *a2, char a3)
{
  return WebKit::UnifiedPDFPlugin::tiledBackingUsageChanged((WebKit::UnifiedPDFPlugin *)((char *)this - 560), a2, a3);
}

uint64_t WebKit::UnifiedPDFPlugin::windowActivityDidChange(WebKit::UnifiedPDFPlugin *this)
{
  return WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)this, 1, 0);
}

uint64_t WebKit::UnifiedPDFPlugin::repaintOnSelectionChange(uint64_t a1, int a2, void *a3)
{
  uint64_t result;
  void *v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;

  if (!a2 || (result = *(_QWORD *)(a1 + 832)) != 0 && (result = objc_msgSend((id)result, "isEmpty"), (result & 1) == 0))
  {
    if (a3)
      WebKit::UnifiedPDFPlugin::repaintOnSelectionChange(WebKit::UnifiedPDFPlugin::ActiveStateChangeReason,PDFSelection *)::$_0::operator()(a1, a3);
    v6 = *(void **)(a1 + 832);
    if (v6)
      CFRetain(*(CFTypeRef *)(a1 + 832));
    WebKit::UnifiedPDFPlugin::repaintOnSelectionChange(WebKit::UnifiedPDFPlugin::ActiveStateChangeReason,PDFSelection *)::$_0::operator()(a1, v6);
    if (v6)
      CFRelease(v6);
    v7 = objc_msgSend(*(id *)(a1 + 832), "isEmpty");
    result = *(_QWORD *)(a1 + 656);
    if (v7)
    {
      return WebCore::GraphicsLayer::removeFromParent((WebCore::GraphicsLayer *)result);
    }
    else if (!*(_QWORD *)(result + 200))
    {
      v8 = *(_QWORD *)(a1 + 632);
      ++*(_DWORD *)(result + 8);
      v11 = (_DWORD *)result;
      (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v8 + 64))(v8, &v11);
      v9 = v11;
      v11 = 0;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
        else
          --v9[2];
      }
      result = WebKit::PDFPluginBase::page((WebKit::PDFPluginBase *)a1);
      if (result)
      {
        v10 = (_DWORD *)result;
        ++*(_DWORD *)result;
        WebCore::GraphicsLayer::setIsInWindow(*(WebCore::GraphicsLayer **)(a1 + 656));
        return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v10);
      }
    }
  }
  return result;
}

void sub_19731A3B8(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

int *WebKit::UnifiedPDFPlugin::paint(int *this, WebCore::GraphicsContext *a2, const WebCore::IntRect *a3)
{
  uint64_t v5;
  float v6;
  float v7;
  WebCore *v8;
  CGColor *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  float v13;
  float v14;
  float v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  float32x2_t v19;
  float v20;
  float v21;
  uint64_t v22;

  if (this[80] >= 1 && this[81] >= 1)
  {
    v5 = (uint64_t)this;
    (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, (float)-this[94], (float)-this[95]);
    v6 = (float)*(int *)(v5 + 320);
    v7 = (float)*(int *)(v5 + 324);
    v19 = vcvt_f32_s32(*(int32x2_t *)(v5 + 376));
    v20 = v6;
    v21 = v7;
    (*(void (**)(WebCore::GraphicsContext *, float32x2_t *))(*(_QWORD *)a2 + 456))(a2, &v19);
    v8 = (WebCore *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA478], "grayColor"), "CGColor");
    v10 = WebCore::roundAndClampToSRGBALossy(v8, v9);
    v11 = bswap32(v10) | 0x1104000000000000;
    if (!BYTE4(v10))
      v11 = 0;
    v22 = v11;
    (*(void (**)(WebCore::GraphicsContext *, float32x2_t *, uint64_t *))(*(_QWORD *)a2 + 224))(a2, &v19, &v22);
    if ((v22 & 0x8000000000000) != 0)
    {
      v16 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v12);
      }
    }
    v13 = *(double *)(v5 + 720);
    *(float *)&v22 = v13;
    *((float *)&v22 + 1) = v13;
    (*(void (**)(WebCore::GraphicsContext *, uint64_t *))(*(_QWORD *)a2 + 632))(a2, &v22);
    v14 = WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)v5);
    (*(void (**)(WebCore::GraphicsContext *, float))(*(_QWORD *)a2 + 648))(a2, v14);
    v15 = 1.0 / *(double *)(v5 + 720);
    WebCore::FloatRect::scale((WebCore::FloatRect *)&v19, v15, v15);
    return WebKit::UnifiedPDFPlugin::paintPDFContent((int *)v5, (uint64_t)a2, (WebCore *)&v19, 0, 0);
  }
  return this;
}

void sub_19731A590(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if ((a12 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

int *WebKit::UnifiedPDFPlugin::paintPDFContent(int *this, uint64_t a2, WebCore *a3, char a4, int a5)
{
  uint64_t v5;
  WebKit *shouldShowDebugIndicators;
  void *v11;
  int v12;
  void *v13;
  WebCore::Page *v14;
  WebCore::Page *v15;
  void *v16;
  WebKit *v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  float v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  int v30;
  _BOOL4 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  int v38;
  int v39;
  int v40;
  int v41;
  char v42;
  void *v43;
  void *v44;
  CGRect *v45;
  CGSize size;
  void *v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  void *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  void *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  _BOOL8 v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  int v72;
  id *v73;
  _DWORD v74[12];
  CGRect v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _OWORD v79[3];
  float32x2_t v80[4];
  char v81;
  __int128 v82;
  _QWORD *v83;
  unsigned int v84;
  float v85;
  _QWORD v86[3];

  if (this[80] >= 1)
  {
    v5 = (uint64_t)this;
    if (this[81] >= 1)
    {
      this = (int *)WebKit::UnifiedPDFPlugin::documentSize((WebKit::UnifiedPDFPlugin *)this);
      if ((int)this >= 1 && SHIDWORD(this) >= 1)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
        shouldShowDebugIndicators = (WebKit *)WebKit::UnifiedPDFPlugin::shouldShowDebugIndicators((WebKit::UnifiedPDFPlugin *)v5);
        LODWORD(v11) = (_DWORD)shouldShowDebugIndicators;
        if ((a4 & 1) != 0)
          v12 = 1;
        else
          v12 = objc_msgSend((id)WebKit::getPDFSelectionClass(shouldShowDebugIndicators), "instancesRespondToSelector:", sel_enumerateRectsAndTransformsForPage_usingBlock_);
        v13 = *(void **)(v5 + 832);
        if (v13 && ((objc_msgSend(v13, "isEmpty") | v12) & 1) == 0)
        {
          v14 = (WebCore::Page *)WebKit::PDFPluginBase::page((WebKit::PDFPluginBase *)v5);
          v15 = v14;
          if (!v14)
            goto LABEL_102;
          ++*(_DWORD *)v14;
          LODWORD(v66) = WebCore::Page::isVisibleAndActive(v14);
          WTF::RefCounted<WebCore::Page>::deref(v15);
LABEL_13:
          v72 = 1;
        }
        else
        {
          LODWORD(v66) = 0;
          v72 = 0;
        }
        v16 = *(void **)(v5 + 768);
        v68 = a5;
        if (v16)
        {
          v17 = (WebKit *)CFRetain(v16);
          WebKit::getPDFAnnotationTextWidgetClass[0](v17);
          if ((objc_opt_isKindOfClass() & 1) != 0 && *(_BYTE *)(v5 + 776))
          {
            v18 = objc_msgSend(*(id *)(v5 + 296), "indexForPage:", objc_msgSend(v16, "page"));
            v19 = v18 != 0x7FFFFFFFFFFFFFFFLL;
            if (v18 == 0x7FFFFFFFFFFFFFFFLL)
              v20 = 0;
            else
              v20 = v18;
            v69 = v20 & 0xFFFFFFFFFFFFFF00;
          }
          else
          {
            v69 = 0;
            v19 = 0;
            LOBYTE(v20) = 0;
          }
          CFRelease(v16);
        }
        else
        {
          LOBYTE(v20) = 0;
          v19 = 0;
          v69 = 0;
        }
        WebKit::UnifiedPDFPlugin::pageCoverageAndScalesForRect((WebKit::UnifiedPDFPlugin *)&v83, (const WebCore::FloatRect *)v5, a3);
        v22 = v83;
        if (v84)
        {
          v70 = v69 & 0xFFFFFFFFFFFFFF00 | v20;
          v23 = v85;
          v24 = &v83[3 * v84];
          v73 = (id *)(v5 + 568);
          HIDWORD(v66) = v11 ^ 1;
          a5 = v68;
          v67 = v19;
          v71 = v24;
          while (1)
          {
            v25 = (void *)objc_msgSend(*v73, "pageAtIndex:", *v22, v66);
            v11 = v25;
            if (v25)
              break;
LABEL_77:
            v22 += 3;
            if (v22 == v24)
            {
              v22 = v83;
              goto LABEL_97;
            }
          }
          CFRetain(v25);
          if (!WebKit::UnifiedPDFPlugin::shouldDisplayPage((WebKit::UnifiedPDFPlugin *)v5, *v22))
          {
LABEL_76:
            CFRelease(v11);
            goto LABEL_77;
          }
          v82 = *(_OWORD *)(v22 + 1);
          if (a5)
          {
            v27 = *(_QWORD *)(v5 + 1016);
            if (v27)
            {
              WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v27 + 16));
              *(_OWORD *)v80[0].f32 = v82;
              WebCore::FloatRect::scale((WebCore::FloatRect *)v80, v23, v23);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
              (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 456))(a2, v80);
              v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v27 + 40) + 832))(*(_QWORD *)(v27 + 40));
              if (v28)
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 328))(v28);
              else
                v29 = 1.0;
              v75.origin.y = 0.0;
              v75.size.width = 0.0;
              v75.origin.x = (float)(1.0 / v29);
              v75.size.height = v75.origin.x;
              v76 = 0;
              v77 = 0;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
              (*(void (**)(uint64_t, CGRect *))(*(_QWORD *)a2 + 656))(a2, &v75);
              v32 = *(_QWORD *)(v27 + 96);
              v33 = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::begin(v32);
              v34 = v33;
              *(_QWORD *)&v79[0] = v33;
              *((_QWORD *)&v79[0] + 1) = v35;
              if (v32)
                v36 = v32 + 96 * *(unsigned int *)(v32 - 4);
              else
                v36 = 0;
              if (v36 == v33)
              {
                v37 = 0;
              }
              else
              {
                v37 = 0;
                do
                {
                  WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v75, (const WebCore::FloatRect *)(v34 + 24));
                  v74[0] = v38;
                  v74[1] = v39;
                  v74[2] = v40;
                  v74[3] = v41;
                  if ((WebCore::FloatRect::intersects((WebCore::FloatRect *)v80, (const WebCore::FloatRect *)v74) & 1) != 0
                    && WebCore::FloatRect::intersects((WebCore::FloatRect *)v74, a3))
                  {
                    v86[0] = *(_QWORD *)(v34 + 24);
                    v32 = v32 & 0xFFFFFFFFFF000000 | 0x1221;
                    WebCore::GraphicsContext::drawImageBuffer();
                    v37 = 1;
                  }
                  *(_QWORD *)&v79[0] = v34 + 96;
                  WTF::HashTableConstIterator<WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>,WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::skipEmptyBuckets((uint64_t *)v79);
                  v34 = *(_QWORD *)&v79[0];
                }
                while (*(_QWORD *)&v79[0] != v36);
              }
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
              v42 = v37 | BYTE4(v66);
              a5 = v68;
              v19 = v67;
              if ((v42 & 1) == 0)
              {
                v75.origin.x = 1.05531862e-226;
                (*(void (**)(uint64_t, float32x2_t *, CGRect *))(*(_QWORD *)a2 + 224))(a2, v80, &v75);
                if ((*(_QWORD *)&v75.origin.x & 0x8000000000000) != 0)
                {
                  v53 = (unsigned int *)(*(_QWORD *)&v75.origin.x & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v54 = __ldaxr(v53);
                    v55 = v54 - 1;
                  }
                  while (__stlxr(v55, v53));
                  if (!v55)
                  {
                    atomic_store(1u, v53);
                    WTF::fastFree((WTF *)v53, v43);
                  }
                }
              }
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
              v30 = 0;
              if (!v67)
                goto LABEL_50;
              goto LABEL_34;
            }
          }
          else
          {
            v27 = 0;
          }
          v30 = 1;
          if (!v19)
          {
LABEL_50:
            v31 = 0;
LABEL_51:
            if (((v72 | v30) & 1) != 0 || v31)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
              *(float *)&v75.origin.x = v23;
              *((float *)&v75.origin.x + 1) = v23;
              (*(void (**)(uint64_t, CGRect *))(*(_QWORD *)a2 + 632))(a2, &v75);
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 456))(a2, &v82);
              if (!v27)
              {
                v75.origin.x = 1.05531862e-226;
                (*(void (**)(uint64_t, __int128 *, CGRect *))(*(_QWORD *)a2 + 224))(a2, &v82, &v75);
                if ((*(_QWORD *)&v75.origin.x & 0x8000000000000) != 0)
                {
                  v56 = (unsigned int *)(*(_QWORD *)&v75.origin.x & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v57 = __ldaxr(v56);
                    v58 = v57 - 1;
                  }
                  while (__stlxr(v58, v56));
                  if (!v58)
                  {
                    atomic_store(1u, v56);
                    WTF::fastFree((WTF *)v56, v44);
                  }
                }
              }
              (*(void (**)(uint64_t, float, float))(*(_QWORD *)a2 + 648))(a2, *(float *)&v82, *((float *)&v82 + 1) + *((float *)&v82 + 3));
              v75.origin.x = -0.00781250185;
              (*(void (**)(uint64_t, CGRect *))(*(_QWORD *)a2 + 632))(a2, &v75);
              if (!v27)
                objc_msgSend(v11, "drawWithBox:toContext:", 1, (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2));
              if ((v72 | v31) == 1)
              {
                CFRetain(v11);
                WebKit::PDFDocumentLayout::geometryForPage((uint64_t)v80, (uint64_t)v73, v11);
                CFRelease(v11);
                if (!v81)
                {
                  __break(1u);
LABEL_102:
                  LODWORD(v66) = 0;
                  goto LABEL_13;
                }
                WebKit::PDFDocumentLayout::toPageTransform((uint64_t)v74, v80);
                WebCore::AffineTransform::inverse((WebCore::AffineTransform *)v74);
                v45 = &v75;
                if (!v78)
                  v45 = (CGRect *)&xmmword_1978D05B8;
                size = v45->size;
                v79[0] = v45->origin;
                v79[1] = size;
                v79[2] = v45[1].origin;
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
                (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a2 + 656))(a2, v79);
                if (v72)
                  objc_msgSend(*(id *)(v5 + 832), "drawForPage:withBox:active:inContext:", v11, 1, v66, (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2));
                if (v31)
                {
                  v47 = *(void **)(v5 + 768);
                  if (v47)
                    CFRetain(*(CFTypeRef *)(v5 + 768));
                  if (objc_msgSend(*(id *)(v5 + 296), "indexForPage:", objc_msgSend(v47, "page")) != 0x7FFFFFFFFFFFFFFFLL)
                  {
                    objc_msgSend(v47, "bounds");
                    v75.origin.x = v48;
                    v75.origin.y = v49;
                    v75.size.width = v50;
                    v75.size.height = v51;
                    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v74, &v75);
                    if ((byte_1ECE72D29 & 1) == 0)
                    {
                      objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEA478], "systemBlueColor"), "colorWithAlphaComponent:", 0.12), "CGColor");
                      WebCore::Color::createAndPreserveColorSpace();
                      WebCore::Color::Color();
                      if ((*(_QWORD *)&v75.origin.x & 0x8000000000000) != 0)
                      {
                        v63 = (unsigned int *)(*(_QWORD *)&v75.origin.x & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v64 = __ldaxr(v63);
                          v65 = v64 - 1;
                        }
                        while (__stlxr(v65, v63));
                        if (!v65)
                        {
                          atomic_store(1u, v63);
                          WTF::fastFree((WTF *)v63, v62);
                        }
                      }
                      byte_1ECE72D29 = 1;
                      a5 = v68;
                      v19 = v67;
                    }
                    WebCore::Color::Color((WebCore::Color *)v86, &stru_1ECE72D38);
                    (*(void (**)(uint64_t, _DWORD *, _QWORD *))(*(_QWORD *)a2 + 224))(a2, v74, v86);
                    if ((v86[0] & 0x8000000000000) != 0)
                    {
                      v59 = (unsigned int *)(v86[0] & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v60 = __ldaxr(v59);
                        v61 = v60 - 1;
                      }
                      while (__stlxr(v61, v59));
                      a5 = v68;
                      v19 = v67;
                      if (!v61)
                      {
                        atomic_store(1u, v59);
                        WTF::fastFree((WTF *)v59, v52);
                      }
                    }
                  }
                  if (v47)
                    CFRelease(v47);
                }
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
              }
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
            }
            if (v27)
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v27 + 16), v26);
            v24 = v71;
            goto LABEL_76;
          }
LABEL_34:
          v31 = v70 == *v22;
          goto LABEL_51;
        }
LABEL_97:
        if (v22)
          WTF::fastFree((WTF *)v22, v21);
        return (int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
      }
    }
  }
  return this;
}

void sub_19731AE24(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  void *v34;
  WTF *v35;

  if ((a24 & 0x8000000000000) != 0)
  {
    v30 = (unsigned int *)(a24 & 0xFFFFFFFFFFFFLL);
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, a2);
    }
  }
  if (v27)
    CFRelease(v27);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 104))(v24, 1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 104))(v24, 1);
  if (v26)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v26 + 16), v33);
  CFRelease(v25);
  v35 = *(WTF **)(v28 - 168);
  if (v35)
    WTF::fastFree(v35, v34);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 104))(v24, 1);
  _Unwind_Resume(a1);
}

void WebKit::UnifiedPDFPlugin::paintContents(WebKit::UnifiedPDFPlugin *this, const WebCore::GraphicsLayer *a2, uint64_t a3, WebCore *a4)
{
  unsigned __int8 *v4;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Widget *v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::ScrollbarTheme *v27;
  uint64_t v28;
  void *v29;
  WebKit *v30;
  char *v31;
  WebCore::Page *v32;
  WebCore::Page *v33;
  int isVisibleAndActive;
  uint64_t v35;
  WebCore::RenderObject *v36;
  const Color *v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  void *v44;
  void *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  const void *v49;
  const void *v50;
  Color *v51;
  __int128 v52;
  void *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  _QWORD v64[6];
  IntPoint v65;
  Color v66;
  uint64_t v67;
  char v68;
  _OWORD v69[3];
  float32x2_t v70[4];
  char v71;
  __int128 v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  uint64_t v76;

  v4 = (unsigned __int8 *)a3;
  if (*((const WebCore::GraphicsLayer **)this + 84) == a2)
  {
    v24 = (WebCore::Widget *)*((_QWORD *)this + 64);
    if (!v24)
      return;
LABEL_19:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
    v66.m_colorAndFlags = WebCore::Widget::frameRect(v24);
    v67 = v25;
    v65 = (IntPoint)(-LODWORD(v66.m_colorAndFlags) - (v66.m_colorAndFlags & 0xFFFFFFFF00000000));
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v69, &v65);
    (*(void (**)(unsigned __int8 *, float, float))(*(_QWORD *)v4 + 648))(v4, *(float *)v69, *((float *)v69 + 1));
    (*(void (**)(WebCore::Widget *, unsigned __int8 *, Color *, _QWORD, _QWORD))(*(_QWORD *)v24 + 24))(v24, v4, &v66, 0, 0);
LABEL_23:
    (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v4 + 104))(v4, 1);
    return;
  }
  if (*((const WebCore::GraphicsLayer **)this + 85) == a2)
  {
    v24 = (WebCore::Widget *)*((_QWORD *)this + 65);
    if (!v24)
      return;
    goto LABEL_19;
  }
  if (*((const WebCore::GraphicsLayer **)this + 86) == a2)
  {
    v66.m_colorAndFlags = WebKit::PDFPluginBase::viewRelativeScrollCornerRect(this);
    v67 = v26;
    (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v4 + 96))(v4, 1);
    v65 = (IntPoint)(-LODWORD(v66.m_colorAndFlags) - (v66.m_colorAndFlags & 0xFFFFFFFF00000000));
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v69, &v65);
    v27 = (WebCore::ScrollbarTheme *)(*(uint64_t (**)(unsigned __int8 *, float, float))(*(_QWORD *)v4 + 648))(v4, *(float *)v69, *((float *)v69 + 1));
    v28 = WebCore::ScrollbarTheme::theme(v27);
    (*(void (**)(uint64_t, WebKit::UnifiedPDFPlugin *, unsigned __int8 *, Color *))(*(_QWORD *)v28 + 112))(v28, this, v4, &v66);
    goto LABEL_23;
  }
  if (*((const WebCore::GraphicsLayer **)this + 81) == a2)
  {
    WebKit::UnifiedPDFPlugin::paintPDFContent((int *)this, a3, a4, 0, 1);
    return;
  }
  if (*((const WebCore::GraphicsLayer **)this + 82) != a2)
  {
    v7 = WebKit::UnifiedPDFPlugin::pageIndexForPageBackgroundLayer(*((_QWORD *)this + 87), a2);
    if (!v8)
      return;
    v9 = v7;
    v10 = 0;
    if (v7 < *((unsigned int *)this + 147))
      v10 = *(_QWORD *)(*((_QWORD *)this + 72) + 36 * v7 + 24);
    v67 = v10;
    v66.m_colorAndFlags = 0;
    v11 = *((_QWORD *)this + 127);
    if (!v11)
      return;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v11 + 16));
    v13 = *(_QWORD *)(v11 + 112);
    if (!v13)
      goto LABEL_58;
    v14 = *(_DWORD *)(v13 - 8);
    v15 = (v9 + ~(v9 << 32)) ^ ((v9 + ~(v9 << 32)) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = *(_QWORD *)(v13 + 16 * v18);
    if (v19 != v9)
    {
      v20 = 1;
      while (v19 != -1)
      {
        v18 = ((_DWORD)v18 + v20) & v14;
        v19 = *(_QWORD *)(v13 + 16 * v18);
        ++v20;
        if (v19 == v9)
          goto LABEL_15;
      }
      goto LABEL_58;
    }
LABEL_15:
    v21 = *(_QWORD *)(v13 + 16 * v18 + 8);
    if (!v21)
      goto LABEL_58;
    v22 = *(_QWORD *)(v21 + 8);
    if (__ldaxr((unsigned __int8 *)v22))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v22))
    {
      goto LABEL_37;
    }
    MEMORY[0x19AEABB3C](v22);
LABEL_37:
    ++*(_QWORD *)(v22 + 8);
    v38 = __ldxr((unsigned __int8 *)v22);
    if (v38 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v22))
      {
LABEL_42:
        (*(void (**)(unsigned __int8 *, uint64_t, Color *, Color *, uint64_t))(*(_QWORD *)v4 + 384))(v4, v21, &v66, &v66, 4641);
        v4 = *(unsigned __int8 **)(v21 + 8);
        if (__ldaxr(v4))
        {
          __clrex();
        }
        else if (!__stxr(1u, v4))
        {
LABEL_46:
          v40 = *((_QWORD *)v4 + 1);
          v31 = (char *)(v40 - 1);
          *((_QWORD *)v4 + 1) = v40 - 1;
          if (v40 == 1)
            goto LABEL_85;
          v41 = 0;
          v42 = 1;
          goto LABEL_48;
        }
        MEMORY[0x19AEABB3C](v4);
        goto LABEL_46;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    goto LABEL_42;
  }
  v29 = (void *)*((_QWORD *)this + 104);
  if (!v29)
    return;
  v30 = (WebKit *)objc_msgSend(v29, "isEmpty");
  if ((v30 & 1) != 0)
    return;
  v31 = sel_enumerateRectsAndTransformsForPage_usingBlock_;
  if (!objc_msgSend((id)WebKit::getPDFSelectionClass(v30), "instancesRespondToSelector:", sel_enumerateRectsAndTransformsForPage_usingBlock_))return;
  v32 = (WebCore::Page *)WebKit::PDFPluginBase::page(this);
  if (v32)
  {
    v33 = v32;
    ++*(_DWORD *)v32;
    isVisibleAndActive = WebCore::Page::isVisibleAndActive(v32);
    WTF::RefCounted<WebCore::Page>::deref(v33);
  }
  else
  {
    isVisibleAndActive = 0;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 8) + 64);
  v36 = (WebCore::RenderObject *)(v35 & 0xFFFFFFFFFFFFLL);
  if ((v35 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v35 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    return;
  }
  WebCore::RenderObject::theme(v36);
  WebCore::RenderObject::styleColorOptions(v36);
  if (isVisibleAndActive)
    WebCore::RenderTheme::activeSelectionBackgroundColor();
  else
    WebCore::RenderTheme::inactiveSelectionBackgroundColor();
  *(_QWORD *)&v69[0] = 0x11040000FFFFFFFFLL;
  WebCore::blendSourceOver((WebCore *)v69, &v66, v37);
  if ((*(_QWORD *)&v69[0] & 0x8000000000000) != 0)
  {
    v58 = (unsigned int *)(*(_QWORD *)&v69[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
    {
      atomic_store(1u, v58);
      WTF::fastFree((WTF *)v58, v44);
    }
  }
  if ((v66.m_colorAndFlags & 0x8000000000000) != 0)
  {
    v61 = (unsigned int *)(v66.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
    do
    {
      v62 = __ldaxr(v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v61));
    if (!v63)
    {
      atomic_store(1u, v61);
      WTF::fastFree((WTF *)v61, v44);
    }
  }
  WebKit::UnifiedPDFPlugin::pageCoverageAndScalesForRect((WebKit::UnifiedPDFPlugin *)&v73, this, a4);
  v11 = v73;
  if (!v74)
  {
LABEL_77:
    if (v11)
      WTF::fastFree((WTF *)v11, v45);
    if ((v76 & 0x8000000000000) != 0)
    {
      v54 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFLL);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        atomic_store(1u, v54);
        WTF::fastFree((WTF *)v54, v45);
      }
    }
    return;
  }
  v46 = 0;
  v47 = v75;
  v48 = 24 * v74;
  while (1)
  {
    v49 = (const void *)objc_msgSend(*((id *)this + 71), "pageAtIndex:", *(_QWORD *)(v11 + v46));
    v50 = v49;
    if (v49)
      break;
LABEL_76:
    v46 += 24;
    if (v48 == v46)
      goto LABEL_77;
  }
  CFRetain(v49);
  if (!WebKit::UnifiedPDFPlugin::shouldDisplayPage(this, *(_QWORD *)(v11 + v46)))
  {
LABEL_75:
    CFRelease(v50);
    goto LABEL_76;
  }
  v72 = *(_OWORD *)(v11 + v46 + 8);
  (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v4 + 96))(v4, 1);
  LODWORD(v66.m_colorAndFlags) = v47;
  HIDWORD(v66.m_colorAndFlags) = v47;
  (*(void (**)(unsigned __int8 *, Color *))(*(_QWORD *)v4 + 632))(v4, &v66);
  (*(void (**)(unsigned __int8 *, __int128 *))(*(_QWORD *)v4 + 456))(v4, &v72);
  (*(void (**)(unsigned __int8 *, float, float))(*(_QWORD *)v4 + 648))(v4, *(float *)&v72, *((float *)&v72 + 1) + *((float *)&v72 + 3));
  v66.m_colorAndFlags = 0xBF8000003F800000;
  (*(void (**)(unsigned __int8 *, Color *))(*(_QWORD *)v4 + 632))(v4, &v66);
  CFRetain(v50);
  WebKit::PDFDocumentLayout::geometryForPage((uint64_t)v70, (uint64_t)this + 568, v50);
  CFRelease(v50);
  if (v71)
  {
    WebKit::PDFDocumentLayout::toPageTransform((uint64_t)&v65, v70);
    WebCore::AffineTransform::inverse((WebCore::AffineTransform *)&v65);
    v51 = &v66;
    if (!v68)
      v51 = (Color *)&xmmword_1978D05B8;
    v52 = *(_OWORD *)&v51[2].m_colorAndFlags;
    v69[0] = *(_OWORD *)&v51->m_colorAndFlags;
    v69[1] = v52;
    v69[2] = *(_OWORD *)&v51[4].m_colorAndFlags;
    (*(void (**)(unsigned __int8 *, _OWORD *))(*(_QWORD *)v4 + 656))(v4, v69);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v53 = (void *)*((_QWORD *)this + 104);
      if (v53)
        CFRetain(*((CFTypeRef *)this + 104));
      v64[0] = MEMORY[0x1E0C809B0];
      v64[1] = 3321888768;
      v64[2] = ___ZN6WebKit16UnifiedPDFPlugin17paintPDFSelectionERN7WebCore15GraphicsContextERKNS1_9FloatRectE_block_invoke;
      v64[3] = &__block_descriptor_48_e8_32c102_ZTSKZN6WebKit16UnifiedPDFPlugin17paintPDFSelectionERN7WebCore15GraphicsContextERKNS1_9FloatRectEE3__1_e67_v88__0_CGRect__CGPoint_dd__CGSize_dd__8_CGAffineTransform_dddddd_40l;
      v64[4] = v4;
      v64[5] = &v76;
      objc_msgSend(v53, "enumerateRectsAndTransformsForPage:usingBlock:", v50, v64);
      if (v53)
        CFRelease(v53);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v4 + 104))(v4, 1);
    goto LABEL_75;
  }
  __break(1u);
LABEL_85:
  v57 = *((_QWORD *)v4 + 2);
  v41 = *((_QWORD *)v4 + 3);
  *((_QWORD *)v4 + 3) = 0;
  v42 = v57 != 0;
LABEL_48:
  v43 = __ldxr(v4);
  if (v43 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_53;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_53:
  if (!v31)
  {
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    if (!v42)
      WTF::fastFree((WTF *)v4, v12);
  }
LABEL_58:
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v11 + 16), v12);
}

void sub_19731B808(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::layerForScrollCorner(WebKit::UnifiedPDFPlugin *this)
{
  return *((_QWORD *)this + 86);
}

void `non-virtual thunk to'WebKit::UnifiedPDFPlugin::paintContents(uint64_t a1, const WebCore::GraphicsLayer *a2, uint64_t a3, WebCore *a4)
{
  WebKit::UnifiedPDFPlugin::paintContents((WebKit::UnifiedPDFPlugin *)(a1 - 560), a2, a3, a4);
}

uint64_t ___ZN6WebKit16UnifiedPDFPlugin17paintPDFSelectionERN7WebCore15GraphicsContextERKNS1_9FloatRectE_block_invoke(uint64_t a1, const CGAffineTransform *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v7;
  char isIdentity;
  uint64_t v9;
  uint64_t result;
  _BYTE v11[48];
  CGRect v12;

  v12.origin.x = a3;
  v12.origin.y = a4;
  v12.size.width = a5;
  v12.size.height = a6;
  v7 = *(_QWORD *)(a1 + 32);
  WebCore::AffineTransform::AffineTransform((WebCore::AffineTransform *)v11, a2);
  isIdentity = WebCore::AffineTransform::isIdentity((WebCore::AffineTransform *)v11);
  if ((isIdentity & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, 1);
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 32) + 656))(*(_QWORD *)(a1 + 32), v11);
  }
  v9 = *(_QWORD *)(a1 + 32);
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v11, &v12);
  result = (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v9 + 224))(v9, v11, *(_QWORD *)(a1 + 40));
  if ((isIdentity & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 104))(v7, 1);
  return result;
}

void sub_19731BAEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;

  if (v2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 104))(v1, 1);
  _Unwind_Resume(exception_object);
}

__n128 __copy_helper_block_e8_32c102_ZTSKZN6WebKit16UnifiedPDFPlugin17paintPDFSelectionERN7WebCore15GraphicsContextERKNS1_9FloatRectEE3__1(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[2];
  a1[2] = result;
  return result;
}

double WebKit::UnifiedPDFPlugin::scaleFactor(WebKit::UnifiedPDFPlugin *this)
{
  return *((double *)this + 90) * *((double *)this + 91);
}

float WebKit::UnifiedPDFPlugin::pageScaleFactor(WebKit::UnifiedPDFPlugin *this)
{
  return *((double *)this + 90);
}

float `non-virtual thunk to'WebKit::UnifiedPDFPlugin::pageScaleFactor(WebKit::UnifiedPDFPlugin *this)
{
  return *((double *)this + 20);
}

double WebKit::UnifiedPDFPlugin::contentScaleFactor(WebKit::UnifiedPDFPlugin *this)
{
  return *((double *)this + 90) * *((float *)this + 152);
}

float `non-virtual thunk to'WebKit::UnifiedPDFPlugin::deviceScaleFactor(WebKit::UnifiedPDFPlugin *this)
{
  return WebKit::PDFPluginBase::deviceScaleFactor((WebKit::UnifiedPDFPlugin *)((char *)this - 560));
}

uint64_t WebKit::UnifiedPDFPlugin::didBeginMagnificationGesture(uint64_t this)
{
  *(_BYTE *)(this + 760) = 1;
  return this;
}

uint64_t WebKit::UnifiedPDFPlugin::didEndMagnificationGesture(WebKit::UnifiedPDFPlugin *this)
{
  *((_BYTE *)this + 760) = 0;
  *((_BYTE *)this + 736) = 0;
  *((_BYTE *)this + 744) = 0;
  *((_BYTE *)this + 748) = 0;
  *((_BYTE *)this + 756) = 0;
  return WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants(*((WebCore::GraphicsLayer **)this
                                                                                        + 77));
}

_DWORD *WebKit::UnifiedPDFPlugin::setScaleFactor(uint64_t a1, uint64_t a2, int a3, double a4)
{
  char v4;
  _DWORD *result;
  float v8;
  _DWORD *v9;
  IntPoint v10;
  IntPoint v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  float v20;
  int v21;
  uint64_t v22;
  WebKit::PluginView *v23;
  int m_x;
  int m_y;
  int v26;
  int v27;
  double v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  unint64_t v37;
  IntPoint v38;
  float v39[2];
  _DWORD v40[2];
  IntPoint v41;
  IntPoint v42;
  uint64_t v43;
  int v44;
  IntPoint v45;

  v4 = a3;
  v43 = a2;
  v44 = a3;
  result = (_DWORD *)WebKit::PDFPluginBase::page((WebKit::PDFPluginBase *)a1);
  if (!result)
    return result;
  v9 = result;
  ++*result;
  v42 = 0;
  if (v4)
    v10 = (IntPoint)WebCore::AffineTransform::mapPoint((WebCore::AffineTransform *)(a1 + 328), (const WebCore::IntPoint *)&v43);
  else
    v10 = (IntPoint)((*(_DWORD *)(a1 + 320) / 2) | ((unint64_t)(*(_DWORD *)(a1 + 324)
                                                                                                 / 2) << 32));
  v42 = v10;
  if (*(_BYTE *)(a1 + 744))
  {
    if (!*(_BYTE *)(a1 + 756))
    {
      __break(1u);
LABEL_35:
      v19 = 0x7FFFFFFF;
      goto LABEL_14;
    }
    v42 = *(IntPoint *)(a1 + 748);
    v11 = *(IntPoint *)(a1 + 736);
  }
  else
  {
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v45, &v42);
    m_x = v45.m_x;
    m_y = v45.m_y;
    v26 = *(_DWORD *)(a1 + 376);
    v27 = *(_DWORD *)(a1 + 380);
    v28 = *(double *)(a1 + 720);
    v29 = WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)a1);
    v30 = 1.0 / v28;
    v32 = (float)((float)(*(float *)&m_y + (float)v27) * v30) - v31;
    v33 = roundf((float)((float)(*(float *)&m_x + (float)v26) * v30) - v29);
    v34 = 0x7FFFFFFFLL;
    v35 = 0x80000000;
    if (v33 > -2147500000.0)
      v35 = (int)v33;
    if (v33 < 2147500000.0)
      v34 = v35;
    v36 = roundf(v32);
    if (v36 >= 2147500000.0)
    {
      v37 = 0x7FFFFFFF00000000;
    }
    else if (v36 <= -2147500000.0)
    {
      v37 = 0x8000000000000000;
    }
    else
    {
      v37 = (unint64_t)(int)v36 << 32;
    }
    v11 = (IntPoint)(v37 | v34);
    if (*(_BYTE *)(a1 + 760) && !*(_BYTE *)(a1 + 744))
    {
      v38 = v42;
      if (!*(_BYTE *)(a1 + 756))
        *(_BYTE *)(a1 + 756) = 1;
      *(IntPoint *)(a1 + 748) = v38;
      *(_BYTE *)(a1 + 744) = 1;
      *(IntPoint *)(a1 + 736) = v11;
    }
  }
  v41 = v11;
  *(double *)(a1 + 720) = a4;
  WebKit::UnifiedPDFPlugin::updateScrollbars((WebKit::UnifiedPDFPlugin *)a1);
  WebKit::UnifiedPDFPlugin::updateScrollingExtents((WebKit::UnifiedPDFPlugin *)a1);
  if (!*(_BYTE *)(a1 + 760) || !WebKit::PDFPluginBase::handlesPageScaleFactor((WebKit::PDFPluginBase *)a1))
    WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants(*(WebCore::GraphicsLayer **)(a1 + 616));
  WebKit::UnifiedPDFPlugin::updateLayerPositions((WebKit::UnifiedPDFPlugin *)a1);
  WebKit::UnifiedPDFPlugin::updatePageBackgroundLayers((WebKit::UnifiedPDFPlugin *)a1);
  WebKit::UnifiedPDFPlugin::updateSnapOffsets((WebKit::UnifiedPDFPlugin *)a1);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v40, &v41);
  v12 = *(float *)v40;
  v13 = *(float *)&v40[1];
  v14 = WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)a1);
  v16 = *(double *)(a1 + 720);
  v17 = (float)(v12 + v14) * v16;
  v8 = (float)(v13 + v15) * v16;
  v18 = roundf(v17);
  if (v18 >= 2147500000.0)
    goto LABEL_35;
  if (v18 <= -2147500000.0)
    v19 = 0x80000000;
  else
    v19 = (int)v18;
LABEL_14:
  v20 = roundf(v8);
  if (v20 >= 2147500000.0)
  {
    v21 = 0x7FFFFFFF;
  }
  else if (v20 <= -2147500000.0)
  {
    v21 = 0x80000000;
  }
  else
  {
    v21 = (int)v20;
  }
  v45.m_x = (v19 - v42.m_x) & ~((v19 - v42.m_x) >> 31);
  v45.m_y = (v21 - v42.m_y) & ~((v21 - v42.m_y) >> 31);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v39, &v45);
  WebKit::UnifiedPDFPlugin::scrollToPointInContentsSpace(a1, v39[0], v39[1]);
  WebKit::UnifiedPDFPlugin::scheduleRenderingUpdate((WebKit::PDFPluginBase *)a1);
  v22 = *(_QWORD *)(a1 + 96);
  if (v22)
    v23 = *(WebKit::PluginView **)(v22 + 8);
  else
    v23 = 0;
  WebKit::PluginView::pluginScaleFactorDidChange(v23);
  return WTF::RefCounted<WebCore::Page>::deref(v9);
}

void sub_19731BE80(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::updateScrollbars(WebKit::UnifiedPDFPlugin *this)
{
  uint64_t result;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v17;
  unint64_t v18;
  float v19;
  float v20;

  WebKit::PDFPluginBase::updateScrollbars((unint64_t)this);
  result = *((_QWORD *)this + 65);
  if (*((_QWORD *)this + 64))
    v3 = result == 0;
  else
    v3 = 1;
  if (!v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 272))(result);
  v4 = *((_QWORD *)this + 84);
  if (v4)
  {
    v5 = WebKit::PDFPluginBase::viewRelativeHorizontalScrollbarRect(this);
    v7 = v6;
    v18 = v5;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v19, (const IntPoint *)&v18);
    (*(void (**)(uint64_t, float *))(*(_QWORD *)v4 + 128))(v4, &v19);
    v19 = (float)(int)v7;
    v20 = (float)SHIDWORD(v7);
    result = (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)v4 + 160))(v4, &v19);
  }
  v8 = *((_QWORD *)this + 85);
  if (v8)
  {
    v9 = WebKit::PDFPluginBase::viewRelativeVerticalScrollbarRect(this);
    v11 = v10;
    v18 = v9;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v19, (const IntPoint *)&v18);
    (*(void (**)(uint64_t, float *))(*(_QWORD *)v8 + 128))(v8, &v19);
    v19 = (float)(int)v11;
    v20 = (float)SHIDWORD(v11);
    result = (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)v8 + 160))(v8, &v19);
  }
  v12 = *((_QWORD *)this + 86);
  if (v12)
  {
    v13 = WebKit::PDFPluginBase::viewRelativeScrollCornerRect(this);
    v15 = v14;
    v18 = v13;
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v19, (const IntPoint *)&v18);
    (*(void (**)(uint64_t, float *))(*(_QWORD *)v12 + 128))(v12, &v19);
    v19 = (float)(int)v15;
    v20 = (float)SHIDWORD(v15);
    (*(void (**)(uint64_t, float *))(*(_QWORD *)v12 + 160))(v12, &v19);
    v17 = (int)v15 > 0 && SHIDWORD(v15) > 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v12 + 216))(v12, v17);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 240))(v12, 1);
  }
  return result;
}

uint64_t WebKit::UnifiedPDFPlugin::updateScrollingExtents(WebKit::UnifiedPDFPlugin *this)
{
  uint64_t result;
  WebCore::Page *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  void *v12;
  Radii v13;
  FloatRect v14;
  _BYTE v15[48];
  _QWORD v16[7];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[40];
  uint64_t v22;
  uint64_t v23;

  result = WebKit::PDFPluginBase::page(this);
  if (result)
  {
    v3 = (WebCore::Page *)result;
    ++*(_DWORD *)result;
    v23 = *((_QWORD *)this + 47);
    *(_QWORD *)&v17 = (*(uint64_t (**)(WebKit::UnifiedPDFPlugin *))(*(_QWORD *)this + 424))(this);
    v16[0] = (*(uint64_t (**)(WebKit::UnifiedPDFPlugin *))(*(_QWORD *)this + 432))(this);
    v22 = WebCore::IntPoint::constrainedBetween((WebCore::IntPoint *)&v23, (const WebCore::IntPoint *)&v17, (const WebCore::IntPoint *)v16);
    if (v23 != v22)
    {
      v4 = *((_BYTE *)this + 44);
      *((_BYTE *)this + 44) = 1;
      v17 = xmmword_1978D0590;
      WebKit::UnifiedPDFPlugin::requestScrollToPosition(this, (uint64_t)&v22, (uint64_t)&v17);
      *((_BYTE *)this + 44) = v4;
    }
    v5 = WebCore::Page::scrollingCoordinator(v3);
    (*(void (**)(uint64_t, _QWORD, _QWORD, WebKit::UnifiedPDFPlugin *))(*(_QWORD *)v5 + 312))(v5, *((_QWORD *)this + 88), *((_QWORD *)this + 89), this);
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 81) + 832))(*((_QWORD *)this + 81));
    if (v6)
    {
      v7 = WebCore::ScrollableArea::allowsHorizontalScrolling(this);
      if (WebCore::ScrollableArea::allowsVerticalScrolling(this))
        v8 = v7 | 2;
      else
        v8 = v7;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 128))(v6, v8);
    }
    WebCore::EventRegion::EventRegion((WebCore::EventRegion *)&v17);
    WebCore::EventRegionContext::EventRegionContext((WebCore::EventRegionContext *)v16, (WebCore::EventRegion *)&v17);
    v9 = (float)*((int *)this + 80);
    v10 = (float)*((int *)this + 81);
    v14.m_location = 0;
    v14.m_size.m_width = v9;
    v14.m_size.m_height = v10;
    memset(&v13, 0, sizeof(v13));
    WebCore::FloatRoundedRect::FloatRoundedRect((WebCore::FloatRoundedRect *)v15, &v14, &v13);
    v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 8) + 64);
    if ((v11 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v11 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      WebCore::EventRegionContext::unite();
      (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)this + 78) + 416))(*((_QWORD *)this + 78), &v17);
      WebCore::EventRegionContext::~EventRegionContext((WebCore::EventRegionContext *)v16);
      if (v21[24])
        WebCore::Region::~Region((WebCore::Region *)v21);
      WebCore::Region::~Region((WebCore::Region *)&v20);
      WebCore::Region::~Region((WebCore::Region *)&v19);
      WTF::Vector<WebCore::Region,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v12);
      WebCore::Region::~Region((WebCore::Region *)&v17);
      return (uint64_t)WTF::RefCounted<WebCore::Page>::deref(v3);
    }
  }
  return result;
}

void sub_19731C264(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatPoint>(WebKit::UnifiedPDFPlugin *this, unint64_t a2, char a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v12;
  __int128 v13;
  _BYTE v14[56];
  _OWORD v15[3];
  _BYTE v16[48];
  _DWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a3)
  {
    v18 = v10;
    v19 = v9;
    v20 = v8;
    v21 = v7;
    v22 = v5;
    v23 = v6;
    *(float *)v17 = a4;
    *(float *)&v17[1] = a5;
    if (a2 < *((unsigned int *)this + 147))
    {
      WebKit::PDFDocumentLayout::toPageTransform((uint64_t)v16, (float32x2_t *)(*((_QWORD *)this + 72) + 36 * a2));
      WebCore::AffineTransform::inverse((WebCore::AffineTransform *)v16);
      if (v14[48])
        v12 = (__int128 *)v14;
      else
        v12 = &xmmword_1978D05B8;
      v13 = v12[1];
      v15[0] = *v12;
      v15[1] = v13;
      v15[2] = v12[2];
      WebCore::AffineTransform::mapPoint((WebCore::AffineTransform *)v15, (const WebCore::FloatPoint *)v17);
    }
    WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)this);
  }
  else
  {
    __break(1u);
  }
}

uint64_t WebKit::UnifiedPDFPlugin::scrollToPointInContentsSpace(uint64_t a1, float a2, float a3)
{
  char v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  _BYTE v13[8];

  v4 = *(_BYTE *)(a1 + 44);
  *(_BYTE *)(a1 + 44) = 1;
  v5 = roundf(a2);
  v6 = 0x7FFFFFFFLL;
  v7 = 0x80000000;
  if (v5 > -2147500000.0)
    v7 = (int)v5;
  if (v5 < 2147500000.0)
    v6 = v7;
  v8 = roundf(a3);
  v9 = 0x7FFFFFFF00000000;
  v10 = 0x8000000000000000;
  if (v8 > -2147500000.0)
    v10 = (unint64_t)(int)v8 << 32;
  if (v8 < 2147500000.0)
    v9 = v10;
  v12 = v9 | v6;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v13, (const IntPoint *)&v12);
  result = WebCore::ScrollableArea::scrollToPositionWithoutAnimation();
  *(_BYTE *)(a1 + 44) = v4;
  return result;
}

_DWORD *WebKit::UnifiedPDFPlugin::setPageScaleFactor(uint64_t a1, unint64_t a2, int a3, double a4)
{
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  float v11;

  if (!WebKit::PDFPluginBase::handlesPageScaleFactor((WebKit::PDFPluginBase *)a1))
    return (_DWORD *)WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants(*(WebCore::GraphicsLayer **)(a1 + 616));
  v8 = HIDWORD(a2);
  if ((_BYTE)a3)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) + 8);
    if (*(_BYTE *)(v9 + 144))
      v9 = 0;
    v10 = *(_DWORD **)(v9 + 288);
    if (v10)
    {
      ++v10[2];
      WebCore::FrameView::topContentInset();
      LODWORD(v8) = llroundf(v11) + HIDWORD(a2);
      if (v10[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      else
        --v10[2];
    }
  }
  if (a4 != 1.0)
    *(_BYTE *)(a1 + 764) = 0;
  WebKit::UnifiedPDFPlugin::updateFindOverlay(a1, 1);
  return WebKit::UnifiedPDFPlugin::setScaleFactor(a1, a2 | ((unint64_t)v8 << 32), a3, a4 / *(double *)(a1 + 728));
}

void sub_19731C58C(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

void WebKit::UnifiedPDFPlugin::updateFindOverlay(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::PageOverlay *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 104);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  WebKit::WebFrame::protectedPage(v5, &v11);
  v6 = v11;
  v7 = *(WebCore::PageOverlay **)(*(_QWORD *)(v11 + 448) + 16);
  if (v7)
    WebCore::PageOverlay::setNeedsDisplay(v7);
  CFRelease(*(CFTypeRef *)(v6 + 8));
  if (a2)
  {
    v8 = *(_QWORD *)(a1 + 104);
    if (v8)
      v9 = *(_QWORD *)(v8 + 8);
    else
      v9 = 0;
    WebKit::WebFrame::protectedPage(v9, &v11);
    v10 = v11;
    WebKit::FindController::hideFindIndicator(*(_QWORD *)(v11 + 448));
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
}

void sub_19731C658(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL WebKit::UnifiedPDFPlugin::geometryDidChange(WebKit::UnifiedPDFPlugin *this, const WebCore::IntSize *a2, const WebCore::AffineTransform *a3)
{
  BOOL v5;
  _BOOL8 v6;

  v5 = *(_DWORD *)a2 == *((_DWORD *)this + 80) && *((_DWORD *)a2 + 1) == *((_DWORD *)this + 81);
  v6 = WebKit::PDFPluginBase::geometryDidChange(this, a2, a3);
  if (v6 && !v5)
    WebKit::UnifiedPDFPlugin::updateLayout((uint64_t)this, 0);
  return v6;
}

float WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>(uint64_t a1, float a2)
{
  double v4;
  int v5;
  float v6;
  float v7;

  v4 = *(double *)(a1 + 720);
  v5 = *(_DWORD *)(a1 + 376);
  v6 = WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)a1);
  v7 = 1.0 / v4;
  return (float)(1.0 / *(float *)(a1 + 608)) * (float)((float)((float)(a2 + (float)v5) * v7) - v6);
}

unint64_t WebKit::UnifiedPDFPlugin::contentsSize(WebKit::UnifiedPDFPlugin *this)
{
  unsigned int v2;
  unint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  float v11;

  if ((objc_msgSend(*((id *)this + 37), "isLocked") & 1) != 0)
  {
    v2 = 0;
    v3 = 0;
  }
  else
  {
    v4 = *((float *)this + 152);
    v5 = *((float *)this + 150) * v4;
    v6 = *((float *)this + 151) * v4;
    v7 = *((double *)this + 90);
    v8 = v6 * v7;
    v9 = ceilf(v5 * v7);
    if (v9 > -2147500000.0)
      v10 = (int)v9;
    else
      v10 = 0x80000000;
    if (v9 < 2147500000.0)
      v2 = v10;
    else
      v2 = 0x7FFFFFFF;
    v11 = ceilf(v8);
    if (v11 >= 2147500000.0)
    {
      v3 = 0x7FFFFFFF00000000;
    }
    else if (v11 <= -2147500000.0)
    {
      v3 = 0x8000000000000000;
    }
    else
    {
      v3 = (unint64_t)(int)v11 << 32;
    }
  }
  return v3 | v2;
}

int WebKit::UnifiedPDFPlugin::heightForPageAtIndex(id *this, unint64_t a2)
{
  id v4;
  double v5;

  if ((objc_msgSend(this[37], "isLocked") & 1) != 0)
    goto LABEL_7;
  v4 = this[71];
  if (!v4)
    return (int)v4;
  if (objc_msgSend(v4, "pageCount") <= a2)
  {
LABEL_7:
    LODWORD(v4) = 0;
    return (int)v4;
  }
  v5 = 0.0;
  if (*((unsigned int *)this + 147) > a2)
    v5 = *((float *)this[72] + 9 * a2 + 7);
  LODWORD(v4) = vcvtpd_u64_f64(v5);
  return (int)v4;
}

uint64_t WebKit::UnifiedPDFPlugin::firstPageHeight(id *this)
{
  return WebKit::UnifiedPDFPlugin::heightForPageAtIndex(this, 0);
}

unsigned int *WebKit::UnifiedPDFPlugin::liveResourceData@<X0>(id *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *result;
  NSData *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::FragmentedSharedBuffer *v7;

  if (*((_BYTE *)this + 544))
    result = (unsigned int *)objc_msgSend(this[37], "dataRepresentation");
  else
    result = (unsigned int *)WebKit::PDFPluginBase::originalData((WebKit::PDFPluginBase *)this);
  v7 = (WebCore::FragmentedSharedBuffer *)result;
  if (result)
  {
    result = WebCore::SharedBuffer::create<NSData *&>(&v7, v4, &v6);
    v5 = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t WebKit::UnifiedPDFPlugin::liveData(id *this)
{
  if (*((_BYTE *)this + 544))
    return objc_msgSend(this[37], "dataRepresentation");
  else
    return WebKit::PDFPluginBase::originalData((WebKit::PDFPluginBase *)this);
}

unsigned __int8 *WebKit::UnifiedPDFPlugin::releaseMemory(unsigned __int8 *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int v4;
  int v5;
  int v6;
  _DWORD v7[4];

  v1 = *((_QWORD *)this + 127);
  if (v1)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>::ref(*(unsigned __int8 **)(v1 + 16));
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 40) + 832))(*(_QWORD *)(v1 + 40));
    if (v2)
    {
      v7[0] = (*(float (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
      v7[1] = v4;
      v7[2] = v5;
      v7[3] = v6;
      WebKit::AsyncPDFRenderer::removePagePreviewsOutsideCoverageRect((unsigned __int8 *)v1, (const WebCore::FloatRect *)v7);
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v1 + 16), v3);
  }
  return this;
}

void sub_19731C974(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 16), a2);
  _Unwind_Resume(a1);
}

_DWORD *WebKit::UnifiedPDFPlugin::didChangeScrollOffset(WebKit::UnifiedPDFPlugin *this)
{
  uint64_t v2;
  IntPoint v4;
  _BYTE v5[8];

  v2 = *((_QWORD *)this + 78);
  if (*((_BYTE *)this + 44))
  {
    v4 = (IntPoint)*((_QWORD *)this + 47);
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v5, &v4);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 168))(v2, v5);
  }
  else
  {
    v4 = (IntPoint)*((_QWORD *)this + 47);
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v5, &v4);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 176))(v2, v5);
  }
  WebKit::UnifiedPDFPlugin::determineCurrentlySnappedPage((uint64_t)this);
  WebKit::UnifiedPDFPlugin::updateFindOverlay((uint64_t)this, 1);
  return WebKit::UnifiedPDFPlugin::scheduleRenderingUpdate(this);
}

uint64_t WebKit::UnifiedPDFPlugin::determineCurrentlySnappedPage(uint64_t this)
{
  uint64_t v1;
  char v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  double v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  int *v15;
  float v16;
  float v17;
  uint64_t v18;
  IntPoint v19;
  _BYTE v20[4];
  float v21;

  v1 = this;
  if ((*(_BYTE *)(this + 612) & 0xFD) != 0
    || (this = WebCore::ScrollableArea::snapOffsetsInfo((WebCore::ScrollableArea *)this)) == 0
    || (this = WebCore::ScrollableArea::snapOffsetsInfo((WebCore::ScrollableArea *)v1), !*(_DWORD *)(this + 36)))
  {
    if (!*(_BYTE *)(v1 + 992))
      return this;
    v2 = 0;
    LOBYTE(v3) = 0;
    v4 = 0;
    goto LABEL_4;
  }
  v5 = WebCore::ScrollableArea::snapOffsetsInfo((WebCore::ScrollableArea *)v1);
  if (!*(_DWORD *)(v5 + 36))
  {
    __break(0xC471u);
LABEL_23:
    JUMPOUT(0x19731CBC0);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
  v19 = *(IntPoint *)(v1 + 376);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v20, &v19);
  v7 = v21;
  v8 = *(double *)(v1 + 720);
  WebKit::UnifiedPDFPlugin::centeringOffset((WebCore::Widget **)v1);
  v10 = v9;
  this = WebCore::ScrollableArea::snapOffsetsInfo((WebCore::ScrollableArea *)v1);
  v11 = *(unsigned int *)(this + 36);
  if ((_DWORD)v11)
  {
    v12 = 1.0 / v8;
    v13 = (float)((float)(v7 * v12) - v10) + 10.0;
    v14 = 40 * v11;
    v15 = (int *)(*(_QWORD *)(this + 24) + 8);
    v16 = 3.4028e38;
    do
    {
      v17 = fabsf(v13 + (float)((float)*(v15 - 2) * -0.015625));
      if (v17 < v16)
      {
        v6 = *(_QWORD *)v15;
        v16 = v17;
      }
      v15 += 10;
      v14 -= 40;
    }
    while (v14);
  }
  v18 = *(unsigned int *)(v1 + 980);
  if (!(_DWORD)v18)
  {
LABEL_18:
    __break(0xC471u);
    goto LABEL_23;
  }
  v3 = 0;
  while (*(_QWORD *)(*(_QWORD *)(v1 + 968) + 8 * v3) != v6)
  {
    if (v18 == ++v3)
      goto LABEL_18;
  }
  v4 = v3 >> 8;
  if (!*(_BYTE *)(v1 + 992) || *(_QWORD *)(v1 + 984) != v3)
  {
    v2 = 1;
LABEL_4:
    *(_QWORD *)(v1 + 984) = v3 | (v4 << 8);
    *(_BYTE *)(v1 + 992) = v2;
    WebKit::UnifiedPDFPlugin::updatePageBackgroundLayers((WebKit::UnifiedPDFPlugin *)v1);
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 648) + 320))(*(_QWORD *)(v1 + 648));
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 656) + 320))(*(_QWORD *)(v1 + 656));
  }
  return this;
}

uint64_t WebKit::UnifiedPDFPlugin::invalidateScrollbarRect(uint64_t this, WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  _BYTE v4[16];

  if (*(WebCore::Scrollbar **)(this + 520) == a2)
  {
    v3 = *(_QWORD *)(this + 680);
    if (!v3)
      return this;
    goto LABEL_6;
  }
  if (*(WebCore::Scrollbar **)(this + 512) == a2)
  {
    v3 = *(_QWORD *)(this + 672);
    if (v3)
    {
LABEL_6:
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v4, a3);
      return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v3 + 328))(v3, v4, 1);
    }
  }
  return this;
}

uint64_t WebKit::UnifiedPDFPlugin::invalidateScrollCornerRect(uint64_t this, const WebCore::IntRect *a2)
{
  uint64_t v2;
  _BYTE v3[16];

  v2 = *(_QWORD *)(this + 688);
  if (v2)
  {
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v3, a2);
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v2 + 328))(v2, v3, 1);
  }
  return this;
}

_DWORD *WebKit::UnifiedPDFPlugin::createScrollbarsController(WebKit::UnifiedPDFPlugin *this)
{
  _DWORD *result;
  _DWORD *v3;

  result = (_DWORD *)WebKit::PDFPluginBase::page(this);
  if (result)
  {
    v3 = result;
    ++*result;
    (*(void (**)(_QWORD, _DWORD *, WebKit::UnifiedPDFPlugin *))(**(_QWORD **)(*((_QWORD *)result + 6) + 16)
                                                                         + 1080))(*(_QWORD *)(*((_QWORD *)result + 6) + 16), result, this);
    return WTF::RefCounted<WebCore::Page>::deref(v3);
  }
  return result;
}

void sub_19731CD04(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *WebKit::UnifiedPDFPlugin::scrollbarStyleChanged(unsigned __int8 *result, uint64_t a2, int a3)
{
  unsigned __int8 v3;

  if (a3)
  {
    v3 = atomic_load(result + 530);
    if ((v3 & 1) == 0)
      return (unsigned __int8 *)WebKit::UnifiedPDFPlugin::updateLayout((uint64_t)result, 0);
  }
  return result;
}

uint64_t WebKit::UnifiedPDFPlugin::requestScrollToPosition(WebKit::PDFPluginBase *a1, uint64_t a2, uint64_t a3)
{
  WebCore::Page *v6;
  WebCore::Page *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (WebCore::Page *)WebKit::PDFPluginBase::page(a1);
  if (!v6)
    return 0;
  v7 = v6;
  ++*(_DWORD *)v6;
  v8 = WebCore::Page::scrollingCoordinator(v6);
  v9 = (*(uint64_t (**)(uint64_t, WebKit::PDFPluginBase *, uint64_t, uint64_t))(*(_QWORD *)v8 + 200))(v8, a1, a2, a3);
  WTF::RefCounted<WebCore::Page>::deref(v7);
  return v9;
}

void sub_19731CDAC(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::requestStartKeyboardScrollAnimation(WebKit::UnifiedPDFPlugin *this, const KeyboardScroll *a2)
{
  WebCore::Page *v4;
  WebCore::Page *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (WebCore::Page *)WebKit::PDFPluginBase::page(this);
  if (!v4)
    return 0;
  v5 = v4;
  ++*(_DWORD *)v4;
  v6 = WebCore::Page::scrollingCoordinator(v4);
  v7 = (*(uint64_t (**)(uint64_t, WebKit::UnifiedPDFPlugin *, const KeyboardScroll *))(*(_QWORD *)v6 + 184))(v6, this, a2);
  WTF::RefCounted<WebCore::Page>::deref(v5);
  return v7;
}

void sub_19731CE30(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::requestStopKeyboardScrollAnimation(WebKit::UnifiedPDFPlugin *this, uint64_t a2)
{
  WebCore::Page *v4;
  WebCore::Page *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (WebCore::Page *)WebKit::PDFPluginBase::page(this);
  if (!v4)
    return 0;
  v5 = v4;
  ++*(_DWORD *)v4;
  v6 = WebCore::Page::scrollingCoordinator(v4);
  v7 = (*(uint64_t (**)(uint64_t, WebKit::UnifiedPDFPlugin *, uint64_t))(*(_QWORD *)v6 + 192))(v6, this, a2);
  WTF::RefCounted<WebCore::Page>::deref(v5);
  return v7;
}

void sub_19731CEB4(_Unwind_Exception *a1)
{
  _DWORD *v1;

  WTF::RefCounted<WebCore::Page>::deref(v1);
  _Unwind_Resume(a1);
}

_BYTE *WebKit::UnifiedPDFPlugin::visibleRow(_BYTE *this, uint64_t a2)
{
  _BYTE *v2;
  int v3;
  void *v5;
  unint64_t v6;
  void *v7;
  unint64_t v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE v12[16];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v2 = this;
  v15 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a2 + 612);
  if ((v3 & 0xFFFFFFFD) != 0 || !*(_BYTE *)(a2 + 992))
  {
    *this = 0;
    this[32] = 0;
    return this;
  }
  v5 = *(void **)(a2 + 568);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 984);
    if ((v3 & 0xFE) != 2)
      goto LABEL_15;
    if ((v6 & 1) == 0)
    {
      if (objc_msgSend(v5, "pageCount"))
      {
        v7 = *(void **)(a2 + 568);
        v8 = v7 ? objc_msgSend(v7, "pageCount") - 1 : -1;
        if (v8 > v6)
        {
          v13 = v6;
          v14 = v6 + 1;
          WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v10, (uint64_t *)&v13, 2uLL);
          goto LABEL_16;
        }
      }
LABEL_15:
      v13 = v6;
      WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v10, (uint64_t *)&v13, 1uLL);
      goto LABEL_16;
    }
    v13 = v6 - 1;
    v14 = v6;
    WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v10, (uint64_t *)&v13, 2uLL);
  }
  else
  {
    v10 = v12;
    v11 = 2;
  }
LABEL_16:
  this = v2 + 16;
  *(_QWORD *)v2 = v2 + 16;
  *((_DWORD *)v2 + 2) = 2;
  if (v10 == v12)
  {
    v9 = HIDWORD(v11);
    this = memcpy(this, v12, 8 * HIDWORD(v11));
  }
  else
  {
    *(_QWORD *)v2 = v10;
    v9 = HIDWORD(v11);
    *((_DWORD *)v2 + 2) = v11;
  }
  *((_DWORD *)v2 + 3) = v9;
  v2[32] = 1;
  return this;
}

unint64_t WebKit::UnifiedPDFPlugin::pageIndexForDocumentPoint(WebKit::UnifiedPDFPlugin *this, const WebCore::FloatPoint *a2)
{
  unint64_t v3;
  uint64_t i;
  void *v5;

  v3 = 0;
  for (i = 16; ; i += 36)
  {
    v5 = (void *)*((_QWORD *)this + 71);
    if (v5)
      v5 = (void *)objc_msgSend(v5, "pageCount");
    if (v3 >= (unint64_t)v5)
      break;
    if ((WebCore::FloatRect::contains() & 1) != 0)
      return v3;
    ++v3;
  }
  return 0;
}

void WebKit::UnifiedPDFPlugin::annotationForRootViewPoint(WebKit::UnifiedPDFPlugin *this, id *a2, const WebCore::IntPoint *a3)
{
  float v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  int v12;
  int v13;
  const void *v14;
  IntPoint v15;
  float v16;
  float v17;
  float v18;

  v15 = (IntPoint)WebCore::AffineTransform::mapPoint((WebCore::AffineTransform *)(a2 + 41), a3);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v16, &v15);
  v17 = WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>((uint64_t)a2, v16);
  v18 = v5;
  v6 = WebKit::UnifiedPDFPlugin::pageIndexForDocumentPoint((WebKit::UnifiedPDFPlugin *)a2, (const WebCore::FloatPoint *)&v17);
  if (v7)
  {
    v8 = v6;
    v9 = (char *)(a2 + 71);
    v10 = (void *)objc_msgSend(a2[71], "pageAtIndex:", v6);
    v11 = v10;
    if (v10)
      CFRetain(v10);
    WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)v9, v8, v17, v18);
    v15.m_x = v12;
    v15.m_y = v13;
    WebCore::FloatPoint::operator CGPoint();
    v14 = (const void *)objc_msgSend(v11, "annotationAtPoint:");
    *(_QWORD *)this = v14;
    if (v14)
      CFRetain(v14);
    if (v11)
      CFRelease(v11);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void sub_19731D1BC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::UnifiedPDFPlugin::pdfElementTypesForPluginPoint(id *this, const IntPoint *a2)
{
  float v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  id v7;
  void *v8;
  void *v9;
  __int16 v10;
  int v11;
  WebKit *v12;
  PDFAnnotation *v13;
  uint64_t v14;
  WebKit *v16;
  PDFAnnotation *v17;
  WebKit *v18;
  _BOOL8 IsLinkWithDestination;
  uint64_t isKindOfClass;
  uint64_t v21;
  uint64_t v22;
  int AreaOfInterestAtPoint;
  float v24;
  float v25;
  float v26;

  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v24, a2);
  v25 = WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>((uint64_t)this, v24);
  v26 = v3;
  v4 = WebKit::UnifiedPDFPlugin::pageIndexForDocumentPoint((WebKit::UnifiedPDFPlugin *)this, (const WebCore::FloatPoint *)&v25);
  if (!v5)
    return 0;
  v6 = v4;
  v7 = this[71];
  if (!v7 || v6 >= objc_msgSend(v7, "pageCount"))
    return 0;
  v8 = (void *)objc_msgSend(this[71], "pageAtIndex:", v6);
  v9 = v8;
  if (v8)
    CFRetain(v8);
  WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)(this + 71), v6, v25, v26);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    WebCore::FloatPoint::operator CGPoint();
    v10 = objc_msgSend(v9, "areaOfInterestAtPoint:");
    v11 = v10 & 6 | 1;
    if ((v10 & 8) != 0)
    {
      WebCore::FloatPoint::operator CGPoint();
      v12 = (WebKit *)objc_msgSend(v9, "annotationAtPoint:");
      if (WebKit::annotationIsLinkWithDestination(v12, v13))
        v11 = v10 & 6 | 9;
    }
    v14 = v11 | v10 & 0x1F0u;
  }
  else
  {
    WebCore::FloatPoint::operator CGPoint();
    v16 = (WebKit *)objc_msgSend(v9, "annotationAtPoint:");
    v18 = v16;
    if (v16)
    {
      IsLinkWithDestination = WebKit::annotationIsLinkWithDestination(v16, v17);
      if (IsLinkWithDestination)
        LODWORD(v14) = 13;
      else
        LODWORD(v14) = 5;
      WebKit::getPDFAnnotationPopupClass[0]((WebKit *)IsLinkWithDestination);
      isKindOfClass = objc_opt_isKindOfClass();
      if ((isKindOfClass & 1) != 0)
        LODWORD(v14) = v14 | 0x80;
      WebKit::getPDFAnnotationTextClass[0]((WebKit *)isKindOfClass);
      v21 = objc_opt_isKindOfClass();
      if ((v21 & 1) != 0)
        v14 = v14 | 0x40;
      else
        v14 = v14;
      WebKit::getPDFAnnotationTextWidgetClass[0]((WebKit *)v21);
      v22 = objc_opt_isKindOfClass();
      if ((v22 & 1) != 0)
      {
        v22 = -[WebKit isReadOnly](v18, "isReadOnly");
        if ((_DWORD)v22)
          v14 = v14;
        else
          v14 = v14 | 0x20;
      }
      WebKit::getPDFAnnotationButtonWidgetClass[0]((WebKit *)v22);
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (-[WebKit isReadOnly](v18, "isReadOnly"))
          v14 = v14;
        else
          v14 = v14 | 0x10;
      }
    }
    else
    {
      v14 = 1;
    }
    objc_msgSend(this[37], "documentRef");
    if (CGPDFDocumentIsTaggedPDF() && objc_msgSend(v9, "pageLayout"))
    {
      WebCore::FloatPoint::operator CGPoint();
      AreaOfInterestAtPoint = CGPDFPageLayoutGetAreaOfInterestAtPoint();
      v14 = (AreaOfInterestAtPoint << 7) & 0x100 | (2 * (AreaOfInterestAtPoint & 1)) | v14;
    }
  }
  if (v9)
    CFRelease(v9);
  return v14;
}

void sub_19731D414(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

BOOL WebKit::annotationIsLinkWithDestination(WebKit *this, PDFAnnotation *a2)
{
  WebKit::getPDFAnnotationLinkClass[0](this);
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  if (-[WebKit URL](this, "URL"))
    return 1;
  return -[WebKit destination](this, "destination") != 0;
}

uint64_t WebKit::UnifiedPDFPlugin::handleMouseEvent(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  WebKit *v22;
  CGFloat v23;
  uint64_t isKindOfClass;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  PDFAnnotation *v29;
  uint64_t v31;
  void *v32;
  WebKit *v33;
  const void *v34;
  PDFAnnotation *v35;
  WTF::StringImpl *v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  void *v40;
  WebKit *v41;
  WebKit *v42;
  double v43;
  CGFloat x;
  unsigned __int8 started;
  unsigned __int8 v46;
  CGFloat v47;
  PDFDestination *v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  int v51;
  char v52;
  int v53;
  const void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  CGFloat v59;
  CGFloat v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  void *v64;
  double v65;
  double v66;
  double v67;
  double v68;
  const void *v69;
  const void *v70;
  double v71;
  double v72;
  void *v73;
  void *v74;
  unint64_t v75;
  _BYTE v76[40];
  float v77;
  IntPoint v78;
  uint64_t v79;
  void *v80;
  CGPoint cf[2];

  v4 = *(unsigned __int8 *)(a1 + 496);
  v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 400) = v5;
  v7 = *((_OWORD *)a2 + 4);
  v6 = *((_OWORD *)a2 + 5);
  v8 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 416) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 432) = v8;
  *(_OWORD *)(a1 + 448) = v7;
  *(_OWORD *)(a1 + 464) = v6;
  if (v4)
  {
    WTF::String::operator=((WTF::StringImpl **)(a1 + 480), (WTF::StringImpl *)(a2 + 96));
    *(_BYTE *)(a1 + 488) = a2[104];
  }
  else
  {
    v9 = (_DWORD *)*((_QWORD *)a2 + 12);
    if (v9)
      *v9 += 2;
    *(_QWORD *)(a1 + 480) = v9;
    *(_BYTE *)(a1 + 488) = a2[104];
    *(_BYTE *)(a1 + 496) = 1;
  }
  if (!*(_QWORD *)(a1 + 296))
    return 0;
  v10 = *a2;
  if (*(_BYTE *)(a1 + 496))
    v11 = WebCore::AffineTransform::mapPoint((WebCore::AffineTransform *)(a1 + 328), (const WebCore::IntPoint *)(a1 + 420));
  else
    v11 = 0;
  *(_QWORD *)&cf[0].x = v11;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v77, (const IntPoint *)cf);
  v13 = WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>(a1, v77);
  v15 = v14;
  WebKit::UnifiedPDFPlugin::visibleRow(v76, a1);
  v16 = WebKit::PDFDocumentLayout::nearestPageIndexForDocumentPoint(a1 + 568, (uint64_t)v76, v13, v15);
  std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v76, v17);
  if (!WebKit::UnifiedPDFPlugin::shouldDisplayPage((WebKit::UnifiedPDFPlugin *)a1, v16))
  {
    WebKit::PDFPluginBase::notifyCursorChanged(a1);
    goto LABEL_26;
  }
  WebKit::PDFDocumentLayout::documentToPDFPage(a1 + 568, v16, v13, v15);
  v75 = __PAIR64__(v19, v18);
  v20 = a2[32];
  v21 = *a2;
  if (v21 == 2)
  {
    WebCore::ScrollableArea::mouseMovedInContentArea((WebCore::ScrollableArea *)a1);
    if (v20)
    {
      if (v20 != 254)
        goto LABEL_26;
      if (*(_BYTE *)(a1 + 496))
        v31 = WebCore::AffineTransform::mapPoint((WebCore::AffineTransform *)(a1 + 328), (const WebCore::IntPoint *)(a1 + 420));
      else
        v31 = 0;
      *(_QWORD *)&cf[0].x = v31;
      WebKit::UnifiedPDFPlugin::pdfElementTypesForPluginPoint((id *)a1, (const IntPoint *)cf);
      WebKit::PDFPluginBase::notifyCursorChanged(a1);
      WebKit::UnifiedPDFPlugin::annotationForRootViewPoint((WebKit::UnifiedPDFPlugin *)cf, (id *)a1, (const WebCore::IntPoint *)(a2 + 36));
      v43 = *(double *)(a1 + 768);
      x = cf[0].x;
      if (v43 == 0.0)
        goto LABEL_52;
      if (*(_QWORD *)&cf[0].x == *(_QWORD *)&v43 && *(_BYTE *)(a1 + 776))
      {
        cf[0].x = 0.0;
        x = v43;
        goto LABEL_65;
      }
      WebKit::UnifiedPDFPlugin::finishTrackingAnnotation(a1, *(void **)&cf[0].x, 2, -2, 4);
      if (!*(_QWORD *)(a1 + 768))
      {
LABEL_52:
        if (x == 0.0)
          goto LABEL_79;
        WebKit::getPDFAnnotationTextWidgetClass[0](v42);
        if ((objc_opt_isKindOfClass() & 1) == 0
          || !WebKit::PDFPluginBase::isFullFramePlugin((WebKit::PDFPluginBase *)a1))
        {
          cf[0].x = 0.0;
LABEL_65:
          v47 = x;
LABEL_78:
          CFRelease(*(CFTypeRef *)&v47);
          goto LABEL_79;
        }
        started = WebKit::AnnotationTrackingState::startAnnotationTracking(a1 + 768, (uint64_t *)cf, 2, -2);
        WebKit::UnifiedPDFPlugin::setNeedsRepaintForAnnotation(a1, *(void **)(a1 + 768), started);
        x = cf[0].x;
      }
      cf[0].x = 0.0;
      if (x == 0.0)
        goto LABEL_79;
      goto LABEL_65;
    }
    v38 = *(double *)(a1 + 768);
    if (v38 == 0.0)
    {
      if (*(_BYTE *)(a1 + 784))
      {
        v12 = 1;
        WebKit::UnifiedPDFPlugin::continueTrackingSelection(a1, v16, (float *)&v75, 1);
        goto LABEL_27;
      }
      goto LABEL_79;
    }
    CFRetain(*(CFTypeRef *)(a1 + 768));
    WebKit::UnifiedPDFPlugin::annotationForRootViewPoint((WebKit::UnifiedPDFPlugin *)cf, (id *)a1, (const WebCore::IntPoint *)(a2 + 36));
    v39 = cf[0].x;
    v40 = *(void **)(a1 + 768);
    if (v40)
      CFRetain(*(CFTypeRef *)(a1 + 768));
    if (objc_msgSend(v40, "isHighlighted"))
    {
      if (v40 != *(void **)&v39)
      {
        objc_msgSend(v40, "setHighlighted:", 0);
        v41 = (WebKit *)v40;
LABEL_67:
        v46 = WebKit::UnifiedPDFPlugin::repaintRequirementsForAnnotation(v41);
        goto LABEL_68;
      }
    }
    else if (v40 == *(void **)&v39)
    {
      objc_msgSend(*(id *)&v39, "setHighlighted:", 1);
      v41 = *(WebKit **)&v39;
      goto LABEL_67;
    }
    v46 = 0;
LABEL_68:
    WebKit::UnifiedPDFPlugin::setNeedsRepaintForAnnotation(a1, v40, v46);
    if (v40)
      CFRelease(v40);
    if (v39 != 0.0)
      CFRelease(*(CFTypeRef *)&v39);
    v47 = v38;
    goto LABEL_78;
  }
  if (v21 == 1)
  {
    if (!a2[32])
    {
      v32 = *(void **)(a1 + 768);
      if (v32)
      {
        v33 = (WebKit *)CFRetain(*(CFTypeRef *)(a1 + 768));
        WebKit::getPDFAnnotationTextWidgetClass[0](v33);
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          WebKit::UnifiedPDFPlugin::annotationForRootViewPoint((WebKit::UnifiedPDFPlugin *)&v80, (id *)a1, (const WebCore::IntPoint *)(a2 + 36));
          v34 = v80;
          WebKit::UnifiedPDFPlugin::finishTrackingAnnotation(a1, v80, 1, 0, 0);
          if (WebKit::annotationIsLinkWithDestination((WebKit *)v32, v35))
          {
            if (objc_msgSend(v32, "URL"))
            {
              MEMORY[0x19AEABB18](cf);
              WebKit::PDFPluginBase::navigateToURL((WebKit::PDFPluginBase *)a1, (const WTF::URL *)cf);
              v37 = cf[0].x;
              cf[0].x = 0.0;
              if (v37 != 0.0)
              {
                if (**(_DWORD **)&v37 == 2)
                  WTF::StringImpl::destroy(*(WTF::StringImpl **)&v37, v36);
                else
                  **(_DWORD **)&v37 -= 2;
              }
            }
            else
            {
              v48 = (PDFDestination *)objc_msgSend(v32, "destination");
              if (v48)
                WebKit::UnifiedPDFPlugin::revealPDFDestination((id *)a1, v48);
            }
          }
          if (v34)
            CFRelease(v34);
        }
        CFRelease(v32);
      }
    }
    goto LABEL_26;
  }
  if (*a2 || a2[32])
  {
LABEL_26:
    v12 = 0;
    goto LABEL_27;
  }
  WebKit::UnifiedPDFPlugin::annotationForRootViewPoint((WebKit::UnifiedPDFPlugin *)cf, (id *)a1, (const WebCore::IntPoint *)(a2 + 36));
  v23 = cf[0].x;
  if (!*(_QWORD *)&cf[0].x)
  {
LABEL_85:
    v50 = a2[1];
    v51 = *((_DWORD *)a2 + 18);
    *(_BYTE *)(a1 + 784) = 1;
    if (v51 == 2)
      v52 = 1;
    else
      v52 = 2 * (v51 == 3);
    *(_BYTE *)(a1 + 788) = v52;
    *(_QWORD *)(a1 + 792) = v16;
    *(_QWORD *)(a1 + 800) = v75;
    *(_QWORD *)(a1 + 824) = 0;
    *(_QWORD *)(a1 + 816) = 0;
    *(_BYTE *)(a1 + 786) = (v50 & 4) != 0;
    v53 = v50 & 1;
    *(_BYTE *)(a1 + 785) = v53;
    v54 = *(const void **)(a1 + 808);
    *(_QWORD *)(a1 + 808) = 0;
    if (v54)
    {
      CFRelease(v54);
      v53 = *(unsigned __int8 *)(a1 + 785);
    }
    if (v53)
    {
      v55 = *(void **)(a1 + 832);
      if (v55)
      {
        v56 = objc_msgSend((id)objc_msgSend(v55, "pages"), "firstObject");
        v57 = objc_msgSend(*(id *)(a1 + 296), "indexForPage:", v56);
        v58 = *(_QWORD *)(a1 + 792);
        *(_QWORD *)(a1 + 792) = v57;
        objc_msgSend(*(id *)(a1 + 832), "firstCharCenter");
        cf[0].x = v59;
        cf[0].y = v60;
        WebCore::IntPoint::IntPoint((WebCore::IntPoint *)&v78, cf);
        v61 = *(_QWORD *)(a1 + 800);
        WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v80, &v78);
        *(_QWORD *)(a1 + 800) = v80;
        v79 = v61;
        v62 = *(_QWORD *)(a1 + 832);
        *(_QWORD *)(a1 + 832) = 0;
        v63 = *(const void **)(a1 + 808);
        *(_QWORD *)(a1 + 808) = v62;
        if (v63)
          CFRelease(v63);
        v64 = *(void **)(a1 + 296);
        WebCore::FloatPoint::operator CGPoint();
        v66 = v65;
        v68 = v67;
        v69 = (const void *)objc_msgSend(*(id *)(a1 + 568), "pageAtIndex:", v58);
        v70 = v69;
        if (v69)
          CFRetain(v69);
        WebCore::FloatPoint::operator CGPoint();
        v73 = (void *)objc_msgSend(v64, "selectionFromPage:atPoint:toPage:atPoint:", v56, v70, v66, v68, v71, v72);
        v74 = v73;
        *(_QWORD *)&cf[0].x = v73;
        if (v73)
          CFRetain(v73);
        if (v70)
          CFRelease(v70);
        objc_msgSend(v74, "addSelection:", *(_QWORD *)(a1 + 808));
        WebKit::UnifiedPDFPlugin::setCurrentSelection((WebKit::PDFPluginBase *)a1, (uint64_t *)cf);
        if (*(_QWORD *)&cf[0].x)
          CFRelease(*(CFTypeRef *)&cf[0].x);
      }
    }
    WebKit::UnifiedPDFPlugin::continueTrackingSelection(a1, v16, (float *)&v75, 0);
    v12 = 0;
    goto LABEL_27;
  }
  WebKit::getPDFAnnotationButtonWidgetClass[0](v22);
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0
    || (WebKit::getPDFAnnotationTextWidgetClass[0]((WebKit *)isKindOfClass),
        v25 = objc_opt_isKindOfClass(),
        (v25 & 1) != 0)
    || (WebKit::getPDFAnnotationChoiceWidgetClass[0]((WebKit *)v25), v26 = objc_opt_isKindOfClass(), (v26 & 1) != 0))
  {
    v26 = objc_msgSend(*(id *)&v23, "isReadOnly");
    if ((v26 & 1) != 0)
      goto LABEL_77;
  }
  WebKit::getPDFAnnotationTextWidgetClass[0]((WebKit *)v26);
  v27 = objc_opt_isKindOfClass();
  if ((v27 & 1) != 0)
    goto LABEL_77;
  WebKit::getPDFAnnotationChoiceWidgetClass[0]((WebKit *)v27);
  v28 = objc_opt_isKindOfClass();
  if ((v28 & 1) != 0)
    goto LABEL_77;
  WebKit::getPDFAnnotationButtonWidgetClass[0]((WebKit *)v28);
  if ((objc_opt_isKindOfClass() & 1) == 0 && !WebKit::annotationIsLinkWithDestination(*(WebKit **)&v23, v29))
  {
    CFRelease(*(CFTypeRef *)&v23);
    goto LABEL_85;
  }
  v49 = WebKit::AnnotationTrackingState::startAnnotationTracking(a1 + 768, (uint64_t *)cf, 0, 0);
  WebKit::UnifiedPDFPlugin::setNeedsRepaintForAnnotation(a1, *(void **)(a1 + 768), v49);
  v23 = cf[0].x;
  if (*(_QWORD *)&cf[0].x)
  {
LABEL_77:
    v47 = v23;
    goto LABEL_78;
  }
LABEL_79:
  v12 = 1;
LABEL_27:
  if (v10 == 1)
  {
    WebKit::UnifiedPDFPlugin::stopTrackingSelection((WebKit::UnifiedPDFPlugin *)a1);
    *(_BYTE *)(a1 + 840) = 0;
  }
  return v12;
}

void sub_19731DBF0(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20)
{
  WebKit::UnifiedPDFPlugin *v20;
  const void *v21;
  const void *v22;
  int v23;

  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (v21)
    CFRelease(v21);
  CFRelease(v22);
  if (v23 == 1)
  {
    WebKit::UnifiedPDFPlugin::stopTrackingSelection(v20);
    *((_BYTE *)v20 + 840) = 0;
  }
  _Unwind_Resume(a1);
}

void WebKit::UnifiedPDFPlugin::finishTrackingAnnotation(uint64_t a1, void *a2, int a3, int a4, char a5)
{
  void *v10;
  void *v11;
  char v12;
  WebKit *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;

  v10 = *(void **)(a1 + 768);
  if (v10)
  {
    CFRetain(*(CFTypeRef *)(a1 + 768));
    v11 = *(void **)(a1 + 768);
  }
  else
  {
    v11 = 0;
  }
  v12 = 0;
  if (!a4 && a3 == 1 && v11 == a2)
  {
    v13 = (WebKit *)objc_msgSend(a2, "isHighlighted");
    if ((_DWORD)v13)
    {
      objc_msgSend(*(id *)(a1 + 768), "setHighlighted:", 0);
      v13 = (WebKit *)WebKit::UnifiedPDFPlugin::repaintRequirementsForAnnotation(*(WebKit **)(a1 + 768));
      v12 = (char)v13;
    }
    else
    {
      v12 = 0;
    }
    WebKit::getPDFAnnotationButtonWidgetClass[0](v13);
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (objc_msgSend(*(id *)(a1 + 768), "widgetControlType"))
      {
        v14 = objc_msgSend(*(id *)(a1 + 768), "buttonWidgetState");
        if (!v14)
        {
          v15 = 1;
          goto LABEL_17;
        }
        if (v14 == 1 && objc_msgSend(*(id *)(a1 + 768), "allowsToggleToOff"))
        {
          v15 = 0;
LABEL_17:
          objc_msgSend(*(id *)(a1 + 768), "setButtonWidgetState:", v15);
          v12 |= 1u;
        }
      }
    }
  }
  v16 = *(const void **)(a1 + 768);
  *(_QWORD *)(a1 + 768) = 0;
  if (v16)
    CFRelease(v16);
  *(_BYTE *)(a1 + 776) = 0;
  WebKit::UnifiedPDFPlugin::setNeedsRepaintForAnnotation(a1, v10, v12 | a5);
  if (v10)
    CFRelease(v10);
}

void sub_19731DE50(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::UnifiedPDFPlugin::continueTrackingSelection(uint64_t a1, uint64_t a2, float *a3, int a4)
{
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;
  void *v14;
  void *v15;
  const void *v16;
  CFTypeRef v17;
  void *v18;
  const void *v19;
  const void *v20;
  char v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  uint64_t v30;
  void *v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  CFTypeRef cf;
  _QWORD v41[2];
  char v42;
  char v43;

  v43 = a4;
  if (a4)
  {
    v7 = *(unsigned __int8 *)(a1 + 787);
    *(_BYTE *)(a1 + 787) = 1;
    if (!v7)
      WebKit::PDFPluginBase::notifyCursorChanged(a1);
  }
  v41[0] = &v43;
  v41[1] = a1;
  v42 = 1;
  if (!*(_BYTE *)(a1 + 786))
  {
    v18 = (void *)objc_msgSend(*(id *)(a1 + 568), "pageAtIndex:", *(_QWORD *)(a1 + 792));
    v15 = v18;
    if (v18)
      CFRetain(v18);
    v19 = (const void *)objc_msgSend(*(id *)(a1 + 568), "pageAtIndex:", a2);
    v20 = v19;
    if (v19)
      CFRetain(v19);
    cf = 0;
    v21 = objc_opt_respondsToSelector();
    v22 = *(void **)(a1 + 296);
    if ((v21 & 1) != 0)
    {
      WebCore::FloatPoint::operator CGPoint();
      v24 = v23;
      v26 = v25;
      WebCore::FloatPoint::operator CGPoint();
      v29 = *(unsigned __int8 *)(a1 + 788);
      if (v29 == 2)
        v30 = 2;
      else
        v30 = v29 == 1;
      v31 = (void *)objc_msgSend(v22, "selectionFromPage:atPoint:toPage:atPoint:withGranularity:", v15, v20, v30, v24, v26, v27, v28);
      v32 = v31;
      if (!v31)
        goto LABEL_30;
    }
    else
    {
      WebCore::FloatPoint::operator CGPoint();
      v34 = v33;
      v36 = v35;
      WebCore::FloatPoint::operator CGPoint();
      v31 = (void *)objc_msgSend(v22, "selectionFromPage:atPoint:toPage:atPoint:", v15, v20, v34, v36, v37, v38);
      v32 = v31;
      if (!v31)
        goto LABEL_30;
    }
    CFRetain(v31);
LABEL_30:
    cf = v32;
    if (!*(_BYTE *)(a1 + 788) && *(_BYTE *)(a1 + 785))
      objc_msgSend(v32, "addSelection:", *(_QWORD *)(a1 + 808));
    WebKit::UnifiedPDFPlugin::setCurrentSelection((WebKit::PDFPluginBase *)a1, (uint64_t *)&cf);
    if (cf)
      CFRelease(cf);
    if (!v20)
      goto LABEL_38;
    v17 = v20;
    goto LABEL_37;
  }
  if (*(_QWORD *)(a1 + 792) != a2)
    return WTF::ScopeExit<WebKit::UnifiedPDFPlugin::continueTrackingSelection(unsigned long,WebCore::FloatPoint const&,WebKit::UnifiedPDFPlugin::IsDraggingSelection)::$_0>::~ScopeExit((uint64_t)v41);
  v8 = *(float *)(a1 + 800);
  v9 = *a3;
  v10 = a3[1];
  if (v8 >= *a3)
    v11 = *a3;
  else
    v11 = *(float *)(a1 + 800);
  v12 = *(float *)(a1 + 804);
  if (v12 >= v10)
    v13 = *((_DWORD *)a3 + 1);
  else
    v13 = *(_DWORD *)(a1 + 804);
  *(float *)(a1 + 816) = v11;
  *(_DWORD *)(a1 + 820) = v13;
  *(float *)(a1 + 824) = vabds_f32(v9, v8);
  *(float *)(a1 + 828) = vabds_f32(v10, v12);
  v14 = (void *)objc_msgSend(*(id *)(a1 + 568), "pageAtIndex:", a2);
  v15 = v14;
  if (v14)
    CFRetain(v14);
  WebCore::FloatRect::operator CGRect();
  v16 = (const void *)objc_msgSend(v15, "selectionForRect:");
  cf = v16;
  if (v16)
    CFRetain(v16);
  WebKit::UnifiedPDFPlugin::setCurrentSelection((WebKit::PDFPluginBase *)a1, (uint64_t *)&cf);
  v17 = cf;
  if (cf)
LABEL_37:
    CFRelease(v17);
LABEL_38:
  if (v15)
    CFRelease(v15);
  return WTF::ScopeExit<WebKit::UnifiedPDFPlugin::continueTrackingSelection(unsigned long,WebCore::FloatPoint const&,WebKit::UnifiedPDFPlugin::IsDraggingSelection)::$_0>::~ScopeExit((uint64_t)v41);
}

void sub_19731E0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11)
{
  const void *v11;

  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  WTF::ScopeExit<WebKit::UnifiedPDFPlugin::continueTrackingSelection(unsigned long,WebCore::FloatPoint const&,WebKit::UnifiedPDFPlugin::IsDraggingSelection)::$_0>::~ScopeExit((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::handleMouseEnterEvent()
{
  return 0;
}

uint64_t WebKit::UnifiedPDFPlugin::handleMouseLeaveEvent()
{
  return 0;
}

uint64_t WebKit::UnifiedPDFPlugin::handleContextMenuEvent()
{
  return 0;
}

uint64_t WebKit::UnifiedPDFPlugin::handleKeyboardEvent()
{
  return 0;
}

uint64_t WebKit::UnifiedPDFPlugin::revealPDFDestination(id *this, PDFDestination *a2)
{
  double PDFKit_kPDFDestinationUnspecifiedValue;
  unint64_t v5;
  double v6;
  double v7;
  float v8;
  float v9;
  float v11[2];
  CGPoint v12;

  PDFKit_kPDFDestinationUnspecifiedValue = WebKit::get_PDFKit_kPDFDestinationUnspecifiedValue((WebKit *)this);
  v5 = objc_msgSend(this[37], "indexForPage:", -[PDFDestination page](a2, "page"));
  -[PDFDestination point](a2, "point");
  v12.x = v7;
  v12.y = v6;
  if (v7 == PDFKit_kPDFDestinationUnspecifiedValue)
    v12.x = 0.0;
  if (v6 == PDFKit_kPDFDestinationUnspecifiedValue)
    v12.y = (double)WebKit::UnifiedPDFPlugin::heightForPageAtIndex(this, v5);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v11, &v12);
  WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatPoint>((WebKit::UnifiedPDFPlugin *)this, v5, 1, v11[0], v11[1]);
  return WebKit::UnifiedPDFPlugin::scrollToPointInContentsSpace((uint64_t)this, v8, v9);
}

uint64_t WebKit::UnifiedPDFPlugin::repaintRequirementsForAnnotation(WebKit *a1)
{
  uint64_t isKindOfClass;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  WebKit::getPDFAnnotationButtonWidgetClass[0](a1);
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
    return 1;
  WebKit::getPDFAnnotationPopupClass[0]((WebKit *)isKindOfClass);
  v2 = objc_opt_isKindOfClass();
  if ((v2 & 1) != 0)
    return 1;
  WebKit::getPDFAnnotationChoiceWidgetClass[0]((WebKit *)v2);
  v3 = objc_opt_isKindOfClass();
  if ((v3 & 1) != 0)
    return 1;
  WebKit::getPDFAnnotationTextClass[0]((WebKit *)v3);
  v4 = objc_opt_isKindOfClass();
  if ((v4 & 1) != 0)
    return 1;
  WebKit::getPDFAnnotationTextWidgetClass[0]((WebKit *)v4);
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 4;
  else
    return 0;
}

uint64_t WebKit::AnnotationTrackingState::startAnnotationTracking(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v7;
  id v8;
  uint64_t result;

  v7 = *a2;
  *a2 = 0;
  v8 = *(id *)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    CFRelease(v8);
  WebKit::getPDFAnnotationButtonWidgetClass[0]((WebKit *)v8);
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(*(id *)a1, "setHighlighted:", 1);
    result = WebKit::UnifiedPDFPlugin::repaintRequirementsForAnnotation(*(WebKit **)a1);
  }
  else
  {
    result = 0;
  }
  if (a3 == 2 && a4 == -2)
  {
    if (*(_BYTE *)(a1 + 8))
      result = result;
    else
      result = result | 4;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return result;
}

uint64_t WebKit::UnifiedPDFPlugin::handleEditingCommand(WebKit::UnifiedPDFPlugin *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::LocalFrame *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Node *v11;
  WebCore::Editor *v12;
  const void *v14;
  void *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::LocalFrame *v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  _DWORD *v23;
  WebCore::Editor *v24;
  int v25;
  CFTypeRef cf[2];
  WebCore::Node *v27;
  uint64_t v28;
  WebCore::Editor *v29;

  if ((MEMORY[0x19AEABBCC](*(_QWORD *)a2, "ScrollPageBackward", 18) & 1) != 0
    || MEMORY[0x19AEABBCC](*(_QWORD *)a2, "ScrollPageForward", 17))
  {
    v5 = *((_QWORD *)this + 13);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(WebCore::LocalFrame **)(v7 + 8);
          if (v8)
          {
            if (!*((_BYTE *)v8 + 144))
            {
              WebCore::LocalFrame::checkedEditor(v8);
              WebCore::Editor::command(v29, a2);
              v9 = WebCore::Editor::Command::execute();
              v10 = v28;
              v28 = 0;
              if (v10)
                WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v10 + 8));
              v11 = v27;
              v27 = 0;
              if (v11)
              {
                if (*((_DWORD *)v11 + 6) == 2)
                {
                  if ((*((_WORD *)v11 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v11);
                }
                else
                {
                  *((_DWORD *)v11 + 6) -= 2;
                }
              }
              v12 = v29;
              v29 = 0;
              if (v12)
              {
                if (*(_DWORD *)v12)
                {
                  --*(_DWORD *)v12;
                  return v9;
                }
                __break(0xC471u);
LABEL_52:
                JUMPOUT(0x19731E610);
              }
              return v9;
            }
          }
        }
      }
    }
    return 0;
  }
  if ((MEMORY[0x19AEABBCC](*(_QWORD *)a2, "copy", 4) & 1) != 0)
    return 0;
  if (MEMORY[0x19AEABBCC](*(_QWORD *)a2, "selectAll", 9))
  {
    v14 = (const void *)objc_msgSend(*((id *)this + 37), "selectionForEntireDocument");
    cf[0] = v14;
    if (v14)
      CFRetain(v14);
    WebKit::UnifiedPDFPlugin::setCurrentSelection(this, (uint64_t *)cf);
    if (cf[0])
      CFRelease(cf[0]);
    return 1;
  }
  if (!MEMORY[0x19AEABBCC](*(_QWORD *)a2, "takeFindStringFromSelection", 27))
    return 0;
  v15 = (void *)*((_QWORD *)this + 104);
  if (!v15)
    return 0;
  MEMORY[0x19AEABCC8](cf, objc_msgSend(v15, "string"));
  if (!cf[0])
    return 0;
  if (!*((_DWORD *)cf[0] + 1))
    goto LABEL_34;
  v17 = *((_QWORD *)this + 13);
  if (!v17)
    goto LABEL_34;
  v18 = *(_QWORD *)(v17 + 8);
  if (!v18)
    goto LABEL_34;
  v19 = *(_QWORD *)(v18 + 24);
  if (!v19)
    goto LABEL_34;
  v20 = *(WebCore::LocalFrame **)(v19 + 8);
  if (!v20 || *((_BYTE *)v20 + 144))
    goto LABEL_34;
  WebCore::LocalFrame::checkedEditor(v20);
  v22 = (_DWORD *)WebCore::Editor::client(v29);
  v23 = v22;
  if (v22)
    ++v22[4];
  v24 = v29;
  v29 = 0;
  if (v24)
  {
    if (!*(_DWORD *)v24)
    {
      __break(0xC471u);
      JUMPOUT(0x19731E630);
    }
    --*(_DWORD *)v24;
  }
  if (v22)
  {
    (*(void (**)(_DWORD *, CFTypeRef *))(*(_QWORD *)v22 + 568))(v22, cf);
    v25 = v23[4];
    if (!v25)
    {
      __break(0xC471u);
      goto LABEL_52;
    }
    v23[4] = v25 - 1;
    v9 = 1;
  }
  else
  {
LABEL_34:
    v9 = 0;
  }
  v21 = (WTF::StringImpl *)cf[0];
  cf[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v16);
    else
      *(_DWORD *)v21 -= 2;
  }
  return v9;
}

void sub_19731E654(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *cf, uint64_t a11, WebCore::Node *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  int v15;

  v15 = *(_DWORD *)(v14 + 16);
  if (v15)
  {
    *(_DWORD *)(v14 + 16) = v15 - 1;
    if (cf)
    {
      if (*(_DWORD *)cf == 2)
        WTF::StringImpl::destroy(cf, a2);
      else
        *(_DWORD *)cf -= 2;
    }
    _Unwind_Resume(exception_object);
  }
  __break(0xC471u);
  JUMPOUT(0x19731E688);
}

uint64_t WebKit::UnifiedPDFPlugin::isEditingCommandEnabled(WebKit::UnifiedPDFPlugin *this, const WTF::String *a2)
{
  uint64_t result;

  if ((MEMORY[0x19AEABBCC](*(_QWORD *)a2, "ScrollPageBackward", 18) & 1) != 0
    || (MEMORY[0x19AEABBCC](*(_QWORD *)a2, "ScrollPageForward", 17) & 1) != 0
    || (MEMORY[0x19AEABBCC](*(_QWORD *)a2, "selectAll", 9) & 1) != 0)
  {
    return 1;
  }
  if ((MEMORY[0x19AEABBCC](*(_QWORD *)a2, "copy", 4) & 1) != 0)
    return *((_QWORD *)this + 104) != 0;
  result = MEMORY[0x19AEABBCC](*(_QWORD *)a2, "takeFindStringFromSelection", 27);
  if ((_DWORD)result)
    return *((_QWORD *)this + 104) != 0;
  return result;
}

void WebKit::UnifiedPDFPlugin::setCurrentSelection(WebKit::PDFPluginBase *a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  const void *v5;

  v3 = (void *)*((_QWORD *)a1 + 104);
  *((_QWORD *)a1 + 104) = 0;
  v4 = *a2;
  *a2 = 0;
  v5 = (const void *)*((_QWORD *)a1 + 104);
  *((_QWORD *)a1 + 104) = v4;
  if (v5)
    CFRelease(v5);
  WebKit::UnifiedPDFPlugin::repaintOnSelectionChange((uint64_t)a1, 0, v3);
  WebKit::PDFPluginBase::notifySelectionChanged(a1);
  if (v3)
    CFRelease(v3);
}

void sub_19731E8B4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::ScopeExit<WebKit::UnifiedPDFPlugin::continueTrackingSelection(unsigned long,WebCore::FloatPoint const&,WebKit::UnifiedPDFPlugin::IsDraggingSelection)::$_0>::~ScopeExit(uint64_t a1)
{
  uint64_t v2;
  int v3;

  if (*(_BYTE *)(a1 + 16))
  {
    if (**(_BYTE **)a1)
    {
      v2 = *(_QWORD *)(a1 + 8);
      v3 = *(unsigned __int8 *)(v2 + 840);
      *(_BYTE *)(v2 + 840) = 1;
      if (!v3)
        WebCore::TimerBase::start();
    }
  }
  return a1;
}

void WebKit::UnifiedPDFPlugin::stopTrackingSelection(WebKit::UnifiedPDFPlugin *this)
{
  const void *v2;
  int v3;
  uint64_t v4;

  v2 = (const void *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v2)
    CFRelease(v2);
  *((_BYTE *)this + 784) = 0;
  v3 = *((unsigned __int8 *)this + 787);
  *((_BYTE *)this + 787) = 0;
  if (v3)
  {
    if (*((_BYTE *)this + 496))
    {
      v4 = WebCore::AffineTransform::mapPoint((WebKit::UnifiedPDFPlugin *)((char *)this + 328), (WebKit::UnifiedPDFPlugin *)((char *)this + 420));
      WebKit::UnifiedPDFPlugin::pdfElementTypesForPluginPoint((id *)this, (const IntPoint *)&v4);
      WebKit::PDFPluginBase::notifyCursorChanged((uint64_t)this);
    }
  }
}

uint64_t WebKit::UnifiedPDFPlugin::pageCoverageForSelection(uint64_t result, uint64_t a2, void *a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  char v15;
  char v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  id obj;
  void *v26;
  CGRect v28;
  __int128 v29;
  uint64_t v30;
  const void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v4 = result;
  v37 = *MEMORY[0x1E0C80C00];
  if (a3 && (result = objc_msgSend(a3, "isEmpty"), !(_DWORD)result))
  {
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v26 = a3;
    obj = (id)objc_msgSend(a3, "pages");
    result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    v7 = result;
    if (result)
    {
      v8 = 0;
      v9 = 0;
      v10 = *(_QWORD *)v33;
      v11 = (id *)(a2 + 568);
LABEL_7:
      v12 = 0;
      while (1)
      {
        if (*(_QWORD *)v33 != v10)
          objc_enumerationMutation(obj);
        v13 = *(const void **)(*((_QWORD *)&v32 + 1) + 8 * v12);
        v31 = v13;
        if (v13)
          CFRetain(v13);
        v14 = WebKit::PDFDocumentLayout::indexForPage(v11, &v31);
        v16 = v15;
        v31 = 0;
        if (v13)
          CFRelease(v13);
        if (v16)
        {
          *(_QWORD *)&v29 = v14;
          objc_msgSend(v26, "boundsForPage:", v13);
          v28.origin.x = v17;
          v28.origin.y = v18;
          v28.size.width = v19;
          v28.size.height = v20;
          result = WebCore::FloatRect::FloatRect((WebCore::FloatRect *)((char *)&v29 + 8), &v28);
          if (v9 == *(_DWORD *)(v4 + 8))
          {
            result = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v9 + 1, (unint64_t)&v29);
            v9 = *(_DWORD *)(v4 + 12);
            v8 = *(_QWORD *)v4;
            v21 = *(_QWORD *)v4 + 24 * v9;
            v22 = *(_QWORD *)(result + 16);
            *(_OWORD *)v21 = *(_OWORD *)result;
            *(_QWORD *)(v21 + 16) = v22;
          }
          else
          {
            v23 = v29;
            v24 = v8 + 24 * v9;
            *(_QWORD *)(v24 + 16) = v30;
            *(_OWORD *)v24 = v23;
          }
          *(_DWORD *)(v4 + 12) = ++v9;
          if ((a4 & 1) != 0)
            break;
        }
        if (v7 == ++v12)
        {
          result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
          v7 = result;
          if (result)
            goto LABEL_7;
          return result;
        }
      }
    }
  }
  else
  {
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
  }
  return result;
}

void sub_19731EBCC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v3;

  if (v3)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::UnifiedPDFPlugin::repaintOnSelectionChange(WebKit::UnifiedPDFPlugin::ActiveStateChangeReason,PDFSelection *)::$_0::operator()(uint64_t a1, void *a2)
{
  uint64_t result;
  void *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  WTF *v13;
  unsigned int v14;

  result = WebKit::UnifiedPDFPlugin::pageCoverageForSelection((uint64_t)&v13, a1, a2, 0);
  v5 = v13;
  if (v14)
  {
    v6 = 0;
    v7 = 24 * v14;
    do
    {
      WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>(a1, 0, 1, *(_QWORD *)((char *)v5 + v6), 1, *(float *)((char *)v5 + v6 + 8), *(float *)((char *)v5 + v6 + 12), *(float *)((char *)v5 + v6 + 16), *(float *)((char *)v5 + v6 + 20));
      *(_QWORD *)&v12 = __PAIR64__(v9, v8);
      *((_QWORD *)&v12 + 1) = __PAIR64__(v11, v10);
      result = WebKit::UnifiedPDFPlugin::setNeedsRepaintInDocumentRect(a1, 2u, &v12);
      v6 += 24;
    }
    while (v7 != v6);
  }
  if (v5)
    return WTF::fastFree(v5, v4);
  return result;
}

void sub_19731ECD8(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;

  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

void *WebKit::UnifiedPDFPlugin::selectionString@<X0>(WebKit::UnifiedPDFPlugin *this@<X0>, _QWORD *a2@<X8>)
{
  void *result;

  result = (void *)*((_QWORD *)this + 104);
  if (result)
  {
    objc_msgSend(result, "string");
    JUMPOUT(0x19AEABCC8);
  }
  *a2 = 0;
  return result;
}

uint64_t WebKit::UnifiedPDFPlugin::existingSelectionContainsPoint(id *this, const WebCore::FloatPoint *a2)
{
  float v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  float v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  const void *v13;
  const void *v14;
  int v15;
  int v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  uint64_t v21;
  CGRect v23;
  _BYTE v24[16];
  int v25;
  int v26;
  float v27;
  float v28;
  float v29;
  IntPoint v30;

  v3 = roundf(*(float *)a2);
  v4 = 0x7FFFFFFFLL;
  v5 = 0x80000000;
  if (v3 > -2147500000.0)
    v5 = (int)v3;
  if (v3 < 2147500000.0)
    v4 = v5;
  v6 = roundf(*((float *)a2 + 1));
  v7 = 0x7FFFFFFF00000000;
  v8 = 0x8000000000000000;
  if (v6 > -2147500000.0)
    v8 = (unint64_t)(int)v6 << 32;
  if (v6 < 2147500000.0)
    v7 = v8;
  *(_QWORD *)&v23.origin.x = v7 | v4;
  v30 = (IntPoint)WebCore::AffineTransform::mapPoint((WebCore::AffineTransform *)(this + 41), (const WebCore::IntPoint *)&v23);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v27, &v30);
  v28 = WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>((uint64_t)this, v27);
  v29 = v9;
  v10 = WebKit::UnifiedPDFPlugin::pageIndexForDocumentPoint((WebKit::UnifiedPDFPlugin *)this, (const WebCore::FloatPoint *)&v28);
  if (!v11)
    return 0;
  v12 = v10;
  v13 = (const void *)objc_msgSend(this[71], "pageAtIndex:", v10);
  v14 = v13;
  if (v13)
    CFRetain(v13);
  WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)(this + 71), v12, v28, v29);
  v25 = v15;
  v26 = v16;
  objc_msgSend(this[104], "boundsForPage:", v14);
  v23.origin.x = v17;
  v23.origin.y = v18;
  v23.size.width = v19;
  v23.size.height = v20;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v24, &v23);
  v21 = WebCore::FloatRect::contains();
  if (v14)
    CFRelease(v14);
  return v21;
}

void sub_19731EE80(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

float WebKit::UnifiedPDFPlugin::rectForSelectionInRootView(id *this, PDFSelection *a2)
{
  id v4;
  const void *v5;
  unint64_t v6;
  char v7;
  char v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  int v13;
  int v14;
  int v15;
  int v16;
  const FloatRect *v17;
  uint64_t v18;
  CGFloat v19;
  _QWORD v21[2];
  CGRect v22;
  float v23[4];
  _DWORD v24[4];
  const void *v25;
  uint64_t v26;
  uint64_t v27;

  if (a2 && -[PDFSelection pages](a2, "pages"))
  {
    v4 = -[NSArray firstObject](-[PDFSelection pages](a2, "pages"), "firstObject");
    v5 = v4;
    if (v4)
    {
      CFRetain(v4);
      v25 = v5;
      CFRetain(v5);
    }
    else
    {
      v25 = 0;
    }
    v6 = WebKit::PDFDocumentLayout::indexForPage(this + 71, &v25);
    v8 = v7;
    if (v5)
      CFRelease(v5);
    if (!v8)
    {
      v26 = 0;
      v27 = 0;
      if (!v5)
        return *(float *)&v26;
      goto LABEL_11;
    }
    -[PDFSelection boundsForPage:](a2, "boundsForPage:", v5);
    v22.origin.x = v9;
    v22.origin.y = v10;
    v22.size.width = v11;
    v22.size.height = v12;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v23, &v22);
    WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>((uint64_t)this, 0, 4, v6, 1, v23[0], v23[1], v23[2], v23[3]);
    v24[0] = v13;
    v24[1] = v14;
    v24[2] = v15;
    v24[3] = v16;
    v21[0] = WebCore::enclosingIntRect((WebCore *)v24, v17);
    v21[1] = v18;
    *(_QWORD *)&v22.origin.x = WebKit::PDFPluginBase::convertFromPluginToRootView((WebKit::PDFPluginBase *)this, (const WebCore::IntRect *)v21);
    v22.origin.y = v19;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v26, (const WebCore::IntRect *)&v22);
    if (v5)
LABEL_11:
      CFRelease(v5);
  }
  else
  {
    v26 = 0;
    v27 = 0;
  }
  return *(float *)&v26;
}

void sub_19731EFD4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::countFindMatches(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t result;

  result = *a2;
  if (*a2)
  {
    if (*(_DWORD *)(result + 4))
      return objc_msgSend((id)objc_msgSend(*(id *)(a1 + 296), "findString:withOptions:", WTF::StringImpl::operator NSString *(), a3 & 1), "count");
    else
      return 0;
  }
  return result;
}

BOOL WebKit::UnifiedPDFPlugin::findString(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3, int a4)
{
  WTF::StringImpl *v4;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  const void *v21;
  uint64_t v22;
  char v23;
  char v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  void *v34;
  void *v35;
  const void *v36;
  const void *v37;
  unint64_t v38;
  char v39;
  char v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t RectToExposeForScrollIntoView;
  uint64_t v52;
  void *v53;
  const void *v55;
  void *v56;
  const __CFString *v57;
  void *v58;
  char v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  id obj;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  const void *v67;
  float v68;
  float v69;
  const void *v70;
  void *v71;
  CGRect v72;
  __int128 v73;
  uint64_t v74;
  FloatRect v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  FloatRect v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _BYTE v83[128];
  CGRect v84;
  uint64_t v85;

  v4 = a2;
  v85 = *MEMORY[0x1E0C80C00];
  v6 = *(const WTF::StringImpl **)a2;
  if (!v6 || !*((_DWORD *)v6 + 1))
  {
    WTF::String::operator=((WTF::StringImpl **)(a1 + 312), v4);
    v84.origin.x = 0.0;
    WebKit::UnifiedPDFPlugin::setCurrentSelection((WebKit::PDFPluginBase *)a1, (uint64_t *)&v84);
    if (*(_QWORD *)&v84.origin.x)
      CFRelease(*(CFTypeRef *)&v84.origin.x);
    WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 1000, v53);
    return 0;
  }
  v7 = a3;
  if (((unsigned __int16)a3 & 0x200) == 0)
  {
    v8 = a3 & 1 | (4 * (((unint64_t)a3 >> 3) & 1));
    if ((WTF::equal(*(WTF **)(a1 + 312), v6, a3) & 1) == 0)
    {
      v84.origin.x = 0.0;
      WebKit::UnifiedPDFPlugin::setCurrentSelection((WebKit::PDFPluginBase *)a1, (uint64_t *)&v84);
      if (*(_QWORD *)&v84.origin.x)
        CFRelease(*(CFTypeRef *)&v84.origin.x);
      WTF::String::operator=((WTF::StringImpl **)(a1 + 312), v4);
      v66 = (_QWORD *)(a1 + 1000);
      WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 1000, v9);
      v10 = *(void **)(a1 + 296);
      if (*(_QWORD *)v4)
        v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v11 = &stru_1E351F1B8;
      v12 = (void *)objc_msgSend(v10, "findString:withOptions:", v11, v8);
      v13 = v12;
      if (v12)
        CFRetain(v12);
      obj = v13;
      v81 = 0u;
      v82 = 0u;
      v79 = (FloatRect)0;
      v80 = 0u;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v79, &v84, 16, v7, v8, v4);
      if (v14)
      {
        v63 = *(_QWORD *)v80;
        do
        {
          v15 = 0;
          v64 = v14;
          do
          {
            if (*(_QWORD *)v80 != v63)
              objc_enumerationMutation(obj);
            v65 = v15;
            v16 = *(void **)(*(_QWORD *)&v79.m_size + 8 * v15);
            v75 = (FloatRect)0;
            v76 = 0u;
            v77 = 0u;
            v78 = 0u;
            v17 = (void *)objc_msgSend(v16, "pages");
            v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v75, v83, 16);
            if (v18)
            {
              v19 = *(_QWORD *)v76;
              do
              {
                for (i = 0; i != v18; ++i)
                {
                  if (*(_QWORD *)v76 != v19)
                    objc_enumerationMutation(v17);
                  v21 = *(const void **)(*(_QWORD *)&v75.m_size + 8 * i);
                  v67 = v21;
                  if (v21)
                    CFRetain(v21);
                  v22 = WebKit::PDFDocumentLayout::indexForPage((id *)(a1 + 568), &v67);
                  v24 = v23;
                  v67 = 0;
                  if (v21)
                    CFRelease(v21);
                  if (v24)
                  {
                    *(_QWORD *)&v73 = v22;
                    objc_msgSend(v16, "boundsForPage:", v21);
                    v72.origin.x = v25;
                    v72.origin.y = v26;
                    v72.size.width = v27;
                    v72.size.height = v28;
                    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)((char *)&v73 + 8), &v72);
                    v29 = *(unsigned int *)(a1 + 1012);
                    if ((_DWORD)v29 == *(_DWORD *)(a1 + 1008))
                    {
                      v30 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v29 + 1, (unint64_t)&v73);
                      v31 = *(_QWORD *)(a1 + 1000) + 24 * *(unsigned int *)(a1 + 1012);
                      v32 = *(_OWORD *)v30;
                      v33 = *(_QWORD *)(v30 + 16);
                    }
                    else
                    {
                      v31 = *v66 + 24 * v29;
                      v32 = v73;
                      v33 = v74;
                    }
                    *(_QWORD *)(v31 + 16) = v33;
                    *(_OWORD *)v31 = v32;
                    ++*(_DWORD *)(a1 + 1012);
                  }
                }
                v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v75, v83, 16);
              }
              while (v18);
            }
            v15 = v65 + 1;
          }
          while (v65 + 1 != v64);
          v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v79, &v84, 16);
        }
        while (v14);
      }
      WebKit::UnifiedPDFPlugin::updateFindOverlay(a1, 0);
      v8 = v60;
      v4 = v61;
      LOBYTE(v7) = v59;
      if (obj)
        CFRelease(obj);
    }
    if (*(_QWORD *)v4 && *(_DWORD *)(*(_QWORD *)v4 + 4))
    {
      v34 = (void *)objc_msgSend(*(id *)(a1 + 296), "findString:fromSelection:withOptions:", WTF::StringImpl::operator NSString *(), *(_QWORD *)(a1 + 832), v8);
      v71 = v34;
      if (v34)
      {
        v35 = v34;
        CFRetain(v34);
        goto LABEL_40;
      }
      if ((v7 & 0x10) != 0)
      {
        v55 = (const void *)objc_msgSend(objc_alloc((Class)WebKit::getPDFSelectionClass(0)), "initWithDocument:", *(_QWORD *)(a1 + 296));
        v56 = *(void **)(a1 + 296);
        if (*(_QWORD *)v4)
          v57 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v57 = &stru_1E351F1B8;
        v58 = (void *)objc_msgSend(v56, "findString:fromSelection:withOptions:", v57, v55, v8);
        v35 = v58;
        if (v58)
          CFRetain(v58);
        v71 = v35;
        if (v55)
          CFRelease(v55);
        if (v35)
        {
LABEL_40:
          v36 = (const void *)objc_msgSend((id)objc_msgSend(v35, "pages"), "firstObject");
          v37 = v36;
          if (v36)
          {
            CFRetain(v36);
            v70 = v37;
            CFRetain(v37);
            v38 = WebKit::PDFDocumentLayout::indexForPage((id *)(a1 + 568), &v70);
            v40 = v39;
            v70 = 0;
            CFRelease(v37);
            if (v40)
            {
              objc_msgSend(v35, "boundsForPage:", v37);
              v84.origin.x = v41;
              v84.origin.y = v42;
              v84.size.width = v43;
              v84.size.height = v44;
              WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v67, &v84);
              WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>(a1, 0, 3, v38, 1, *(float *)&v67, *((float *)&v67 + 1), v68, v69);
              v79.m_location.m_x = v45;
              v79.m_location.m_y = v46;
              v79.m_size.m_width = v47;
              v79.m_size.m_height = v48;
              v49 = (float)*(int *)(a1 + 320);
              v50 = (float)*(int *)(a1 + 324);
              v75.m_location = (FloatPoint)vcvt_f32_s32(*(int32x2_t *)(a1 + 376));
              v75.m_size.m_width = v49;
              v75.m_size.m_height = v50;
              WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)&v72, &v75);
              WebCore::LayoutRect::LayoutRect((WebCore::LayoutRect *)&v73, &v79);
              v83[0] = 0;
              v83[16] = 0;
              RectToExposeForScrollIntoView = WebCore::ScrollableArea::getRectToExposeForScrollIntoView();
              WebKit::UnifiedPDFPlugin::scrollToPointInContentsSpace(a1, (float)(int)RectToExposeForScrollIntoView * 0.015625, (float)SHIDWORD(RectToExposeForScrollIntoView) * 0.015625);
              WebKit::UnifiedPDFPlugin::setCurrentSelection((WebKit::PDFPluginBase *)a1, (uint64_t *)&v71);
              v35 = v71;
              CFRelease(v37);
              v71 = 0;
              v52 = 1;
              if (!v35)
                return v52;
              goto LABEL_63;
            }
            CFRelease(v37);
          }
          v52 = 0;
          v71 = 0;
LABEL_63:
          CFRelease(v35);
          return v52;
        }
      }
    }
    return 0;
  }
  return !a4 || WebKit::UnifiedPDFPlugin::countFindMatches(a1, (uint64_t *)v4, (char)a3) != 0;
}

void sub_19731F610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  const void *v21;
  const void *v22;

  CFRelease(v21);
  CFRelease(v21);
  CFRelease(v22);
  _Unwind_Resume(a1);
}

__int128 *WebKit::UnifiedPDFPlugin::rectsForTextMatchesInRect@<X0>(__int128 *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *((unsigned int *)this + 253);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t)this;
    v6 = 24 * v4;
    v7 = (float *)(*((_QWORD *)this + 125) + 12);
    do
    {
      this = (__int128 *)WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>(v5, 0, 4, *(_QWORD *)(v7 - 3), 1, *(v7 - 1), *v7, v7[1], v7[2]);
      *(_QWORD *)&v15 = __PAIR64__(v9, v8);
      *((_QWORD *)&v15 + 1) = __PAIR64__(v11, v10);
      v12 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v12 == *(_DWORD *)(a2 + 8))
      {
        this = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v12 + 1, (unint64_t)&v15);
        v12 = *(unsigned int *)(a2 + 12);
        v13 = *(_QWORD *)a2;
        v14 = *this;
      }
      else
      {
        v13 = *(_QWORD *)a2;
        v14 = v15;
      }
      *(_OWORD *)(v13 + 16 * v12) = v14;
      ++*(_DWORD *)(a2 + 12);
      v7 += 6;
      v6 -= 24;
    }
    while (v6);
  }
  return this;
}

void sub_19731F7A0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::UnifiedPDFPlugin::textIndicatorForCurrentSelection(uint64_t a1@<X0>, __int16 a2@<W1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  void *v8;

  v8 = *(void **)(a1 + 832);
  if (v8)
    CFRetain(*(CFTypeRef *)(a1 + 832));
  WebKit::UnifiedPDFPlugin::textIndicatorForSelection(a4, (double *)a1, v8, a2, a3);
  if (v8)
    CFRelease(v8);
}

void sub_19731F83C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WTF *WebKit::UnifiedPDFPlugin::textIndicatorForSelection(_QWORD *a1, double *a2, void *a3, __int16 a4, char a5)
{
  void *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  const FloatRect *v18;
  uint64_t v19;
  int32x2_t v20;
  float v21;
  WebCore::DestinationColorSpace *v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  _DWORD *v47;
  int32x2_t v48;
  TextIndicatorData *v49;
  float32x2_t *v50;
  WTF *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  int v63;
  WTF *result;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  WTF *v80[2];
  int v81;
  __int128 v82;
  __int128 v83;
  char v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int32x2_t v89;
  _DWORD v90[4];
  float v91;
  float v92;
  float v93;
  float v94;
  WTF *v95;
  int v96;

  WebKit::UnifiedPDFPlugin::pageCoverageForSelection((uint64_t)&v95, (uint64_t)a2, a3, 1);
  if (!v96)
    goto LABEL_7;
  WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>((uint64_t)a2, 0, 2, *(_QWORD *)v95, 1, *((float *)v95 + 2), *((float *)v95 + 3), *((float *)v95 + 4), *((float *)v95 + 5));
  v91 = v10;
  v92 = v11;
  v93 = v12;
  v94 = v13;
  WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>((uint64_t)a2, 2, 4, 0, 0, v10, v11, v12, v13);
  v90[0] = v14;
  v90[1] = v15;
  v90[2] = v16;
  v90[3] = v17;
  *(_QWORD *)&v77 = WebCore::enclosingIntRect((WebCore *)v90, v18);
  *((_QWORD *)&v77 + 1) = v19;
  v88 = WebKit::PDFPluginBase::convertFromPluginToRootView((WebKit::PDFPluginBase *)a2, (const WebCore::IntRect *)&v77);
  v89 = v20;
  v21 = WebKit::PDFPluginBase::deviceScaleFactor((WebKit::PDFPluginBase *)a2);
  *(float *)&v77 = (float)v89.i32[0];
  *((float *)&v77 + 1) = (float)v89.i32[1];
  WebCore::DestinationColorSpace::SRGB(v22);
  WebCore::ImageBuffer::create();
  if (!v87)
  {
LABEL_7:
    *a1 = 0;
    goto LABEL_84;
  }
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 16))(v87);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 96))(v23, 1);
  v24 = a2[90];
  *(float *)&v77 = v24;
  *((float *)&v77 + 1) = v24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v23 + 632))(v23, &v77);
  (*(void (**)(uint64_t, float, float))(*(_QWORD *)v23 + 648))(v23, -v91, -v92);
  WebKit::UnifiedPDFPlugin::paintPDFContent((int *)a2, v23, (WebCore *)&v91, 1, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 104))(v23, 1);
  v86 = 0;
  v25 = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)v25 = 1;
  *(_OWORD *)(v25 + 4) = xmmword_1978D05A0;
  v86 = v25 | 0x110C000000000000;
  *(_QWORD *)&v77 = 0;
  *((float *)&v77 + 2) = (float)v89.i32[0];
  *((float *)&v77 + 3) = (float)v89.i32[1];
  (*(void (**)(uint64_t, __int128 *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v23 + 248))(v23, &v77, &v86, 2, 2);
  v79 = 0u;
  *(_OWORD *)v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v81 = 1065353216;
  v85 = 0;
  v82 = 0u;
  v83 = 0u;
  v84 = 0;
  v26 = v87;
  v87 = 0;
  v75 = v26;
  WebCore::ImageBuffer::sinkIntoNativeImage();
  WebCore::BitmapImage::create();
  v28 = v74;
  *(_QWORD *)&v74 = 0;
  v29 = (_DWORD *)v83;
  *(_QWORD *)&v83 = v28;
  if (v29)
  {
    if (v29[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
    else
      --v29[2];
    *(_QWORD *)&v74 = 0;
  }
  v30 = v76;
  v76 = 0;
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + 8);
    if (__ldaxr((unsigned __int8 *)v31))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v31))
    {
      goto LABEL_14;
    }
    MEMORY[0x19AEABB3C](v31);
LABEL_14:
    v33 = *(_QWORD *)(v31 + 8);
    v34 = v33 - 1;
    *(_QWORD *)(v31 + 8) = v33 - 1;
    if (v33 == 1)
    {
      v72 = *(_QWORD *)(v31 + 16);
      v35 = *(_QWORD *)(v31 + 24);
      *(_QWORD *)(v31 + 24) = 0;
      v36 = v72 != 0;
    }
    else
    {
      v35 = 0;
      v36 = 1;
    }
    v37 = __ldxr((unsigned __int8 *)v31);
    if (v37 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v31))
      {
        if (v34)
          goto LABEL_26;
LABEL_22:
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        if (!v36)
          WTF::fastFree((WTF *)v31, v27);
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v31);
    if (v34)
      goto LABEL_26;
    goto LABEL_22;
  }
LABEL_26:
  v38 = v75;
  v75 = 0;
  if (!v38)
    goto LABEL_43;
  v39 = *(_QWORD *)(v38 + 8);
  if (__ldaxr((unsigned __int8 *)v39))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v39))
  {
    goto LABEL_31;
  }
  MEMORY[0x19AEABB3C](v39);
LABEL_31:
  v41 = *(_QWORD *)(v39 + 8);
  v42 = v41 - 1;
  *(_QWORD *)(v39 + 8) = v41 - 1;
  if (v41 == 1)
  {
    v73 = *(_QWORD *)(v39 + 16);
    v43 = *(_QWORD *)(v39 + 24);
    *(_QWORD *)(v39 + 24) = 0;
    v44 = v73 != 0;
  }
  else
  {
    v43 = 0;
    v44 = 1;
  }
  v45 = __ldxr((unsigned __int8 *)v39);
  if (v45 != 1)
  {
    __clrex();
LABEL_38:
    WTF::Lock::unlockSlow((WTF::Lock *)v39);
    if (v42)
      goto LABEL_43;
    goto LABEL_39;
  }
  if (__stlxr(0, (unsigned __int8 *)v39))
    goto LABEL_38;
  if (v42)
    goto LABEL_43;
LABEL_39:
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  if (!v44)
    WTF::fastFree((WTF *)v39, v27);
LABEL_43:
  v81 = LODWORD(v21);
  v46 = v83;
  if ((_QWORD)v83)
    ++*(_DWORD *)(v83 + 8);
  v47 = (_DWORD *)*((_QWORD *)&v82 + 1);
  *((_QWORD *)&v82 + 1) = v46;
  if (v47)
  {
    if (v47[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
    else
      --v47[2];
  }
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v74, (const WebCore::IntRect *)&v88);
  v79 = v74;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v74, (const WebCore::IntRect *)&v88);
  v77 = v74;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v74, (const WebCore::IntRect *)&v88);
  v78 = v74;
  v48 = v89;
  v50 = (float32x2_t *)WTF::fastMalloc((WTF *)0x10);
  *v50 = 0;
  v50[1] = vcvt_f32_s32(v48);
  v51 = v80[0];
  if (v80[0])
  {
    v80[0] = 0;
    LODWORD(v80[1]) = 0;
    WTF::fastFree(v51, v49);
  }
  v80[0] = (WTF *)v50;
  v80[1] = (WTF *)0x100000001;
  v84 = a5;
  v85 = a4;
  WebCore::TextIndicator::create((WebCore::TextIndicator *)&v77, v49);
  *a1 = v74;
  if ((*((_QWORD *)&v83 + 1) & 0x8000000000000) != 0)
  {
    v65 = (unsigned int *)(*((_QWORD *)&v83 + 1) & 0xFFFFFFFFFFFFLL);
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
    {
      atomic_store(1u, v65);
      WTF::fastFree((WTF *)v65, v9);
    }
  }
  v52 = (_DWORD *)v83;
  *(_QWORD *)&v83 = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  v53 = (_DWORD *)*((_QWORD *)&v82 + 1);
  *((_QWORD *)&v82 + 1) = 0;
  if (v53)
  {
    if (v53[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 8))(v53);
    else
      --v53[2];
  }
  v54 = (_DWORD *)v82;
  *(_QWORD *)&v82 = 0;
  if (v54)
  {
    if (v54[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
    else
      --v54[2];
  }
  v55 = v80[0];
  if (v80[0])
  {
    v80[0] = 0;
    LODWORD(v80[1]) = 0;
    WTF::fastFree(v55, v9);
  }
  if ((v86 & 0x8000000000000) != 0)
  {
    v68 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFLL);
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, v68);
      WTF::fastFree((WTF *)v68, v9);
    }
  }
  v56 = v87;
  v87 = 0;
  if (v56)
  {
    v57 = *(_QWORD *)(v56 + 8);
    if (__ldaxr((unsigned __int8 *)v57))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v57))
    {
      goto LABEL_72;
    }
    MEMORY[0x19AEABB3C](v57);
LABEL_72:
    v59 = *(_QWORD *)(v57 + 8);
    v60 = v59 - 1;
    *(_QWORD *)(v57 + 8) = v59 - 1;
    if (v59 == 1)
    {
      v71 = *(_QWORD *)(v57 + 16);
      v61 = *(_QWORD *)(v57 + 24);
      *(_QWORD *)(v57 + 24) = 0;
      v62 = v71 != 0;
    }
    else
    {
      v61 = 0;
      v62 = 1;
    }
    v63 = __ldxr((unsigned __int8 *)v57);
    if (v63 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v57))
      {
        if (v60)
          goto LABEL_84;
LABEL_80:
        if (v61)
          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
        if (!v62)
          WTF::fastFree((WTF *)v57, v9);
        goto LABEL_84;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v57);
    if (v60)
      goto LABEL_84;
    goto LABEL_80;
  }
LABEL_84:
  result = v95;
  if (v95)
    return (WTF *)WTF::fastFree(v95, v9);
  return result;
}

void sub_19731FEE8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,uint64_t a21,_DWORD *a22,_DWORD *a23,_DWORD *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  WTF *v28;
  uint64_t v29;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;

  WTF::fastFree(v28, a2);
  if ((a25 & 0x8000000000000) != 0)
  {
    v31 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFLL);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      WTF::fastFree((WTF *)v31, v34);
    }
  }
  if (a24)
  {
    if (a24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a24 + 8))(a24);
    else
      --a24[2];
  }
  if (a23)
  {
    if (a23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a23 + 8))(a23);
    else
      --a23[2];
  }
  if (a22)
  {
    if (a22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a22 + 8))(a22);
    else
      --a22[2];
  }
  if (a19)
    WTF::fastFree(a19, v34);
  if ((a27 & 0x8000000000000) != 0)
  {
    v35 = (unsigned int *)(a27 & 0xFFFFFFFFFFFFLL);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      WTF::fastFree((WTF *)v35, v34);
    }
  }
  if (!a28)
  {
LABEL_44:
    if (*(_QWORD *)(v29 - 96))
      WTF::fastFree(*(WTF **)(v29 - 96), v34);
    _Unwind_Resume(a1);
  }
  v38 = *(_QWORD *)(a28 + 8);
  if (__ldaxr((unsigned __int8 *)v38))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v38))
  {
LABEL_31:
    v40 = *(_QWORD *)(v38 + 8);
    v41 = v40 - 1;
    *(_QWORD *)(v38 + 8) = v40 - 1;
    if (v40 == 1)
    {
      v45 = *(_QWORD *)(v38 + 16);
      v42 = *(_QWORD *)(v38 + 24);
      *(_QWORD *)(v38 + 24) = 0;
      v43 = v45 != 0;
    }
    else
    {
      v42 = 0;
      v43 = 1;
    }
    v44 = __ldxr((unsigned __int8 *)v38);
    if (v44 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v38))
      {
LABEL_38:
        if (!v41)
        {
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          if (!v43)
            WTF::fastFree((WTF *)v38, v34);
        }
        goto LABEL_44;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v38);
    goto LABEL_38;
  }
  MEMORY[0x19AEABB3C](v38);
  goto LABEL_31;
}

uint64_t WebKit::UnifiedPDFPlugin::performDictionaryLookupAtLocation(id *this, const WebCore::FloatPoint *a2)
{
  float v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  float v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  float v39;
  float v40;
  float v41;
  IntPoint v42;
  int v43[40];
  IPC::Encoder *v44;

  v3 = roundf(*(float *)a2);
  v4 = 0x7FFFFFFFLL;
  v5 = 0x80000000;
  if (v3 > -2147500000.0)
    v5 = (int)v3;
  if (v3 < 2147500000.0)
    v4 = v5;
  v6 = roundf(*((float *)a2 + 1));
  v7 = 0x7FFFFFFF00000000;
  v8 = 0x8000000000000000;
  if (v6 > -2147500000.0)
    v8 = (unint64_t)(int)v6 << 32;
  if (v6 < 2147500000.0)
    v7 = v8;
  *(_QWORD *)v43 = v7 | v4;
  v42 = (IntPoint)WebCore::AffineTransform::mapPoint((WebCore::AffineTransform *)(this + 41), (const WebCore::IntPoint *)v43);
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v39, &v42);
  v40 = WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>((uint64_t)this, v39);
  v41 = v9;
  v10 = WebKit::UnifiedPDFPlugin::pageIndexForDocumentPoint((WebKit::UnifiedPDFPlugin *)this, (const WebCore::FloatPoint *)&v40);
  if (!v11)
    return 0;
  v12 = v10;
  v13 = (void *)objc_msgSend(this[71], "pageAtIndex:", v10);
  v14 = v13;
  if (v13)
    CFRetain(v13);
  WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)(this + 71), v12, v40, v41);
  WebCore::FloatPoint::operator CGPoint();
  v15 = (void *)objc_msgSend(v14, "selectionForWordAtPoint:");
  v16 = v15;
  if (v15)
    CFRetain(v15);
  v17 = this[13];
  if (v17
    && (v18 = v17[1]) != 0
    && (v19 = *(_QWORD *)(v18 + 24)) != 0
    && (v20 = *(_QWORD *)(v19 + 8)) != 0
    && (v21 = *(_QWORD *)(v20 + 24)) != 0
    && (v22 = *(_QWORD *)(v21 + 8)) != 0
    && (v23 = *(_QWORD **)(*(_QWORD *)(v22 + 48) + 16),
        ((*(uint64_t (**)(_QWORD *))(*v23 + 1368))(v23) & 1) == 0)
    && *(_QWORD *)(v23[2] + 8))
  {
    v24 = *(_QWORD *)(*((_QWORD *)this[13] + 1) + 24);
    if (v24
      && (v25 = *(_QWORD *)(v24 + 8)) != 0
      && (v26 = *(_QWORD *)(v25 + 24)) != 0
      && (v27 = *(_QWORD *)(v26 + 8)) != 0
      && (v28 = *(_QWORD **)(*(_QWORD *)(v27 + 48) + 16),
          ((*(uint64_t (**)(_QWORD *))(*v28 + 1368))(v28) & 1) == 0)
      && (v29 = *(_QWORD *)(v28[2] + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v29 - 8));
      v30 = v29 - 16;
    }
    else
    {
      v30 = 0;
    }
    WebKit::UnifiedPDFPlugin::dictionaryPopupInfoForSelection((double *)this, v16, 1, (uint64_t)v43);
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v30 + 32) + 56))(v30 + 32);
    v34 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v34 = 1903;
    *(_QWORD *)(v34 + 8) = v33;
    *(_QWORD *)(v34 + 528) = v34 + 16;
    *(_QWORD *)(v34 + 536) = v34 + 16;
    *(_OWORD *)(v34 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v34 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v34);
    v44 = (IPC::Encoder *)v34;
    IPC::ArgumentCoder<WebCore::DictionaryPopupInfo,void>::encode((IPC::Encoder *)v34, v43);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v30 + 32) + 32))(v30 + 32, &v44, 0);
    v36 = v44;
    v44 = 0;
    if (v36)
    {
      IPC::Encoder::~Encoder(v36, v35);
      WTF::fastFree(v37, v38);
    }
    WebCore::DictionaryPopupInfo::~DictionaryPopupInfo((WebCore::DictionaryPopupInfo *)v43);
    CFRelease(*(CFTypeRef *)(v30 + 8));
    v31 = 1;
    if (!v16)
      goto LABEL_31;
  }
  else
  {
    v31 = 0;
    if (!v16)
      goto LABEL_31;
  }
  CFRelease(v16);
LABEL_31:
  if (v14)
    CFRelease(v14);
  return v31;
}

void sub_19732054C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  const void *v14;
  const void *v15;

  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  _Unwind_Resume(exception_object);
}

WTF *WebKit::UnifiedPDFPlugin::dictionaryPopupInfoForSelection@<X0>(double *a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  WTF *result;
  void *v9;
  __int128 v10;
  WTF *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  void *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  WTF *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  _OWORD v27[3];
  WTF *v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;

  WebKit::PDFPluginBase::dictionaryPopupInfoForSelection(a2, (WebCore::DictionaryPopupInfo *)a4);
  result = WebKit::UnifiedPDFPlugin::textIndicatorForSelection(&v36, a1, a2, 0, a3);
  if (v36)
  {
    WebCore::TextIndicatorData::TextIndicatorData((WebCore::TextIndicatorData *)v27, (const TextIndicatorData *)(v36 + 2));
    v10 = v27[1];
    *(_OWORD *)(a4 + 8) = v27[0];
    *(_OWORD *)(a4 + 24) = v10;
    *(_OWORD *)(a4 + 40) = v27[2];
    v11 = *(WTF **)(a4 + 56);
    if (v11)
    {
      *(_QWORD *)(a4 + 56) = 0;
      *(_DWORD *)(a4 + 64) = 0;
      WTF::fastFree(v11, v9);
    }
    *(_QWORD *)(a4 + 56) = v28;
    v12 = v29;
    v28 = 0;
    v29 = 0;
    *(_QWORD *)(a4 + 64) = v12;
    *(_DWORD *)(a4 + 72) = v30;
    v13 = v31;
    v31 = 0;
    v14 = *(_DWORD **)(a4 + 80);
    *(_QWORD *)(a4 + 80) = v13;
    if (v14)
    {
      if (v14[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      else
        --v14[2];
    }
    v15 = v32;
    v32 = 0;
    v16 = *(_DWORD **)(a4 + 88);
    *(_QWORD *)(a4 + 88) = v15;
    if (v16)
    {
      if (v16[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
      else
        --v16[2];
    }
    v17 = v33;
    v33 = 0;
    v18 = *(_DWORD **)(a4 + 96);
    *(_QWORD *)(a4 + 96) = v17;
    if (v18)
    {
      if (v18[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
      else
        --v18[2];
    }
    WebCore::Color::operator=();
    *(_DWORD *)(a4 + 112) = v35;
    if ((v34 & 0x8000000000000) != 0)
    {
      v24 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, v19);
      }
    }
    v20 = v33;
    v33 = 0;
    if (v20)
    {
      if (v20[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
      else
        --v20[2];
    }
    v21 = v32;
    v32 = 0;
    if (v21)
    {
      if (v21[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
      else
        --v21[2];
    }
    v22 = v31;
    v31 = 0;
    if (v22)
    {
      if (v22[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
      else
        --v22[2];
    }
    v23 = v28;
    if (v28)
    {
      v28 = 0;
      LODWORD(v29) = 0;
      WTF::fastFree(v23, v19);
    }
    result = (WTF *)v36;
    if (v36)
      return (WTF *)WTF::RefCounted<WebCore::TextIndicator>::deref(v36);
  }
  return result;
}

void sub_1973207F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  WebCore::DictionaryPopupInfo *v22;
  uint64_t v23;
  _DWORD *v25;

  v25 = *(_DWORD **)(v23 - 40);
  if (v25)
    WTF::RefCounted<WebCore::TextIndicator>::deref(v25);
  WebCore::DictionaryPopupInfo::~DictionaryPopupInfo(v22);
  _Unwind_Resume(a1);
}

void WebKit::UnifiedPDFPlugin::textForImmediateActionHitTestAtPoint(const void **this@<X0>, const WebCore::FloatPoint *a2@<X1>, WebKit::WebHitTestResultData *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  unint64_t v13;
  float v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  id *v18;
  int v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  PDFSelection *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  WTF::StringImpl *v41;
  CGFloat x;
  WTF::StringImpl *v43;
  CGFloat v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  CGFloat v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  CGRect v54;
  _BYTE v55[16];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  const void *v60;
  int v61;
  int v62;
  float v63;
  float v64;
  float v65;
  IntPoint v66;
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (!WebKit::UnifiedPDFPlugin::existingSelectionContainsPoint((id *)this, a2))
  {
    v9 = roundf(*(float *)a2);
    v10 = 0x7FFFFFFFLL;
    v11 = 0x80000000;
    if (v9 > -2147500000.0)
      v11 = (int)v9;
    if (v9 < 2147500000.0)
      v10 = v11;
    v12 = roundf(*((float *)a2 + 1));
    if (v12 >= 2147500000.0)
    {
      v13 = 0x7FFFFFFF00000000;
    }
    else if (v12 <= -2147500000.0)
    {
      v13 = 0x8000000000000000;
    }
    else
    {
      v13 = (unint64_t)(int)v12 << 32;
    }
    *(_QWORD *)&v54.origin.x = v13 | v10;
    v66 = (IntPoint)WebCore::AffineTransform::mapPoint((WebCore::AffineTransform *)(this + 41), (const WebCore::IntPoint *)&v54);
    WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v63, &v66);
    v64 = WebKit::UnifiedPDFPlugin::convertDown<WebCore::FloatPoint>((uint64_t)this, v63);
    v65 = v14;
    v15 = WebKit::UnifiedPDFPlugin::pageIndexForDocumentPoint((WebKit::UnifiedPDFPlugin *)this, (const WebCore::FloatPoint *)&v64);
    if (!v16)
    {
      v54.origin.x = 0.0;
      std::pair<WTF::String,WTF::RetainPtr<PDFSelection>>::pair[abi:sn180100]<WTF::String,WTF::RetainPtr<PDFSelection>&,0>(a4, (uint64_t *)&v54, this + 104);
      x = v54.origin.x;
      if (!*(_QWORD *)&v54.origin.x)
        return;
      goto LABEL_34;
    }
    v17 = v15;
    v18 = (id *)(this + 71);
    WebKit::PDFDocumentLayout::documentToPDFPage((uint64_t)v18, v15, v64, v65);
    v61 = v19;
    v62 = v20;
    v21 = (void *)objc_msgSend(*v18, "pageAtIndex:", v17);
    v22 = v21;
    if (v21)
      CFRetain(v21);
    WebCore::FloatPoint::operator CGPoint();
    v23 = (void *)objc_msgSend(v22, "selectionForWordAtPoint:");
    v24 = v23;
    v60 = v23;
    if (v23)
    {
      CFRetain(v23);
      v25 = (void *)objc_msgSend(v22, "annotations");
      v26 = v25;
      if (v25)
      {
        CFRetain(v25);
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v56, v67, 16);
        if (v28)
        {
          v29 = *(_QWORD *)v57;
LABEL_18:
          v30 = 0;
          while (1)
          {
            if (*(_QWORD *)v57 != v29)
              objc_enumerationMutation(v26);
            v31 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * v30);
            objc_msgSend(v31, "bounds");
            v54.origin.x = v32;
            v54.origin.y = v33;
            v54.size.width = v34;
            v54.size.height = v35;
            WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v55, &v54);
            v36 = WebCore::FloatRect::contains();
            if ((v36 & 1) != 0)
            {
              WebKit::getPDFAnnotationLinkClass[0]((WebKit *)v36);
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                if (objc_msgSend(v31, "URL"))
                {
                  v37 = (void *)objc_msgSend(v31, "URL");
                  v38 = v37;
                  if (v37)
                    break;
                }
              }
            }
            if (v28 == ++v30)
            {
              v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v56, v67, 16);
              if (v28)
                goto LABEL_18;
              goto LABEL_27;
            }
          }
          CFRetain(v37);
          MEMORY[0x19AEABCC8](&v54, objc_msgSend(v38, "absoluteString"));
          v44 = v54.origin.x;
          v54.origin.x = 0.0;
          v45 = (WTF::StringImpl *)*((_QWORD *)a3 + 2);
          *((CGFloat *)a3 + 2) = v44;
          if (v45)
          {
            v46 = *(_DWORD *)v45 - 2;
            if (*(_DWORD *)v45 != 2)
              goto LABEL_43;
            WTF::StringImpl::destroy(v45, v43);
            v45 = *(WTF::StringImpl **)&v54.origin.x;
            v54.origin.x = 0.0;
            if (!v45)
              goto LABEL_44;
            v46 = *(_DWORD *)v45 - 2;
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, v47);
            else
LABEL_43:
              *(_DWORD *)v45 = v46;
          }
LABEL_44:
          MEMORY[0x19AEABCC8](&v54, objc_msgSend(v24, "string", *(_QWORD *)&v54.origin.x));
          v49 = v54.origin.x;
          v54.origin.x = 0.0;
          v50 = (WTF::StringImpl *)*((_QWORD *)a3 + 4);
          *((CGFloat *)a3 + 4) = v49;
          if (v50)
          {
            v51 = *(_DWORD *)v50 - 2;
            if (*(_DWORD *)v50 != 2)
            {
LABEL_48:
              *(_DWORD *)v50 = v51;
              goto LABEL_49;
            }
            WTF::StringImpl::destroy(v50, v48);
            v50 = *(WTF::StringImpl **)&v54.origin.x;
            v54.origin.x = 0.0;
            if (v50)
            {
              v51 = *(_DWORD *)v50 - 2;
              if (*(_DWORD *)v50 == 2)
              {
                WTF::StringImpl::destroy(v50, v52);
                goto LABEL_49;
              }
              goto LABEL_48;
            }
          }
LABEL_49:
          MEMORY[0x19AEABCC8](a4, objc_msgSend(v24, "string", *(_QWORD *)&v54.origin.x));
          a4[1] = v24;
          CFRetain(v24);
          CFRelease(v38);
          goto LABEL_50;
        }
LABEL_27:
        v39 = (void *)WebCore::DictionaryLookup::stringForPDFSelection((WebCore::DictionaryLookup *)v24, v27);
        v40 = v39;
        if (v39 && objc_msgSend(v39, "length"))
        {
          MEMORY[0x19AEABCC8](a4, v40);
          a4[1] = v24;
          CFRetain(v24);
        }
        else
        {
          v54.origin.x = 0.0;
          std::pair<WTF::String,WTF::RetainPtr<PDFSelection>>::pair[abi:sn180100]<WTF::String,WTF::RetainPtr<PDFSelection>&,0>(a4, (uint64_t *)&v54, &v60);
          if (*(_QWORD *)&v54.origin.x)
          {
            if (**(_DWORD **)&v54.origin.x == 2)
              WTF::StringImpl::destroy(*(WTF::StringImpl **)&v54.origin.x, v53);
            else
              **(_DWORD **)&v54.origin.x -= 2;
          }
        }
LABEL_50:
        CFRelease(v26);
      }
      else
      {
        *a4 = 0;
        a4[1] = 0;
      }
      CFRelease(v24);
      if (!v22)
        return;
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      if (!v22)
        return;
    }
    CFRelease(v22);
    return;
  }
  v8 = (void *)this[104];
  if (v8)
    MEMORY[0x19AEABCC8](&v54, objc_msgSend(v8, "string"));
  else
    v54.origin.x = 0.0;
  std::pair<WTF::String,WTF::RetainPtr<PDFSelection>>::pair[abi:sn180100]<WTF::String,WTF::RetainPtr<PDFSelection>&,0>(a4, (uint64_t *)&v54, this + 104);
  x = v54.origin.x;
  v54.origin.x = 0.0;
  if (x != 0.0)
  {
LABEL_34:
    if (**(_DWORD **)&x == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)&x, v41);
    else
      **(_DWORD **)&x -= 2;
  }
}

void sub_197320D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  const void *v9;
  const void *v10;
  const void *v11;

  CFRelease(v11);
  CFRelease(v10);
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(a1);
}

uint64_t WebKit::UnifiedPDFPlugin::accessibilityHitTest(WebKit::UnifiedPDFPlugin *this, const IntPoint *a2)
{
  return 0;
}

uint64_t WebKit::UnifiedPDFPlugin::accessibilityObject(WebKit::UnifiedPDFPlugin *this)
{
  return 0;
}

uint64_t WebKit::UnifiedPDFPlugin::pluginBoundsForAnnotation(uint64_t a1, id *a2)
{
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  const void *v8;
  const void *v9;
  unint64_t v10;
  char v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  const void *v18;
  CGRect v19;
  float v20[4];

  objc_msgSend(*a2, "bounds");
  v19.origin.x = v4;
  v19.origin.y = v5;
  v19.size.width = v6;
  v19.size.height = v7;
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v20, &v19);
  v8 = (const void *)objc_msgSend(*a2, "page");
  v9 = v8;
  v18 = v8;
  if (v8)
    CFRetain(v8);
  v10 = WebKit::PDFDocumentLayout::indexForPage((id *)(a1 + 568), &v18);
  v12 = v11;
  if (v9)
    CFRelease(v9);
  if (v12)
  {
    WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>(a1, 0, 4, v10, 1, v20[0], v20[1], v20[2], v20[3]);
    *(_QWORD *)&v19.origin.x = __PAIR64__(v14, v13);
    *(_QWORD *)&v19.origin.y = __PAIR64__(v16, v15);
  }
  return WebCore::FloatRect::operator CGRect();
}

void sub_197320F64(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void *WebKit::UnifiedPDFPlugin::annotationRectsForTesting@<X0>(WebKit::UnifiedPDFPlugin *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void *result;
  void *v6;
  void *v7;
  void *v8;
  unsigned int i;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 *v21;
  float v22[4];
  __int128 v23;
  CGRect v24;

  v4 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  while (1)
  {
    result = (void *)*((_QWORD *)this + 71);
    if (result)
      result = (void *)objc_msgSend(result, "pageCount");
    if (v4 >= (unint64_t)result)
      break;
    result = (void *)objc_msgSend(*((id *)this + 71), "pageAtIndex:", v4);
    v6 = result;
    if (!result)
      break;
    CFRetain(result);
    v7 = (void *)objc_msgSend(v6, "annotations");
    v8 = v7;
    if (v7)
    {
      CFRetain(v7);
      for (i = 0; objc_msgSend(v8, "count") > (unint64_t)i; ++i)
      {
        memset(&v24, 0, sizeof(v24));
        objc_msgSend((id)objc_msgSend(v8, "objectAtIndex:", i), "bounds");
        v24.origin.x = v10;
        v24.origin.y = v11;
        v24.size.width = v12;
        v24.size.height = v13;
        WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v22, &v24);
        WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>((uint64_t)this, 0, 4, v4, 1, v22[0], v22[1], v22[2], v22[3]);
        *(_QWORD *)&v23 = __PAIR64__(v15, v14);
        *((_QWORD *)&v23 + 1) = __PAIR64__(v17, v16);
        v18 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v18 == *(_DWORD *)(a2 + 8))
        {
          v21 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v18 + 1, (unint64_t)&v23);
          v18 = *(unsigned int *)(a2 + 12);
          v19 = *(_QWORD *)a2;
          v20 = *v21;
        }
        else
        {
          v19 = *(_QWORD *)a2;
          v20 = v23;
        }
        *(_OWORD *)(v19 + 16 * v18) = v20;
        ++*(_DWORD *)(a2 + 12);
      }
      CFRelease(v8);
    }
    CFRelease(v6);
    ++v4;
  }
  return result;
}

void sub_1973210DC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::UnifiedPDFPlugin::setPDFDisplayModeForTesting(WebKit::UnifiedPDFPlugin *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  char v4;
  char v5;
  uint64_t result;
  WTF::StringImpl *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v3 = *a2;
  if (*a2)
    *(_DWORD *)v3 += 2;
  if ((MEMORY[0x19AEABBCC](v3, "SinglePageDiscrete", 18) & 1) != 0)
  {
    v4 = 0;
  }
  else if ((MEMORY[0x19AEABBCC](v3, "SinglePageContinuous", 20) & 1) != 0)
  {
    v4 = 1;
  }
  else if ((MEMORY[0x19AEABBCC](v3, "TwoUpDiscrete", 13) & 1) != 0)
  {
    v4 = 2;
  }
  else if (MEMORY[0x19AEABBCC](v3, "TwoUpContinuous", 15))
  {
    v4 = 3;
  }
  else
  {
    v4 = 1;
  }
  v5 = *((_BYTE *)this + 764);
  *((_BYTE *)this + 612) = v4;
  *((_BYTE *)this + 764) = 1;
  result = (uint64_t)WebKit::UnifiedPDFPlugin::updateLayout((uint64_t)this, v5 == 0);
  *((_BYTE *)this + 764) = v5;
  if ((*((_BYTE *)this + 612) & 0xFD) == 0 && *((_BYTE *)this + 992))
  {
    v8 = WebKit::UnifiedPDFPlugin::layoutBoundsForPageAtIndex(this, *((_QWORD *)this + 123));
    WebKit::UnifiedPDFPlugin::convertUp<WebCore::FloatRect>((uint64_t)this, 1, 3, 0, 0, v8, v9, v10, v11);
    result = WebKit::UnifiedPDFPlugin::scrollToPointInContentsSpace((uint64_t)this, v12, v13);
  }
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return WTF::StringImpl::destroy(v3, v7);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

void sub_19732126C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  char v4;
  char v5;

  v5 = v4;
  *(_BYTE *)(v3 + 764) = v5;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::WebChromeClient::didPreventDefaultForEvent(unsigned int *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 48);
  if (v4)
  {
    this = *(unsigned int **)(v4 + 160);
    if (this)
    {
      if (!*((_BYTE *)this + 144))
      {
        v5 = this + 2;
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        WebCore::ContentChangeObserver::didPreventDefaultForEvent((WebCore::ContentChangeObserver *)this, a2);
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
      }
    }
  }
  return this;
}

void sub_197321314(_Unwind_Exception *a1)
{
  unsigned int *v1;

  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebChromeClient::didFinishContentChangeObserving(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  WebKit::WebPage::didFinishContentChangeObserving(v5, a3);
  if (v4)
    CFRelease(*(CFTypeRef *)(v5 + 8));
}

void sub_197321390(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void WebKit::WebChromeClient::notifyRevealedSelectionByScrollingFrame(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  CFRetain(*(CFTypeRef *)(v3 + 8));
  WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition((WebCore::Page **)v3);
  if (v2)
    CFRelease(*(CFTypeRef *)(v3 + 8));
}

uint64_t WebKit::WebChromeClient::isStopping(WebKit::WebChromeClient *this)
{
  return 0;
}

void WebKit::WebChromeClient::didStartOverflowScroll(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  _BYTE v9[24];
  IPC::Encoder *v10;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v9[0] = 0;
  v9[16] = 0;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 32) + 56))(v2 + 32);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2026;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>((IPC::Encoder *)v4, (uint64_t)v9);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v2 + 32) + 32))(v2 + 32, &v10, 0);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v7, v8);
  }
  if (v1)
    CFRelease(*(CFTypeRef *)(v2 + 8));
}

void sub_1973214EC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  uint64_t v12;
  uint64_t v13;
  WTF *v15;
  void *v16;

  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v15, v16);
  }
  if (v13)
    CFRelease(*(CFTypeRef *)(v12 + 8));
  _Unwind_Resume(exception_object);
}

void WebKit::WebChromeClient::didEndOverflowScroll(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *v6;
  WTF *v7;
  void *v8;
  _BYTE v9[24];
  IPC::Encoder *v10;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v9[0] = 0;
  v9[16] = 0;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 32) + 56))(v2 + 32);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2025;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v10 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>((IPC::Encoder *)v4, (uint64_t)v9);
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v2 + 32) + 32))(v2 + 32, &v10, 0);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    IPC::Encoder::~Encoder(v6, v5);
    WTF::fastFree(v7, v8);
  }
  if (v1)
    CFRelease(*(CFTypeRef *)(v2 + 8));
}

void sub_19732160C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  uint64_t v12;
  uint64_t v13;
  WTF *v15;
  void *v16;

  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v15, v16);
  }
  if (v13)
    CFRelease(*(CFTypeRef *)(v12 + 8));
  _Unwind_Resume(exception_object);
}

void WebKit::WebChromeClient::showPlaybackTargetPicker(uint64_t a1, char a2, char a3, uint64_t *a4)
{
  uint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v16[2];
  IPC::Encoder *v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v7)
    v8 = (int32x2_t *)(v7 - 16);
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)&v8[1]);
  v16[0] = WebKit::WebPage::rectForElementAtInteractionLocation(v8);
  v16[1] = v9;
  v10 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)&v8[4] + 56))(v8 + 4);
  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 2062;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v17 = (IPC::Encoder *)v11;
  *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = a2;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v11, v16);
  *IPC::Encoder::grow((IPC::Encoder *)v11, 1uLL, 1) = a3;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a4);
  (*(void (**)(int32x2_t *, IPC::Encoder **, _QWORD))(*(_QWORD *)&v8[4] + 32))(v8 + 4, &v17, 0);
  v13 = v17;
  v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v12);
    WTF::fastFree(v14, v15);
  }
  if (v7)
    CFRelease(*(CFTypeRef *)&v8[1]);
}

void sub_19732178C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  uint64_t v12;
  uint64_t v13;
  WTF *v15;
  void *v16;

  if (a12)
  {
    IPC::Encoder::~Encoder(a12, a2);
    WTF::fastFree(v15, v16);
  }
  if (v13)
    CFRelease(*(CFTypeRef *)(v12 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebChromeClient::deviceOrientation(WebKit::WebChromeClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(unsigned int *)(v2 + 1488);
  CFRelease(*(CFTypeRef *)(v2 + 8));
  return v3;
}

BOOL WebKit::WebChromeClient::shouldUseMouseEventForSelection(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 112) < 2;
}

uint64_t WebKit::WebChromeClient::showDataDetectorsUIForElement(uint64_t a1, uint64_t a2, WebCore::MouseRelatedEvent *a3)
{
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  uint64_t v23;
  int v24;
  __int16 v25;
  char v26;
  IPC::Encoder *v27;
  _BYTE v28[648];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = (*(uint64_t (**)(WebCore::MouseRelatedEvent *))(*(_QWORD *)a3 + 88))(a3);
  if ((_DWORD)v5)
  {
    WebCore::MouseRelatedEvent::locationInRootViewCoordinates(a3);
    v8 = roundf(v7);
    v9 = 0x7FFFFFFFLL;
    v10 = 0x80000000;
    if (v8 > -2147500000.0)
      v10 = (int)v8;
    if (v8 < 2147500000.0)
      v9 = v10;
    v11 = roundf(v6);
    v12 = 0x7FFFFFFF00000000;
    v13 = 0x8000000000000000;
    if (v11 > -2147500000.0)
      v13 = (unint64_t)(int)v11 << 32;
    if (v11 < 2147500000.0)
      v12 = v13;
    v23 = v12 | v9;
    v25 = 0;
    v26 = 0;
    v24 = 16777472;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if (v14)
      v15 = v14 - 16;
    else
      v15 = 0;
    CFRetain(*(CFTypeRef *)(v15 + 8));
    WebKit::WebPage::positionInformation((WebKit::WebPage *)v15, (const WebKit::InteractionInformationRequest *)&v23, (uint64_t)v28);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 + 32) + 56))(v15 + 32);
    v17 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v17 = 2054;
    *(_QWORD *)(v17 + 8) = v16;
    *(_QWORD *)(v17 + 528) = v17 + 16;
    *(_QWORD *)(v17 + 536) = v17 + 16;
    *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v17 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
    v27 = (IPC::Encoder *)v17;
    IPC::ArgumentCoder<WebKit::InteractionInformationAtPosition,void>::encode((IPC::Encoder *)v17, (uint64_t)v28);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v15 + 32) + 32))(v15 + 32, &v27, 0);
    v19 = v27;
    v27 = 0;
    if (v19)
    {
      IPC::Encoder::~Encoder(v19, v18);
      WTF::fastFree(v20, v21);
    }
    WebKit::InteractionInformationAtPosition::~InteractionInformationAtPosition((WebKit::InteractionInformationAtPosition *)v28, v18);
    if (v14)
      CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  return v5;
}

void sub_1973219DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  if (v14)
    CFRelease(*(CFTypeRef *)(v13 + 8));
  _Unwind_Resume(exception_object);
}

void WebKit::WebChromeClient::relayAccessibilityNotification(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  WebKit::WebPage::relayAccessibilityNotification(v6, a2, a3);
  if (v5)
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

void sub_197321A8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    CFRelease(*(CFTypeRef *)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebEditorClient::handleKeyboardEvent(WebKit::WebEditorClient *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebKit::WebPage *v5;
  uint64_t result;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v5 = (WebKit::WebPage *)(v4 - 16);
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  result = WebKit::WebPage::handleEditingKeyboardEvent(v5, a2);
  if ((_DWORD)result)
    *((_DWORD *)a2 + 5) |= 0x80u;
  return result;
}

void WebKit::WebEditorClient::handleInputMethodKeydown(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 152))
    *(_DWORD *)(a2 + 20) |= 0x80u;
}

uint64_t WebKit::WebEditorClient::hasRichlyEditableSelection(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return WebKit::WebPage::hasRichlyEditableSelection((WebCore::Page **)(v2 - 16));
  else
    return WebKit::WebPage::hasRichlyEditableSelection(0);
}

uint64_t WebKit::WebEditorClient::getPasteboardItemsCount(WebKit::WebEditorClient *this)
{
  return 0;
}

void WebKit::WebEditorClient::documentFragmentFromDelegate(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::WebEditorClient::performsTwoStepPaste()
{
  return 0;
}

IPC::Encoder *WebKit::WebEditorClient::updateStringForFind(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebKit::WebPage *v4;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v4 = (WebKit::WebPage *)(v3 - 16);
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  return WebKit::WebPage::updateStringForFind(v4, a2);
}

uint64_t WebKit::WebEditorClient::overflowScrollPositionChanged(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition((WebCore::Page **)(v2 - 16));
  else
    return WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition(0);
}

uint64_t WebKit::WebEditorClient::subFrameScrollPositionChanged(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition((WebCore::Page **)(v2 - 16));
  else
    return WebKit::WebPage::didChangeSelectionOrOverflowScrollPosition(0);
}

uint64_t WebKit::WebEditorClient::shouldAllowSingleClickToChangeSelection(WebKit::WebEditorClient *this, WebCore::Node *a2, const WebCore::VisibleSelection *a3)
{
  uint64_t v3;
  uint64_t v4;
  WebKit::WebPage *v5;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v5 = (WebKit::WebPage *)(v4 - 16);
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  return WebKit::WebPage::shouldAllowSingleClickToChangeSelection(v5, a2, a3);
}

BOOL WebKit::WebEditorClient::shouldSuppressPasswordEcho(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 4);
  if (v1 && ((v2 = *(_QWORD *)(v1 + 8)) != 0 ? (v3 = v2 - 16) : (v3 = 0), !*(_BYTE *)(v3 + 1295)))
    return *(_BYTE *)(v3 + 1492) != 0;
  else
    return 1;
}

BOOL WebKit::WebEditorClient::shouldRemoveDictationAlternativesAfterEditing(WebKit::WebEditorClient *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return *(_QWORD *)(v2 + 1688) == 0;
}

uint64_t WebKit::UnifiedPDFPlugin::usesAsyncScrolling(WebKit::UnifiedPDFPlugin *this)
{
  return 1;
}

uint64_t WebKit::UnifiedPDFPlugin::isUnifiedPDFPlugin(WebKit::UnifiedPDFPlugin *this)
{
  return 1;
}

uint64_t WebKit::UnifiedPDFPlugin::layerHostingStrategy(WebKit::UnifiedPDFPlugin *this)
{
  return 2;
}

uint64_t WebKit::UnifiedPDFPlugin::wantsWheelEvents(WebKit::UnifiedPDFPlugin *this)
{
  return 0;
}

uint64_t WebKit::UnifiedPDFPlugin::handleWheelEvent()
{
  return 0;
}

uint64_t WebKit::UnifiedPDFPlugin::drawsFindOverlay(WebKit::UnifiedPDFPlugin *this)
{
  return 0;
}

uint64_t WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 64;
    do
    {
      if (!*(_QWORD *)(v4 - 64) && *(_DWORD *)(v4 - 56) == -1 && *(_DWORD *)(v4 - 52) == -1)
        goto LABEL_27;
      v6 = *(WTF **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
        WTF::fastFree(v6, a2);
      }
      v7 = *(_QWORD *)(v4 - 48);
      *(_QWORD *)(v4 - 48) = 0;
      if (!v7)
        goto LABEL_27;
      v8 = *(_QWORD *)(v7 + 8);
      if (__ldaxr((unsigned __int8 *)v8))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v8))
      {
        goto LABEL_15;
      }
      MEMORY[0x19AEABB3C](v8);
LABEL_15:
      v10 = *(_QWORD *)(v8 + 8);
      v11 = v10 - 1;
      *(_QWORD *)(v8 + 8) = v10 - 1;
      if (v10 == 1)
      {
        v15 = *(_QWORD *)(v8 + 16);
        v12 = *(_QWORD *)(v8 + 24);
        *(_QWORD *)(v8 + 24) = 0;
        v13 = v15 != 0;
      }
      else
      {
        v12 = 0;
        v13 = 1;
      }
      v14 = __ldxr((unsigned __int8 *)v8);
      if (v14 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v8))
        {
          if (!v11)
            goto LABEL_23;
          goto LABEL_27;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
      if (!v11)
      {
LABEL_23:
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        if (!v13)
          WTF::fastFree((WTF *)v8, a2);
      }
LABEL_27:
      v4 += 96;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1 + 64;
    do
    {
      if (*(_QWORD *)(v4 - 64) || (*(_DWORD *)(v4 - 56) == -1 ? (v5 = *(_DWORD *)(v4 - 52) == -1) : (v5 = 0), !v5))
      {
        v6 = *(WTF **)v4;
        if (*(_QWORD *)v4)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
          WTF::fastFree(v6, a2);
        }
      }
      v4 += 96;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) == -2)
        goto LABEL_21;
      v5 = *v4;
      *v4 = 0;
      if (!v5)
        goto LABEL_21;
      v6 = *(_QWORD *)(v5 + 8);
      if (__ldaxr((unsigned __int8 *)v6))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v6))
      {
        goto LABEL_9;
      }
      MEMORY[0x19AEABB3C](v6);
LABEL_9:
      v8 = *(_QWORD *)(v6 + 8);
      v9 = v8 - 1;
      *(_QWORD *)(v6 + 8) = v8 - 1;
      if (v8 == 1)
      {
        v13 = *(_QWORD *)(v6 + 16);
        v10 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = 0;
        v11 = v13 != 0;
      }
      else
      {
        v10 = 0;
        v11 = 1;
      }
      v12 = __ldxr((unsigned __int8 *)v6);
      if (v12 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v6))
        {
          if (!v9)
            goto LABEL_17;
          goto LABEL_21;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      if (!v9)
      {
LABEL_17:
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        if (!v11)
          WTF::fastFree((WTF *)v6, a2);
      }
LABEL_21:
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, __int128 **a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (v3 < 0xAAAAAAB)
  {
    v5 = 24 * v3;
    v6 = WTF::fastMalloc((WTF *)(24 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = v6;
    v7 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v7)
    {
      v8 = *a2;
      v9 = 24 * v7;
      do
      {
        v10 = *v8;
        *(_QWORD *)(v6 + 16) = *((_QWORD *)v8 + 2);
        *(_OWORD *)v6 = v10;
        v6 += 24;
        v8 = (__int128 *)((char *)v8 + 24);
        v9 -= 24;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

WTF *WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::remove(uint64_t *a1, void *a2)
{
  WTF *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_OWORD *)a2 = xmmword_1978CF7D0;
  result = (WTF *)*((_QWORD *)a2 + 8);
  if (result)
  {
    *((_QWORD *)a2 + 8) = 0;
    *((_DWORD *)a2 + 18) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(a1, v8 >> 1);
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t result;
  void *v7;
  _DWORD *v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int i;
  unsigned int v22;
  uint64_t v23;
  uint64_t v25;
  WTF *v26;
  _QWORD *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  _QWORD *v41;
  WTF *v42;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::fastMalloc((WTF *)((96 * a2) | 0x10));
  if (a2)
  {
    v8 = (_DWORD *)(result + 104);
    __asm { FMOV            V1.2S, #1.0 }
    v13 = a2;
    do
    {
      *((_QWORD *)v8 - 11) = -1;
      *((_QWORD *)v8 - 10) = -1;
      *(_OWORD *)(v8 - 2) = 0uLL;
      *(_OWORD *)(v8 - 18) = 0uLL;
      *(_OWORD *)(v8 - 14) = 0uLL;
      *(_OWORD *)(v8 - 10) = 0uLL;
      *(_OWORD *)(v8 - 6) = 0uLL;
      *((_QWORD *)v8 - 1) = _D1;
      *v8 = 1065353216;
      v8 += 24;
      --v13;
    }
    while (v13);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v14 = 0;
    while (1)
    {
      v15 = v3 + 96 * v14;
      if (*(_QWORD *)v15 == -1)
        break;
      if (*(_QWORD *)v15)
        goto LABEL_21;
      if (*(_DWORD *)(v15 + 8) != -1 || *(_DWORD *)(v15 + 12) != -1)
        goto LABEL_21;
LABEL_35:
      if (++v14 == v4)
        return WTF::fastFree((WTF *)(v3 - 16), v7);
    }
    if (*(_DWORD *)(v15 + 8) == -1 && *(_DWORD *)(v15 + 12) == -1)
    {
      v39 = v3 + 96 * v14;
      v42 = *(WTF **)(v39 + 64);
      v41 = (_QWORD *)(v39 + 64);
      v40 = v42;
      if (v42)
      {
        *v41 = 0;
        *(_DWORD *)(v3 + 96 * v14 + 72) = 0;
        WTF::fastFree(v40, v7);
      }
      goto LABEL_35;
    }
LABEL_21:
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 8);
    else
      v19 = 0;
    v20 = WebKit::TileForGrid::computeHash((WebKit::TileForGrid *)(v3 + 96 * v14));
    for (i = 0; ; v20 = i + v22)
    {
      v22 = v20 & v19;
      v23 = v18 + 96 * (v20 & v19);
      if (*(_QWORD *)v23 == -1 && *(_DWORD *)(v23 + 8) == -1 && *(_DWORD *)(v23 + 12) == -1)
        break;
      ++i;
    }
    v25 = v18 + 96 * v22;
    v28 = *(WTF **)(v25 + 64);
    v27 = (_QWORD *)(v25 + 64);
    v26 = v28;
    if (v28)
    {
      *v27 = 0;
      *(_DWORD *)(v18 + 96 * v22 + 72) = 0;
      WTF::fastFree(v26, v7);
    }
    *(_OWORD *)v23 = *(_OWORD *)v15;
    v29 = v18 + 96 * v22;
    v30 = v3 + 96 * v14;
    *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
    v31 = *(_OWORD *)(v30 + 24);
    v32 = *(_OWORD *)(v30 + 40);
    *(_BYTE *)(v29 + 56) = *(_BYTE *)(v30 + 56);
    *(_OWORD *)(v29 + 40) = v32;
    *(_OWORD *)(v29 + 24) = v31;
    *v27 = 0;
    v27[1] = 0;
    v34 = *(_QWORD *)(v30 + 64);
    v33 = v30 + 64;
    *(_QWORD *)v33 = 0;
    *v27 = v34;
    v35 = *(_DWORD *)(v33 + 8);
    *(_DWORD *)(v33 + 8) = 0;
    *(_DWORD *)(v29 + 72) = v35;
    v36 = *(_DWORD *)(v33 + 12);
    *(_DWORD *)(v33 + 12) = 0;
    *(_DWORD *)(v29 + 76) = v36;
    v37 = *(_QWORD *)(v33 + 16);
    *(_DWORD *)(v29 + 88) = *(_DWORD *)(v33 + 24);
    *(_QWORD *)(v29 + 80) = v37;
    v38 = *(WTF **)v33;
    if (*(_QWORD *)v33)
    {
      *(_QWORD *)v33 = 0;
      *(_DWORD *)(v33 + 8) = 0;
      WTF::fastFree(v38, v7);
    }
    goto LABEL_35;
  }
  if (v3)
    return WTF::fastFree((WTF *)(v3 - 16), v7);
  return result;
}

uint64_t WebKit::TileForGrid::computeHash(WebKit::TileForGrid *this)
{
  unint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v6;
  __int16 v7;
  char v8;

  v1 = *(_QWORD *)this;
  v2 = *((_DWORD *)this + 2);
  v3 = *((_DWORD *)this + 3);
  v7 = 0;
  v8 = 0;
  v4 = (v1 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v1 - 1640531527) << 16) ^ ((unsigned __int16)v1
                                                                                          - 1640531527);
  LODWORD(v1) = (v1 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(v1) + (v4 >> 11)) << 16) ^ (v4 + WORD2(v1) + (v4 >> 11));
  LODWORD(v1) = (v2 >> 5) & 0x7FFF800 ^ (((_DWORD)v1 + (unsigned __int16)v2 + (v1 >> 11)) << 16) ^ (v1 + (unsigned __int16)v2 + (v1 >> 11));
  v6 = ((v3 >> 5) & 0x7FFF800 ^ (((_DWORD)v1 + (unsigned __int16)v3 + (v1 >> 11)) << 16) ^ (v1 + (unsigned __int16)v3 + (v1 >> 11)))
     + (((v3 >> 5) & 0x7FFF800 ^ (((_DWORD)v1 + (unsigned __int16)v3 + (v1 >> 11)) << 16) ^ ((_DWORD)v1 + (unsigned __int16)v3 + (v1 >> 11))) >> 11);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v6);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashMap<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::deallocateTable(_DWORD **a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (_DWORD *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (v5[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
          else
            --v5[2];
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

void WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  _OWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  __int16 v35;
  char v36;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    while (1)
    {
      v13 = v4 + 24 * v11;
      if (*(_QWORD *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 == 0)
        {
          v16 = v4 + 24 * v11;
          v17 = *(unsigned int **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (!v17)
            goto LABEL_27;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (v19)
            goto LABEL_27;
        }
        else
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v34 = -1640531527;
          v35 = 0;
          v36 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v34, (_QWORD *)(v4 + 24 * v11));
          v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v34);
          v21 = 0;
          do
          {
            v22 = v20 & v15;
            v23 = (_OWORD *)(v14 + 24 * (v20 & v15));
            v20 = ++v21 + (v20 & v15);
          }
          while (*v23 != 0);
          v24 = v14 + 24 * v22;
          v27 = *(unsigned int **)(v24 + 16);
          v26 = (_QWORD *)(v24 + 16);
          v25 = v27;
          *v26 = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr(v25);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v25));
            if (!v29)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, v8);
            }
          }
          *v23 = *(_OWORD *)v13;
          v30 = v4 + 24 * v11;
          v31 = *(_QWORD *)(v30 + 16);
          *(_QWORD *)(v30 + 16) = 0;
          *v26 = v31;
          v17 = *(unsigned int **)(v30 + 16);
          *(_QWORD *)(v30 + 16) = 0;
          if (!v17)
            goto LABEL_27;
          do
          {
            v32 = __ldaxr(v17);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v17));
          if (v33)
            goto LABEL_27;
        }
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v8);
      }
LABEL_27:
      if (++v11 == v12)
        goto LABEL_30;
    }
  }
  if (v4)
LABEL_30:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::NeverDestroyed<WTF::String,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 == 1)
    {
      v4 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = v6;
    }
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

unsigned int *WebKit::UnifiedPDFPlugin::updatePageBackgroundLayers(void)::$_1::operator()(uint64_t a1, uint64_t a2, const Color *a3, WebCore::IntPoint *a4)
{
  unsigned int *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21;

  v21 = a2;
  WebCore::DropShadowFilterOperation::create((WebCore::DropShadowFilterOperation *)&v21, a4, a3, (uint64_t *)&v17);
  v5 = v17;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  LODWORD(v19) = 1;
  v18 = v6;
  v7 = v5 + 2;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *v6 = v5;
  ++HIDWORD(v19);
  WebCore::FilterOperations::FilterOperations();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 288))(a1, v20);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v9);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v10);
  if (v5)
  {
    do
    {
      v11 = __ldaxr(v7);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v7));
    if (!v12)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    v14 = result + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void sub_1973227E4(_Unwind_Exception *a1, void *a2, unsigned int *a3, ...)
{
  unsigned int *v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va1, a2);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, v5);
  if (v3)
  {
    v6 = v3 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  if (a3)
  {
    v9 = a3 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, a3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a3 + 8))(a3);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>(uint64_t result, _BYTE *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  if (a3)
    v4 = a3 - 1;
  else
    v4 = 0;
  v5 = v4 >> 31;
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x197322A18);
  }
  v6 = a4;
  v8 = (_QWORD *)result;
  v9 = a4;
  do
  {
    LODWORD(v5) = v5 + 1;
    v10 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v10);
  if (((v5 | v4) & 0x80000000) != 0)
    goto LABEL_20;
  v11 = (v4 + v5);
  if (__OFADD__((_DWORD)v4, (_DWORD)v5))
    goto LABEL_20;
  if (!(_DWORD)v11)
  {
    v12 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_19;
  }
  if ((v11 & 0x80000000) != 0)
  {
LABEL_20:
    v12 = 0;
  }
  else
  {
    result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
    v12 = v15[0];
    if (v15[0])
    {
      v13 = (_BYTE *)(v15[0] + 20);
      *(_DWORD *)v15[0] = 2;
      *(_DWORD *)(v12 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v12 + 20;
      *(_DWORD *)(v12 + 16) = 4;
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 == 1)
          *v13 = *a2;
        else
          result = (uint64_t)memcpy((void *)(v12 + 20), a2, v4);
      }
      v14 = 0;
      do
      {
        *((_BYTE *)&v15[3] + v14--) = (v6 % 0xA) | 0x30;
        v10 = v6 > 9;
        v6 /= 0xAuLL;
      }
      while (v10);
      if (v14 + 26 <= 25)
        result = (uint64_t)memcpy(&v13[v4], (char *)&v15[3] + v14 + 1, -v14);
    }
  }
LABEL_19:
  *v8 = v12;
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long>>,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashMap<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,unsigned long,WTF::DefaultHash<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>>>::expand(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  void *v7;
  uint64_t i;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v9 = (_QWORD *)(v2 + 16 * i);
      v10 = (_DWORD *)*v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          v11 = *a1;
          if (*a1)
            v12 = *(_DWORD *)(v11 - 8);
          else
            v12 = 0;
          v13 = ((unint64_t)v10 + ~((_QWORD)v10 << 32)) ^ (((unint64_t)v10 + ~((_QWORD)v10 << 32)) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          v17 = 1;
          do
          {
            v18 = v16;
            v19 = *(_QWORD *)(v11 + 16 * v16);
            v16 = (v16 + v17++) & v12;
          }
          while (v19);
          v20 = (_QWORD *)(v11 + 16 * v18);
          v21 = *(_QWORD *)(v2 + 16 * i + 8);
          *v20 = 0;
          v22 = (_DWORD *)*v9;
          *v9 = 0;
          *v20 = v22;
          v20[1] = v21;
          v23 = (_DWORD *)*v9;
          *v9 = 0;
          if (v23)
          {
            if (v23[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
            else
              --v23[2];
          }
        }
        else
        {
          *v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

void WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(a1, v3);
}

uint64_t std::__optional_destruct_base<WebKit::PDFLayoutRow,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF **)a1;
    if (a1 + 16 != *(_QWORD *)a1 && v3 != 0)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  return a1;
}

_QWORD *std::pair<WTF::String,WTF::RetainPtr<PDFSelection>>::pair[abi:sn180100]<WTF::String,WTF::RetainPtr<PDFSelection>&,0>(_QWORD *a1, uint64_t *a2, const void **a3)
{
  uint64_t v4;
  const void *v5;

  v4 = *a2;
  *a2 = 0;
  v5 = *a3;
  *a1 = v4;
  a1[1] = v5;
  if (v5)
    CFRetain(v5);
  return a1;
}

void sub_197322CD0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(unsigned __int8 *this, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  WebKit::AsyncPDFRenderer *v6;
  BOOL v7;
  int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEABB3C](this);
LABEL_5:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v11 = *((_QWORD *)v2 + 2);
    v6 = (WebKit::AsyncPDFRenderer *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v11 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
  {
    WebKit::AsyncPDFRenderer::~AsyncPDFRenderer(v6, a2);
    this = (unsigned __int8 *)WTF::fastFree(v9, v10);
  }
  if (!v7)
    return (unsigned __int8 *)WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t i;
  __int128 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_OWORD *)(result + 24);
    do
    {
      *((_QWORD *)v10 - 1) = -1;
      *v10 = 0uLL;
      v10[1] = 0uLL;
      v10 = (_OWORD *)((char *)v10 + 40);
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (__int128 *)(v4 + 40 * i);
      if (*(_QWORD *)v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v13 = *a1;
        if (*a1)
          v14 = *(_DWORD *)(v13 - 8);
        else
          v14 = 0;
        v15 = (*(_QWORD *)v12 + ~(*(_QWORD *)v12 << 32)) ^ ((*(_QWORD *)v12 + ~(*(_QWORD *)v12 << 32)) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((unint64_t)(v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = 1;
        do
        {
          v20 = v13 + 40 * v18;
          v8 = *(void **)v20;
          v18 = (v18 + v19++) & v14;
        }
        while (*(_QWORD *)v20 != -1);
        v21 = *v12;
        v22 = v12[1];
        *(_QWORD *)(v20 + 32) = *((_QWORD *)v12 + 4);
        *(_OWORD *)v20 = v21;
        *(_OWORD *)(v20 + 16) = v22;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::generatePreviewImageForPage(unsigned long,float)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  const void *v3;
  uint64_t v4;

  *a1 = &off_1E34D35B8;
  v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::generatePreviewImageForPage(unsigned long,float)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D35B8;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::generatePreviewImageForPage(unsigned long,float)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  CGContext *v11;
  CGContext *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  WTF::ThreadSafeWeakPtrControlBlock *v24;
  WTF::ThreadSafeWeakPtrControlBlock *v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE v52[32];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v52 = *(_QWORD *)(a1 + 40);
  WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)a1);
  result = WebCore::ImageBuffer::create();
  if (!v56)
    return result;
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v55, v56);
  v4 = (_OWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, 1);
  v7 = (void *)objc_msgSend(*(id *)(a1 + 16), "pageAtIndex:", v5, *(_QWORD *)v52);
  v8 = v7;
  if (v7)
  {
    CFRetain(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, 1);
    *(_OWORD *)v52 = *(_OWORD *)(a1 + 32);
    v9 = atomic_load((unsigned __int8 *)(v2 + 120));
    if ((v9 & 1) != 0)
    {
      v57 = 0x11040000FF800020;
      (*(void (**)(uint64_t, _BYTE *, unint64_t *))(*(_QWORD *)v6 + 224))(v6, v52, &v57);
      if ((v57 & 0x8000000000000) != 0)
      {
        v49 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFLL);
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
        {
          atomic_store(1u, v49);
          WTF::fastFree((WTF *)v49, v10);
        }
      }
    }
    (*(void (**)(uint64_t, float, float))(*(_QWORD *)v6 + 648))(v6, *(float *)v52, *(float *)&v52[4] + *(float *)&v52[12]);
    v57 = 0xBF8000003F800000;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v6 + 632))(v6, &v57);
    v11 = (CGContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    CGContextSetShouldSubpixelQuantizeFonts(v11, 0);
    v12 = (CGContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    CGContextSetAllowsFontSubpixelPositioning(v12, 1);
    objc_msgSend(v8, "drawWithBox:toContext:", 1, (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 104))(v6, 1);
    CFRelease(v8);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 104))(v6, 1);
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v55, v13);
  v14 = v56;
  v56 = 0;
  v54 = v14;
  WebCore::ImageBuffer::sinkIntoBufferForDifferentThread();
  v16 = v54;
  v54 = 0;
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (__ldaxr((unsigned __int8 *)v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v17))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEABB3C](v17);
LABEL_11:
    v19 = *(_QWORD *)(v17 + 8);
    v20 = v19 - 1;
    *(_QWORD *)(v17 + 8) = v19 - 1;
    if (v19 == 1)
    {
      v47 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 24) = 0;
      v22 = v47 != 0;
    }
    else
    {
      v21 = 0;
      v22 = 1;
    }
    v23 = __ldxr((unsigned __int8 *)v17);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v17))
      {
        if (v20)
          goto LABEL_23;
LABEL_19:
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        if (!v22)
          WTF::fastFree((WTF *)v17, v15);
        goto LABEL_23;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_23:
  v24 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v2 + 16);
  if (v24)
    v25 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v24);
  else
    v25 = 0;
  v26 = v57;
  v57 = 0;
  *(_OWORD *)v52 = *v4;
  *(_OWORD *)&v52[12] = *(_OWORD *)((char *)v4 + 12);
  v27 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v27 = &off_1E34D35E0;
  *(_QWORD *)(v27 + 8) = v25;
  *(_QWORD *)(v27 + 16) = v2;
  *(_QWORD *)(v27 + 24) = v26;
  v28 = *(_OWORD *)&v52[16];
  *(_OWORD *)(v27 + 32) = *(_OWORD *)v52;
  *(_OWORD *)(v27 + 48) = v28;
  v53 = v27;
  WTF::callOnMainRunLoop();
  result = v53;
  v53 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v30 = v57;
  v57 = 0;
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + 8);
    if (__ldaxr((unsigned __int8 *)v31))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v31))
    {
      goto LABEL_32;
    }
    result = MEMORY[0x19AEABB3C](v31);
LABEL_32:
    v33 = *(_QWORD *)(v31 + 8);
    v34 = v33 - 1;
    *(_QWORD *)(v31 + 8) = v33 - 1;
    if (v33 == 1)
    {
      v48 = *(_QWORD *)(v31 + 16);
      v35 = *(_QWORD *)(v31 + 24);
      *(_QWORD *)(v31 + 24) = 0;
      v36 = v48 != 0;
    }
    else
    {
      v35 = 0;
      v36 = 1;
    }
    v37 = __ldxr((unsigned __int8 *)v31);
    if (v37 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v31))
      {
        if (v34)
          goto LABEL_44;
LABEL_40:
        if (v35)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        if (!v36)
          result = WTF::fastFree((WTF *)v31, v29);
        goto LABEL_44;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v31);
    if (v34)
      goto LABEL_44;
    goto LABEL_40;
  }
LABEL_44:
  v38 = v56;
  v56 = 0;
  if (!v38)
    return result;
  v39 = *(_QWORD *)(v38 + 8);
  if (__ldaxr((unsigned __int8 *)v39))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v39))
  {
    goto LABEL_49;
  }
  result = MEMORY[0x19AEABB3C](v39);
LABEL_49:
  v41 = *(_QWORD *)(v39 + 8);
  v42 = v41 - 1;
  *(_QWORD *)(v39 + 8) = v41 - 1;
  if (v41 == 1)
  {
    v46 = *(_QWORD *)(v39 + 16);
    v43 = *(_QWORD *)(v39 + 24);
    *(_QWORD *)(v39 + 24) = 0;
    v44 = v46 != 0;
  }
  else
  {
    v43 = 0;
    v44 = 1;
  }
  v45 = __ldxr((unsigned __int8 *)v39);
  if (v45 != 1)
  {
    __clrex();
LABEL_56:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v39);
    if (v42)
      return result;
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v39))
    goto LABEL_56;
  if (v42)
    return result;
LABEL_57:
  if (v43)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  if (!v44)
    return WTF::fastFree((WTF *)v39, v29);
  return result;
}

void sub_1973234C8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  const void *v19;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  uint64_t v34;

  if ((a18 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, a2);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 104))(v18, 1);
  CFRelease(v19);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 104))(v18, 1);
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&a16, v24);
  v26 = a17;
  a17 = 0;
  if (!v26)
LABEL_24:
    _Unwind_Resume(a1);
  v27 = *(_QWORD *)(v26 + 8);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
LABEL_12:
    v29 = *(_QWORD *)(v27 + 8);
    v30 = v29 - 1;
    *(_QWORD *)(v27 + 8) = v29 - 1;
    if (v29 == 1)
    {
      v34 = *(_QWORD *)(v27 + 16);
      v31 = *(_QWORD *)(v27 + 24);
      *(_QWORD *)(v27 + 24) = 0;
      v32 = v34 != 0;
    }
    else
    {
      v31 = 0;
      v32 = 1;
    }
    v33 = __ldxr((unsigned __int8 *)v27);
    if (v33 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v27))
      {
LABEL_19:
        if (!v30)
        {
          if (v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          if (!v32)
            WTF::fastFree((WTF *)v27, v25);
        }
        goto LABEL_24;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
    goto LABEL_19;
  }
  MEMORY[0x19AEABB3C](v27);
  goto LABEL_12;
}

uint64_t *WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -2;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(result, v6 >> 1);
  }
  return result;
}

uint64_t *WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned long>>,unsigned long>(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = (uint64_t *)(a1 + 40 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8 != -1)
    {
      v6 = (v6 + v9) & v2;
      v7 = (uint64_t *)(a1 + 40 * v6);
      v8 = *v7;
      ++v9;
      if (*v7 == a2)
        return v7;
    }
    return (uint64_t *)(a1 + 40 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v8 = a2;
    v9 = (_QWORD *)(result + 24);
    do
    {
      *(v9 - 1) = -1;
      *v9 = 0;
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    v11 = v4;
    v54 = v4;
    while (1)
    {
      v12 = (uint64_t *)(v3 + 16 * v10);
      v13 = *v12;
      if (*v12 == -2)
        goto LABEL_68;
      if (v13 != -1)
      {
        v18 = *a1;
        if (*a1)
          v19 = *(_DWORD *)(v18 - 8);
        else
          v19 = 0;
        v20 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
        v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
        v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
        v23 = v19 & ((v22 >> 31) ^ v22);
        v24 = 1;
        do
        {
          v25 = v23;
          v26 = *(_QWORD *)(v18 + 16 * v23);
          v23 = (v23 + v24++) & v19;
        }
        while (v26 != -1);
        v27 = (uint64_t *)(v18 + 16 * v25);
        v28 = v27[1];
        v27[1] = 0;
        if (!v28)
          goto LABEL_50;
        v29 = *(_QWORD *)(v28 + 8);
        if (__ldaxr((unsigned __int8 *)v29))
        {
          __clrex();
          goto LABEL_37;
        }
        if (__stxr(1u, (unsigned __int8 *)v29))
LABEL_37:
          MEMORY[0x19AEABB3C](v29);
        v36 = *(_QWORD *)(v29 + 8);
        v37 = v36 - 1;
        *(_QWORD *)(v29 + 8) = v36 - 1;
        if (v36 == 1)
        {
          v52 = *(_QWORD *)(v29 + 16);
          v38 = *(_QWORD *)(v29 + 24);
          *(_QWORD *)(v29 + 24) = 0;
          v39 = v52 != 0;
        }
        else
        {
          v38 = 0;
          v39 = 1;
        }
        v40 = __ldxr((unsigned __int8 *)v29);
        if (v40 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v29))
          {
            if (!v37)
            {
LABEL_46:
              if (v38)
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
              if (!v39)
                WTF::fastFree((WTF *)v29, v7);
            }
LABEL_50:
            *v27 = *v12;
            v41 = v3 + 16 * v10;
            v42 = *(_QWORD *)(v41 + 8);
            *(_QWORD *)(v41 + 8) = 0;
            v27[1] = v42;
            v43 = *(_QWORD *)(v41 + 8);
            *(_QWORD *)(v41 + 8) = 0;
            if (!v43)
              goto LABEL_67;
            v44 = *(_QWORD *)(v43 + 8);
            if (__ldaxr((unsigned __int8 *)v44))
            {
              __clrex();
              goto LABEL_54;
            }
            if (__stxr(1u, (unsigned __int8 *)v44))
LABEL_54:
              MEMORY[0x19AEABB3C](v44);
            v46 = *(_QWORD *)(v44 + 8);
            v47 = v46 - 1;
            *(_QWORD *)(v44 + 8) = v46 - 1;
            if (v46 == 1)
            {
              v53 = *(_QWORD *)(v44 + 16);
              v48 = *(_QWORD *)(v44 + 24);
              *(_QWORD *)(v44 + 24) = 0;
              v49 = v53 != 0;
            }
            else
            {
              v48 = 0;
              v49 = 1;
            }
            v50 = __ldxr((unsigned __int8 *)v44);
            if (v50 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v44))
              {
                if (!v47)
                {
LABEL_63:
                  if (v48)
                    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
                  if (!v49)
                    WTF::fastFree((WTF *)v44, v7);
                }
LABEL_67:
                v11 = v54;
                goto LABEL_68;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v44);
            if (!v47)
              goto LABEL_63;
            goto LABEL_67;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v29);
        if (!v37)
          goto LABEL_46;
        goto LABEL_50;
      }
      v14 = v3 + 16 * v10;
      v15 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      if (!v15)
        goto LABEL_68;
      v16 = *(_QWORD *)(v15 + 8);
      if (__ldaxr((unsigned __int8 *)v16))
        break;
      if (__stxr(1u, (unsigned __int8 *)v16))
        goto LABEL_23;
LABEL_24:
      v31 = *(_QWORD *)(v16 + 8);
      v32 = v31 - 1;
      *(_QWORD *)(v16 + 8) = v31 - 1;
      if (v31 == 1)
      {
        v51 = *(_QWORD *)(v16 + 16);
        v33 = *(_QWORD *)(v16 + 24);
        *(_QWORD *)(v16 + 24) = 0;
        v34 = v51 != 0;
      }
      else
      {
        v33 = 0;
        v34 = 1;
      }
      v35 = __ldxr((unsigned __int8 *)v16);
      if (v35 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v16))
        {
          if (!v32)
            goto LABEL_32;
          goto LABEL_68;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
      if (!v32)
      {
LABEL_32:
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        if (!v34)
          WTF::fastFree((WTF *)v16, v7);
      }
LABEL_68:
      if (++v10 == v11)
        return WTF::fastFree((WTF *)(v3 - 16), v7);
    }
    __clrex();
LABEL_23:
    MEMORY[0x19AEABB3C](v16);
    goto LABEL_24;
  }
  if (v3)
    return WTF::fastFree((WTF *)(v3 - 16), v7);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::paintPagePreviewOnWorkQueue(WTF::RetainPtr<PDFDocument> &&,WebKit::AsyncPDFRenderer::PagePreviewRequest const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v13;

  *a1 = &off_1E34D35E0;
  v3 = a1[3];
  a1[3] = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v13 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v13 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = (unsigned __int8 *)a1[1];
  a1[1] = 0;
  if (v11)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::paintPagePreviewOnWorkQueue(WTF::RetainPtr<PDFDocument> &&,WebKit::AsyncPDFRenderer::PagePreviewRequest const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v13;

  *(_QWORD *)this = &off_1E34D35E0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v13 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v13 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::paintPagePreviewOnWorkQueue(WTF::RetainPtr<PDFDocument> &&,WebKit::AsyncPDFRenderer::PagePreviewRequest const&)::$_0,void>::call(unsigned __int8 *result)
{
  WTF::Lock *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;

  v1 = (WTF::Lock *)*((_QWORD *)result + 1);
  if (v1)
  {
    v2 = result;
    result = (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v54, v1, *((_QWORD *)result + 2));
    v3 = v54;
    if (v54)
    {
      v4 = *(void **)(v54 + 24);
      if (!v4)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), v4);
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v55, (WTF::Lock *)v4, *(_QWORD *)(v54 + 32));
      if (!v55)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), v4);
      v5 = *((_QWORD *)v2 + 4);
      v6 = *(_QWORD *)(v3 + 104);
      v7 = WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned long>>,unsigned long>(v6, v5);
      v8 = v7;
      if (v6)
      {
        v9 = (uint64_t *)(v6 + 40 * *(unsigned int *)(v6 - 4));
        if (v9 == v7)
          goto LABEL_12;
      }
      else
      {
        if (!v7)
          goto LABEL_12;
        v9 = 0;
      }
      if (v9 != v7)
        WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WebKit::AsyncPDFRenderer::PagePreviewRequest,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebKit::AsyncPDFRenderer::PagePreviewRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::remove((uint64_t *)(v3 + 104), v7);
LABEL_12:
      v12 = *(_QWORD *)(v3 + 112);
      v11 = (uint64_t *)(v3 + 112);
      v10 = v12;
      if (v12
        || (WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand(v11),
            (v10 = *v11) != 0))
      {
        v13 = *(_DWORD *)(v10 - 8);
      }
      else
      {
        v13 = 0;
      }
      v14 = (v5 + ~(v5 << 32)) ^ ((v5 + ~(v5 << 32)) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = (unint64_t *)(v10 + 16 * v17);
      v19 = *v18;
      if (*v18 != -1)
      {
        v20 = 0;
        v21 = 1;
        while (v19 != v5)
        {
          if (v19 == -2)
            v20 = v18;
          v17 = (v17 + v21) & v13;
          v18 = (unint64_t *)(v10 + 16 * v17);
          v19 = *v18;
          ++v21;
          if (*v18 == -1)
          {
            if (v20)
            {
              *v20 = -1;
              v20[1] = 0;
              --*(_DWORD *)(*v11 - 16);
              v18 = v20;
            }
            goto LABEL_23;
          }
        }
        v26 = *((_QWORD *)v2 + 3);
        *((_QWORD *)v2 + 3) = 0;
        v27 = v18[1];
        v18[1] = v26;
        if (!v27)
          goto LABEL_67;
        v28 = *(_QWORD *)(v27 + 8);
        if (__ldaxr((unsigned __int8 *)v28))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v28))
        {
          goto LABEL_55;
        }
        MEMORY[0x19AEABB3C](v28, v8);
LABEL_55:
        v41 = *(_QWORD *)(v28 + 8);
        v42 = v41 - 1;
        *(_QWORD *)(v28 + 8) = v41 - 1;
        if (v41 == 1)
        {
          v53 = *(_QWORD *)(v28 + 16);
          v43 = *(_QWORD *)(v28 + 24);
          *(_QWORD *)(v28 + 24) = 0;
          v44 = v53 != 0;
        }
        else
        {
          v43 = 0;
          v44 = 1;
        }
        v45 = __ldxr((unsigned __int8 *)v28);
        if (v45 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v28))
          {
LABEL_62:
            if (!v42)
            {
              if (v43)
                (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v43 + 8))(v43, v8);
              if (!v44)
                WTF::fastFree((WTF *)v28, v8);
            }
LABEL_67:
            v46 = v55;
            v47 = *(_QWORD *)(v55 + 640);
            if (!v47)
              goto LABEL_79;
            WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v56, v47 + 184);
            if (v5 >= v57)
            {
              WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v48);
              goto LABEL_79;
            }
            v49 = *(_QWORD *)(v56 + 8 * v5);
            v50 = *(_DWORD *)(v49 + 8);
            *(_DWORD *)(v49 + 8) = v50 + 1;
            if (*(_DWORD *)(v49 + 196))
            {
              v51 = **(_DWORD ***)(v49 + 184);
              if (v50)
              {
LABEL_71:
                *(_DWORD *)(v49 + 8) = v50;
                goto LABEL_75;
              }
            }
            else
            {
              v51 = 0;
              if (v50)
                goto LABEL_71;
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
LABEL_75:
            WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v48);
            if (v51)
            {
              ++v51[2];
              (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 320))(v51);
              if (v51[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 16))(v51);
              else
                --v51[2];
            }
LABEL_79:
            result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v46 + 72), v8);
            v3 = v54;
            if (!v54)
              return result;
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), v4);
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v28);
        goto LABEL_62;
      }
LABEL_23:
      *v18 = v5;
      v22 = *((_QWORD *)v2 + 3);
      *((_QWORD *)v2 + 3) = 0;
      v23 = v18[1];
      v18[1] = v22;
      if (!v23)
      {
LABEL_43:
        v35 = *v11;
        if (*v11)
          v36 = *(_DWORD *)(v35 - 12) + 1;
        else
          v36 = 1;
        *(_DWORD *)(v35 - 12) = v36;
        v37 = *v11;
        if (*v11)
          v38 = *(_DWORD *)(v37 - 12);
        else
          v38 = 0;
        v39 = (*(_DWORD *)(v37 - 16) + v38);
        v40 = *(unsigned int *)(v37 - 4);
        if (v40 > 0x400)
        {
          if (v40 > 2 * v39)
            goto LABEL_67;
        }
        else if (3 * v40 > 4 * v39)
        {
          goto LABEL_67;
        }
        WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand(v11);
        goto LABEL_67;
      }
      v24 = *(_QWORD *)(v23 + 8);
      if (__ldaxr((unsigned __int8 *)v24))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v24))
      {
        goto LABEL_31;
      }
      MEMORY[0x19AEABB3C](v24, v8);
LABEL_31:
      v30 = *(_QWORD *)(v24 + 8);
      v31 = v30 - 1;
      *(_QWORD *)(v24 + 8) = v30 - 1;
      if (v30 == 1)
      {
        v52 = *(_QWORD *)(v24 + 16);
        v32 = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v24 + 24) = 0;
        v33 = v52 != 0;
      }
      else
      {
        v32 = 0;
        v33 = 1;
      }
      v34 = __ldxr((unsigned __int8 *)v24);
      if (v34 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v24))
        {
LABEL_38:
          if (!v31)
          {
            if (v32)
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v32 + 8))(v32, v8);
            if (!v33)
              WTF::fastFree((WTF *)v24, v8);
          }
          goto LABEL_43;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
      goto LABEL_38;
    }
  }
  return result;
}

void sub_1973242A0(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DWORD *v9;
  uint64_t v10;
  void *v12;

  if (v9[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
  else
    --v9[2];
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v10 + 72), a2);
  if (a9)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a9 + 16), v12);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::IntHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(uint64_t *a1, WebKit::TileForGrid *this)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  int i;
  int v8;
  uint64_t result;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WebKit::TileForGrid::computeHash(this);
  for (i = 0; ; v6 = i + v8)
  {
    v8 = v6 & v5;
    result = v2 + 96 * (v6 & v5);
    if (*(_QWORD *)result == *(_QWORD *)this
      && *(_DWORD *)(result + 8) == *((_DWORD *)this + 2)
      && *(_DWORD *)(result + 12) == *((_DWORD *)this + 3))
    {
      break;
    }
    if (*(_QWORD *)result == -1 && *(_DWORD *)(result + 8) == -1 && *(_DWORD *)(result + 12) == -1)
    {
      if (!*a1)
        return 0;
      return *a1 + 96 * *(unsigned int *)(*a1 - 4);
    }
    ++i;
  }
  return result;
}

WTF *WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::remove(uint64_t *a1, void *a2)
{
  WTF *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return (WTF *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(a1, v8 >> 1);
  }
  return result;
}

WTF *WTF::KeyValuePairHashTraits<WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>>::customDeleteBucket(uint64_t a1, void *a2)
{
  WTF *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;

  *(_OWORD *)a1 = xmmword_1978CF7D0;
  result = *(WTF **)(a1 + 64);
  if (result)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_8;
    }
    result = (WTF *)MEMORY[0x19AEABB3C](v5);
LABEL_8:
    v7 = *(_QWORD *)(v5 + 8);
    v8 = v7 - 1;
    *(_QWORD *)(v5 + 8) = v7 - 1;
    if (v7 == 1)
    {
      v12 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      v10 = v12 != 0;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
        if (v8)
          return result;
LABEL_16:
        if (v9)
          result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        if (!v10)
          return (WTF *)WTF::fastFree((WTF *)v5, a2);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      return result;
    goto LABEL_16;
  }
  return result;
}

uint64_t WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  void *v7;
  _DWORD *v8;
  uint64_t v13;
  uint64_t v14;
  WebKit::TileForGrid *v15;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int i;
  unsigned int v22;
  uint64_t v23;
  uint64_t v25;
  WTF *v26;
  _QWORD *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  WTF *v58;
  _QWORD *v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = WTF::fastMalloc((WTF *)((96 * a2) | 0x10));
  if (a2)
  {
    v8 = (_DWORD *)(result + 104);
    __asm { FMOV            V1.2S, #1.0 }
    v13 = a2;
    do
    {
      *((_QWORD *)v8 - 11) = -1;
      *((_QWORD *)v8 - 10) = -1;
      *(_OWORD *)(v8 - 2) = 0uLL;
      *(_OWORD *)(v8 - 18) = 0uLL;
      *(_OWORD *)(v8 - 14) = 0uLL;
      *(_OWORD *)(v8 - 10) = 0uLL;
      *(_OWORD *)(v8 - 6) = 0uLL;
      *((_QWORD *)v8 - 1) = _D1;
      *v8 = 1065353216;
      v8 += 24;
      --v13;
    }
    while (v13);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v14 = 0;
    v74 = v4;
    v75 = v3;
    while (1)
    {
      v15 = (WebKit::TileForGrid *)(v3 + 96 * v14);
      if (*(_QWORD *)v15 != -1)
      {
        if (!*(_QWORD *)v15 && *((_DWORD *)v15 + 2) == -1 && *((_DWORD *)v15 + 3) == -1)
          goto LABEL_70;
LABEL_21:
        v18 = *a1;
        if (*a1)
          v19 = *(_DWORD *)(v18 - 8);
        else
          v19 = 0;
        v76 = (_OWORD *)(v3 + 96 * v14);
        v20 = WebKit::TileForGrid::computeHash(v15);
        for (i = 0; ; v20 = i + v22)
        {
          v22 = v20 & v19;
          v23 = v18 + 96 * (v20 & v19);
          if (*(_QWORD *)v23 == -1 && *(_DWORD *)(v23 + 8) == -1 && *(_DWORD *)(v23 + 12) == -1)
            break;
          ++i;
        }
        v25 = v18 + 96 * v22;
        v28 = *(WTF **)(v25 + 64);
        v27 = (_QWORD *)(v25 + 64);
        v26 = v28;
        if (v28)
        {
          *v27 = 0;
          *(_DWORD *)(v18 + 96 * v22 + 72) = 0;
          WTF::fastFree(v26, v7);
        }
        v29 = *(v27 - 6);
        *(v27 - 6) = 0;
        if (!v29)
          goto LABEL_50;
        v30 = *(_QWORD *)(v29 + 8);
        if (__ldaxr((unsigned __int8 *)v30))
        {
          __clrex();
          goto LABEL_37;
        }
        if (__stxr(1u, (unsigned __int8 *)v30))
LABEL_37:
          MEMORY[0x19AEABB3C](v30);
        v32 = *(_QWORD *)(v30 + 8);
        v33 = v32 - 1;
        *(_QWORD *)(v30 + 8) = v32 - 1;
        if (v32 == 1)
        {
          v69 = *(_QWORD *)(v30 + 16);
          v34 = *(_QWORD *)(v30 + 24);
          *(_QWORD *)(v30 + 24) = 0;
          v35 = v69 != 0;
        }
        else
        {
          v34 = 0;
          v35 = 1;
        }
        v73 = v35;
        v36 = __ldxr((unsigned __int8 *)v30);
        if (v36 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v30))
          {
            if (!v33)
            {
LABEL_46:
              if (v34)
                (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
              if (!v73)
                WTF::fastFree((WTF *)v30, v7);
            }
LABEL_50:
            *(_OWORD *)v23 = *v76;
            v37 = v75 + 96 * v14;
            v39 = *(_QWORD *)(v37 + 16);
            v38 = (uint64_t *)(v37 + 16);
            *(_QWORD *)(v37 + 16) = 0;
            *(v27 - 6) = v39;
            v40 = v18 + 96 * v22;
            v41 = *(_OWORD *)(v37 + 24);
            v42 = *(_OWORD *)(v37 + 40);
            *(_BYTE *)(v40 + 56) = *(_BYTE *)(v37 + 56);
            *(_OWORD *)(v40 + 40) = v42;
            *(_OWORD *)(v40 + 24) = v41;
            *v27 = 0;
            v27[1] = 0;
            v44 = *(_QWORD *)(v37 + 64);
            v43 = v37 + 64;
            *(_QWORD *)v43 = 0;
            *v27 = v44;
            v45 = *(_DWORD *)(v43 + 8);
            *(_DWORD *)(v43 + 8) = 0;
            *(_DWORD *)(v40 + 72) = v45;
            v46 = *(_DWORD *)(v43 + 12);
            *(_DWORD *)(v43 + 12) = 0;
            *(_DWORD *)(v40 + 76) = v46;
            v47 = *(_QWORD *)(v43 + 16);
            *(_DWORD *)(v40 + 88) = *(_DWORD *)(v43 + 24);
            *(_QWORD *)(v40 + 80) = v47;
            v48 = *(WTF **)v43;
            if (*(_QWORD *)v43)
            {
              *(_QWORD *)v43 = 0;
              *(_DWORD *)(v43 + 8) = 0;
              WTF::fastFree(v48, v7);
            }
            v49 = *v38;
            *v38 = 0;
            if (!v49)
              goto LABEL_69;
            v50 = *(_QWORD *)(v49 + 8);
            if (__ldaxr((unsigned __int8 *)v50))
            {
              __clrex();
              goto LABEL_56;
            }
            if (__stxr(1u, (unsigned __int8 *)v50))
LABEL_56:
              MEMORY[0x19AEABB3C](v50);
            v52 = *(_QWORD *)(v50 + 8);
            v53 = v52 - 1;
            *(_QWORD *)(v50 + 8) = v52 - 1;
            if (v52 == 1)
            {
              v70 = *(_QWORD *)(v50 + 16);
              v54 = *(_QWORD *)(v50 + 24);
              *(_QWORD *)(v50 + 24) = 0;
              v55 = v70 != 0;
            }
            else
            {
              v54 = 0;
              v55 = 1;
            }
            v56 = __ldxr((unsigned __int8 *)v50);
            if (v56 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v50))
              {
                if (!v53)
                {
LABEL_65:
                  if (v54)
                    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
                  if (!v55)
                    WTF::fastFree((WTF *)v50, v7);
                }
LABEL_69:
                v3 = v75;
                goto LABEL_70;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v50);
            if (!v53)
              goto LABEL_65;
            goto LABEL_69;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v30);
        if (!v33)
          goto LABEL_46;
        goto LABEL_50;
      }
      if (*((_DWORD *)v15 + 2) != -1 || *((_DWORD *)v15 + 3) != -1)
        goto LABEL_21;
      v57 = v3 + 96 * v14;
      v60 = *(WTF **)(v57 + 64);
      v59 = (_QWORD *)(v57 + 64);
      v58 = v60;
      if (v60)
      {
        *v59 = 0;
        *(_DWORD *)(v3 + 96 * v14 + 72) = 0;
        WTF::fastFree(v58, v7);
      }
      v61 = *(v59 - 6);
      *(v59 - 6) = 0;
      if (!v61)
        goto LABEL_70;
      v62 = *(_QWORD *)(v61 + 8);
      if (__ldaxr((unsigned __int8 *)v62))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v62))
      {
        goto LABEL_79;
      }
      MEMORY[0x19AEABB3C](v62);
LABEL_79:
      v64 = *(_QWORD *)(v62 + 8);
      v65 = v64 - 1;
      *(_QWORD *)(v62 + 8) = v64 - 1;
      if (v64 == 1)
      {
        v71 = *(_QWORD *)(v62 + 16);
        v66 = *(_QWORD *)(v62 + 24);
        *(_QWORD *)(v62 + 24) = 0;
        v67 = v71 != 0;
      }
      else
      {
        v66 = 0;
        v67 = 1;
      }
      v68 = __ldxr((unsigned __int8 *)v62);
      if (v68 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v62))
        {
          if (!v65)
            goto LABEL_87;
          goto LABEL_70;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v62);
      if (!v65)
      {
LABEL_87:
        if (v66)
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
        if (!v67)
          WTF::fastFree((WTF *)v62, v7);
      }
LABEL_70:
      if (++v14 == v74)
        return WTF::fastFree((WTF *)(v3 - 16), v7);
    }
  }
  if (v3)
    return WTF::fastFree((WTF *)(v3 - 16), v7);
  return result;
}

uint64_t *WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return (uint64_t *)WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::rehash(uint64_t *a1, unsigned int a2, WebKit::TileForGrid **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WebKit::TileForGrid **v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WebKit::TileForGrid **)(v6 + 8 * v11);
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = WebKit::TileForGrid::computeHash(*v13);
        v17 = 0;
        do
        {
          v18 = v16 & v15;
          v16 = ++v17 + v18;
        }
        while (*(_QWORD *)(v14 + 8 * v18));
        *(_QWORD *)(v14 + 8 * v18) = *v13;
        if (v13 == a3)
          v12 = v14 + 8 * v18;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>>,WTF::ListHashSetNode<WebKit::TileForGrid> *>(uint64_t *a1, WebKit::TileForGrid **a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  int v7;
  WebKit::TileForGrid *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WebKit::TileForGrid::computeHash(*a2);
  v7 = 0;
  v8 = *a2;
  while (1)
  {
    v9 = v6 & v5;
    v10 = *(_QWORD *)(v2 + 8 * v9);
    if (v10 == -1)
      goto LABEL_10;
    if (!v10)
      break;
    if (*(_QWORD *)v10 == *(_QWORD *)v8)
    {
      v12 = *(_DWORD *)(v10 + 8);
      v11 = *(_DWORD *)(v10 + 12);
      if (v12 == *((_DWORD *)v8 + 2) && v11 == *((_DWORD *)v8 + 3))
        return v2 + 8 * v9;
    }
LABEL_10:
    v6 = ++v7 + v9;
  }
  if (!*a1)
    return 0;
  return *a1 + 8 * *(unsigned int *)(*a1 - 4);
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(uint64_t *a1, WebKit::TileForGrid *this)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WebKit::TileForGrid::computeHash(this);
  for (i = 0; ; v6 = i + v8)
  {
    v8 = v6 & v5;
    v9 = *(_QWORD *)(v2 + 8 * v8);
    if (v9 == -1)
      goto LABEL_10;
    if (!v9)
      break;
    if (*(_QWORD *)v9 == *(_QWORD *)this)
    {
      v11 = *(_DWORD *)(v9 + 8);
      v10 = *(_DWORD *)(v9 + 12);
      if (v11 == *((_DWORD *)this + 2) && v10 == *((_DWORD *)this + 3))
        return v2 + 8 * v8;
    }
LABEL_10:
    ++i;
  }
  if (!*a1)
    return 0;
  return *a1 + 8 * *(unsigned int *)(*a1 - 4);
}

uint64_t WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<unsigned long,unsigned long,WTF::IdentityExtractor,WTF::IntHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  v9 = result;
  v10 = result + 16;
  if (a2)
    result = (uint64_t)memset((void *)(result + 16), 255, 8 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = *(_QWORD *)(v4 + 8 * i);
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v13 = *a1;
        if (*a1)
          v14 = *(_DWORD *)(v13 - 8);
        else
          v14 = 0;
        v15 = (v12 + ~(v12 << 32)) ^ ((v12 + ~(v12 << 32)) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = 1;
        do
        {
          v20 = v18;
          v8 = *(void **)(v13 + 8 * v18);
          v18 = (v18 + v19++) & v14;
        }
        while (v8 != (void *)-1);
        *(_QWORD *)(v13 + 8 * v20) = v12;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::expand(uint64_t *a1, WebKit::TileForGrid **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::ListHashSetNode<WebKit::TileForGrid> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebKit::TileForGrid>>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>,WTF::HashTraits<WTF::ListHashSetNode<WebKit::TileForGrid> *>>::rehash(a1, v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::serviceRequestQueue(void)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  const void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E34D3608;
  v3 = *(WTF **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::serviceRequestQueue(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  const void *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34D3608;
  v3 = (WTF *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 16), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::serviceRequestQueue(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (__int128 *)(a1 + 24);
  v4 = (__int128 *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = a1 + 64;
  if (!*(_BYTE *)(a1 + 80))
    v6 = a1 + 48;
  *(_QWORD *)&v59 = *(_QWORD *)(v6 + 8);
  WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)a1);
  WebCore::ImageBuffer::create();
  if (!v56)
  {
    *(_QWORD *)&v59 = 0;
    result = WebKit::AsyncPDFRenderer::transferBufferToMainThread(v2, (uint64_t *)&v59, v3, v4, v5);
    goto LABEL_33;
  }
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v55, v56);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, 1);
  v8 = 64;
  if (!*(_BYTE *)(a1 + 80))
    v8 = 48;
  v59 = *(_OWORD *)(a1 + v8);
  (*(void (**)(uint64_t, float, float))(*(_QWORD *)v7 + 648))(v7, -*(float *)&v59, -*((float *)&v59 + 1));
  *(_QWORD *)&v58 = 0x11040000FFFFFFFFLL;
  (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v7 + 224))(v7, &v59, &v58);
  if ((v58 & 0x8000000000000) != 0)
  {
    v46 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFLL);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v46);
      WTF::fastFree((WTF *)v46, v9);
    }
  }
  v10 = atomic_load((unsigned __int8 *)(v2 + 120));
  if ((v10 & 1) != 0)
  {
    *(_QWORD *)&v58 = 0x1104000000FF0020;
    (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v7 + 224))(v7, &v59, &v58);
    if ((v58 & 0x8000000000000) != 0)
    {
      v51 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFLL);
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        atomic_store(1u, v51);
        WTF::fastFree((WTF *)v51, v11);
      }
    }
  }
  *(float *)&v58 = *(float *)(a1 + 108) * *(float *)(a1 + 112);
  DWORD1(v58) = v58;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 632))(v7, &v58);
  v12 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v12)
  {
    v13 = 24 * v12;
    v14 = (_OWORD *)(*(_QWORD *)(a1 + 88) + 8);
    do
    {
      v15 = (void *)objc_msgSend(*(id *)(a1 + 16), "pageAtIndex:", *((_QWORD *)v14 - 1));
      v16 = v15;
      if (v15)
      {
        CFRetain(v15);
        v58 = *v14;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, 1);
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 456))(v7, &v58);
        (*(void (**)(uint64_t, float, float))(*(_QWORD *)v7 + 648))(v7, *(float *)&v58, *((float *)&v58 + 1) + *((float *)&v58 + 3));
        v57 = 0xBF8000003F800000;
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v7 + 632))(v7, &v57);
        objc_msgSend(v16, "drawWithBox:toContext:", 1, (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 104))(v7, 1);
        CFRelease(v16);
      }
      v14 = (_OWORD *)((char *)v14 + 24);
      v13 -= 24;
    }
    while (v13);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 104))(v7, 1);
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&v55, v17);
  v18 = v56;
  v56 = 0;
  *(_QWORD *)&v58 = v18;
  WebCore::ImageBuffer::sinkIntoBufferForDifferentThread();
  v20 = v58;
  *(_QWORD *)&v58 = 0;
  if (!v20)
    goto LABEL_32;
  v21 = *(_QWORD *)(v20 + 8);
  if (__ldaxr((unsigned __int8 *)v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v21))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEABB3C](v21);
LABEL_20:
  v25 = *(_QWORD *)(v21 + 8);
  v26 = v25 - 1;
  *(_QWORD *)(v21 + 8) = v25 - 1;
  if (v25 == 1)
  {
    v54 = *(_QWORD *)(v21 + 16);
    v27 = *(_QWORD *)(v21 + 24);
    *(_QWORD *)(v21 + 24) = 0;
    v28 = v54 != 0;
  }
  else
  {
    v27 = 0;
    v28 = 1;
  }
  v29 = __ldxr((unsigned __int8 *)v21);
  if (v29 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v21))
    {
      if (!v26)
        goto LABEL_28;
      goto LABEL_32;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v21);
  if (!v26)
  {
LABEL_28:
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    if (!v28)
      WTF::fastFree((WTF *)v21, v19);
  }
LABEL_32:
  result = WebKit::AsyncPDFRenderer::transferBufferToMainThread(v2, (uint64_t *)&v59, v3, v4, v5);
LABEL_33:
  v30 = v59;
  *(_QWORD *)&v59 = 0;
  if (!v30)
    goto LABEL_50;
  v31 = *(_QWORD *)(v30 + 8);
  if (__ldaxr((unsigned __int8 *)v31))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v31))
  {
    goto LABEL_38;
  }
  result = MEMORY[0x19AEABB3C](v31);
LABEL_38:
  v33 = *(_QWORD *)(v31 + 8);
  v34 = v33 - 1;
  *(_QWORD *)(v31 + 8) = v33 - 1;
  if (v33 == 1)
  {
    v49 = *(_QWORD *)(v31 + 16);
    v35 = *(_QWORD *)(v31 + 24);
    *(_QWORD *)(v31 + 24) = 0;
    v36 = v49 != 0;
  }
  else
  {
    v35 = 0;
    v36 = 1;
  }
  v37 = __ldxr((unsigned __int8 *)v31);
  if (v37 != 1)
  {
    __clrex();
LABEL_45:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v31);
    if (v34)
      goto LABEL_50;
    goto LABEL_46;
  }
  if (__stlxr(0, (unsigned __int8 *)v31))
    goto LABEL_45;
  if (v34)
    goto LABEL_50;
LABEL_46:
  if (v35)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  if (!v36)
    result = WTF::fastFree((WTF *)v31, v24);
LABEL_50:
  v38 = v56;
  v56 = 0;
  if (!v38)
    return result;
  v39 = *(_QWORD *)(v38 + 8);
  if (__ldaxr((unsigned __int8 *)v39))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v39))
  {
    goto LABEL_55;
  }
  result = MEMORY[0x19AEABB3C](v39);
LABEL_55:
  v41 = *(_QWORD *)(v39 + 8);
  v42 = v41 - 1;
  *(_QWORD *)(v39 + 8) = v41 - 1;
  if (v41 == 1)
  {
    v50 = *(_QWORD *)(v39 + 16);
    v43 = *(_QWORD *)(v39 + 24);
    *(_QWORD *)(v39 + 24) = 0;
    v44 = v50 != 0;
  }
  else
  {
    v43 = 0;
    v44 = 1;
  }
  v45 = __ldxr((unsigned __int8 *)v39);
  if (v45 != 1)
  {
    __clrex();
LABEL_62:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v39);
    if (v42)
      return result;
    goto LABEL_63;
  }
  if (__stlxr(0, (unsigned __int8 *)v39))
    goto LABEL_62;
  if (v42)
    return result;
LABEL_63:
  if (v43)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  if (!v44)
    return WTF::fastFree((WTF *)v39, v24);
  return result;
}

void sub_197325540(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;

  if ((a13 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 104))(v13, 1);
  WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::~Ref(&a10, v18);
  v20 = a11;
  a11 = 0;
  if (!v20)
LABEL_24:
    _Unwind_Resume(a1);
  v21 = *(_QWORD *)(v20 + 8);
  if (__ldaxr((unsigned __int8 *)v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v21))
  {
LABEL_12:
    v23 = *(_QWORD *)(v21 + 8);
    v24 = v23 - 1;
    *(_QWORD *)(v21 + 8) = v23 - 1;
    if (v23 == 1)
    {
      v28 = *(_QWORD *)(v21 + 16);
      v25 = *(_QWORD *)(v21 + 24);
      *(_QWORD *)(v21 + 24) = 0;
      v26 = v28 != 0;
    }
    else
    {
      v25 = 0;
      v26 = 1;
    }
    v27 = __ldxr((unsigned __int8 *)v21);
    if (v27 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v21))
      {
LABEL_19:
        if (!v24)
        {
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          if (!v26)
            WTF::fastFree((WTF *)v21, v19);
        }
        goto LABEL_24;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
    goto LABEL_19;
  }
  MEMORY[0x19AEABB3C](v21);
  goto LABEL_12;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::transferBufferToMainThread(WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>> &&,WebKit::TileForGrid const&,WebKit::AsyncPDFRenderer::TileRenderInfo const&,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v14;

  *(_QWORD *)a1 = &off_1E34D3630;
  v3 = *(WTF **)(a1 + 88);
  if (v3)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v5);
LABEL_8:
    v7 = *(_QWORD *)(v5 + 8);
    v8 = v7 - 1;
    *(_QWORD *)(v5 + 8) = v7 - 1;
    if (v7 == 1)
    {
      v14 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      v10 = v14 != 0;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
        if (v8)
          goto LABEL_20;
LABEL_16:
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        if (!v10)
          WTF::fastFree((WTF *)v5, a2);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      goto LABEL_20;
    goto LABEL_16;
  }
LABEL_20:
  v12 = *(unsigned __int8 **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v12, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::transferBufferToMainThread(WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>> &&,WebKit::TileForGrid const&,WebKit::AsyncPDFRenderer::TileRenderInfo const&,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v14;

  *(_QWORD *)this = &off_1E34D3630;
  v3 = (WTF *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEABB3C](v5);
LABEL_8:
    v7 = *(_QWORD *)(v5 + 8);
    v8 = v7 - 1;
    *(_QWORD *)(v5 + 8) = v7 - 1;
    if (v7 == 1)
    {
      v14 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      v10 = v14 != 0;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
        if (v8)
          goto LABEL_20;
LABEL_16:
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        if (!v10)
          WTF::fastFree((WTF *)v5, a2);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      goto LABEL_20;
    goto LABEL_16;
  }
LABEL_20:
  v12 = (unsigned __int8 *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v12, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AsyncPDFRenderer::transferBufferToMainThread(WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>> &&,WebKit::TileForGrid const&,WebKit::AsyncPDFRenderer::TileRenderInfo const&,WTF::ObjectIdentifierGeneric<WebKit::PDFTileRenderType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  WTF::Lock *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  WTF *v55;
  uint64_t v56;
  WTF *v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  int v70;
  char v71;
  __int128 v72;
  WTF *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  _BYTE *v92;
  _DWORD v93[4];
  uint64_t v94;
  _BYTE v95[24];
  __int128 v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;

  v3 = *(WTF::Lock **)(result + 8);
  if (!v3)
    return result;
  v4 = result;
  result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v94, v3, *(_QWORD *)(result + 16));
  v6 = v94;
  if (!v94)
    return result;
  if (!*(_QWORD *)(v94 + 40))
    return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), v5);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = (_OWORD *)(v4 + 32);
  v9 = *(_QWORD *)(v4 + 120);
  v10 = (uint64_t *)(v94 + 56);
  v11 = (_QWORD *)WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>((uint64_t *)(v94 + 56), (WebKit::TileForGrid *)(v4 + 32));
  v12 = *v10;
  if (*v10)
    v13 = (_QWORD *)(v12 + 96 * *(unsigned int *)(v12 - 4));
  else
    v13 = 0;
  if (v13 == v11 || v11[2] != v9)
  {
    --*(_DWORD *)(v6 + 68);
    result = (uint64_t)WebKit::AsyncPDFRenderer::serviceRequestQueue((unsigned __int8 *)v6);
    goto LABEL_13;
  }
  if (!v12)
  {
    if (!v11)
      goto LABEL_22;
    v14 = 0;
LABEL_20:
    if (v14 != v11)
      WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::TileRenderData,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::TileRenderData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::remove((uint64_t *)(v6 + 56), v11);
    goto LABEL_22;
  }
  v14 = (_QWORD *)(v12 + 96 * *(unsigned int *)(v12 - 4));
  if (v14 != v11)
    goto LABEL_20;
LABEL_22:
  --*(_DWORD *)(v6 + 68);
  result = (uint64_t)WebKit::AsyncPDFRenderer::serviceRequestQueue((unsigned __int8 *)v6);
  if (!*(_QWORD *)(v4 + 24))
    goto LABEL_13;
  result = WebKit::AsyncPDFRenderer::renderInfoIsValidForTile(v6, v4 + 32, v4 + 48);
  if (!(_DWORD)result)
    goto LABEL_13;
  if (*(_BYTE *)(v4 + 80))
  {
    v19 = (uint64_t *)(v6 + 96);
    result = WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::TileForGrid>>,WebKit::TileForGrid>(v19, (WebKit::TileForGrid *)(v4 + 32));
    v20 = *v19;
    if (*v19)
      v20 += 96 * *(unsigned int *)(v20 - 4);
    if (v20 == result)
      goto LABEL_13;
    v21 = *(unsigned __int8 **)(result + 16);
    if (!v21)
      goto LABEL_61;
    v22 = *((_QWORD *)v21 + 1);
    if (__ldaxr((unsigned __int8 *)v22))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v22))
    {
LABEL_56:
      ++*(_QWORD *)(v22 + 8);
      v45 = __ldxr((unsigned __int8 *)v22);
      if (v45 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v22))
          goto LABEL_61;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_61:
      v46 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v21 + 16))(v21);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 96))(v46, 1);
      if (!*(_BYTE *)(v4 + 80))
      {
        __break(1u);
LABEL_134:
        v89 = *((_QWORD *)v21 + 2);
        v49 = *((_QWORD *)v21 + 3);
        *((_QWORD *)v21 + 3) = 0;
        v50 = v89 != 0;
        goto LABEL_67;
      }
      *(_OWORD *)v95 = *(_OWORD *)(v4 + 64);
      *(float32x2_t *)v95 = vsub_f32(*(float32x2_t *)v95, *(float32x2_t *)(v4 + 48));
      WebCore::GraphicsContext::drawImageBuffer();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 104))(v46, 1);
      v47 = *((_QWORD *)v21 + 1);
LABEL_114:
      if (__ldaxr((unsigned __int8 *)v47))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v47))
      {
        goto LABEL_118;
      }
      result = MEMORY[0x19AEABB3C](v47);
LABEL_118:
      v83 = *(_QWORD *)(v47 + 8);
      v84 = v83 - 1;
      *(_QWORD *)(v47 + 8) = v83 - 1;
      if (v83 == 1)
      {
        v88 = *(_QWORD *)(v47 + 16);
        v85 = *(_QWORD *)(v47 + 24);
        *(_QWORD *)(v47 + 24) = 0;
        v86 = v88 != 0;
      }
      else
      {
        v85 = 0;
        v86 = 1;
      }
      v87 = __ldxr((unsigned __int8 *)v47);
      if (v87 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v47))
        {
LABEL_125:
          if (!v84)
          {
            if (v85)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
            if (!v86)
              result = WTF::fastFree((WTF *)v47, v5);
          }
          goto LABEL_13;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v47);
      goto LABEL_125;
    }
    MEMORY[0x19AEABB3C](v22);
    goto LABEL_56;
  }
  v24 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)v95 = v24;
  v25 = *(_OWORD *)(v4 + 64);
  *(_OWORD *)&v95[8] = *(_OWORD *)(v4 + 48);
  v96 = v25;
  LOBYTE(v97) = *(_BYTE *)(v4 + 80);
  WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v98, (__int128 **)(v4 + 88));
  v100 = *(_QWORD *)(v4 + 104);
  v101 = *(_DWORD *)(v4 + 112);
  v27 = *(_QWORD *)(v6 + 96);
  v26 = (uint64_t *)(v6 + 96);
  v1 = v27;
  if (v27
    || (WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::expand(v26),
        (v1 = *v26) != 0))
  {
    v28 = *(_DWORD *)(v1 - 8);
  }
  else
  {
    v28 = 0;
  }
  v29 = WebKit::TileForGrid::computeHash((WebKit::TileForGrid *)(v4 + 32));
  v30 = 0;
  v91 = &v100;
  v92 = &v95[8];
  for (i = 1; ; ++i)
  {
    v2 = v29 & v28;
    v32 = v1 + 96 * (v29 & v28);
    v33 = *(_QWORD *)v32;
    if (*(_QWORD *)v32 == -1 && *(_DWORD *)(v32 + 8) == -1 && *(_DWORD *)(v32 + 12) == -1)
    {
      if (v30)
      {
        *(_QWORD *)v30 = -1;
        *(_QWORD *)(v30 + 8) = -1;
        *(_OWORD *)(v30 + 64) = 0u;
        *(_OWORD *)(v30 + 80) = 0u;
        *(_OWORD *)(v30 + 32) = 0u;
        *(_OWORD *)(v30 + 48) = 0u;
        *(_OWORD *)(v30 + 16) = 0u;
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)(v30 + 80) = _D0;
        *(_DWORD *)(v30 + 88) = 1065353216;
        --*(_DWORD *)(*v26 - 16);
        *(_OWORD *)v30 = *v8;
        v44 = *(_QWORD *)v95;
        *(_QWORD *)v95 = 0;
        *(_QWORD *)(v30 + 16) = v44;
        goto LABEL_99;
      }
      v61 = v1 + 96 * v2;
      v62 = *(_QWORD *)(v61 + 16);
      *(_OWORD *)v32 = *v8;
      v63 = *(_QWORD *)v95;
      *(_QWORD *)v95 = 0;
      *(_QWORD *)(v61 + 16) = v63;
      if (!v62)
      {
        v30 = v1 + 96 * (v29 & v28);
        goto LABEL_99;
      }
      v64 = *(_QWORD *)(v62 + 8);
      if (__ldaxr((unsigned __int8 *)v64))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v64))
      {
        goto LABEL_86;
      }
      MEMORY[0x19AEABB3C](v64);
LABEL_86:
      v66 = *(_QWORD *)(v64 + 8);
      v67 = v66 - 1;
      *(_QWORD *)(v64 + 8) = v66 - 1;
      if (v66 == 1)
      {
        v90 = *(_QWORD *)(v64 + 16);
        v68 = *(_QWORD *)(v64 + 24);
        *(_QWORD *)(v64 + 24) = 0;
        v69 = v90 != 0;
      }
      else
      {
        v68 = 0;
        v69 = 1;
      }
      v70 = __ldxr((unsigned __int8 *)v64);
      if (v70 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v64))
          goto LABEL_93;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v64);
LABEL_93:
      if (!v67)
      {
        if (v68)
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
        if (!v69)
          WTF::fastFree((WTF *)v64, v5);
      }
      v30 = v32;
LABEL_99:
      v71 = v97;
      v72 = v96;
      *(_OWORD *)(v30 + 24) = *(_OWORD *)&v95[8];
      *(_OWORD *)(v30 + 40) = v72;
      *(_BYTE *)(v30 + 56) = v71;
      v73 = *(WTF **)(v30 + 64);
      if (v73)
      {
        *(_QWORD *)(v30 + 64) = 0;
        *(_DWORD *)(v30 + 72) = 0;
        WTF::fastFree(v73, v5);
      }
      *(_QWORD *)(v30 + 64) = v98;
      v74 = v99;
      v98 = 0;
      v99 = 0;
      *(_QWORD *)(v30 + 72) = v74;
      *(_QWORD *)(v30 + 80) = v100;
      *(_DWORD *)(v30 + 88) = v101;
      v75 = *v26;
      if (*v26)
        v76 = *(_DWORD *)(v75 - 12) + 1;
      else
        v76 = 1;
      *(_DWORD *)(v75 - 12) = v76;
      v77 = *v26;
      if (*v26)
        v78 = *(_DWORD *)(v77 - 12);
      else
        v78 = 0;
      v79 = (*(_DWORD *)(v77 - 16) + v78);
      v80 = *(unsigned int *)(v77 - 4);
      if (v80 > 0x400)
      {
        if (v80 > 2 * v79)
          goto LABEL_110;
      }
      else if (3 * v80 > 4 * v79)
      {
        goto LABEL_110;
      }
      WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::expand(v26);
      goto LABEL_110;
    }
    if (v33 == *(_QWORD *)(v4 + 32)
      && *(_DWORD *)(v32 + 8) == *(_DWORD *)(v4 + 40)
      && *(_DWORD *)(v32 + 12) == *(_DWORD *)(v4 + 44))
    {
      break;
    }
    if (!v33 && (*(_DWORD *)(v32 + 8) & *(_DWORD *)(v32 + 12)) == -1)
      v30 = v1 + 96 * v2;
    v29 = i + v2;
  }
  v36 = v1 + 96 * v2;
  v37 = *(_QWORD *)v95;
  *(_QWORD *)v95 = 0;
  v38 = *(_QWORD *)(v36 + 16);
  *(_QWORD *)(v36 + 16) = v37;
  if (!v38)
    goto LABEL_77;
  v21 = *(unsigned __int8 **)(v38 + 8);
  if (__ldaxr(v21))
  {
    __clrex();
    goto LABEL_64;
  }
  if (__stxr(1u, v21))
LABEL_64:
    MEMORY[0x19AEABB3C](v21);
  v48 = *((_QWORD *)v21 + 1);
  v10 = (uint64_t *)(v48 - 1);
  *((_QWORD *)v21 + 1) = v48 - 1;
  if (v48 == 1)
    goto LABEL_134;
  v49 = 0;
  v50 = 1;
LABEL_67:
  v51 = __ldxr(v21);
  if (v51 != 1)
  {
    __clrex();
    goto LABEL_71;
  }
  if (__stlxr(0, v21))
LABEL_71:
    WTF::Lock::unlockSlow((WTF::Lock *)v21);
  if (!v10)
  {
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    if (!v50)
      WTF::fastFree((WTF *)v21, v5);
  }
LABEL_77:
  v52 = v1 + 96 * v2;
  v53 = *(_OWORD *)v92;
  v54 = *((_OWORD *)v92 + 1);
  v57 = *(WTF **)(v52 + 64);
  v56 = v52 + 64;
  v55 = v57;
  *(_BYTE *)(v56 - 8) = v92[32];
  *(_OWORD *)(v56 - 24) = v54;
  *(_OWORD *)(v56 - 40) = v53;
  if (v57)
  {
    *(_QWORD *)v56 = 0;
    *(_DWORD *)(v56 + 8) = 0;
    WTF::fastFree(v55, v5);
  }
  v58 = v98;
  v98 = 0;
  *(_QWORD *)v56 = v58;
  LODWORD(v58) = v99;
  LODWORD(v99) = 0;
  *(_DWORD *)(v56 + 8) = (_DWORD)v58;
  LODWORD(v58) = HIDWORD(v99);
  HIDWORD(v99) = 0;
  *(_DWORD *)(v56 + 12) = (_DWORD)v58;
  v59 = v1 + 96 * v2;
  v60 = *v91;
  *(_DWORD *)(v59 + 88) = *((_DWORD *)v91 + 2);
  *(_QWORD *)(v59 + 80) = v60;
LABEL_110:
  result = (uint64_t)v98;
  if (v98)
  {
    v98 = 0;
    LODWORD(v99) = 0;
    result = WTF::fastFree((WTF *)result, v5);
  }
  v81 = *(_QWORD *)v95;
  *(_QWORD *)v95 = 0;
  if (v81)
  {
    v47 = *(_QWORD *)(v81 + 8);
    goto LABEL_114;
  }
LABEL_13:
  if (v7)
  {
    *(_OWORD *)v95 = COERCE_UNSIGNED_INT64((float)(1.0 / *(float *)(v4 + 112)));
    *(_QWORD *)&v95[16] = 0;
    v96 = *(_OWORD *)v95;
    v97 = 0;
    WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v95, (const WebCore::FloatRect *)(v4 + 48));
    v93[0] = v15;
    v93[1] = v16;
    v93[2] = v17;
    v93[3] = v18;
    v6 = v94;
    (*(void (**)(_QWORD, _DWORD *, uint64_t))(**(_QWORD **)(v94 + 40) + 328))(*(_QWORD *)(v94 + 40), v93, 1);
    return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), v5);
  }
  v6 = v94;
  if (v94)
    return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 16), v5);
  return result;
}

void sub_1973261AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF *a21,int a22)
{
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;

  if (!a15)
    goto LABEL_20;
  v23 = *(_QWORD *)(a15 + 8);
  if (__ldaxr((unsigned __int8 *)v23))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v23))
  {
LABEL_7:
    v25 = *(_QWORD *)(v23 + 8);
    v26 = v25 - 1;
    *(_QWORD *)(v23 + 8) = v25 - 1;
    if (v25 == 1)
    {
      v30 = *(_QWORD *)(v23 + 16);
      v27 = *(_QWORD *)(v23 + 24);
      *(_QWORD *)(v23 + 24) = 0;
      v28 = v30 != 0;
    }
    else
    {
      v27 = 0;
      v28 = 1;
    }
    v29 = __ldxr((unsigned __int8 *)v23);
    if (v29 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
      {
LABEL_14:
        if (!v26)
        {
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          if (!v28)
            WTF::fastFree((WTF *)v23, a2);
        }
LABEL_20:
        if (a14)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::AsyncPDFRenderer,(WTF::DestructionThread)0>(*(unsigned __int8 **)(a14 + 16), a2);
        _Unwind_Resume(exception_object);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](v23);
  goto LABEL_7;
}

uint64_t WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::begin(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3[2];

  if (!a1)
    return 0;
  v1 = a1 + 96 * *(unsigned int *)(a1 - 4);
  if (*(_DWORD *)(a1 - 12))
  {
    v3[0] = a1;
    v3[1] = v1;
    WTF::HashTableConstIterator<WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>,WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::skipEmptyBuckets(v3);
    return v3[0];
  }
  return v1;
}

uint64_t *WTF::HashTableConstIterator<WTF::HashTable<WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>,WebKit::TileForGrid,WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile>>,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashMap<WebKit::TileForGrid,WebKit::AsyncPDFRenderer::RenderedTile,WTF::DefaultHash<WebKit::TileForGrid>,WTF::HashTraits<WebKit::TileForGrid>,WTF::HashTraits<WebKit::AsyncPDFRenderer::RenderedTile>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::TileForGrid>>::skipEmptyBuckets(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *result;
  v1 = result[1];
  while (v2 != v1 && (*(_QWORD *)v2 == -1 || !*(_QWORD *)v2))
  {
    if (*(_DWORD *)(v2 + 8) != -1 || *(_DWORD *)(v2 + 12) != -1)
      break;
    v2 += 96;
    *result = v2;
  }
  return result;
}

unint64_t WTF::Vector<WebKit::PDFDocumentLayout::PageGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 36 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebKit::PDFDocumentLayout::PageGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebKit::PDFDocumentLayout::PageGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebKit::PDFDocumentLayout::PageGeometry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  __int128 v9;
  __int128 v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x71C71C8)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 36 * a2;
      result = WTF::fastMalloc((WTF *)(36 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFFC) / 0x24;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = 36 * v4;
        v8 = v3;
        do
        {
          v9 = *(_OWORD *)v8;
          v10 = *((_OWORD *)v8 + 1);
          *(_DWORD *)(result + 32) = *((_DWORD *)v8 + 8);
          *(_OWORD *)result = v9;
          *(_OWORD *)(result + 16) = v10;
          result += 36;
          v8 = (WTF *)((char *)v8 + 36);
          v7 -= 36;
        }
        while (v7);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t *WTF::Vector<unsigned long,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  int v3;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a3;
  v5 = result;
  *result = (uint64_t)(result + 2);
  result[1] = 2;
  v6 = 8 * a3;
  if (a3 < 3)
  {
    if (!a3)
      return v5;
    v7 = 0;
    v8 = (uint64_t)(result + 2);
    do
    {
LABEL_6:
      v9 = *a2++;
      *(_QWORD *)(v8 + 8 * v7++) = v9;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v5 + 3) = v7;
    return v5;
  }
  if (!(a3 >> 29))
  {
    v8 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v5 + 2) = v3;
    *v5 = v8;
    v7 = *((_DWORD *)v5 + 3);
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

void sub_197326648(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v5;

  v5 = *(WTF **)v2;
  if (v3 != *(_QWORD *)v2 && v5 != 0)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  _Unwind_Resume(exception_object);
}

WebCore::TimerBase *WebCore::Timer::Timer<WebKit::UnifiedPDFPlugin,WebKit::UnifiedPDFPlugin>(WebCore::TimerBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E34B3740;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E34D3658;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a2;
  *((_QWORD *)a1 + 6) = v8;
  return a1;
}

void sub_1973266D4(_Unwind_Exception *a1)
{
  WebCore::TimerBase *v1;

  WebCore::TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::UnifiedPDFPlugin::*&)(void),WebKit::UnifiedPDFPlugin*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Vector<WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(uint64_t **)a2;
      v8 = 8 * v6;
      do
      {
        v9 = *v7++;
        ++*(_DWORD *)(v9 + 8);
        *v5++ = v9;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2++;
      *(_QWORD *)(v7 + 8 * v8++) = v9;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_19732680C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

__n128 WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SnapOffset<WebCore::LayoutUnit>>(unsigned int *a1, unint64_t a2)
{
  __n128 *v3;
  __n128 *v4;
  __n128 result;
  unint64_t v6;

  v3 = (__n128 *)WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = (__n128 *)(*(_QWORD *)a1 + 40 * a1[3]);
  result = *v3;
  v4[1].n128_u8[0] = v3[1].n128_u8[0];
  *v4 = result;
  v4[1].n128_u64[1] = 0;
  v4[2].n128_u64[0] = 0;
  v6 = v3[1].n128_u64[1];
  v3[1].n128_u64[1] = 0;
  v4[1].n128_u64[1] = v6;
  LODWORD(v6) = v3[2].n128_u32[0];
  v3[2].n128_u32[0] = 0;
  v4[2].n128_u32[0] = v6;
  LODWORD(v6) = v3[2].n128_u32[1];
  v3[2].n128_u32[1] = 0;
  v4[2].n128_u32[1] = v6;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  unsigned int *v11;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 40 * v4;
        v9 = (char *)v3 + 24;
        do
        {
          v10 = *(_OWORD *)(v9 - 24);
          *((_BYTE *)v7 + 16) = *(v9 - 8);
          *(_OWORD *)v7 = v10;
          *((_QWORD *)v7 + 3) = 0;
          *((_QWORD *)v7 + 4) = 0;
          v11 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *((_QWORD *)v7 + 3) = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = 0;
          v7[8] = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 3);
          *((_DWORD *)v9 + 3) = 0;
          v7[9] = v11;
          result = *(unsigned int **)v9;
          if (*(_QWORD *)v9)
          {
            *(_QWORD *)v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v9 += 40;
          v7 += 10;
          v8 -= 40;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebKit::PerPageInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, void *a2)
{
  WTF *v2;

  if (*(_DWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 12))
      *(_DWORD *)(result + 12) = 0;
    v2 = *(WTF **)result;
    if (*(_QWORD *)result)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      return WTF::fastFree(v2, a2);
    }
  }
  return result;
}

char *IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>(IPC::Encoder *a1, uint64_t a2)
{
  int v4;
  char *result;
  WebKit::WebEditCommandProxy *v6;
  uint64_t v7;
  const WTF::String *v8;
  WebKit::WebPageProxy *v9;

  v4 = *(unsigned __int8 *)(a2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *result = 1;
    if (*(_BYTE *)(a2 + 16))
    {
      return IPC::ArgumentCoder<WebKit::EditingRange,void>::encode(a1, (uint64_t *)a2);
    }
    else
    {
      v6 = (WebKit::WebEditCommandProxy *)std::__throw_bad_optional_access[abi:sn180100]();
      return (char *)WebKit::WebEditCommandProxy::WebEditCommandProxy(v6, v7, v8, v9);
    }
  }
  else
  {
    *result = 0;
  }
  return result;
}

WebKit::WebEditCommandProxy *WebKit::WebEditCommandProxy::WebEditCommandProxy(WebKit::WebEditCommandProxy *this, uint64_t a2, const WTF::String *a3, WebKit::WebPageProxy *a4)
{
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34D3680;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  v8 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v8 += 2;
  *((_QWORD *)this + 4) = v8;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a4 + 6, (uint64_t)a4 + 16);
  v9 = *((_QWORD *)a4 + 3);
  if (v9)
  {
    do
      v10 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v10 + 1, (unsigned int *)v9));
    v11 = *(_QWORD *)(v9 + 8);
    if (v11)
      v12 = v11 - 16;
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
  }
  *((_QWORD *)this + 5) = v9;
  WTF::WeakHashSet<WebKit::WebEditCommandProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebEditCommandProxy>(v12 + 448, this, (uint64_t)v14);
  return this;
}

void WebKit::WebEditCommandProxy::~WebEditCommandProxy(WebKit::WebEditCommandProxy *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = &off_1E34D3680;
  v3 = *((_QWORD *)this + 5);
  if (!v3)
  {
    *((_QWORD *)this + 5) = 0;
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
  {
    WebKit::WebPageProxy::removeEditCommand((WebKit::WebPageProxy *)(v4 - 16), this);
    v3 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!v3)
      goto LABEL_10;
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  do
  {
    v5 = __ldaxr((unsigned int *)v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, (unsigned int *)v3));
  if (!v6)
  {
    atomic_store(1u, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, a2);
  }
LABEL_10:
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)this + 2);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WebKit::WebEditCommandProxy::~WebEditCommandProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void WebKit::WebEditCommandProxy::unapply(WebKit::WebEditCommandProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::WebEditCommandProxy *v11;

  v1 = *((_QWORD *)this + 5);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 713) && *(_BYTE *)(v2 + 712))
      {
        v4 = *(_QWORD *)(v2 + 192);
        v11 = (WebKit::WebEditCommandProxy *)*((_QWORD *)this + 3);
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::UnapplyEditCommand>(v4, (uint64_t *)&v11, *(_QWORD *)(*(_QWORD *)(v2 + 16) + 1896), 1);
        v5 = *((_QWORD *)this + 5);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
            v7 = v6 - 16;
          else
            v7 = 0;
        }
        else
        {
          v7 = 0;
        }
        CFRetain(*((CFTypeRef *)this + 1));
        v11 = this;
        v8 = *(_QWORD *)(v7 + 40);
        if (v8)
          v9 = *(_QWORD *)(v8 + 8);
        else
          v9 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
        (*(void (**)(uint64_t, WebKit::WebEditCommandProxy **, uint64_t))(*(_QWORD *)v9 + 336))(v9, &v11, 1);
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
        v10 = (uint64_t)v11;
        v11 = 0;
        if (v10)
          CFRelease(*(CFTypeRef *)(v10 + 8));
      }
    }
  }
}

void WebKit::WebEditCommandProxy::reapply(WebKit::WebEditCommandProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::WebEditCommandProxy *v11;

  v1 = *((_QWORD *)this + 5);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*(_BYTE *)(v2 + 713) && *(_BYTE *)(v2 + 712))
      {
        v4 = *(_QWORD *)(v2 + 192);
        v11 = (WebKit::WebEditCommandProxy *)*((_QWORD *)this + 3);
        WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ReapplyEditCommand>(v4, (uint64_t *)&v11, *(_QWORD *)(*(_QWORD *)(v2 + 16) + 1896), 1);
        v5 = *((_QWORD *)this + 5);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
            v7 = v6 - 16;
          else
            v7 = 0;
        }
        else
        {
          v7 = 0;
        }
        CFRetain(*((CFTypeRef *)this + 1));
        v11 = this;
        v8 = *(_QWORD *)(v7 + 40);
        if (v8)
          v9 = *(_QWORD *)(v8 + 8);
        else
          v9 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
        (*(void (**)(uint64_t, WebKit::WebEditCommandProxy **, _QWORD))(*(_QWORD *)v9 + 336))(v9, &v11, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
        v10 = (uint64_t)v11;
        v11 = 0;
        if (v10)
          CFRelease(*(CFTypeRef *)(v10 + 8));
      }
    }
  }
}

uint64_t WebKit::WebFormClient::willSubmitForm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WebKit *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t result;
  uint64_t v25;
  _BYTE v26[24];
  WebKit *v27;
  uint64_t v28;

  if (*(_QWORD *)(a1 + 24))
  {
    v28 = 0;
    if (*(_DWORD *)(a5 + 12))
    {
      v14 = 0;
      v15 = 8;
      do
      {
        v16 = (WTF::StringImpl **)(*(_QWORD *)a5 + v15 - 8);
        API::String::create(&v27);
        WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<API::String,WTF::RawPtrTraits<API::String>,WTF::DefaultRefDerefTraits<API::String>>>(&v28, v16, (uint64_t *)&v27, (uint64_t)v26);
        v17 = v27;
        v27 = 0;
        if (v17)
          CFRelease(*((CFTypeRef *)v17 + 1));
        ++v14;
        v15 += 16;
      }
      while (v14 < *(unsigned int *)(a5 + 12));
    }
    v18 = API::Object::newObject(0x18uLL, 9);
    *(_QWORD *)v18 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v18);
    *(_QWORD *)v18 = &off_1E34CC280;
    v19 = v28;
    v28 = 0;
    *(_QWORD *)(v18 + 16) = v19;
    v20 = API::Object::newObject(0x18uLL, 58);
    *(_QWORD *)v20 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v20);
    *(_QWORD *)v20 = &off_1E34D3870;
    v21 = *a7;
    *a7 = 0;
    *(_QWORD *)(v20 + 16) = v21;
    if (a6)
      v22 = *(_QWORD *)(a6 + 8);
    else
      v22 = 0;
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(a1 + 24))(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), *(_QWORD *)(a4 + 8), *(_QWORD *)(v18 + 8), v22, *(_QWORD *)(v20 + 8), *(_QWORD *)(a1 + 16));
    CFRelease(*(CFTypeRef *)(v20 + 8));
    CFRelease(*(CFTypeRef *)(v18 + 8));
    result = v28;
    if (v28)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v28, v23);
  }
  else
  {
    v25 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  return result;
}

uint64_t std::optional<WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<WebKit::SafeBrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::SafeBrowsingWarning>>>::operator=[abi:sn180100]<WTF::RefPtr<WebKit::SafeBrowsingWarning,WTF::RawPtrTraits<WebKit::SafeBrowsingWarning>,WTF::DefaultRefDerefTraits<WebKit::SafeBrowsingWarning>>,void>(uint64_t a1, WTF::StringImpl *a2)
{
  int v3;
  uint64_t v4;
  WTF *v5;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v3)
  {
    v5 = *(WTF **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      WTF::RefCounted<WebKit::SafeBrowsingWarning>::deref(v5, a2);
  }
  else
  {
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

WTF *WebKit::WebFramePolicyListenerProxy::download(WTF *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF *v3;

  v1 = *((_QWORD *)this + 8);
  if (v1)
  {
    v3 = 0;
    *((_QWORD *)this + 8) = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, WTF **, _QWORD, _QWORD))(*(_QWORD *)v1 + 16))(v1, 1, 0, 0, &v3, 0, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    this = v3;
    v3 = 0;
    if (this)
      return WTF::RefCounted<WebKit::SafeBrowsingWarning>::deref(this, v2);
  }
  return this;
}

WTF *WebKit::WebFramePolicyListenerProxy::ignore(WTF *result, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF *v4;

  v2 = *((_QWORD *)result + 8);
  if (v2)
  {
    v4 = 0;
    *((_QWORD *)result + 8) = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, WTF **, _QWORD, uint64_t))(*(_QWORD *)v2 + 16))(v2, 2, 0, 0, &v4, 0, a2);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = v4;
    v4 = 0;
    if (result)
      return WTF::RefCounted<WebKit::SafeBrowsingWarning>::deref(result, v3);
  }
  return result;
}

uint64_t WebKit::WebFrameProxy::webFrame(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD v4[2];

  result = 0;
  v4[0] = a1;
  v4[1] = a2;
  if (a2 != -1 && a2 | a1)
  {
    {
      WebKit::allFrames(void)::map = 0;
    }
    return WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebBackForwardListItem,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&WebKit::allFrames(void)::map, v4);
  }
  return result;
}

BOOL WebKit::WebFrameProxy::canCreateFrame(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  _QWORD v4[2];

  result = 0;
  v4[0] = a1;
  v4[1] = a2;
  if (a2 != -1 && a2 | a1)
  {
    {
      WebKit::allFrames(void)::map = 0;
    }
    return !WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&WebKit::allFrames(void)::map, v4);
  }
  return result;
}

uint64_t WebKit::WebFrameProxy::WebFrameProxy(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  int v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v33;
  unsigned int v34;
  __int128 v35;
  unsigned int v36;
  __int16 v37;
  char v38;

  *(_QWORD *)&v35 = a4;
  *((_QWORD *)&v35 + 1) = a5;
  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E34D36F8;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v8 = *(unsigned int **)(a2 + 24);
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 24) = v8;
  ++*a3;
  *(_QWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 40) = 2;
  *(_QWORD *)(a1 + 48) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 48));
  *(_QWORD *)(a1 + 88) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 88));
  *(_QWORD *)(a1 + 128) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 128));
  *(_QWORD *)(a1 + 168) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 168));
  *(_OWORD *)(a1 + 233) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = v35;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 336));
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 444) = 0;
  *(_BYTE *)(a1 + 452) = 0;
  {
    v10 = WebKit::allFrames(void)::map;
    if (WebKit::allFrames(void)::map)
    {
LABEL_6:
      v11 = *(_DWORD *)(v10 - 8);
      goto LABEL_7;
    }
  }
  else
  {
    WebKit::allFrames(void)::map = 0;
  }
  WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand();
  v10 = WebKit::allFrames(void)::map;
  if (WebKit::allFrames(void)::map)
    goto LABEL_6;
  v11 = 0;
LABEL_7:
  v36 = -1640531527;
  v37 = 0;
  v38 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v36, &v35);
  v12 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v36) & v11;
  v13 = (unint64_t *)(v10 + 24 * v12);
  v15 = *v13;
  v14 = v13[1];
  if (*(_OWORD *)v13 != 0)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (__PAIR128__(v14, v15) == v35)
      {
        WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1);
        v29 = *(unsigned int **)(a1 + 16);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 + 1, v29));
        v31 = (unsigned int *)v13[2];
        v13[2] = (unint64_t)v29;
        if (v31)
        {
          do
          {
            v33 = __ldaxr(v31);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v31));
          if (!v34)
          {
            atomic_store(1u, v31);
            WTF::fastFree((WTF *)v31, v28);
          }
        }
        goto LABEL_33;
      }
      if (v14 == -1)
        v16 = v13;
      v12 = (v12 + v17) & v11;
      v13 = (unint64_t *)(v10 + 24 * v12);
      v15 = *v13;
      v14 = v13[1];
      ++v17;
    }
    while (*(_OWORD *)v13 != 0);
    if (v16)
    {
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      --*(_DWORD *)(WebKit::allFrames(void)::map - 16);
      v13 = v16;
    }
  }
  *(_OWORD *)v13 = v35;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1);
  v19 = *(unsigned int **)(a1 + 16);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  v21 = (unsigned int *)v13[2];
  v13[2] = (unint64_t)v19;
  if (v21)
  {
    do
    {
      v23 = __ldaxr(v21);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v21));
    if (!v24)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v18);
    }
  }
  if (WebKit::allFrames(void)::map)
    v22 = *(_DWORD *)(WebKit::allFrames(void)::map - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(WebKit::allFrames(void)::map - 12) = v22;
  if (WebKit::allFrames(void)::map)
    v25 = *(_DWORD *)(WebKit::allFrames(void)::map - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(WebKit::allFrames(void)::map - 16) + v25);
  v27 = *(unsigned int *)(WebKit::allFrames(void)::map - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (3 * v27 <= 4 * v26)
LABEL_30:
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand();
LABEL_33:
  ++dword_1ECE73818;
  return a1;
}

void WebKit::WebFrameProxy::~WebFrameProxy(WebKit::WebFrameProxy *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v23;
  const void *v24;
  WebKit::WebFrameProxy *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WebKit::FrameProcess *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  __int16 v50;
  char v51;
  char v52;

  *(_QWORD *)this = &off_1E34D36F8;
  --dword_1ECE73818;
  v3 = *((_QWORD *)this + 53);
  if (v3)
  {
    *((_QWORD *)this + 53) = 0;
    LOBYTE(v49) = 0;
    v52 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, unsigned int *))(*(_QWORD *)v3 + 16))(v3, 0, 0, &v49);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  {
    WebKit::allFrames(void)::map = 0;
    goto LABEL_36;
  }
  v4 = WebKit::allFrames(void)::map;
  if (!WebKit::allFrames(void)::map)
    goto LABEL_36;
  v5 = *(_DWORD *)(WebKit::allFrames(void)::map - 8);
  v49 = -1640531527;
  v50 = 0;
  v51 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v49, (_QWORD *)this + 34);
  v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v49);
  v7 = *((_QWORD *)this + 34);
  v8 = *((_QWORD *)this + 35);
  v9 = v6 & v5;
  v10 = (uint64_t *)(v4 + 24 * (v6 & v5));
  v11 = *v10;
  v12 = v10[1];
  if (*v10 == v7 && v12 == v8)
  {
LABEL_16:
    v16 = WebKit::allFrames(void)::map;
    if (!WebKit::allFrames(void)::map)
    {
LABEL_21:
      if ((uint64_t *)v16 != v10)
      {
        *(_OWORD *)v10 = xmmword_1978CF7D0;
        v17 = (unsigned int *)v10[2];
        v10[2] = 0;
        if (v17)
        {
          do
          {
            v19 = __ldaxr(v17);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v17));
          if (!v20)
          {
            atomic_store(1u, v17);
            WTF::fastFree((WTF *)v17, a2);
          }
        }
        ++*(_DWORD *)(WebKit::allFrames(void)::map - 16);
        if (WebKit::allFrames(void)::map)
          v18 = *(_DWORD *)(WebKit::allFrames(void)::map - 12) - 1;
        else
          v18 = -1;
        *(_DWORD *)(WebKit::allFrames(void)::map - 12) = v18;
        if (WebKit::allFrames(void)::map)
        {
          v21 = *(_DWORD *)(WebKit::allFrames(void)::map - 4);
          if (6 * *(_DWORD *)(WebKit::allFrames(void)::map - 12) < v21 && v21 >= 9)
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebFrameProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v21 >> 1);
        }
      }
      goto LABEL_36;
    }
LABEL_20:
    v16 += 24 * *(unsigned int *)(v16 - 4);
    if ((uint64_t *)v16 == v10)
      goto LABEL_36;
    goto LABEL_21;
  }
  v14 = 1;
  while (v11 | v12)
  {
    v9 = (v9 + v14) & v5;
    v10 = (uint64_t *)(v4 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    ++v14;
    if (*v10 == v7 && v12 == v8)
      goto LABEL_16;
  }
  v16 = WebKit::allFrames(void)::map;
  if (WebKit::allFrames(void)::map)
  {
    v10 = (uint64_t *)(WebKit::allFrames(void)::map + 24 * *(unsigned int *)(WebKit::allFrames(void)::map - 4));
    goto LABEL_20;
  }
LABEL_36:
  v23 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = (const void *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v24)
    CFRelease(v24);
  v25 = (WebKit::WebFrameProxy *)*((_QWORD *)this + 50);
  if (v25 == (WebKit::WebFrameProxy *)((char *)this + 376))
  {
    v26 = 4;
    v25 = (WebKit::WebFrameProxy *)((char *)this + 376);
  }
  else
  {
    if (!v25)
      goto LABEL_45;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_45:
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v28 -= 2;
  }
  std::unique_ptr<WebKit::ProvisionalFrameProxy>::reset[abi:sn180100]((WebKit::ProvisionalFrameProxy **)this + 40, 0);
  v30 = (unsigned int *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((WTF *)v30, v29);
    }
  }
  WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::deleteAllNodes((uint64_t)this + 288, v29);
  v34 = *((_QWORD *)this + 36);
  if (v34)
    WTF::fastFree((WTF *)(v34 - 16), v33);
  v35 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v35)
    CFRelease(*(CFTypeRef *)(v35 + 8));
  v36 = (const void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v36)
    CFRelease(v36);
  v37 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v39 -= 2;
  }
  WebKit::FrameLoadState::~FrameLoadState((WebKit::WebFrameProxy *)((char *)this + 40), v33);
  v41 = (WebKit::FrameProcess *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v41)
    WTF::RefCounted<WebKit::FrameProcess>::deref(v41, v40);
  v42 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v42)
  {
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v42);
      WTF::fastFree((WTF *)v42, v40);
    }
  }
  v45 = *((_QWORD *)this + 2);
  if (v45)
  {
    *(_QWORD *)(v45 + 8) = 0;
    v46 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v46)
    {
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        atomic_store(1u, v46);
        WTF::fastFree((WTF *)v46, v40);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WebKit::WebFrameProxy::~WebFrameProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebFrameProxy::provisionalLoadProcess(WebKit::WebFrameProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;

  v1 = *((_QWORD *)this + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    return *(_QWORD *)(v2 + 16);
  }
  v4 = *((_QWORD *)this + 3);
  if (!v4)
    goto LABEL_17;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_17;
  v6 = *(_QWORD *)(v5 + 1104);
  if (*(WebKit::WebFrameProxy **)(v5 + 264) == this)
  {
    if (!v6)
      goto LABEL_17;
  }
  else if (!v6 || *(WebKit::WebFrameProxy **)(v6 + 72) != this)
  {
    goto LABEL_17;
  }
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 8), v6);
  v8 = *(_QWORD *)(v6 + 8);
  if (!v8)
    goto LABEL_17;
  do
    v9 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v9 + 1, (unsigned int *)v8));
  v10 = *(_QWORD *)(v8 + 8);
  if (v10)
    v6 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 16);
  do
  {
    v11 = __ldaxr((unsigned int *)v8);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, (unsigned int *)v8));
  if (!v12)
  {
    atomic_store(1u, (unsigned int *)v8);
    v14 = v10;
    WTF::fastFree((WTF *)v8, v7);
    if (v14)
      return v6;
    goto LABEL_17;
  }
  if (!v10)
  {
LABEL_17:
    v2 = *((_QWORD *)this + 4);
    return *(_QWORD *)(v2 + 16);
  }
  return v6;
}

void WebKit::WebFrameProxy::webProcessWillShutDown(WebKit::WebFrameProxy *this, void *a2)
{
  void *v3;
  void *v4;
  uint64_t i;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v16 = *((_QWORD *)this + 36);
  v13 = *(_OWORD *)((char *)this + 296);
  v17 = v13;
  v14 = 0;
  v15 = 0u;
  *((_OWORD *)this + 18) = 0u;
  v18 = 0u;
  *((_QWORD *)this + 38) = 0;
  v19 = 0;
  WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::deleteAllNodes((uint64_t)&v18, a2);
  if ((_QWORD)v18)
    WTF::fastFree((WTF *)(v18 - 16), v3);
  WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::deleteAllNodes((uint64_t)&v14, v3);
  if (v14)
    WTF::fastFree((WTF *)(v14 - 16), v4);
  for (i = v13; i; i = *(_QWORD *)(i + 16))
    WebKit::WebFrameProxy::webProcessWillShutDown(*(WebKit::WebFrameProxy **)i);
  WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::deleteAllNodes((uint64_t)&v16, v4);
  if (v16)
    WTF::fastFree((WTF *)(v16 - 16), v6);
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v6);
    }
  }
  v10 = (WTF *)*((_QWORD *)this + 33);
  if (v10)
  {
    WebKit::WebFramePolicyListenerProxy::ignore(v10, 0);
    v11 = *((_QWORD *)this + 33);
    *((_QWORD *)this + 33) = 0;
    if (v11)
      CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  v12 = *((_QWORD *)this + 53);
  if (v12)
  {
    *((_QWORD *)this + 53) = 0;
    LOBYTE(v18) = 0;
    LOBYTE(v19) = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, __int128 *))(*(_QWORD *)v12 + 16))(v12, 0, 0, &v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void WebKit::WebFrameProxy::navigateServiceWorkerClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[2];
  char v25;
  _QWORD v26[2];
  char v27;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v6 - 8));
    v10 = *(_QWORD *)(a1 + 272);
    v11 = *(_QWORD *)(a1 + 280);
    v23[0] = a2;
    v23[1] = a3;
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v12 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v12 += 2;
    v13 = *(_OWORD *)(a3 + 24);
    v20 = *(_OWORD *)(a3 + 8);
    v21 = v13;
    v14 = *a4;
    *a4 = 0;
    v15 = WTF::fastMalloc((WTF *)0x48);
    *(_QWORD *)v15 = &off_1E34D38A8;
    *(_QWORD *)(v15 + 8) = a1;
    *(_QWORD *)(v15 + 16) = a1;
    if (v12)
      *(_DWORD *)v12 += 2;
    *(_QWORD *)(v15 + 24) = v12;
    v16 = v21;
    *(_OWORD *)(v15 + 32) = v20;
    *(_OWORD *)(v15 + 48) = v16;
    *(_QWORD *)(v15 + 64) = v14;
    v22 = v15;
    v26[0] = v10;
    v26[1] = v11;
    v27 = 1;
    v24[0] = v23;
    v24[1] = &v22;
    v25 = 0;
    WebKit::WebPageProxy::sendToWebPage<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> WebKit::WebPageProxy::sendWithAsyncReplyToProcessContainingFrame<Messages::WebPage::NavigateServiceWorkerClient,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)>>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::NavigateServiceWorkerClient &&,WTF::CompletionHandler<void ()(WebCore::ScheduleLocationChangeResult)> &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::NavigateServiceWorkerClient&)#1}>(v6 - 16, (uint64_t)v26, (uint64_t)v24);
    v18 = v22;
    v22 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v17);
      else
        *(_DWORD *)v12 -= 2;
    }
    CFRelease(*(CFTypeRef *)(v6 - 8));
  }
  else
  {
    v19 = *a4;
    *a4 = 0;
    LOBYTE(v20) = 0;
    LOBYTE(v21) = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, __int128 *))(*(_QWORD *)v19 + 16))(v19, 0, 0, &v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
}

void WebKit::WebFrameProxy::loadURL(WebKit::WebFrameProxy *this, const WTF::URL *a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v8[3];
  _QWORD *v9;
  char v10;
  __int128 v11;
  char v12;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      CFRetain(*(CFTypeRef *)(v4 - 8));
      v11 = *((_OWORD *)this + 17);
      v8[0] = a2;
      v8[1] = a3;
      v12 = 1;
      v8[2] = (char *)this + 272;
      v9 = v8;
      v10 = 0;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::LoadURLInFrame>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::LoadURLInFrame &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::LoadURLInFrame&)#1}>(v4 - 16, (uint64_t)&v11, (uint64_t)&v9);
      CFRelease(*(CFTypeRef *)(v4 - 8));
    }
  }
}

void WebKit::WebFrameProxy::loadData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v12[5];
  _QWORD v13[2];
  _QWORD *v14;
  char v15;
  __int128 v16;
  char v17;

  v13[0] = a2;
  v13[1] = a3;
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      CFRetain(*(CFTypeRef *)(v7 - 8));
      v16 = *(_OWORD *)(a1 + 272);
      v12[0] = v13;
      v12[1] = a4;
      v12[2] = a5;
      v12[3] = a6;
      v12[4] = a1 + 272;
      v17 = 1;
      v14 = v12;
      v15 = 0;
      WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebPage::LoadDataInFrame>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebPage::LoadDataInFrame &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebPage::LoadDataInFrame&)#1}>(v7 - 16, (uint64_t)&v16, (uint64_t)&v14);
      CFRelease(*(CFTypeRef *)(v7 - 8));
    }
  }
}

uint64_t WebKit::WebFrameProxy::isDisplayingMarkupDocument(WebKit::WebFrameProxy *this)
{
  WebCore::MIMETypeRegistry *v1;
  const WTF::String *v2;

  v1 = (WebKit::WebFrameProxy *)((char *)this + 224);
  if ((MEMORY[0x19AEABBCC](*((_QWORD *)this + 28), "text/html", 9) & 1) != 0
    || (MEMORY[0x19AEABBCC](*(_QWORD *)v1, "image/svg+xml", 13) & 1) != 0
    || (MEMORY[0x19AEABBCC](*(_QWORD *)v1, "application/x-webarchive", 24) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return WebCore::MIMETypeRegistry::isXMLMIMEType(v1, v2);
  }
}

WTF::StringImpl *WebKit::WebFrameProxy::didFailProvisionalLoad(WebKit::WebFrameProxy *this)
{
  WTF::StringImpl *result;
  uint64_t v3;
  _BYTE v4[24];

  result = WebKit::FrameLoadState::didFailProvisionalLoad((WebKit::WebFrameProxy *)((char *)this + 40));
  v3 = *((_QWORD *)this + 53);
  if (v3)
  {
    *((_QWORD *)this + 53) = 0;
    v4[0] = 0;
    v4[16] = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, _BYTE *))(*(_QWORD *)v3 + 16))(v3, 0, 0, v4);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

uint64_t WebKit::WebFrameProxy::didFailLoad(uint64_t this)
{
  uint64_t v1;
  _BYTE v2[24];

  *(_DWORD *)(this + 40) = 2;
  v1 = *(_QWORD *)(this + 424);
  if (v1)
  {
    *(_QWORD *)(this + 424) = 0;
    v2[0] = 0;
    v2[16] = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, _BYTE *))(*(_QWORD *)v1 + 16))(v1, 0, 0, v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return this;
}

void WebKit::WebFrameProxy::getWebArchive(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    WebKit::WebPageProxy::getWebArchiveOfFrame(v4 - 16, a1, a2);
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

void WebKit::WebFrameProxy::getMainResourceData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    WebKit::WebPageProxy::getMainResourceDataOfFrame(v4 - 16, a1, a2);
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

void WebKit::WebFrameProxy::getResourceData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v5 - 8));
    WebKit::WebPageProxy::getResourceDataFromFrame(v5 - 16, a1, a2, a3);
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  else
  {
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

void WebKit::WebFrameProxy::disconnect(WebKit::WebFrameProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;

  v1 = *((_QWORD *)this + 39);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 + 8));
      v4 = (_QWORD *)(v2 + 288);
      v10 = (uint64_t *)this;
      v5 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WebKit::WebFrameProxy const*>((uint64_t *)(v2 + 288), &v10);
      v6 = *(uint64_t ***)(v2 + 288);
      if (v6)
        v6 += *((unsigned int *)v6 - 1);
      if (v6 != v5)
      {
        v7 = *v5;
        if (*v5)
        {
          v10 = *v5;
          v8 = (_QWORD *)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>>,WTF::ListHashSetNode<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>> *>((uint64_t *)(v2 + 288), &v10);
          v9 = (_QWORD *)*v4;
          if (*v4)
            v9 += *((unsigned int *)v9 - 1);
          if (v9 != v8)
            WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::remove((uint64_t *)(v2 + 288), v8);
          WTF::ListHashSet<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>,WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>::unlinkAndDelete(v2 + 288, (WTF *)v7);
        }
      }
      CFRelease(*(CFTypeRef *)(v2 + 8));
    }
  }
}

void WebKit::WebFrameProxy::didCreateSubframe(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int i;
  unsigned int v28;
  _QWORD **v29;
  _QWORD *v30;
  NSObject *v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  int v44;
  const char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (WebKit::WebFrameProxy::webFrame(a2, a3))
    return;
  v8 = *(_QWORD *)(a1 + 24);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0)
  {
    v31 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v44 = 136315138;
      v45 = "void WebKit::WebFrameProxy::didCreateSubframe(WebCore::FrameIdentifier, const String &)";
      _os_log_fault_impl(&dword_196BCC000, v31, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebFrameProxy.cpp 415: Invalid message dispatched %s", (uint8_t *)&v44, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 144) + 98) = 1;
    return;
  }
  CFRetain(*(CFTypeRef *)(v9 - 8));
  if (!WebKit::WebFrameProxy::canCreateFrame(a2, a3))
  {
    v41 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v44 = 136315138;
      v45 = "void WebKit::WebFrameProxy::didCreateSubframe(WebCore::FrameIdentifier, const String &)";
      _os_log_fault_impl(&dword_196BCC000, v41, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebFrameProxy.cpp 416: Invalid message dispatched %s", (uint8_t *)&v44, 0xCu);
    }
    v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 144);
    goto LABEL_51;
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(v10 + 16);
  if (a3 != *(_QWORD *)(v11 + 176))
  {
    v43 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v44 = 136315138;
      v45 = "void WebKit::WebFrameProxy::didCreateSubframe(WebCore::FrameIdentifier, const String &)";
      _os_log_fault_impl(&dword_196BCC000, v43, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/WebFrameProxy.cpp 417: Invalid message dispatched %s", (uint8_t *)&v44, 0xCu);
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    }
    v42 = *(_QWORD *)(v11 + 144);
LABEL_51:
    *(_BYTE *)(v42 + 98) = 1;
    goto LABEL_40;
  }
  v12 = API::Object::newObject(0x1C8uLL, 59);
  WebKit::WebFrameProxy::WebFrameProxy(v12, v9 - 16, (_DWORD *)v10, a2, a3);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 16), a1);
  v14 = *(unsigned int **)(a1 + 16);
  if (v14)
  {
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v16 = *(unsigned int **)(v12 + 312);
  *(_QWORD *)(v12 + 312) = v14;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v13);
    }
  }
  WTF::String::operator=((WTF::StringImpl **)(v12 + 240), a4);
  WebKit::WebPageProxy::createRemoteSubframesInOtherProcesses((WebKit::WebPageProxy *)(v9 - 16), (WebKit::WebFrameProxy *)v12, a4);
  v19 = (uint64_t *)(a1 + 288);
  v20 = *(_QWORD *)(a1 + 288);
  if (v20
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::expand((uint64_t *)(a1 + 288), 0), (v20 = *v19) != 0))
  {
    v21 = *(_DWORD *)(v20 - 8);
  }
  else
  {
    v21 = 0;
  }
  v22 = 0;
  v23 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
  v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
  v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
  v26 = (v25 >> 31) ^ v25;
  for (i = 1; ; ++i)
  {
    v28 = v26 & v21;
    v29 = (_QWORD **)(v20 + 8 * v28);
    v30 = *v29;
    if (*v29 == (_QWORD *)-1)
    {
      v22 = (_QWORD *)(v20 + 8 * v28);
      goto LABEL_21;
    }
    if (!v30)
      break;
    if (*v30 == v12)
    {
      CFRelease(*(CFTypeRef *)(v12 + 8));
      goto LABEL_40;
    }
LABEL_21:
    v26 = i + v28;
  }
  if (v22)
  {
    *v22 = 0;
    --*(_DWORD *)(*v19 - 16);
    v29 = (_QWORD **)v22;
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v32[1] = 0;
  v32[2] = 0;
  *v32 = v12;
  *v29 = v32;
  v33 = *v19;
  if (*v19)
    v34 = *(_DWORD *)(v33 - 12) + 1;
  else
    v34 = 1;
  *(_DWORD *)(v33 - 12) = v34;
  v35 = *v19;
  if (*v19)
    v36 = *(_DWORD *)(v35 - 12);
  else
    v36 = 0;
  v37 = (*(_DWORD *)(v35 - 16) + v36);
  v38 = *(unsigned int *)(v35 - 4);
  if (v38 > 0x400)
  {
    if (v38 <= 2 * v37)
LABEL_35:
      v32 = (_QWORD *)*WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebKit::WebFrameProxy,WTF::RawPtrTraits<WebKit::WebFrameProxy>,WTF::DefaultRefDerefTraits<WebKit::WebFrameProxy>>> *>>::expand((uint64_t *)(a1 + 288), v29);
  }
  else if (3 * v38 <= 4 * v37)
  {
    goto LABEL_35;
  }
  v39 = *(_QWORD *)(a1 + 304);
  v32[1] = v39;
  v32[2] = 0;
  if (v39)
    v40 = (_QWORD *)(v39 + 16);
  else
    v40 = (_QWORD *)(a1 + 296);
  *v40 = v32;
  *(_QWORD *)(a1 + 304) = v32;
LABEL_40:
  CFRelease(*(CFTypeRef *)(v9 - 8));
}

